var $M.0: [ref]i8;

var $M.1: i32;

var $M.2: i32;

var $M.3: i32;

var $M.4: ref;

var $M.5: i32;

var $M.6: ref;

var $M.7: i32;

var $M.8: ref;

var $M.9: i32;

var $M.10: ref;

var $M.11: i8;

var $M.12: i8;

var $M.13: i8;

var $M.14: i32;

var $M.15: i32;

var $M.16: [ref]i32;

var $M.17: ref;

var $M.18: i32;

var $M.19: i32;

var $M.20: i32;

var $M.21: [ref]i8;

var $M.22: [ref]i8;

var $M.23: i32;

var $M.24: i8;

var $M.25: i32;

var $M.26: i32;

var $M.27: ref;

var $M.28: i32;

var $M.29: i32;

var $M.30: ref;

var $M.31: i32;

var $M.32: i32;

var $M.33: ref;

var $M.34: i32;

var $M.35: i32;

var $M.36: ref;

var $M.37: i32;

var $M.38: ref;

var $M.39: i32;

var $M.41: i32;

var $M.43: i32;

var $M.45: [ref]i8;

var $M.46: [ref]i8;

var $M.47: [ref]i64;

var $M.48: i32;

var $M.49: ref;

var $M.50: [ref]i8;

var $M.51: [ref]i32;

var $M.52: [ref]ref;

var $M.53: [ref]ref;

var $M.54: [ref]ref;

var $M.55: [ref]ref;

var $M.56: [ref]i64;

var $M.57: [ref]i64;

var $M.58: [ref]i64;

var $M.59: [ref]i64;

var $M.60: [ref]i64;

var $M.61: [ref]i64;

var $M.62: [ref]i64;

var $M.63: [ref]i64;

var $M.64: ref;

var $M.65: [ref]i8;

var $M.66: [ref]i8;

var $M.68: i32;

var $M.69: i32;

var $M.70: i32;

var $M.71: i32;

var $M.73: ref;

var $M.74: ref;

var $M.75: ref;

var $M.76: ref;

var $M.77: [ref]i64;

var $M.78: ref;

var $M.79: ref;

var $M.80: ref;

var $M.81: ref;

var $M.82: ref;

var $M.83: i32;

var $M.84: i32;

var $M.85: i32;

var $M.86: i32;

var $M.87: i32;

var $M.88: i32;

var $M.89: i32;

var $M.90: i32;

var $M.91: i32;

var $M.92: i32;

var $M.93: i32;

var $M.94: i32;

var $M.95: i32;

var $M.96: i32;

var $M.97: i32;

var $M.98: i32;

var $M.99: i32;

var $M.100: i8;

var $M.102: ref;

var $M.103: ref;

var $M.104: i32;

var $M.106: [ref]i32;

var $M.107: [ref]i32;

var $M.108: [ref]i32;

var $M.109: [ref]i32;

var $M.110: [ref]i32;

var $M.111: [ref]i32;

var $M.112: [ref]i64;

var $M.175: [ref]i8;

var $M.176: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 674736);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_irq_1_3: ref;

axiom ldv_irq_1_3 == $sub.ref(0, 1028);

const ldv_irq_1_0: ref;

axiom ldv_irq_1_0 == $sub.ref(0, 2056);

const ldv_irq_1_2: ref;

axiom ldv_irq_1_2 == $sub.ref(0, 3084);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 4112);

const ldv_irq_1_1: ref;

axiom ldv_irq_1_1 == $sub.ref(0, 5140);

const hdlcdev_ops_group1: ref;

axiom hdlcdev_ops_group1 == $sub.ref(0, 6172);

const ldv_work_2_0: ref;

axiom ldv_work_2_0 == $sub.ref(0, 7200);

const ldv_work_2_1: ref;

axiom ldv_work_2_1 == $sub.ref(0, 8228);

const ldv_work_2_2: ref;

axiom ldv_work_2_2 == $sub.ref(0, 9256);

const ldv_work_2_3: ref;

axiom ldv_work_2_3 == $sub.ref(0, 10284);

const ldv_timer_3_0: ref;

axiom ldv_timer_3_0 == $sub.ref(0, 11312);

const ldv_timer_list_3_0: ref;

axiom ldv_timer_list_3_0 == $sub.ref(0, 12344);

const ldv_timer_3_1: ref;

axiom ldv_timer_3_1 == $sub.ref(0, 13372);

const ldv_timer_list_3_1: ref;

axiom ldv_timer_list_3_1 == $sub.ref(0, 14404);

const ldv_timer_3_2: ref;

axiom ldv_timer_3_2 == $sub.ref(0, 15432);

const ldv_timer_list_3_2: ref;

axiom ldv_timer_list_3_2 == $sub.ref(0, 16464);

const ldv_timer_3_3: ref;

axiom ldv_timer_3_3 == $sub.ref(0, 17492);

const ldv_timer_list_3_3: ref;

axiom ldv_timer_list_3_3 == $sub.ref(0, 18524);

const ldv_timer_list_4_0: ref;

axiom ldv_timer_list_4_0 == $sub.ref(0, 19556);

const ldv_timer_4_0: ref;

axiom ldv_timer_4_0 == $sub.ref(0, 20584);

const ldv_timer_list_4_1: ref;

axiom ldv_timer_list_4_1 == $sub.ref(0, 21616);

const ldv_timer_4_1: ref;

axiom ldv_timer_4_1 == $sub.ref(0, 22644);

const ldv_timer_list_4_2: ref;

axiom ldv_timer_list_4_2 == $sub.ref(0, 23676);

const ldv_timer_4_2: ref;

axiom ldv_timer_4_2 == $sub.ref(0, 24704);

const ldv_timer_list_4_3: ref;

axiom ldv_timer_list_4_3 == $sub.ref(0, 25736);

const ldv_timer_4_3: ref;

axiom ldv_timer_4_3 == $sub.ref(0, 26764);

const ldv_work_struct_2_0: ref;

axiom ldv_work_struct_2_0 == $sub.ref(0, 27796);

const ldv_work_struct_2_1: ref;

axiom ldv_work_struct_2_1 == $sub.ref(0, 28828);

const ldv_work_struct_2_2: ref;

axiom ldv_work_struct_2_2 == $sub.ref(0, 29860);

const ldv_work_struct_2_3: ref;

axiom ldv_work_struct_2_3 == $sub.ref(0, 30892);

const port_ops_group1: ref;

axiom port_ops_group1 == $sub.ref(0, 31924);

const ldv_irq_line_1_0: ref;

axiom ldv_irq_line_1_0 == $sub.ref(0, 32952);

const ldv_irq_data_1_0: ref;

axiom ldv_irq_data_1_0 == $sub.ref(0, 33984);

const ldv_irq_line_1_1: ref;

axiom ldv_irq_line_1_1 == $sub.ref(0, 35012);

const ldv_irq_data_1_1: ref;

axiom ldv_irq_data_1_1 == $sub.ref(0, 36044);

const ldv_irq_line_1_2: ref;

axiom ldv_irq_line_1_2 == $sub.ref(0, 37072);

const ldv_irq_data_1_2: ref;

axiom ldv_irq_data_1_2 == $sub.ref(0, 38104);

const ldv_irq_line_1_3: ref;

axiom ldv_irq_line_1_3 == $sub.ref(0, 39132);

const ldv_irq_data_1_3: ref;

axiom ldv_irq_data_1_3 == $sub.ref(0, 40164);

const synclinkmp_proc_fops_group1: ref;

axiom synclinkmp_proc_fops_group1 == $sub.ref(0, 41196);

const synclinkmp_proc_fops_group2: ref;

axiom synclinkmp_proc_fops_group2 == $sub.ref(0, 42228);

const synclinkmp_pci_driver_group1: ref;

axiom synclinkmp_pci_driver_group1 == $sub.ref(0, 43260);

const ops_group0: ref;

axiom ops_group0 == $sub.ref(0, 44292);

const ops_group1: ref;

axiom ops_group1 == $sub.ref(0, 45324);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 46352);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 47380);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 48408);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 49436);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 50464);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 51492);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 52520);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 53548);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 54576);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 55604);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 56632);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 57660);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 58688);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 59716);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 60744);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 61772);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 62800);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 63828);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 64856);

const pci_counter: ref;

axiom pci_counter == $sub.ref(0, 65884);

const {:count 2} __mod_pci__synclinkmp_pci_tbl_device_table: ref;

axiom __mod_pci__synclinkmp_pci_tbl_device_table == $sub.ref(0, 66972);

const synclinkmp_proc_fops: ref;

axiom synclinkmp_proc_fops == $sub.ref(0, 68220);

const ops: ref;

axiom ops == $sub.ref(0, 69516);

const ttymajor: ref;

axiom ttymajor == $sub.ref(0, 70544);

const break_on_load: ref;

axiom break_on_load == $sub.ref(0, 71569);

const {:count 2} synclinkmp_pci_tbl: ref;

axiom synclinkmp_pci_tbl == $sub.ref(0, 72657);

const synclinkmp_pci_driver: ref;

axiom synclinkmp_pci_driver == $sub.ref(0, 73993);

const serial_driver: ref;

axiom serial_driver == $sub.ref(0, 75025);

const driver_name: ref;

axiom driver_name == $sub.ref(0, 76057);

const driver_version: ref;

axiom driver_version == $sub.ref(0, 77089);

const dma_priority: ref;

axiom dma_priority == $sub.ref(0, 78114);

const misc_ctrl_value: ref;

axiom misc_ctrl_value == $sub.ref(0, 79142);

const read_ahead_count: ref;

axiom read_ahead_count == $sub.ref(0, 80170);

const lcr1_brdr_value: ref;

axiom lcr1_brdr_value == $sub.ref(0, 81198);

const sca_pci_load_interval: ref;

axiom sca_pci_load_interval == $sub.ref(0, 82226);

const hdlcdev_ops: ref;

axiom hdlcdev_ops == $sub.ref(0, 83778);

const synclinkmp_device_list: ref;

axiom synclinkmp_device_list == $sub.ref(0, 84810);

const {:count 12} maxframe: ref;

axiom maxframe == $sub.ref(0, 85882);

const synclinkmp_device_count: ref;

axiom synclinkmp_device_count == $sub.ref(0, 86910);

const default_params: ref;

axiom default_params == $sub.ref(0, 87982);

const port_ops: ref;

axiom port_ops == $sub.ref(0, 89046);

const synclinkmp_adapter_count: ref;

axiom synclinkmp_adapter_count == $sub.ref(0, 90074);

const rx_active_fifo_level: ref;

axiom rx_active_fifo_level == $sub.ref(0, 91099);

const tx_active_fifo_level: ref;

axiom tx_active_fifo_level == $sub.ref(0, 92124);

const tx_negate_fifo_level: ref;

axiom tx_negate_fifo_level == $sub.ref(0, 93149);

const debug_level: ref;

axiom debug_level == $sub.ref(0, 94177);

const {:count 24} .str.56: ref;

axiom .str.56 == $sub.ref(0, 95225);

const {:count 21} .str.10: ref;

axiom .str.10 == $sub.ref(0, 96270);

const {:count 204} .str.1: ref;

axiom .str.1 == $sub.ref(0, 97498);

const {:count 22} .str.49: ref;

axiom .str.49 == $sub.ref(0, 98544);

const {:count 22} .str.35: ref;

axiom .str.35 == $sub.ref(0, 99590);

const {:count 21} .str.48: ref;

axiom .str.48 == $sub.ref(0, 100635);

const {:count 33} .str.50: ref;

axiom .str.50 == $sub.ref(0, 101692);

const {:count 22} .str.46: ref;

axiom .str.46 == $sub.ref(0, 102738);

const {:count 33} .str.47: ref;

axiom .str.47 == $sub.ref(0, 103795);

const {:count 21} .str.51: ref;

axiom .str.51 == $sub.ref(0, 104840);

const {:count 31} .str.52: ref;

axiom .str.52 == $sub.ref(0, 105895);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 26} .str.53: ref;

axiom .str.53 == $sub.ref(0, 106945);

const {:count 43} .str.54: ref;

axiom .str.54 == $sub.ref(0, 108012);

const {:count 27} .str.55: ref;

axiom .str.55 == $sub.ref(0, 109063);

const {:count 18} .str.90: ref;

axiom .str.90 == $sub.ref(0, 110105);

const {:count 26} .str.113: ref;

axiom .str.113 == $sub.ref(0, 111155);

const {:count 11} .str.70: ref;

axiom .str.70 == $sub.ref(0, 112190);

const {:count 30} .str.57: ref;

axiom .str.57 == $sub.ref(0, 113244);

const {:count 34} .str.58: ref;

axiom .str.58 == $sub.ref(0, 114302);

const {:count 43} .str.59: ref;

axiom .str.59 == $sub.ref(0, 115369);

const {:count 26} .str.84: ref;

axiom .str.84 == $sub.ref(0, 116419);

const {:count 55} .str.85: ref;

axiom .str.85 == $sub.ref(0, 117498);

const {:count 52} .str.86: ref;

axiom .str.86 == $sub.ref(0, 118574);

const {:count 39} .str.87: ref;

axiom .str.87 == $sub.ref(0, 119637);

const {:count 37} .str.88: ref;

axiom .str.88 == $sub.ref(0, 120698);

const {:count 46} .str.34: ref;

axiom .str.34 == $sub.ref(0, 121768);

const {:count 16} .str.43: ref;

axiom .str.43 == $sub.ref(0, 122808);

const {:count 39} .str.44: ref;

axiom .str.44 == $sub.ref(0, 123871);

const {:count 13} .str.36: ref;

axiom .str.36 == $sub.ref(0, 124908);

const {:count 13} .str.37: ref;

axiom .str.37 == $sub.ref(0, 125945);

const {:count 6} .str.38: ref;

axiom .str.38 == $sub.ref(0, 126975);

const {:count 4} .str.39: ref;

axiom .str.39 == $sub.ref(0, 128003);

const {:count 3} .str.40: ref;

axiom .str.40 == $sub.ref(0, 129030);

const {:count 2} .str.41: ref;

axiom .str.41 == $sub.ref(0, 130056);

const {:count 2} .str.42: ref;

axiom .str.42 == $sub.ref(0, 131082);

const {:count 34} .str.19: ref;

axiom .str.19 == $sub.ref(0, 132140);

const .str: ref;

axiom .str == $sub.ref(0, 133205);

const {:count 61} .str.2: ref;

axiom .str.2 == $sub.ref(0, 134290);

const {:count 60} .str.3: ref;

axiom .str.3 == $sub.ref(0, 135374);

const {:count 29} .str.4: ref;

axiom .str.4 == $sub.ref(0, 136427);

const {:count 39} .str.5: ref;

axiom .str.5 == $sub.ref(0, 137490);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 23} .str.26: ref;

axiom .str.26 == $sub.ref(0, 138537);

const {:count 38} .str.25: ref;

axiom .str.25 == $sub.ref(0, 139599);

const {:count 41} .str.24: ref;

axiom .str.24 == $sub.ref(0, 140664);

const {:count 38} .str.23: ref;

axiom .str.23 == $sub.ref(0, 141726);

const {:count 41} .str.22: ref;

axiom .str.22 == $sub.ref(0, 142791);

const {:count 33} .str.20: ref;

axiom .str.20 == $sub.ref(0, 143848);

const {:count 31} .str.12: ref;

axiom .str.12 == $sub.ref(0, 144903);

const {:count 3} .str.14: ref;

axiom .str.14 == $sub.ref(0, 145930);

const {:count 4} .str.15: ref;

axiom .str.15 == $sub.ref(0, 146958);

const {:count 16} .str.13: ref;

axiom .str.13 == $sub.ref(0, 147998);

const {:count 23} .str.16: ref;

axiom .str.16 == $sub.ref(0, 149045);

const {:count 16} .str.17: ref;

axiom .str.17 == $sub.ref(0, 150085);

const {:count 15} .str.18: ref;

axiom .str.18 == $sub.ref(0, 151124);

const {:count 33} .str.21: ref;

axiom .str.21 == $sub.ref(0, 152181);

const {:count 38} .str.11: ref;

axiom .str.11 == $sub.ref(0, 153243);

const {:count 35} .str.9: ref;

axiom .str.9 == $sub.ref(0, 154302);

const {:count 21} .str.6: ref;

axiom .str.6 == $sub.ref(0, 155347);

const {:count 22} .str.7: ref;

axiom .str.7 == $sub.ref(0, 156393);

const {:count 54} .str.8: ref;

axiom .str.8 == $sub.ref(0, 157471);

const {:count 51} .str.82: ref;

axiom .str.82 == $sub.ref(0, 158546);

const {:count 44} .str.83: ref;

axiom .str.83 == $sub.ref(0, 159614);

const iomem_resource: ref;

axiom iomem_resource == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 40} .str.71: ref;

axiom .str.71 == $sub.ref(0, 160678);

const {:count 44} .str.72: ref;

axiom .str.72 == $sub.ref(0, 161746);

const {:count 44} .str.73: ref;

axiom .str.73 == $sub.ref(0, 162814);

const {:count 50} .str.74: ref;

axiom .str.74 == $sub.ref(0, 163888);

const {:count 49} .str.75: ref;

axiom .str.75 == $sub.ref(0, 164961);

const {:count 46} .str.76: ref;

axiom .str.76 == $sub.ref(0, 166031);

const {:count 46} .str.77: ref;

axiom .str.77 == $sub.ref(0, 167101);

const {:count 61} .str.78: ref;

axiom .str.78 == $sub.ref(0, 168186);

const {:count 61} .str.79: ref;

axiom .str.79 == $sub.ref(0, 169271);

const {:count 37} .str.80: ref;

axiom .str.80 == $sub.ref(0, 170332);

const {:count 36} .str.81: ref;

axiom .str.81 == $sub.ref(0, 171392);

const {:count 12} .str.65: ref;

axiom .str.65 == $sub.ref(0, 172428);

const {:count 73} .str.66: ref;

axiom .str.66 == $sub.ref(0, 173525);

const {:count 36} .str.67: ref;

axiom .str.67 == $sub.ref(0, 174585);

const {:count 36} .str.68: ref;

axiom .str.68 == $sub.ref(0, 175645);

const {:count 19} .str.69: ref;

axiom .str.69 == $sub.ref(0, 176688);

const {:count 74} .str.60: ref;

axiom .str.60 == $sub.ref(0, 177786);

const {:count 14} .str.61: ref;

axiom .str.61 == $sub.ref(0, 178824);

const {:count 27} .str.62: ref;

axiom .str.62 == $sub.ref(0, 179875);

const {:count 20} .str.63: ref;

axiom .str.63 == $sub.ref(0, 180919);

const {:count 25} .str.64: ref;

axiom .str.64 == $sub.ref(0, 181968);

const {:count 24} .str.27: ref;

axiom .str.27 == $sub.ref(0, 183016);

const {:count 31} .str.28: ref;

axiom .str.28 == $sub.ref(0, 184071);

const {:count 30} .str.29: ref;

axiom .str.29 == $sub.ref(0, 185125);

const {:count 44} .str.30: ref;

axiom .str.30 == $sub.ref(0, 186193);

const {:count 38} .str.31: ref;

axiom .str.31 == $sub.ref(0, 187255);

const {:count 29} .str.32: ref;

axiom .str.32 == $sub.ref(0, 188308);

const {:count 29} .str.45: ref;

axiom .str.45 == $sub.ref(0, 189361);

const {:count 24} .str.33: ref;

axiom .str.33 == $sub.ref(0, 190409);

const {:count 27} .str.159: ref;

axiom .str.159 == $sub.ref(0, 191460);

const {:count 33} .str.172: ref;

axiom .str.172 == $sub.ref(0, 192517);

const {:count 26} .str.121: ref;

axiom .str.121 == $sub.ref(0, 193567);

const {:count 11} .str.122: ref;

axiom .str.122 == $sub.ref(0, 194602);

const {:count 35} .str.176: ref;

axiom .str.176 == $sub.ref(0, 195661);

const {:count 16} .str.177: ref;

axiom .str.177 == $sub.ref(0, 196701);

const {:count 34} .str.178: ref;

axiom .str.178 == $sub.ref(0, 197759);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 32} .str.139: ref;

axiom .str.139 == $sub.ref(0, 198815);

const {:count 13} .str.140: ref;

axiom .str.140 == $sub.ref(0, 199852);

const {:count 25} .str.168: ref;

axiom .str.168 == $sub.ref(0, 200901);

const {:count 10} .str.169: ref;

axiom .str.169 == $sub.ref(0, 201935);

const {:count 20} .str.127: ref;

axiom .str.127 == $sub.ref(0, 202979);

const {:count 7} .str.128: ref;

axiom .str.128 == $sub.ref(0, 204010);

const {:count 11} .str.119: ref;

axiom .str.119 == $sub.ref(0, 205045);

const {:count 24} .str.120: ref;

axiom .str.120 == $sub.ref(0, 206093);

const {:count 8} .str.157: ref;

axiom .str.157 == $sub.ref(0, 207125);

const {:count 21} .str.158: ref;

axiom .str.158 == $sub.ref(0, 208170);

const {:count 30} .str.129: ref;

axiom .str.129 == $sub.ref(0, 209224);

const {:count 11} .str.130: ref;

axiom .str.130 == $sub.ref(0, 210259);

const {:count 28} .str.125: ref;

axiom .str.125 == $sub.ref(0, 211311);

const {:count 9} .str.126: ref;

axiom .str.126 == $sub.ref(0, 212344);

const {:count 25} .str.138: ref;

axiom .str.138 == $sub.ref(0, 213393);

const {:count 28} .str.141: ref;

axiom .str.141 == $sub.ref(0, 214445);

const {:count 6} .str.142: ref;

axiom .str.142 == $sub.ref(0, 215475);

const {:count 31} .str.153: ref;

axiom .str.153 == $sub.ref(0, 216530);

const {:count 24} .str.143: ref;

axiom .str.143 == $sub.ref(0, 217578);

const {:count 22} .str.152: ref;

axiom .str.152 == $sub.ref(0, 218624);

const {:count 25} .str.151: ref;

axiom .str.151 == $sub.ref(0, 219673);

const {:count 25} .str.150: ref;

axiom .str.150 == $sub.ref(0, 220722);

const {:count 26} .str.149: ref;

axiom .str.149 == $sub.ref(0, 221772);

const {:count 27} .str.147: ref;

axiom .str.147 == $sub.ref(0, 222823);

const {:count 48} .str.148: ref;

axiom .str.148 == $sub.ref(0, 223895);

const {:count 22} .str.145: ref;

axiom .str.145 == $sub.ref(0, 224941);

const {:count 48} .str.146: ref;

axiom .str.146 == $sub.ref(0, 226013);

const {:count 48} .str.144: ref;

axiom .str.144 == $sub.ref(0, 227085);

const {:count 16} .str.170: ref;

axiom .str.170 == $sub.ref(0, 228125);

const {:count 32} .str.171: ref;

axiom .str.171 == $sub.ref(0, 229181);

const {:count 11} .str.166: ref;

axiom .str.166 == $sub.ref(0, 230216);

const {:count 27} .str.167: ref;

axiom .str.167 == $sub.ref(0, 231267);

const {:count 43} .str.173: ref;

axiom .str.173 == $sub.ref(0, 232334);

const {:count 12} .str.174: ref;

axiom .str.174 == $sub.ref(0, 233370);

const {:count 53} .str.175: ref;

axiom .str.175 == $sub.ref(0, 234447);

const {:count 24} .str.123: ref;

axiom .str.123 == $sub.ref(0, 235495);

const {:count 9} .str.124: ref;

axiom .str.124 == $sub.ref(0, 236528);

const {:count 28} .str.160: ref;

axiom .str.160 == $sub.ref(0, 237580);

const {:count 6} .str.161: ref;

axiom .str.161 == $sub.ref(0, 238610);

const {:count 32} .str.162: ref;

axiom .str.162 == $sub.ref(0, 239666);

const {:count 6} .str.163: ref;

axiom .str.163 == $sub.ref(0, 240696);

const {:count 35} .str.164: ref;

axiom .str.164 == $sub.ref(0, 241755);

const {:count 34} .str.165: ref;

axiom .str.165 == $sub.ref(0, 242813);

const {:count 38} .str.131: ref;

axiom .str.131 == $sub.ref(0, 243875);

const {:count 41} .str.132: ref;

axiom .str.132 == $sub.ref(0, 244940);

const {:count 26} .str.133: ref;

axiom .str.133 == $sub.ref(0, 245990);

const {:count 29} .str.134: ref;

axiom .str.134 == $sub.ref(0, 247043);

const {:count 52} .str.135: ref;

axiom .str.135 == $sub.ref(0, 248119);

const {:count 38} .str.136: ref;

axiom .str.136 == $sub.ref(0, 249181);

const {:count 45} .str.137: ref;

axiom .str.137 == $sub.ref(0, 250250);

const {:count 37} .str.154: ref;

axiom .str.154 == $sub.ref(0, 251311);

const {:count 5} .str.155: ref;

axiom .str.155 == $sub.ref(0, 252340);

const {:count 50} .str.156: ref;

axiom .str.156 == $sub.ref(0, 253414);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 22} .str.89: ref;

axiom .str.89 == $sub.ref(0, 254460);

const {:count 79} .str.91: ref;

axiom .str.91 == $sub.ref(0, 255563);

const {:count 5} .str.92: ref;

axiom .str.92 == $sub.ref(0, 256592);

const {:count 5} .str.93: ref;

axiom .str.93 == $sub.ref(0, 257621);

const {:count 5} .str.94: ref;

axiom .str.94 == $sub.ref(0, 258650);

const {:count 5} .str.95: ref;

axiom .str.95 == $sub.ref(0, 259679);

const {:count 4} .str.96: ref;

axiom .str.96 == $sub.ref(0, 260707);

const {:count 4} .str.97: ref;

axiom .str.97 == $sub.ref(0, 261735);

const {:count 22} .str.98: ref;

axiom .str.98 == $sub.ref(0, 262781);

const {:count 12} .str.99: ref;

axiom .str.99 == $sub.ref(0, 263817);

const {:count 12} .str.100: ref;

axiom .str.100 == $sub.ref(0, 264853);

const {:count 12} .str.101: ref;

axiom .str.101 == $sub.ref(0, 265889);

const {:count 11} .str.102: ref;

axiom .str.102 == $sub.ref(0, 266924);

const {:count 11} .str.103: ref;

axiom .str.103 == $sub.ref(0, 267959);

const {:count 19} .str.104: ref;

axiom .str.104 == $sub.ref(0, 269002);

const {:count 7} .str.105: ref;

axiom .str.105 == $sub.ref(0, 270033);

const {:count 7} .str.106: ref;

axiom .str.106 == $sub.ref(0, 271064);

const {:count 8} .str.107: ref;

axiom .str.107 == $sub.ref(0, 272096);

const {:count 7} .str.108: ref;

axiom .str.108 == $sub.ref(0, 273127);

const {:count 5} .str.109: ref;

axiom .str.109 == $sub.ref(0, 274156);

const {:count 48} .str.110: ref;

axiom .str.110 == $sub.ref(0, 275228);

const {:count 7} .str.114: ref;

axiom .str.114 == $sub.ref(0, 276259);

const {:count 44} .str.115: ref;

axiom .str.115 == $sub.ref(0, 277327);

const {:count 7} .str.116: ref;

axiom .str.116 == $sub.ref(0, 278358);

const tty_std_termios: ref;

axiom tty_std_termios == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 40} .str.117: ref;

axiom .str.117 == $sub.ref(0, 279422);

const {:count 21} .str.118: ref;

axiom .str.118 == $sub.ref(0, 280467);

const {:count 17} .str.111: ref;

axiom .str.111 == $sub.ref(0, 281508);

const {:count 47} .str.112: ref;

axiom .str.112 == $sub.ref(0, 282579);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 283611);

const {:count 3} .str.1.372: ref;

axiom .str.1.372 == $sub.ref(0, 284638);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 285676);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 286704);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 287736);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 288768);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const carrier_raised: ref;

axiom carrier_raised == $sub.ref(0, 289800);

procedure carrier_raised($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0;



implementation carrier_raised($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 16), 6384));
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} ldv_spin_lock();
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} get_signals($p2);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 16), 6384)), $mul.ref(1640, 1));
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} spin_unlock_irqrestore($p3, $u0);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 16), 6384)), $mul.ref(6152, 1));
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const dtr_rts: ref;

axiom dtr_rts == $sub.ref(0, 290832);

procedure dtr_rts($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1;



implementation dtr_rts($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} {:cexpr "dtr_rts:arg:on"} boogie_si_record_i32($i1);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 16), 6384));
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} ldv_spin_lock();
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i1, 0);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 16), 6384)), $mul.ref(6152, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 95);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 16), 6384)), $mul.ref(6152, 1));
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i15);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} set_signals($p3);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 16), 6384)), $mul.ref(1640, 1));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} spin_unlock_irqrestore($p17, $u0);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 16), 6384)), $mul.ref(6152, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 160);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 16), 6384)), $mul.ref(6152, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $i9);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 291864);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $M.1 := 1;
    call {:si_unique_call 8} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    return;
}



const set_signals: ref;

axiom set_signals == $sub.ref(0, 292896);

procedure set_signals($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation set_signals($p0: ref)
{
  var $i1: i8;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $i10: i8;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i16;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i8;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i8;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i1 := read_reg($p0, 49);
    call {:si_unique_call 10} {:cexpr "RegValue"} boogie_si_record_i8($i1);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 32);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i1);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 1);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    call {:si_unique_call 12} {:cexpr "RegValue"} boogie_si_record_i8($i13);
    assume {:verifier.code 0} true;
    $i10 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i10);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} write_reg($p0, 49, $i15);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6044, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i18 := $mul.i32($i17, 2);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i19 := $shl.i32(2, $i18);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    call {:si_unique_call 14} {:cexpr "EnableBit"} boogie_si_record_i16($i20);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i23 := $sext.i8.i32($i22);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 6384)), $mul.ref(6007, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i16.i8($i20);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i45, $i47);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 6384)), $mul.ref(6007, 1));
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, $i49);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} write_control_reg($p0);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 6384)), $mul.ref(6007, 1));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i30 := $sext.i8.i32($i29);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i16.i8($i20);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i32 := $sext.i8.i32($i31);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i33 := $xor.i32($i32, $sub.i32(0, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i30, $i33);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 6384)), $mul.ref(6007, 1));
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, $i35);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 254);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    call {:si_unique_call 11} {:cexpr "RegValue"} boogie_si_record_i8($i9);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 293928);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.1;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} ldv_spin_unlock();
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} ldv_spin_unlock_irqrestore_12($p0, $i1);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 294960);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $M.1 := 0;
    call {:si_unique_call 19} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_12: ref;

axiom ldv_spin_unlock_irqrestore_12 == $sub.ref(0, 295992);

procedure ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} {:cexpr "ldv_spin_unlock_irqrestore_12:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 297024);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    return;
}



const read_reg: ref;

axiom read_reg == $sub.ref(0, 298056);

procedure read_reg($p0: ref, $i1: i8) returns ($r: i8);
  free requires assertsPassed;



implementation read_reg($p0: ref, $i1: i8) returns ($r: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p19: ref;
  var $p26: ref;
  var $i27: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} {:cexpr "read_reg:arg:Addr"} boogie_si_record_i8($i1);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6184, 1));
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i64($i1);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 1));
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6044, 1));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 1);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p11 := $p5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6044, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 1);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $p26 := $p11;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i16 := $sext.i8.i32($i1);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i1);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i32($i20, 31);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p25 := $p11;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p19 := $p25;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p26 := $p19;
    goto $bb15;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i1);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i23 := $ule.i32($i22, 95);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb11;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p11, $mul.ref(32, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p25 := $p24;
    goto $bb14;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p11, $mul.ref(64, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p19 := $p18;
    goto $bb8;

  $bb1:
    assume $i8 == 1;
    $i9 := $add.i64($i4, 256);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p3, $mul.ref($i9, 1));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p11 := $p10;
    goto $bb3;
}



const write_reg: ref;

axiom write_reg == $sub.ref(0, 299088);

procedure write_reg($p0: ref, $i1: i8, $i2: i8);
  free requires assertsPassed;
  modifies $M.0;



implementation write_reg($p0: ref, $i1: i8, $i2: i8)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p20: ref;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} {:cexpr "write_reg:arg:Addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 25} {:cexpr "write_reg:arg:Value"} boogie_si_record_i8($i2);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6184, 1));
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i64($i1);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6044, 1));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 1);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $p12 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6044, 1));
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 1);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $p27 := $p12;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, $i2);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i17 := $sext.i8.i32($i1);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i1);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i32($i21, 31);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p26 := $p12;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p20 := $p26;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p27 := $p20;
    goto $bb15;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i1);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i24 := $ule.i32($i23, 95);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb11;

  $bb12:
    assume $i24 == 1;
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p12, $mul.ref(32, 1));
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p26 := $p25;
    goto $bb14;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p12, $mul.ref(64, 1));
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p20 := $p19;
    goto $bb8;

  $bb1:
    assume $i9 == 1;
    $i10 := $add.i64($i5, 256);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p4, $mul.ref($i10, 1));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p12 := $p11;
    goto $bb3;
}



const write_control_reg: ref;

axiom write_control_reg == $sub.ref(0, 300120);

procedure write_control_reg($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation write_control_reg($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6232, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(6007, 1));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, $i7);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    return;
}



const get_signals: ref;

axiom get_signals == $sub.ref(0, 301152);

procedure get_signals($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation get_signals($p0: ref)
{
  var $i1: i8;
  var $i2: i16;
  var $i3: i8;
  var $i4: i16;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i16;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i8;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i16;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i32;
  var $i57: i8;
  var $p58: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $i1 := read_reg($p0, 37);
    call {:si_unique_call 27} {:cexpr "tmp"} boogie_si_record_i8($i1);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i16($i1);
    call {:si_unique_call 28} {:cexpr "status"} boogie_si_record_i16($i2);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i3 := read_status_reg($p0);
    call {:si_unique_call 30} {:cexpr "tmp___0"} boogie_si_record_i8($i3);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i16($i3);
    call {:si_unique_call 31} {:cexpr "gpstatus"} boogie_si_record_i16($i4);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 160);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $i9);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i2);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 8);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i2);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 4);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6044, 1));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i31 := $mul.i32($i30, 2);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i32 := $shl.i32(2, $i31);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16($i32);
    call {:si_unique_call 32} {:cexpr "testbit"} boogie_si_record_i16($i33);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i4);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i33);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i34, $i35);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6044, 1));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i46 := $mul.i32($i45, 2);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i47 := $shl.i32(1, $i46);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    call {:si_unique_call 33} {:cexpr "testbit"} boogie_si_record_i16($i48);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i4);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i48);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i49, $i50);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i52 == 1;
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i55, 64);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i56);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, $i57);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i37 == 1;
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i40, 4);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, $i42);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i25, 1);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, $i27);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i16, 16);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i18);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const read_status_reg: ref;

axiom read_status_reg == $sub.ref(0, 302184);

procedure read_status_reg($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation read_status_reg($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6232, 1));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const hdlcdev_open: ref;

axiom hdlcdev_open == $sub.ref(0, 303216);

procedure hdlcdev_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.3, $M.5, $M.7, $M.9, $M.4, $M.6, $M.8, $M.10, assertsPassed;



implementation hdlcdev_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i10: i32;
  var $i11: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i8;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i12: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $p1 := dev_to_hdlc($p0);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i5 := $M.2;
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 2);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $i10 := hdlc_open($p0);
    call {:si_unique_call 37} {:cexpr "rc"} boogie_si_record_i32($i10);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} ldv_spin_lock();
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(412, 1));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6300, 1));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6300, 1));
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 1);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6304, 1));
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} spin_unlock_irqrestore($p25, $u0);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $i26 := startup($p4);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 43} {:cexpr "rc"} boogie_si_record_i32($i26);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i32, 160);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, $i34);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} program_hw($p4);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, jiffies);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1136, 1));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p37, $i36);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} netif_start_queue($p0);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} ldv_spin_lock();
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} get_signals($p4);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} spin_unlock_irqrestore($p38, $u0);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 1);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i43 == 1);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} netif_carrier_off($p0);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb17:
    assume $i43 == 1;
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} netif_carrier_on($p0);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i27 == 1;
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} ldv_spin_lock();
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6300, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 0);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6304, 1));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} spin_unlock_irqrestore($p29, $u0);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i12 := $i26;
    goto $bb6;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} vslice_dummy_var_83 := printk.ref.ref(.str.52, $p21);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6304, 1));
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} spin_unlock_irqrestore($p23, $u0);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 16);
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb9;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} vslice_dummy_var_82 := printk.ref.ref.ref(.str.51, .str.1, $p8);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hdlcdev_close: ref;

axiom hdlcdev_close == $sub.ref(0, 304248);

procedure hdlcdev_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.3, $M.5, $M.7, $M.9;



implementation hdlcdev_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p1 := dev_to_hdlc($p0);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i5 := $M.2;
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 2);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} netif_stop_queue($p0);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} shutdown($p4);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} hdlc_close($p0);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} ldv_spin_lock();
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6300, 1));
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6304, 1));
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} spin_unlock_irqrestore($p11, $u0);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} vslice_dummy_var_84 := printk.ref.ref.ref(.str.46, .str.1, $p8);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hdlc_start_xmit: ref;

axiom hdlc_start_xmit == $sub.ref(0, 305280);

procedure hdlc_start_xmit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation hdlc_start_xmit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 1} true;
    call {:si_unique_call 60} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 61} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const hdlcdev_ioctl: ref;

axiom hdlcdev_ioctl == $sub.ref(0, 306312);

procedure hdlcdev_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr, $M.3, $M.5, $M.7, $M.9;



implementation hdlcdev_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i23: i1;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i64;
  var $i40: i1;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $i47: i16;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i32;
  var $p67: ref;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i16;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $i80: i1;
  var $i81: i8;
  var $i82: i1;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $i90: i32;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $p99: ref;
  var $i100: i16;
  var $i101: i32;
  var $i102: i32;
  var $i97: i32;
  var $p103: ref;
  var $i104: i16;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $i108: i16;
  var $i109: i32;
  var $i110: i1;
  var $p112: ref;
  var $i113: i16;
  var $i114: i32;
  var $i115: i32;
  var $i116: i16;
  var $p118: ref;
  var $p120: ref;
  var $i121: i16;
  var $i122: i32;
  var $i123: i16;
  var $i124: i32;
  var $i125: i32;
  var $i126: i16;
  var $p128: ref;
  var $p129: ref;
  var $i130: i16;
  var $i131: i8;
  var $p133: ref;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $i137: i32;
  var $i138: i64;
  var $p140: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i32;
  var $i145: i1;
  var $i146: i32;
  var $i22: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var vslice_dummy_var_85: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $p3 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    call {:si_unique_call 63} {:cexpr "hdlcdev_ioctl:arg:cmd"} boogie_si_record_i32($i2);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $p9 := dev_to_hdlc($p0);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i13 := $M.2;
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i32($i13, 2);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(412, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i2, 35146);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 4101);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i28, 4101);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $i146 := hdlc_ioctl($p0, $p1, $i2);
    call {:si_unique_call 79} {:cexpr "tmp___5"} boogie_si_record_i32($i146);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i22 := $i146;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $i80 := capable(12);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i81 := $zext.i1.i8($i80);
    call {:si_unique_call 69} {:cexpr "tmp___2"} boogie_si_record_i8($i81);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i8.i1($i81);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i83 := 1;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p3);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p8);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $i87 := copy_from_user($p85, $p86, 12);
    call {:si_unique_call 75} {:cexpr "tmp___4"} boogie_si_record_i64($i87);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i87, 0);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i91 := $slt.i32($i90, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i90, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i90, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i90, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 22);
    goto $bb6;

  $bb60:
    assume $i94 == 1;
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i97 := 8;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i104 := $load.i16($M.0, $p103);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i105 := $zext.i16.i32($i104);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(10, 1));
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i113 := $load.i16($M.0, $p112);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i114 := $zext.i16.i32($i113);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i115 := $and.i32($i114, 28919);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i32.i16($i115);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(10, 1));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p118, $i116);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(10, 1));
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i121 := $load.i16($M.0, $p120);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i122 := $zext.i16.i32($i121);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i32.i16($i97);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i124 := $zext.i16.i32($i123);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i125 := $or.i32($i122, $i124);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i32.i16($i125);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(10, 1));
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p128, $i126);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i130 := $load.i16($M.0, $p129);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i16.i8($i130);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(8, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p133, $i131);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i134 := $and.i32($i97, 2560);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i135 == 1);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(16, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p142, 0);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p12, $mul.ref(0, 6384)), $mul.ref(6300, 1));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.0, $p143);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i145 := $ne.i32($i144, 0);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb6;

  $bb78:
    assume $i145 == 1;
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} program_hw($p12);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb75:
    assume $i135 == 1;
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i138 := $zext.i32.i64($i137);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(16, 1));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p140, $i138);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb69:
    assume $i106 == 1;
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i108 := $load.i16($M.0, $p107);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i109 := $zext.i16.i32($i108);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 1);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb71;

  $bb72:
    assume $i110 == 1;
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 22);
    goto $bb6;

  $bb58:
    assume $i93 == 1;
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i97 := 2048;
    goto $bb67;

  $bb56:
    assume $i92 == 1;
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i97 := 2560;
    goto $bb67;

  $bb54:
    assume $i91 == 1;
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i90, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i95 == 1);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i97 := 0;
    goto $bb67;

  $bb63:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i90, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i96 == 1);
    goto $bb62;

  $bb65:
    assume $i96 == 1;
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(10, 1));
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i100 := $load.i16($M.0, $p99);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i32($i100);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, 36616);
    call {:si_unique_call 76} {:cexpr "flags"} boogie_si_record_i32($i102);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i97 := $i102;
    goto $bb67;

  $bb50:
    assume $i88 == 1;
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 14);
    goto $bb6;

  $bb47:
    assume $i84 == 1;
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 1);
    goto $bb6;

  $bb44:
    assume $i82 == 1;
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i83 := 0;
    goto $bb46;

  $bb12:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i28, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb16;

  $bb17:
    assume $i31 == 1;
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 4101);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i38);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i40 := $ult.i64($i39, 12);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(10, 1));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.0, $p46);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 36616);
    call {:si_unique_call 70} {:cexpr "flags"} boogie_si_record_i32($i49);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p3);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    call {:si_unique_call 71} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p50, 0, 12, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_1;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i49, 2048);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i49, 2560);
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i49, 2560);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, 0);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(16, 1));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, $p64);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i64.i32($i65);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i66);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(8, 1));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i73 := $zext.i1.i32($i72);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i16($i73);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p75, $i74);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p8);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p3);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $i78 := copy_to_user($p76, $p77, 12);
    call {:si_unique_call 73} {:cexpr "tmp___1"} boogie_si_record_i64($i78);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb6;

  $bb41:
    assume $i79 == 1;
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 14);
    goto $bb6;

  $bb27:
    assume $i53 == 1;
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, 2);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb25:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i49, 2048);
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb29;

  $bb30:
    assume $i54 == 1;
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, 3);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb23:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i49, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i49, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb29;

  $bb34:
    assume $i56 == 1;
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, 4);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb32:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i49, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb29;

  $bb36:
    assume $i57 == 1;
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 1);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb19:
    assume $i40 == 1;
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i64.i32(12);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i41);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 105);
    goto $bb6;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $i24 := hdlc_ioctl($p0, $p1, $i2);
    call {:si_unique_call 67} {:cexpr "tmp___0"} boogie_si_record_i32($i24);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i22 := $i24;
    goto $bb6;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 16);
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} vslice_dummy_var_85 := printk.ref.ref.ref(.str.49, .str.1, $p16);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hdlc_change_mtu: ref;

axiom hdlc_change_mtu == $sub.ref(0, 307344);

procedure hdlc_change_mtu($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation hdlc_change_mtu($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 80} {:cexpr "hdlc_change_mtu:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 1} true;
    call {:si_unique_call 81} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 82} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const hdlcdev_tx_timeout: ref;

axiom hdlcdev_tx_timeout == $sub.ref(0, 308376);

procedure hdlcdev_tx_timeout($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.3, $M.5, $M.7, $M.9;



implementation hdlcdev_tx_timeout($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p15: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p21: ref;
  var $p22: ref;
  var vslice_dummy_var_86: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $p1 := dev_to_hdlc($p0);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i5 := $M.2;
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 2);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 1);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, $i13);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(128, 1));
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 1);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(128, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p21, $i19);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} ldv_spin_lock();
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} tx_stop($p4);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} spin_unlock_irqrestore($p22, $u0);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} netif_wake_queue($p0);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} vslice_dummy_var_86 := printk.ref.ref(.str.56, $p8);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dev_to_hdlc: ref;

axiom dev_to_hdlc == $sub.ref(0, 309408);

procedure dev_to_hdlc($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_to_hdlc($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $p1 := netdev_priv($p0);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 310440);

procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 1} true;
    call {:si_unique_call 90} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 91} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 1} true;
    call {:si_unique_call 92} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 93} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 1} true;
    call {:si_unique_call 94} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 95} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 1} true;
    call {:si_unique_call 96} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 97} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.ref.i32($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.ref.i32($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 1} true;
    call {:si_unique_call 98} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 99} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 1} true;
    call {:si_unique_call 100} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 101} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 1} true;
    call {:si_unique_call 102} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 103} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 1} true;
    call {:si_unique_call 104} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 105} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 1} true;
    call {:si_unique_call 106} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 107} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 1} true;
    call {:si_unique_call 108} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 109} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.ref.i32.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.ref.i32.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 1} true;
    call {:si_unique_call 110} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 111} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb11:
    assume {:verifier.code 1} true;
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 1} true;
    call {:si_unique_call 112} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 113} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb12:
    assume {:verifier.code 1} true;
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 1} true;
    call {:si_unique_call 114} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 115} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb13:
    assume {:verifier.code 1} true;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 1} true;
    call {:si_unique_call 116} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 117} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.ref.i64($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.ref.i64($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb14:
    assume {:verifier.code 1} true;
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 1} true;
    call {:si_unique_call 118} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 119} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const tx_stop: ref;

axiom tx_stop == $sub.ref(0, 311472);

procedure tx_stop($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.5, $M.7, $M.9;



implementation tx_stop($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i8;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i8;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i8;
  var $p28: ref;
  var $p29: ref;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i1 := $M.2;
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 4);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1376, 1));
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} vslice_dummy_var_88 := ldv_del_timer_55($p6);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} write_reg($p0, $sub.i8(0, 80), 0);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} write_reg($p0, $sub.i8(0, 75), 1);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} write_reg($p0, 44, 1);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 63);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i12);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} write_reg($p0, 41, $i17);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} write_reg($p0, 35, $sub.i8(0, 64));
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 253);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i22);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} write_reg($p0, 40, $i27);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5998, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 0);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5999, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 0);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} vslice_dummy_var_87 := printk.ref.ref.i32.ref(.str.10, .str.1, 4278, $p4);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netif_wake_queue: ref;

axiom netif_wake_queue == $sub.ref(0, 312504);

procedure netif_wake_queue($p0: ref);
  free requires assertsPassed;



implementation netif_wake_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} netif_tx_wake_queue($p1);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    return;
}



const netdev_get_tx_queue: ref;

axiom netdev_get_tx_queue == $sub.ref(0, 313536);

procedure netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} {:cexpr "netdev_get_tx_queue:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1016, 1));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 504));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const netif_tx_wake_queue: ref;

axiom netif_tx_wake_queue == $sub.ref(0, 314568);

procedure netif_tx_wake_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_wake_queue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_timer_55: ref;

axiom ldv_del_timer_55 == $sub.ref(0, 315600);

procedure ldv_del_timer_55($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9;



implementation ldv_del_timer_55($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $i1 := del_timer($p0);
    call {:si_unique_call 132} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} disable_suitable_timer_3($p0);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const del_timer: ref;

axiom del_timer == $sub.ref(0, 316632);

procedure del_timer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 1} true;
    call {:si_unique_call 134} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 135} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_suitable_timer_3: ref;

axiom disable_suitable_timer_3 == $sub.ref(0, 317664);

procedure disable_suitable_timer_3($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9;



implementation disable_suitable_timer_3($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i1 := $M.3;
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $M.5;
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i13 := $M.7;
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i19 := $M.9;
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p22 := $M.10;
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb22;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 139} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(0);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p16 := $M.8;
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i15, $i17);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb16;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 138} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(0);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p10 := $M.6;
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i9, $i11);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $M.5 := 0;
    call {:si_unique_call 137} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(0);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $p4 := $M.4;
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 136} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(0);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const netdev_priv: ref;

axiom netdev_priv == $sub.ref(0, 318696);

procedure netdev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(3008, 1));
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const hdlc_ioctl: ref;

axiom hdlc_ioctl == $sub.ref(0, 319728);

procedure hdlc_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation hdlc_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 140} {:cexpr "hdlc_ioctl:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 1} true;
    call {:si_unique_call 141} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 142} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 320760);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 321792);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $i3 := __builtinx_object_size.ref.i32($p1, 0);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 145} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 146} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} __might_fault(.str.50, 732);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 149} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} $i15 := _copy_to_user($p0, $p1, $i14);
    call {:si_unique_call 151} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const capable: ref;

axiom capable == $sub.ref(0, 322824);

procedure capable($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation capable($i0: i32) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 153} {:cexpr "capable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 1} true;
    call {:si_unique_call 154} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 155} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 323856);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 158} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 159} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} __might_fault(.str.50, 697);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 162} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $i15 := _copy_from_user($p0, $p1, $i14);
    call {:si_unique_call 164} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const program_hw: ref;

axiom program_hw == $sub.ref(0, 324888);

procedure program_hw($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.3, $M.5, $M.7, $M.9;



implementation program_hw($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i8;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} ldv_spin_lock();
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} rx_stop($p0);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} tx_stop($p0);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1184, 1));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(0, 1));
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 2);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6300, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} async_mode($p0);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} set_signals($p0);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1812, 1));
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 0);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1816, 1));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1824, 1));
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 0);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1820, 1));
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 0);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, 12);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i19);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} write_reg($p0, 41, $i24);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} get_signals($p0);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6300, 1));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i27 == 1);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} spin_unlock_irqrestore($p41, $u0);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 128);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb12;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} rx_start($p0);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} hdlc_mode($p0);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const rx_stop: ref;

axiom rx_stop == $sub.ref(0, 325920);

procedure rx_stop($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rx_stop($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $p17: ref;
  var vslice_dummy_var_89: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i1 := $M.2;
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 4);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} write_reg($p0, 44, 17);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 254);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i10);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} write_reg($p0, 40, $i15);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} write_reg($p0, $sub.i8(0, 112), 0);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} write_reg($p0, $sub.i8(0, 107), 1);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} write_reg($p0, $sub.i8(0, 108), 0);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5996, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 0);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5997, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 0);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} vslice_dummy_var_89 := printk.ref.ref.i32.ref(.str.48, .str.1, 4130, $p4);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hdlc_mode: ref;

axiom hdlc_mode == $sub.ref(0, 326952);

procedure hdlc_mode($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.5, $M.7, $M.9;



implementation hdlc_mode($p0: ref)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;
  var $p8: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $i18: i8;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $i28: i8;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i8;
  var $i37: i8;
  var $i38: i32;
  var $i39: i8;
  var $i40: i32;
  var $i41: i8;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i8;
  var $i55: i32;
  var $i56: i32;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i8;
  var $i61: i32;
  var $i62: i32;
  var $i63: i8;
  var $i54: i8;
  var $p65: ref;
  var $i66: i16;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i8;
  var $p76: ref;
  var $i77: i16;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $i83: i32;
  var $i84: i32;
  var $i85: i8;
  var $i81: i8;
  var $i82: i32;
  var $i73: i8;
  var $i74: i32;
  var $i86: i32;
  var $i87: i8;
  var $p89: ref;
  var $i90: i16;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i32;
  var $i96: i8;
  var $i97: i8;
  var $p99: ref;
  var $i100: i16;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $i105: i32;
  var $i106: i8;
  var $i107: i8;
  var $i108: i32;
  var $i109: i8;
  var $p111: ref;
  var $i112: i16;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i32;
  var $i118: i8;
  var $i119: i8;
  var $p121: ref;
  var $i122: i16;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i32;
  var $i128: i8;
  var $i129: i8;
  var $i130: i32;
  var $i131: i8;
  var $p133: ref;
  var $i134: i16;
  var $i135: i32;
  var $i136: i32;
  var $i137: i1;
  var $p139: ref;
  var $i140: i64;
  var $i141: i32;
  var $i142: i32;
  var $p144: ref;
  var $i145: i64;
  var $i146: i32;
  var $p148: ref;
  var $i149: i16;
  var $i150: i32;
  var $i151: i32;
  var $i152: i1;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i8;
  var $i158: i32;
  var $p159: ref;
  var $i160: i32;
  var $i161: i32;
  var $i162: i32;
  var $i163: i8;
  var $i164: i32;
  var $i165: i32;
  var $i166: i8;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i175: i8;
  var $i176: i32;
  var $p177: ref;
  var $i178: i32;
  var $i179: i32;
  var $i180: i32;
  var $i181: i8;
  var $i182: i32;
  var $i183: i32;
  var $i184: i32;
  var $i185: i8;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $i190: i8;
  var $i191: i32;
  var $i192: i8;
  var $i193: i8;
  var $i194: i32;
  var $i195: i8;
  var $i196: i8;
  var $i197: i32;
  var $i198: i32;
  var $i199: i8;
  var $p200: ref;
  var $i201: i64;
  var $i202: i64;
  var $i203: i8;
  var $i204: i32;
  var $i205: i8;
  var $p206: ref;
  var $i207: i64;
  var $i208: i64;
  var $i209: i8;
  var $i210: i32;
  var $i211: i8;
  var $p212: ref;
  var $i213: i8;
  var $i214: i32;
  var $i215: i32;
  var $i216: i8;
  var $p217: ref;
  var $p218: ref;
  var $i219: i8;
  var $i220: i32;
  var $i221: i8;
  var $p222: ref;
  var $i223: i8;
  var $i224: i32;
  var $i225: i32;
  var $i226: i1;
  var $i227: i32;
  var $i228: i32;
  var $i229: i8;
  var $i230: i8;
  var $i231: i32;
  var $i232: i8;
  var $p234: ref;
  var $i235: i64;
  var $i236: i32;
  var $p238: ref;
  var $i239: i8;
  var $i240: i32;
  var $i241: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(10, 1));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 64255);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(10, 1));
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $i6);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} write_reg($p0, $sub.i8(0, 76), 0);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} write_reg($p0, $sub.i8(0, 108), 0);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(10, 1));
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 32);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i18 := $sub.i8(0, 127);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(10, 1));
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 64);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i28 := $i18;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(26, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.0, $p30);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 1);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i37 := $i28;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} write_reg($p0, 46, $i39);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32(0);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} write_reg($p0, 47, $i41);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(12, 1));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i45, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i45, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i45, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i54 := 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(10, 1));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.0, $p65);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 8192);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i69 == 1);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(10, 1));
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.0, $p76);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i78, 4096);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i80 == 1);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i54);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i84 := $or.i32($i83, 16);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i8($i84);
    call {:si_unique_call 195} {:cexpr "RegValue"} boogie_si_record_i8($i85);
    assume {:verifier.code 0} true;
    $i81, $i82 := $i85, 32;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i73, $i74 := $i81, $i82;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i73);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i8($i86);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} write_reg($p0, 48, $i87);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(10, 1));
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i90 := $load.i16($M.0, $p89);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i90);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i92 := $and.i32($i91, 512);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i97 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(10, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i100 := $load.i16($M.0, $p99);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i32($i100);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, 256);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i107 := $i97;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i8($i108);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} write_reg($p0, 54, $i109);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(10, 1));
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i112 := $load.i16($M.0, $p111);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i113 := $zext.i16.i32($i112);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i114 := $and.i32($i113, 2048);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    $i119 := 0;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(10, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i122 := $load.i16($M.0, $p121);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i123 := $zext.i16.i32($i122);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i124 := $and.i32($i123, 1024);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    $i129 := $i119;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i32.i8($i130);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} write_reg($p0, 55, $i131);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(10, 1));
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i134 := $load.i16($M.0, $p133);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i135 := $zext.i16.i32($i134);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i136 := $and.i32($i135, 256);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i137 := $ne.i32($i136, 0);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i137 == 1);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(16, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i145 := $load.i64($M.0, $p144);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i146 := $trunc.i64.i32($i145);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} set_rate($p0, $i146);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(10, 1));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i149 := $load.i16($M.0, $p148);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i150 := $zext.i16.i32($i149);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i151 := $and.i32($i150, 2048);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i152 := $ne.i32($i151, 0);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i152 == 1);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.0, $p172);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p173, $mul.ref(0, 6384)), $mul.ref(6007, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i175 := $load.i8($M.0, $p174);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i176 := $sext.i8.i32($i175);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6044, 1));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i178 := $load.i32($M.0, $p177);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i179 := $mul.i32($i178, 2);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i180 := $shl.i32(1, $i179);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i181 := $trunc.i32.i8($i180);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i182 := $sext.i8.i32($i181);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i183 := $xor.i32($i182, $sub.i32(0, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i184 := $and.i32($i176, $i183);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i185 := $trunc.i32.i8($i184);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.0, $p187);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p188, $mul.ref(0, 6384)), $mul.ref(6007, 1));
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p189, $i185);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} write_control_reg($p0);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i190 := $M.11;
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i191 := $zext.i8.i32($i190);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i192 := $trunc.i32.i8($i191);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} write_reg($p0, 58, $i192);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i193 := $M.12;
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i194 := $zext.i8.i32($i193);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i195 := $trunc.i32.i8($i194);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} write_reg($p0, 56, $i195);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i196 := $M.13;
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i197 := $zext.i8.i32($i196);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i198 := $sub.i32($i197, 1);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i199 := $trunc.i32.i8($i198);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} write_reg($p0, 57, $i199);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} write_reg($p0, $sub.i8(0, 79), 20);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} write_reg($p0, $sub.i8(0, 111), 20);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1840, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i201 := $load.i64($M.0, $p200);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i202 := $lshr.i64($i201, 16);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i203 := $trunc.i64.i8($i202);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i204 := $zext.i8.i32($i203);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i205 := $trunc.i32.i8($i204);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} write_reg($p0, $sub.i8(0, 122), $i205);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1840, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i207 := $load.i64($M.0, $p206);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i208 := $lshr.i64($i207, 16);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i209 := $trunc.i64.i8($i208);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i210 := $zext.i8.i32($i209);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i211 := $trunc.i32.i8($i210);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} write_reg($p0, $sub.i8(0, 90), $i211);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i213 := $load.i8($M.0, $p212);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i214 := $zext.i8.i32($i213);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i215 := $or.i32($i214, 192);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i216 := $trunc.i32.i8($i215);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p217, $i216);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i219 := $load.i8($M.0, $p218);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i220 := $zext.i8.i32($i219);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i221 := $trunc.i32.i8($i220);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} write_reg($p0, 40, $i221);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i223 := $load.i8($M.0, $p222);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i224 := $zext.i8.i32($i223);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i225 := $and.i32($i224, 32);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i226 := $eq.i32($i225, 0);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i226} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    $i230 := 16;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i231 := $zext.i8.i32($i230);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i232 := $trunc.i32.i8($i231);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} write_reg($p0, 49, $i232);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} tx_set_idle($p0);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} tx_stop($p0);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} rx_stop($p0);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(16, 1));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i235 := $load.i64($M.0, $p234);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i236 := $trunc.i64.i32($i235);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} set_rate($p0, $i236);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(8, 1));
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i239 := $load.i8($M.0, $p238);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i240 := $zext.i8.i32($i239);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i241 := $ne.i32($i240, 0);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    return;

  $bb51:
    assume $i241 == 1;
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} enable_loopback($p0, 1);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb48:
    assume $i226 == 1;
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i227 := $zext.i8.i32(16);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i228 := $or.i32($i227, 1);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i229 := $trunc.i32.i8($i228);
    call {:si_unique_call 213} {:cexpr "RegValue"} boogie_si_record_i8($i229);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i230 := $i229;
    goto $bb50;

  $bb45:
    assume $i152 == 1;
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p155, $mul.ref(0, 6384)), $mul.ref(6007, 1));
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.0, $p156);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i158 := $sext.i8.i32($i157);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6044, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.0, $p159);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i161 := $mul.i32($i160, 2);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i162 := $shl.i32(1, $i161);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i32.i8($i162);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i164 := $sext.i8.i32($i163);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i165 := $or.i32($i158, $i164);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i166 := $trunc.i32.i8($i165);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.0, $p168);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p169, $mul.ref(0, 6384)), $mul.ref(6007, 1));
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p170, $i166);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume $i137 == 1;
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(16, 1));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i140 := $load.i64($M.0, $p139);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i141 := $trunc.i64.i32($i140);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i142 := $mul.i32($i141, $i74);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} set_rate($p0, $i142);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i125 == 1;
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i32($i119);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i127 := $or.i32($i126, 96);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i32.i8($i127);
    call {:si_unique_call 200} {:cexpr "RegValue"} boogie_si_record_i8($i128);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i129 := $i128;
    goto $bb41;

  $bb36:
    assume $i115 == 1;
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32(0);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i117 := $or.i32($i116, 64);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i32.i8($i117);
    call {:si_unique_call 199} {:cexpr "RegValue"} boogie_si_record_i8($i118);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i119 := $i118;
    goto $bb38;

  $bb33:
    assume $i103 == 1;
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i97);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i105 := $or.i32($i104, 96);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i32.i8($i105);
    call {:si_unique_call 197} {:cexpr "RegValue"} boogie_si_record_i8($i106);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i107 := $i106;
    goto $bb35;

  $bb30:
    assume $i93 == 1;
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32(0);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i95 := $or.i32($i94, 64);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i8($i95);
    call {:si_unique_call 196} {:cexpr "RegValue"} boogie_si_record_i8($i96);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i97 := $i96;
    goto $bb32;

  $bb27:
    assume $i80 == 1;
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i81, $i82 := $i54, 8;
    goto $bb29;

  $bb24:
    assume $i69 == 1;
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i54);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i71 := $or.i32($i70, 8);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i8($i71);
    call {:si_unique_call 193} {:cexpr "RegValue"} boogie_si_record_i8($i72);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i73, $i74 := $i72, 16;
    goto $bb26;

  $bb15:
    assume $i48 == 1;
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32(0);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i62 := $or.i32($i61, 128);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i8($i62);
    call {:si_unique_call 190} {:cexpr "RegValue"} boogie_si_record_i8($i63);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i54 := $i63;
    goto $bb22;

  $bb13:
    assume $i47 == 1;
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32(0);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i59 := $or.i32($i58, 192);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    call {:si_unique_call 189} {:cexpr "RegValue"} boogie_si_record_i8($i60);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i54 := $i60;
    goto $bb22;

  $bb11:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i45, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i49 == 1);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32(0);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i55, 160);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i56);
    call {:si_unique_call 191} {:cexpr "RegValue"} boogie_si_record_i8($i57);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i54 := $i57;
    goto $bb22;

  $bb18:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i45, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb17;

  $bb20:
    assume $i50 == 1;
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32(0);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i51, 32);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    call {:si_unique_call 192} {:cexpr "RegValue"} boogie_si_record_i8($i53);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i54 := $i53;
    goto $bb22;

  $bb7:
    assume $i33 == 1;
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i28);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i34, 6);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    call {:si_unique_call 186} {:cexpr "RegValue"} boogie_si_record_i8($i36);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb9;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i18);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i25, 16);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    call {:si_unique_call 185} {:cexpr "RegValue"} boogie_si_record_i8($i27);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($sub.i8(0, 127));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 16);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    call {:si_unique_call 184} {:cexpr "RegValue"} boogie_si_record_i8($i17);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb3;
}



const async_mode: ref;

axiom async_mode == $sub.ref(0, 327984);

procedure async_mode($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.5, $M.7, $M.9;



implementation async_mode($p0: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;
  var $i9: i8;
  var $i10: i32;
  var $i11: i8;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $i23: i8;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i8;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i8;
  var $i46: i8;
  var $i47: i8;
  var $i48: i32;
  var $i49: i8;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i32;
  var $i57: i8;
  var $i58: i8;
  var $i59: i32;
  var $i60: i8;
  var $i61: i32;
  var $i62: i8;
  var $i63: i32;
  var $i64: i8;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i8;
  var $i76: i32;
  var $i77: i32;
  var $i78: i8;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i8;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i32;
  var $i90: i8;
  var $i91: i8;
  var $i92: i32;
  var $i93: i8;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $i97: i32;
  var $i98: i8;
  var $p99: ref;
  var $p100: ref;
  var $i101: i8;
  var $i102: i32;
  var $i103: i8;
  var $p104: ref;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i8;
  var $p109: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i8;
  var $p115: ref;
  var $i116: i64;
  var $i117: i32;
  var $i118: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} tx_stop($p0);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} rx_stop($p0);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(41, 1));
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 1);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} write_reg($p0, 46, $i11);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(40, 1));
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i15, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i15, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i23 := 64;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(42, 1));
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i47 := $i23;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} write_reg($p0, 47, $i49);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(8, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} write_reg($p0, 48, $i60);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32(64);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i61);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} write_reg($p0, 54, $i62);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32(64);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i63);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} write_reg($p0, 55, $i64);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 6384)), $mul.ref(6007, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p68);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i70 := $sext.i8.i32($i69);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6044, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i73 := $mul.i32($i72, 2);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i74 := $shl.i32(1, $i73);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i8($i74);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i76 := $sext.i8.i32($i75);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i77 := $or.i32($i70, $i76);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i8($i77);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 6384)), $mul.ref(6007, 1));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p82, $i78);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} write_control_reg($p0);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} tx_set_idle($p0);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} write_reg($p0, 58, 0);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} write_reg($p0, 56, 16);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} write_reg($p0, 57, 30);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.0, $p83);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i84);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i85, 32);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 0);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i91 := 16;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i32.i8($i92);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} write_reg($p0, 49, $i93);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.0, $p94);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i97 := $or.i32($i96, 192);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i8($i97);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p99, $i98);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.0, $p100);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i8($i102);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} write_reg($p0, 40, $i103);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p104, 2);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i8($i107);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} write_reg($p0, 41, $i108);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6006, 1));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p109, 8);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6006, 1));
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i32.i8($i112);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} write_reg($p0, 42, $i113);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(32, 1));
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i116 := $load.i64($M.0, $p115);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i64.i32($i116);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i118 := $mul.i32($i117, 16);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} set_rate($p0, $i118);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    return;

  $bb25:
    assume $i87 == 1;
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32(16);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i89 := $or.i32($i88, 1);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i8($i89);
    call {:si_unique_call 239} {:cexpr "RegValue"} boogie_si_record_i8($i90);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i91 := $i90;
    goto $bb27;

  $bb22:
    assume $i54 == 1;
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32(0);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i55, 3);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i56);
    call {:si_unique_call 230} {:cexpr "RegValue"} boogie_si_record_i8($i57);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb24;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i23);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, 2);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    call {:si_unique_call 227} {:cexpr "RegValue"} boogie_si_record_i8($i37);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(42, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 2);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i46 := $i37;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb21;

  $bb18:
    assume $i42 == 1;
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i37);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i43, 1);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    call {:si_unique_call 228} {:cexpr "RegValue"} boogie_si_record_i8($i45);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb20;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32(64);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i20, 20);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    call {:si_unique_call 225} {:cexpr "RegValue"} boogie_si_record_i8($i22);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb14;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32(64);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i24, 40);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    call {:si_unique_call 224} {:cexpr "RegValue"} boogie_si_record_i8($i26);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i23 := $i26;
    goto $bb14;

  $bb5:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i15, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb11;

  $bb12:
    assume $i19 == 1;
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32(64);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, 60);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    call {:si_unique_call 226} {:cexpr "RegValue"} boogie_si_record_i8($i29);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i23 := $i29;
    goto $bb14;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32(0);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 2);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    call {:si_unique_call 222} {:cexpr "RegValue"} boogie_si_record_i8($i8);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;
}



const rx_start: ref;

axiom rx_start == $sub.ref(0, 329016);

procedure rx_start($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rx_start($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i8;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i23: i32;
  var $p35: ref;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $i41: i16;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i64;
  var $p48: ref;
  var $i49: i16;
  var $i50: i32;
  var $i51: i16;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i8;
  var $p57: ref;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i8;
  var $p62: ref;
  var $p63: ref;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i1 := $M.2;
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 4);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} write_reg($p0, 44, 17);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(0, 1));
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 2);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i54, 1);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, $i56);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i8($i60);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} write_reg($p0, 40, $i61);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} write_reg($p0, 44, 18);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5997, 1));
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, 0);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5996, 1));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, 1);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 254);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i14);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} write_reg($p0, 40, $i19);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} write_reg($p0, $sub.i8(0, 112), 0);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} write_reg($p0, $sub.i8(0, 107), 1);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1848, 1));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i22 := $ult.i32(0, $i21);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3912, 1));
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 0);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1864, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.0, $p38);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} write_reg16($p0, $sub.i8(0, 120), $i41);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1848, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32($i43, 1);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i44);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1864, 1)), $mul.ref($i45, 16)), $mul.ref(8, 1));
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.0, $p48);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i50);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} write_reg16($p0, $sub.i8(0, 118), $i51);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} write_reg16($p0, $sub.i8(0, 116), 1024);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} write_reg($p0, $sub.i8(0, 108), 96);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} write_reg($p0, $sub.i8(0, 112), $sub.i8(0, 14));
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb9;

  $bb9:
    call $p24, $p25, $i26, $p28, $i29, $i30, $i32, $i33, $i34, $i23, vslice_dummy_var_91 := rx_start_loop_$bb9($p0, $p20, $p24, $p25, $i26, $p28, $i29, $i30, $i32, $i33, $i34, $i23, vslice_dummy_var_91);
    goto $bb9_last;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1856, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i23);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p25, $mul.ref($i26, 10)), $mul.ref(8, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, $sub.i8(0, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i23, 3);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i23, 1);
    call {:si_unique_call 252} {:cexpr "i"} boogie_si_record_i32($i32);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p20);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i34 := $ult.i32($i32, $i33);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb14:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i23 := $i32;
    goto $bb14_dummy;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} vslice_dummy_var_91 := read_status_reg($p0);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} vslice_dummy_var_90 := printk.ref.ref.i32.ref(.str.35, .str.1, 4153, $p4);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1425;
}



const write_reg16: ref;

axiom write_reg16 == $sub.ref(0, 330048);

procedure write_reg16($p0: ref, $i1: i8, $i2: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation write_reg16($p0: ref, $i1: i8, $i2: i16)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p20: ref;
  var $p27: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} {:cexpr "write_reg16:arg:Addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 260} {:cexpr "write_reg16:arg:Value"} boogie_si_record_i16($i2);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6184, 1));
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i64($i1);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 1));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6044, 1));
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 1);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $p12 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6044, 1));
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 1);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $p27 := $p12;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, $i2);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i17 := $sext.i8.i32($i1);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i1);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i32($i21, 31);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p26 := $p12;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p20 := $p26;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $p27 := $p20;
    goto $bb15;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i1);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i24 := $ule.i32($i23, 95);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb11;

  $bb12:
    assume $i24 == 1;
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p12, $mul.ref(32, 1));
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p26 := $p25;
    goto $bb14;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p12, $mul.ref(64, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p20 := $p19;
    goto $bb8;

  $bb1:
    assume $i9 == 1;
    $i10 := $add.i64($i5, 256);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p4, $mul.ref($i10, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $p12 := $p11;
    goto $bb3;
}



const tx_set_idle: ref;

axiom tx_set_idle == $sub.ref(0, 331080);

procedure tx_set_idle($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation tx_set_idle($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i8;
  var $i12: i32;
  var $i13: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6000, 1));
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i2, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i11 := $sub.i8(0, 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} write_reg($p0, 52, $i13);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i6 == 1;
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i11 := $sub.i8(0, 1);
    goto $bb19;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb19;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i11 := $sub.i8(0, 86);
    goto $bb19;

  $bb11:
    assume $i7 == 1;
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i11 := $sub.i8(0, 1);
    goto $bb19;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i9 == 1);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb19;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i11 := $sub.i8(0, 86);
    goto $bb19;

  $bb13:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb17:
    assume $i10 == 1;
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i11 := 126;
    goto $bb19;
}



const set_rate: ref;

axiom set_rate == $sub.ref(0, 332112);

procedure set_rate($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation set_rate($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $i11: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $i20: i1;
  var $i14: i8;
  var $i15: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i8;
  var $i21: i32;
  var $i22: i8;
  var $i12: i32;
  var $i13: i8;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i8;
  var $i33: i32;
  var $i34: i8;
  var $i35: i8;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i8;
  var $i41: i32;
  var $i42: i8;
  var $i43: i8;
  var $i44: i32;
  var $i45: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} {:cexpr "set_rate:arg:data_rate"} boogie_si_record_i32($i1);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} write_reg($p0, 55, 0);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} write_reg($p0, 54, 0);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} write_reg($p0, 53, 0);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i3 := $udiv.i32(14745600, $i1);
    call {:si_unique_call 263} {:cexpr "Divisor"} boogie_si_record_i32($i3);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 1);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i9, $i10 := $i5, 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i32($i9, 256);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i12, $i13 := $i9, $i10;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $i27 := read_reg($p0, 55);
    call {:si_unique_call 271} {:cexpr "tmp"} boogie_si_record_i8($i27);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i28 := $sext.i8.i32($i27);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, $sub.i32(0, 16));
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i30 := $sext.i8.i32($i13);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i29, $i30);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} write_reg($p0, 55, $i34);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i35 := read_reg($p0, 54);
    call {:si_unique_call 274} {:cexpr "tmp___0"} boogie_si_record_i8($i35);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i36 := $sext.i8.i32($i35);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, $sub.i32(0, 16));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $i38 := $sext.i8.i32($i13);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i37, $i38);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} write_reg($p0, 54, $i42);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i12);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} write_reg($p0, 53, $i45);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb12:
    assume $i11 == 1;
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i14, $i15 := $i10, $i9;
    goto $bb15;

  $bb15:
    call $i16, $i17, $i18, $i19, $i20, $i14, $i15, $i23, $i24, $i25, $i26, $i21, $i22 := set_rate_loop_$bb15($i16, $i17, $i18, $i19, $i20, $i14, $i15, $i23, $i24, $i25, $i26, $i21, $i22);
    goto $bb15_last;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i14);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i24 := $ule.i32($i23, 9);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i25, $i26 := $i15, $i14;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i12, $i13 := $i25, $i26;
    goto $bb14;

  $bb19:
    assume $i24 == 1;
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i16 := $lshr.i32($i15, 1);
    call {:si_unique_call 268} {:cexpr "TMCValue"} boogie_si_record_i32($i16);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i14);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 1);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    call {:si_unique_call 269} {:cexpr "BRValue"} boogie_si_record_i8($i19);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i20 := $ugt.i32($i16, 256);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i21, $i22 := $i16, $i19;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i12, $i13 := $i21, $i22;
    goto $bb14;

  $bb17:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i14, $i15 := $i19, $i16;
    goto $bb17_dummy;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i5, 2);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i32($i5, 1);
    call {:si_unique_call 267} {:cexpr "TMCValue"} boogie_si_record_i32($i8);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i9, $i10 := $i8, 1;
    goto $bb11;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;

  $bb17_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1562;
}



const enable_loopback: ref;

axiom enable_loopback == $sub.ref(0, 333144);

procedure enable_loopback($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation enable_loopback($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} {:cexpr "enable_loopback:arg:enable"} boogie_si_record_i32($i1);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $i25 := read_reg($p0, 48);
    call {:si_unique_call 285} {:cexpr "tmp___0"} boogie_si_record_i8($i25);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 252);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} write_reg($p0, 48, $i28);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} write_reg($p0, 54, 0);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} write_reg($p0, 55, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(16, 1));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} set_rate($p0, 3686400);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(16, 1));
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i64.i32($i35);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} set_rate($p0, $i36);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i3 := read_reg($p0, 48);
    call {:si_unique_call 279} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 3);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} write_reg($p0, 48, $i6);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6007, 1));
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i12 := $sext.i8.i32($i11);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6044, 1));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i14, 2);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i16 := $shl.i32(1, $i15);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i18 := $sext.i8.i32($i17);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i12, $i18);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 6384)), $mul.ref(6007, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, $i20);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} write_control_reg($p0);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} write_reg($p0, 54, 64);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} write_reg($p0, 55, 64);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 334176);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const __might_fault: ref;

axiom __might_fault == $sub.ref(0, 335208);

procedure __might_fault($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __might_fault($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} {:cexpr "__might_fault:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 336240);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 293} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 337272);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 294} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 1} true;
    call {:si_unique_call 295} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 296} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 338304);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 339336);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 297} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 1} true;
    call {:si_unique_call 298} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 299} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 340368);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    return;
}



const netif_stop_queue: ref;

axiom netif_stop_queue == $sub.ref(0, 341400);

procedure netif_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_stop_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} netif_tx_stop_queue($p1);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    return;
}



const shutdown: ref;

axiom shutdown == $sub.ref(0, 342432);

procedure shutdown($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.3, $M.5, $M.7, $M.9;



implementation shutdown($p0: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $i37: i8;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p54: ref;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i3, 2147483648);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $M.2;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 2);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1200, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} __wake_up($p11, 1, 1, $0.ref);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1288, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} __wake_up($p12, 1, 1, $0.ref);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1376, 1));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} vslice_dummy_var_93 := ldv_del_timer_48($p13);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1512, 1));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} vslice_dummy_var_94 := ldv_del_timer_49($p15);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1176, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} kfree($p18);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1176, 1));
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $0.ref);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} ldv_spin_lock();
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} reset_port($p0);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i24 == 1);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 1024);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} spin_unlock_irqrestore($p39, $u0);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i52 := $and.i64($i51, 2147483647);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p54, $i52);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i44 == 1;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 1816)), $mul.ref(1336, 1));
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} set_bit(1, $p48);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 95);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, $i37);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} set_signals($p0);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb9;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} vslice_dummy_var_92 := printk.ref.ref.i32.ref(.str.47, .str.1, 2695, $p9);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hdlc_close: ref;

axiom hdlc_close == $sub.ref(0, 343464);

procedure hdlc_close($p0: ref);
  free requires assertsPassed;



implementation hdlc_close($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 344496);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 314} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_timer_48: ref;

axiom ldv_del_timer_48 == $sub.ref(0, 345528);

procedure ldv_del_timer_48($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9;



implementation ldv_del_timer_48($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $i1 := del_timer($p0);
    call {:si_unique_call 316} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} disable_suitable_timer_3($p0);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_del_timer_49: ref;

axiom ldv_del_timer_49 == $sub.ref(0, 346560);

procedure ldv_del_timer_49($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9;



implementation ldv_del_timer_49($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i1 := del_timer($p0);
    call {:si_unique_call 319} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} disable_suitable_timer_3($p0);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 347592);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} free_($p0);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    return;
}



const reset_port: ref;

axiom reset_port == $sub.ref(0, 348624);

procedure reset_port($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.5, $M.7, $M.9;



implementation reset_port($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i8;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6184, 1));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} tx_stop($p0);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} rx_stop($p0);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 95);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $i9);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} set_signals($p0);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 0);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 0);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6006, 1));
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 0);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} write_reg($p0, 40, $i17);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} write_reg($p0, 41, $i21);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6006, 1));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} write_reg($p0, 42, $i25);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} write_reg($p0, 44, 33);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 349656);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 330} devirtbounce(0, $p1, $i0, $p1);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 350688);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 331} $free($p0);
    return;
}



const netif_tx_stop_queue: ref;

axiom netif_tx_stop_queue == $sub.ref(0, 351720);

procedure netif_tx_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_stop_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(424, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} set_bit(0, $p1);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    return;
}



const hdlc_open: ref;

axiom hdlc_open == $sub.ref(0, 352752);

procedure hdlc_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation hdlc_open($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 1} true;
    call {:si_unique_call 333} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 334} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const startup: ref;

axiom startup == $sub.ref(0, 353784);

procedure startup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.3, $M.5, $M.7, $M.9, $M.4, $M.6, $M.8, $M.10, assertsPassed;



implementation startup($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p50: ref;
  var $i11: i32;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i1 := $M.2;
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 2);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i9 := $and.i64($i8, 2147483648);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1176, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1796, 1));
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 0);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    call {:si_unique_call 338} cmdloc_dummy_var_3 := $memset.i8(cmdloc_dummy_var_2, $p30, 0, 92, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_3;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} reset_port($p0);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} change_params($p0);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $i31 := msecs_to_jiffies(10);
    call {:si_unique_call 342} {:cexpr "tmp___0"} boogie_si_record_i64($i31);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1512, 1));
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, jiffies);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i31, $i33);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} vslice_dummy_var_97 := ldv_mod_timer_47($p32, $i34);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i48 := $or.i64($i47, 2147483648);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p50, $i48);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb14:
    assume $i40 == 1;
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 1816)), $mul.ref(1336, 1));
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} clear_bit(1, $p44);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $p19 := kmalloc($i18, 208);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1176, 1));
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p19);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1176, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} vslice_dummy_var_96 := printk.ref.ref.i32.ref(.str.54, .str.1, 2660, $p26);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb6;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} vslice_dummy_var_95 := printk.ref.ref.i32.ref(.str.53, .str.1, 2651, $p4);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netif_start_queue: ref;

axiom netif_start_queue == $sub.ref(0, 354816);

procedure netif_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} netif_tx_start_queue($p1);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    return;
}



const netif_carrier_on: ref;

axiom netif_carrier_on == $sub.ref(0, 355848);

procedure netif_carrier_on($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_on($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    return;
}



const netif_carrier_off: ref;

axiom netif_carrier_off == $sub.ref(0, 356880);

procedure netif_carrier_off($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_off($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_start_queue: ref;

axiom netif_tx_start_queue == $sub.ref(0, 357912);

procedure netif_tx_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(424, 1));
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} clear_bit(0, $p1);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 358944);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 349} devirtbounce(0, $p1, $i0, $p1);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 359976);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 351} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} ldv_check_alloc_flags($i1);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $p2 := ldv_undef_ptr();
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const change_params: ref;

axiom change_params == $sub.ref(0, 361008);

procedure change_params($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.3, $M.5, $M.7, $M.9;



implementation change_params($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $p40: ref;
  var $p42: ref;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p52: ref;
  var $p54: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $p62: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p68: ref;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i32;
  var $i78: i32;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i64;
  var $p89: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $i94: i32;
  var $i95: i64;
  var $p97: ref;
  var $i98: i64;
  var $i99: i64;
  var $i100: i32;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i32;
  var $p105: ref;
  var $i106: i1;
  var $p108: ref;
  var $i109: i64;
  var $i110: i64;
  var $p112: ref;
  var $p114: ref;
  var $i115: i64;
  var $i116: i64;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $p122: ref;
  var $i123: i64;
  var $i124: i64;
  var $p126: ref;
  var $p128: ref;
  var $i129: i64;
  var $i130: i64;
  var $p132: ref;
  var $p133: ref;
  var $p135: ref;
  var $p136: ref;
  var $p138: ref;
  var $i139: i32;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $i143: i16;
  var $i144: i32;
  var $i145: i32;
  var $i146: i16;
  var $p147: ref;
  var $p149: ref;
  var $p150: ref;
  var $p152: ref;
  var $i153: i32;
  var $i154: i32;
  var $i155: i1;
  var $p157: ref;
  var $p158: ref;
  var $p160: ref;
  var $i161: i32;
  var $i162: i32;
  var $i163: i1;
  var $p164: ref;
  var $i165: i16;
  var $i166: i32;
  var $i167: i32;
  var $i168: i16;
  var $p169: ref;
  var $p171: ref;
  var $p172: ref;
  var $p174: ref;
  var $i175: i32;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $i179: i8;
  var $i180: i32;
  var $i181: i32;
  var $i182: i8;
  var $p183: ref;
  var $p185: ref;
  var $p186: ref;
  var $p188: ref;
  var $i189: i32;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $i193: i8;
  var $i194: i32;
  var $i195: i32;
  var $i196: i8;
  var $p197: ref;
  var $p199: ref;
  var $p200: ref;
  var $p202: ref;
  var $i203: i32;
  var $i204: i32;
  var $i205: i1;
  var $p206: ref;
  var $i207: i8;
  var $i208: i32;
  var $i209: i32;
  var $i210: i8;
  var $p211: ref;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $M.2;
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 2);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    call {:si_unique_call 355} {:cexpr "cflag"} boogie_si_record_i32($i16);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 4111);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 95);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, $i29);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i16, 48);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i31, 48);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i31, 48);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(40, 1));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, 7);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i16, 64);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i50 == 1);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(41, 1));
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(42, 1));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, 0);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i16, 256);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(40, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(41, 1));
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i72, $i76);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i77, 1);
    call {:si_unique_call 356} {:cexpr "bits_per_char"} boogie_si_record_i32($i78);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(32, 1));
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.0, $p80);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i82 := $ule.i64($i81, 460800);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(32, 1));
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i92 := $load.i64($M.0, $p91);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i92, 0);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1156, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i103, 5);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1156, 1));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p105, $i104);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i16, 0);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i106 == 1);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i115 := $load.i64($M.0, $p114);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i116 := $and.i64($i115, 4227858431);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p118, $i116);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i16, 2048);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i120 == 1);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i129 := $load.i64($M.0, $p128);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i130 := $or.i64($i129, 33554432);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p132, $i130);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1166, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p133, 8);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p136, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.0, $p138);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i140 := $and.i32($i139, 16);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i141 := $ne.i32($i140, 0);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p150, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.0, $p152);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i154 := $and.i32($i153, 2);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, 0);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb56, $bb58;

  $bb58:
    assume !($i155 == 1);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.0, $p157);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p158, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.0, $p160);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i162 := $and.i32($i161, 8);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i163 := $ne.i32($i162, 0);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.0, $p171);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p172, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.0, $p174);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i176 := $and.i32($i175, 4);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.0, $p185);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($p186, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i189 := $load.i32($M.0, $p188);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i190 := $and.i32($i189, 1);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i191 := $ne.i32($i190, 0);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} program_hw($p0);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb65:
    assume $i191 == 1;
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1168, 1));
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i193 := $load.i8($M.0, $p192);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i194 := $zext.i8.i32($i193);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i195 := $or.i32($i194, 2);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i196 := $trunc.i32.i8($i195);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1168, 1));
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p197, $i196);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p200 := $load.ref($M.0, $p199);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($p200, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.0, $p202);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i204 := $and.i32($i203, 4);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i205 := $ne.i32($i204, 0);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb67:
    assume $i205 == 1;
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1169, 1));
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i207 := $load.i8($M.0, $p206);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i208 := $zext.i8.i32($i207);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i209 := $or.i32($i208, 8);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i210 := $trunc.i32.i8($i209);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1169, 1));
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p211, $i210);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb62:
    assume $i177 == 1;
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1169, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i179 := $load.i8($M.0, $p178);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i180 := $zext.i8.i32($i179);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i181 := $or.i32($i180, 48);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i182 := $trunc.i32.i8($i181);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1169, 1));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p183, $i182);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i163 == 1;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1164, 1));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i165 := $load.i16($M.0, $p164);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i166 := $zext.i16.i32($i165);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i167 := $or.i32($i166, 2);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i168 := $trunc.i32.i16($i167);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1164, 1));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p169, $i168);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i155 == 1;
    goto $bb57;

  $bb53:
    assume $i141 == 1;
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1166, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i143 := $load.i16($M.0, $p142);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i144 := $zext.i16.i32($i143);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i145 := $or.i32($i144, 48);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i146 := $trunc.i32.i16($i145);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1166, 1));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p147, $i146);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb50:
    assume $i120 == 1;
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i123 := $load.i64($M.0, $p122);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i124 := $and.i64($i123, 4261412863);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p126, $i124);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb47:
    assume $i106 == 1;
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i109 := $load.i64($M.0, $p108);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i110 := $or.i64($i109, 67108864);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p112, $i110);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i93 == 1;
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i94 := $mul.i32($i78, 8000);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i95 := $sext.i32.i64($i94);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(32, 1));
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i98 := $load.i64($M.0, $p97);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i99 := $udiv.i64($i95, $i98);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i64.i32($i99);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1156, 1));
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p101, $i100);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i82 == 1;
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $i86 := tty_get_baud_rate($p85);
    call {:si_unique_call 358} {:cexpr "tmp"} boogie_si_record_i32($i86);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i87 := $zext.i32.i64($i86);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(32, 1));
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p89, $i87);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb32:
    assume $i58 == 1;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i16, 512);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i60 == 1);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(42, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i16, 1073741824);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i66 == 1;
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(42, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p68, 3);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i60 == 1;
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(42, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, 2);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb29:
    assume $i50 == 1;
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(41, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, 2);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(40, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, 8);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb14:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i31, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb18;

  $bb19:
    assume $i35 == 1;
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(40, 1));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, 7);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb12:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i31, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i31, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb18;

  $bb23:
    assume $i37 == 1;
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(40, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 6);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb21:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i31, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb18;

  $bb25:
    assume $i38 == 1;
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(40, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, 5);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i21, 160);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, $i23);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} vslice_dummy_var_98 := printk.ref.ref.i32.ref(.str.55, .str.1, 2771, $p9);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 362040);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} {:cexpr "msecs_to_jiffies:arg:m"} boogie_si_record_i32($i0);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i1 := __msecs_to_jiffies($i0);
    call {:si_unique_call 362} {:cexpr "tmp___0"} boogie_si_record_i64($i1);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mod_timer_47: ref;

axiom ldv_mod_timer_47 == $sub.ref(0, 363072);

procedure ldv_mod_timer_47($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9;



implementation ldv_mod_timer_47($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} {:cexpr "ldv_mod_timer_47:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 365} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} activate_pending_timer_3($p0, $i1, 1);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mod_timer: ref;

axiom mod_timer == $sub.ref(0, 364104);

procedure mod_timer($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mod_timer($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 367} {:cexpr "mod_timer:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 1} true;
    call {:si_unique_call 368} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 369} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const activate_pending_timer_3: ref;

axiom activate_pending_timer_3 == $sub.ref(0, 365136);

procedure activate_pending_timer_3($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9;



implementation activate_pending_timer_3($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} {:cexpr "activate_pending_timer_3:arg:data"} boogie_si_record_i64($i1);
    call {:si_unique_call 371} {:cexpr "activate_pending_timer_3:arg:pending_flag"} boogie_si_record_i32($i2);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p3 := $M.4;
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i4, $i5);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $M.6;
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i13, $i14);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p21 := $M.8;
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p30 := $M.10;
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p0);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i31, $i32);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} activate_suitable_timer_3($p0, $i1);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i33 == 1;
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i34 := $M.9;
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i35 == 1);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i2, 0);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $M.10 := $p0;
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $p37 := $M.10;
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p38, $i1);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 375} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(1);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb32;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i25 := $M.7;
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i26 == 1);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i2, 0);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $M.8 := $p0;
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p28 := $M.8;
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i1);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 374} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(1);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb23;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i16 := $M.5;
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i17 == 1);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i2, 0);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.6 := $p0;
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p19 := $M.6;
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i1);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 373} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(1);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb14;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i7 := $M.3;
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 2);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.4 := $p0;
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p10 := $M.4;
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i1);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 372} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(1);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb4;
}



const activate_suitable_timer_3: ref;

axiom activate_suitable_timer_3 == $sub.ref(0, 366168);

procedure activate_suitable_timer_3($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.4, $M.0, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9;



implementation activate_suitable_timer_3($p0: ref, $i1: i64)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} {:cexpr "activate_suitable_timer_3:arg:data"} boogie_si_record_i64($i1);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i2 := $M.3;
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i4 := $M.3;
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $M.5;
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i9 == 1);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i10 := $M.5;
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $M.7;
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i15 == 1);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i16 := $M.7;
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i20 := $M.9;
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i21 == 1);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i22 := $M.9;
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.10 := $p0;
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p24 := $M.10;
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i1);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 381} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(1);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $M.8 := $p0;
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p18 := $M.8;
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i1);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 380} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(1);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.6 := $p0;
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $p12 := $M.6;
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i1);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 379} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(1);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $M.4 := $p0;
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p6 := $M.4;
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, $i1);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 378} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(1);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const __msecs_to_jiffies: ref;

axiom __msecs_to_jiffies == $sub.ref(0, 367200);

procedure __msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation __msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 382} {:cexpr "__msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 1} true;
    call {:si_unique_call 383} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 384} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const tty_get_baud_rate: ref;

axiom tty_get_baud_rate == $sub.ref(0, 368232);

procedure tty_get_baud_rate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_get_baud_rate($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $i2 := tty_termios_baud_rate($p1);
    call {:si_unique_call 386} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const tty_termios_baud_rate: ref;

axiom tty_termios_baud_rate == $sub.ref(0, 369264);

procedure tty_termios_baud_rate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_termios_baud_rate($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 1} true;
    call {:si_unique_call 387} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 388} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 370296);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} ldv_error();
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 371328);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 1} true;
    call {:si_unique_call 391} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 392} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 372360);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 393} __VERIFIER_error();
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const synclinkmp_init_one: ref;

axiom synclinkmp_init_one == $sub.ref(0, 373392);

procedure synclinkmp_init_one($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.0, $M.15, $M.17, $M.1, $CurrAddr, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.47, $M.26, $M.27, $M.25, $M.29, $M.30, $M.28, $M.32, $M.33, $M.31, $M.35, $M.36, $M.34, $M.18, $M.21, $M.48, assertsPassed, $M.49, $M.22;



implementation synclinkmp_init_one($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i5: i32;
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $i2 := pci_enable_device($p0);
    call {:si_unique_call 395} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $M.14;
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 1);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $M.14 := $i7;
    call {:si_unique_call 397} {:cexpr "synclinkmp_adapter_count"} boogie_si_record_i32($i7);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i8 := $M.14;
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} device_init($i8, $p0);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} vslice_dummy_var_99 := printk.ref.ref(.str.57, $p0);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 5);
    goto $bb3;
}



const synclinkmp_remove_one: ref;

axiom synclinkmp_remove_one == $sub.ref(0, 374424);

procedure synclinkmp_remove_one($p0: ref);
  free requires assertsPassed;



implementation synclinkmp_remove_one($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 375456);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 1} true;
    call {:si_unique_call 399} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 400} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const device_init: ref;

axiom device_init == $sub.ref(0, 376488);

procedure device_init($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.1, $CurrAddr, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.47, $M.26, $M.27, $M.25, $M.29, $M.30, $M.28, $M.32, $M.33, $M.31, $M.35, $M.36, $M.34, $M.18, $M.21, $M.48, assertsPassed, $M.49, $M.22;



implementation device_init($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i16: i32;
  var $i27: i32;
  var $i28: i1;
  var $i4: i32;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i29: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i64;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $i148: i32;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $i194: i32;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var vslice_dummy_var_100: ref;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 403} {:cexpr "device_init:arg:adapter_num"} boogie_si_record_i32($i0);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb1;

  $bb1:
    call $p5, $i6, $p7, $i8, $p9, $p10, $i11, $i12, $i13, $i27, $i28, $i4 := device_init_loop_$bb1($i0, $p1, $p2, $p5, $i6, $p7, $i8, $p9, $p10, $i11, $i12, $i13, $i27, $i28, $i4);
    goto $bb1_last;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $p5 := alloc_dev($i0, $i4, $p1);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref($i6, 8));
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p5);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i4);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref($i8, 8));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i13 := $i4;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i4, 1);
    call {:si_unique_call 409} {:cexpr "port"} boogie_si_record_i32($i27);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i28 := $sle.i32($i27, 3);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb18;

  $bb18:
    call $i30, $p31, $p32, $p33, $p34, $p35, $i36, $p37, $p38, $i39, $p40, $p41, $p42, $i44, $p45, $p46, $p48, $p49, $i50, $i51, $i29, cmdloc_dummy_var_4, cmdloc_dummy_var_5, cmdloc_dummy_var_6, vslice_dummy_var_100 := device_init_loop_$bb18($p2, $p3, $i30, $p31, $p32, $p33, $p34, $p35, $i36, $p37, $p38, $i39, $p40, $p41, $p42, $i44, $p45, $p46, $p48, $p49, $i50, $i51, $i29, cmdloc_dummy_var_4, cmdloc_dummy_var_5, cmdloc_dummy_var_6, vslice_dummy_var_100);
    goto $bb18_last;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref($i30, 8));
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 6384)), $mul.ref(6048, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p2);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_4 := $M.0;
    cmdloc_dummy_var_5 := $M.0;
    call {:si_unique_call 410} cmdloc_dummy_var_6 := $memcpy.i8(cmdloc_dummy_var_4, cmdloc_dummy_var_5, $p34, $p35, 32, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_6;
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i29);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref($i36, 8));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} add_device($p38);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i29);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref($i39, 8));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} vslice_dummy_var_100 := spinlock_check($p42);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i29);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref($i44, 8));
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 6384)), $mul.ref(1640, 1)), $mul.ref(0, 1));
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} __raw_spin_lock_init($p49, .str.58, $p3);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i29, 1);
    call {:si_unique_call 414} {:cexpr "port"} boogie_si_record_i32($i50);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i51 := $sle.i32($i50, 3);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $i54 := claim_resources($p53);
    call {:si_unique_call 416} {:cexpr "tmp___0"} boogie_si_record_i32($i54);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume $i55 == 1;
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} vslice_dummy_var_101 := alloc_dma_bufs($p57);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 8));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p61);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p64);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_7 := $M.0;
    cmdloc_dummy_var_8 := $M.0;
    call {:si_unique_call 418} cmdloc_dummy_var_9 := $memcpy.i8(cmdloc_dummy_var_7, cmdloc_dummy_var_8, $p65, $p66, 72, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_9;
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 6384)), $mul.ref(6084, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 8));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 6384)), $mul.ref(6084, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $i70);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 6384)), $mul.ref(6168, 1));
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 8));
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 6384)), $mul.ref(6168, 1));
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p80, $p77);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 6384)), $mul.ref(6184, 1));
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 8));
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 6384)), $mul.ref(6184, 1));
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p87, $p84);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 6384)), $mul.ref(6232, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 8));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 6384)), $mul.ref(6232, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p94, $p91);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 6384)), $mul.ref(6208, 1));
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 8));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 6384)), $mul.ref(6208, 1));
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p101, $p98);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 8));
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} vslice_dummy_var_102 := alloc_dma_bufs($p103);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(2, 8));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p138, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p141, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p139);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p142);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_10 := $M.0;
    cmdloc_dummy_var_11 := $M.0;
    call {:si_unique_call 420} cmdloc_dummy_var_12 := $memcpy.i8(cmdloc_dummy_var_10, cmdloc_dummy_var_11, $p143, $p144, 72, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_12;
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p146, $mul.ref(0, 6384)), $mul.ref(6084, 1));
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.0, $p147);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(2, 8));
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p150, $mul.ref(0, 6384)), $mul.ref(6084, 1));
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p151, $i148);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p153, $mul.ref(0, 6384)), $mul.ref(6168, 1));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(2, 8));
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p157, $mul.ref(0, 6384)), $mul.ref(6168, 1));
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p158, $p155);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p159);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p160, $mul.ref(0, 6384)), $mul.ref(6184, 1));
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.0, $p161);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(2, 8));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.0, $p163);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p164, $mul.ref(0, 6384)), $mul.ref(6184, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p165, $p162);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.0, $p166);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p167, $mul.ref(0, 6384)), $mul.ref(6232, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.0, $p168);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(2, 8));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.0, $p170);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p171, $mul.ref(0, 6384)), $mul.ref(6232, 1));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p172, $p169);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.0, $p173);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p174, $mul.ref(0, 6384)), $mul.ref(6208, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.0, $p175);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(2, 8));
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.0, $p177);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p178, $mul.ref(0, 6384)), $mul.ref(6208, 1));
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p179, $p176);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(2, 8));
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} vslice_dummy_var_103 := alloc_dma_bufs($p181);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(3, 8));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p184, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p187 := $load.ref($M.0, $p186);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p187, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p189 := $bitcast.ref.ref($p185);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p190 := $bitcast.ref.ref($p188);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_13 := $M.0;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 426} cmdloc_dummy_var_15 := $memcpy.i8(cmdloc_dummy_var_13, cmdloc_dummy_var_14, $p189, $p190, 72, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p192, $mul.ref(0, 6384)), $mul.ref(6084, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i194 := $load.i32($M.0, $p193);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(3, 8));
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p196 := $load.ref($M.0, $p195);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p196, $mul.ref(0, 6384)), $mul.ref(6084, 1));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p197, $i194);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p199 := $load.ref($M.0, $p198);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p199, $mul.ref(0, 6384)), $mul.ref(6168, 1));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $p201 := $load.ref($M.0, $p200);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(3, 8));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p203 := $load.ref($M.0, $p202);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p203, $mul.ref(0, 6384)), $mul.ref(6168, 1));
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p204, $p201);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p206 := $load.ref($M.0, $p205);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p206, $mul.ref(0, 6384)), $mul.ref(6184, 1));
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(3, 8));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.0, $p209);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p210, $mul.ref(0, 6384)), $mul.ref(6184, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p211, $p208);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p213 := $load.ref($M.0, $p212);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p213, $mul.ref(0, 6384)), $mul.ref(6232, 1));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p215 := $load.ref($M.0, $p214);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(3, 8));
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.0, $p216);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p217, $mul.ref(0, 6384)), $mul.ref(6232, 1));
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p218, $p215);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p220 := $load.ref($M.0, $p219);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p220, $mul.ref(0, 6384)), $mul.ref(6208, 1));
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(3, 8));
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p224 := $load.ref($M.0, $p223);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p224, $mul.ref(0, 6384)), $mul.ref(6208, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p225, $p222);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(3, 8));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p227 := $load.ref($M.0, $p226);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} vslice_dummy_var_106 := alloc_dma_bufs($p227);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 6384)), $mul.ref(6084, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 6384)), $mul.ref(6088, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i112 := $load.i64($M.0, $p111);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $i120 := ldv_request_irq_51($i108, synclinkmp_interrupt, $i112, $p116, $p119);
    call {:si_unique_call 423} {:cexpr "tmp"} boogie_si_record_i32($i120);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i121 := $slt.i32($i120, 0);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i121 == 1);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p132, $mul.ref(0, 6384)), $mul.ref(6096, 1));
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p133, 1);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} vslice_dummy_var_105 := adapter_test($p135);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i121 == 1;
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p127, $mul.ref(0, 6384)), $mul.ref(6084, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} vslice_dummy_var_104 := printk.ref.ref.i32.ref.i32(.str.59, .str.1, 3879, $p125, $i129);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i29 := $i50;
    goto $bb20_dummy;

  $bb15:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i27;
    goto $bb15_dummy;

  $bb3:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32($i13, 1);
    call {:si_unique_call 405} {:cexpr "port"} boogie_si_record_i32($i14);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i15 := $sge.i32($i14, 0);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    goto $bb8;

  $bb8:
    call $i17, $p18, $p19, $p20, $i21, $p22, $p23, $p24, $i25, $i26, $i16 := device_init_loop_$bb8($p2, $i17, $p18, $p19, $p20, $i21, $p22, $p23, $p24, $i25, $i26, $i16);
    goto $bb8_last;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref($i17, 8));
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 6384)), $mul.ref(16, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} tty_port_destroy($p20);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i16);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref($i21, 8));
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} kfree($p24);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i16, 1);
    call {:si_unique_call 408} {:cexpr "port"} boogie_si_record_i32($i25);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i26 := $sge.i32($i25, 0);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i16 := $i25;
    goto $bb10_dummy;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb20_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2370;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2350;

  $bb15_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2332;
}



const alloc_dev: ref;

axiom alloc_dev == $sub.ref(0, 377520);

procedure alloc_dev($i0: i32, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $CurrAddr, assertsPassed;



implementation alloc_dev($i0: i32, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i32;
  var $p54: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i32;
  var $p60: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i32;
  var $p66: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $p102: ref;
  var $i103: i64;
  var $p105: ref;
  var $p106: ref;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: ref;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 433} {:cexpr "alloc_dev:arg:adapter_num"} boogie_si_record_i32($i0);
    call {:si_unique_call 434} {:cexpr "alloc_dev:arg:port_num"} boogie_si_record_i32($i1);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $p8 := kmalloc(6384, 208);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(16, 1));
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} tty_port_init($p13);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(328, 1));
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, port_ops);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(8, 1));
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 21505);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(1712, 1));
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} __init_work($p17, 0);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p18, 137438953408);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(1712, 1)), $mul.ref(0, 1));
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p4);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.0;
    cmdloc_dummy_var_17 := $M.0;
    call {:si_unique_call 439} cmdloc_dummy_var_18 := $memcpy.i8(cmdloc_dummy_var_16, cmdloc_dummy_var_17, $p21, $p22, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_18;
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(1712, 1)), $mul.ref(32, 1));
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} lockdep_init_map($p24, .str.61, $p3, 0);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(1712, 1)), $mul.ref(8, 1));
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} INIT_LIST_HEAD($p26);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(1712, 1)), $mul.ref(24, 1));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, bh_handler);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 4096);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(1024, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 125);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(1028, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 7500);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(1200, 1));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} __init_waitqueue_head($p34, .str.62, $p5);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(1288, 1));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} __init_waitqueue_head($p35, .str.63, $p6);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6304, 1));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} vslice_dummy_var_108 := spinlock_check($p36);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6304, 1)), $mul.ref(0, 1));
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} __raw_spin_lock_init($p40, .str.64, $p7);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6104, 1));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} llvm.memmove.p0i8.p0i8.i64($p42, default_params, 48, 8, 0);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6000, 1));
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 0);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6040, 1));
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i0);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6044, 1));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i1);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6084, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p51);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i52);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6216, 1));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(2, 56)), $mul.ref(0, 1));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.0, $p57);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i64.i32($i58);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6192, 1));
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(3, 56)), $mul.ref(0, 1));
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.0, $p63);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i64.i32($i64);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6176, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i65);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(4, 56)), $mul.ref(0, 1));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.0, $p69);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i64.i32($i70);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6240, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6216, 1));
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 4095);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6220, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p76, $i75);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6216, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i78, $sub.i32(0, 4096));
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6216, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i79);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6192, 1));
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i82, 4095);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6196, 1));
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, $i83);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6192, 1));
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, $sub.i32(0, 4096));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6192, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, $i87);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6240, 1));
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i90, 4095);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6244, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p92, $i91);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6240, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i94, $sub.i32(0, 4096));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6240, 1));
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, $i95);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6080, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p97, 5);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6088, 1));
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p98, 128);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(1376, 1));
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p9);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} vslice_dummy_var_109 := reg_timer_3($p99, tx_timeout, $i100);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(1512, 1));
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i103 := $p2i.ref.i64($p9);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} vslice_dummy_var_110 := reg_timer_3($p102, status_timeout, $i103);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6252, 1));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p105, 142492998);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p9, $mul.ref(0, 6384)), $mul.ref(6156, 1));
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} vslice_dummy_var_107 := printk.ref.ref.i32.i32.i32(.str.60, .str.1, 3766, $i0, $i1);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const tty_port_destroy: ref;

axiom tty_port_destroy == $sub.ref(0, 378552);

procedure tty_port_destroy($p0: ref);
  free requires assertsPassed;



implementation tty_port_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 379584);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const add_device: ref;

axiom add_device == $sub.ref(0, 380616);

procedure add_device($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.48, $M.49, $CurrAddr;



implementation add_device($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p37: ref;
  var $p44: ref;
  var $p36: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $i67: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1504, 1));
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $0.ref);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i2 := $M.15;
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1056, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i2);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6040, 1));
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6044, 1));
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} vslice_dummy_var_111 := sprintf.ref.ref.i32.i32($p5, .str.65, $i7, $i9);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1056, 1));
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i13 := $sle.i32($i12, 11);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i26 := $M.15;
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 1);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $M.15 := $i27;
    call {:si_unique_call 450} {:cexpr "synclinkmp_device_count"} boogie_si_record_i32($i27);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p28 := $M.17;
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p31 := $M.17;
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 6384)), $mul.ref(1504, 1));
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p36 := $p31;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p36, $mul.ref(0, 6384)), $mul.ref(1504, 1));
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p0);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i48 := $ule.i32($i47, 4095);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i48 == 1);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i52 := $ugt.i32($i51, 65535);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6192, 1));
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6176, 1));
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6240, 1));
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6216, 1));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6084, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} vslice_dummy_var_112 := printk.ref.ref.i32.i32.i32.i32.i32.i32(.str.66, $p55, $i57, $i59, $i61, $i63, $i65, $i67);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} vslice_dummy_var_113 := hdlcdev_init($p0);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i52 == 1;
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 65535);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i48 == 1;
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 4096);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb10:
    assume $i35 == 1;
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p37 := $p31;
    goto $bb13;

  $bb13:
    call $p38, $p39, $p40, $p41, $i42, $i43, $p37, $p44 := add_device_loop_$bb13($p38, $p39, $p40, $p41, $i42, $i43, $p37, $p44);
    goto $bb13_last;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 6384)), $mul.ref(1504, 1));
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 6384)), $mul.ref(1504, 1));
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p44 := $p39;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p36 := $p44;
    goto $bb12;

  $bb15:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $p37 := $p39;
    goto $bb15_dummy;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $M.17 := $p0;
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1056, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(maxframe, $mul.ref(0, 48)), $mul.ref($i16, 4));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.16, $p17);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1056, 1));
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref(maxframe, $mul.ref(0, 48)), $mul.ref($i22, 4));
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.16, $p23);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb15_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2783;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 381648);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 382680);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    return;
}



const claim_resources: ref;

axiom claim_resources == $sub.ref(0, 383712);

procedure claim_resources($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.47, $M.25, $M.28, $M.31, $M.34, $CurrAddr;



implementation claim_resources($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i64;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i64;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i64;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $i101: i64;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i64;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i32;
  var $i123: i64;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i64;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i32;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i32;
  var $i140: i64;
  var $p141: ref;
  var $p142: ref;
  var $i143: i1;
  var $i144: i8;
  var $i145: i1;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i32;
  var $p153: ref;
  var $i154: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6176, 1));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $p4 := __request_region(iomem_resource, $i3, 262144, .str.70, 0);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6180, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6216, 1));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6220, 1));
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i15, $i17);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $p20 := __request_region(iomem_resource, $i19, 128, .str.70, 0);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6224, 1));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6192, 1));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6196, 1));
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i31, $i33);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i34);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $p36 := __request_region(iomem_resource, $i35, 512, .str.70, 0);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6200, 1));
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6240, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6244, 1));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i47, $i49);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i51 := $zext.i32.i64($i50);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $p52 := __request_region(iomem_resource, $i51, 16, .str.70, 0);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i54 == 1);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6248, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6176, 1));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i64 := $zext.i32.i64($i63);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $p65 := ioremap_nocache($i64, 262144);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6168, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $p65);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6168, 1));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i70 := $eq.i64($i69, 0);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6216, 1));
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i79 := $zext.i32.i64($i78);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $p80 := ioremap_nocache($i79, 4096);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6208, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p81, $p80);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6208, 1));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i85 := $eq.i64($i84, 0);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6208, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6220, 1));
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i96 := $zext.i32.i64($i95);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p93, $mul.ref($i96, 1));
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6208, 1));
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p98, $p97);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6192, 1));
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i101 := $zext.i32.i64($i100);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $p102 := ioremap_nocache($i101, 4096);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6184, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p103, $p102);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6184, 1));
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p105);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i107 := $eq.i64($i106, 0);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6184, 1));
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6196, 1));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.0, $p116);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i118 := $zext.i32.i64($i117);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p115, $mul.ref($i118, 1));
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6184, 1));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p120, $p119);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6240, 1));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p121);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i123 := $zext.i32.i64($i122);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $p124 := ioremap_nocache($i123, 4096);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6232, 1));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p125, $p124);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6232, 1));
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p127);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i129 := $eq.i64($i128, 0);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6232, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6244, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.0, $p138);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i140 := $zext.i32.i64($i139);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p137, $mul.ref($i140, 1));
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6232, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p142, $p141);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i143 := memory_test($p0);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i144 := $zext.i1.i8($i143);
    call {:si_unique_call 471} {:cexpr "tmp___7"} boogie_si_record_i8($i144);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i8.i1($i144);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    $i146 := 1;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i147 := $ne.i32($i146, 0);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i154 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $r := $i154;
    return;

  $bb29:
    assume $i147 == 1;
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p148);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6176, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.0, $p150);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} vslice_dummy_var_122 := printk.ref.ref.i32.ref.i32(.str.79, .str.1, 3638, $p149, $i151);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6156, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p153, 12);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} release_resources($p0);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i154 := $sub.i32(0, 19);
    goto $bb32;

  $bb26:
    assume $i145 == 1;
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i146 := 0;
    goto $bb28;

  $bb23:
    assume $i129 == 1;
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6240, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} vslice_dummy_var_121 := printk.ref.ref.i32.ref.i32(.str.78, .str.1, 3630, $p131, $i133);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6156, 1));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p135, 8);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb20:
    assume $i107 == 1;
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6192, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} vslice_dummy_var_120 := printk.ref.ref.i32.ref.i32(.str.77, .str.1, 3620, $p109, $i111);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6156, 1));
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, 8);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb17:
    assume $i85 == 1;
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6216, 1));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} vslice_dummy_var_119 := printk.ref.ref.i32.ref.i32(.str.76, .str.1, 3611, $p87, $i89);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6156, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p91, 8);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i70 == 1;
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6176, 1));
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} vslice_dummy_var_118 := printk.ref.ref.i32.ref.i32(.str.75, .str.1, 3603, $p72, $i74);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6156, 1));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p76, 8);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume $i54 == 1;
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6240, 1));
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} vslice_dummy_var_117 := printk.ref.ref.i32.ref.i32(.str.74, .str.1, 3592, $p56, $i58);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6156, 1));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, 2);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6192, 1));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} vslice_dummy_var_116 := printk.ref.ref.i32.ref.i32(.str.73, .str.1, 3583, $p40, $i42);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6156, 1));
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, 2);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6216, 1));
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} vslice_dummy_var_115 := printk.ref.ref.i32.ref.i32(.str.72, .str.1, 3574, $p24, $i26);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6156, 1));
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 2);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6176, 1));
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} vslice_dummy_var_114 := printk.ref.ref.i32.ref.i32(.str.71, .str.1, 3565, $p8, $i10);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6156, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 2);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const alloc_dma_bufs: ref;

axiom alloc_dma_bufs == $sub.ref(0, 384744);

procedure alloc_dma_bufs($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation alloc_dma_bufs($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i16;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i16;
  var $i19: i16;
  var $i20: i32;
  var $i21: i1;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $i61: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6044, 1));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i3 := $mul.i32($i2, 65536);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 6384)), $mul.ref(6160, 1));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i3);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i10 := $udiv.i32($i9, 1024);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    call {:si_unique_call 473} {:cexpr "BuffersPerFrame"} boogie_si_record_i16($i11);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 1023);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i19 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32(60);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i32($i20, 409);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := 60;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i19);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 1);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3916, 1));
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3916, 1));
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i22);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i29 := $udiv.i32($i28, 2);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i32($i27, $i29);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3916, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i36 := $ugt.i32($i35, 128);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i22);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3916, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i38, $i40);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1848, 1));
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1848, 1));
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i45 := $ugt.i32($i44, 128);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i47 := $M.2;
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i48 := $sgt.i32($i47, 2);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $i56 := alloc_buf_list($p0);
    call {:si_unique_call 477} {:cexpr "tmp"} boogie_si_record_i32($i56);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i56, 0);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i57 == 1);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1856, 1));
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1864, 1));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1848, 1));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $i68 := alloc_frame_bufs($p0, $p63, $p65, $i67);
    call {:si_unique_call 480} {:cexpr "tmp___0"} boogie_si_record_i32($i68);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i68, 0);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i69 == 1);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3920, 1));
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3928, 1));
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3916, 1));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $i79 := alloc_frame_bufs($p0, $p74, $p76, $i78);
    call {:si_unique_call 483} {:cexpr "tmp___1"} boogie_si_record_i32($i79);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i79, 0);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i80 == 1);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i84 := alloc_tmp_rx_buf($p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 486} {:cexpr "tmp___2"} boogie_si_record_i32($i84);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i84, 0);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} rx_reset_buffers($p0);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i61 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $r := $i61;
    return;

  $bb26:
    assume $i85 == 1;
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} vslice_dummy_var_127 := printk.ref.ref.i32.ref(.str.83, .str.1, 3441, $p87);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32(0, 12);
    goto $bb21;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i80 == 1;
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} vslice_dummy_var_126 := printk.ref.ref.i32.ref(.str.83, .str.1, 3441, $p82);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32(0, 12);
    goto $bb21;

  $bb22:
    assume $i69 == 1;
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} vslice_dummy_var_125 := printk.ref.ref.i32.ref(.str.83, .str.1, 3441, $p71);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32(0, 12);
    goto $bb21;

  $bb19:
    assume $i57 == 1;
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} vslice_dummy_var_124 := printk.ref.ref.i32.ref(.str.83, .str.1, 3441, $p59);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32(0, 12);
    goto $bb21;

  $bb16:
    assume $i48 == 1;
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3916, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1848, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} vslice_dummy_var_123 := printk.ref.ref.i32.ref.i32.i32(.str.82, .str.1, 3427, $p50, $i52, $i54);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i45 == 1;
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1848, 1));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 128);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i36 == 1;
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3916, 1));
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 128);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i22);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i32 := $udiv.i32($i31, 2);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3916, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i22 := 409;
    goto $bb6;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i11);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 1);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    call {:si_unique_call 474} {:cexpr "BuffersPerFrame"} boogie_si_record_i16($i18);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb3;
}



const synclinkmp_interrupt: ref;

axiom synclinkmp_interrupt == $sub.ref(0, 385776);

procedure synclinkmp_interrupt($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.22, $M.45, $M.46, $M.3, $M.5, $M.7, $M.9, $CurrAddr, $M.4, $M.6, $M.8, $M.10, $M.38, $M.37, $M.39, $M.41, $M.43;



implementation synclinkmp_interrupt($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i8;
  var $i11: i8;
  var $i12: i16;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i16;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i8;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i49: i8;
  var $i50: i8;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $i68: i64;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $i75: i1;
  var $i76: i8;
  var $i77: i8;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i8;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var $i87: i64;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $i96: i64;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $i105: i64;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $i113: i1;
  var $i114: i64;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $i121: i32;
  var $i122: i1;
  var $i123: i64;
  var $p125: ref;
  var $p126: ref;
  var $i127: i32;
  var $i128: i32;
  var $i129: i32;
  var $i130: i32;
  var $i131: i1;
  var $i132: i64;
  var $p134: ref;
  var $p135: ref;
  var $i136: i32;
  var $i137: i32;
  var $i138: i32;
  var $i139: i32;
  var $i140: i1;
  var $i141: i64;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $i146: i32;
  var $i147: i32;
  var $i148: i32;
  var $i149: i1;
  var $i150: i64;
  var $p152: ref;
  var $p153: ref;
  var $i74: i32;
  var $i154: i32;
  var $i155: i32;
  var $i156: i1;
  var $i67: i32;
  var $i157: i32;
  var $i158: i32;
  var $i159: i1;
  var $p161: ref;
  var $p162: ref;
  var $i163: i32;
  var $i164: i32;
  var $i165: i1;
  var $p167: ref;
  var $p168: ref;
  var $i169: i32;
  var $i170: i32;
  var $i171: i1;
  var $p173: ref;
  var $p174: ref;
  var $i175: i32;
  var $i176: i32;
  var $i177: i1;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $i182: i32;
  var $i183: i1;
  var $i185: i64;
  var $p187: ref;
  var $p188: ref;
  var $i189: i64;
  var $i190: i1;
  var $p192: ref;
  var $i193: i32;
  var $i194: i1;
  var $p195: ref;
  var $i196: i32;
  var $i197: i1;
  var $p198: ref;
  var $i199: i32;
  var $i200: i1;
  var $p201: ref;
  var $i202: i8;
  var $i203: i1;
  var $p204: ref;
  var $i205: i8;
  var $i206: i1;
  var $i207: i32;
  var $i208: i1;
  var $p209: ref;
  var $p210: ref;
  var $p212: ref;
  var $p214: ref;
  var $i215: i32;
  var $i216: i32;
  var $i217: i1;
  var $i184: i32;
  var $p218: ref;
  var $i219: i32;
  var $i220: i1;
  var $p221: ref;
  var $i222: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i1;
  var vslice_dummy_var_133: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} {:cexpr "synclinkmp_interrupt:arg:dummy"} boogie_si_record_i32($i0);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i3 := $M.2;
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 4);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} spin_lock($p8);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i9, $i10, $i11 := 0, 0, 0;
    goto $bb4;

  $bb4:
    call $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $p20, $p21, $i22, $i23, $i24, $p26, $i27, $i28, $p30, $p31, $i32, $i33, $i34, $i35, $i36, $p38, $p39, $i40, $i41, $i42, $p43, $p44, $i45, $i46, $i47, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $p64, $i65, $i66, $i68, $p70, $p71, $i72, $i73, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $p89, $p90, $i91, $i92, $i93, $i94, $i95, $i96, $p98, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $p107, $p108, $i109, $i110, $i111, $i112, $i113, $i114, $p116, $p117, $i118, $i119, $i120, $i121, $i122, $i123, $p125, $p126, $i127, $i128, $i129, $i130, $i131, $i132, $p134, $p135, $i136, $i137, $i138, $i139, $i140, $i141, $p143, $p144, $i145, $i146, $i147, $i148, $i149, $i150, $p152, $p153, $i74, $i154, $i155, $i156, $i67, $i157, $i158, $i159, $p161, $p162, $i163, $i164, $i165, $p167, $p168, $i169, $i170, $i171, $p173, $p174, $i175, $i176, $i177, $p179, $p180, vslice_dummy_var_129, vslice_dummy_var_130 := synclinkmp_interrupt_loop_$bb4($p2, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $p20, $p21, $i22, $i23, $i24, $p26, $i27, $i28, $p30, $p31, $i32, $i33, $i34, $i35, $i36, $p38, $p39, $i40, $i41, $i42, $p43, $p44, $i45, $i46, $i47, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $p64, $i65, $i66, $i68, $p70, $p71, $i72, $i73, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $p89, $p90, $i91, $i92, $i93, $i94, $i95, $i96, $p98, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $p107, $p108, $i109, $i110, $i111, $i112, $i113, $i114, $p116, $p117, $i118, $i119, $i120, $i121, $i122, $i123, $p125, $p126, $i127, $i128, $i129, $i130, $i131, $i132, $p134, $p135, $i136, $i137, $i138, $i139, $i140, $i141, $p143, $p144, $i145, $i146, $i147, $i148, $i149, $i150, $p152, $p153, $i74, $i154, $i155, $i156, $i67, $i157, $i158, $i159, $p161, $p162, $i163, $i164, $i165, $p167, $p168, $i169, $i170, $i171, $p173, $p174, $i175, $i176, $i177, $p179, $p180, vslice_dummy_var_129, vslice_dummy_var_130);
    goto $bb4_last;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $i12 := read_reg16($p2, 16);
    call {:si_unique_call 493} {:cexpr "tmp"} boogie_si_record_i16($i12);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i16.i8($i12);
    call {:si_unique_call 494} {:cexpr "status0"} boogie_si_record_i8($i13);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i12);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i15 := $ashr.i32($i14, 8);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    call {:si_unique_call 495} {:cexpr "dmastatus0"} boogie_si_record_i8($i16);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $i17 := read_reg($p2, 18);
    call {:si_unique_call 497} {:cexpr "timerstatus0"} boogie_si_record_i8($i17);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i18 := $M.2;
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, 4);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(6036, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 4);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i49, $i50, $i51 := $i9, $i10, $i11;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i13);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(6036, 1));
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i66 := $ugt.i32($i65, 0);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32($i17);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i158 := $and.i32($i157, 48);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i159 := $ne.i32($i158, 0);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i163 := $zext.i8.i32($i17);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i164 := $and.i32($i163, 192);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i165 := $ne.i32($i164, 0);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i169 := $zext.i8.i32($i51);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i170 := $and.i32($i169, 48);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i171 := $ne.i32($i170, 0);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i175 := $zext.i8.i32($i51);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i176 := $and.i32($i175, 192);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i9, $i10, $i11 := $i49, $i50, $i51;
    goto $bb79_dummy;

  $bb77:
    assume $i177 == 1;
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(3, 8));
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p180 := $load.ref($M.0, $p179);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} isr_timer($p180);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb74:
    assume $i171 == 1;
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(2, 8));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.0, $p173);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} isr_timer($p174);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb71:
    assume $i165 == 1;
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(1, 8));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.0, $p167);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} isr_timer($p168);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb68:
    assume $i159 == 1;
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.0, $p161);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} isr_timer($p162);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb29:
    assume $i66 == 1;
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i67 := 0;
    goto $bb32;

  $bb32:
    call $i68, $p70, $p71, $i72, $i73, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $p89, $p90, $i91, $i92, $i93, $i94, $i95, $i96, $p98, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $p107, $p108, $i109, $i110, $i111, $i112, $i113, $i114, $p116, $p117, $i118, $i119, $i120, $i121, $i122, $i123, $p125, $p126, $i127, $i128, $i129, $i130, $i131, $i132, $p134, $p135, $i136, $i137, $i138, $i139, $i140, $i141, $p143, $p144, $i145, $i146, $i147, $i148, $i149, $i150, $p152, $p153, $i74, $i154, $i155, $i156, $i67 := synclinkmp_interrupt_loop_$bb32($p2, $i13, $i16, $i49, $i50, $p64, $i68, $p70, $p71, $i72, $i73, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $p89, $p90, $i91, $i92, $i93, $i94, $i95, $i96, $p98, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $p107, $p108, $i109, $i110, $i111, $i112, $i113, $i114, $p116, $p117, $i118, $i119, $i120, $i121, $i122, $i123, $p125, $p126, $i127, $i128, $i129, $i130, $i131, $i132, $p134, $p135, $i136, $i137, $i138, $i139, $i140, $i141, $p143, $p144, $i145, $i146, $i147, $i148, $i149, $i150, $p152, $p153, $i74, $i154, $i155, $i156, $i67);
    goto $bb32_last;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i68 := $zext.i32.i64($i67);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref($i68, 8));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i73 := $eq.i64($i72, 0);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i75 := $ule.i32($i67, 1);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76, $i77 := $i50, $i49;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i78 := $and.i32($i67, 1);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i80 := (if $i79 == 1 then 4 else 0);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i8($i80);
    call {:si_unique_call 507} {:cexpr "shift"} boogie_si_record_i8($i81);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i77);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i81);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i84 := $ashr.i32($i82, $i83);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i84, 1);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i77);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i81);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i93 := $shl.i32(2, $i92);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i94 := $and.i32($i91, $i93);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i77);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i81);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i102 := $shl.i32(4, $i101);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i100, $i102);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i77);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i81);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i111 := $shl.i32(8, $i110);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i112 := $and.i32($i109, $i111);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i76);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i81);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i120 := $ashr.i32($i118, $i119);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i121 := $and.i32($i120, 1);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i121, 0);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i76);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i81);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i129 := $shl.i32(2, $i128);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i130 := $and.i32($i127, $i129);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 0);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i32($i76);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32($i81);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i138 := $shl.i32(4, $i137);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i139 := $and.i32($i136, $i138);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i140 := $ne.i32($i139, 0);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i32($i76);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i146 := $zext.i8.i32($i81);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i147 := $shl.i32(8, $i146);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i148 := $and.i32($i145, $i147);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i149 := $ne.i32($i148, 0);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i74 := $i67;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i154 := $add.i32($i74, 1);
    call {:si_unique_call 506} {:cexpr "i"} boogie_si_record_i32($i154);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p64);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i156 := $ugt.i32($i155, $i154);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i156 == 1);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb65:
    assume $i156 == 1;
    assume {:verifier.code 0} true;
    $i67 := $i154;
    goto $bb65_dummy;

  $bb62:
    assume $i149 == 1;
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i150 := $zext.i32.i64($i67);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref($i150, 8));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} isr_txdmaok($p153);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb59:
    assume $i140 == 1;
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i141 := $zext.i32.i64($i67);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref($i141, 8));
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $p143);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} isr_txdmaerror($p144);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb56:
    assume $i131 == 1;
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i132 := $zext.i32.i64($i67);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref($i132, 8));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} isr_rxdmaok($p135);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume $i122 == 1;
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i123 := $zext.i32.i64($i67);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref($i123, 8));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} isr_rxdmaerror($p126);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb50:
    assume $i113 == 1;
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i114 := $zext.i32.i64($i67);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref($i114, 8));
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} isr_txint($p117);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb47:
    assume $i104 == 1;
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i105 := $zext.i32.i64($i67);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref($i105, 8));
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} isr_rxint($p108);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i95 == 1;
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i96 := $zext.i32.i64($i67);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref($i96, 8));
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} isr_txrdy($p99);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i86 == 1;
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i87 := $zext.i32.i64($i67);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref($i87, 8));
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} isr_rxrdy($p90);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i75 == 1;
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i76, $i77 := $i16, $i13;
    goto $bb40;

  $bb34:
    assume $i73 == 1;
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i74 := $i67;
    goto $bb36;

  $bb14:
    assume $i53 == 1;
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i16);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb16;

  $bb17:
    assume $i55 == 1;
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i17);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb16;

  $bb19:
    assume $i57 == 1;
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i49);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb16;

  $bb21:
    assume $i59 == 1;
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i50);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 0);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb16;

  $bb23:
    assume $i61 == 1;
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i51);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 0);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb16;

  $bb25:
    assume $i63 == 1;
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(6036, 1));
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i182 := $load.i32($M.0, $p181);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i183 := $ugt.i32($i182, 0);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    assume !($i183 == 1);
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} spin_unlock($p218);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i219 := $M.2;
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i220 := $sgt.i32($i219, 4);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb106:
    assume $i220 == 1;
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(6084, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i222 := $load.i32($M.0, $p221);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} vslice_dummy_var_133 := printk.ref.ref.i32.i32(.str.5, .str.1, 2642, $i222);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb80:
    assume $i183 == 1;
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i184 := 0;
    goto $bb83;

  $bb83:
    call $i185, $p187, $p188, $i189, $i190, $p192, $i193, $i194, $p195, $i196, $i197, $p198, $i199, $i200, $p201, $i202, $i203, $p204, $i205, $i206, $i207, $i208, $p209, $p210, $p212, $p214, $i215, $i216, $i217, $i184, vslice_dummy_var_131, vslice_dummy_var_132 := synclinkmp_interrupt_loop_$bb83($p2, $p181, $i185, $p187, $p188, $i189, $i190, $p192, $i193, $i194, $p195, $i196, $i197, $p198, $i199, $i200, $p201, $i202, $i203, $p204, $i205, $i206, $i207, $i208, $p209, $p210, $p212, $p214, $i215, $i216, $i217, $i184, vslice_dummy_var_131, vslice_dummy_var_132);
    goto $bb83_last;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i185 := $zext.i32.i64($i184);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref($i185, 8));
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.0, $p187);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i189 := $p2i.ref.i64($p188);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i190 := $ne.i64($i189, 0);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i190 == 1);
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i215 := $add.i32($i184, 1);
    call {:si_unique_call 522} {:cexpr "i"} boogie_si_record_i32($i215);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i216 := $load.i32($M.0, $p181);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i217 := $ugt.i32($i216, $i215);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i217 == 1);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb103:
    assume $i217 == 1;
    assume {:verifier.code 0} true;
    $i184 := $i215;
    goto $bb103_dummy;

  $bb85:
    assume $i190 == 1;
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($p188, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(412, 1));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.0, $p192);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i194 := $ne.i32($i193, 0);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb90;

  $bb90:
    assume !($i194 == 1);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p188, $mul.ref(0, 6384)), $mul.ref(6300, 1));
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i196 := $load.i32($M.0, $p195);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i197 := $ne.i32($i196, 0);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume !($i197 == 1);
    goto $bb87;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i197 == 1;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p188, $mul.ref(0, 6384)), $mul.ref(1796, 1));
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i199 := $load.i32($M.0, $p198);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i200 := $ne.i32($i199, 0);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume !($i200 == 1);
    goto $bb87;

  $bb93:
    assume $i200 == 1;
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p188, $mul.ref(0, 6384)), $mul.ref(1800, 1));
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i202 := $load.i8($M.0, $p201);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i203 := $trunc.i8.i1($i202);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i203 == 1);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p188, $mul.ref(0, 6384)), $mul.ref(1808, 1));
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i205 := $load.i8($M.0, $p204);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i206 := $trunc.i8.i1($i205);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i206 == 1);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i207 := $M.2;
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i208 := $sgt.i32($i207, 4);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p188, $mul.ref(0, 6384)), $mul.ref(1712, 1));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} vslice_dummy_var_132 := schedule_work($p212);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p188, $mul.ref(0, 6384)), $mul.ref(1808, 1));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p214, 1);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb99:
    assume $i208 == 1;
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p188, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $p210 := $bitcast.ref.ref($p209);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} vslice_dummy_var_131 := printk.ref.ref.i32.ref(.str.4, .str.1, 2632, $p210);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb97:
    assume {:verifier.code 0} true;
    assume $i206 == 1;
    goto $bb87;

  $bb95:
    assume {:verifier.code 0} true;
    assume $i203 == 1;
    goto $bb87;

  $bb88:
    assume {:verifier.code 0} true;
    assume $i194 == 1;
    goto $bb89;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(2, 8));
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i32 := read_reg16($p31, 16);
    call {:si_unique_call 500} {:cexpr "tmp"} boogie_si_record_i16($i32);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i16.i8($i32);
    call {:si_unique_call 501} {:cexpr "status1"} boogie_si_record_i8($i33);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i32);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i35 := $ashr.i32($i34, 8);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    call {:si_unique_call 502} {:cexpr "dmastatus1"} boogie_si_record_i8($i36);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(2, 8));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i40 := read_reg($p39, 18);
    call {:si_unique_call 504} {:cexpr "timerstatus1"} boogie_si_record_i8($i40);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i41 := $M.2;
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i42 := $sgt.i32($i41, 4);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i49, $i50, $i51 := $i33, $i36, $i40;
    goto $bb13;

  $bb10:
    assume $i42 == 1;
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i33);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i36);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i40);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} vslice_dummy_var_130 := printk.ref.ref.i32.ref.i32.i32.i32(.str.3, .str.1, 2567, $p44, $i45, $i46, $i47);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i13);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i16);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i17);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} vslice_dummy_var_129 := printk.ref.ref.i32.ref.i32.i32.i32(.str.2, .str.1, 2555, $p21, $i22, $i23, $i24);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(6084, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} vslice_dummy_var_128 := printk.ref.ref.i32.i32(.str, .str.1, 2541, $i6);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb65_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3267;

  $bb103_dummy:
    assume false;
    return;

  $bb83_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3427;

  $bb79_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3187;
}



const ldv_request_irq_51: ref;

axiom ldv_request_irq_51 == $sub.ref(0, 386808);

procedure ldv_request_irq_51($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.27, $M.25, $M.29, $M.30, $M.28, $M.32, $M.33, $M.31, $M.35, $M.36, $M.34;



implementation ldv_request_irq_51($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} {:cexpr "ldv_request_irq_51:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 526} {:cexpr "ldv_request_irq_51:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 528} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $i6 := reg_check_1($p1);
    call {:si_unique_call 530} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} activate_suitable_irq_1($i0, $p4);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const adapter_test: ref;

axiom adapter_test == $sub.ref(0, 387840);

procedure adapter_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.18, $M.21, $CurrAddr, $M.3, $M.5, $M.7, $M.9, $M.22, $M.4, $M.6, $M.8, $M.10, assertsPassed;



implementation adapter_test($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $i16: i8;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i1;
  var $i22: i8;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i1;
  var $i32: i8;
  var $i33: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i1;
  var $i38: i8;
  var $i39: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i64;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i64;
  var $p64: ref;
  var $p65: ref;
  var $i66: i1;
  var $i67: i8;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i16;
  var $i76: i32;
  var $p79: ref;
  var $p80: ref;
  var $i81: i1;
  var $i82: i8;
  var $i83: i1;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i16;
  var $i91: i32;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p97: ref;
  var $p98: ref;
  var $i99: i1;
  var $i100: i8;
  var $i101: i1;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i16;
  var $i109: i32;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $p115: ref;
  var $p116: ref;
  var $i117: i1;
  var $i118: i8;
  var $i119: i1;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i16;
  var $i127: i32;
  var $p130: ref;
  var $p131: ref;
  var $i132: i1;
  var $i133: i8;
  var $i134: i1;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i1;
  var $i144: i8;
  var $i145: i1;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $p151: ref;
  var $i152: i32;
  var $i153: i1;
  var $p155: ref;
  var $p156: ref;
  var $i157: i1;
  var $i158: i8;
  var $i159: i1;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $p165: ref;
  var $i166: i32;
  var $i167: i1;
  var $p169: ref;
  var $p170: ref;
  var $i171: i1;
  var $i172: i8;
  var $i173: i1;
  var $i174: i32;
  var $i175: i1;
  var $p176: ref;
  var $p177: ref;
  var $i179: i32;
  var $i180: i1;
  var $p181: ref;
  var $p182: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $i193: i32;
  var $i194: i1;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $i56: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i1;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i1 := $M.2;
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 2);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} ldv_spin_lock();
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} vslice_dummy_var_135 := init_adapter($p0);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} spin_unlock_irqrestore($p7, $u0);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 6384)), $mul.ref(6036, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 0);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $i15 := register_test($p14);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i8($i15);
    call {:si_unique_call 537} {:cexpr "tmp___1"} boogie_si_record_i8($i16);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6192, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i61 := $zext.i32.i64($i60);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} vslice_dummy_var_136 := printk.ref.ref.i32.ref.i64(.str.85, .str.1, 5337, $p58, $i61);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32(0, 19);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $r := $i56;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(1, 8));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $i21 := register_test($p20);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i8($i21);
    call {:si_unique_call 539} {:cexpr "tmp___2"} boogie_si_record_i8($i22);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6192, 1));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i54 := $zext.i32.i64($i53);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} vslice_dummy_var_137 := printk.ref.ref.i32.ref.i64(.str.85, .str.1, 5337, $p51, $i54);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32(0, 19);
    goto $bb15;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 6384)), $mul.ref(6036, 1));
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 2);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(2, 8));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $i31 := register_test($p30);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i8($i31);
    call {:si_unique_call 542} {:cexpr "tmp"} boogie_si_record_i8($i32);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i32);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $i66 := irq_test($p65);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i8($i66);
    call {:si_unique_call 547} {:cexpr "tmp___3"} boogie_si_record_i8($i67);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i8.i1($i67);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69 := 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i70 == 1);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(1, 8));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $i81 := irq_test($p80);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i82 := $zext.i1.i8($i81);
    call {:si_unique_call 550} {:cexpr "tmp___5"} boogie_si_record_i8($i82);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i8.i1($i82);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i84 := 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i85 == 1);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6036, 1));
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 4);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i95 == 1);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6036, 1));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 4);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i132 := loopback_test($p131);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i133 := $zext.i1.i8($i132);
    call {:si_unique_call 559} {:cexpr "tmp___11"} boogie_si_record_i8($i133);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i8.i1($i133);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    $i135 := 1;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i136 := $ne.i32($i135, 0);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i136 == 1);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(1, 8));
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.0, $p141);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $i143 := loopback_test($p142);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i144 := $zext.i1.i8($i143);
    call {:si_unique_call 562} {:cexpr "tmp___13"} boogie_si_record_i8($i144);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i8.i1($i144);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    $i146 := 1;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i147 := $ne.i32($i146, 0);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i147 == 1);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6036, 1));
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.0, $p151);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i152, 4);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i153 == 1);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6036, 1));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.0, $p165);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i166, 4);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i179 := $M.2;
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i180 := $sgt.i32($i179, 2);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.0, $p185);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p186, $mul.ref(0, 6384)), $mul.ref(6156, 1));
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p187, 0);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(1, 8));
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p190, $mul.ref(0, 6384)), $mul.ref(6156, 1));
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p191, 0);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6036, 1));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.0, $p192);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i194 := $sgt.i32($i193, 2);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i56 := 0;
    goto $bb15;

  $bb80:
    assume $i194 == 1;
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(2, 8));
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p197 := $load.ref($M.0, $p196);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p197, $mul.ref(0, 6384)), $mul.ref(6156, 1));
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p198, 0);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(3, 8));
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p201 := $load.ref($M.0, $p200);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p201, $mul.ref(0, 6384)), $mul.ref(6156, 1));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p202, 0);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb77:
    assume $i180 == 1;
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p182 := $bitcast.ref.ref($p181);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} vslice_dummy_var_146 := printk.ref.ref.i32.ref(.str.88, .str.1, 5361, $p182);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb65:
    assume $i167 == 1;
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(3, 8));
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.0, $p169);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $i171 := loopback_test($p170);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i172 := $zext.i1.i8($i171);
    call {:si_unique_call 568} {:cexpr "tmp___17"} boogie_si_record_i8($i172);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i173 := $trunc.i8.i1($i172);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    $i174 := 1;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i175 := $ne.i32($i174, 0);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb70:
    assume $i175 == 1;
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p176);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} vslice_dummy_var_145 := printk.ref.ref.i32.ref(.str.87, .str.1, 5355, $p177);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32(0, 19);
    goto $bb15;

  $bb67:
    assume $i173 == 1;
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i174 := 0;
    goto $bb69;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb57:
    assume $i153 == 1;
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(2, 8));
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $i157 := loopback_test($p156);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i158 := $zext.i1.i8($i157);
    call {:si_unique_call 565} {:cexpr "tmp___15"} boogie_si_record_i8($i158);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i159 := $trunc.i8.i1($i158);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    $i160 := 1;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i161 := $ne.i32($i160, 0);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i161 == 1);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb62:
    assume $i161 == 1;
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} vslice_dummy_var_144 := printk.ref.ref.i32.ref(.str.87, .str.1, 5355, $p163);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32(0, 19);
    goto $bb15;

  $bb59:
    assume $i159 == 1;
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i160 := 0;
    goto $bb61;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i147 == 1;
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p148);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} vslice_dummy_var_143 := printk.ref.ref.i32.ref(.str.87, .str.1, 5355, $p149);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32(0, 19);
    goto $bb15;

  $bb52:
    assume $i145 == 1;
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i146 := 0;
    goto $bb54;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i136 == 1;
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} vslice_dummy_var_142 := printk.ref.ref.i32.ref(.str.87, .str.1, 5355, $p138);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32(0, 19);
    goto $bb15;

  $bb47:
    assume $i134 == 1;
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i135 := 0;
    goto $bb49;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i113 == 1;
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(3, 8));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $i117 := irq_test($p116);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i118 := $zext.i1.i8($i117);
    call {:si_unique_call 556} {:cexpr "tmp___9"} boogie_si_record_i8($i118);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i8.i1($i118);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    $i120 := 1;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume $i121 == 1;
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6084, 1));
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i32.i16($i125);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i127 := $zext.i16.i32($i126);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} vslice_dummy_var_141 := printk.ref.ref.i32.ref.i32(.str.86, .str.1, 5346, $p123, $i127);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32(0, 19);
    goto $bb15;

  $bb37:
    assume $i119 == 1;
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i120 := 0;
    goto $bb39;

  $bb27:
    assume $i95 == 1;
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(2, 8));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $i99 := irq_test($p98);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i100 := $zext.i1.i8($i99);
    call {:si_unique_call 553} {:cexpr "tmp___7"} boogie_si_record_i8($i100);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i8.i1($i100);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i102 := 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i103 == 1);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume $i103 == 1;
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6084, 1));
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i16($i107);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i109 := $zext.i16.i32($i108);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} vslice_dummy_var_140 := printk.ref.ref.i32.ref.i32(.str.86, .str.1, 5346, $p105, $i109);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32(0, 19);
    goto $bb15;

  $bb29:
    assume $i101 == 1;
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i102 := 0;
    goto $bb31;

  $bb25:
    assume $i85 == 1;
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6084, 1));
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i16($i89);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i90);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} vslice_dummy_var_139 := printk.ref.ref.i32.ref.i32(.str.86, .str.1, 5346, $p87, $i91);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32(0, 19);
    goto $bb15;

  $bb22:
    assume $i83 == 1;
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i84 := 0;
    goto $bb24;

  $bb20:
    assume $i70 == 1;
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6084, 1));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i16($i74);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i75);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} vslice_dummy_var_138 := printk.ref.ref.i32.ref.i32(.str.86, .str.1, 5346, $p72, $i76);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32(0, 19);
    goto $bb15;

  $bb17:
    assume $i68 == 1;
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i69 := 0;
    goto $bb19;

  $bb8:
    assume $i33 == 1;
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(3, 8));
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $i37 := register_test($p36);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i8($i37);
    call {:si_unique_call 545} {:cexpr "tmp___0"} boogie_si_record_i8($i38);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i38);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i39 == 1;
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 6384)), $mul.ref(6036, 1));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, 2);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 6384)), $mul.ref(6036, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i45);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} vslice_dummy_var_134 := printk.ref.ref.i32.ref(.str.84, .str.1, 5318, $p4);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const init_adapter: ref;

axiom init_adapter == $sub.ref(0, 388872);

procedure init_adapter($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $M.18;



implementation init_adapter($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $p44: ref;
  var $p45: ref;
  var $p48: ref;
  var $p49: ref;
  var vslice_dummy_var_147: i1;
  var vslice_dummy_var_148: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6208, 1));
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(80, 4));
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6252, 1));
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 1073741824);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6252, 1));
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6252, 1));
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i10);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p4);
    call {:si_unique_call 571} {:cexpr "readval"} boogie_si_record_i32($i11);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6252, 1));
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, $sub.i32(0, 1073741825));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6252, 1));
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6252, 1));
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i17);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6007, 1));
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $sub.i8(0, 86));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} write_control_reg($p0);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6208, 1));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(44, 4));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i23 := $M.18;
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, $sub.i32(0, 57));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $M.18 := $i24;
    call {:si_unique_call 573} {:cexpr "lcr1_brdr_value"} boogie_si_record_i32($i24);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $i25 := $M.19;
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i25, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i25, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i41 := $M.18;
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i41);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i42 := $M.20;
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i42);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} vslice_dummy_var_147 := sca_init($p45);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(2, 8));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} vslice_dummy_var_148 := sca_init($p49);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb10:
    assume $i28 == 1;
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i33 := $M.18;
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i33, 56);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $M.18 := $i34;
    call {:si_unique_call 574} {:cexpr "lcr1_brdr_value"} boogie_si_record_i32($i34);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb8:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i25, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb12;

  $bb13:
    assume $i29 == 1;
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i35 := $M.18;
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, 48);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $M.18 := $i36;
    call {:si_unique_call 575} {:cexpr "lcr1_brdr_value"} boogie_si_record_i32($i36);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb6:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i25, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i25, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb12;

  $bb17:
    assume $i31 == 1;
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i37 := $M.18;
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i37, 40);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $M.18 := $i38;
    call {:si_unique_call 576} {:cexpr "lcr1_brdr_value"} boogie_si_record_i32($i38);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb15:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i25, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb12;

  $bb19:
    assume $i32 == 1;
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i39 := $M.18;
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i39, 32);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $M.18 := $i40;
    call {:si_unique_call 577} {:cexpr "lcr1_brdr_value"} boogie_si_record_i32($i40);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    goto $bb21;
}



const register_test: ref;

axiom register_test == $sub.ref(0, 389904);

procedure register_test($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.21, $M.1, $M.0, $CurrAddr, $M.3, $M.5, $M.7, $M.9;



implementation register_test($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i8;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i8;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i8;
  var $i25: i8;
  var $i26: i32;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $i32: i8;
  var $i33: i32;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $i38: i8;
  var $i39: i32;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $i44: i8;
  var $i45: i32;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $i31: i8;
  var $p50: ref;
  var $i51: i1;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i8;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i8;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i8;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i8;
  var $i68: i8;
  var $i69: i32;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i1;
  var $i74: i8;
  var $i75: i32;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $i79: i1;
  var $i80: i8;
  var $i81: i32;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $i85: i1;
  var $i86: i8;
  var $i87: i32;
  var $p88: ref;
  var $i89: i8;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i93: i8;
  var $i94: i32;
  var $i95: i8;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $i99: i8;
  var $p100: ref;
  var $i101: i8;
  var $i102: i32;
  var $i103: i8;
  var $p104: ref;
  var $i105: i8;
  var $i106: i32;
  var $i107: i8;
  var $i108: i8;
  var $i109: i32;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i1;
  var $i114: i8;
  var $i115: i32;
  var $p116: ref;
  var $i117: i8;
  var $i118: i32;
  var $i119: i1;
  var $i120: i8;
  var $i121: i32;
  var $p122: ref;
  var $i123: i8;
  var $i124: i32;
  var $i125: i1;
  var $i126: i8;
  var $i127: i32;
  var $p128: ref;
  var $i129: i8;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $i133: i8;
  var $i134: i32;
  var $i135: i8;
  var $p136: ref;
  var $i137: i8;
  var $i138: i32;
  var $i139: i8;
  var $p140: ref;
  var $i141: i8;
  var $i142: i32;
  var $i143: i8;
  var $p144: ref;
  var $i145: i8;
  var $i146: i32;
  var $i147: i8;
  var $i148: i8;
  var $i149: i32;
  var $p150: ref;
  var $i151: i8;
  var $i152: i32;
  var $i153: i1;
  var $i154: i8;
  var $i155: i32;
  var $p156: ref;
  var $i157: i8;
  var $i158: i32;
  var $i159: i1;
  var $i160: i8;
  var $i161: i32;
  var $p162: ref;
  var $i163: i8;
  var $i164: i32;
  var $i165: i1;
  var $i166: i8;
  var $i167: i32;
  var $p168: ref;
  var $i169: i8;
  var $i170: i32;
  var $i171: i1;
  var $p172: ref;
  var $i173: i8;
  var $i174: i32;
  var $i175: i8;
  var $p176: ref;
  var $i177: i8;
  var $i178: i32;
  var $i179: i8;
  var $p180: ref;
  var $i181: i8;
  var $i182: i32;
  var $i183: i8;
  var $p184: ref;
  var $i185: i8;
  var $i186: i32;
  var $i187: i8;
  var $i188: i8;
  var $i189: i32;
  var $p190: ref;
  var $i191: i8;
  var $i192: i32;
  var $i193: i1;
  var $i194: i8;
  var $i195: i32;
  var $p196: ref;
  var $i197: i8;
  var $i198: i32;
  var $i199: i1;
  var $i200: i8;
  var $i201: i32;
  var $p202: ref;
  var $i203: i8;
  var $i204: i32;
  var $i205: i1;
  var $i206: i8;
  var $i207: i32;
  var $p208: ref;
  var $i209: i8;
  var $i210: i32;
  var $i211: i1;
  var $p212: ref;
  var $i213: i8;
  var $i214: i32;
  var $i215: i8;
  var $p216: ref;
  var $i217: i8;
  var $i218: i32;
  var $i219: i8;
  var $p220: ref;
  var $i221: i8;
  var $i222: i32;
  var $i223: i8;
  var $p224: ref;
  var $i225: i8;
  var $i226: i32;
  var $i227: i8;
  var $i228: i8;
  var $i229: i32;
  var $p230: ref;
  var $i231: i8;
  var $i232: i32;
  var $i233: i1;
  var $i234: i8;
  var $i235: i32;
  var $p236: ref;
  var $i237: i8;
  var $i238: i32;
  var $i239: i1;
  var $i240: i8;
  var $i241: i32;
  var $p242: ref;
  var $i243: i8;
  var $i244: i32;
  var $i245: i1;
  var $i246: i8;
  var $i247: i32;
  var $p248: ref;
  var $i249: i8;
  var $i250: i32;
  var $i251: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $p1 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $M.21 := $store.i8($M.21, $p2, 0);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(1, 1));
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $M.21 := $store.i8($M.21, $p3, $sub.i8(0, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $M.21 := $store.i8($M.21, $p4, $sub.i8(0, 86));
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $M.21 := $store.i8($M.21, $p5, 85);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $M.21 := $store.i8($M.21, $p6, 105);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $M.21 := $store.i8($M.21, $p7, $sub.i8(0, 106));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} ldv_spin_lock();
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} reset_port($p0);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6156, 1));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 1);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.21, $p9);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} write_reg($p0, 53, $i12);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(1, 1));
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.21, $p13);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} write_reg($p0, 52, $i16);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.21, $p17);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} write_reg($p0, 50, $i20);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.21, $p21);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} write_reg($p0, 51, $i24);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i25 := read_reg($p0, 53);
    call {:si_unique_call 588} {:cexpr "tmp"} boogie_si_record_i8($i25);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.21, $p27);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i26, $i29);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i30 == 1);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i32 := read_reg($p0, 52);
    call {:si_unique_call 590} {:cexpr "tmp___0"} boogie_si_record_i8($i32);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(1, 1));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.21, $p34);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i33, $i36);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i37 == 1);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $i38 := read_reg($p0, 50);
    call {:si_unique_call 594} {:cexpr "tmp___1"} boogie_si_record_i8($i38);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.21, $p40);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i39, $i42);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i43 == 1);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $i44 := read_reg($p0, 51);
    call {:si_unique_call 596} {:cexpr "tmp___2"} boogie_si_record_i8($i44);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.21, $p46);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i45, $i48);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(1, 1));
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.21, $p52);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} write_reg($p0, 53, $i55);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.21, $p56);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i58);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} write_reg($p0, 52, $i59);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.21, $p60);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i8($i62);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} write_reg($p0, 50, $i63);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.21, $p64);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i66);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} write_reg($p0, 51, $i67);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $i68 := read_reg($p0, 53);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(1, 1));
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.21, $p70);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i69, $i72);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i73 == 1);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $i74 := read_reg($p0, 52);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.21, $p76);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i75, $i78);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i79 == 1);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $i80 := read_reg($p0, 50);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.21, $p82);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i81, $i84);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i85 == 1);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $i86 := read_reg($p0, 51);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.21, $p88);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i89);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i87, $i90);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.21, $p92);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i8($i94);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} write_reg($p0, 53, $i95);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.21, $p96);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i8($i98);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} write_reg($p0, 52, $i99);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.21, $p100);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i8($i102);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} write_reg($p0, 50, $i103);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.21, $p104);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i8($i106);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} write_reg($p0, 51, $i107);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} $i108 := read_reg($p0, 53);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.21, $p110);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i109, $i112);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i113 == 1);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $i114 := read_reg($p0, 52);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i114);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.21, $p116);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i115, $i118);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i119 == 1);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $i120 := read_reg($p0, 50);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i32($i120);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.21, $p122);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i123);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i121, $i124);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i125 == 1);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $i126 := read_reg($p0, 51);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i126);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.21, $p128);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i127, $i130);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.21, $p132);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i133);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i32.i8($i134);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} write_reg($p0, 53, $i135);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.21, $p136);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i137);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i32.i8($i138);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} write_reg($p0, 52, $i139);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i141 := $load.i8($M.21, $p140);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i32($i141);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i143 := $trunc.i32.i8($i142);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} write_reg($p0, 50, $i143);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i145 := $load.i8($M.21, $p144);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i146 := $zext.i8.i32($i145);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i32.i8($i146);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} write_reg($p0, 51, $i147);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $i148 := read_reg($p0, 53);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i32($i148);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i151 := $load.i8($M.21, $p150);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i32($i151);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i153 := $ne.i32($i149, $i152);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i153 == 1);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $i154 := read_reg($p0, 52);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i155 := $zext.i8.i32($i154);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.21, $p156);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i32($i157);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i159 := $ne.i32($i155, $i158);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i159 == 1);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $i160 := read_reg($p0, 50);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i161 := $zext.i8.i32($i160);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i163 := $load.i8($M.21, $p162);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i164 := $zext.i8.i32($i163);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i165 := $ne.i32($i161, $i164);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i165 == 1);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $i166 := read_reg($p0, 51);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i167 := $zext.i8.i32($i166);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i169 := $load.i8($M.21, $p168);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i170 := $zext.i8.i32($i169);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i171 := $ne.i32($i167, $i170);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i173 := $load.i8($M.21, $p172);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i174 := $zext.i8.i32($i173);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i175 := $trunc.i32.i8($i174);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} write_reg($p0, 53, $i175);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i177 := $load.i8($M.21, $p176);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i178 := $zext.i8.i32($i177);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i179 := $trunc.i32.i8($i178);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} write_reg($p0, 52, $i179);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i181 := $load.i8($M.21, $p180);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i182 := $zext.i8.i32($i181);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i183 := $trunc.i32.i8($i182);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} write_reg($p0, 50, $i183);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(1, 1));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i185 := $load.i8($M.21, $p184);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i32($i185);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i187 := $trunc.i32.i8($i186);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} write_reg($p0, 51, $i187);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $i188 := read_reg($p0, 53);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i189 := $zext.i8.i32($i188);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i191 := $load.i8($M.21, $p190);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i192 := $zext.i8.i32($i191);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i193 := $ne.i32($i189, $i192);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i193} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i193 == 1);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $i194 := read_reg($p0, 52);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i195 := $zext.i8.i32($i194);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i197 := $load.i8($M.21, $p196);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i198 := $zext.i8.i32($i197);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i199 := $ne.i32($i195, $i198);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i199 == 1);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $i200 := read_reg($p0, 50);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i201 := $zext.i8.i32($i200);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i203 := $load.i8($M.21, $p202);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i204 := $zext.i8.i32($i203);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i205 := $ne.i32($i201, $i204);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i205 == 1);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $i206 := read_reg($p0, 51);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i207 := $zext.i8.i32($i206);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(1, 1));
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i209 := $load.i8($M.21, $p208);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i210 := $zext.i8.i32($i209);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i211 := $ne.i32($i207, $i210);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i213 := $load.i8($M.21, $p212);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i214 := $zext.i8.i32($i213);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i215 := $trunc.i32.i8($i214);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} write_reg($p0, 53, $i215);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i217 := $load.i8($M.21, $p216);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i218 := $zext.i8.i32($i217);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i219 := $trunc.i32.i8($i218);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} write_reg($p0, 52, $i219);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(1, 1));
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i221 := $load.i8($M.21, $p220);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i32($i221);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i223 := $trunc.i32.i8($i222);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} write_reg($p0, 50, $i223);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i225 := $load.i8($M.21, $p224);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i226 := $zext.i8.i32($i225);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i227 := $trunc.i32.i8($i226);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} write_reg($p0, 51, $i227);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $i228 := read_reg($p0, 53);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i229 := $zext.i8.i32($i228);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i231 := $load.i8($M.21, $p230);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i232 := $zext.i8.i32($i231);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i233 := $ne.i32($i229, $i232);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i233 == 1);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i234 := read_reg($p0, 52);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i235 := $zext.i8.i32($i234);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i237 := $load.i8($M.21, $p236);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i238 := $zext.i8.i32($i237);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i239 := $ne.i32($i235, $i238);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i239 == 1);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $i240 := read_reg($p0, 50);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i241 := $zext.i8.i32($i240);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(1, 1));
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i243 := $load.i8($M.21, $p242);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i244 := $zext.i8.i32($i243);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i245 := $ne.i32($i241, $i244);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i245 == 1);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $i246 := read_reg($p0, 51);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i247 := $zext.i8.i32($i246);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i249 := $load.i8($M.21, $p248);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i250 := $zext.i8.i32($i249);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i251 := $ne.i32($i247, $i250);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i251} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i31 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} reset_port($p0);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} spin_unlock_irqrestore($p50, $u0);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i8.i1($i31);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $r := $i51;
    return;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i251 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb6;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i245 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb6;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i239 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb6;

  $bb74:
    assume {:verifier.code 0} true;
    assume $i233 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb6;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i211 == 1;
    goto $bb14;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i205 == 1;
    goto $bb11;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i199 == 1;
    goto $bb8;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i193 == 1;
    goto $bb4;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i171 == 1;
    goto $bb14;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i165 == 1;
    goto $bb11;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i159 == 1;
    goto $bb8;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i153 == 1;
    goto $bb4;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i131 == 1;
    goto $bb14;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i125 == 1;
    goto $bb11;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i119 == 1;
    goto $bb8;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i113 == 1;
    goto $bb4;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb14;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb11;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb8;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb4;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb14;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb11;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb4;
}



const irq_test: ref;

axiom irq_test == $sub.ref(0, 390936);

procedure irq_test($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.3, $M.5, $M.7, $M.9;



implementation irq_test($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $p24: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i1;
  var $p29: ref;
  var $i30: i8;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i1;
  var $p41: ref;
  var $i42: i8;
  var $i43: i1;
  var $p45: ref;
  var $i46: i8;
  var $i47: i1;
  var $p49: ref;
  var $i50: i8;
  var $i51: i1;
  var $p53: ref;
  var $i54: i8;
  var $i55: i1;
  var $p57: ref;
  var $i58: i8;
  var $i59: i1;
  var $p61: ref;
  var $i62: i8;
  var $i63: i1;
  var $p65: ref;
  var $i66: i8;
  var $i67: i1;
  var $p69: ref;
  var $i70: i8;
  var $i71: i1;
  var $p73: ref;
  var $i74: i8;
  var $i75: i1;
  var $p77: ref;
  var $i78: i8;
  var $i79: i1;
  var $p81: ref;
  var $i82: i8;
  var $i83: i1;
  var $p85: ref;
  var $i86: i8;
  var $i87: i1;
  var $p89: ref;
  var $i90: i8;
  var $i91: i1;
  var $p93: ref;
  var $i94: i8;
  var $i95: i1;
  var $p97: ref;
  var $i98: i8;
  var $i99: i1;
  var $p101: ref;
  var $i102: i8;
  var $i103: i1;
  var $p105: ref;
  var $i106: i8;
  var $i107: i1;
  var $p109: ref;
  var $i110: i8;
  var $i111: i1;
  var $p113: ref;
  var $i114: i8;
  var $i115: i1;
  var $p117: ref;
  var $i118: i8;
  var $i119: i1;
  var $p121: ref;
  var $i122: i8;
  var $i123: i1;
  var $p125: ref;
  var $i126: i8;
  var $i127: i1;
  var $p129: ref;
  var $i130: i8;
  var $i131: i1;
  var $p133: ref;
  var $i134: i8;
  var $i135: i1;
  var $p137: ref;
  var $i138: i8;
  var $i139: i1;
  var $p141: ref;
  var $i142: i8;
  var $i143: i1;
  var $p145: ref;
  var $i146: i8;
  var $i147: i1;
  var $p149: ref;
  var $i150: i8;
  var $i151: i1;
  var $p153: ref;
  var $i154: i8;
  var $i155: i1;
  var $p157: ref;
  var $i158: i8;
  var $i159: i1;
  var $p161: ref;
  var $i162: i8;
  var $i163: i1;
  var $p165: ref;
  var $i166: i8;
  var $i167: i1;
  var $p169: ref;
  var $i170: i8;
  var $i171: i1;
  var $p173: ref;
  var $i174: i8;
  var $i175: i1;
  var $p177: ref;
  var $i178: i8;
  var $i179: i1;
  var $p181: ref;
  var $i182: i8;
  var $i183: i1;
  var $p185: ref;
  var $i186: i8;
  var $i187: i1;
  var $p189: ref;
  var $i190: i8;
  var $i191: i1;
  var $p193: ref;
  var $i194: i8;
  var $i195: i1;
  var $p197: ref;
  var $i198: i8;
  var $i199: i1;
  var $p201: ref;
  var $i202: i8;
  var $i203: i1;
  var $p205: ref;
  var $i206: i8;
  var $i207: i1;
  var $p209: ref;
  var $i210: i8;
  var $i211: i1;
  var $p213: ref;
  var $i214: i8;
  var $i215: i1;
  var $p217: ref;
  var $i218: i8;
  var $i219: i1;
  var $p221: ref;
  var $i222: i8;
  var $i223: i1;
  var $p225: ref;
  var $i226: i8;
  var $i227: i1;
  var $p229: ref;
  var $i230: i8;
  var $i231: i1;
  var $p233: ref;
  var $i234: i8;
  var $i235: i1;
  var $p237: ref;
  var $i238: i8;
  var $i239: i1;
  var $p241: ref;
  var $i242: i8;
  var $i243: i1;
  var $p245: ref;
  var $i246: i8;
  var $i247: i1;
  var $p249: ref;
  var $i250: i8;
  var $i251: i1;
  var $p253: ref;
  var $i254: i8;
  var $i255: i1;
  var $p257: ref;
  var $i258: i8;
  var $i259: i1;
  var $p261: ref;
  var $i262: i8;
  var $i263: i1;
  var $p265: ref;
  var $i266: i8;
  var $i267: i1;
  var $p269: ref;
  var $i270: i8;
  var $i271: i1;
  var $p273: ref;
  var $i274: i8;
  var $i275: i1;
  var $p277: ref;
  var $i278: i8;
  var $i279: i1;
  var $p281: ref;
  var $i282: i8;
  var $i283: i1;
  var $p285: ref;
  var $i286: i8;
  var $i287: i1;
  var $p289: ref;
  var $i290: i8;
  var $i291: i1;
  var $p293: ref;
  var $i294: i8;
  var $i295: i1;
  var $p297: ref;
  var $i298: i8;
  var $i299: i1;
  var $p301: ref;
  var $i302: i8;
  var $i303: i1;
  var $p305: ref;
  var $i306: i8;
  var $i307: i1;
  var $p309: ref;
  var $i310: i8;
  var $i311: i1;
  var $p313: ref;
  var $i314: i8;
  var $i315: i1;
  var $p317: ref;
  var $i318: i8;
  var $i319: i1;
  var $p321: ref;
  var $i322: i8;
  var $i323: i1;
  var $p325: ref;
  var $i326: i8;
  var $i327: i1;
  var $p329: ref;
  var $i330: i8;
  var $i331: i1;
  var $p333: ref;
  var $i334: i8;
  var $i335: i1;
  var $p337: ref;
  var $i338: i8;
  var $i339: i1;
  var $p341: ref;
  var $i342: i8;
  var $i343: i1;
  var $p345: ref;
  var $i346: i8;
  var $i347: i1;
  var $p349: ref;
  var $i350: i8;
  var $i351: i1;
  var $p353: ref;
  var $i354: i8;
  var $i355: i1;
  var $p357: ref;
  var $i358: i8;
  var $i359: i1;
  var $p361: ref;
  var $i362: i8;
  var $i363: i1;
  var $p365: ref;
  var $i366: i8;
  var $i367: i1;
  var $p369: ref;
  var $i370: i8;
  var $i371: i1;
  var $p373: ref;
  var $i374: i8;
  var $i375: i1;
  var $p377: ref;
  var $i378: i8;
  var $i379: i1;
  var $p381: ref;
  var $i382: i8;
  var $i383: i1;
  var $p385: ref;
  var $i386: i8;
  var $i387: i1;
  var $p389: ref;
  var $i390: i8;
  var $i391: i1;
  var $p393: ref;
  var $i394: i8;
  var $i395: i1;
  var $p397: ref;
  var $i398: i8;
  var $i399: i1;
  var $p401: ref;
  var $i402: i8;
  var $i403: i1;
  var $p405: ref;
  var $i406: i8;
  var $i407: i1;
  var $p409: ref;
  var $i410: i8;
  var $i411: i1;
  var $p413: ref;
  var $i414: i8;
  var $i415: i1;
  var $p417: ref;
  var $i418: i8;
  var $i419: i1;
  var $p421: ref;
  var $i422: i8;
  var $i423: i1;
  var $p425: ref;
  var $i426: i8;
  var $i427: i1;
  var vslice_dummy_var_149: i64;
  var vslice_dummy_var_150: i64;
  var vslice_dummy_var_151: i64;
  var vslice_dummy_var_152: i64;
  var vslice_dummy_var_153: i64;
  var vslice_dummy_var_154: i64;
  var vslice_dummy_var_155: i64;
  var vslice_dummy_var_156: i64;
  var vslice_dummy_var_157: i64;
  var vslice_dummy_var_158: i64;
  var vslice_dummy_var_159: i64;
  var vslice_dummy_var_160: i64;
  var vslice_dummy_var_161: i64;
  var vslice_dummy_var_162: i64;
  var vslice_dummy_var_163: i64;
  var vslice_dummy_var_164: i64;
  var vslice_dummy_var_165: i64;
  var vslice_dummy_var_166: i64;
  var vslice_dummy_var_167: i64;
  var vslice_dummy_var_168: i64;
  var vslice_dummy_var_169: i64;
  var vslice_dummy_var_170: i64;
  var vslice_dummy_var_171: i64;
  var vslice_dummy_var_172: i64;
  var vslice_dummy_var_173: i64;
  var vslice_dummy_var_174: i64;
  var vslice_dummy_var_175: i64;
  var vslice_dummy_var_176: i64;
  var vslice_dummy_var_177: i64;
  var vslice_dummy_var_178: i64;
  var vslice_dummy_var_179: i64;
  var vslice_dummy_var_180: i64;
  var vslice_dummy_var_181: i64;
  var vslice_dummy_var_182: i64;
  var vslice_dummy_var_183: i64;
  var vslice_dummy_var_184: i64;
  var vslice_dummy_var_185: i64;
  var vslice_dummy_var_186: i64;
  var vslice_dummy_var_187: i64;
  var vslice_dummy_var_188: i64;
  var vslice_dummy_var_189: i64;
  var vslice_dummy_var_190: i64;
  var vslice_dummy_var_191: i64;
  var vslice_dummy_var_192: i64;
  var vslice_dummy_var_193: i64;
  var vslice_dummy_var_194: i64;
  var vslice_dummy_var_195: i64;
  var vslice_dummy_var_196: i64;
  var vslice_dummy_var_197: i64;
  var vslice_dummy_var_198: i64;
  var vslice_dummy_var_199: i64;
  var vslice_dummy_var_200: i64;
  var vslice_dummy_var_201: i64;
  var vslice_dummy_var_202: i64;
  var vslice_dummy_var_203: i64;
  var vslice_dummy_var_204: i64;
  var vslice_dummy_var_205: i64;
  var vslice_dummy_var_206: i64;
  var vslice_dummy_var_207: i64;
  var vslice_dummy_var_208: i64;
  var vslice_dummy_var_209: i64;
  var vslice_dummy_var_210: i64;
  var vslice_dummy_var_211: i64;
  var vslice_dummy_var_212: i64;
  var vslice_dummy_var_213: i64;
  var vslice_dummy_var_214: i64;
  var vslice_dummy_var_215: i64;
  var vslice_dummy_var_216: i64;
  var vslice_dummy_var_217: i64;
  var vslice_dummy_var_218: i64;
  var vslice_dummy_var_219: i64;
  var vslice_dummy_var_220: i64;
  var vslice_dummy_var_221: i64;
  var vslice_dummy_var_222: i64;
  var vslice_dummy_var_223: i64;
  var vslice_dummy_var_224: i64;
  var vslice_dummy_var_225: i64;
  var vslice_dummy_var_226: i64;
  var vslice_dummy_var_227: i64;
  var vslice_dummy_var_228: i64;
  var vslice_dummy_var_229: i64;
  var vslice_dummy_var_230: i64;
  var vslice_dummy_var_231: i64;
  var vslice_dummy_var_232: i64;
  var vslice_dummy_var_233: i64;
  var vslice_dummy_var_234: i64;
  var vslice_dummy_var_235: i64;
  var vslice_dummy_var_236: i64;
  var vslice_dummy_var_237: i64;
  var vslice_dummy_var_238: i64;
  var vslice_dummy_var_239: i64;
  var vslice_dummy_var_240: i64;
  var vslice_dummy_var_241: i64;
  var vslice_dummy_var_242: i64;
  var vslice_dummy_var_243: i64;
  var vslice_dummy_var_244: i64;
  var vslice_dummy_var_245: i64;
  var vslice_dummy_var_246: i64;
  var vslice_dummy_var_247: i64;
  var vslice_dummy_var_248: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6044, 1));
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i5 := (if $i4 == 1 then 16 else 0);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    call {:si_unique_call 637} {:cexpr "timer"} boogie_si_record_i8($i6);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} ldv_spin_lock();
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} reset_port($p0);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6156, 1));
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 3);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 0);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6044, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i13 := (if $i12 == 1 then 64 else 16);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} write_reg($p0, 22, $i14);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i6);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 101);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} write_reg($p0, $i17, 0);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i6);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 98);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} write_reg16($p0, $i20, 1);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i6);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 100);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} write_reg($p0, $i23, 80);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} spin_unlock_irqrestore($p24, $u0);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i30);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i31 == 1);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} vslice_dummy_var_149 := msleep_interruptible(10);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i28 == 1);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} vslice_dummy_var_150 := msleep_interruptible(10);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i38);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i39 == 1);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} vslice_dummy_var_151 := msleep_interruptible(10);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i8.i1($i42);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i43 == 1);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} vslice_dummy_var_152 := msleep_interruptible(10);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i46);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i47 == 1);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} vslice_dummy_var_153 := msleep_interruptible(10);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i8.i1($i50);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i51 == 1);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} vslice_dummy_var_154 := msleep_interruptible(10);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i8.i1($i54);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i55 == 1);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} vslice_dummy_var_155 := msleep_interruptible(10);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i8.i1($i58);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i59 == 1);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} vslice_dummy_var_156 := msleep_interruptible(10);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i8.i1($i62);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i63 == 1);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} vslice_dummy_var_157 := msleep_interruptible(10);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i8.i1($i66);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i67 == 1);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} vslice_dummy_var_158 := msleep_interruptible(10);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i8.i1($i70);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i71 == 1);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} vslice_dummy_var_159 := msleep_interruptible(10);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p73);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i8.i1($i74);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i75 == 1);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} vslice_dummy_var_160 := msleep_interruptible(10);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i8.i1($i78);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i79 == 1);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} vslice_dummy_var_161 := msleep_interruptible(10);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.0, $p81);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i8.i1($i82);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i83 == 1);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} vslice_dummy_var_162 := msleep_interruptible(10);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.0, $p85);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i8.i1($i86);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i87 == 1);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} vslice_dummy_var_163 := msleep_interruptible(10);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.0, $p89);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i8.i1($i90);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i91 == 1);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} vslice_dummy_var_164 := msleep_interruptible(10);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p93);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i8.i1($i94);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i95 == 1);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} vslice_dummy_var_165 := msleep_interruptible(10);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.0, $p97);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i8.i1($i98);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i99 == 1);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} vslice_dummy_var_166 := msleep_interruptible(10);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.0, $p101);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i8.i1($i102);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i103 == 1);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} vslice_dummy_var_167 := msleep_interruptible(10);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i8.i1($i106);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i107 == 1);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} vslice_dummy_var_168 := msleep_interruptible(10);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.0, $p109);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i8.i1($i110);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i111 == 1);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} vslice_dummy_var_169 := msleep_interruptible(10);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.0, $p113);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i8.i1($i114);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i115 == 1);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} vslice_dummy_var_170 := msleep_interruptible(10);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.0, $p117);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i8.i1($i118);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i119 == 1);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} vslice_dummy_var_171 := msleep_interruptible(10);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.0, $p121);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i8.i1($i122);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i123 == 1);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} vslice_dummy_var_172 := msleep_interruptible(10);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.0, $p125);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i127 := $trunc.i8.i1($i126);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i127 == 1);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} vslice_dummy_var_173 := msleep_interruptible(10);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i130 := $load.i8($M.0, $p129);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i8.i1($i130);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i131 == 1);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} vslice_dummy_var_174 := msleep_interruptible(10);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i134 := $load.i8($M.0, $p133);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i8.i1($i134);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i135 == 1);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} vslice_dummy_var_175 := msleep_interruptible(10);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.0, $p137);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i8.i1($i138);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i139 == 1);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} vslice_dummy_var_176 := msleep_interruptible(10);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i142 := $load.i8($M.0, $p141);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i143 := $trunc.i8.i1($i142);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i143 == 1);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} vslice_dummy_var_177 := msleep_interruptible(10);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i146 := $load.i8($M.0, $p145);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i8.i1($i146);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i147 == 1);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} vslice_dummy_var_178 := msleep_interruptible(10);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.0, $p149);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i151 := $trunc.i8.i1($i150);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i151 == 1);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} vslice_dummy_var_179 := msleep_interruptible(10);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i154 := $load.i8($M.0, $p153);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i155 := $trunc.i8.i1($i154);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i155 == 1);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} vslice_dummy_var_180 := msleep_interruptible(10);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i158 := $load.i8($M.0, $p157);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i159 := $trunc.i8.i1($i158);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i159 == 1);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} vslice_dummy_var_181 := msleep_interruptible(10);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i162 := $load.i8($M.0, $p161);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i8.i1($i162);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i163 == 1);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} vslice_dummy_var_182 := msleep_interruptible(10);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i166 := $load.i8($M.0, $p165);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i167 := $trunc.i8.i1($i166);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i167 == 1);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} vslice_dummy_var_183 := msleep_interruptible(10);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i170 := $load.i8($M.0, $p169);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i171 := $trunc.i8.i1($i170);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i171 == 1);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} vslice_dummy_var_184 := msleep_interruptible(10);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i174 := $load.i8($M.0, $p173);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i175 := $trunc.i8.i1($i174);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i175 == 1);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} vslice_dummy_var_185 := msleep_interruptible(10);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i178 := $load.i8($M.0, $p177);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i179 := $trunc.i8.i1($i178);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i179 == 1);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} vslice_dummy_var_186 := msleep_interruptible(10);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i182 := $load.i8($M.0, $p181);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i183 := $trunc.i8.i1($i182);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i183 == 1);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} vslice_dummy_var_187 := msleep_interruptible(10);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i186 := $load.i8($M.0, $p185);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i187 := $trunc.i8.i1($i186);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i187 == 1);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} vslice_dummy_var_188 := msleep_interruptible(10);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i190 := $load.i8($M.0, $p189);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i191 := $trunc.i8.i1($i190);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i191 == 1);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} vslice_dummy_var_189 := msleep_interruptible(10);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i194 := $load.i8($M.0, $p193);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i195 := $trunc.i8.i1($i194);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i195 == 1);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} vslice_dummy_var_190 := msleep_interruptible(10);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i198 := $load.i8($M.0, $p197);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i199 := $trunc.i8.i1($i198);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i199 == 1);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} vslice_dummy_var_191 := msleep_interruptible(10);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i202 := $load.i8($M.0, $p201);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i203 := $trunc.i8.i1($i202);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i203 == 1);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} vslice_dummy_var_192 := msleep_interruptible(10);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i206 := $load.i8($M.0, $p205);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i207 := $trunc.i8.i1($i206);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i207 == 1);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} vslice_dummy_var_193 := msleep_interruptible(10);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i210 := $load.i8($M.0, $p209);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i211 := $trunc.i8.i1($i210);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i211 == 1);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} vslice_dummy_var_194 := msleep_interruptible(10);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.0, $p213);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i215 := $trunc.i8.i1($i214);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i215 == 1);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} vslice_dummy_var_195 := msleep_interruptible(10);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i218 := $load.i8($M.0, $p217);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i219 := $trunc.i8.i1($i218);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i219 == 1);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} vslice_dummy_var_196 := msleep_interruptible(10);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i222 := $load.i8($M.0, $p221);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i223 := $trunc.i8.i1($i222);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i223 == 1);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} vslice_dummy_var_197 := msleep_interruptible(10);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i226 := $load.i8($M.0, $p225);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i227 := $trunc.i8.i1($i226);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i227 == 1);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} vslice_dummy_var_198 := msleep_interruptible(10);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i230 := $load.i8($M.0, $p229);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i231 := $trunc.i8.i1($i230);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i231 == 1);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} vslice_dummy_var_199 := msleep_interruptible(10);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i234 := $load.i8($M.0, $p233);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i235 := $trunc.i8.i1($i234);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i235 == 1);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} vslice_dummy_var_200 := msleep_interruptible(10);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i238 := $load.i8($M.0, $p237);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i239 := $trunc.i8.i1($i238);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i239 == 1);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} vslice_dummy_var_201 := msleep_interruptible(10);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i242 := $load.i8($M.0, $p241);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i243 := $trunc.i8.i1($i242);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i243} true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i243 == 1);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} vslice_dummy_var_202 := msleep_interruptible(10);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i246 := $load.i8($M.0, $p245);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i247 := $trunc.i8.i1($i246);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i247 == 1);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} vslice_dummy_var_203 := msleep_interruptible(10);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i250 := $load.i8($M.0, $p249);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i251 := $trunc.i8.i1($i250);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i251} true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i251 == 1);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} vslice_dummy_var_204 := msleep_interruptible(10);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i254 := $load.i8($M.0, $p253);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i255 := $trunc.i8.i1($i254);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i255} true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i255 == 1);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} vslice_dummy_var_205 := msleep_interruptible(10);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i258 := $load.i8($M.0, $p257);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i259 := $trunc.i8.i1($i258);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i259} true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i259 == 1);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} vslice_dummy_var_206 := msleep_interruptible(10);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i262 := $load.i8($M.0, $p261);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i263 := $trunc.i8.i1($i262);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i263} true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i263 == 1);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} vslice_dummy_var_207 := msleep_interruptible(10);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i266 := $load.i8($M.0, $p265);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i267 := $trunc.i8.i1($i266);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i267 == 1);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} vslice_dummy_var_208 := msleep_interruptible(10);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i270 := $load.i8($M.0, $p269);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i271 := $trunc.i8.i1($i270);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i271 == 1);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} vslice_dummy_var_209 := msleep_interruptible(10);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i274 := $load.i8($M.0, $p273);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i275 := $trunc.i8.i1($i274);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i275 == 1);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} vslice_dummy_var_210 := msleep_interruptible(10);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i278 := $load.i8($M.0, $p277);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i279 := $trunc.i8.i1($i278);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i279 == 1);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} vslice_dummy_var_211 := msleep_interruptible(10);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i282 := $load.i8($M.0, $p281);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i283 := $trunc.i8.i1($i282);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i283 == 1);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} vslice_dummy_var_212 := msleep_interruptible(10);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i286 := $load.i8($M.0, $p285);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i287 := $trunc.i8.i1($i286);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i287 == 1);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} vslice_dummy_var_213 := msleep_interruptible(10);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i290 := $load.i8($M.0, $p289);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i291 := $trunc.i8.i1($i290);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i291 == 1);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} vslice_dummy_var_214 := msleep_interruptible(10);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i294 := $load.i8($M.0, $p293);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i295 := $trunc.i8.i1($i294);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i295 == 1);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} vslice_dummy_var_215 := msleep_interruptible(10);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i298 := $load.i8($M.0, $p297);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i299 := $trunc.i8.i1($i298);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    assume {:branchcond $i299} true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i299 == 1);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} vslice_dummy_var_216 := msleep_interruptible(10);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i302 := $load.i8($M.0, $p301);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i303 := $trunc.i8.i1($i302);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i303 == 1);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} vslice_dummy_var_217 := msleep_interruptible(10);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i306 := $load.i8($M.0, $p305);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i307 := $trunc.i8.i1($i306);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i307} true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i307 == 1);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} vslice_dummy_var_218 := msleep_interruptible(10);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i310 := $load.i8($M.0, $p309);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i311 := $trunc.i8.i1($i310);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    assume {:branchcond $i311} true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i311 == 1);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} vslice_dummy_var_219 := msleep_interruptible(10);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i314 := $load.i8($M.0, $p313);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i315 := $trunc.i8.i1($i314);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i315 == 1);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} vslice_dummy_var_220 := msleep_interruptible(10);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i318 := $load.i8($M.0, $p317);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i319 := $trunc.i8.i1($i318);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i319} true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i319 == 1);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} vslice_dummy_var_221 := msleep_interruptible(10);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i322 := $load.i8($M.0, $p321);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $i323 := $trunc.i8.i1($i322);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i323} true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i323 == 1);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} vslice_dummy_var_222 := msleep_interruptible(10);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i326 := $load.i8($M.0, $p325);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i327 := $trunc.i8.i1($i326);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i327 == 1);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} vslice_dummy_var_223 := msleep_interruptible(10);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i330 := $load.i8($M.0, $p329);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i331 := $trunc.i8.i1($i330);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    assume {:branchcond $i331} true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i331 == 1);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} vslice_dummy_var_224 := msleep_interruptible(10);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i334 := $load.i8($M.0, $p333);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i335 := $trunc.i8.i1($i334);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    assume {:branchcond $i335} true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i335 == 1);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} vslice_dummy_var_225 := msleep_interruptible(10);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i338 := $load.i8($M.0, $p337);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i339 := $trunc.i8.i1($i338);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i339} true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i339 == 1);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} vslice_dummy_var_226 := msleep_interruptible(10);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i342 := $load.i8($M.0, $p341);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i343 := $trunc.i8.i1($i342);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i343 == 1);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} vslice_dummy_var_227 := msleep_interruptible(10);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i346 := $load.i8($M.0, $p345);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i347 := $trunc.i8.i1($i346);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i347 == 1);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} vslice_dummy_var_228 := msleep_interruptible(10);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i350 := $load.i8($M.0, $p349);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i351 := $trunc.i8.i1($i350);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i351} true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i351 == 1);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} vslice_dummy_var_229 := msleep_interruptible(10);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i354 := $load.i8($M.0, $p353);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i355 := $trunc.i8.i1($i354);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i355 == 1);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} vslice_dummy_var_230 := msleep_interruptible(10);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i358 := $load.i8($M.0, $p357);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i359 := $trunc.i8.i1($i358);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i359} true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i359 == 1);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} vslice_dummy_var_231 := msleep_interruptible(10);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i362 := $load.i8($M.0, $p361);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i363 := $trunc.i8.i1($i362);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    assume {:branchcond $i363} true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i363 == 1);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} vslice_dummy_var_232 := msleep_interruptible(10);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i366 := $load.i8($M.0, $p365);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i367 := $trunc.i8.i1($i366);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i367} true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i367 == 1);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} vslice_dummy_var_233 := msleep_interruptible(10);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i370 := $load.i8($M.0, $p369);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i371 := $trunc.i8.i1($i370);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i371 == 1);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} vslice_dummy_var_234 := msleep_interruptible(10);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i374 := $load.i8($M.0, $p373);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i375 := $trunc.i8.i1($i374);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    assume {:branchcond $i375} true;
    goto $bb262, $bb263;

  $bb263:
    assume !($i375 == 1);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} vslice_dummy_var_235 := msleep_interruptible(10);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i378 := $load.i8($M.0, $p377);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i379 := $trunc.i8.i1($i378);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    assume {:branchcond $i379} true;
    goto $bb265, $bb266;

  $bb266:
    assume !($i379 == 1);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} vslice_dummy_var_236 := msleep_interruptible(10);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i382 := $load.i8($M.0, $p381);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i383 := $trunc.i8.i1($i382);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i383 == 1);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} vslice_dummy_var_237 := msleep_interruptible(10);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i386 := $load.i8($M.0, $p385);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i387 := $trunc.i8.i1($i386);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i387 == 1);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} vslice_dummy_var_238 := msleep_interruptible(10);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i390 := $load.i8($M.0, $p389);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i391 := $trunc.i8.i1($i390);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i391 == 1);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} vslice_dummy_var_239 := msleep_interruptible(10);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i394 := $load.i8($M.0, $p393);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i395 := $trunc.i8.i1($i394);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i395 == 1);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} vslice_dummy_var_240 := msleep_interruptible(10);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i398 := $load.i8($M.0, $p397);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i399 := $trunc.i8.i1($i398);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i399 == 1);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} vslice_dummy_var_241 := msleep_interruptible(10);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i402 := $load.i8($M.0, $p401);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i403 := $trunc.i8.i1($i402);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i403 == 1);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} vslice_dummy_var_242 := msleep_interruptible(10);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i406 := $load.i8($M.0, $p405);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i407 := $trunc.i8.i1($i406);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    assume {:branchcond $i407} true;
    goto $bb286, $bb287;

  $bb287:
    assume !($i407 == 1);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} vslice_dummy_var_243 := msleep_interruptible(10);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i410 := $load.i8($M.0, $p409);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i411 := $trunc.i8.i1($i410);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i411} true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i411 == 1);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} vslice_dummy_var_244 := msleep_interruptible(10);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i414 := $load.i8($M.0, $p413);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $i415 := $trunc.i8.i1($i414);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292, $bb293;

  $bb293:
    assume !($i415 == 1);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} vslice_dummy_var_245 := msleep_interruptible(10);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i418 := $load.i8($M.0, $p417);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i419 := $trunc.i8.i1($i418);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    assume {:branchcond $i419} true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i419 == 1);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} vslice_dummy_var_246 := msleep_interruptible(10);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i422 := $load.i8($M.0, $p421);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i423 := $trunc.i8.i1($i422);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i423} true;
    goto $bb298, $bb299;

  $bb299:
    assume !($i423 == 1);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} vslice_dummy_var_247 := msleep_interruptible(10);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i426 := $load.i8($M.0, $p425);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i427 := $trunc.i8.i1($i426);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i427 == 1);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} vslice_dummy_var_248 := msleep_interruptible(10);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} ldv_spin_lock();
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} reset_port($p0);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} spin_unlock_irqrestore($p32, $u0);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i34);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $r := $i35;
    return;

  $bb301:
    assume {:verifier.code 0} true;
    assume $i427 == 1;
    goto $bb4;

  $bb298:
    assume {:verifier.code 0} true;
    assume $i423 == 1;
    goto $bb4;

  $bb295:
    assume {:verifier.code 0} true;
    assume $i419 == 1;
    goto $bb4;

  $bb292:
    assume {:verifier.code 0} true;
    assume $i415 == 1;
    goto $bb4;

  $bb289:
    assume {:verifier.code 0} true;
    assume $i411 == 1;
    goto $bb4;

  $bb286:
    assume {:verifier.code 0} true;
    assume $i407 == 1;
    goto $bb4;

  $bb283:
    assume {:verifier.code 0} true;
    assume $i403 == 1;
    goto $bb4;

  $bb280:
    assume {:verifier.code 0} true;
    assume $i399 == 1;
    goto $bb4;

  $bb277:
    assume {:verifier.code 0} true;
    assume $i395 == 1;
    goto $bb4;

  $bb274:
    assume {:verifier.code 0} true;
    assume $i391 == 1;
    goto $bb4;

  $bb271:
    assume {:verifier.code 0} true;
    assume $i387 == 1;
    goto $bb4;

  $bb268:
    assume {:verifier.code 0} true;
    assume $i383 == 1;
    goto $bb4;

  $bb265:
    assume {:verifier.code 0} true;
    assume $i379 == 1;
    goto $bb4;

  $bb262:
    assume {:verifier.code 0} true;
    assume $i375 == 1;
    goto $bb4;

  $bb259:
    assume {:verifier.code 0} true;
    assume $i371 == 1;
    goto $bb4;

  $bb256:
    assume {:verifier.code 0} true;
    assume $i367 == 1;
    goto $bb4;

  $bb253:
    assume {:verifier.code 0} true;
    assume $i363 == 1;
    goto $bb4;

  $bb250:
    assume {:verifier.code 0} true;
    assume $i359 == 1;
    goto $bb4;

  $bb247:
    assume {:verifier.code 0} true;
    assume $i355 == 1;
    goto $bb4;

  $bb244:
    assume {:verifier.code 0} true;
    assume $i351 == 1;
    goto $bb4;

  $bb241:
    assume {:verifier.code 0} true;
    assume $i347 == 1;
    goto $bb4;

  $bb238:
    assume {:verifier.code 0} true;
    assume $i343 == 1;
    goto $bb4;

  $bb235:
    assume {:verifier.code 0} true;
    assume $i339 == 1;
    goto $bb4;

  $bb232:
    assume {:verifier.code 0} true;
    assume $i335 == 1;
    goto $bb4;

  $bb229:
    assume {:verifier.code 0} true;
    assume $i331 == 1;
    goto $bb4;

  $bb226:
    assume {:verifier.code 0} true;
    assume $i327 == 1;
    goto $bb4;

  $bb223:
    assume {:verifier.code 0} true;
    assume $i323 == 1;
    goto $bb4;

  $bb220:
    assume {:verifier.code 0} true;
    assume $i319 == 1;
    goto $bb4;

  $bb217:
    assume {:verifier.code 0} true;
    assume $i315 == 1;
    goto $bb4;

  $bb214:
    assume {:verifier.code 0} true;
    assume $i311 == 1;
    goto $bb4;

  $bb211:
    assume {:verifier.code 0} true;
    assume $i307 == 1;
    goto $bb4;

  $bb208:
    assume {:verifier.code 0} true;
    assume $i303 == 1;
    goto $bb4;

  $bb205:
    assume {:verifier.code 0} true;
    assume $i299 == 1;
    goto $bb4;

  $bb202:
    assume {:verifier.code 0} true;
    assume $i295 == 1;
    goto $bb4;

  $bb199:
    assume {:verifier.code 0} true;
    assume $i291 == 1;
    goto $bb4;

  $bb196:
    assume {:verifier.code 0} true;
    assume $i287 == 1;
    goto $bb4;

  $bb193:
    assume {:verifier.code 0} true;
    assume $i283 == 1;
    goto $bb4;

  $bb190:
    assume {:verifier.code 0} true;
    assume $i279 == 1;
    goto $bb4;

  $bb187:
    assume {:verifier.code 0} true;
    assume $i275 == 1;
    goto $bb4;

  $bb184:
    assume {:verifier.code 0} true;
    assume $i271 == 1;
    goto $bb4;

  $bb181:
    assume {:verifier.code 0} true;
    assume $i267 == 1;
    goto $bb4;

  $bb178:
    assume {:verifier.code 0} true;
    assume $i263 == 1;
    goto $bb4;

  $bb175:
    assume {:verifier.code 0} true;
    assume $i259 == 1;
    goto $bb4;

  $bb172:
    assume {:verifier.code 0} true;
    assume $i255 == 1;
    goto $bb4;

  $bb169:
    assume {:verifier.code 0} true;
    assume $i251 == 1;
    goto $bb4;

  $bb166:
    assume {:verifier.code 0} true;
    assume $i247 == 1;
    goto $bb4;

  $bb163:
    assume {:verifier.code 0} true;
    assume $i243 == 1;
    goto $bb4;

  $bb160:
    assume {:verifier.code 0} true;
    assume $i239 == 1;
    goto $bb4;

  $bb157:
    assume {:verifier.code 0} true;
    assume $i235 == 1;
    goto $bb4;

  $bb154:
    assume {:verifier.code 0} true;
    assume $i231 == 1;
    goto $bb4;

  $bb151:
    assume {:verifier.code 0} true;
    assume $i227 == 1;
    goto $bb4;

  $bb148:
    assume {:verifier.code 0} true;
    assume $i223 == 1;
    goto $bb4;

  $bb145:
    assume {:verifier.code 0} true;
    assume $i219 == 1;
    goto $bb4;

  $bb142:
    assume {:verifier.code 0} true;
    assume $i215 == 1;
    goto $bb4;

  $bb139:
    assume {:verifier.code 0} true;
    assume $i211 == 1;
    goto $bb4;

  $bb136:
    assume {:verifier.code 0} true;
    assume $i207 == 1;
    goto $bb4;

  $bb133:
    assume {:verifier.code 0} true;
    assume $i203 == 1;
    goto $bb4;

  $bb130:
    assume {:verifier.code 0} true;
    assume $i199 == 1;
    goto $bb4;

  $bb127:
    assume {:verifier.code 0} true;
    assume $i195 == 1;
    goto $bb4;

  $bb124:
    assume {:verifier.code 0} true;
    assume $i191 == 1;
    goto $bb4;

  $bb121:
    assume {:verifier.code 0} true;
    assume $i187 == 1;
    goto $bb4;

  $bb118:
    assume {:verifier.code 0} true;
    assume $i183 == 1;
    goto $bb4;

  $bb115:
    assume {:verifier.code 0} true;
    assume $i179 == 1;
    goto $bb4;

  $bb112:
    assume {:verifier.code 0} true;
    assume $i175 == 1;
    goto $bb4;

  $bb109:
    assume {:verifier.code 0} true;
    assume $i171 == 1;
    goto $bb4;

  $bb106:
    assume {:verifier.code 0} true;
    assume $i167 == 1;
    goto $bb4;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i163 == 1;
    goto $bb4;

  $bb100:
    assume {:verifier.code 0} true;
    assume $i159 == 1;
    goto $bb4;

  $bb97:
    assume {:verifier.code 0} true;
    assume $i155 == 1;
    goto $bb4;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i151 == 1;
    goto $bb4;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i147 == 1;
    goto $bb4;

  $bb88:
    assume {:verifier.code 0} true;
    assume $i143 == 1;
    goto $bb4;

  $bb85:
    assume {:verifier.code 0} true;
    assume $i139 == 1;
    goto $bb4;

  $bb82:
    assume {:verifier.code 0} true;
    assume $i135 == 1;
    goto $bb4;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i131 == 1;
    goto $bb4;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i127 == 1;
    goto $bb4;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i123 == 1;
    goto $bb4;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i119 == 1;
    goto $bb4;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i115 == 1;
    goto $bb4;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i111 == 1;
    goto $bb4;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i107 == 1;
    goto $bb4;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i103 == 1;
    goto $bb4;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i99 == 1;
    goto $bb4;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb4;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb4;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i87 == 1;
    goto $bb4;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb4;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb4;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb4;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i71 == 1;
    goto $bb4;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb4;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb4;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb4;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb4;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb4;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb4;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb4;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb4;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb4;
}



const loopback_test: ref;

axiom loopback_test == $sub.ref(0, 391968);

procedure loopback_test($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr, $M.3, $M.5, $M.7, $M.9, $M.22, $M.4, $M.6, $M.8, $M.10, assertsPassed;



implementation loopback_test($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i23: i1;
  var $i24: i8;
  var $i25: i1;
  var $i26: i8;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i32;
  var $i38: i1;
  var $i39: i8;
  var $i32: i8;
  var $i40: i8;
  var $p41: ref;
  var $i42: i64;
  var $p44: ref;
  var $p46: ref;
  var $i47: i1;
  var $i49: i1;
  var $i50: i8;
  var $i51: i1;
  var $i53: i1;
  var $i54: i8;
  var $i55: i1;
  var $i57: i1;
  var $i58: i8;
  var $i59: i1;
  var $i61: i1;
  var $i62: i8;
  var $i63: i1;
  var $i65: i1;
  var $i66: i8;
  var $i67: i1;
  var $i69: i1;
  var $i70: i8;
  var $i71: i1;
  var $i73: i1;
  var $i74: i8;
  var $i75: i1;
  var $i77: i1;
  var $i78: i8;
  var $i79: i1;
  var $i81: i1;
  var $i82: i8;
  var $i83: i1;
  var $i85: i1;
  var $i86: i8;
  var $i87: i1;
  var $i89: i1;
  var $i90: i8;
  var $i91: i1;
  var $i93: i1;
  var $i94: i8;
  var $i95: i1;
  var $i97: i1;
  var $i98: i8;
  var $i99: i1;
  var $i101: i1;
  var $i102: i8;
  var $i103: i1;
  var $i105: i1;
  var $i106: i8;
  var $i107: i1;
  var $i109: i1;
  var $i110: i8;
  var $i111: i1;
  var $i113: i1;
  var $i114: i8;
  var $i115: i1;
  var $i117: i1;
  var $i118: i8;
  var $i119: i1;
  var $i121: i1;
  var $i122: i8;
  var $i123: i1;
  var $i125: i1;
  var $i126: i8;
  var $i127: i1;
  var $i129: i1;
  var $i130: i8;
  var $i131: i1;
  var $i133: i1;
  var $i134: i8;
  var $i135: i1;
  var $i137: i1;
  var $i138: i8;
  var $i139: i1;
  var $i141: i1;
  var $i142: i8;
  var $i143: i1;
  var $i145: i1;
  var $i146: i8;
  var $i147: i1;
  var $i149: i1;
  var $i150: i8;
  var $i151: i1;
  var $i153: i1;
  var $i154: i8;
  var $i155: i1;
  var $i157: i1;
  var $i158: i8;
  var $i159: i1;
  var $i161: i1;
  var $i162: i8;
  var $i163: i1;
  var $i165: i1;
  var $i166: i8;
  var $i167: i1;
  var $i169: i1;
  var $i170: i8;
  var $i171: i1;
  var $i173: i1;
  var $i174: i8;
  var $i175: i1;
  var $i177: i1;
  var $i178: i8;
  var $i179: i1;
  var $i181: i1;
  var $i182: i8;
  var $i183: i1;
  var $i185: i1;
  var $i186: i8;
  var $i187: i1;
  var $i189: i1;
  var $i190: i8;
  var $i191: i1;
  var $i193: i1;
  var $i194: i8;
  var $i195: i1;
  var $i197: i1;
  var $i198: i8;
  var $i199: i1;
  var $i201: i1;
  var $i202: i8;
  var $i203: i1;
  var $i205: i1;
  var $i206: i8;
  var $i207: i1;
  var $i209: i1;
  var $i210: i8;
  var $i211: i1;
  var $i213: i1;
  var $i214: i8;
  var $i215: i1;
  var $i217: i1;
  var $i218: i8;
  var $i219: i1;
  var $i221: i1;
  var $i222: i8;
  var $i223: i1;
  var $i225: i1;
  var $i226: i8;
  var $i227: i1;
  var $i229: i1;
  var $i230: i8;
  var $i231: i1;
  var $i233: i1;
  var $i234: i8;
  var $i235: i1;
  var $i237: i1;
  var $i238: i8;
  var $i239: i1;
  var $i241: i1;
  var $i242: i8;
  var $i243: i1;
  var $i245: i1;
  var $i246: i8;
  var $i247: i1;
  var $i249: i1;
  var $i250: i8;
  var $i251: i1;
  var $i253: i1;
  var $i254: i8;
  var $i255: i1;
  var $i257: i1;
  var $i258: i8;
  var $i259: i1;
  var $i261: i1;
  var $i262: i8;
  var $i263: i1;
  var $i265: i1;
  var $i266: i8;
  var $i267: i1;
  var $i269: i1;
  var $i270: i8;
  var $i271: i1;
  var $i273: i1;
  var $i274: i8;
  var $i275: i1;
  var $i277: i1;
  var $i278: i8;
  var $i279: i1;
  var $i281: i1;
  var $i282: i8;
  var $i283: i1;
  var $i285: i1;
  var $i286: i8;
  var $i287: i1;
  var $i289: i1;
  var $i290: i8;
  var $i291: i1;
  var $i293: i1;
  var $i294: i8;
  var $i295: i1;
  var $i297: i1;
  var $i298: i8;
  var $i299: i1;
  var $i301: i1;
  var $i302: i8;
  var $i303: i1;
  var $i305: i1;
  var $i306: i8;
  var $i307: i1;
  var $i309: i1;
  var $i310: i8;
  var $i311: i1;
  var $i313: i1;
  var $i314: i8;
  var $i315: i1;
  var $i317: i1;
  var $i318: i8;
  var $i319: i1;
  var $i321: i1;
  var $i322: i8;
  var $i323: i1;
  var $i325: i1;
  var $i326: i8;
  var $i327: i1;
  var $i329: i1;
  var $i330: i8;
  var $i331: i1;
  var $i333: i1;
  var $i334: i8;
  var $i335: i1;
  var $i337: i1;
  var $i338: i8;
  var $i339: i1;
  var $i341: i1;
  var $i342: i8;
  var $i343: i1;
  var $i345: i1;
  var $i346: i8;
  var $i347: i1;
  var $i349: i1;
  var $i350: i8;
  var $i351: i1;
  var $i353: i1;
  var $i354: i8;
  var $i355: i1;
  var $i357: i1;
  var $i358: i8;
  var $i359: i1;
  var $i361: i1;
  var $i362: i8;
  var $i363: i1;
  var $i365: i1;
  var $i366: i8;
  var $i367: i1;
  var $i369: i1;
  var $i370: i8;
  var $i371: i1;
  var $i373: i1;
  var $i374: i8;
  var $i375: i1;
  var $i377: i1;
  var $i378: i8;
  var $i379: i1;
  var $i381: i1;
  var $i382: i8;
  var $i383: i1;
  var $i385: i1;
  var $i386: i8;
  var $i387: i1;
  var $i389: i1;
  var $i390: i8;
  var $i391: i1;
  var $i393: i1;
  var $i394: i8;
  var $i395: i1;
  var $i397: i1;
  var $i398: i8;
  var $i399: i1;
  var $i401: i1;
  var $i402: i8;
  var $i403: i1;
  var $i405: i1;
  var $i406: i8;
  var $i407: i1;
  var $i409: i1;
  var $i410: i8;
  var $i411: i1;
  var $i413: i1;
  var $i414: i8;
  var $i415: i1;
  var $i417: i1;
  var $i418: i8;
  var $i419: i1;
  var $i421: i1;
  var $i422: i8;
  var $i423: i1;
  var $i425: i1;
  var $i426: i8;
  var $i427: i1;
  var $i429: i1;
  var $i430: i8;
  var $i431: i1;
  var $i433: i1;
  var $i434: i8;
  var $i435: i1;
  var $i437: i1;
  var $i438: i8;
  var $i439: i1;
  var $i441: i1;
  var $i442: i8;
  var $i443: i1;
  var $p444: ref;
  var $p445: ref;
  var $p446: ref;
  var $p447: ref;
  var $p448: ref;
  var $p449: ref;
  var $p450: ref;
  var $p451: ref;
  var $p452: ref;
  var $p453: ref;
  var $p454: ref;
  var $p455: ref;
  var $p456: ref;
  var $p457: ref;
  var $p458: ref;
  var $p459: ref;
  var $p460: ref;
  var $p461: ref;
  var $p462: ref;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var vslice_dummy_var_249: i64;
  var vslice_dummy_var_250: i64;
  var vslice_dummy_var_251: i64;
  var vslice_dummy_var_252: i64;
  var vslice_dummy_var_253: i64;
  var vslice_dummy_var_254: i64;
  var vslice_dummy_var_255: i64;
  var vslice_dummy_var_256: i64;
  var vslice_dummy_var_257: i64;
  var vslice_dummy_var_258: i64;
  var vslice_dummy_var_259: i64;
  var vslice_dummy_var_260: i64;
  var vslice_dummy_var_261: i64;
  var vslice_dummy_var_262: i64;
  var vslice_dummy_var_263: i64;
  var vslice_dummy_var_264: i64;
  var vslice_dummy_var_265: i64;
  var vslice_dummy_var_266: i64;
  var vslice_dummy_var_267: i64;
  var vslice_dummy_var_268: i64;
  var vslice_dummy_var_269: i64;
  var vslice_dummy_var_270: i64;
  var vslice_dummy_var_271: i64;
  var vslice_dummy_var_272: i64;
  var vslice_dummy_var_273: i64;
  var vslice_dummy_var_274: i64;
  var vslice_dummy_var_275: i64;
  var vslice_dummy_var_276: i64;
  var vslice_dummy_var_277: i64;
  var vslice_dummy_var_278: i64;
  var vslice_dummy_var_279: i64;
  var vslice_dummy_var_280: i64;
  var vslice_dummy_var_281: i64;
  var vslice_dummy_var_282: i64;
  var vslice_dummy_var_283: i64;
  var vslice_dummy_var_284: i64;
  var vslice_dummy_var_285: i64;
  var vslice_dummy_var_286: i64;
  var vslice_dummy_var_287: i64;
  var vslice_dummy_var_288: i64;
  var vslice_dummy_var_289: i64;
  var vslice_dummy_var_290: i64;
  var vslice_dummy_var_291: i64;
  var vslice_dummy_var_292: i64;
  var vslice_dummy_var_293: i64;
  var vslice_dummy_var_294: i64;
  var vslice_dummy_var_295: i64;
  var vslice_dummy_var_296: i64;
  var vslice_dummy_var_297: i64;
  var vslice_dummy_var_298: i64;
  var vslice_dummy_var_299: i64;
  var vslice_dummy_var_300: i64;
  var vslice_dummy_var_301: i64;
  var vslice_dummy_var_302: i64;
  var vslice_dummy_var_303: i64;
  var vslice_dummy_var_304: i64;
  var vslice_dummy_var_305: i64;
  var vslice_dummy_var_306: i64;
  var vslice_dummy_var_307: i64;
  var vslice_dummy_var_308: i64;
  var vslice_dummy_var_309: i64;
  var vslice_dummy_var_310: i64;
  var vslice_dummy_var_311: i64;
  var vslice_dummy_var_312: i64;
  var vslice_dummy_var_313: i64;
  var vslice_dummy_var_314: i64;
  var vslice_dummy_var_315: i64;
  var vslice_dummy_var_316: i64;
  var vslice_dummy_var_317: i64;
  var vslice_dummy_var_318: i64;
  var vslice_dummy_var_319: i64;
  var vslice_dummy_var_320: i64;
  var vslice_dummy_var_321: i64;
  var vslice_dummy_var_322: i64;
  var vslice_dummy_var_323: i64;
  var vslice_dummy_var_324: i64;
  var vslice_dummy_var_325: i64;
  var vslice_dummy_var_326: i64;
  var vslice_dummy_var_327: i64;
  var vslice_dummy_var_328: i64;
  var vslice_dummy_var_329: i64;
  var vslice_dummy_var_330: i64;
  var vslice_dummy_var_331: i64;
  var vslice_dummy_var_332: i64;
  var vslice_dummy_var_333: i64;
  var vslice_dummy_var_334: i64;
  var vslice_dummy_var_335: i64;
  var vslice_dummy_var_336: i64;
  var vslice_dummy_var_337: i64;
  var vslice_dummy_var_338: i64;
  var vslice_dummy_var_339: i64;
  var vslice_dummy_var_340: i64;
  var vslice_dummy_var_341: i64;
  var vslice_dummy_var_342: i64;
  var vslice_dummy_var_343: i64;
  var vslice_dummy_var_344: i64;
  var vslice_dummy_var_345: i64;
  var vslice_dummy_var_346: i64;
  var vslice_dummy_var_347: i64;
  var vslice_dummy_var_348: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $p1 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(16, 1));
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    call {:si_unique_call 749} {:cexpr "speed"} boogie_si_record_i32($i8);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(16, 1));
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, 3686400);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $0.ref);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6156, 1));
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 5);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 0);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(1, 1));
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p444, 1);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(2, 1));
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p445, 2);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(3, 1));
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p446, 3);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p447, 4);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(5, 1));
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p448, 5);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(6, 1));
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p449, 6);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(7, 1));
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p450, 7);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p451, 8);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(9, 1));
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p452, 9);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(10, 1));
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p453, 10);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(11, 1));
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p454, 11);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p455, 12);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(13, 1));
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p456, 13);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(14, 1));
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p457, 14);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(15, 1));
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p458, 15);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb432:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p459, 16);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(17, 1));
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p460, 17);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(18, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p461, 18);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    $p462 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(19, 1));
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p462, 19);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5984, 1));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 750} cmdloc_dummy_var_20 := $memset.i8(cmdloc_dummy_var_19, $p16, 0, 20, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_20;
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} ldv_spin_lock();
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} hdlc_mode($p0);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} enable_loopback($p0, 1);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} rx_start($p0);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32(20);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32(20);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} tx_load_dma_buffer($p0, $p19, $i20);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} tx_start($p0);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} spin_unlock_irqrestore($p21, $u0);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} vslice_dummy_var_249 := msleep_interruptible(10);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $i23 := rx_get_frame($p0);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 760} {:cexpr "tmp"} boogie_si_record_i8($i24);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} vslice_dummy_var_250 := msleep_interruptible(10);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $i49 := rx_get_frame($p0);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i8($i49);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i8.i1($i50);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} vslice_dummy_var_251 := msleep_interruptible(10);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $i53 := rx_get_frame($p0);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i54 := $zext.i1.i8($i53);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i8.i1($i54);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} vslice_dummy_var_252 := msleep_interruptible(10);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $i57 := rx_get_frame($p0);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i58 := $zext.i1.i8($i57);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i8.i1($i58);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} vslice_dummy_var_253 := msleep_interruptible(10);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $i61 := rx_get_frame($p0);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i62 := $zext.i1.i8($i61);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i8.i1($i62);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} vslice_dummy_var_254 := msleep_interruptible(10);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $i65 := rx_get_frame($p0);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i66 := $zext.i1.i8($i65);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i8.i1($i66);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} vslice_dummy_var_255 := msleep_interruptible(10);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i69 := rx_get_frame($p0);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i70 := $zext.i1.i8($i69);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i8.i1($i70);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} vslice_dummy_var_256 := msleep_interruptible(10);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $i73 := rx_get_frame($p0);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i74 := $zext.i1.i8($i73);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i8.i1($i74);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} vslice_dummy_var_257 := msleep_interruptible(10);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $i77 := rx_get_frame($p0);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i78 := $zext.i1.i8($i77);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i8.i1($i78);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} vslice_dummy_var_258 := msleep_interruptible(10);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $i81 := rx_get_frame($p0);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i82 := $zext.i1.i8($i81);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i8.i1($i82);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} vslice_dummy_var_259 := msleep_interruptible(10);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $i85 := rx_get_frame($p0);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i86 := $zext.i1.i8($i85);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i8.i1($i86);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} vslice_dummy_var_260 := msleep_interruptible(10);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $i89 := rx_get_frame($p0);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i90 := $zext.i1.i8($i89);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i8.i1($i90);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} vslice_dummy_var_261 := msleep_interruptible(10);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $i93 := rx_get_frame($p0);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i94 := $zext.i1.i8($i93);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i8.i1($i94);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} vslice_dummy_var_262 := msleep_interruptible(10);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $i97 := rx_get_frame($p0);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i98 := $zext.i1.i8($i97);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i8.i1($i98);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} vslice_dummy_var_263 := msleep_interruptible(10);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $i101 := rx_get_frame($p0);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i102 := $zext.i1.i8($i101);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i8.i1($i102);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} vslice_dummy_var_264 := msleep_interruptible(10);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i105 := rx_get_frame($p0);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i106 := $zext.i1.i8($i105);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i8.i1($i106);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} vslice_dummy_var_265 := msleep_interruptible(10);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $i109 := rx_get_frame($p0);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i110 := $zext.i1.i8($i109);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i8.i1($i110);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} vslice_dummy_var_266 := msleep_interruptible(10);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} $i113 := rx_get_frame($p0);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i114 := $zext.i1.i8($i113);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i8.i1($i114);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} vslice_dummy_var_267 := msleep_interruptible(10);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $i117 := rx_get_frame($p0);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i118 := $zext.i1.i8($i117);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i8.i1($i118);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} vslice_dummy_var_268 := msleep_interruptible(10);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $i121 := rx_get_frame($p0);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i122 := $zext.i1.i8($i121);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i8.i1($i122);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} vslice_dummy_var_269 := msleep_interruptible(10);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $i125 := rx_get_frame($p0);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i126 := $zext.i1.i8($i125);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i127 := $trunc.i8.i1($i126);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} vslice_dummy_var_270 := msleep_interruptible(10);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $i129 := rx_get_frame($p0);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i130 := $zext.i1.i8($i129);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i8.i1($i130);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} vslice_dummy_var_271 := msleep_interruptible(10);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $i133 := rx_get_frame($p0);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i134 := $zext.i1.i8($i133);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i8.i1($i134);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} vslice_dummy_var_272 := msleep_interruptible(10);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $i137 := rx_get_frame($p0);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i138 := $zext.i1.i8($i137);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i8.i1($i138);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} vslice_dummy_var_273 := msleep_interruptible(10);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $i141 := rx_get_frame($p0);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i142 := $zext.i1.i8($i141);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i143 := $trunc.i8.i1($i142);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} vslice_dummy_var_274 := msleep_interruptible(10);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $i145 := rx_get_frame($p0);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i146 := $zext.i1.i8($i145);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i8.i1($i146);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} vslice_dummy_var_275 := msleep_interruptible(10);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $i149 := rx_get_frame($p0);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i150 := $zext.i1.i8($i149);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i151 := $trunc.i8.i1($i150);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} vslice_dummy_var_276 := msleep_interruptible(10);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $i153 := rx_get_frame($p0);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i154 := $zext.i1.i8($i153);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i155 := $trunc.i8.i1($i154);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} vslice_dummy_var_277 := msleep_interruptible(10);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $i157 := rx_get_frame($p0);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i158 := $zext.i1.i8($i157);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i159 := $trunc.i8.i1($i158);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} vslice_dummy_var_278 := msleep_interruptible(10);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $i161 := rx_get_frame($p0);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i162 := $zext.i1.i8($i161);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i8.i1($i162);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} vslice_dummy_var_279 := msleep_interruptible(10);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $i165 := rx_get_frame($p0);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i166 := $zext.i1.i8($i165);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i167 := $trunc.i8.i1($i166);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} vslice_dummy_var_280 := msleep_interruptible(10);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $i169 := rx_get_frame($p0);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i170 := $zext.i1.i8($i169);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i171 := $trunc.i8.i1($i170);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} vslice_dummy_var_281 := msleep_interruptible(10);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $i173 := rx_get_frame($p0);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $i174 := $zext.i1.i8($i173);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i175 := $trunc.i8.i1($i174);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} vslice_dummy_var_282 := msleep_interruptible(10);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $i177 := rx_get_frame($p0);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i178 := $zext.i1.i8($i177);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i179 := $trunc.i8.i1($i178);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} vslice_dummy_var_283 := msleep_interruptible(10);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $i181 := rx_get_frame($p0);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i182 := $zext.i1.i8($i181);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i183 := $trunc.i8.i1($i182);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} vslice_dummy_var_284 := msleep_interruptible(10);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $i185 := rx_get_frame($p0);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i186 := $zext.i1.i8($i185);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i187 := $trunc.i8.i1($i186);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} vslice_dummy_var_285 := msleep_interruptible(10);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $i189 := rx_get_frame($p0);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i190 := $zext.i1.i8($i189);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i191 := $trunc.i8.i1($i190);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} vslice_dummy_var_286 := msleep_interruptible(10);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} $i193 := rx_get_frame($p0);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i194 := $zext.i1.i8($i193);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i195 := $trunc.i8.i1($i194);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} vslice_dummy_var_287 := msleep_interruptible(10);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $i197 := rx_get_frame($p0);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i198 := $zext.i1.i8($i197);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i199 := $trunc.i8.i1($i198);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} vslice_dummy_var_288 := msleep_interruptible(10);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $i201 := rx_get_frame($p0);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i202 := $zext.i1.i8($i201);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i203 := $trunc.i8.i1($i202);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} vslice_dummy_var_289 := msleep_interruptible(10);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $i205 := rx_get_frame($p0);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i206 := $zext.i1.i8($i205);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i207 := $trunc.i8.i1($i206);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} vslice_dummy_var_290 := msleep_interruptible(10);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $i209 := rx_get_frame($p0);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i210 := $zext.i1.i8($i209);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i211 := $trunc.i8.i1($i210);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} vslice_dummy_var_291 := msleep_interruptible(10);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $i213 := rx_get_frame($p0);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i214 := $zext.i1.i8($i213);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i215 := $trunc.i8.i1($i214);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} vslice_dummy_var_292 := msleep_interruptible(10);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $i217 := rx_get_frame($p0);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i218 := $zext.i1.i8($i217);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i219 := $trunc.i8.i1($i218);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} vslice_dummy_var_293 := msleep_interruptible(10);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $i221 := rx_get_frame($p0);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i222 := $zext.i1.i8($i221);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i223 := $trunc.i8.i1($i222);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} vslice_dummy_var_294 := msleep_interruptible(10);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $i225 := rx_get_frame($p0);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i226 := $zext.i1.i8($i225);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i227 := $trunc.i8.i1($i226);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} vslice_dummy_var_295 := msleep_interruptible(10);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $i229 := rx_get_frame($p0);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $i230 := $zext.i1.i8($i229);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i231 := $trunc.i8.i1($i230);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} vslice_dummy_var_296 := msleep_interruptible(10);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $i233 := rx_get_frame($p0);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i234 := $zext.i1.i8($i233);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i235 := $trunc.i8.i1($i234);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} vslice_dummy_var_297 := msleep_interruptible(10);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $i237 := rx_get_frame($p0);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i238 := $zext.i1.i8($i237);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i239 := $trunc.i8.i1($i238);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} vslice_dummy_var_298 := msleep_interruptible(10);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $i241 := rx_get_frame($p0);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i242 := $zext.i1.i8($i241);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i243 := $trunc.i8.i1($i242);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i243} true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} vslice_dummy_var_299 := msleep_interruptible(10);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $i245 := rx_get_frame($p0);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i246 := $zext.i1.i8($i245);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i247 := $trunc.i8.i1($i246);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} vslice_dummy_var_300 := msleep_interruptible(10);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $i249 := rx_get_frame($p0);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i250 := $zext.i1.i8($i249);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i251 := $trunc.i8.i1($i250);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i251} true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} vslice_dummy_var_301 := msleep_interruptible(10);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $i253 := rx_get_frame($p0);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i254 := $zext.i1.i8($i253);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i255 := $trunc.i8.i1($i254);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    assume {:branchcond $i255} true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} vslice_dummy_var_302 := msleep_interruptible(10);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} $i257 := rx_get_frame($p0);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $i258 := $zext.i1.i8($i257);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i259 := $trunc.i8.i1($i258);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i259} true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} vslice_dummy_var_303 := msleep_interruptible(10);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $i261 := rx_get_frame($p0);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $i262 := $zext.i1.i8($i261);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i263 := $trunc.i8.i1($i262);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i263} true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} vslice_dummy_var_304 := msleep_interruptible(10);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} $i265 := rx_get_frame($p0);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i266 := $zext.i1.i8($i265);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i267 := $trunc.i8.i1($i266);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} vslice_dummy_var_305 := msleep_interruptible(10);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $i269 := rx_get_frame($p0);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i270 := $zext.i1.i8($i269);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i271 := $trunc.i8.i1($i270);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} vslice_dummy_var_306 := msleep_interruptible(10);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $i273 := rx_get_frame($p0);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i274 := $zext.i1.i8($i273);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i275 := $trunc.i8.i1($i274);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} vslice_dummy_var_307 := msleep_interruptible(10);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} $i277 := rx_get_frame($p0);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i278 := $zext.i1.i8($i277);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i279 := $trunc.i8.i1($i278);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} vslice_dummy_var_308 := msleep_interruptible(10);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $i281 := rx_get_frame($p0);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i282 := $zext.i1.i8($i281);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i283 := $trunc.i8.i1($i282);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i283 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} vslice_dummy_var_309 := msleep_interruptible(10);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $i285 := rx_get_frame($p0);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $i286 := $zext.i1.i8($i285);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i287 := $trunc.i8.i1($i286);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} vslice_dummy_var_310 := msleep_interruptible(10);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $i289 := rx_get_frame($p0);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i290 := $zext.i1.i8($i289);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i291 := $trunc.i8.i1($i290);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i291 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} vslice_dummy_var_311 := msleep_interruptible(10);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} $i293 := rx_get_frame($p0);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i294 := $zext.i1.i8($i293);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i295 := $trunc.i8.i1($i294);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} vslice_dummy_var_312 := msleep_interruptible(10);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} $i297 := rx_get_frame($p0);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i298 := $zext.i1.i8($i297);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $i299 := $trunc.i8.i1($i298);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i299} true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} vslice_dummy_var_313 := msleep_interruptible(10);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $i301 := rx_get_frame($p0);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i302 := $zext.i1.i8($i301);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i303 := $trunc.i8.i1($i302);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} vslice_dummy_var_314 := msleep_interruptible(10);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $i305 := rx_get_frame($p0);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i306 := $zext.i1.i8($i305);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i307 := $trunc.i8.i1($i306);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i307} true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} vslice_dummy_var_315 := msleep_interruptible(10);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $i309 := rx_get_frame($p0);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i310 := $zext.i1.i8($i309);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i311 := $trunc.i8.i1($i310);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i311} true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} vslice_dummy_var_316 := msleep_interruptible(10);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} $i313 := rx_get_frame($p0);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i314 := $zext.i1.i8($i313);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i315 := $trunc.i8.i1($i314);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} vslice_dummy_var_317 := msleep_interruptible(10);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $i317 := rx_get_frame($p0);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i318 := $zext.i1.i8($i317);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i319 := $trunc.i8.i1($i318);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i319} true;
    goto $bb291, $bb292;

  $bb292:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} vslice_dummy_var_318 := msleep_interruptible(10);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $i321 := rx_get_frame($p0);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i322 := $zext.i1.i8($i321);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i323 := $trunc.i8.i1($i322);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i323} true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} vslice_dummy_var_319 := msleep_interruptible(10);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} $i325 := rx_get_frame($p0);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i326 := $zext.i1.i8($i325);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i327 := $trunc.i8.i1($i326);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} vslice_dummy_var_320 := msleep_interruptible(10);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $i329 := rx_get_frame($p0);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i330 := $zext.i1.i8($i329);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i331 := $trunc.i8.i1($i330);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i331} true;
    goto $bb303, $bb304;

  $bb304:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} vslice_dummy_var_321 := msleep_interruptible(10);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $i333 := rx_get_frame($p0);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i334 := $zext.i1.i8($i333);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i335 := $trunc.i8.i1($i334);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    assume {:branchcond $i335} true;
    goto $bb307, $bb308;

  $bb308:
    assume !($i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} vslice_dummy_var_322 := msleep_interruptible(10);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} $i337 := rx_get_frame($p0);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i338 := $zext.i1.i8($i337);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i339 := $trunc.i8.i1($i338);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i339} true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} vslice_dummy_var_323 := msleep_interruptible(10);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $i341 := rx_get_frame($p0);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i342 := $zext.i1.i8($i341);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i343 := $trunc.i8.i1($i342);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb315, $bb316;

  $bb316:
    assume !($i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} vslice_dummy_var_324 := msleep_interruptible(10);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $i345 := rx_get_frame($p0);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $i346 := $zext.i1.i8($i345);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i347 := $trunc.i8.i1($i346);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} vslice_dummy_var_325 := msleep_interruptible(10);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $i349 := rx_get_frame($p0);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i350 := $zext.i1.i8($i349);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i351 := $trunc.i8.i1($i350);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i351} true;
    goto $bb323, $bb324;

  $bb324:
    assume !($i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} vslice_dummy_var_326 := msleep_interruptible(10);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $i353 := rx_get_frame($p0);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i354 := $zext.i1.i8($i353);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i355 := $trunc.i8.i1($i354);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb327, $bb328;

  $bb328:
    assume !($i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} vslice_dummy_var_327 := msleep_interruptible(10);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $i357 := rx_get_frame($p0);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i358 := $zext.i1.i8($i357);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i359 := $trunc.i8.i1($i358);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i359} true;
    goto $bb331, $bb332;

  $bb332:
    assume !($i359 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} vslice_dummy_var_328 := msleep_interruptible(10);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $i361 := rx_get_frame($p0);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i362 := $zext.i1.i8($i361);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i363 := $trunc.i8.i1($i362);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i363} true;
    goto $bb335, $bb336;

  $bb336:
    assume !($i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} vslice_dummy_var_329 := msleep_interruptible(10);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $i365 := rx_get_frame($p0);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i366 := $zext.i1.i8($i365);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i367 := $trunc.i8.i1($i366);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i367} true;
    goto $bb339, $bb340;

  $bb340:
    assume !($i367 == 1);
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} vslice_dummy_var_330 := msleep_interruptible(10);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $i369 := rx_get_frame($p0);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $i370 := $zext.i1.i8($i369);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i371 := $trunc.i8.i1($i370);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb343, $bb344;

  $bb344:
    assume !($i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} vslice_dummy_var_331 := msleep_interruptible(10);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $i373 := rx_get_frame($p0);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i374 := $zext.i1.i8($i373);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i375 := $trunc.i8.i1($i374);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i375} true;
    goto $bb347, $bb348;

  $bb348:
    assume !($i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} vslice_dummy_var_332 := msleep_interruptible(10);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $i377 := rx_get_frame($p0);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i378 := $zext.i1.i8($i377);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i379 := $trunc.i8.i1($i378);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i379} true;
    goto $bb351, $bb352;

  $bb352:
    assume !($i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} vslice_dummy_var_333 := msleep_interruptible(10);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $i381 := rx_get_frame($p0);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i382 := $zext.i1.i8($i381);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i383 := $trunc.i8.i1($i382);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb355, $bb356;

  $bb356:
    assume !($i383 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} vslice_dummy_var_334 := msleep_interruptible(10);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $i385 := rx_get_frame($p0);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i386 := $zext.i1.i8($i385);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i387 := $trunc.i8.i1($i386);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  $bb360:
    assume !($i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} vslice_dummy_var_335 := msleep_interruptible(10);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $i389 := rx_get_frame($p0);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $i390 := $zext.i1.i8($i389);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i391 := $trunc.i8.i1($i390);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb363, $bb364;

  $bb364:
    assume !($i391 == 1);
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} vslice_dummy_var_336 := msleep_interruptible(10);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $i393 := rx_get_frame($p0);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i394 := $zext.i1.i8($i393);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i395 := $trunc.i8.i1($i394);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  $bb368:
    assume !($i395 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} vslice_dummy_var_337 := msleep_interruptible(10);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} $i397 := rx_get_frame($p0);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i398 := $zext.i1.i8($i397);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $i399 := $trunc.i8.i1($i398);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb371, $bb372;

  $bb372:
    assume !($i399 == 1);
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} vslice_dummy_var_338 := msleep_interruptible(10);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $i401 := rx_get_frame($p0);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i402 := $zext.i1.i8($i401);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i403 := $trunc.i8.i1($i402);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb375, $bb376;

  $bb376:
    assume !($i403 == 1);
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} vslice_dummy_var_339 := msleep_interruptible(10);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $i405 := rx_get_frame($p0);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i406 := $zext.i1.i8($i405);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i407 := $trunc.i8.i1($i406);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    assume {:branchcond $i407} true;
    goto $bb379, $bb380;

  $bb380:
    assume !($i407 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} vslice_dummy_var_340 := msleep_interruptible(10);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $i409 := rx_get_frame($p0);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i410 := $zext.i1.i8($i409);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $i411 := $trunc.i8.i1($i410);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    assume {:branchcond $i411} true;
    goto $bb383, $bb384;

  $bb384:
    assume !($i411 == 1);
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} vslice_dummy_var_341 := msleep_interruptible(10);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $i413 := rx_get_frame($p0);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i414 := $zext.i1.i8($i413);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i415 := $trunc.i8.i1($i414);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb387, $bb388;

  $bb388:
    assume !($i415 == 1);
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} vslice_dummy_var_342 := msleep_interruptible(10);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} $i417 := rx_get_frame($p0);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i418 := $zext.i1.i8($i417);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i419 := $trunc.i8.i1($i418);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i419} true;
    goto $bb391, $bb392;

  $bb392:
    assume !($i419 == 1);
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} vslice_dummy_var_343 := msleep_interruptible(10);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $i421 := rx_get_frame($p0);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i422 := $zext.i1.i8($i421);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i423 := $trunc.i8.i1($i422);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i423} true;
    goto $bb395, $bb396;

  $bb396:
    assume !($i423 == 1);
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} vslice_dummy_var_344 := msleep_interruptible(10);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} $i425 := rx_get_frame($p0);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i426 := $zext.i1.i8($i425);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i427 := $trunc.i8.i1($i426);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb399, $bb400;

  $bb400:
    assume !($i427 == 1);
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} vslice_dummy_var_345 := msleep_interruptible(10);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $i429 := rx_get_frame($p0);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i430 := $zext.i1.i8($i429);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i431 := $trunc.i8.i1($i430);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i431} true;
    goto $bb403, $bb404;

  $bb404:
    assume !($i431 == 1);
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} vslice_dummy_var_346 := msleep_interruptible(10);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $i433 := rx_get_frame($p0);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i434 := $zext.i1.i8($i433);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i435 := $trunc.i8.i1($i434);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i435} true;
    goto $bb407, $bb408;

  $bb408:
    assume !($i435 == 1);
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} vslice_dummy_var_347 := msleep_interruptible(10);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $i437 := rx_get_frame($p0);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i438 := $zext.i1.i8($i437);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i439 := $trunc.i8.i1($i438);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i439} true;
    goto $bb411, $bb412;

  $bb412:
    assume !($i439 == 1);
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} vslice_dummy_var_348 := msleep_interruptible(10);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} $i441 := rx_get_frame($p0);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i442 := $zext.i1.i8($i441);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i443 := $trunc.i8.i1($i442);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb415, $bb416;

  $bb416:
    assume !($i443 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i26);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i40 := $i26;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} ldv_spin_lock();
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} reset_adapter($p0);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} spin_unlock_irqrestore($p41, $u0);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i42 := $zext.i32.i64($i8);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(16, 1));
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p44, $i42);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, $p4);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i40);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $r := $i47;
    return;

  $bb14:
    assume $i27 == 1;
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5992, 1));
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32(20);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i29, $i30);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i31 == 1);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p1);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5984, 1));
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i64(20);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $i37 := memcmp($p33, $p35, $i36);
    call {:si_unique_call 764} {:cexpr "tmp___0"} boogie_si_record_i32($i37);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $i26;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i32 := $i39;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i40 := $i32;
    goto $bb22;

  $bb19:
    assume $i38 == 1;
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb21;

  $bb16:
    assume $i31 == 1;
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb18;

  $bb415:
    assume {:verifier.code 0} true;
    assume $i443 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i26 := 1;
    goto $bb10;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb411:
    assume {:verifier.code 0} true;
    assume $i439 == 1;
    goto $bb8;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb407:
    assume {:verifier.code 0} true;
    assume $i435 == 1;
    goto $bb8;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb403:
    assume {:verifier.code 0} true;
    assume $i431 == 1;
    goto $bb8;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb399:
    assume {:verifier.code 0} true;
    assume $i427 == 1;
    goto $bb8;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb395:
    assume {:verifier.code 0} true;
    assume $i423 == 1;
    goto $bb8;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb391:
    assume {:verifier.code 0} true;
    assume $i419 == 1;
    goto $bb8;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  $bb387:
    assume {:verifier.code 0} true;
    assume $i415 == 1;
    goto $bb8;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb383:
    assume {:verifier.code 0} true;
    assume $i411 == 1;
    goto $bb8;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb379:
    assume {:verifier.code 0} true;
    assume $i407 == 1;
    goto $bb8;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb375:
    assume {:verifier.code 0} true;
    assume $i403 == 1;
    goto $bb8;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb371:
    assume {:verifier.code 0} true;
    assume $i399 == 1;
    goto $bb8;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb367:
    assume {:verifier.code 0} true;
    assume $i395 == 1;
    goto $bb8;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb363:
    assume {:verifier.code 0} true;
    assume $i391 == 1;
    goto $bb8;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb359:
    assume {:verifier.code 0} true;
    assume $i387 == 1;
    goto $bb8;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb355:
    assume {:verifier.code 0} true;
    assume $i383 == 1;
    goto $bb8;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb351:
    assume {:verifier.code 0} true;
    assume $i379 == 1;
    goto $bb8;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb347:
    assume {:verifier.code 0} true;
    assume $i375 == 1;
    goto $bb8;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb343:
    assume {:verifier.code 0} true;
    assume $i371 == 1;
    goto $bb8;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb339:
    assume {:verifier.code 0} true;
    assume $i367 == 1;
    goto $bb8;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb335:
    assume {:verifier.code 0} true;
    assume $i363 == 1;
    goto $bb8;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb331:
    assume {:verifier.code 0} true;
    assume $i359 == 1;
    goto $bb8;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb327:
    assume {:verifier.code 0} true;
    assume $i355 == 1;
    goto $bb8;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb323:
    assume {:verifier.code 0} true;
    assume $i351 == 1;
    goto $bb8;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb319:
    assume {:verifier.code 0} true;
    assume $i347 == 1;
    goto $bb8;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb315:
    assume {:verifier.code 0} true;
    assume $i343 == 1;
    goto $bb8;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb311:
    assume {:verifier.code 0} true;
    assume $i339 == 1;
    goto $bb8;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb307:
    assume {:verifier.code 0} true;
    assume $i335 == 1;
    goto $bb8;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb303:
    assume {:verifier.code 0} true;
    assume $i331 == 1;
    goto $bb8;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb299:
    assume {:verifier.code 0} true;
    assume $i327 == 1;
    goto $bb8;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb295:
    assume {:verifier.code 0} true;
    assume $i323 == 1;
    goto $bb8;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb291:
    assume {:verifier.code 0} true;
    assume $i319 == 1;
    goto $bb8;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb287:
    assume {:verifier.code 0} true;
    assume $i315 == 1;
    goto $bb8;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb283:
    assume {:verifier.code 0} true;
    assume $i311 == 1;
    goto $bb8;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb279:
    assume {:verifier.code 0} true;
    assume $i307 == 1;
    goto $bb8;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb275:
    assume {:verifier.code 0} true;
    assume $i303 == 1;
    goto $bb8;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb271:
    assume {:verifier.code 0} true;
    assume $i299 == 1;
    goto $bb8;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb267:
    assume {:verifier.code 0} true;
    assume $i295 == 1;
    goto $bb8;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb263:
    assume {:verifier.code 0} true;
    assume $i291 == 1;
    goto $bb8;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb259:
    assume {:verifier.code 0} true;
    assume $i287 == 1;
    goto $bb8;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb255:
    assume {:verifier.code 0} true;
    assume $i283 == 1;
    goto $bb8;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb251:
    assume {:verifier.code 0} true;
    assume $i279 == 1;
    goto $bb8;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb247:
    assume {:verifier.code 0} true;
    assume $i275 == 1;
    goto $bb8;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb243:
    assume {:verifier.code 0} true;
    assume $i271 == 1;
    goto $bb8;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb239:
    assume {:verifier.code 0} true;
    assume $i267 == 1;
    goto $bb8;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb235:
    assume {:verifier.code 0} true;
    assume $i263 == 1;
    goto $bb8;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb231:
    assume {:verifier.code 0} true;
    assume $i259 == 1;
    goto $bb8;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb227:
    assume {:verifier.code 0} true;
    assume $i255 == 1;
    goto $bb8;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb223:
    assume {:verifier.code 0} true;
    assume $i251 == 1;
    goto $bb8;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb219:
    assume {:verifier.code 0} true;
    assume $i247 == 1;
    goto $bb8;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb215:
    assume {:verifier.code 0} true;
    assume $i243 == 1;
    goto $bb8;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb211:
    assume {:verifier.code 0} true;
    assume $i239 == 1;
    goto $bb8;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb207:
    assume {:verifier.code 0} true;
    assume $i235 == 1;
    goto $bb8;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb203:
    assume {:verifier.code 0} true;
    assume $i231 == 1;
    goto $bb8;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb199:
    assume {:verifier.code 0} true;
    assume $i227 == 1;
    goto $bb8;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb195:
    assume {:verifier.code 0} true;
    assume $i223 == 1;
    goto $bb8;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb191:
    assume {:verifier.code 0} true;
    assume $i219 == 1;
    goto $bb8;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb187:
    assume {:verifier.code 0} true;
    assume $i215 == 1;
    goto $bb8;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb183:
    assume {:verifier.code 0} true;
    assume $i211 == 1;
    goto $bb8;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb179:
    assume {:verifier.code 0} true;
    assume $i207 == 1;
    goto $bb8;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb175:
    assume {:verifier.code 0} true;
    assume $i203 == 1;
    goto $bb8;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb171:
    assume {:verifier.code 0} true;
    assume $i199 == 1;
    goto $bb8;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb167:
    assume {:verifier.code 0} true;
    assume $i195 == 1;
    goto $bb8;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb163:
    assume {:verifier.code 0} true;
    assume $i191 == 1;
    goto $bb8;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb159:
    assume {:verifier.code 0} true;
    assume $i187 == 1;
    goto $bb8;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb155:
    assume {:verifier.code 0} true;
    assume $i183 == 1;
    goto $bb8;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb151:
    assume {:verifier.code 0} true;
    assume $i179 == 1;
    goto $bb8;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb147:
    assume {:verifier.code 0} true;
    assume $i175 == 1;
    goto $bb8;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb143:
    assume {:verifier.code 0} true;
    assume $i171 == 1;
    goto $bb8;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb139:
    assume {:verifier.code 0} true;
    assume $i167 == 1;
    goto $bb8;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb135:
    assume {:verifier.code 0} true;
    assume $i163 == 1;
    goto $bb8;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb131:
    assume {:verifier.code 0} true;
    assume $i159 == 1;
    goto $bb8;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb127:
    assume {:verifier.code 0} true;
    assume $i155 == 1;
    goto $bb8;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb123:
    assume {:verifier.code 0} true;
    assume $i151 == 1;
    goto $bb8;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb119:
    assume {:verifier.code 0} true;
    assume $i147 == 1;
    goto $bb8;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb115:
    assume {:verifier.code 0} true;
    assume $i143 == 1;
    goto $bb8;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb111:
    assume {:verifier.code 0} true;
    assume $i139 == 1;
    goto $bb8;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb107:
    assume {:verifier.code 0} true;
    assume $i135 == 1;
    goto $bb8;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i131 == 1;
    goto $bb8;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i127 == 1;
    goto $bb8;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb95:
    assume {:verifier.code 0} true;
    assume $i123 == 1;
    goto $bb8;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i119 == 1;
    goto $bb8;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i115 == 1;
    goto $bb8;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i111 == 1;
    goto $bb8;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i107 == 1;
    goto $bb8;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i103 == 1;
    goto $bb8;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i99 == 1;
    goto $bb8;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb8;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb8;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i87 == 1;
    goto $bb8;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb8;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb8;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb8;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i71 == 1;
    goto $bb8;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb8;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb8;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb8;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb8;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb8;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb8;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const tx_load_dma_buffer: ref;

axiom tx_load_dma_buffer == $sub.ref(0, 393000);

procedure tx_load_dma_buffer($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation tx_load_dma_buffer($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i16;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} {:cexpr "tx_load_dma_buffer:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i3 := $M.2;
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7, $p8, $i9 := $i2, $p1, 0;
    goto $bb7;

  $bb7:
    call $i7, $p8, $i9, $i10, $i11, $i12, $p13, $p14, $i15, $p17, $p18, $i19, $p21, $p22, $i23, $i24, $p25, $p26, $i27, $p28, $i29, $i30, $i31, $i32, $i33, $p34, $i35, $i36, $i37 := tx_load_dma_buffer_loop_$bb7($p0, $i7, $p8, $i9, $i10, $i11, $i12, $p13, $p14, $i15, $p17, $p18, $i19, $p21, $p22, $i23, $i24, $p25, $p26, $i27, $p28, $i29, $i30, $i31, $i32, $i33, $p34, $i35, $i36, $i37);
    goto $bb7_last;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i10 := $ult.i32($i7, 1024);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i11 := 1024;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    call {:si_unique_call 967} {:cexpr "copy_count"} boogie_si_record_i16($i12);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3920, 1));
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i9);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3928, 1));
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i9);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref($i19, 16)), $mul.ref(0, 1));
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i12);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} load_pci_memory($p0, $p22, $p8, $i24);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p14, $mul.ref($i15, 10)), $mul.ref(6, 1));
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, $i12);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p14, $mul.ref($i15, 10)), $mul.ref(8, 1));
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 0);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i64($i12);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p8, $mul.ref($i27, 1));
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i12);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i7, $i29);
    call {:si_unique_call 969} {:cexpr "count"} boogie_si_record_i32($i30);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i32 := $i9;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i9, 1);
    call {:si_unique_call 971} {:cexpr "i"} boogie_si_record_i32($i33);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3916, 1));
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i36 := $ule.i32($i35, $i33);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $i33;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i7, $p8, $i9 := $i30, $p28, $i37;
    goto corral_source_split_5626_dummy;

  $bb15:
    assume $i36 == 1;
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb17;

  $bb11:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3920, 1));
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i32);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p39, $mul.ref($i40, 10)), $mul.ref(8, 1));
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, $sub.i8(0, 127));
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i32, 1);
    call {:si_unique_call 970} {:cexpr "i"} boogie_si_record_i32($i43);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5976, 1));
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i43);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i11 := $i7;
    goto $bb10;

  $bb1:
    assume $i4 == 1;
    call {:si_unique_call 965} {:cexpr "tx_load_dma_buffer:arg:__min1"} boogie_si_record_i32($i2);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i5 := $ult.i32($i2, 1024);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i6 := 1024;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} trace_block($p0, $p1, $i6, 1);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i6 := $i2;
    goto $bb5;

  corral_source_split_5626_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5575;
}



const tx_start: ref;

axiom tx_start == $sub.ref(0, 394032);

procedure tx_start($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.22, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $CurrAddr;



implementation tx_start($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i16;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i8;
  var $i44: i16;
  var $i45: i32;
  var $i46: i32;
  var $i47: i16;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $i53: i16;
  var $p54: ref;
  var $i55: i32;
  var $i56: i64;
  var $p59: ref;
  var $i60: i16;
  var $i61: i32;
  var $i62: i16;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i32;
  var $i67: i8;
  var $p68: ref;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i32;
  var $i73: i8;
  var $p74: ref;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i8;
  var $i79: i64;
  var $p80: ref;
  var $i81: i64;
  var $i82: i64;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i32;
  var $i88: i8;
  var $p89: ref;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i8;
  var $p94: ref;
  var vslice_dummy_var_349: i32;
  var vslice_dummy_var_350: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i1 := $M.2;
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 4);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5998, 1));
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} write_reg($p0, 44, 1);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} write_reg($p0, 44, 2);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5998, 1));
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 1);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6264, 1));
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 0);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(0, 1));
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 1);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i19 == 1);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} tx_load_fifo($p0);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.0, $p84);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i87 := $or.i32($i86, 2);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i8($i87);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p89, $i88);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i32.i8($i92);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} write_reg($p0, 40, $i93);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5999, 1));
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p94, 1);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb9:
    assume $i19 == 1;
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(10, 1));
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 128);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i38 := $M.13;
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i16($i38);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i40, 1);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i42 := $shl.i32($i41, 8);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i43 := $M.12;
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i16($i43);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i42, $i45);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i16($i46);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} write_reg16($p0, 56, $i47);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} write_reg($p0, $sub.i8(0, 80), 0);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} write_reg($p0, $sub.i8(0, 75), 1);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3928, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p50);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} write_reg16($p0, $sub.i8(0, 88), $i53);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5976, 1));
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i56 := $zext.i32.i64($i55);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3928, 1)), $mul.ref($i56, 16)), $mul.ref(8, 1));
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.0, $p59);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i16($i61);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} write_reg16($p0, $sub.i8(0, 86), $i62);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 191);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i66);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p68, $i67);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i72 := $or.i32($i71, 128);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i8($i72);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, $i73);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.0, $p75);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i8($i77);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} write_reg($p0, 41, $i78);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} write_reg($p0, 35, $sub.i8(0, 64));
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} write_reg($p0, $sub.i8(0, 76), 64);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} write_reg($p0, $sub.i8(0, 80), $sub.i8(0, 14));
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} $i79 := msecs_to_jiffies(5000);
    call {:si_unique_call 989} {:cexpr "tmp"} boogie_si_record_i64($i79);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1376, 1));
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.0, jiffies);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i82 := $add.i64($i79, $i81);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} vslice_dummy_var_350 := ldv_mod_timer_54($p80, $i82);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} get_signals($p0);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 32);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i33, 32);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i35);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} set_signals($p0);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6264, 1));
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, 1);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} vslice_dummy_var_349 := printk.ref.ref.i32.ref.i32(.str.19, .str.1, 4208, $p4, $i6);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const msleep_interruptible: ref;

axiom msleep_interruptible == $sub.ref(0, 395064);

procedure msleep_interruptible($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msleep_interruptible($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 991} {:cexpr "msleep_interruptible:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 1} true;
    call {:si_unique_call 992} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 993} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const rx_get_frame: ref;

axiom rx_get_frame == $sub.ref(0, 396096);

procedure rx_get_frame($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed;



implementation rx_get_frame($p0: ref) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i27: i32;
  var $i18: i32;
  var $i29: i32;
  var $i28: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $i32: i1;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i8;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $p63: ref;
  var $i64: i8;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p69: ref;
  var $i70: i64;
  var $p71: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i77: i8;
  var $i78: i16;
  var $p80: ref;
  var $i81: i16;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i32;
  var $i86: i16;
  var $i87: i16;
  var $i88: i1;
  var $i89: i32;
  var $i90: i1;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $p102: ref;
  var $i103: i64;
  var $p104: ref;
  var $i105: i64;
  var $p106: ref;
  var $p107: ref;
  var $i108: i8;
  var $i109: i32;
  var $i110: i1;
  var $i91: i32;
  var $i92: i16;
  var $i93: i32;
  var $i94: i32;
  var $i111: i1;
  var $i112: i32;
  var $i113: i32;
  var $i114: i16;
  var $i115: i16;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i32;
  var $i121: i1;
  var $p123: ref;
  var $i124: i32;
  var $i125: i32;
  var $p127: ref;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $p136: ref;
  var $i137: i32;
  var $i138: i32;
  var $i139: i1;
  var $p141: ref;
  var $i142: i32;
  var $i143: i32;
  var $p145: ref;
  var $p147: ref;
  var $i148: i32;
  var $i149: i32;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p155: ref;
  var $i156: i64;
  var $i157: i64;
  var $p158: ref;
  var $p159: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p165: ref;
  var $i166: i64;
  var $i167: i64;
  var $p168: ref;
  var $p169: ref;
  var $p171: ref;
  var $i172: i32;
  var $i173: i32;
  var $i174: i1;
  var $p175: ref;
  var $p176: ref;
  var $i177: i32;
  var $i179: i32;
  var $i180: i1;
  var $i181: i64;
  var $p184: ref;
  var $p185: ref;
  var $i186: i1;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $i190: i32;
  var $i191: i1;
  var $p193: ref;
  var $i194: i32;
  var $i195: i32;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p202: ref;
  var $i203: i32;
  var $i204: i32;
  var $p206: ref;
  var $i207: i1;
  var $i211: i1;
  var $i212: i32;
  var $i213: i64;
  var $p216: ref;
  var $p217: ref;
  var $i218: i64;
  var $i219: i64;
  var $p220: ref;
  var $i221: i32;
  var $i222: i32;
  var $p223: ref;
  var $i224: i32;
  var $i225: i1;
  var $i226: i32;
  var $i227: i1;
  var $p208: ref;
  var $i209: i32;
  var $i210: i32;
  var $p228: ref;
  var $i229: i32;
  var $i230: i1;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $i30: i8;
  var $i31: i32;
  var $p237: ref;
  var $i238: i8;
  var $i239: i1;
  var $p240: ref;
  var $i241: i8;
  var $i242: i1;
  var $p243: ref;
  var $p244: ref;
  var $i245: i64;
  var $p247: ref;
  var $i248: i8;
  var $i249: i32;
  var $i250: i1;
  var $p251: ref;
  var $i252: i1;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var vslice_dummy_var_351: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3912, 1));
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 994} {:cexpr "EndIndex"} boogie_si_record_i32($i5);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1856, 1));
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i5);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p7, $mul.ref($i8, 10));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1864, 1));
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i5);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p11, $mul.ref($i12, 16));
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref($i8, 10)), $mul.ref(8, 1));
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 255);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $i18 := $i5;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i17 == 1);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $p19, $p20, $i21 := $p13, $p9, $i5;
    goto $bb4;

  $bb4:
    call $p19, $p20, $i21, $i27, $i29, $p22, $p23, $i24, $i25, $i26, $i32, $p34, $i35, $i36, $i37, $p38, $p39, $i40, $i41, $p42, $i43, $i44, $i45, $p46, $i47, $i48, $i49, $i50, $p51, $i52, $i53, $i54, $p55, $i56, $i57, $i58, $p59, $i60, $i61, $i62, $p67, $i68, $p69, $i70, $p71, $p72, $i73, $i74, $i75, $p76, $i77, $i78, $p80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $p96, $i97, $i98, $i99, $i100, $i101, $p102, $i103, $p104, $i105, $p106, $p107, $i108, $i109, $i110, $i91, $i92, $i93, $i94 := rx_get_frame_loop_$bb4($p0, $p4, $p6, $p11, $p19, $p20, $i21, $i27, $i29, $p22, $p23, $i24, $i25, $i26, $i32, $p34, $i35, $i36, $i37, $p38, $p39, $i40, $i41, $p42, $i43, $i44, $i45, $p46, $i47, $i48, $i49, $i50, $p51, $i52, $i53, $i54, $p55, $i56, $i57, $i58, $p59, $i60, $i61, $i62, $p67, $i68, $p69, $i70, $p71, $p72, $i73, $i74, $i75, $p76, $i77, $i78, $p80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $p96, $i97, $i98, $i99, $i100, $i101, $p102, $i103, $p104, $i105, $p106, $p107, $i108, $i109, $i110, $i91, $i92, $i93, $i94);
    goto $bb4_last;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $p22, $p23, $i24, $i25, $i26 := $p19, $p20, $i21, 0, $sub.i8(0, 1);
    goto $bb5;

  $bb5:
    call $i29, $p22, $p23, $i24, $i25, $i26, $i32, $p34, $i35, $i36, $i37, $p38, $p39, $i40, $i41, $p42, $i43, $i44, $i45, $p46, $i47, $i48, $i49, $i50, $p51, $i52, $i53, $i54, $p55, $i56, $i57, $i58, $p59, $i60, $i61, $i62, $p67, $i68, $p69, $i70, $p71, $p72, $i73, $i74, $i75 := rx_get_frame_loop_$bb5($p0, $p6, $p11, $i29, $p22, $p23, $i24, $i25, $i26, $i32, $p34, $i35, $i36, $i37, $p38, $p39, $i40, $i41, $p42, $i43, $i44, $i45, $p46, $i47, $i48, $i49, $i50, $p51, $i52, $i53, $i54, $p55, $i56, $i57, $i58, $p59, $i60, $i61, $i62, $p67, $i68, $p69, $i70, $p71, $p72, $i73, $i74, $i75);
    goto $bb5_last;

  $bb10:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i25, 0);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i41 := $i26;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p23, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.0, $p42);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, $i25);
    call {:si_unique_call 996} {:cexpr "framesize"} boogie_si_record_i32($i45);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p23, $mul.ref(0, 10)), $mul.ref(8, 1));
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i50, $p51, $i52, $i53 := $i24, $p23, $i41, $i45;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i24, 1);
    call {:si_unique_call 998} {:cexpr "EndIndex"} boogie_si_record_i32($i54);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1848, 1));
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, $i54);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := $i54;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3912, 1));
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, $i58);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i62 := $i58;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p6);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $i68 := $zext.i32.i64($i58);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p67, $mul.ref($i68, 10));
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i70 := $zext.i32.i64($i58);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p11, $mul.ref($i70, 16));
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p67, $mul.ref($i68, 10)), $mul.ref(8, 1));
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 255);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i29 := $i58;
    assume true;
    goto $bb8, $bb30;

  $bb30:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $p22, $p23, $i24, $i25, $i26 := $p71, $p69, $i58, $i45, $i41;
    goto $bb30_dummy;

  $bb8:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i28 := $i29;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i30, $i31 := 0, $i28;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5996, 1));
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i238 := $load.i8($M.0, $p237);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i239 := $trunc.i8.i1($i238);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume !($i239 == 1);
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i252 := $trunc.i8.i1($i30);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $r := $i252;
    return;

  $bb91:
    assume $i239 == 1;
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5997, 1));
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i241 := $load.i8($M.0, $p240);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i242 := $trunc.i8.i1($i241);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i242} true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i242 == 1);
    goto $bb93;

  $bb94:
    assume $i242 == 1;
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1856, 1));
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $p244 := $load.ref($M.0, $p243);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i245 := $zext.i32.i64($i31);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p244, $mul.ref($i245, 10)), $mul.ref(8, 1));
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i248 := $load.i8($M.0, $p247);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $i249 := $zext.i8.i32($i248);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i249, 255);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb96:
    assume $i250 == 1;
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} ldv_spin_lock();
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} rx_start($p0);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} spin_unlock_irqrestore($p251, $u0);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb24:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5996, 1));
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i8.i1($i64);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i30, $i31 := 0, $i62;
    goto $bb9;

  $bb26:
    assume $i65 == 1;
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} ldv_spin_lock();
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} rx_start($p0);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} spin_unlock_irqrestore($p66, $u0);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb21:
    assume $i57 == 1;
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb23;

  $bb17:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p51, $mul.ref(0, 10)), $mul.ref(8, 1));
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.0, $p76);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i16($i77);
    call {:si_unique_call 997} {:cexpr "status"} boogie_si_record_i16($i78);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(26, 1));
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i81 := $load.i16($M.0, $p80);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i81);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 0);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i87 := $i78;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i53, 0);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb36;

  $bb36:
    assume !($i88 == 1);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i52);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 255);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i91, $i92, $i93, $i94 := $i21, $i87, $i50, $i53;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i111 := $ule.i32($i94, 1);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $i115 := $i92;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i116 := $zext.i16.i32($i115);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i117 := $and.i32($i116, 108);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    $i172 := $i94;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i173 := $M.2;
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i174 := $sgt.i32($i173, 3);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i179 := $M.2;
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i180 := $sgt.i32($i179, 0);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i188 := $ne.i32($i172, 0);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} rx_free_frame_buffers($p0, $i91, $i93);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $i30, $i31 := 1, $i93;
    goto $bb9;

  $bb68:
    assume $i188 == 1;
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i190 := $load.i32($M.0, $p189);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i191 := $ult.i32($i190, $i172);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i191 == 1);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5984, 1));
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $p199 := $load.ref($M.0, $p198);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5992, 1));
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p200, $i172);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(80, 1));
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.0, $p202);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i204 := $add.i32($i203, 1);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(80, 1));
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p206, $i204);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i207 := $ne.i32($i172, 0);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i207 == 1);
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6300, 1));
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i229 := $load.i32($M.0, $p228);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i230 := $ne.i32($i229, 0);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i230 == 1);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5984, 1));
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $p234 := $load.ref($M.0, $p233);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6256, 1));
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p236 := $load.ref($M.0, $p235);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} ldisc_receive_buf($p3, $p234, $p236, $i172);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb87:
    assume $i230 == 1;
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5984, 1));
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $p232 := $load.ref($M.0, $p231);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} hdlcdev_rx($p0, $p232, $i172);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    goto $bb89;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb73:
    assume $i207 == 1;
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $p208, $i209, $i210 := $p199, $i91, $i172;
    goto $bb76;

  $bb76:
    call $i211, $i212, $i213, $p216, $p217, $i218, $i219, $p220, $i221, $i222, $p223, $i224, $i225, $i226, $i227, $p208, $i209, $i210, cmdloc_dummy_var_21, cmdloc_dummy_var_22, cmdloc_dummy_var_23 := rx_get_frame_loop_$bb76($p0, $i211, $i212, $i213, $p216, $p217, $i218, $i219, $p220, $i221, $i222, $p223, $i224, $i225, $i226, $i227, $p208, $i209, $i210, cmdloc_dummy_var_21, cmdloc_dummy_var_22, cmdloc_dummy_var_23);
    goto $bb76_last;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i211 := $slt.i32($i210, 1024);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i211 == 1);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i212 := 1024;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i213 := $sext.i32.i64($i209);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1864, 1)), $mul.ref($i213, 16)), $mul.ref(0, 1));
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.0, $p216);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i218 := $sext.i32.i64($i212);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 1008} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p208, $p217, $i218, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i219 := $sext.i32.i64($i212);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($p208, $mul.ref($i219, 1));
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i221 := $sub.i32($i210, $i212);
    call {:si_unique_call 1009} {:cexpr "copy_count"} boogie_si_record_i32($i221);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i222 := $add.i32($i209, 1);
    call {:si_unique_call 1010} {:cexpr "index"} boogie_si_record_i32($i222);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1848, 1));
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $i224 := $load.i32($M.0, $p223);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i225 := $eq.i32($i222, $i224);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    $i226 := $i222;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i227 := $ne.i32($i221, 0);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i227 == 1);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb84:
    assume $i227 == 1;
    assume {:verifier.code 0} true;
    $p208, $i209, $i210 := $p220, $i226, $i221;
    goto $bb84_dummy;

  $bb81:
    assume $i225 == 1;
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i226 := 0;
    goto $bb83;

  $bb78:
    assume $i211 == 1;
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i212 := $i210;
    goto $bb80;

  $bb70:
    assume $i191 == 1;
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(64, 1));
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i194 := $load.i32($M.0, $p193);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $i195 := $add.i32($i194, 1);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(64, 1));
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p197, $i195);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb62:
    assume $i180 == 1;
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i181 := $zext.i32.i64($i91);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1864, 1)), $mul.ref($i181, 16)), $mul.ref(0, 1));
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.0, $p184);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i186 := $ult.i32($i172, 1024);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i186 == 1);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i187 := 1024;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} trace_block($p0, $p185, $i187, 0);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb64:
    assume $i186 == 1;
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $i187 := $i172;
    goto $bb66;

  $bb59:
    assume $i174 == 1;
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p175);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i177 := $zext.i16.i32($i115);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} vslice_dummy_var_351 := printk.ref.ref.i32.ref.i32.i32(.str.34, .str.1, 4957, $p176, $i177, $i172);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb47:
    assume $i118 == 1;
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i119 := $zext.i16.i32($i115);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i120 := $and.i32($i119, 64);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i121 == 1);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i128 := $zext.i16.i32($i115);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i129 := $and.i32($i128, 32);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i130 == 1);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i137 := $zext.i16.i32($i115);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $i138 := $and.i32($i137, 8);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i139 == 1);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(76, 1));
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.0, $p147);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $i149 := $add.i32($i148, 1);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(76, 1));
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p151, $i149);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6376, 1));
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p153, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(32, 1));
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i156 := $load.i64($M.0, $p155);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i157 := $add.i64($i156, 1);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6376, 1));
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p159, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(32, 1));
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p161, $i157);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6376, 1));
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.0, $p162);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p163, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(104, 1));
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $i166 := $load.i64($M.0, $p165);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i167 := $add.i64($i166, 1);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6376, 1));
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.0, $p168);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p169, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(104, 1));
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p171, $i167);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $i172 := 0;
    goto $bb58;

  $bb55:
    assume $i139 == 1;
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(72, 1));
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i143 := $add.i32($i142, 1);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(72, 1));
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p145, $i143);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb52:
    assume $i130 == 1;
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(68, 1));
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i134 := $add.i32($i133, 1);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(68, 1));
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p136, $i134);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume $i121 == 1;
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(60, 1));
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $i125 := $add.i32($i124, 1);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(60, 1));
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p127, $i125);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb44:
    assume $i111 == 1;
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i112 := $zext.i16.i32($i92);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i113 := $or.i32($i112, 64);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i16($i113);
    call {:si_unique_call 1005} {:cexpr "status"} boogie_si_record_i16($i114);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i115 := $i114;
    goto $bb46;

  $bb37:
    assume $i90 == 1;
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(24, 1));
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.0, $p96);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i52);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i98, $i99);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i91, $i92, $i93, $i94 := $i21, $i87, $i50, $i53;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb39;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} rx_free_frame_buffers($p0, $i21, $i50);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p4);
    call {:si_unique_call 1004} {:cexpr "EndIndex"} boogie_si_record_i32($i101);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p6);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i103 := $zext.i32.i64($i101);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p102, $mul.ref($i103, 10));
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i105 := $zext.i32.i64($i101);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p11, $mul.ref($i105, 16));
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p102, $mul.ref($i103, 10)), $mul.ref(8, 1));
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.0, $p107);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 255);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i27 := $i101;
    assume true;
    goto $bb6, $bb42;

  $bb42:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    $p19, $p20, $i21 := $p106, $p104, $i101;
    goto $bb42_dummy;

  $bb6:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i18 := $i27;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $i28 := $i18;
    goto $bb7;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb35;

  $bb31:
    assume $i83 == 1;
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i84 := $zext.i16.i32($i78);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i84, 65531);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i16($i85);
    call {:si_unique_call 1002} {:cexpr "status"} boogie_si_record_i16($i86);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i87 := $i86;
    goto $bb33;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(24, 1));
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 255);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb13;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p22, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    call {:si_unique_call 995} {:cexpr "addr_field"} boogie_si_record_i8($i40);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb16;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb2;

  $bb84_dummy:
    assume false;
    return;

  $bb76_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6020;

  $bb30_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb42_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5783;
}



const memcmp: ref;

axiom memcmp == $sub.ref(0, 397128);

procedure memcmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const reset_adapter: ref;

axiom reset_adapter == $sub.ref(0, 398160);

procedure reset_adapter($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.5, $M.7, $M.9;



implementation reset_adapter($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(1, 8));
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(2, 8));
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(3, 8));
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i29 == 1;
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(3, 8));
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} reset_port($p32);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i21 == 1;
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(2, 8));
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} reset_port($p24);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(1, 8));
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} reset_port($p16);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} reset_port($p8);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const rx_free_frame_buffers: ref;

axiom rx_free_frame_buffers == $sub.ref(0, 399192);

procedure rx_free_frame_buffers($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rx_free_frame_buffers($p0: ref, $i1: i32, $i2: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p9: ref;
  var $i10: i1;
  var $i11: i64;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i16;
  var $i18: i8;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i3: i8;
  var $i4: i32;
  var $i25: i32;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} {:cexpr "rx_free_frame_buffers:arg:first"} boogie_si_record_i32($i1);
    call {:si_unique_call 1022} {:cexpr "rx_free_frame_buffers:arg:last"} boogie_si_record_i32($i2);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $i3, $i4 := 0, $i1;
    goto $bb1;

  $bb1:
    call $p5, $p6, $i7, $p9, $i10, $i11, $p14, $i15, $i16, $i17, $i18, $i19, $p20, $i21, $i22, $i23, $i24, $i3, $i4, $i25 := rx_free_frame_buffers_loop_$bb1($p0, $i2, $p5, $p6, $i7, $p9, $i10, $i11, $p14, $i15, $i16, $i17, $i18, $i19, $p20, $i21, $i22, $i23, $i24, $i3, $i4, $i25);
    goto $bb1_last;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1856, 1));
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i4);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref($i7, 10)), $mul.ref(8, 1));
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, $sub.i8(0, 1));
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i4, $i2);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i18 := $i3;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i4, 1);
    call {:si_unique_call 1024} {:cexpr "first"} boogie_si_record_i32($i19);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1848, 1));
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, $i19);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i19;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i18);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $i25 := $i23;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i3, $i4 := $i18, $i23;
    goto $bb10_dummy;

  $bb9:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3912, 1));
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb8;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i4);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1864, 1)), $mul.ref($i11, 16)), $mul.ref(8, 1));
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} write_reg16($p0, $sub.i8(0, 118), $i17);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb5;

  $bb10_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6133;
}



const trace_block: ref;

axiom trace_block == $sub.ref(0, 400224);

procedure trace_block($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;



implementation trace_block($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $i11: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i19: i64;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i24: i32;
  var $i25: i1;
  var $i18: i32;
  var $i26: i32;
  var $i17: i32;
  var $i27: i1;
  var $i30: i32;
  var $i31: i1;
  var $i28: i32;
  var $i32: i1;
  var $i34: i64;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i39: i64;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $i44: i64;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i50: i32;
  var $i51: i1;
  var $i33: i32;
  var $i53: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p12: ref;
  var $i13: i32;
  var vslice_dummy_var_352: i32;
  var vslice_dummy_var_353: i32;
  var vslice_dummy_var_354: i32;
  var vslice_dummy_var_355: i32;
  var vslice_dummy_var_356: i32;
  var vslice_dummy_var_357: i32;
  var vslice_dummy_var_358: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} {:cexpr "trace_block:arg:count"} boogie_si_record_i32($i2);
    call {:si_unique_call 1026} {:cexpr "trace_block:arg:xmit"} boogie_si_record_i32($i3);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} vslice_dummy_var_353 := printk.ref.ref(.str.37, $p9);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i2, 0);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p12, $i13 := $p1, $i2;
    goto $bb7;

  $bb7:
    call $i14, $i15, $i16, $i19, $p20, $i21, $i22, $i24, $i25, $i18, $i26, $i17, $i27, $i30, $i31, $i28, $i32, $i34, $p35, $i36, $i37, $i38, $i39, $p40, $i41, $i42, $i43, $i44, $p45, $i46, $i47, $i50, $i51, $i33, $i53, $p54, $i55, $i56, $p12, $i13, vslice_dummy_var_354, vslice_dummy_var_355, vslice_dummy_var_356, vslice_dummy_var_357, vslice_dummy_var_358 := trace_block_loop_$bb7($i14, $i15, $i16, $i19, $p20, $i21, $i22, $i24, $i25, $i18, $i26, $i17, $i27, $i30, $i31, $i28, $i32, $i34, $p35, $i36, $i37, $i38, $i39, $p40, $i41, $i42, $i43, $i44, $p45, $i46, $i47, $i50, $i51, $i33, $i53, $p54, $i55, $i56, $p12, $i13, vslice_dummy_var_354, vslice_dummy_var_355, vslice_dummy_var_356, vslice_dummy_var_357, vslice_dummy_var_358);
    goto $bb7_last;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i32($i13, 16);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $i13;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32(0, $i15);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i17 := 0;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i27 := $sle.i32($i17, 16);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32(0, $i15);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} vslice_dummy_var_358 := printk.ref(.str.42);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i15);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p12, $mul.ref($i53, 1));
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32($i13, $i15);
    call {:si_unique_call 1037} {:cexpr "count"} boogie_si_record_i32($i55);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i56 == 1);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb42:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $p12, $i13 := $p54, $i55;
    goto $bb42_dummy;

  $bb28:
    assume $i32 == 1;
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb31;

  $bb31:
    call $i34, $p35, $i36, $i37, $i38, $i39, $p40, $i41, $i42, $i43, $i44, $p45, $i46, $i47, $i50, $i51, $i33, vslice_dummy_var_356, vslice_dummy_var_357 := trace_block_loop_$bb31($i15, $i34, $p35, $i36, $i37, $i38, $i39, $p40, $i41, $i42, $i43, $i44, $p45, $i46, $i47, $i50, $i51, $i33, $p12, vslice_dummy_var_356, vslice_dummy_var_357);
    goto $bb31_last;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p12, $mul.ref($i34, 1));
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $i37 := $sext.i8.i32($i36);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i38 := $sgt.i32($i37, 31);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} vslice_dummy_var_356 := printk.ref(.str.41);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i33, 1);
    call {:si_unique_call 1035} {:cexpr "i"} boogie_si_record_i32($i50);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i50, $i15);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i51 == 1);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb39:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i33 := $i50;
    goto $bb39_dummy;

  $bb33:
    assume $i38 == 1;
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i33);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p12, $mul.ref($i39, 1));
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $i42 := $sext.i8.i32($i41);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 127);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb35;

  $bb36:
    assume $i43 == 1;
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i33);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p12, $mul.ref($i44, 1));
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i47 := $sext.i8.i32($i46);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} vslice_dummy_var_357 := printk.ref.i32(.str.40, $i47);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb20:
    assume $i27 == 1;
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i28 := $i17;
    goto $bb23;

  $bb23:
    call $i30, $i31, $i28, vslice_dummy_var_355 := trace_block_loop_$bb23($i30, $i31, $i28, vslice_dummy_var_355);
    goto $bb23_last;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} vslice_dummy_var_355 := printk.ref(.str.39);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i28, 1);
    call {:si_unique_call 1032} {:cexpr "i"} boogie_si_record_i32($i30);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i31 := $sle.i32($i30, 16);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i31 == 1);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb25:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i28 := $i30;
    goto $bb25_dummy;

  $bb12:
    assume $i16 == 1;
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb15;

  $bb15:
    call $i19, $p20, $i21, $i22, $i24, $i25, $i18, $i26, vslice_dummy_var_354 := trace_block_loop_$bb15($i15, $i19, $p20, $i21, $i22, $i24, $i25, $i18, $i26, $p12, vslice_dummy_var_354);
    goto $bb15_last;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p12, $mul.ref($i19, 1));
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} vslice_dummy_var_354 := printk.ref.i32(.str.38, $i22);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i18, 1);
    call {:si_unique_call 1030} {:cexpr "i"} boogie_si_record_i32($i24);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, $i15);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $i26 := $i24;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i17 := $i26;
    goto $bb14;

  $bb17:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i18 := $i24;
    goto $bb17_dummy;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i15 := 16;
    goto $bb11;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} vslice_dummy_var_352 := printk.ref.ref(.str.36, $p6);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb39_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6220;

  $bb25_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6208;

  $bb17_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6192;

  $bb42_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6181;
}



const hdlcdev_rx: ref;

axiom hdlcdev_rx == $sub.ref(0, 401256);

procedure hdlcdev_rx($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation hdlcdev_rx($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i16;
  var $p25: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p31: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $p38: ref;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var vslice_dummy_var_359: i32;
  var vslice_dummy_var_360: i32;
  var vslice_dummy_var_361: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} {:cexpr "hdlcdev_rx:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $p3 := dev_alloc_skb($i2);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6376, 1));
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i6 := $M.2;
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 2);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p3);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $p22 := skb_put($p3, $i2);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i2);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.0;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 1043} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p22, $p1, $i23, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $i24 := hdlc_type_trans($p3, $p5);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 232)), $mul.ref(192, 1));
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, $i24);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 1);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p31, $i29);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(16, 1));
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i2);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i34, $i35);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(16, 1));
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p38, $i36);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} vslice_dummy_var_361 := netif_rx($p3);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} vslice_dummy_var_360 := printk.ref.ref(.str.44, $p14);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 1);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p21, $i19);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} vslice_dummy_var_359 := printk.ref.ref(.str.43, $p9);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_358:
    assume !assertsPassed;
    return;
}



const ldisc_receive_buf: ref;

axiom ldisc_receive_buf == $sub.ref(0, 402288);

procedure ldisc_receive_buf($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation ldisc_receive_buf($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} {:cexpr "ldisc_receive_buf:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $p6 := tty_ldisc_ref($p0);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 168)), $mul.ref(112, 1));
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} tty_ldisc_deref($p6);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 168)), $mul.ref(112, 1));
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    call {:si_unique_call 1048} devirtbounce.1($p18, $p0, $p1, $p2, $i3);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tty_ldisc_ref: ref;

axiom tty_ldisc_ref == $sub.ref(0, 403320);

procedure tty_ldisc_ref($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tty_ldisc_ref($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $p1 := external_alloc();
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const tty_ldisc_deref: ref;

axiom tty_ldisc_deref == $sub.ref(0, 404352);

procedure tty_ldisc_deref($p0: ref);
  free requires assertsPassed;



implementation tty_ldisc_deref($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 405384);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1051} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 1052} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const dev_alloc_skb: ref;

axiom dev_alloc_skb == $sub.ref(0, 406416);

procedure dev_alloc_skb($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation dev_alloc_skb($i0: i32) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} {:cexpr "dev_alloc_skb:arg:length"} boogie_si_record_i32($i0);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $p1 := netdev_alloc_skb($0.ref, $i0);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;
}



const skb_put: ref;

axiom skb_put == $sub.ref(0, 407448);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_put($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $p2 := external_alloc();
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const hdlc_type_trans: ref;

axiom hdlc_type_trans == $sub.ref(0, 408480);

procedure hdlc_type_trans($p0: ref, $p1: ref) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation hdlc_type_trans($p0: ref, $p1: ref) returns ($r: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i16;
  var $i15: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} $p2 := dev_to_hdlc($p1);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p1);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} skb_reset_mac_header($p0);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $i15 := 6400;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 1059} $i14 := devirtbounce.2($p13, $p0, $p1);
    call {:si_unique_call 1060} {:cexpr "tmp___0"} boogie_si_record_i16($i14);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb3;
}



const netif_rx: ref;

axiom netif_rx == $sub.ref(0, 409512);

procedure netif_rx($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netif_rx($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1061} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1062} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const skb_reset_mac_header: ref;

axiom skb_reset_mac_header == $sub.ref(0, 410544);

procedure skb_reset_mac_header($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_reset_mac_header($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i16;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i16;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i16($i3);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i16($i8);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i5, $i10);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(198, 1));
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $i12);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    return;
}



const netdev_alloc_skb: ref;

axiom netdev_alloc_skb == $sub.ref(0, 411576);

procedure netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} {:cexpr "netdev_alloc_skb:arg:length"} boogie_si_record_i32($i1);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $p2 := ldv___netdev_alloc_skb_36($p0, $i1, 32);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;
}



const ldv___netdev_alloc_skb_36: ref;

axiom ldv___netdev_alloc_skb_36 == $sub.ref(0, 412608);

procedure ldv___netdev_alloc_skb_36($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv___netdev_alloc_skb_36($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} {:cexpr "ldv___netdev_alloc_skb_36:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    call {:si_unique_call 1066} {:cexpr "ldv___netdev_alloc_skb_36:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} ldv_check_alloc_flags($i2);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} $p3 := ldv_undef_ptr();
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;
}



const ldv_mod_timer_54: ref;

axiom ldv_mod_timer_54 == $sub.ref(0, 413640);

procedure ldv_mod_timer_54($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9;



implementation ldv_mod_timer_54($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} {:cexpr "ldv_mod_timer_54:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 1071} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} activate_pending_timer_3($p0, $i1, 1);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const tx_load_fifo: ref;

axiom tx_load_fifo == $sub.ref(0, 414672);

procedure tx_load_fifo($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.22, $CurrAddr;



implementation tx_load_fifo($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i8;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $i50: i8;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $i64: i16;
  var $i65: i32;
  var $i66: i16;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $i82: i8;
  var $i83: i32;
  var $i84: i8;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $p95: ref;
  var $i96: i8;
  var $i97: i32;
  var $i98: i8;
  var $p99: ref;
  var $i100: i32;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $i107: i32;
  var $i108: i32;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $i112: i32;
  var $p113: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i32;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $i122: i8;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call $p11, $i12, $i13, $p14, $i15, $i16, $p17, $i18, $p19, $i20, $i21, $p22, $p23, $p24, $i25, $p26, $i27, $p28, $p29, $i30, $p31, $i32, $i33, $p34, $i35, $p36, $i37, $i38, $p39, $p40, $i41, $p42, $i43, $i44, $p45, $p46, $p47, $i48, $p49, $i50, $p51, $p52, $i53, $p54, $i55, $i56, $p57, $i58, $p59, $i60, $i61, $p62, $p63, $i64, $i65, $i66, $p67, $i68, $i69, $p70, $p72, $i73, $i74, $p76, $p77, $i78, $i79, $p80, $i81, $i82, $i83, $i84, $p85, $p86, $i87, $p88, $i89, $i90, $p91, $p92, $p93, $i94, $p95, $i96, $i97, $i98, $p99, $i100, $p101, $i102, $i103, $p104, $i105, $p106, $i107, $i108, $p109, $p110, $i111, $i112, $p113, $p115, $i116, $i117, $p119, $i120, $i121, $i122, $i123, $i124, $i125 := tx_load_fifo_loop_$bb11($p0, $p1, $p8, $p11, $i12, $i13, $p14, $i15, $i16, $p17, $i18, $p19, $i20, $i21, $p22, $p23, $p24, $i25, $p26, $i27, $p28, $p29, $i30, $p31, $i32, $i33, $p34, $i35, $p36, $i37, $i38, $p39, $p40, $i41, $p42, $i43, $i44, $p45, $p46, $p47, $i48, $p49, $i50, $p51, $p52, $i53, $p54, $i55, $i56, $p57, $i58, $p59, $i60, $i61, $p62, $p63, $i64, $i65, $i66, $p67, $i68, $i69, $p70, $p72, $i73, $i74, $p76, $p77, $i78, $i79, $p80, $i81, $i82, $i83, $i84, $p85, $p86, $i87, $p88, $i89, $i90, $p91, $p92, $p93, $i94, $p95, $i96, $i97, $i98, $p99, $i100, $p101, $i102, $i103, $p104, $i105, $p106, $i107, $i108, $p109, $p110, $i111, $i112, $p113, $p115, $i116, $i117, $p119, $i120, $i121, $i122, $i123, $i124, $i125);
    goto $bb11_last;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i32($i122);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $i124 := $and.i32($i123, 2);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i125 == 1);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb33:
    assume $i125 == 1;
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i12, 1);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1160, 1));
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i79 == 1);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    call {:si_unique_call 1080} {:cexpr "tmp___1"} boogie_si_record_i32($i87);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i89, 1);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p91, $i90);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1176, 1));
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $i94 := $sext.i32.i64($i87);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p93, $mul.ref($i94, 1));
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.0, $p95);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i8($i97);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} write_reg($p0, 32, $i98);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $i103 := $uge.i32($i100, $i102);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i112 := $sub.i32($i111, 1);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, $i112);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(16, 1));
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p115);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i117 := $add.i32($i116, 1);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(16, 1));
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p119, $i117);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p8);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i121 == 1);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i121 == 1;
    goto $bb31_dummy;

  $bb28:
    assume $i103 == 1;
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i108 := $sub.i32($i105, $i107);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p109, $i108);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i79 == 1;
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1160, 1));
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i8($i81);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i8($i83);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} write_reg($p0, 32, $i84);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1160, 1));
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, 0);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb13:
    assume $i13 == 1;
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1160, 1));
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb16:
    assume $i16 == 1;
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    call {:si_unique_call 1076} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 1);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1176, 1));
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i18);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p24, $mul.ref($i25, 1));
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p28, $i27);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $i33 := $uge.i32($i30, $i32);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    call {:si_unique_call 1077} {:cexpr "tmp___0"} boogie_si_record_i32($i41);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 1);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1176, 1));
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i41);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p47, $mul.ref($i48, 1));
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p51, $i50);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $i56 := $uge.i32($i53, $i55);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p1);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $i64 := $load.i16($M.22, $p63);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} write_reg16($p0, 32, $i66);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i68, $sub.i32(0, 2));
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, $i69);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(16, 1));
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i73, 2);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(16, 1));
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p76, $i74);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i56 == 1;
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32($i58, $i60);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i61);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i33 == 1;
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32($i35, $i37);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1160, 1));
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb31_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $i122 := read_reg($p0, 34);
    call {:si_unique_call 1075} {:cexpr "tmp___2"} boogie_si_record_i8($i122);
    goto corral_source_split_6411;
}



const load_pci_memory: ref;

axiom load_pci_memory == $sub.ref(0, 415704);

procedure load_pci_memory($p0: ref, $p1: ref, $p2: ref, $i3: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation load_pci_memory($p0: ref, $p1: ref, $p2: ref, $i3: i16)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i1;
  var $i15: i32;
  var $i16: i64;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $p29: ref;
  var $p30: ref;
  var $p10: ref;
  var $p11: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i64;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var vslice_dummy_var_362: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} {:cexpr "load_pci_memory:arg:count"} boogie_si_record_i16($i3);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $i5 := $M.23;
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $i6 := $udiv.i32($i4, $i5);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    call {:si_unique_call 1083} {:cexpr "interval"} boogie_si_record_i16($i7);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32(0, $i8);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $p10, $p11 := $p2, $p1;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i3);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i32 := $M.23;
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i33 := $urem.i32($i31, $i32);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i33);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.0;
    cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 1087} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p11, $p10, $i34, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_32;
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $i12, $p13, $p14 := 0, $p1, $p2;
    goto $bb4;

  $bb4:
    call $i15, $i16, $i18, $i19, $p20, $i21, $i22, $p23, $i24, $i25, $i26, $i27, $i28, $i12, $p13, $p14, $p29, $p30, cmdloc_dummy_var_27, cmdloc_dummy_var_28, cmdloc_dummy_var_29, vslice_dummy_var_362 := load_pci_memory_loop_$bb4($p0, $i8, $i15, $i16, $i18, $i19, $p20, $i21, $i22, $p23, $i24, $i25, $i26, $i27, $i28, $i12, $p13, $p14, $p29, $p30, cmdloc_dummy_var_27, cmdloc_dummy_var_28, cmdloc_dummy_var_29, vslice_dummy_var_362);
    goto $bb4_last;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $M.23;
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 1084} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p13, $p14, $i16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_29;
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} vslice_dummy_var_362 := read_status_reg($p0);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $i18 := $M.23;
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p13, $mul.ref($i19, 1));
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i21 := $M.23;
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p14, $mul.ref($i22, 1));
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i12);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 1);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    call {:si_unique_call 1086} {:cexpr "i"} boogie_si_record_i16($i26);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, $i8);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $p29, $p30 := $p23, $p20;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $p10, $p11 := $p29, $p30;
    goto $bb3;

  $bb6:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i12, $p13, $p14 := $i26, $p20, $p23;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6574;
}



const sca_init: ref;

axiom sca_init == $sub.ref(0, 416736);

procedure sca_init($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0;



implementation sca_init($p0: ref) returns ($r: i1)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} write_reg($p0, 2, 0);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} write_reg($p0, 3, 0);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} write_reg($p0, 4, 0);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} write_reg($p0, 5, 0);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} write_reg($p0, 6, 0);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i1 := $M.24;
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i2);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} write_reg($p0, 8, $i3);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} write_reg($p0, 9, $sub.i8(0, 128));
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} write_reg($p0, 20, $sub.i8(0, 1));
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} write_reg($p0, 21, $sub.i8(0, 1));
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} write_reg($p0, 22, $sub.i8(0, 16));
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} write_reg($p0, 24, 0);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 417768);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1100} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 1102} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const reg_check_1: ref;

axiom reg_check_1 == $sub.ref(0, 418800);

procedure reg_check_1($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation reg_check_1($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, $p2i.ref.i64(synclinkmp_interrupt));
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const activate_suitable_irq_1: ref;

axiom activate_suitable_irq_1 == $sub.ref(0, 419832);

procedure activate_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.26, $M.27, $M.25, $M.29, $M.30, $M.28, $M.32, $M.33, $M.31, $M.35, $M.36, $M.34;



implementation activate_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} {:cexpr "activate_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $i2 := $M.25;
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.28;
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.31;
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.34;
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $M.35 := $i0;
    call {:si_unique_call 1110} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32($i0);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $M.36 := $p1;
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1111} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $M.32 := $i0;
    call {:si_unique_call 1108} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32($i0);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $M.33 := $p1;
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 1109} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $M.29 := $i0;
    call {:si_unique_call 1106} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32($i0);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $M.30 := $p1;
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1107} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $M.26 := $i0;
    call {:si_unique_call 1104} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32($i0);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $M.27 := $p1;
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 1105} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 420864);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1112} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1113} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1114} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1115} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 421896);

procedure spin_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} ldv_spin_lock();
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} ldv_spin_lock_5($p0);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    return;
}



const read_reg16: ref;

axiom read_reg16 == $sub.ref(0, 422928);

procedure read_reg16($p0: ref, $i1: i8) returns ($r: i16);
  free requires assertsPassed;



implementation read_reg16($p0: ref, $i1: i8) returns ($r: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p19: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} {:cexpr "read_reg16:arg:Addr"} boogie_si_record_i8($i1);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6184, 1));
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i64($i1);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 1));
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6044, 1));
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 1);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p11 := $p5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6044, 1));
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 1);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $p26 := $p11;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i16 := $sext.i8.i32($i1);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i1);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i32($i20, 31);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p25 := $p11;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p19 := $p25;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $p26 := $p19;
    goto $bb15;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i1);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i23 := $ule.i32($i22, 95);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb11;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p11, $mul.ref(32, 1));
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $p25 := $p24;
    goto $bb14;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p11, $mul.ref(64, 1));
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $p19 := $p18;
    goto $bb8;

  $bb1:
    assume $i8 == 1;
    $i9 := $add.i64($i4, 256);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p3, $mul.ref($i9, 1));
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $p11 := $p10;
    goto $bb3;
}



const isr_rxrdy: ref;

axiom isr_rxrdy == $sub.ref(0, 423960);

procedure isr_rxrdy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.45, $M.46, $CurrAddr;



implementation isr_rxrdy($p0: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i7: i8;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i13: i8;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i8;
  var $i53: i16;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i16;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i66: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i74: i8;
  var $i75: i32;
  var $i76: i8;
  var $p77: ref;
  var $i78: i32;
  var $i79: i8;
  var $i80: i8;
  var $i81: i32;
  var $i82: i8;
  var $i84: i1;
  var $p85: ref;
  var $i12: i16;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $p93: ref;
  var $i94: i32;
  var $p95: ref;
  var $i96: i32;
  var $p97: ref;
  var $i98: i32;
  var $p99: ref;
  var $i100: i32;
  var $p102: ref;
  var vslice_dummy_var_363: i32;
  var vslice_dummy_var_364: i32;
  var vslice_dummy_var_365: i32;
  var vslice_dummy_var_366: i32;
  var vslice_dummy_var_367: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $i2 := $M.2;
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 4);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} $i7 := read_reg($p0, 60);
    call {:si_unique_call 1121} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i16($i7);
    call {:si_unique_call 1122} {:cexpr "status"} boogie_si_record_i16($i8);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i87 := $M.2;
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i88 := $sgt.i32($i87, 4);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1));
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} tty_flip_buffer_push($p102);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    return;

  $bb40:
    assume $i88 == 1;
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    $p91 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(20, 1));
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    $p93 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(36, 1));
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    $p95 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(28, 1));
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    $p97 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(24, 1));
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    $p99 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(32, 1));
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} vslice_dummy_var_367 := printk.ref.ref.i32.ref.i32.i32.i32.i32.i32(.str.8, .str.1, 2223, $p90, $i92, $i94, $i96, $i98, $i100);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i12 := $i8;
    goto $bb7;

  $bb7:
    call $i13, $p14, $i15, $i16, $p17, $i18, $i19, $i20, $p21, $p22, $i23, $i25, $i26, $i27, $p28, $i29, $i30, $p31, $i32, $i33, $i34, $p35, $i36, $i37, $p38, $i39, $i40, $i41, $p42, $i43, $i44, $p45, $i46, $p47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $p57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i67, $i68, $i69, $i70, $i66, $i71, $i72, $i73, $i74, $i75, $i76, $p77, $i78, $i79, $i80, $i81, $i82, $i84, $p85, $i12, vslice_dummy_var_364, vslice_dummy_var_365, vslice_dummy_var_366 := isr_rxrdy_loop_$bb7($p0, $i13, $p14, $i15, $i16, $p17, $i18, $i19, $i20, $p21, $p22, $i23, $i25, $i26, $i27, $p28, $i29, $i30, $p31, $i32, $i33, $i34, $p35, $i36, $i37, $p38, $i39, $i40, $i41, $p42, $i43, $i44, $p45, $i46, $p47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $p57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i67, $i68, $i69, $i70, $i66, $i71, $i72, $i73, $i74, $i75, $i76, $p77, $i78, $i79, $i80, $i81, $i82, $i84, $p85, $i12, vslice_dummy_var_364, vslice_dummy_var_365, vslice_dummy_var_366);
    goto $bb7_last;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} $i13 := read_reg($p0, 32);
    call {:si_unique_call 1124} {:cexpr "DataByte"} boogie_si_record_i8($i13);
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(20, 1));
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 1);
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(20, 1));
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i12);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 56);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i75, $i76 := 0, 0;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1));
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i13);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i8($i78);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i32.i8($i75);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i81 := $sext.i8.i32($i80);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i8($i81);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} vslice_dummy_var_365 := tty_insert_flip_char($p77, $i79, $i82);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i8.i1($i76);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} $i52 := read_reg($p0, 60);
    call {:si_unique_call 1127} {:cexpr "tmp"} boogie_si_record_i8($i52);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i16($i52);
    call {:si_unique_call 1128} {:cexpr "status"} boogie_si_record_i16($i53);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 1);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i56 == 1);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb23:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i12 := $i53;
    goto $bb23_dummy;

  $bb36:
    assume $i84 == 1;
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1));
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} vslice_dummy_var_366 := tty_insert_flip_char($p85, 0, 4);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb9:
    assume $i20 == 1;
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i12);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} vslice_dummy_var_364 := printk.ref.ref.i32.ref.i32(.str.7, .str.1, 2187, $p22, $i23);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i12);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 32);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i12);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 16);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i12);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 8);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i12);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1169, 1));
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i46, $i49);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1166, 1));
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.0, $p57);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $i60 := $zext.i16.i32($i12);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i59, $i60);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i16($i61);
    call {:si_unique_call 1129} {:cexpr "status"} boogie_si_record_i16($i62);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, 32);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i65 == 1);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i62);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 16);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := 0;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i66 := $i70;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i62);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i71, 8);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := 0;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i75, $i76 := $i66, $i74;
    goto $bb35;

  $bb32:
    assume $i73 == 1;
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i74 := 1;
    goto $bb34;

  $bb29:
    assume $i69 == 1;
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $i70 := 2;
    goto $bb31;

  $bb26:
    assume $i65 == 1;
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $i66 := 3;
    goto $bb28;

  $bb20:
    assume $i51 == 1;
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i41 == 1;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(32, 1));
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 1);
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(32, 1));
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i34 == 1;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(24, 1));
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 1);
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(24, 1));
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i37);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i27 == 1;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(28, 1));
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 1);
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(28, 1));
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} vslice_dummy_var_363 := printk.ref.ref.i32.ref(.str.6, .str.1, 2175, $p5);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6727;
}



const isr_txrdy: ref;

axiom isr_txrdy == $sub.ref(0, 424992);

procedure isr_txrdy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.22, $M.3, $M.5, $M.7, $M.9, $CurrAddr;



implementation isr_txrdy($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i8;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i8;
  var $i31: i16;
  var $i32: i32;
  var $i33: i32;
  var $i34: i16;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i8;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i8;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $p74: ref;
  var vslice_dummy_var_368: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $i1 := $M.2;
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 4);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(0, 1));
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 1);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i56 == 1);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5999, 1));
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, 0);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 253);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i61);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, $i62);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i66);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} write_reg($p0, 40, $i67);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $i70 := $sle.i32($i69, 255);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i70 == 1;
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1796, 1));
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i73 := $or.i32($i72, 2);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1796, 1));
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, $i73);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i56 == 1;
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} tx_load_fifo($p0);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb8:
    assume $i39 == 1;
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p43, $mul.ref(1356, 1));
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i47 == 1);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 1816)), $mul.ref(1368, 1));
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb10;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} tx_stop($p0);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb12;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 253);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, $i16);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i20, 64);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i22);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i16($i25);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $i28 := $shl.i32($i27, 8);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i16($i30);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i28, $i32);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} write_reg16($p0, 40, $i34);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} vslice_dummy_var_368 := printk.ref.ref.i32.ref.i32(.str.9, .str.1, 2323, $p4, $i6);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isr_rxint: ref;

axiom isr_rxint == $sub.ref(0, 426024);

procedure isr_rxint($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.45, $M.46, $M.22, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $CurrAddr;



implementation isr_rxint($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i5: i8;
  var $i6: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $i13: i8;
  var $i14: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i60: i64;
  var $i61: i1;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $i66: i1;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i93: i8;
  var $i94: i16;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i16;
  var $i99: i32;
  var $i100: i16;
  var vslice_dummy_var_369: i32;
  var vslice_dummy_var_370: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} $i5 := read_reg($p0, 35);
    call {:si_unique_call 1140} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i6, $i9);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 23);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    call {:si_unique_call 1141} {:cexpr "status"} boogie_si_record_i8($i12);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} $i13 := read_reg($p0, 36);
    call {:si_unique_call 1143} {:cexpr "tmp___0"} boogie_si_record_i8($i13);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6006, 1));
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i14, $i17);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 8);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    call {:si_unique_call 1144} {:cexpr "status2"} boogie_si_record_i8($i20);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i12);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i20);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i29 := $M.2;
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i30 := $sgt.i32($i29, 4);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(0, 1));
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 1);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i39 == 1);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i12);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 17);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i12);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, 4);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    return;

  $bb37:
    assume $i91 == 1;
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} get_signals($p0);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.0, $p92);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i16($i93);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $i95 := $sext.i16.i32($i94);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i96 := $and.i32($i95, 1);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i97 := $or.i32($i96, 256);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i16($i97);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i99 := $zext.i16.i32($i98);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i16($i99);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} isr_io_pin($p0, $i100);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb28:
    assume $i69 == 1;
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i12);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i70, 16);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i72 == 1);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i12);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 1);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1288, 1));
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} __wake_up($p88, 1, 1, $0.ref);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i81 == 1;
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(88, 1));
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i84, 1);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(88, 1));
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, $i85);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i72 == 1;
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(84, 1));
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i75, 1);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(84, 1));
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i76);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb10:
    assume $i39 == 1;
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i12);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 2);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb12:
    assume $i42 == 1;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(36, 1));
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, 1);
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(36, 1));
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i45);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1168, 1));
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i12);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i49, $i50);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb14:
    assume $i52 == 1;
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1164, 1));
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.0, $p53);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i55, 2);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb16:
    assume $i57 == 1;
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1));
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} vslice_dummy_var_370 := tty_insert_flip_char($p58, 0, 1);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p3);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb18:
    assume $i61 == 1;
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.0, $p63);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $i65 := $and.i64($i64, 4);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb20;

  $bb21:
    assume $i66 == 1;
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} do_SAK($p3);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i12);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i20);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} vslice_dummy_var_369 := printk.ref.ref.i32.ref.i32.i32(.str.11, .str.1, 2126, $p32, $i33, $i34);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i20);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} write_reg($p0, 36, $i28);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i12);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} write_reg($p0, 35, $i24);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isr_txint: ref;

axiom isr_txint == $sub.ref(0, 427056);

procedure isr_txint($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.5, $M.7, $M.9, $M.22, $M.4, $M.6, $M.8, $M.10, $CurrAddr;



implementation isr_txint($p0: ref)
{
  var $i1: i8;
  var $i2: i32;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i16;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i16;
  var $i32: i32;
  var $i33: i16;
  var vslice_dummy_var_371: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $i1 := read_reg($p0, 35);
    call {:si_unique_call 1154} {:cexpr "tmp"} boogie_si_record_i8($i1);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i2, $i5);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 200);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    call {:si_unique_call 1155} {:cexpr "status"} boogie_si_record_i8($i8);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} write_reg($p0, 35, $i10);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $i11 := $M.2;
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, 4);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i8);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 192);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i8);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 8);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} get_signals($p0);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i16($i26);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $i28 := $sext.i16.i32($i27);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 16);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i29, 4096);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16($i32);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} isr_io_pin($p0, $i33);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i8);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} isr_txeom($p0, $i21);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i8);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} vslice_dummy_var_371 := printk.ref.ref.i32.ref.i32(.str.20, .str.1, 2300, $p14, $i15);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isr_rxdmaerror: ref;

axiom isr_rxdmaerror == $sub.ref(0, 428088);

procedure isr_rxdmaerror($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation isr_rxdmaerror($p0: ref)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var vslice_dummy_var_372: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} $i1 := read_reg($p0, $sub.i8(0, 112));
    call {:si_unique_call 1162} {:cexpr "tmp"} boogie_si_record_i8($i1);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 48);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    call {:si_unique_call 1163} {:cexpr "status"} boogie_si_record_i8($i4);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 1);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} write_reg($p0, $sub.i8(0, 112), $i7);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $i8 := $M.2;
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 4);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5997, 1));
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 1);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1796, 1));
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i16, 1);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1796, 1));
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i4);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} vslice_dummy_var_372 := printk.ref.ref.i32.ref.i32(.str.22, .str.1, 2379, $p11, $i12);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isr_rxdmaok: ref;

axiom isr_rxdmaok == $sub.ref(0, 429120);

procedure isr_rxdmaok($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation isr_rxdmaok($p0: ref)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var vslice_dummy_var_373: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} $i1 := read_reg($p0, $sub.i8(0, 112));
    call {:si_unique_call 1167} {:cexpr "tmp"} boogie_si_record_i8($i1);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 192);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    call {:si_unique_call 1168} {:cexpr "status"} boogie_si_record_i8($i4);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 1);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} write_reg($p0, $sub.i8(0, 112), $i7);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $i8 := $M.2;
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 4);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1796, 1));
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 1);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1796, 1));
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i4);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} vslice_dummy_var_373 := printk.ref.ref.i32.ref.i32(.str.23, .str.1, 2362, $p11, $i12);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isr_txdmaerror: ref;

axiom isr_txdmaerror == $sub.ref(0, 430152);

procedure isr_txdmaerror($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation isr_txdmaerror($p0: ref)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var vslice_dummy_var_374: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $i1 := read_reg($p0, $sub.i8(0, 80));
    call {:si_unique_call 1172} {:cexpr "tmp"} boogie_si_record_i8($i1);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 48);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    call {:si_unique_call 1173} {:cexpr "status"} boogie_si_record_i8($i4);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 1);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} write_reg($p0, $sub.i8(0, 80), $i7);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $i8 := $M.2;
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 4);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i4);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} vslice_dummy_var_374 := printk.ref.ref.i32.ref.i32(.str.24, .str.1, 2415, $p11, $i12);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isr_txdmaok: ref;

axiom isr_txdmaok == $sub.ref(0, 431184);

procedure isr_txdmaok($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation isr_txdmaok($p0: ref)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i8;
  var vslice_dummy_var_375: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} $i1 := read_reg($p0, 35);
    call {:si_unique_call 1177} {:cexpr "tmp"} boogie_si_record_i8($i1);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} write_reg($p0, $sub.i8(0, 76), 0);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} write_reg($p0, $sub.i8(0, 80), $sub.i8(0, 64));
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} write_reg($p0, $sub.i8(0, 75), 1);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i2 := $M.2;
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 4);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} write_reg16($p0, 56, 0);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 2);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i12);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} write_reg($p0, 40, $i17);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i1);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} vslice_dummy_var_375 := printk.ref.ref.i32.ref.i32(.str.25, .str.1, 2395, $p5, $i6);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isr_timer: ref;

axiom isr_timer == $sub.ref(0, 432216);

procedure isr_timer($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation isr_timer($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var vslice_dummy_var_376: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6044, 1));
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i5 := (if $i4 == 1 then 16 else 0);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    call {:si_unique_call 1184} {:cexpr "timer"} boogie_si_record_i8($i6);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} write_reg($p0, 22, 0);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 100);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} write_reg($p0, $i9, 0);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6153, 1));
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 1);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $i11 := $M.2;
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, 4);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} vslice_dummy_var_376 := printk.ref.ref.i32.ref(.str.26, .str.1, 2107, $p14);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 433248);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.38, $M.37, $M.39, $M.41, $M.43;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, system_wq);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} $i2 := queue_work($p1, $p0);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1189} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 434280);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} ldv_spin_unlock();
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} ldv_spin_unlock_9($p0);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_9: ref;

axiom ldv_spin_unlock_9 == $sub.ref(0, 435312);

procedure ldv_spin_unlock_9($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_9($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} _raw_spin_unlock($p2);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 436344);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 437376);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.38, $M.37, $M.39, $M.41, $M.43;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} $i2 := ldv_queue_work_on_15(8192, $p0, $p1);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1194} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_queue_work_on_15: ref;

axiom ldv_queue_work_on_15 == $sub.ref(0, 438408);

procedure ldv_queue_work_on_15($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.38, $M.37, $M.39, $M.41, $M.43;



implementation ldv_queue_work_on_15($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} {:cexpr "ldv_queue_work_on_15:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} $i3 := queue_work_on($i0, $p1, $p2);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1197} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 1198} {:cexpr "ldv_func_res"} boogie_si_record_i8($i6);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} activate_work_2($p2, 2);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 439440);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1200} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1201} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1202} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const activate_work_2: ref;

axiom activate_work_2 == $sub.ref(0, 440472);

procedure activate_work_2($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.38, $M.37, $M.39, $M.41, $M.43;



implementation activate_work_2($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} {:cexpr "activate_work_2:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i2 := $M.37;
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.39;
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.41;
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.43;
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $M.43 := $i1;
    call {:si_unique_call 1207} {:cexpr "ldv_work_2_3"} boogie_si_record_i32($i1);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $M.41 := $i1;
    call {:si_unique_call 1206} {:cexpr "ldv_work_2_2"} boogie_si_record_i32($i1);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $M.39 := $i1;
    call {:si_unique_call 1205} {:cexpr "ldv_work_2_1"} boogie_si_record_i32($i1);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $M.38 := $p0;
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $M.37 := $i1;
    call {:si_unique_call 1204} {:cexpr "ldv_work_2_0"} boogie_si_record_i32($i1);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isr_txeom: ref;

axiom isr_txeom == $sub.ref(0, 441504);

procedure isr_txeom($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.5, $M.7, $M.9;



implementation isr_txeom($p0: ref, $i1: i8)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i16;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i8;
  var $i29: i16;
  var $i30: i32;
  var $i31: i32;
  var $i32: i16;
  var $p33: ref;
  var $i34: i8;
  var $i35: i1;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $i68: i8;
  var $i69: i1;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i32;
  var $i74: i8;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $i92: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $p102: ref;
  var vslice_dummy_var_377: i32;
  var vslice_dummy_var_378: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} {:cexpr "isr_txeom:arg:status"} boogie_si_record_i8($i1);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $i2 := $M.2;
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 4);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} write_reg($p0, $sub.i8(0, 76), 0);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} write_reg($p0, $sub.i8(0, 80), $sub.i8(0, 64));
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} write_reg($p0, $sub.i8(0, 75), 1);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i8 := $sext.i8.i32($i1);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} write_reg($p0, 44, 9);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 253);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i14);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 63);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $i20);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i16($i23);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $i26 := $shl.i32($i25, 8);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6004, 1));
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i16($i28);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i26, $i30);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} write_reg16($p0, 40, $i32);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} write_reg($p0, 35, $sub.i8(0, 64));
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5999, 1));
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i34);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i35 == 1;
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(0, 1));
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 1);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5999, 1));
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, 0);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 0);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1184, 1));
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, 0);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, 0);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1376, 1));
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} vslice_dummy_var_378 := ldv_del_timer_46($p61);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(0, 1));
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, $p64);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 1);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6300, 1));
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i79 == 1);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1796, 1));
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $i101 := $or.i32($i100, 2);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1796, 1));
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, $i101);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb27:
    assume $i84 == 1;
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p88, $mul.ref(1356, 1));
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.0, $p89);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i92 == 1);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 1816)), $mul.ref(1368, 1));
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb29;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} tx_stop($p0);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i92 == 1;
    goto $bb31;

  $bb24:
    assume $i79 == 1;
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} hdlcdev_tx_done($p0);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb18:
    assume $i66 == 1;
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6264, 1));
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i8.i1($i68);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb20;

  $bb21:
    assume $i69 == 1;
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 223);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i8($i73);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p75, $i74);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6264, 1));
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, 0);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} set_signals($p0);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb9:
    assume $i39 == 1;
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $i40 := $sext.i8.i32($i1);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 0);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i41 == 1);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i1);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 64);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i50 == 1;
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(44, 1));
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i53, 1);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(44, 1));
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i54);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(48, 1));
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, 1);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(48, 1));
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i45);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} write_reg($p0, 44, 1);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} write_reg($p0, 44, 2);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i1);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} vslice_dummy_var_377 := printk.ref.ref.i32.ref.i32(.str.21, .str.1, 2235, $p5, $i6);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isr_io_pin: ref;

axiom isr_io_pin == $sub.ref(0, 442536);

procedure isr_io_pin($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.0, $M.22, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $CurrAddr;



implementation isr_io_pin($p0: ref, $i1: i16)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p25: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p47: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $i63: i1;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i32;
  var $i68: i8;
  var $p69: ref;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i8;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $p86: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i32;
  var $p108: ref;
  var $i109: i32;
  var $i110: i32;
  var $p111: ref;
  var $i112: i1;
  var $p113: ref;
  var $i114: i8;
  var $i115: i32;
  var $i116: i32;
  var $i117: i8;
  var $p118: ref;
  var $p119: ref;
  var $i120: i8;
  var $i121: i32;
  var $i122: i8;
  var $p123: ref;
  var $i124: i32;
  var $i125: i32;
  var $p126: ref;
  var $i127: i32;
  var $i128: i32;
  var $i129: i1;
  var $p131: ref;
  var $i132: i32;
  var $i133: i32;
  var $p135: ref;
  var $p137: ref;
  var $i138: i32;
  var $i139: i32;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p145: ref;
  var $i146: i64;
  var $i147: i64;
  var $i148: i1;
  var $i149: i32;
  var $i150: i32;
  var $i151: i1;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $p155: ref;
  var $i156: i32;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $i161: i32;
  var $i162: i32;
  var $i163: i1;
  var $p165: ref;
  var $i166: i32;
  var $i167: i1;
  var $p170: ref;
  var $p171: ref;
  var $i172: i64;
  var $i173: i1;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $i178: i1;
  var $i179: i8;
  var $i180: i1;
  var $i181: i32;
  var $i182: i32;
  var $i183: i1;
  var $p185: ref;
  var $p186: ref;
  var $i187: i64;
  var $i188: i1;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $i193: i32;
  var $i194: i1;
  var $i195: i32;
  var $i196: i32;
  var $i197: i1;
  var $i198: i32;
  var $i199: i1;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $i206: i32;
  var $i207: i32;
  var $p208: ref;
  var $i209: i32;
  var $i210: i32;
  var $i211: i1;
  var $i212: i32;
  var $i213: i1;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $i220: i32;
  var $i221: i32;
  var $p222: ref;
  var vslice_dummy_var_379: i32;
  var vslice_dummy_var_380: i32;
  var vslice_dummy_var_381: i32;
  var vslice_dummy_var_382: i32;
  var vslice_dummy_var_383: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} {:cexpr "isr_io_pin:arg:status"} boogie_si_record_i16($i1);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i2 := $M.2;
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 4);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i1);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 21760);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1796, 1));
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $i220 := $load.i32($M.0, $p219);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $i221 := $or.i32($i220, 4);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1796, 1));
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p222, $i221);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i1);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1024);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i1);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 16384);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i1);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 256);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i103 := $zext.i16.i32($i1);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $i104 := $and.i32($i103, 4096);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1200, 1));
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} __wake_up($p142, 1, 1, $0.ref);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1288, 1));
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} __wake_up($p143, 1, 1, $0.ref);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $i146 := $load.i64($M.0, $p145);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $i147 := $and.i64($i146, 33554432);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $i148 := $ne.i64($i147, 0);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i148 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1));
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} $i178 := tty_port_cts_enabled($p177);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $i179 := $zext.i1.i8($i178);
    call {:si_unique_call 1237} {:cexpr "tmp___1"} boogie_si_record_i8($i179);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $i180 := $trunc.i8.i1($i179);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i180 == 1);
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb60:
    assume $i180 == 1;
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $i181 := $zext.i16.i32($i1);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $i182 := $and.i32($i181, 4096);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $i183 := $ne.i32($i182, 0);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i183 == 1);
    goto $bb62;

  $bb63:
    assume $i183 == 1;
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.0, $p185);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $i187 := $p2i.ref.i64($p186);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $i188 := $ne.i64($i187, 0);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb65:
    assume $i188 == 1;
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.0, $p190);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p191, $mul.ref(0, 1816)), $mul.ref(1368, 1));
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.0, $p192);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $i194 := $ne.i32($i193, 0);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i194 == 1);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $i209 := $zext.i16.i32($i1);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $i210 := $and.i32($i209, 16);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 0);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb77:
    assume $i211 == 1;
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $i212 := $M.2;
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $i213 := $sgt.i32($i212, 4);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.0, $p216);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p217, $mul.ref(0, 1816)), $mul.ref(1368, 1));
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p218, 1);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} tx_stop($p0);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb79:
    assume $i213 == 1;
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} vslice_dummy_var_383 := printk.ref(.str.18);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb67:
    assume $i194 == 1;
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $i195 := $zext.i16.i32($i1);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $i196 := $and.i32($i195, 16);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $i197 := $ne.i32($i196, 0);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb69:
    assume $i197 == 1;
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $i198 := $M.2;
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $i199 := $sgt.i32($i198, 4);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $p203 := $load.ref($M.0, $p202);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p203, $mul.ref(0, 1816)), $mul.ref(1368, 1));
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p204, 0);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} tx_start($p0);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1796, 1));
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $i206 := $load.i32($M.0, $p205);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $i207 := $or.i32($i206, 2);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1796, 1));
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p208, $i207);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb71:
    assume $i199 == 1;
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} vslice_dummy_var_382 := printk.ref(.str.17);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb42:
    assume $i148 == 1;
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $i149 := $zext.i16.i32($i1);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $i150 := $and.i32($i149, 256);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $i151 := $ne.i32($i150, 0);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i151 == 1);
    goto $bb44;

  $bb45:
    assume $i151 == 1;
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i152 := $M.2;
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $i153 := $sgt.i32($i152, 4);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i161 := $zext.i16.i32($i1);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $i162 := $and.i32($i161, 1);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $i163 := $ne.i32($i162, 0);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i163 == 1);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $i166 := $M.2;
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $i167 := $sgt.i32($i166, 4);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.0, $p170);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i172 := $p2i.ref.i64($p171);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i173 := $ne.i64($i172, 0);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb56:
    assume $i173 == 1;
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.0, $p175);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} tty_hangup($p176);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume $i167 == 1;
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} vslice_dummy_var_381 := printk.ref(.str.16);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb50:
    assume $i163 == 1;
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} __wake_up($p165, 1, 1, $0.ref);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb47:
    assume $i153 == 1;
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p154);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $i156 := $zext.i16.i32($i1);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $i157 := $and.i32($i156, 1);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i157, 0);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $p159 := (if $i158 == 1 then .str.14 else .str.15);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} vslice_dummy_var_380 := printk.ref.ref.ref(.str.13, $p155, $p159);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb33:
    assume $i105 == 1;
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1816, 1));
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    call {:si_unique_call 1228} {:cexpr "tmp___0"} boogie_si_record_i32($i107);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1816, 1));
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p108);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i109, 1);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1816, 1));
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, $i110);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $i112 := $sgt.i32($i107, 99);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    $p123 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(0, 1));
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $i125 := $add.i32($i124, 1);
    $p126 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(0, 1));
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p126, $i125);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $i127 := $zext.i16.i32($i1);
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $i128 := $and.i32($i127, 16);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i129 == 1);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6268, 1)), $mul.ref(28, 1));
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.0, $p137);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $i139 := $add.i32($i138, 1);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6268, 1)), $mul.ref(28, 1));
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p141, $i139);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i129 == 1;
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6268, 1)), $mul.ref(24, 1));
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p131);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $i133 := $add.i32($i132, 1);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6268, 1)), $mul.ref(24, 1));
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p135, $i133);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume $i112 == 1;
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.0, $p113);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i114);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $i116 := $and.i32($i115, 247);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i32.i8($i116);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p118, $i117);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.0, $p119);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i32($i120);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i32.i8($i121);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} write_reg($p0, 41, $i122);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb18:
    assume $i56 == 1;
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1812, 1));
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    call {:si_unique_call 1224} {:cexpr "tmp"} boogie_si_record_i32($i58);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1812, 1));
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, 1);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1812, 1));
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i61);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $i63 := $sgt.i32($i58, 99);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(12, 1));
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i75, 1);
    $p77 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(12, 1));
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, $i76);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i1);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i78, 1);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i80 == 1);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6268, 1)), $mul.ref(20, 1));
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i89, 1);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6268, 1)), $mul.ref(20, 1));
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p92, $i90);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6300, 1));
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb26:
    assume $i95 == 1;
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32($i1);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $i97 := $and.i32($i96, 1);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i98 == 1);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6376, 1));
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} netif_carrier_off($p102);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i98 == 1;
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6376, 1));
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} netif_carrier_on($p100);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb23:
    assume $i80 == 1;
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6268, 1)), $mul.ref(16, 1));
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i83, 1);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6268, 1)), $mul.ref(16, 1));
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p86, $i84);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i63 == 1;
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 251);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, $i68);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i8($i72);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} write_reg($p0, 41, $i73);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb12:
    assume $i34 == 1;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(4, 1));
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 1);
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(4, 1));
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i37);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i1);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 64);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i41 == 1);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6268, 1)), $mul.ref(12, 1));
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i50, 1);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6268, 1)), $mul.ref(12, 1));
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i51);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i41 == 1;
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6268, 1)), $mul.ref(8, 1));
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, 1);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6268, 1)), $mul.ref(8, 1));
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i45);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb6:
    assume $i12 == 1;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(8, 1));
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 1);
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(8, 1));
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i1);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 4);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6268, 1)), $mul.ref(4, 1));
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, 1);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6268, 1)), $mul.ref(4, 1));
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i29);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6268, 1)), $mul.ref(0, 1));
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 1);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6268, 1)), $mul.ref(0, 1));
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i23);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i1);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} vslice_dummy_var_379 := printk.ref.ref.i32.i32(.str.12, .str.1, 2426, $i4);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tty_hangup: ref;

axiom tty_hangup == $sub.ref(0, 443568);

procedure tty_hangup($p0: ref);
  free requires assertsPassed;



implementation tty_hangup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_cts_enabled: ref;

axiom tty_port_cts_enabled == $sub.ref(0, 444600);

procedure tty_port_cts_enabled($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation tty_port_cts_enabled($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(680, 1));
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 67108864);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_del_timer_46: ref;

axiom ldv_del_timer_46 == $sub.ref(0, 445632);

procedure ldv_del_timer_46($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9;



implementation ldv_del_timer_46($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} $i1 := del_timer($p0);
    call {:si_unique_call 1243} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} disable_suitable_timer_3($p0);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const hdlcdev_tx_done: ref;

axiom hdlcdev_tx_done == $sub.ref(0, 446664);

procedure hdlcdev_tx_done($p0: ref);
  free requires assertsPassed;



implementation hdlcdev_tx_done($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6376, 1));
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $i3 := netif_queue_stopped($p2);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1246} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6376, 1));
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} netif_wake_queue($p7);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netif_queue_stopped: ref;

axiom netif_queue_stopped == $sub.ref(0, 447696);

procedure netif_queue_stopped($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_queue_stopped($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $i2 := netif_tx_queue_stopped($p1);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1250} {:cexpr "tmp___0"} boogie_si_record_i8($i3);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const netif_tx_queue_stopped: ref;

axiom netif_tx_queue_stopped == $sub.ref(0, 448728);

procedure netif_tx_queue_stopped($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_tx_queue_stopped($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(424, 1));
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 1252} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 449760);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const tty_insert_flip_char: ref;

axiom tty_insert_flip_char == $sub.ref(0, 450792);

procedure tty_insert_flip_char($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.45, $M.46, $M.0, $CurrAddr;



implementation tty_insert_flip_char($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i12: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i8;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i40: i32;
  var $i39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.45 := $store.i8($M.45, $p3, $i1);
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p4, $i2);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(0, 1)), $mul.ref(304, 1));
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $i12 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i12);
    call {:si_unique_call 1256} {:cexpr "change"} boogie_si_record_i32($i16);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} $i40 := tty_insert_flip_string_flags($p0, $p3, $p4, 1);
    call {:si_unique_call 1261} {:cexpr "tmp___2"} boogie_si_record_i32($i40);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $i39 := $i40;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i19, $i21);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb6;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 1);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    call {:si_unique_call 1258} {:cexpr "tmp___0"} boogie_si_record_i32($i32);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, 1);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} $p37 := char_buf_ptr($p7, $i32);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.45, $p3);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, $i38);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $i39 := 1;
    goto $bb12;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} $p29 := flag_buf_ptr($p7, $i28);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.46, $p4);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i30);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.46, $p4);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $i14 := $sext.i8.i32($i13);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    assume {:verifier.code 0} true;
    $i12 := $i15;
    goto $bb3;
}



const do_SAK: ref;

axiom do_SAK == $sub.ref(0, 451824);

procedure do_SAK($p0: ref);
  free requires assertsPassed;



implementation do_SAK($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    return;
}



const flag_buf_ptr: ref;

axiom flag_buf_ptr == $sub.ref(0, 452856);

procedure flag_buf_ptr($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation flag_buf_ptr($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} {:cexpr "flag_buf_ptr:arg:ofs"} boogie_si_record_i32($i1);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} $p2 := char_buf_ptr($p0, $i1);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const char_buf_ptr: ref;

axiom char_buf_ptr == $sub.ref(0, 453888);

procedure char_buf_ptr($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation char_buf_ptr($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} {:cexpr "char_buf_ptr:arg:ofs"} boogie_si_record_i32($i1);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(32, 1));
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 1));
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const tty_insert_flip_string_flags: ref;

axiom tty_insert_flip_string_flags == $sub.ref(0, 454920);

procedure tty_insert_flip_string_flags($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_insert_flip_string_flags($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1265} {:cexpr "tty_insert_flip_string_flags:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1266} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1267} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const tty_flip_buffer_push: ref;

axiom tty_flip_buffer_push == $sub.ref(0, 455952);

procedure tty_flip_buffer_push($p0: ref);
  free requires assertsPassed;



implementation tty_flip_buffer_push($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_5: ref;

axiom ldv_spin_lock_5 == $sub.ref(0, 456984);

procedure ldv_spin_lock_5($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_5($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} _raw_spin_lock($p2);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 458016);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    return;
}



const alloc_buf_list: ref;

axiom alloc_buf_list == $sub.ref(0, 459048);

procedure alloc_buf_list($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation alloc_buf_list($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p49: ref;
  var $i50: i64;
  var $i51: i16;
  var $i52: i32;
  var $i53: i16;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i16;
  var $i58: i64;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i16;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $p78: ref;
  var $i79: i16;
  var $i80: i32;
  var $i81: i32;
  var $i82: i16;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i16;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $i48: i32;
  var $p100: ref;
  var $i101: i32;
  var $i102: i1;
  var $p104: ref;
  var $i105: i64;
  var $i106: i16;
  var $i107: i32;
  var $p108: ref;
  var $i109: i32;
  var $i110: i32;
  var $i111: i16;
  var $i112: i32;
  var $i113: i32;
  var $i114: i32;
  var $i115: i16;
  var $i116: i64;
  var $p119: ref;
  var $p120: ref;
  var $i121: i64;
  var $i122: i16;
  var $i123: i32;
  var $p124: ref;
  var $i125: i32;
  var $i126: i16;
  var $i127: i32;
  var $i128: i32;
  var $i129: i32;
  var $i130: i16;
  var $p131: ref;
  var $p132: ref;
  var $i133: i64;
  var $p135: ref;
  var $p136: ref;
  var $i137: i32;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $p141: ref;
  var $i142: i64;
  var $p144: ref;
  var $i145: i16;
  var $i146: i32;
  var $i147: i32;
  var $i148: i16;
  var $i149: i32;
  var $i150: i32;
  var $i151: i32;
  var $i152: i16;
  var $p153: ref;
  var $p154: ref;
  var $i155: i64;
  var $p157: ref;
  var $i158: i32;
  var $i159: i32;
  var $i160: i1;
  var $i103: i32;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6168, 1));
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(6160, 1));
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p2, $mul.ref($i8, 1));
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1832, 1));
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p9);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 6384)), $mul.ref(6160, 1));
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1840, 1));
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p17, $i16);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 6384)), $mul.ref(6160, 1));
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 4096);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 6384)), $mul.ref(6160, 1));
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i23);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1832, 1));
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.0;
    call {:si_unique_call 1269} cmdloc_dummy_var_34 := $memset.i8(cmdloc_dummy_var_33, $p29, 0, 4096, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_34;
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1832, 1));
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1856, 1));
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p31);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1832, 1));
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3920, 1));
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p35);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3920, 1));
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1848, 1));
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $i42 := $zext.i32.i64($i41);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p39, $mul.ref($i42, 10));
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3920, 1));
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $p43);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1848, 1));
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $i47 := $ugt.i32($i46, 0);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3916, 1));
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $i102 := $ugt.i32($i101, 0);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb12:
    assume $i102 == 1;
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $i103 := 0;
    goto $bb15;

  $bb15:
    call $p104, $i105, $i106, $i107, $p108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $p119, $p120, $i121, $i122, $i123, $p124, $i125, $i126, $i127, $i128, $i129, $i130, $p131, $p132, $i133, $p135, $p136, $i137, $i138, $i139, $p140, $p141, $i142, $p144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $p153, $p154, $i155, $p157, $i158, $i159, $i160, $i103 := alloc_buf_list_loop_$bb15($p0, $p100, $p104, $i105, $i106, $i107, $p108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $p119, $p120, $i121, $i122, $i123, $p124, $i125, $i126, $i127, $i128, $i129, $i130, $p131, $p132, $i133, $p135, $p136, $i137, $i138, $i139, $p140, $p141, $i142, $p144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $p153, $p154, $i155, $p157, $i158, $i159, $i160, $i103);
    goto $bb15_last;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1840, 1));
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $i105 := $load.i64($M.0, $p104);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i64.i16($i105);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32($i106);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1848, 1));
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p108);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i109, $i103);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i16($i110);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $i112 := $zext.i16.i32($i111);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $i113 := $mul.i32($i112, 10);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i107, $i113);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i32.i16($i114);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i116 := $zext.i32.i64($i103);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3928, 1)), $mul.ref($i116, 16)), $mul.ref(8, 1));
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p119, $i115);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1840, 1));
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $i121 := $load.i64($M.0, $p120);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i64.i16($i121);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $i123 := $zext.i16.i32($i122);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1848, 1));
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i32.i16($i125);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $i127 := $zext.i16.i32($i126);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $i128 := $mul.i32($i127, 10);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $i129 := $add.i32($i123, $i128);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i32.i16($i129);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3920, 1));
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i133 := $zext.i32.i64($i103);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p132, $mul.ref($i133, 10)), $mul.ref(0, 1));
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p135, $i130);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3916, 1));
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $i138 := $sub.i32($i137, 1);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $i139 := $ugt.i32($i138, $i103);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i158 := $add.i32($i103, 1);
    call {:si_unique_call 1271} {:cexpr "i"} boogie_si_record_i32($i158);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.0, $p100);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $i160 := $ugt.i32($i159, $i158);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i160 == 1);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb20:
    assume $i160 == 1;
    assume {:verifier.code 0} true;
    $i103 := $i158;
    goto $bb20_dummy;

  $bb17:
    assume $i139 == 1;
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3920, 1));
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $i142 := $zext.i32.i64($i103);
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p141, $mul.ref($i142, 10)), $mul.ref(0, 1));
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $i145 := $load.i16($M.0, $p144);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $i146 := $zext.i16.i32($i145);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $i147 := $add.i32($i103, 1);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $i148 := $trunc.i32.i16($i147);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $i149 := $zext.i16.i32($i148);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $i150 := $mul.i32($i149, 10);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $i151 := $add.i32($i146, $i150);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $i152 := $trunc.i32.i16($i151);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3920, 1));
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.0, $p153);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $i155 := $zext.i32.i64($i103);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p154, $mul.ref($i155, 10)), $mul.ref(0, 1));
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p157, $i152);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb1:
    assume $i47 == 1;
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $i48 := 0;
    goto $bb4;

  $bb4:
    call $p49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $p61, $p62, $i63, $i64, $p65, $p66, $i67, $p69, $p70, $i71, $i72, $i73, $p74, $p75, $i76, $p78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $p87, $p88, $i89, $p91, $p92, $p93, $i94, $p96, $i97, $i98, $i99, $i48 := alloc_buf_list_loop_$bb4($p0, $p45, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $p61, $p62, $i63, $i64, $p65, $p66, $i67, $p69, $p70, $i71, $i72, $i73, $p74, $p75, $i76, $p78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $p87, $p88, $i89, $p91, $p92, $p93, $i94, $p96, $i97, $i98, $i99, $i48);
    goto $bb4_last;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1840, 1));
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.0, $p49);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i64.i16($i50);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i48);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $i55 := $mul.i32($i54, 1024);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i52, $i55);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i16($i56);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $i58 := $zext.i32.i64($i48);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1864, 1)), $mul.ref($i58, 16)), $mul.ref(8, 1));
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p61, $i57);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1840, 1));
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.0, $p62);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i64.i16($i63);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1856, 1));
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $i67 := $zext.i32.i64($i48);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p66, $mul.ref($i67, 10)), $mul.ref(0, 1));
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p69, $i64);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1848, 1));
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32($i71, 1);
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $i73 := $ugt.i32($i72, $i48);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1856, 1));
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $i94 := $zext.i32.i64($i48);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p93, $mul.ref($i94, 10)), $mul.ref(6, 1));
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p96, 1024);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $i97 := $add.i32($i48, 1);
    call {:si_unique_call 1270} {:cexpr "i"} boogie_si_record_i32($i97);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p45);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $i99 := $ugt.i32($i98, $i97);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i99 == 1);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i99 == 1;
    assume {:verifier.code 0} true;
    $i48 := $i97;
    goto $bb9_dummy;

  $bb6:
    assume $i73 == 1;
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1856, 1));
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $i76 := $zext.i32.i64($i48);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p75, $mul.ref($i76, 10)), $mul.ref(0, 1));
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $i79 := $load.i16($M.0, $p78);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $i80 := $zext.i16.i32($i79);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i48, 1);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i16($i81);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i82);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $i84 := $mul.i32($i83, 10);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i80, $i84);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i16($i85);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1856, 1));
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i89 := $zext.i32.i64($i48);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p88, $mul.ref($i89, 10)), $mul.ref(0, 1));
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p91, $i86);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb20_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8004;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7937;
}



const alloc_frame_bufs: ref;

axiom alloc_frame_bufs == $sub.ref(0, 460080);

procedure alloc_frame_bufs($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation alloc_frame_bufs($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i16;
  var $i35: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i8;
  var $i40: i64;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} {:cexpr "alloc_frame_bufs:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32(0, $i3);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $p6, $p7, $p9, $p10, $p11, $i12, $i13, $p14, $i15, $p17, $p19, $p20, $p21, $i22, $i23, $p25, $p26, $p27, $i28, $i29, $p31, $p32, $p33, $i34, $i35, $p37, $i38, $i39, $i40, $p42, $i43, $i44, $i5 := alloc_frame_bufs_loop_$bb4($p0, $p1, $p2, $i3, $p6, $p7, $p9, $p10, $p11, $i12, $i13, $p14, $i15, $p17, $p19, $p20, $p21, $i22, $i23, $p25, $p26, $p27, $i28, $i29, $p31, $p32, $p33, $i34, $i35, $p37, $i38, $i39, $i40, $p42, $i43, $i44, $i5);
    goto $bb4_last;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6168, 1));
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 6384)), $mul.ref(6160, 1));
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p7, $mul.ref($i13, 1));
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i5);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref($i15, 16)), $mul.ref(0, 1));
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p14);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 6384)), $mul.ref(6160, 1));
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    call {:si_unique_call 1273} {:cexpr "phys_addr"} boogie_si_record_i64($i23);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 6384)), $mul.ref(6160, 1));
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, 1024);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 6384)), $mul.ref(6160, 1));
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i29);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i64.i16($i23);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i5);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref($i35, 10)), $mul.ref(2, 1));
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p37, $i34);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $i38 := $lshr.i64($i23, 16);
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i64.i8($i38);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i5);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref($i40, 10)), $mul.ref(4, 1));
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, $i39);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i5, 1);
    call {:si_unique_call 1274} {:cexpr "i"} boogie_si_record_i32($i43);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, $i3);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i44 == 1);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i43;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8075;
}



const alloc_tmp_rx_buf: ref;

axiom alloc_tmp_rx_buf == $sub.ref(0, 461112);

procedure alloc_tmp_rx_buf($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation alloc_tmp_rx_buf($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $p4 := kmalloc($i3, 208);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5984, 1));
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p4);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5984, 1));
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $p14 := kmalloc($i13, 208);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6256, 1));
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p14);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6256, 1));
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5984, 1));
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} kfree($p21);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5984, 1));
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $0.ref);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_370:
    assume !assertsPassed;
    return;
}



const rx_reset_buffers: ref;

axiom rx_reset_buffers == $sub.ref(0, 462144);

procedure rx_reset_buffers($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rx_reset_buffers($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1848, 1));
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} rx_free_frame_buffers($p0, 0, $i3);
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    return;
}



const __request_region: ref;

axiom __request_region == $sub.ref(0, 463176);

procedure __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} {:cexpr "__request_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1280} {:cexpr "__request_region:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1281} {:cexpr "__request_region:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} $p5 := external_alloc();
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ioremap_nocache: ref;

axiom ioremap_nocache == $sub.ref(0, 464208);

procedure ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} {:cexpr "ioremap_nocache:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1284} {:cexpr "ioremap_nocache:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} $p2 := external_alloc();
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const memory_test: ref;

axiom memory_test == $sub.ref(0, 465240);

procedure memory_test($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.47, $M.0, $CurrAddr;



implementation memory_test($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p19: ref;
  var $i20: i64;
  var $p25: ref;
  var $p26: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p28: ref;
  var $i29: i64;
  var $p36: ref;
  var $p37: ref;
  var $i18: i1;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $p1 := $alloc($mul.ref(56, $zext.i32.i64(1)));
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(0, 8));
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $M.47 := $store.i64($M.47, $p2, 0);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(1, 8));
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $M.47 := $store.i64($M.47, $p3, 1431655765);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(2, 8));
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $M.47 := $store.i64($M.47, $p4, 2863311530);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(3, 8));
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $M.47 := $store.i64($M.47, $p5, 1717986918);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(4, 8));
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $M.47 := $store.i64($M.47, $p6, 2576980377);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(5, 8));
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $M.47 := $store.i64($M.47, $p7, 4294967295);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(6, 8));
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $M.47 := $store.i64($M.47, $p8, 305419896);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6168, 1));
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(0, 8));
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.47, $p12);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i13);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p11);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(0, 8));
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.47, $p15);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i14, $i16);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(1, 8));
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.47, $p38);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i39);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, $p11);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(1, 8));
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.47, $p41);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i40, $i42);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(2, 8));
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.47, $p44);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i45);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p11);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(2, 8));
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.47, $p47);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i46, $i48);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(3, 8));
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.47, $p50);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i51);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p11);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(3, 8));
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.47, $p53);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i52, $i54);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(4, 8));
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.47, $p56);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i57);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.0, $p11);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(4, 8));
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.47, $p59);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i58, $i60);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(5, 8));
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.47, $p62);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i63);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.0, $p11);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(5, 8));
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.47, $p65);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i64, $i66);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(6, 8));
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.47, $p68);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i69);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.0, $p11);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(6, 8));
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.47, $p71);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i70, $i72);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p19, $i20 := $p10, 0;
    goto $bb10;

  $bb10:
    call $i21, $p22, $i23, $i24, $p19, $i20 := memory_test_loop_$bb10($i21, $p22, $i23, $i24, $p19, $i20);
    goto $bb10_last;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i21 := $mul.i64($i20, 4);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i21);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p19, $mul.ref(1, 8));
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i20, 1);
    call {:si_unique_call 1287} {:cexpr "i"} boogie_si_record_i64($i23);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $i24 := $ult.i64($i23, 32768);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6168, 1));
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $p28, $i29 := $p26, 0;
    goto $bb15;

  $bb15:
    call $i30, $i31, $i32, $p33, $i34, $i35, $p28, $i29 := memory_test_loop_$bb15($i30, $i31, $i32, $p33, $i34, $i35, $p28, $i29);
    goto $bb15_last;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p28);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $i31 := $mul.i64($i29, 4);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i30, $i31);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p28, $mul.ref(1, 8));
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i29, 1);
    call {:si_unique_call 1288} {:cexpr "i"} boogie_si_record_i64($i34);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $i35 := $ult.i64($i34, 32768);
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6168, 1));
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.0;
    call {:si_unique_call 1289} cmdloc_dummy_var_36 := $memset.i8(cmdloc_dummy_var_35, $p37, 0, 262144, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_36;
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb20:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $p28, $i29 := $p33, $i34;
    goto $bb20_dummy;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb12:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $p19, $i20 := $p22, $i23;
    goto $bb12_dummy;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb4;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb4;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb4;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb4;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb4;

  $bb20_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8215;

  $bb12_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8203;
}



const release_resources: ref;

axiom release_resources == $sub.ref(0, 466272);

procedure release_resources($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.28, $M.31, $M.34;



implementation release_resources($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i64;
  var $i90: i64;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var vslice_dummy_var_384: i32;
  var vslice_dummy_var_385: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $i1 := $M.2;
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 2);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6096, 1));
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6180, 1));
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6224, 1));
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6200, 1));
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6248, 1));
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i41);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6168, 1));
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6184, 1));
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6232, 1));
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6208, 1));
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i93 := $M.2;
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $i94 := $sgt.i32($i93, 2);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume $i94 == 1;
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} vslice_dummy_var_385 := printk.ref.ref.i32.ref(.str.81, .str.1, 3700, $p96);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i84 == 1;
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6208, 1));
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6220, 1));
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $i89 := $zext.i32.i64($i88);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $i90 := $sub.i64(0, $i89);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p86, $mul.ref($i90, 1));
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} iounmap($p91);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6208, 1));
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p92, $0.ref);
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i72 == 1;
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6232, 1));
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6244, 1));
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $i77 := $zext.i32.i64($i76);
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $i78 := $sub.i64(0, $i77);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p74, $mul.ref($i78, 1));
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} iounmap($p79);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6232, 1));
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p80, $0.ref);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i60 == 1;
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6184, 1));
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6196, 1));
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $i65 := $zext.i32.i64($i64);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $i66 := $sub.i64(0, $i65);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p62, $mul.ref($i66, 1));
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} iounmap($p67);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6184, 1));
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $0.ref);
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i53 == 1;
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6168, 1));
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} iounmap($p55);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6168, 1));
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $0.ref);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6240, 1));
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6244, 1));
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i44, $i46);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $i48 := $zext.i32.i64($i47);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} __release_region(iomem_resource, $i48, 16);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6248, 1));
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, 0);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6192, 1));
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6196, 1));
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i34, $i36);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i37);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} __release_region(iomem_resource, $i38, 512);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6200, 1));
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 0);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6216, 1));
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6220, 1));
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i24, $i26);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} __release_region(iomem_resource, $i28, 128);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6224, 1));
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 0);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6176, 1));
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} __release_region(iomem_resource, $i18, 262144);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6180, 1));
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 0);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6084, 1));
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} ldv_free_irq_50($i10, $p11);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6096, 1));
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 0);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} vslice_dummy_var_384 := printk.ref.ref.i32.ref(.str.80, .str.1, 3654, $p4);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_free_irq_50: ref;

axiom ldv_free_irq_50 == $sub.ref(0, 467304);

procedure ldv_free_irq_50($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.25, $M.28, $M.31, $M.34;



implementation ldv_free_irq_50($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} {:cexpr "ldv_free_irq_50:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} free_irq($i0, $p1);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    return;
}



const __release_region: ref;

axiom __release_region == $sub.ref(0, 468336);

procedure __release_region($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation __release_region($p0: ref, $i1: i64, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} {:cexpr "__release_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1305} {:cexpr "__release_region:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    return;
}



const iounmap: ref;

axiom iounmap == $sub.ref(0, 469368);

procedure iounmap($p0: ref);
  free requires assertsPassed;



implementation iounmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 470400);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    return;
}



const disable_suitable_irq_1: ref;

axiom disable_suitable_irq_1 == $sub.ref(0, 471432);

procedure disable_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.25, $M.28, $M.31, $M.34;



implementation disable_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} {:cexpr "disable_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $i2 := $M.25;
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.28;
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $M.31;
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $M.34;
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $i16 := $M.35;
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i0, $i16);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb22;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $M.34 := 0;
    call {:si_unique_call 1311} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $i12 := $M.32;
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, $i12);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb16;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $M.31 := 0;
    call {:si_unique_call 1310} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $i8 := $M.29;
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, $i8);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $M.28 := 0;
    call {:si_unique_call 1309} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $i4 := $M.26;
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, $i4);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $M.25 := 0;
    call {:si_unique_call 1308} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 472464);

procedure sprintf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);



const hdlcdev_init: ref;

axiom hdlcdev_init == $sub.ref(0, 473496);

procedure hdlcdev_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.48, $M.49, $CurrAddr;



implementation hdlcdev_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $i6: i32;
  var vslice_dummy_var_386: i32;
  var vslice_dummy_var_387: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} $p2 := alloc_hdlcdev($p1);
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6192, 1));
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(48, 1));
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, $i9);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6192, 1));
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 511);
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(40, 1));
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, $i14);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6084, 1));
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(64, 1));
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(512, 1));
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, hdlcdev_ops);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(1120, 1));
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 2500);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(1040, 1));
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p21, 50);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} $p22 := dev_to_hdlc($p2);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, hdlcdev_attach);
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p22, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, hdlcdev_xmit);
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $i25 := ldv_register_netdev_43($p2);
    call {:si_unique_call 1316} {:cexpr "rc"} boogie_si_record_i32($i25);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6376, 1));
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p2);
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} vslice_dummy_var_387 := printk.ref.ref(.str.68, .str.1);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} ldv_free_netdev_44($p2);
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $i6 := $i25;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} vslice_dummy_var_386 := printk.ref.ref(.str.67, .str.1);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;
}



const alloc_hdlcdev: ref;

axiom alloc_hdlcdev == $sub.ref(0, 474528);

procedure alloc_hdlcdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_hdlcdev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} $p1 := external_alloc();
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const hdlcdev_attach: ref;

axiom hdlcdev_attach == $sub.ref(0, 475560);

procedure hdlcdev_attach($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);



const hdlcdev_xmit: ref;

axiom hdlcdev_xmit == $sub.ref(0, 476592);

procedure hdlcdev_xmit($p0: ref, $p1: ref) returns ($r: i32);



const ldv_register_netdev_43: ref;

axiom ldv_register_netdev_43 == $sub.ref(0, 477624);

procedure ldv_register_netdev_43($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.48, $M.49, $M.0, $CurrAddr;



implementation ldv_register_netdev_43($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $i1 := register_netdev($p0);
    call {:si_unique_call 1321} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1322} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} ldv_net_device_ops_7();
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_free_netdev_44: ref;

axiom ldv_free_netdev_44 == $sub.ref(0, 478656);

procedure ldv_free_netdev_44($p0: ref);
  free requires assertsPassed;
  modifies $M.48;



implementation ldv_free_netdev_44($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} free_netdev($p0);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $M.48 := 0;
    call {:si_unique_call 1325} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    return;
}



const free_netdev: ref;

axiom free_netdev == $sub.ref(0, 479688);

procedure free_netdev($p0: ref);
  free requires assertsPassed;



implementation free_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    return;
}



const register_netdev: ref;

axiom register_netdev == $sub.ref(0, 480720);

procedure register_netdev($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_netdev($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1326} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1327} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_net_device_ops_7: ref;

axiom ldv_net_device_ops_7 == $sub.ref(0, 481752);

procedure ldv_net_device_ops_7();
  free requires assertsPassed;
  modifies $M.49, $M.0, $CurrAddr;



implementation ldv_net_device_ops_7()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $p0 := ldv_init_zalloc(3008);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $M.49 := $p0;
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 482784);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} $p1 := calloc(1, $i0);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1331} __VERIFIER_assume($i4);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const consume_skb: ref;

axiom consume_skb == $sub.ref(0, 483816);

procedure consume_skb($p0: ref);



const tty_port_init: ref;

axiom tty_port_init == $sub.ref(0, 484848);

procedure tty_port_init($p0: ref);
  free requires assertsPassed;



implementation tty_port_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 485880);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 486912);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 487944);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    return;
}



const bh_handler: ref;

axiom bh_handler == $sub.ref(0, 488976);

procedure bh_handler($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed;



implementation bh_handler($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i25: i32;
  var $i26: i1;
  var $i11: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var vslice_dummy_var_388: i32;
  var vslice_dummy_var_389: i32;
  var vslice_dummy_var_390: i32;
  var vslice_dummy_var_391: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 1712), 6384));
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $i3 := $M.2;
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 3);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1712), 6384)), $mul.ref(1800, 1));
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 1);
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} $i9 := bh_action($p2);
    call {:si_unique_call 1336} {:cexpr "action"} boogie_si_record_i32($i9);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i27 := $M.2;
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $i28 := $sgt.i32($i27, 3);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i28 == 1;
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1712), 6384)), $mul.ref(6009, 1));
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} vslice_dummy_var_391 := printk.ref.ref.i32.ref(.str.32, .str.1, 2048, $p30);
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb7;

  $bb7:
    call $i12, $i13, $p14, $p15, $i17, $i18, $i19, $i20, $i21, $p22, $p23, $i25, $i26, $i11, vslice_dummy_var_389, vslice_dummy_var_390 := bh_handler_loop_$bb7($p1, $p2, $i12, $i13, $p14, $p15, $i17, $i18, $i19, $i20, $i21, $p22, $p23, $i25, $i26, $i11, vslice_dummy_var_389, vslice_dummy_var_390);
    goto $bb7_last;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i12 := $M.2;
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i12, 3);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i11, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i11, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i11, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1712), 6384)), $mul.ref(6009, 1));
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} vslice_dummy_var_390 := printk.ref.ref.i32.ref.i32(.str.31, .str.1, 2041, $p23, $i11);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} $i25 := bh_action($p2);
    call {:si_unique_call 1342} {:cexpr "action"} boogie_si_record_i32($i25);
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i26 == 1);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb26:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i25;
    goto $bb26_dummy;

  $bb17:
    assume $i19 == 1;
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} bh_status($p2);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb15:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i11, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb19;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} bh_transmit($p2);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb13:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i11, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb19;

  $bb22:
    assume $i21 == 1;
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} bh_receive($p2);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1712), 6384)), $mul.ref(6009, 1));
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} vslice_dummy_var_389 := printk.ref.ref.i32.ref.i32(.str.30, .str.1, 2025, $p15, $i11);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1712), 6384)), $mul.ref(6009, 1));
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} vslice_dummy_var_388 := printk.ref.ref.i32.ref(.str.29, .str.1, 2016, $p6);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb26_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8578;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 490008);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memmove.p0i8.p0i8.i64: ref;

axiom llvm.memmove.p0i8.p0i8.i64 == $sub.ref(0, 491040);

procedure llvm.memmove.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const tx_timeout: ref;

axiom tx_timeout == $sub.ref(0, 492072);

procedure tx_timeout($i0: i64);
  free requires assertsPassed;
  modifies $M.0, $M.1;



implementation tx_timeout($i0: i64)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var vslice_dummy_var_392: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} {:cexpr "tx_timeout:arg:context"} boogie_si_record_i64($i0);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $i2 := $M.2;
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 2);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 6384)), $mul.ref(5999, 1));
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} ldv_spin_lock();
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 6384)), $mul.ref(5999, 1));
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 0);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 0);
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 6384)), $mul.ref(1184, 1));
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 0);
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 0);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} spin_unlock_irqrestore($p24, $u0);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 6384)), $mul.ref(6300, 1));
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} bh_transmit($p1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} hdlcdev_tx_done($p1);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(0, 1));
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 2);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb6;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(56, 1));
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 1);
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(56, 1));
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i17);
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} vslice_dummy_var_392 := printk.ref.ref.i32.ref(.str.27, .str.1, 5488, $p5);
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const reg_timer_3: ref;

axiom reg_timer_3 == $sub.ref(0, 493104);

procedure reg_timer_3($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9;



implementation reg_timer_3($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} {:cexpr "reg_timer_3:arg:data"} boogie_si_record_i64($i2);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(tx_timeout));
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} activate_suitable_timer_3($p0, $i2);
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const status_timeout: ref;

axiom status_timeout == $sub.ref(0, 494136);

procedure status_timeout($i0: i64);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.22, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $CurrAddr;



implementation status_timeout($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $i12: i8;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i16;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i8;
  var $i32: i16;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i16;
  var $i39: i16;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i8;
  var $i45: i16;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i16;
  var $i52: i16;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i8;
  var $i58: i16;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i16;
  var $i65: i16;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i16;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i64;
  var vslice_dummy_var_393: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} {:cexpr "status_timeout:arg:context"} boogie_si_record_i64($i0);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} ldv_spin_lock();
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} get_signals($p1);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} spin_unlock_irqrestore($p2, $u0);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 6384)), $mul.ref(6008, 1));
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $i9 := $xor.i32($i5, $i8);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    call {:si_unique_call 1357} {:cexpr "delta"} boogie_si_record_i8($i10);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 6384)), $mul.ref(6008, 1));
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i12);
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i10);
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 64);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i10);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 4);
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i39 := $i26;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i10);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 1);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i52 := $i39;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i10);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 16);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i65 := $i52;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i65);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} $i70 := msecs_to_jiffies(10);
    call {:si_unique_call 1364} {:cexpr "tmp"} boogie_si_record_i64($i70);
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 6384)), $mul.ref(1512, 1));
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.0, jiffies);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $i73 := $add.i64($i70, $i72);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} vslice_dummy_var_393 := ldv_mod_timer_56($p71, $i73);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i67 == 1;
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i65);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i68);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} isr_io_pin($p1, $i69);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i55 == 1;
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i16($i57);
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $i59 := $sext.i16.i32($i58);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, 16);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $i61 := $or.i32($i60, 4096);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $i62 := $sext.i16.i32($i52);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i61, $i62);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i63);
    call {:si_unique_call 1361} {:cexpr "status"} boogie_si_record_i16($i64);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $i65 := $i64;
    goto $bb12;

  $bb7:
    assume $i42 == 1;
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i16($i44);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $i46 := $sext.i16.i32($i45);
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 1);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i47, 256);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $i49 := $sext.i16.i32($i39);
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $i50 := $or.i32($i48, $i49);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i50);
    call {:si_unique_call 1360} {:cexpr "status"} boogie_si_record_i16($i51);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $i52 := $i51;
    goto $bb9;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i16($i31);
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $i33 := $sext.i16.i32($i32);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 4);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i34, 1024);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $i36 := $sext.i16.i32($i26);
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i35, $i36);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    call {:si_unique_call 1359} {:cexpr "status"} boogie_si_record_i16($i38);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb6;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i16($i18);
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $i20 := $sext.i16.i32($i19);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 64);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i21, 16384);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $i23 := $sext.i16.i32(0);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i22, $i23);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    call {:si_unique_call 1358} {:cexpr "status"} boogie_si_record_i16($i25);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb3;
}



const ldv_mod_timer_56: ref;

axiom ldv_mod_timer_56 == $sub.ref(0, 495168);

procedure ldv_mod_timer_56($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9;



implementation ldv_mod_timer_56($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} {:cexpr "ldv_mod_timer_56:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 1368} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} activate_pending_timer_3($p0, $i1, 1);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const bh_transmit: ref;

axiom bh_transmit == $sub.ref(0, 496200);

procedure bh_transmit($p0: ref);
  free requires assertsPassed;



implementation bh_transmit($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i9: i64;
  var $i10: i1;
  var vslice_dummy_var_394: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $i4 := $M.2;
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 3);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p3);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} tty_wakeup($p3);
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} vslice_dummy_var_394 := printk.ref.ref.i32.ref(.str.28, .str.1, 2066, $p7);
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tty_wakeup: ref;

axiom tty_wakeup == $sub.ref(0, 497232);

procedure tty_wakeup($p0: ref);
  free requires assertsPassed;



implementation tty_wakeup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    return;
}



const bh_receive: ref;

axiom bh_receive == $sub.ref(0, 498264);

procedure bh_receive($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed;



implementation bh_receive($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var vslice_dummy_var_395: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $i1 := $M.2;
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 3);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} $i6 := rx_get_frame($p0);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 1374} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $i9, $i10, $i11 := bh_receive_loop_$bb7($p0, $i9, $i10, $i11);
    goto $bb7_last;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} $i9 := rx_get_frame($p0);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 1376} {:cexpr "tmp"} boogie_si_record_i8($i10);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i11 == 1);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb9_dummy;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} vslice_dummy_var_395 := printk.ref.ref.i32.ref(.str.33, .str.1, 2055, $p4);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const bh_status: ref;

axiom bh_status == $sub.ref(0, 499296);

procedure bh_status($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation bh_status($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var vslice_dummy_var_396: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $i1 := $M.2;
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 3);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1824, 1));
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1820, 1));
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1812, 1));
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1816, 1));
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} vslice_dummy_var_396 := printk.ref.ref.i32.ref(.str.45, .str.1, 2076, $p4);
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bh_action: ref;

axiom bh_action == $sub.ref(0, 500328);

procedure bh_action($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0;



implementation bh_action($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i18: i32;
  var $i9: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} ldv_spin_lock();
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1796, 1));
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1796, 1));
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 2);
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1796, 1));
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 4);
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i18 := $i27;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i9 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i9, 0);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} spin_unlock_irqrestore($p31, $u0);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb10:
    assume $i28 == 1;
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1800, 1));
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 0);
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1808, 1));
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 0);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1796, 1));
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, $sub.i32(0, 5));
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1796, 1));
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $i27 := 4;
    goto $bb9;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1796, 1));
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, $sub.i32(0, 3));
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1796, 1));
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $i18 := 2;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1796, 1));
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, $sub.i32(0, 2));
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1796, 1));
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;
}



const install: ref;

axiom install == $sub.ref(0, 501360);

procedure install($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation install($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p12: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p17: ref;
  var $p11: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i7: i32;
  var vslice_dummy_var_397: i32;
  var vslice_dummy_var_398: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1816)), $mul.ref(32, 1));
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    call {:si_unique_call 1380} {:cexpr "line"} boogie_si_record_i32($i3);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $i4 := $M.15;
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $i5 := $sge.i32($i3, $i4);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $M.17;
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $p11 := $p8;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 1816)), $mul.ref(1256, 1));
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} $i24 := sanity_check($p11, $p23, .str.155);
    call {:si_unique_call 1383} {:cexpr "tmp"} boogie_si_record_i32($i24);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p11, $mul.ref(0, 6384)), $mul.ref(6156, 1));
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p11);
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p11, $mul.ref(0, 6384)), $mul.ref(16, 1));
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $i37 := tty_port_install($p36, $p0, $p1);
    call {:si_unique_call 1386} {:cexpr "tmp___0"} boogie_si_record_i32($i37);
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $i7 := $i37;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb18:
    assume $i28 == 1;
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p11, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p11, $mul.ref(0, 6384)), $mul.ref(6156, 1));
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} vslice_dummy_var_398 := printk.ref.ref.i32.ref.i32(.str.156, .str.1, 731, $p30, $i32);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;

  $bb15:
    assume $i25 == 1;
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $p12 := $p8;
    goto $bb8;

  $bb8:
    call $p13, $p14, $i15, $i16, $p12, $p18, $i19, $i20, $p21, $p17 := install_loop_$bb8($i3, $p13, $p14, $i15, $i16, $p12, $p18, $i19, $i20, $p21, $p17);
    goto $bb8_last;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref(0, 6384)), $mul.ref(1056, 1));
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, $i3);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $p21 := $p12;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $p11 := $p21;
    goto $bb7;

  $bb12:
    assume $i20 == 1;
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 6384)), $mul.ref(1504, 1));
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $p17 := $p14;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $p11 := $p17;
    goto $bb7;

  $bb10:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $p12 := $p14;
    goto $bb10_dummy;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} vslice_dummy_var_397 := printk.ref.ref.i32.i32(.str.154, .str.1, 720, $i3);
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8896;
}



const open: ref;

axiom open == $sub.ref(0, 502392);

procedure open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.51, $M.52, $M.53, $M.54, $M.55, $M.50, $M.62, $M.63, $CurrAddr, $M.3, $M.5, $M.7, $M.9, $M.4, $M.6, $M.8, $M.10, assertsPassed;



implementation open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $i32: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $i38: i64;
  var $i39: i1;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $p45: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $p55: ref;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $i59: i32;
  var $i60: i8;
  var $p62: ref;
  var $i63: i8;
  var $i64: i8;
  var $i65: i8;
  var $i66: i8;
  var $i67: i8;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $p77: ref;
  var $p78: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $i53: i32;
  var $i97: i1;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var $p102: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $p108: ref;
  var $i109: i32;
  var $i110: i32;
  var $p112: ref;
  var vslice_dummy_var_399: i32;
  var vslice_dummy_var_400: i32;
  var vslice_dummy_var_401: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p0);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $i8 := $M.2;
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 2);
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 134217728);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.0, $p55);
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $i57 := $and.i64($i56, 8192);
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $i59 := $zext.i1.i32($i58);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(688, 1));
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $i64 := $and.i8($i60, 1);
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $i65 := $shl.i8($i64, 1);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $i66 := $and.i8($i63, $sub.i8(0, 3));
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $i67 := $or.i8($i66, $i65);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, $i67);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} ldv_spin_lock();
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(6300, 1));
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(412, 1));
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i74, 1);
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(412, 1));
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, $i75);
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(6304, 1));
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} spin_unlock_irqrestore($p78, $u0);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(412, 1));
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 1);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} $i85 := block_til_ready($p0, $p1, $p5);
    call {:si_unique_call 1405} {:cexpr "retval"} boogie_si_record_i32($i85);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i92 := $M.2;
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $i93 := $sgt.i32($i92, 2);
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i53, 0);
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $r := $i53;
    return;

  $bb40:
    assume $i97 == 1;
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1344, 1));
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 1);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(412, 1));
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb45:
    assume $i106 == 1;
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(412, 1));
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p108);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $i110 := $sub.i32($i109, 1);
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(412, 1));
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p112, $i110);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume $i100 == 1;
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p102, $0.ref);
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb37:
    assume $i93 == 1;
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} vslice_dummy_var_401 := printk.ref.ref.i32.ref(.str.133, .str.1, 792, $p95);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb31:
    assume $i86 == 1;
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    $i87 := $M.2;
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $i88 := $sgt.i32($i87, 2);
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i53 := $i85;
    goto $bb20;

  $bb33:
    assume $i88 == 1;
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} vslice_dummy_var_400 := printk.ref.ref.i32.ref.i32(.str.132, .str.1, 786, $p90, $i85);
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb25:
    assume $i82 == 1;
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} $i83 := startup($p5);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    call {:si_unique_call 1403} {:cexpr "retval"} boogie_si_record_i32($i83);
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i83, 0);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i84 == 1;
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $i53 := $i83;
    goto $bb20;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i70 == 1;
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(6304, 1));
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} spin_unlock_irqrestore($p71, $u0);
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32(0, 16);
    goto $bb20;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 134217728);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.0, $p47);
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i64.i32($i48);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 1);
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $i52 := (if $i51 == 1 then $sub.i32(0, 11) else $sub.i32(0, 512));
    call {:si_unique_call 1398} {:cexpr "retval"} boogie_si_record_i32($i52);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb20;

  $bb6:
    assume $i27 == 1;
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} INIT_LIST_HEAD($p28);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 0);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(504, 1));
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} $i32 := prepare_to_wait_event($p31, $p2, 1);
    call {:si_unique_call 1391} {:cexpr "tmp"} boogie_si_record_i64($i32);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $i36 := $and.i64($i35, 134217728);
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i37 == 1);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $i38 := $i32;
    goto $bb11;

  $bb11:
    call $i38, $i39, $i40, $i41, $i42, $i43 := open_loop_$bb11($p0, $p2, $p31, $p34, $i38, $i39, $i40, $i41, $i42, $i43);
    goto $bb11_last;

  $bb14:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} tty_unlock($p0);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} schedule();
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} tty_lock($p0);
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} $i40 := prepare_to_wait_event($p31, $p2, 1);
    call {:si_unique_call 1397} {:cexpr "tmp"} boogie_si_record_i64($i40);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p34);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $i42 := $and.i64($i41, 134217728);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb18;

  $bb18:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i38 := $i40;
    goto $bb18_dummy;

  $bb12:
    assume $i43 == 1;
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(504, 1));
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} finish_wait($p45, $p2);
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb15:
    assume $i39 == 1;
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(16, 1));
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(412, 1));
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} vslice_dummy_var_399 := printk.ref.ref.i32.ref.i32(.str.131, .str.1, 753, $p13, $i16);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb18_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;
}



const close: ref;

axiom close == $sub.ref(0, 503424);

procedure close($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.3, $M.5, $M.7, $M.9;



implementation close($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $i42: i32;
  var vslice_dummy_var_402: i32;
  var vslice_dummy_var_403: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1256, 1));
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} $i7 := sanity_check($p4, $p6, .str.163);
    call {:si_unique_call 1409} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $M.2;
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i9, 2);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(16, 1));
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} $i18 := tty_port_close_start($p17, $p0, $p1);
    call {:si_unique_call 1412} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(696, 1));
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} mutex_lock_nested($p21, 0);
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 2147483648);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} flush_buffer($p0);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} tty_ldisc_flush($p0);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} shutdown($p4);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(696, 1));
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} mutex_unlock($p30);
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(16, 1));
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} tty_port_close_end($p31, $p0);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $0.ref);
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i34 := $M.2;
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $i35 := $sgt.i32($i34, 2);
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb15:
    assume $i35 == 1;
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(16, 1));
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(412, 1));
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} vslice_dummy_var_403 := printk.ref.ref.i32.ref.i32(.str.165, .str.1, 836, $p39, $i42);
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i26 == 1;
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(1156, 1));
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} wait_until_sent($p0, $i28);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(412, 1));
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} vslice_dummy_var_402 := printk.ref.ref.i32.ref.i32(.str.164, .str.1, 818, $p12, $i15);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const write: ref;

axiom write == $sub.ref(0, 504456);

procedure write($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.22, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $CurrAddr;



implementation write($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i64;
  var $p65: ref;
  var $i66: i64;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $i37: i32;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i113: i8;
  var $i114: i1;
  var $p115: ref;
  var $i15: i32;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var vslice_dummy_var_404: i32;
  var vslice_dummy_var_405: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} {:cexpr "write:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $i6 := $M.2;
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 2);
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1256, 1));
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} $i13 := sanity_check($p5, $p12, .str.161);
    call {:si_unique_call 1424} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1176, 1));
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(0, 1));
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 2);
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i39, $i40, $p41 := 0, $i2, $p1;
    goto $bb24;

  $bb24:
    call $i39, $i40, $p41, $p42, $i43, $p44, $i45, $i46, $i47, $p48, $i49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $p60, $p61, $p62, $i63, $i64, $p65, $i66, $p67, $i68, $i69, $p70, $p71, $i72, $p73, $i74, $i75, $p76, $i77, $p78, $i79, $i80, $p81, $p82, $i83, $i84, $p85, $p86, $i87, $p88, $i89, $i90, cmdloc_dummy_var_37, cmdloc_dummy_var_38, cmdloc_dummy_var_39 := write_loop_$bb24($p5, $i39, $i40, $p41, $p42, $i43, $p44, $i45, $i46, $i47, $p48, $i49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $p60, $p61, $p62, $i63, $i64, $p65, $i66, $p67, $i68, $i69, $p70, $p71, $i72, $p73, $i74, $i75, $p76, $i77, $p78, $i79, $i80, $p81, $p82, $i83, $i84, $p85, $p86, $i87, $p88, $i89, $i90, cmdloc_dummy_var_37, cmdloc_dummy_var_38, cmdloc_dummy_var_39);
    goto $bb24_last;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32($i43, $i45);
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32($i46, 1);
    call {:si_unique_call 1429} {:cexpr "_min1"} boogie_si_record_i32($i47);
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1184, 1));
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i49, $i51);
    call {:si_unique_call 1430} {:cexpr "_min2"} boogie_si_record_i32($i52);
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $i53 := $ult.i32($i47, $i52);
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i53 == 1);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $i54 := $i52;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i40, $i54);
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i55 == 1);
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    $i56 := $i54;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    $i57 := $sle.i32($i56, 0);
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    $i58, $i59 := $i39, $i40;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1176, 1));
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1184, 1));
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i63);
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p61, $mul.ref($i64, 1));
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i56);
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_37 := $M.0;
    cmdloc_dummy_var_38 := $M.0;
    call {:si_unique_call 1431} cmdloc_dummy_var_39 := $memcpy.i8(cmdloc_dummy_var_37, cmdloc_dummy_var_38, $p65, $p41, $i66, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_39;
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} ldv_spin_lock();
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1184, 1));
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i68, $i56);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1184, 1));
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, $i69);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1184, 1));
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $i75 := $uge.i32($i72, $i74);
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i83, $i56);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, $i84);
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} spin_unlock_irqrestore($p86, $u0);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i56);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p41, $mul.ref($i87, 1));
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $i89 := $sub.i32($i40, $i56);
    call {:si_unique_call 1434} {:cexpr "count"} boogie_si_record_i32($i89);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i39, $i56);
    call {:si_unique_call 1435} {:cexpr "ret"} boogie_si_record_i32($i90);
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    $i39, $i40, $p41 := $i90, $i89, $p88;
    goto corral_source_split_9287_dummy;

  $bb35:
    assume $i75 == 1;
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1184, 1));
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $i80 := $sub.i32($i77, $i79);
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1184, 1));
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, $i80);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb31:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(0, 1));
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $i93 := $load.i64($M.0, $p92);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $i94 := $eq.i64($i93, 2);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i37 := $i58;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i15 := $i37;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $i116 := $M.2;
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $i117 := $sgt.i32($i116, 2);
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb55:
    assume $i117 == 1;
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} vslice_dummy_var_405 := printk.ref.ref.i32.ref.i32(.str.162, .str.1, 996, $p119, $i15);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb44:
    assume $i103 == 1;
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p0);
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p104, $mul.ref(1356, 1));
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 0);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb46;

  $bb47:
    assume $i108 == 1;
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1368, 1));
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 0);
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb46;

  $bb49:
    assume $i111 == 1;
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} ldv_spin_lock();
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(5999, 1));
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.0, $p112);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i8.i1($i113);
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i114 == 1);
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} tx_start($p5);
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} spin_unlock_irqrestore($p115, $u0);
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb51:
    assume $i114 == 1;
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb38:
    assume $i94 == 1;
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i59, 0);
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1176, 1));
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} tx_load_dma_buffer($p5, $p98, $i100);
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume $i95 == 1;
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, 0);
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb28:
    assume $i55 == 1;
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $i56 := $i40;
    goto $bb30;

  $bb25:
    assume $i53 == 1;
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    $i54 := $i47;
    goto $bb27;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $i26 := $ugt.i32($i2, $i25);
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(5999, 1));
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i28);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    call {:si_unique_call 1426} {:cexpr "write:arg:tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i2);
    call {:si_unique_call 1427} {:cexpr "write:arg:ret"} boogie_si_record_i32($i2);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} tx_load_dma_buffer($p5, $p1, $i2);
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    $i37 := $i2;
    goto $bb21;

  $bb19:
    assume $i32 == 1;
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1176, 1));
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} tx_load_dma_buffer($p5, $p34, $i36);
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb21;

  $bb16:
    assume $i29 == 1;
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 5);
    goto $bb6;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} vslice_dummy_var_404 := printk.ref.ref.i32.ref.i32(.str.160, .str.1, 931, $p9, $i2);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_9287_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9214;
}



const put_char: ref;

axiom put_char == $sub.ref(0, 505488);

procedure put_char($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0;



implementation put_char($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $i15: i32;
  var vslice_dummy_var_406: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} {:cexpr "put_char:arg:ch"} boogie_si_record_i8($i1);
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    $i5 := $M.2;
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 2);
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1256, 1));
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} $i13 := sanity_check($p4, $p12, .str.124);
    call {:si_unique_call 1444} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(1176, 1));
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} ldv_spin_lock();
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(0, 1));
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 2);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i23 == 1);
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(5999, 1));
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i30, 1);
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    $i32 := $ult.i32($i28, $i31);
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} spin_unlock_irqrestore($p60, $u0);
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    $i15 := $i59;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb16:
    assume $i32 == 1;
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(1184, 1));
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    call {:si_unique_call 1446} {:cexpr "tmp___0"} boogie_si_record_i32($i34);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(1184, 1));
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 1);
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(1184, 1));
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i37);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(1176, 1));
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i34);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p40, $mul.ref($i41, 1));
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, $i1);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(1184, 1));
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    $i47 := $uge.i32($i44, $i46);
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i55, 1);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    $i58 := 1;
    goto $bb21;

  $bb18:
    assume $i47 == 1;
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(1184, 1));
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i49, $i51);
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(1184, 1));
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb22;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb12;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i1);
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} vslice_dummy_var_406 := printk.ref.ref.i32.ref.i32(.str.123, .str.1, 1010, $p8, $i9);
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const flush_chars: ref;

axiom flush_chars == $sub.ref(0, 506520);

procedure flush_chars($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.22, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $CurrAddr;



implementation flush_chars($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i1;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var vslice_dummy_var_407: i32;
  var vslice_dummy_var_408: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $i4 := $M.2;
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 2);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1256, 1));
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} $i13 := sanity_check($p3, $p12, .str.174);
    call {:si_unique_call 1450} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    $i17 := $sle.i32($i16, 0);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i17 == 1);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p0);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(1356, 1));
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1368, 1));
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(1176, 1));
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i30 := $M.2;
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    $i31 := $sgt.i32($i30, 2);
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} ldv_spin_lock();
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(5999, 1));
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1($i36);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i37 == 1);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(0, 1));
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, $p39);
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 2);
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} tx_start($p3);
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} spin_unlock_irqrestore($p49, $u0);
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume $i41 == 1;
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb25;

  $bb26:
    assume $i44 == 1;
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(1176, 1));
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} tx_load_dma_buffer($p3, $p46, $i48);
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb21:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb18:
    assume $i31 == 1;
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} vslice_dummy_var_408 := printk.ref.ref.i32.ref(.str.175, .str.1, 1172, $p33);
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb9;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb9;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} vslice_dummy_var_407 := printk.ref.ref.i32.ref.i32(.str.173, .str.1, 1161, $p7, $i9);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const write_room: ref;

axiom write_room == $sub.ref(0, 507552);

procedure write_room($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation write_room($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i1;
  var $i16: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i17: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i8: i32;
  var vslice_dummy_var_409: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1256, 1));
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} $i6 := sanity_check($p3, $p5, .str.166);
    call {:si_unique_call 1457} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(0, 1));
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 2);
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i19, $i21);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32($i22, 1);
    call {:si_unique_call 1459} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $i23;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i17 := $i25;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    $i26 := $M.2;
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    $i27 := $sgt.i32($i26, 2);
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i8 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} vslice_dummy_var_409 := printk.ref.ref.i32.ref.i32(.str.167, .str.1, 1147, $p29, $i17);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb10;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(5999, 1));
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $i16 := (if $i15 == 1 then 0 else 65535);
    call {:si_unique_call 1458} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const chars_in_buffer: ref;

axiom chars_in_buffer == $sub.ref(0, 508584);

procedure chars_in_buffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation chars_in_buffer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p16: ref;
  var $i17: i32;
  var $i8: i32;
  var vslice_dummy_var_410: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1256, 1));
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} $i6 := sanity_check($p3, $p5, .str.170);
    call {:si_unique_call 1462} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $M.2;
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i9, 2);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    $i8 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} vslice_dummy_var_410 := printk.ref.ref.i32.ref.i32(.str.171, .str.1, 1462, $p12, $i14);
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const ioctl: ref;

axiom ioctl == $sub.ref(0, 509616);

procedure ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.51, $M.52, $M.53, $M.54, $M.55, $M.50, $M.59, $M.61, $M.60, $M.56, $M.58, $M.57, $M.22, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $CurrAddr, $M.45, $M.46, $M.38, $M.37, $M.39, $M.41, $M.43;



implementation ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i16: i32;
  var vslice_dummy_var_411: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} {:cexpr "ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 1465} {:cexpr "ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i2);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $i7 := $M.2;
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 2);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1256, 1));
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} $i14 := sanity_check($p5, $p13, .str.142);
    call {:si_unique_call 1468} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i1, 21534);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i1, 27908);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i1, 27911);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i1, 27913);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i1, 1076915456);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i1, 1076915456);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 515);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb28:
    assume $i28 == 1;
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p6);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} $i43 := set_params($p5, $p42);
    call {:si_unique_call 1470} {:cexpr "tmp___1"} boogie_si_record_i32($i43);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    $i16 := $i43;
    goto $bb6;

  $bb26:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i1, 27913);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb30;

  $bb31:
    assume $i29 == 1;
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb6;

  $bb24:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i1, 27911);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb30;

  $bb33:
    assume $i30 == 1;
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p6);
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} $i54 := get_stats($p5, $p53);
    call {:si_unique_call 1472} {:cexpr "tmp___7"} boogie_si_record_i32($i54);
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    $i16 := $i54;
    goto $bb6;

  $bb22:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i1, 27909);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i1, 27910);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i32 == 1);
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} $i52 := tx_abort($p5);
    call {:si_unique_call 1478} {:cexpr "tmp___6"} boogie_si_record_i32($i52);
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    $i16 := $i52;
    goto $bb6;

  $bb37:
    assume $i32 == 1;
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i64.i32($i2);
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} $i51 := rx_enable($p5, $i50);
    call {:si_unique_call 1476} {:cexpr "tmp___5"} boogie_si_record_i32($i51);
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    $i16 := $i51;
    goto $bb6;

  $bb35:
    assume $i31 == 1;
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i64.i32($i2);
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} $i49 := tx_enable($p5, $i48);
    call {:si_unique_call 1474} {:cexpr "tmp___4"} boogie_si_record_i32($i49);
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $i16 := $i49;
    goto $bb6;

  $bb20:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i1, 21596);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i1, 27906);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i1, 27907);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i35 == 1);
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p6);
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} $i45 := get_txidle($p5, $p44);
    call {:si_unique_call 1482} {:cexpr "tmp___2"} boogie_si_record_i32($i45);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $i16 := $i45;
    goto $bb6;

  $bb43:
    assume $i35 == 1;
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i64.i32($i2);
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} $i47 := set_txidle($p5, $i46);
    call {:si_unique_call 1480} {:cexpr "tmp___3"} boogie_si_record_i32($i47);
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    $i16 := $i47;
    goto $bb6;

  $bb41:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i1, 21596);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb30;

  $bb45:
    assume $i36 == 1;
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i64.i32($i2);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} $i58 := modem_input_wait($p5, $i57);
    call {:si_unique_call 1484} {:cexpr "tmp___9"} boogie_si_record_i32($i58);
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    $i16 := $i58;
    goto $bb6;

  $bb39:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i1, $sub.i32(0, 1073451768));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i1, $sub.i32(0, 1073451768));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb30;

  $bb49:
    assume $i38 == 1;
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p6);
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} $i56 := wait_mgsl_event($p5, $p55);
    call {:si_unique_call 1486} {:cexpr "tmp___8"} boogie_si_record_i32($i56);
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    $i16 := $i56;
    goto $bb6;

  $bb47:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i1, $sub.i32(0, 2144310015));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb30;

  $bb51:
    assume $i39 == 1;
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p6);
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} $i41 := get_params($p5, $p40);
    call {:si_unique_call 1488} {:cexpr "tmp___0"} boogie_si_record_i32($i41);
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $i16 := $i41;
    goto $bb6;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i1, 21535);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i1, 21596);
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb10;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1336, 1));
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 2);
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i23 == 1;
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 5);
    goto $bb6;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 19);
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} vslice_dummy_var_411 := printk.ref.ref.i32.ref.i32(.str.141, .str.1, 1270, $p10, $i1);
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const set_termios: ref;

axiom set_termios == $sub.ref(0, 510648);

procedure set_termios($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.3, $M.5, $M.7, $M.9, $M.22, $M.4, $M.6, $M.8, $M.10, $CurrAddr;



implementation set_termios($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i8;
  var $p42: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i8;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i8;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var vslice_dummy_var_412: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    $i5 := $M.2;
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 2);
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} change_params($p4);
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 4111);
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 4111);
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i64, 0);
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    return;

  $bb22:
    assume $i65 == 1;
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $i69 := $sge.i32($i68, 0);
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb24;

  $bb25:
    assume $i69 == 1;
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1368, 1));
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, 0);
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} tx_release($p0);
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 4111);
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb12;

  $bb13:
    assume $i36 == 1;
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i39, 128);
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, $i41);
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    $i46 := $sge.i32($i45, 0);
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i46 == 1);
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1336, 1));
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} $i54 := constant_test_bit(0, $p53);
    call {:si_unique_call 1495} {:cexpr "tmp"} boogie_si_record_i32($i54);
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} ldv_spin_lock();
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} set_signals($p4);
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} spin_unlock_irqrestore($p62, $u0);
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i55 == 1;
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $i59 := $or.i32($i58, 32);
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, $i60);
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i46 == 1;
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    $i50 := $or.i32($i49, 32);
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, $i51);
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 4111);
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb6;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 95);
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, $i25);
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} ldv_spin_lock();
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} set_signals($p4);
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} spin_unlock_irqrestore($p27, $u0);
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(16, 1));
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} vslice_dummy_var_412 := printk.ref.ref.i32.ref(.str.138, .str.1, 877, $p10);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const throttle: ref;

axiom throttle == $sub.ref(0, 511680);

procedure throttle($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.22, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $CurrAddr;



implementation throttle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i8;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i8;
  var $p33: ref;
  var $p34: ref;
  var vslice_dummy_var_413: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    $i4 := $M.2;
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 2);
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1256, 1));
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} $i11 := sanity_check($p3, $p10, .str.126);
    call {:si_unique_call 1502} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 4096);
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, 0);
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} ldv_spin_lock();
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 223);
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $i32);
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} set_signals($p3);
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} spin_unlock_irqrestore($p34, $u0);
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(17, 1)), $mul.ref(9, 1));
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    $i22 := $sext.i8.i32($i21);
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} send_xchar($p0, $i23);
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} vslice_dummy_var_413 := printk.ref.ref.i32.ref(.str.125, .str.1, 1476, $p7);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const unthrottle: ref;

axiom unthrottle == $sub.ref(0, 512712);

procedure unthrottle($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.22, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $CurrAddr;



implementation unthrottle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i8;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i8;
  var $p37: ref;
  var $p38: ref;
  var vslice_dummy_var_414: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $i4 := $M.2;
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 2);
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1256, 1));
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} $i11 := sanity_check($p3, $p10, .str.130);
    call {:si_unique_call 1509} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 4096);
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} ldv_spin_lock();
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i34, 32);
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, $i36);
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} set_signals($p3);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} spin_unlock_irqrestore($p38, $u0);
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(1160, 1));
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(17, 1)), $mul.ref(8, 1));
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    $i26 := $sext.i8.i32($i25);
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} send_xchar($p0, $i27);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(1160, 1));
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 0);
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} vslice_dummy_var_414 := printk.ref.ref.i32.ref(.str.129, .str.1, 1501, $p7);
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tx_hold: ref;

axiom tx_hold == $sub.ref(0, 513744);

procedure tx_hold($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.3, $M.5, $M.7, $M.9;



implementation tx_hold($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i1;
  var $p16: ref;
  var vslice_dummy_var_415: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1256, 1));
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $i6 := sanity_check($p3, $p5, .str.157);
    call {:si_unique_call 1515} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $M.2;
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 2);
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} ldv_spin_lock();
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(5998, 1));
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} spin_unlock_irqrestore($p16, $u0);
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} tx_stop($p3);
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} vslice_dummy_var_415 := printk.ref.ref.i32.ref(.str.158, .str.1, 1225, $p11);
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tx_release: ref;

axiom tx_release == $sub.ref(0, 514776);

procedure tx_release($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.22, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $CurrAddr;



implementation tx_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i1;
  var $p16: ref;
  var vslice_dummy_var_416: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1256, 1));
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} $i6 := sanity_check($p3, $p5, .str.119);
    call {:si_unique_call 1521} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $M.2;
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 2);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} ldv_spin_lock();
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(5998, 1));
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} tx_start($p3);
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} spin_unlock_irqrestore($p16, $u0);
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} vslice_dummy_var_416 := printk.ref.ref.i32.ref(.str.120, .str.1, 1245, $p11);
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hangup: ref;

axiom hangup == $sub.ref(0, 515808);

procedure hangup($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.3, $M.5, $M.7, $M.9;



implementation hangup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var vslice_dummy_var_417: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    $i4 := $M.2;
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 2);
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1256, 1));
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} $i11 := sanity_check($p3, $p10, .str.128);
    call {:si_unique_call 1528} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(696, 1));
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} mutex_lock_nested($p14, 0);
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} flush_buffer($p0);
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} shutdown($p3);
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} ldv_spin_lock();
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(412, 1));
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 0);
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 3758096383);
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p22, $i20);
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(312, 1));
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $0.ref);
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(336, 1));
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} spin_unlock_irqrestore($p26, $u0);
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(696, 1));
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} mutex_unlock($p28);
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} __wake_up($p30, 1, 1, $0.ref);
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} vslice_dummy_var_417 := printk.ref.ref.i32.ref(.str.127, .str.1, 850, $p7);
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const set_break: ref;

axiom set_break == $sub.ref(0, 516840);

procedure set_break($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0;



implementation set_break($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i15: i8;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $i20: i8;
  var $i24: i32;
  var $i25: i8;
  var $p26: ref;
  var $i14: i32;
  var vslice_dummy_var_418: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} {:cexpr "set_break:arg:break_state"} boogie_si_record_i32($i1);
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    $i5 := $M.2;
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 2);
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1256, 1));
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} $i12 := sanity_check($p4, $p11, .str.169);
    call {:si_unique_call 1539} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} ldv_spin_lock();
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} $i15 := read_reg($p4, 49);
    call {:si_unique_call 1542} {:cexpr "RegValue"} boogie_si_record_i8($i15);
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i15);
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 247);
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    call {:si_unique_call 1544} {:cexpr "RegValue"} boogie_si_record_i8($i23);
    assume {:verifier.code 0} true;
    $i20 := $i23;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i20);
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} write_reg($p4, 49, $i25);
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} spin_unlock_irqrestore($p26, $u0);
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i15);
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, 8);
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    call {:si_unique_call 1543} {:cexpr "RegValue"} boogie_si_record_i8($i19);
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb10;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} vslice_dummy_var_418 := printk.ref.ref.i32.ref.i32(.str.168, .str.1, 1532, $p8, $i1);
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const flush_buffer: ref;

axiom flush_buffer == $sub.ref(0, 517872);

procedure flush_buffer($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.3, $M.5, $M.7, $M.9;



implementation flush_buffer($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var vslice_dummy_var_419: i32;
  var vslice_dummy_var_420: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    $i4 := $M.2;
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 2);
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1256, 1));
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} $i11 := sanity_check($p3, $p10, .str.140);
    call {:si_unique_call 1549} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} ldv_spin_lock();
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 0);
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(1184, 1));
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 0);
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 0);
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(1376, 1));
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} vslice_dummy_var_420 := ldv_del_timer_42($p16);
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} spin_unlock_irqrestore($p18, $u0);
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} tty_wakeup($p0);
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} vslice_dummy_var_419 := printk.ref.ref.i32.ref(.str.139, .str.1, 1200, $p7);
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wait_until_sent: ref;

axiom wait_until_sent == $sub.ref(0, 518904);

procedure wait_until_sent($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation wait_until_sent($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i64;
  var $i29: i1;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i64;
  var $i35: i1;
  var $i36: i64;
  var $i37: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i43: i8;
  var $i44: i1;
  var $i45: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i50: i1;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $i56: i8;
  var $i57: i1;
  var $p58: ref;
  var $i59: i8;
  var $i60: i1;
  var $i61: i32;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $i66: i1;
  var $i67: i64;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $i71: i1;
  var $i72: i8;
  var $i73: i1;
  var $p74: ref;
  var $i75: i8;
  var $i76: i1;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var vslice_dummy_var_421: i32;
  var vslice_dummy_var_422: i64;
  var vslice_dummy_var_423: i64;
  var vslice_dummy_var_424: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} {:cexpr "wait_until_sent:arg:timeout"} boogie_si_record_i32($i1);
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $M.2;
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 2);
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1256, 1));
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} $i14 := sanity_check($p4, $p13, .str.177);
    call {:si_unique_call 1557} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} $i18 := constant_test_bit(31, $p17);
    call {:si_unique_call 1559} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, jiffies);
    call {:si_unique_call 1560} {:cexpr "orig_jiffies"} boogie_si_record_i64($i20);
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(32, 1));
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i32 := 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i1, 0);
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i37 := $i32;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(0, 1));
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, $p39);
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 2);
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i41 == 1);
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(5999, 1));
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_10099;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i8.i1($i59);
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i77 := $M.2;
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    $i78 := $sgt.i32($i77, 2);
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb68:
    assume $i78 == 1;
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} vslice_dummy_var_424 := printk.ref.ref.i32.ref(.str.178, .str.1, 1124, $p80);
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb48:
    assume $i60 == 1;
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    call $i61, $p63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $p74, $i75, $i76, vslice_dummy_var_423 := wait_until_sent_loop_$bb51($i1, $p4, $i20, $i37, $p58, $i61, $p63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $p74, $i75, $i76, vslice_dummy_var_423);
    goto $bb51_last;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i8.i1($i75);
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i76 == 1);
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb65:
    assume $i76 == 1;
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} $i61 := jiffies_to_msecs($i37);
    call {:si_unique_call 1571} {:cexpr "tmp___4"} boogie_si_record_i32($i61);
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} vslice_dummy_var_423 := msleep_interruptible($i61);
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} $p63 := get_current();
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} $i64 := signal_pending($p63);
    call {:si_unique_call 1575} {:cexpr "tmp___6"} boogie_si_record_i32($i64);
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i1, 0);
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.0, $p58);
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i8.i1($i72);
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i73 == 1);
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb63_dummy;

  $bb57:
    assume $i66 == 1;
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i1);
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i67, $i20);
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.0, jiffies);
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    $i70 := $sub.i64($i68, $i69);
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    $i71 := $slt.i64($i70, 0);
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb59;

  $bb60:
    assume $i71 == 1;
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb53:
    assume $i65 == 1;
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb27:
    assume $i41 == 1;
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(5999, 1));
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i8.i1($i43);
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb29:
    assume $i44 == 1;
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    call $i45, $p47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, vslice_dummy_var_422 := wait_until_sent_loop_$bb32($i1, $i20, $i37, $p42, $i45, $p47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, vslice_dummy_var_422);
    goto $bb32_last;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} $i45 := jiffies_to_msecs($i37);
    call {:si_unique_call 1565} {:cexpr "tmp___1"} boogie_si_record_i32($i45);
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} vslice_dummy_var_422 := msleep_interruptible($i45);
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} $p47 := get_current();
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} $i48 := signal_pending($p47);
    call {:si_unique_call 1569} {:cexpr "tmp___3"} boogie_si_record_i32($i48);
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i1, 0);
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p42);
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i8.i1($i56);
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i57 == 1);
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb44_dummy;

  $bb38:
    assume $i50 == 1;
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i1);
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, $i20);
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, jiffies);
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    $i54 := $sub.i64($i52, $i53);
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    $i55 := $slt.i64($i54, 0);
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb40;

  $bb41:
    assume $i55 == 1;
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb34:
    assume $i49 == 1;
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb21:
    assume $i33 == 1;
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i1);
    call {:si_unique_call 1563} {:cexpr "__min2"} boogie_si_record_i64($i34);
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $i35 := $ult.i64($i32, $i34);
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i35 == 1);
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    $i36 := $i34;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb26;

  $bb23:
    assume $i35 == 1;
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    $i36 := $i32;
    goto $bb25;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(1156, 1));
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    $i27 := $sdiv.i32($i26, 160);
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    call {:si_unique_call 1561} {:cexpr "char_time"} boogie_si_record_i64($i28);
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i31 := $i28;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb20;

  $bb17:
    assume $i29 == 1;
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i28, 1);
    call {:si_unique_call 1562} {:cexpr "char_time"} boogie_si_record_i64($i30);
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb19;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} vslice_dummy_var_421 := printk.ref.ref.i32.ref(.str.176, .str.1, 1073, $p10);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb63_dummy:
    assume false;
    return;

  $bb51_last:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(5998, 1));
    goto corral_source_split_10130;

  $bb44_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    goto $bb33;
}



const send_xchar: ref;

axiom send_xchar == $sub.ref(0, 519936);

procedure send_xchar($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.22, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $CurrAddr;



implementation send_xchar($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i1;
  var $p22: ref;
  var vslice_dummy_var_425: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} {:cexpr "send_xchar:arg:ch"} boogie_si_record_i8($i1);
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    $i5 := $M.2;
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 2);
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1256, 1));
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} $i13 := sanity_check($p4, $p12, .str.122);
    call {:si_unique_call 1580} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $sext.i8.i32($i1);
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(1160, 1));
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    $i17 := $sext.i8.i32($i1);
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} ldv_spin_lock();
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(5998, 1));
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} tx_start($p4);
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} spin_unlock_irqrestore($p22, $u0);
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    $i9 := $sext.i8.i32($i1);
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} vslice_dummy_var_425 := printk.ref.ref.i32.ref.i32(.str.121, .str.1, 1046, $p8, $i9);
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tiocmget: ref;

axiom tiocmget == $sub.ref(0, 520968);

procedure tiocmget($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0;



implementation tiocmget($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var vslice_dummy_var_426: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} ldv_spin_lock();
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} get_signals($p3);
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} spin_unlock_irqrestore($p4, $u0);
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 32);
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    $i10 := (if $i9 == 1 then 4 else 0);
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    $i13 := $sext.i8.i32($i12);
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    $i15 := (if $i14 == 1 then 2 else 0);
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i10, $i15);
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 1);
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    $i22 := (if $i21 == 1 then 64 else 0);
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i16, $i22);
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 4);
    goto corral_source_split_10235;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    $i29 := (if $i28 == 1 then 128 else 0);
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i23, $i29);
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 64);
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    $i36 := (if $i35 == 1 then 256 else 0);
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i30, $i36);
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 16);
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    $i43 := (if $i42 == 1 then 32 else 0);
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i37, $i43);
    call {:si_unique_call 1587} {:cexpr "result"} boogie_si_record_i32($i44);
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    $i45 := $M.2;
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    $i46 := $sgt.i32($i45, 2);
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i44;
    return;

  $bb1:
    assume $i46 == 1;
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} vslice_dummy_var_426 := printk.ref.ref.i32.ref.i32(.str.172, .str.1, 3228, $p48, $i44);
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tiocmset: ref;

axiom tiocmset == $sub.ref(0, 522000);

procedure tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1;



implementation tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i8;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i8;
  var $p42: ref;
  var $p43: ref;
  var vslice_dummy_var_427: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} {:cexpr "tiocmset:arg:set"} boogie_si_record_i32($i1);
    call {:si_unique_call 1590} {:cexpr "tiocmset:arg:clear"} boogie_si_record_i32($i2);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $i6 := $M.2;
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 2);
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i1, 4);
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i1, 2);
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i2, 4);
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i2, 2);
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} ldv_spin_lock();
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} set_signals($p5);
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} spin_unlock_irqrestore($p43, $u0);
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb13:
    assume $i36 == 1;
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 127);
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, $i41);
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i28 == 1;
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 223);
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_10306;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, $i33);
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, 128);
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, $i25);
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 32);
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i17);
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} vslice_dummy_var_427 := printk.ref.ref.i32.ref.i32.i32(.str.159, .str.1, 3242, $p9, $i1, $i2);
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_icount: ref;

axiom get_icount == $sub.ref(0, 523032);

procedure get_icount($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $CurrAddr;



implementation get_icount($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} $p2 := $alloc($mul.ref(92, $zext.i32.i64(1)));
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} ldv_spin_lock();
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1064, 1));
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p6);
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_40 := $M.0;
    cmdloc_dummy_var_41 := $M.0;
    call {:si_unique_call 1597} cmdloc_dummy_var_42 := $memcpy.i8(cmdloc_dummy_var_40, cmdloc_dummy_var_41, $p7, $p8, 92, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_42;
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} spin_unlock_irqrestore($p9, $u0);
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(0, 1));
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(8, 1));
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(12, 1));
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(20, 1));
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(16, 1));
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(20, 1));
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(24, 1));
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(32, 1));
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(28, 1));
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(28, 1));
    goto corral_source_split_10369;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(36, 1));
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(40, 1));
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const sanity_check: ref;

axiom sanity_check == $sub.ref(0, 524064);

procedure sanity_check($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sanity_check($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;
}



const jiffies_to_msecs: ref;

axiom jiffies_to_msecs == $sub.ref(0, 525096);

procedure jiffies_to_msecs($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation jiffies_to_msecs($i0: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1599} {:cexpr "jiffies_to_msecs:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1600} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1601} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 526128);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} $p0 := devirtbounce.3(0, current_task);
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const signal_pending: ref;

axiom signal_pending == $sub.ref(0, 527160);

procedure signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} $i1 := test_tsk_thread_flag($p0, 2);
    call {:si_unique_call 1604} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1606} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0, 528192);

procedure test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} {:cexpr "test_tsk_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11744)), $mul.ref(8, 1));
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.50, $p2);
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} $i5 := test_ti_thread_flag($p4, $i1);
    call {:si_unique_call 1609} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 529224);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} {:cexpr "test_ti_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} $i5 := variable_test_bit($i2, $p4);
    call {:si_unique_call 1612} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 530256);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1614} $i2 := devirtbounce.4(0, $p1, $i0);
    call {:si_unique_call 1615} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_del_timer_42: ref;

axiom ldv_del_timer_42 == $sub.ref(0, 531288);

procedure ldv_del_timer_42($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9;



implementation ldv_del_timer_42($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} $i1 := del_timer($p0);
    call {:si_unique_call 1617} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} disable_suitable_timer_3($p0);
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 532320);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 533352);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    return;
}



const get_params: ref;

axiom get_params == $sub.ref(0, 534384);

procedure get_params($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_params($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $p16: ref;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i23: i32;
  var vslice_dummy_var_428: i32;
  var vslice_dummy_var_429: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    $i2 := $M.2;
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 2);
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(696, 1));
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} mutex_lock_nested($p8, 0);
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1));
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} $i12 := copy_to_user($p9, $p11, 48);
    call {:si_unique_call 1623} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    $i14 := (if $i13 == 1 then $sub.i32(0, 14) else 0);
    call {:si_unique_call 1624} {:cexpr "err"} boogie_si_record_i32($i14);
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(696, 1));
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} mutex_unlock($p16);
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i14, 0);
    goto corral_source_split_10444;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    $i18 := $M.2;
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, 2);
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 14);
    goto $bb9;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} vslice_dummy_var_429 := printk.ref.ref.i32.ref(.str.144, .str.1, 2895, $p21);
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} vslice_dummy_var_428 := printk.ref.ref.i32.ref(.str.143, .str.1, 2887, $p5);
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const set_params: ref;

axiom set_params == $sub.ref(0, 535416);

procedure set_params($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $CurrAddr, $M.3, $M.5, $M.7, $M.9;



implementation set_params($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i19: i32;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var vslice_dummy_var_430: i32;
  var vslice_dummy_var_431: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} $p2 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    $i3 := $M.2;
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 2);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} $i10 := copy_from_user($p8, $p9, 48);
    call {:si_unique_call 1630} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    $i12 := (if $i11 == 1 then $sub.i32(0, 14) else 0);
    call {:si_unique_call 1631} {:cexpr "err"} boogie_si_record_i32($i12);
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(696, 1));
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} mutex_lock_nested($p21, 0);
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} ldv_spin_lock();
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1));
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p2);
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_43 := $M.0;
    cmdloc_dummy_var_44 := $M.0;
    call {:si_unique_call 1635} cmdloc_dummy_var_45 := $memcpy.i8(cmdloc_dummy_var_43, cmdloc_dummy_var_44, $p23, $p24, 48, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_45;
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} spin_unlock_irqrestore($p25, $u0);
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} change_params($p0);
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(696, 1));
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} mutex_unlock($p27);
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    $i14 := $M.2;
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, 2);
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 14);
    goto $bb9;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_10477;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} vslice_dummy_var_431 := printk.ref.ref.i32.ref(.str.146, .str.1, 2915, $p17);
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} vslice_dummy_var_430 := printk.ref.ref.i32.ref(.str.145, .str.1, 2910, $p6);
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_txidle: ref;

axiom get_txidle == $sub.ref(0, 536448);

procedure get_txidle($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_txidle($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i21: i32;
  var vslice_dummy_var_432: i32;
  var vslice_dummy_var_433: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    $i2 := $M.2;
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 2);
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6000, 1));
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} $i12 := copy_to_user($p9, $p11, 4);
    call {:si_unique_call 1641} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    $i14 := (if $i13 == 1 then $sub.i32(0, 14) else 0);
    call {:si_unique_call 1642} {:cexpr "err"} boogie_si_record_i32($i14);
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    $i16 := $M.2;
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i16, 2);
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 14);
    goto $bb9;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} vslice_dummy_var_433 := printk.ref.ref.i32.ref(.str.148, .str.1, 2942, $p19);
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6000, 1));
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} vslice_dummy_var_432 := printk.ref.ref.i32.ref.i32(.str.147, .str.1, 2936, $p5, $i7);
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const set_txidle: ref;

axiom set_txidle == $sub.ref(0, 537480);

procedure set_txidle($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0;



implementation set_txidle($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var vslice_dummy_var_434: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} {:cexpr "set_txidle:arg:idle_mode"} boogie_si_record_i32($i1);
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    $i2 := $M.2;
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 2);
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} ldv_spin_lock();
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6000, 1));
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i1);
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} tx_set_idle($p0);
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} spin_unlock_irqrestore($p8, $u0);
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} vslice_dummy_var_434 := printk.ref.ref.i32.ref.i32(.str.149, .str.1, 2955, $p5, $i1);
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tx_enable: ref;

axiom tx_enable == $sub.ref(0, 538512);

procedure tx_enable($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.22, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $CurrAddr;



implementation tx_enable($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i1;
  var $p14: ref;
  var vslice_dummy_var_435: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} {:cexpr "tx_enable:arg:enable"} boogie_si_record_i32($i1);
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    $i2 := $M.2;
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 2);
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} ldv_spin_lock();
    goto corral_source_split_10552;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i1, 0);
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5998, 1));
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} spin_unlock_irqrestore($p14, $u0);
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} tx_stop($p0);
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5998, 1));
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} tx_start($p0);
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} vslice_dummy_var_435 := printk.ref.ref.i32.ref.i32(.str.150, .str.1, 2970, $p5, $i1);
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rx_enable: ref;

axiom rx_enable == $sub.ref(0, 539544);

procedure rx_enable($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0;



implementation rx_enable($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i1;
  var $p14: ref;
  var vslice_dummy_var_436: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} {:cexpr "rx_enable:arg:enable"} boogie_si_record_i32($i1);
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    $i2 := $M.2;
    goto corral_source_split_10575;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 2);
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} ldv_spin_lock();
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i1, 0);
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5996, 1));
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} spin_unlock_irqrestore($p14, $u0);
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} rx_stop($p0);
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5996, 1));
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} rx_start($p0);
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} vslice_dummy_var_436 := printk.ref.ref.i32.ref.i32(.str.151, .str.1, 3017, $p5, $i1);
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tx_abort: ref;

axiom tx_abort == $sub.ref(0, 540576);

procedure tx_abort($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0;



implementation tx_abort($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i8;
  var $p29: ref;
  var vslice_dummy_var_437: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    $i1 := $M.2;
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 2);
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} ldv_spin_lock();
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5999, 1));
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_10617;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} spin_unlock_irqrestore($p29, $u0);
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(0, 1));
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 2);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 127);
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i17);
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i21, 64);
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, $i23);
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} write_reg($p0, 41, $i28);
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} write_reg($p0, 35, $sub.i8(0, 64));
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} write_reg($p0, $sub.i8(0, 80), 0);
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} write_reg($p0, $sub.i8(0, 75), 1);
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} write_reg($p0, 44, 7);
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} vslice_dummy_var_437 := printk.ref.ref.i32.ref(.str.152, .str.1, 2993, $p4);
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_stats: ref;

axiom get_stats == $sub.ref(0, 541608);

procedure get_stats($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation get_stats($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $p20: ref;
  var $i21: i1;
  var $i22: i32;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var vslice_dummy_var_438: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    $i2 := $M.2;
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 2);
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p1);
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(696, 1));
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} mutex_lock_nested($p12, 0);
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1));
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} $i16 := copy_to_user($p13, $p15, 92);
    call {:si_unique_call 1673} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    $i18 := (if $i17 == 1 then $sub.i32(0, 14) else 0);
    call {:si_unique_call 1674} {:cexpr "err"} boogie_si_record_i32($i18);
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(696, 1));
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} mutex_unlock($p20);
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i18, 0);
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_10682;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 14);
    goto $bb9;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1));
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_46 := $M.0;
    call {:si_unique_call 1670} cmdloc_dummy_var_47 := $memset.i8(cmdloc_dummy_var_46, $p10, 0, 92, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_47;
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} vslice_dummy_var_438 := printk.ref.ref.i32.ref(.str.143, .str.1, 2867, $p5);
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wait_mgsl_event: ref;

axiom wait_mgsl_event == $sub.ref(0, 542640);

procedure wait_mgsl_event($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.51, $M.52, $M.53, $M.54, $M.55, $M.1, $M.0, $M.50, $M.56, $M.58, $M.57, $CurrAddr, $M.22, $M.45, $M.46, $M.3, $M.5, $M.7, $M.9, $M.4, $M.6, $M.8, $M.10, $M.38, $M.37, $M.39, $M.41, $M.43;



implementation wait_mgsl_event($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i32;
  var $i79: i8;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i8;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $p92: ref;
  var $i93: i64;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $i101: i32;
  var $i99: i32;
  var $i100: i32;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $p114: ref;
  var $i115: i64;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $i123: i32;
  var $p124: ref;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $i128: i32;
  var $p129: ref;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $i133: i32;
  var $p134: ref;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $i138: i32;
  var $p139: ref;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $i143: i32;
  var $p144: ref;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $i148: i32;
  var $p149: ref;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $i153: i32;
  var $p154: ref;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $i158: i32;
  var $p159: ref;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $i163: i32;
  var $p164: ref;
  var $i165: i32;
  var $i166: i1;
  var $i167: i32;
  var $p168: ref;
  var $i169: i32;
  var $p170: ref;
  var $i171: i32;
  var $i172: i1;
  var $i173: i32;
  var $p174: ref;
  var $i175: i32;
  var $p176: ref;
  var $i177: i32;
  var $i178: i1;
  var $i179: i32;
  var $i180: i32;
  var $p181: ref;
  var $i182: i32;
  var $p183: ref;
  var $i184: i32;
  var $i185: i1;
  var $i186: i32;
  var $i187: i32;
  var $p188: ref;
  var $i189: i32;
  var $p190: ref;
  var $i191: i32;
  var $i192: i1;
  var $i193: i32;
  var $i194: i32;
  var $p195: ref;
  var $i196: i32;
  var $p197: ref;
  var $i198: i32;
  var $i199: i1;
  var $i200: i32;
  var $i201: i32;
  var $p202: ref;
  var $i203: i32;
  var $p204: ref;
  var $i205: i32;
  var $i206: i1;
  var $i207: i32;
  var $i208: i32;
  var $p209: ref;
  var $i210: i32;
  var $p211: ref;
  var $i212: i32;
  var $i213: i1;
  var $i214: i32;
  var $i215: i32;
  var $p216: ref;
  var $i217: i32;
  var $p218: ref;
  var $i219: i32;
  var $i220: i1;
  var $i221: i32;
  var $i222: i32;
  var $p223: ref;
  var $i224: i32;
  var $p225: ref;
  var $i226: i32;
  var $i227: i1;
  var $i228: i32;
  var $i229: i32;
  var $p230: ref;
  var $i231: i32;
  var $p232: ref;
  var $i233: i32;
  var $i234: i1;
  var $i235: i32;
  var $i236: i32;
  var $i237: i32;
  var $i238: i32;
  var $i239: i1;
  var $i240: i32;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $i246: i32;
  var $i247: i1;
  var $i102: i32;
  var $i103: i32;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $i252: i64;
  var $p253: ref;
  var $i254: i64;
  var $i255: i32;
  var $i256: i32;
  var $i257: i1;
  var $p258: ref;
  var $i259: i32;
  var $i260: i1;
  var $p261: ref;
  var $i262: i8;
  var $i263: i32;
  var $i264: i32;
  var $i265: i8;
  var $p266: ref;
  var $p267: ref;
  var $i268: i8;
  var $i269: i32;
  var $i270: i8;
  var $p271: ref;
  var $i55: i32;
  var $i56: i32;
  var $i272: i1;
  var $i273: i32;
  var $i274: i32;
  var $i26: i32;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var vslice_dummy_var_439: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} $p2 := $alloc($mul.ref(92, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} $p3 := $alloc($mul.ref(92, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} $p5 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} $p6 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} $p11 := get_current();
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    $M.51 := $store.i32($M.51, $p12, 0);
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    $M.52 := $store.ref($M.52, $p14, $p11);
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    $M.53 := $store.ref($M.53, $p15, default_wake_function);
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_10695;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    $M.54 := $store.ref($M.54, $p17, $0.ref);
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    $M.55 := $store.ref($M.55, $p19, $0.ref);
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p4);
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p1);
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} $i22 := copy_from_user($p20, $p21, 4);
    call {:si_unique_call 1687} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    $i24 := (if $i23 == 1 then $sub.i32(0, 14) else 0);
    call {:si_unique_call 1688} {:cexpr "rc"} boogie_si_record_i32($i24);
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i27 := $M.2;
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    $i28 := $sgt.i32($i27, 2);
    goto corral_source_split_10711;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} ldv_spin_lock();
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} get_signals($p0);
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6152, 1));
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_10722;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    call {:si_unique_call 1692} {:cexpr "s"} boogie_si_record_i32($i35);
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 64);
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    $i38 := (if $i37 == 1 then 1 else 2);
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i35, 1);
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    $i41 := (if $i40 == 1 then 16 else 32);
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i38, $i41);
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i35, 16);
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    $i45 := (if $i44 == 1 then 4 else 8);
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i42, $i45);
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i35, 4);
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    $i49 := (if $i48 == 1 then 64 else 128);
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i46, $i49);
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p4);
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i50, $i51);
    call {:si_unique_call 1693} {:cexpr "events"} boogie_si_record_i32($i52);
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_10741;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1));
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p2);
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p57);
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.0;
    cmdloc_dummy_var_49 := $M.0;
    call {:si_unique_call 1695} cmdloc_dummy_var_50 := $memcpy.i8(cmdloc_dummy_var_48, cmdloc_dummy_var_49, $p58, $p59, 92, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_50;
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6268, 1));
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p5);
    goto corral_source_split_10755;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p60);
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_51 := $M.0;
    cmdloc_dummy_var_52 := $M.0;
    call {:si_unique_call 1696} cmdloc_dummy_var_53 := $memcpy.i8(cmdloc_dummy_var_51, cmdloc_dummy_var_52, $p61, $p62, 32, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_53;
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p4);
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, 768);
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_10760;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} $p88 := get_current();
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_10791;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    $M.50 := $store.i64($M.50, $p89, 0);
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    $M.56 := $store.i64($M.56, $p8, 1);
    goto corral_source_split_10793;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} $p90 := get_current();
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    $i91 := $load.i64($M.56, $p8);
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p90, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 1702} $i93 := devirtbounce.5(0, $p92, $i91, $p92);
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    $M.56 := $store.i64($M.56, $p8, $i93);
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1288, 1));
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} add_wait_queue($p94, $p7);
    goto corral_source_split_10800;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} spin_unlock_irqrestore($p95, $u0);
    goto corral_source_split_10802;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} schedule();
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} $p96 := get_current();
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} $i97 := signal_pending($p96);
    call {:si_unique_call 1708} {:cexpr "tmp___7"} boogie_si_record_i32($i97);
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    $i99 := $i52;
    assume {:branchcond $i98} true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i98 == 1);
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    $i100 := $i52;
    goto $bb22;

  $bb22:
    call $i101, $i100, $p104, $p105, $p106, $p107, $p108, $p109, $p110, $p111, $p112, $i113, $p114, $i115, $p116, $p117, $i118, $p119, $i120, $i121, $p122, $i123, $p124, $i125, $i126, $p127, $i128, $p129, $i130, $i131, $p132, $i133, $p134, $i135, $i136, $p137, $i138, $p139, $i140, $i141, $p142, $i143, $p144, $i145, $i146, $p147, $i148, $p149, $i150, $i151, $p152, $i153, $p154, $i155, $i156, $p157, $i158, $p159, $i160, $i161, $p162, $i163, $p164, $i165, $i166, $i167, $p168, $i169, $p170, $i171, $i172, $i173, $p174, $i175, $p176, $i177, $i178, $i179, $i180, $p181, $i182, $p183, $i184, $i185, $i186, $i187, $p188, $i189, $p190, $i191, $i192, $i193, $i194, $p195, $i196, $p197, $i198, $i199, $i200, $i201, $p202, $i203, $p204, $i205, $i206, $i207, $i208, $p209, $i210, $p211, $i212, $i213, $i214, $i215, $p216, $i217, $p218, $i219, $i220, $i221, $i222, $p223, $i224, $p225, $i226, $i227, $i228, $i229, $p230, $i231, $p232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $p241, $p242, $p243, $p244, $p245, $i246, $i247, cmdloc_dummy_var_54, cmdloc_dummy_var_55, cmdloc_dummy_var_56, cmdloc_dummy_var_57, cmdloc_dummy_var_58, cmdloc_dummy_var_59, cmdloc_dummy_var_60, cmdloc_dummy_var_61, cmdloc_dummy_var_62, cmdloc_dummy_var_63, cmdloc_dummy_var_64, cmdloc_dummy_var_65 := wait_mgsl_event_loop_$bb22($p0, $p2, $p3, $p4, $p5, $p6, $p9, $i101, $i100, $p104, $p105, $p106, $p107, $p108, $p109, $p110, $p111, $p112, $i113, $p114, $i115, $p116, $p117, $i118, $p119, $i120, $i121, $p122, $i123, $p124, $i125, $i126, $p127, $i128, $p129, $i130, $i131, $p132, $i133, $p134, $i135, $i136, $p137, $i138, $p139, $i140, $i141, $p142, $i143, $p144, $i145, $i146, $p147, $i148, $p149, $i150, $i151, $p152, $i153, $p154, $i155, $i156, $p157, $i158, $p159, $i160, $i161, $p162, $i163, $p164, $i165, $i166, $i167, $p168, $i169, $p170, $i171, $i172, $i173, $p174, $i175, $p176, $i177, $i178, $i179, $i180, $p181, $i182, $p183, $i184, $i185, $i186, $i187, $p188, $i189, $p190, $i191, $i192, $i193, $i194, $p195, $i196, $p197, $i198, $i199, $i200, $i201, $p202, $i203, $p204, $i205, $i206, $i207, $i208, $p209, $i210, $p211, $i212, $i213, $i214, $i215, $p216, $i217, $p218, $i219, $i220, $i221, $i222, $p223, $i224, $p225, $i226, $i227, $i228, $i229, $p230, $i231, $p232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $p241, $p242, $p243, $p244, $p245, $i246, $i247, cmdloc_dummy_var_54, cmdloc_dummy_var_55, cmdloc_dummy_var_56, cmdloc_dummy_var_57, cmdloc_dummy_var_58, cmdloc_dummy_var_59, cmdloc_dummy_var_60, cmdloc_dummy_var_61, cmdloc_dummy_var_62, cmdloc_dummy_var_63, cmdloc_dummy_var_64, cmdloc_dummy_var_65);
    goto $bb22_last;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} ldv_spin_lock();
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1));
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p3);
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p104);
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_54 := $M.0;
    cmdloc_dummy_var_55 := $M.0;
    call {:si_unique_call 1714} cmdloc_dummy_var_56 := $memcpy.i8(cmdloc_dummy_var_54, cmdloc_dummy_var_55, $p105, $p106, 92, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_56;
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6268, 1));
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p6);
    goto corral_source_split_10832;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p107);
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_57 := $M.0;
    cmdloc_dummy_var_58 := $M.0;
    call {:si_unique_call 1715} cmdloc_dummy_var_59 := $memcpy.i8(cmdloc_dummy_var_57, cmdloc_dummy_var_58, $p108, $p109, 32, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_59;
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} $p110 := get_current();
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    $M.50 := $store.i64($M.50, $p111, 0);
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    $M.57 := $store.i64($M.57, $p9, 1);
    goto corral_source_split_10838;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} $p112 := get_current();
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    $i113 := $load.i64($M.57, $p9);
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p112, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 1718} $i115 := devirtbounce.5(0, $p114, $i113, $p114);
    goto corral_source_split_10841;

  corral_source_split_10841:
    assume {:verifier.code 0} true;
    $M.57 := $store.i64($M.57, $p9, $i115);
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} spin_unlock_irqrestore($p116, $u0);
    goto corral_source_split_10845;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_10847;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p119);
    goto corral_source_split_10849;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i118, $i120);
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.0, $p168);
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_10919;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.0, $p170);
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    $i172 := $ne.i32($i169, $i171);
    goto corral_source_split_10921;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    $i173 := $zext.i1.i32($i172);
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.0, $p174);
    goto corral_source_split_10924;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.0, $p176);
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    $i178 := $ne.i32($i175, $i177);
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    $i179 := (if $i178 == 1 then 2 else 0);
    goto corral_source_split_10928;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    $i180 := $add.i32($i173, $i179);
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_10930;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    $i182 := $load.i32($M.0, $p181);
    goto corral_source_split_10931;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    $i184 := $load.i32($M.0, $p183);
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    $i185 := $ne.i32($i182, $i184);
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    $i186 := (if $i185 == 1 then 16 else 0);
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    $i187 := $add.i32($i180, $i186);
    goto corral_source_split_10936;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    $i189 := $load.i32($M.0, $p188);
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_10939;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.0, $p190);
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    $i192 := $ne.i32($i189, $i191);
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    $i193 := (if $i192 == 1 then 32 else 0);
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    $i194 := $add.i32($i187, $i193);
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_10944;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    $i196 := $load.i32($M.0, $p195);
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    $i198 := $load.i32($M.0, $p197);
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    $i199 := $ne.i32($i196, $i198);
    goto corral_source_split_10948;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    $i200 := (if $i199 == 1 then 4 else 0);
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    $i201 := $add.i32($i194, $i200);
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_10951;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.0, $p202);
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_10953;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    $i205 := $load.i32($M.0, $p204);
    goto corral_source_split_10954;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    $i206 := $ne.i32($i203, $i205);
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    $i207 := (if $i206 == 1 then 8 else 0);
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    $i208 := $add.i32($i201, $i207);
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    $i210 := $load.i32($M.0, $p209);
    goto corral_source_split_10959;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    $i212 := $load.i32($M.0, $p211);
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    $i213 := $ne.i32($i210, $i212);
    goto corral_source_split_10962;

  corral_source_split_10962:
    assume {:verifier.code 0} true;
    $i214 := (if $i213 == 1 then 64 else 0);
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    $i215 := $add.i32($i208, $i214);
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    $i217 := $load.i32($M.0, $p216);
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_10967;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    $i219 := $load.i32($M.0, $p218);
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    $i220 := $ne.i32($i217, $i219);
    goto corral_source_split_10969;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    $i221 := (if $i220 == 1 then 128 else 0);
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    $i222 := $add.i32($i215, $i221);
    goto corral_source_split_10971;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p3, $mul.ref(0, 92)), $mul.ref(84, 1));
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    $i224 := $load.i32($M.0, $p223);
    goto corral_source_split_10973;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(84, 1));
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    $i226 := $load.i32($M.0, $p225);
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    $i227 := $ne.i32($i224, $i226);
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    $i228 := (if $i227 == 1 then 256 else 0);
    goto corral_source_split_10977;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    $i229 := $add.i32($i222, $i228);
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p3, $mul.ref(0, 92)), $mul.ref(88, 1));
    goto corral_source_split_10979;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    $i231 := $load.i32($M.0, $p230);
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(88, 1));
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    $i233 := $load.i32($M.0, $p232);
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    $i234 := $ne.i32($i231, $i233);
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    $i235 := (if $i234 == 1 then 512 else 0);
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    $i236 := $add.i32($i229, $i235);
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    $i237 := $load.i32($M.0, $p4);
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    $i238 := $and.i32($i236, $i237);
    call {:si_unique_call 1720} {:cexpr "events"} boogie_si_record_i32($i238);
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    $i239 := $ne.i32($i238, 0);
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    $i240 := $i238;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p241 := $bitcast.ref.ref($p2);
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    $p242 := $bitcast.ref.ref($p3);
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_60 := $M.0;
    cmdloc_dummy_var_61 := $M.0;
    call {:si_unique_call 1721} cmdloc_dummy_var_62 := $memcpy.i8(cmdloc_dummy_var_60, cmdloc_dummy_var_61, $p241, $p242, 92, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_62;
    goto corral_source_split_10994;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    $p243 := $bitcast.ref.ref($p5);
    goto corral_source_split_10995;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    $p244 := $bitcast.ref.ref($p6);
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_63 := $M.0;
    cmdloc_dummy_var_64 := $M.0;
    call {:si_unique_call 1722} cmdloc_dummy_var_65 := $memcpy.i8(cmdloc_dummy_var_63, cmdloc_dummy_var_64, $p243, $p244, 32, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_65;
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} schedule();
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} $p245 := get_current();
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} $i246 := signal_pending($p245);
    call {:si_unique_call 1726} {:cexpr "tmp___7"} boogie_si_record_i32($i246);
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    $i247 := $ne.i32($i246, 0);
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    $i101 := $i238;
    assume true;
    goto $bb23, $bb52;

  $bb52:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    $i100 := $i238;
    goto $bb52_dummy;

  $bb23:
    assume $i247 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    $i99 := $i101;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    $i102, $i103 := $sub.i32(0, 512), $i99;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1288, 1));
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} remove_wait_queue($p248, $p7);
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} $p249 := get_current();
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p249, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    $M.50 := $store.i64($M.50, $p250, 0);
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    $M.58 := $store.i64($M.58, $p10, 0);
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} $p251 := get_current();
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    $i252 := $load.i64($M.58, $p10);
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p251, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 1712} $i254 := devirtbounce.5(0, $p253, $i252, $p253);
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    $M.58 := $store.i64($M.58, $p10, $i254);
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i255 := $load.i32($M.0, $p4);
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    $i256 := $and.i32($i255, 768);
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    $i257 := $ne.i32($i256, 0);
    goto corral_source_split_11005;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i55, $i56 := $i102, $i103;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    $i272 := $eq.i32($i55, 0);
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i272} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    $i274 := $i55;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    $i26 := $i274;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb60:
    assume $i272 == 1;
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} __might_fault(.str.1, 3152);
    call {:si_unique_call 1733} $i273 := devirtbounce.6(0, $i56, $p1);
    call {:si_unique_call 1734} {:cexpr "__ret_pu"} boogie_si_record_i32($i273);
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i274 := $i273;
    goto $bb63;

  $bb54:
    assume $i257 == 1;
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} ldv_spin_lock();
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1288, 1));
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} $i259 := waitqueue_active($p258);
    call {:si_unique_call 1729} {:cexpr "tmp___18"} boogie_si_record_i32($i259);
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i259, 0);
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} spin_unlock_irqrestore($p271, $u0);
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb56:
    assume $i260 == 1;
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    $i262 := $load.i8($M.0, $p261);
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    $i263 := $zext.i8.i32($i262);
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    $i264 := $and.i32($i263, 238);
    goto corral_source_split_11017;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    $i265 := $trunc.i32.i8($i264);
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_11019;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p266, $i265);
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    $i268 := $load.i8($M.0, $p267);
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    $i269 := $zext.i8.i32($i268);
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    $i270 := $trunc.i32.i8($i269);
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} write_reg($p0, 41, $i270);
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb49:
    assume $i239 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    $i102, $i103 := $i24, $i240;
    goto $bb24;

  $bb27:
    assume $i121 == 1;
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p122);
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_10855;

  corral_source_split_10855:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i123, $i125);
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i126 == 1);
    goto $bb29;

  $bb30:
    assume $i126 == 1;
    goto corral_source_split_10859;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.0, $p127);
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i128, $i130);
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i131 == 1);
    goto $bb29;

  $bb32:
    assume $i131 == 1;
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i133, $i135);
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i136 == 1);
    goto $bb29;

  $bb34:
    assume $i136 == 1;
    goto corral_source_split_10873;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.0, $p137);
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.0, $p139);
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i138, $i140);
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i141 == 1);
    goto $bb29;

  $bb36:
    assume $i141 == 1;
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_10881;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.0, $p142);
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p144);
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i143, $i145);
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i146 == 1);
    goto $bb29;

  $bb38:
    assume $i146 == 1;
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.0, $p147);
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.0, $p149);
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i148, $i150);
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i151 == 1);
    goto $bb29;

  $bb40:
    assume $i151 == 1;
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.0, $p152);
    goto corral_source_split_10896;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i153, $i155);
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i156 == 1);
    goto $bb29;

  $bb42:
    assume $i156 == 1;
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p3, $mul.ref(0, 92)), $mul.ref(84, 1));
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.0, $p157);
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(84, 1));
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.0, $p159);
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i158, $i160);
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i161 == 1);
    goto $bb29;

  $bb44:
    assume $i161 == 1;
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p3, $mul.ref(0, 92)), $mul.ref(88, 1));
    goto corral_source_split_10909;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, $p162);
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(88, 1));
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.0, $p164);
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i163, $i165);
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    $i167 := $i100;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i166 == 1);
    goto $bb29;

  $bb46:
    assume $i166 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    $i102, $i103 := $sub.i32(0, 5), $i167;
    goto $bb24;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb20;

  $bb12:
    assume $i65 == 1;
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_10763;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    call {:si_unique_call 1697} {:cexpr "oldval"} boogie_si_record_i8($i67);
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p4);
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 256);
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_10767;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    $i71 := (if $i70 == 1 then 16 else 0);
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i67);
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i71, $i72);
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p4);
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 512);
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    $i77 := $zext.i1.i32($i76);
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i73, $i77);
    goto corral_source_split_10775;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i8($i78);
    call {:si_unique_call 1698} {:cexpr "newval"} boogie_si_record_i8($i79);
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i67);
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i79);
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i80, $i81);
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i82 == 1;
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p83, $i79);
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6005, 1));
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.0, $p84);
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i8($i86);
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} write_reg($p0, 41, $i87);
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i53 == 1;
    goto corral_source_split_10743;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} spin_unlock_irqrestore($p54, $u0);
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $i55, $i56 := $i24, $i52;
    goto $bb10;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p4);
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} vslice_dummy_var_439 := printk.ref.ref.i32.ref.i32(.str.153, .str.1, 3051, $p30, $i31);
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 14);
    goto $bb3;

  $bb52_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;
}



const modem_input_wait: ref;

axiom modem_input_wait == $sub.ref(0, 543672);

procedure modem_input_wait($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.51, $M.52, $M.53, $M.54, $M.55, $M.1, $M.0, $M.50, $M.59, $M.61, $M.60, $CurrAddr;



implementation modem_input_wait($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $i31: i32;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $p100: ref;
  var $i101: i64;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} $p2 := $alloc($mul.ref(92, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} $p3 := $alloc($mul.ref(92, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1741} {:cexpr "modem_input_wait:arg:arg"} boogie_si_record_i32($i1);
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} $p8 := get_current();
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    $M.51 := $store.i32($M.51, $p9, 0);
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    goto corral_source_split_11039;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    $M.52 := $store.ref($M.52, $p11, $p8);
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    $M.53 := $store.ref($M.53, $p12, default_wake_function);
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_11044;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    $M.54 := $store.ref($M.54, $p14, $0.ref);
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    $M.55 := $store.ref($M.55, $p16, $0.ref);
    goto corral_source_split_11047;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} ldv_spin_lock();
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1));
    goto corral_source_split_11049;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p17);
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_66 := $M.0;
    cmdloc_dummy_var_67 := $M.0;
    call {:si_unique_call 1744} cmdloc_dummy_var_68 := $memcpy.i8(cmdloc_dummy_var_66, cmdloc_dummy_var_67, $p18, $p19, 92, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_68;
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1200, 1));
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} add_wait_queue($p20, $p4);
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} $p21 := get_current();
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_11056;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    $M.50 := $store.i64($M.50, $p22, 0);
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    $M.59 := $store.i64($M.59, $p5, 1);
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} $p23 := get_current();
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.59, $p5);
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p23, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 1748} $i26 := devirtbounce.5(0, $p25, $i24, $p25);
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    $M.59 := $store.i64($M.59, $p5, $i26);
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} spin_unlock_irqrestore($p27, $u0);
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} schedule();
    goto corral_source_split_11066;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} $p28 := get_current();
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} $i29 := signal_pending($p28);
    call {:si_unique_call 1753} {:cexpr "tmp___6"} boogie_si_record_i32($i29);
    goto corral_source_split_11068;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i30 == 1);
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    call $p32, $p33, $p34, $p35, $p36, $p37, $i38, $p39, $i40, $p41, $p42, $i43, $p44, $i45, $i46, $p47, $i48, $p49, $i50, $i51, $p52, $i53, $p54, $i55, $i56, $p57, $i58, $p59, $i60, $i61, $i62, $i63, $p64, $i65, $p66, $i67, $i68, $i69, $i70, $p71, $i72, $p73, $i74, $i75, $i76, $i77, $p78, $i79, $p80, $i81, $i82, $i83, $i84, $p85, $i86, $p87, $i88, $i89, $p90, $p91, $p92, $i93, $i94, cmdloc_dummy_var_69, cmdloc_dummy_var_70, cmdloc_dummy_var_71, cmdloc_dummy_var_72, cmdloc_dummy_var_73, cmdloc_dummy_var_74 := modem_input_wait_loop_$bb5($p0, $i1, $p2, $p3, $p6, $p32, $p33, $p34, $p35, $p36, $p37, $i38, $p39, $i40, $p41, $p42, $i43, $p44, $i45, $i46, $p47, $i48, $p49, $i50, $i51, $p52, $i53, $p54, $i55, $i56, $p57, $i58, $p59, $i60, $i61, $i62, $i63, $p64, $i65, $p66, $i67, $i68, $i69, $i70, $p71, $i72, $p73, $i74, $i75, $i76, $i77, $p78, $i79, $p80, $i81, $i82, $i83, $i84, $p85, $i86, $p87, $i88, $i89, $p90, $p91, $p92, $i93, $i94, cmdloc_dummy_var_69, cmdloc_dummy_var_70, cmdloc_dummy_var_71, cmdloc_dummy_var_72, cmdloc_dummy_var_73, cmdloc_dummy_var_74);
    goto $bb5_last;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} ldv_spin_lock();
    goto corral_source_split_11087;

  corral_source_split_11087:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1064, 1));
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p3);
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p32);
    goto corral_source_split_11090;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_69 := $M.0;
    cmdloc_dummy_var_70 := $M.0;
    call {:si_unique_call 1759} cmdloc_dummy_var_71 := $memcpy.i8(cmdloc_dummy_var_69, cmdloc_dummy_var_70, $p33, $p34, 92, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_71;
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} $p35 := get_current();
    goto corral_source_split_11092;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    $M.50 := $store.i64($M.50, $p36, 0);
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    $M.60 := $store.i64($M.60, $p6, 1);
    goto corral_source_split_11095;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} $p37 := get_current();
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.60, $p6);
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p37, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 1762} $i40 := devirtbounce.5(0, $p39, $i38, $p39);
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    $M.60 := $store.i64($M.60, $p6, $i40);
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} spin_unlock_irqrestore($p41, $u0);
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 92)), $mul.ref(8, 1));
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(8, 1));
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i43, $i45);
    goto corral_source_split_11107;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i1, 128);
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_11133;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i1, 256);
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i76 := $and.i32($i1, 64);
    goto corral_source_split_11152;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i1, 32);
    goto corral_source_split_11162;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p2);
    goto corral_source_split_11172;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p3);
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_72 := $M.0;
    cmdloc_dummy_var_73 := $M.0;
    call {:si_unique_call 1764} cmdloc_dummy_var_74 := $memcpy.i8(cmdloc_dummy_var_72, cmdloc_dummy_var_73, $p90, $p91, 92, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_74;
    goto corral_source_split_11174;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} schedule();
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} $p92 := get_current();
    goto corral_source_split_11176;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} $i93 := signal_pending($p92);
    call {:si_unique_call 1768} {:cexpr "tmp___6"} boogie_si_record_i32($i93);
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_11178;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb42_dummy;

  $bb6:
    assume $i94 == 1;
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 512);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_11075;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1200, 1));
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} remove_wait_queue($p95, $p4);
    goto corral_source_split_11077;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} $p96 := get_current();
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    $M.50 := $store.i64($M.50, $p97, 0);
    goto corral_source_split_11080;

  corral_source_split_11080:
    assume {:verifier.code 0} true;
    $M.61 := $store.i64($M.61, $p7, 0);
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} $p98 := get_current();
    goto corral_source_split_11082;

  corral_source_split_11082:
    assume {:verifier.code 0} true;
    $i99 := $load.i64($M.61, $p7);
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p98, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 1757} $i101 := devirtbounce.5(0, $p100, $i99, $p100);
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    $M.61 := $store.i64($M.61, $p7, $i101);
    goto corral_source_split_11085;

  corral_source_split_11085:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb36:
    assume $i84 == 1;
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 92)), $mul.ref(0, 1));
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(0, 1));
    goto corral_source_split_11168;

  corral_source_split_11168:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i86, $i88);
    goto corral_source_split_11170;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb38;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i89 == 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb7;

  $bb31:
    assume $i77 == 1;
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 92)), $mul.ref(12, 1));
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(12, 1));
    goto corral_source_split_11158;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i79, $i81);
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb33;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb24;

  $bb26:
    assume $i70 == 1;
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_11148;

  corral_source_split_11148:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i72, $i74);
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb28;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb24;

  $bb20:
    assume $i63 == 1;
    goto corral_source_split_11135;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 92)), $mul.ref(8, 1));
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(8, 1));
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i65, $i67);
    goto corral_source_split_11140;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb22;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb24;

  $bb10:
    assume $i46 == 1;
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_11113;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i48, $i50);
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb12;

  $bb13:
    assume $i51 == 1;
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 92)), $mul.ref(12, 1));
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(12, 1));
    goto corral_source_split_11119;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i53, $i55);
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb12;

  $bb15:
    assume $i56 == 1;
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 92)), $mul.ref(0, 1));
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(0, 1));
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i58, $i60);
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb12;

  $bb17:
    assume $i61 == 1;
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 5);
    goto $bb7;

  $bb2:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb3;

  $bb42_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const default_wake_function: ref;

axiom default_wake_function == $sub.ref(0, 544704);

procedure default_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const add_wait_queue: ref;

axiom add_wait_queue == $sub.ref(0, 545736);

procedure add_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation add_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 546768);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    return;
}



const remove_wait_queue: ref;

axiom remove_wait_queue == $sub.ref(0, 547800);

procedure remove_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation remove_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    return;
}



const waitqueue_active: ref;

axiom waitqueue_active == $sub.ref(0, 548832);

procedure waitqueue_active($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation waitqueue_active($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} $i2 := list_empty($p1);
    call {:si_unique_call 1770} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_11188;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 549864);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11193;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_11197;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const tty_port_close_start: ref;

axiom tty_port_close_start == $sub.ref(0, 550896);

procedure tty_port_close_start($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_port_close_start($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1771} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1772} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_11201;

  corral_source_split_11201:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const tty_ldisc_flush: ref;

axiom tty_ldisc_flush == $sub.ref(0, 551928);

procedure tty_ldisc_flush($p0: ref);
  free requires assertsPassed;



implementation tty_ldisc_flush($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_close_end: ref;

axiom tty_port_close_end == $sub.ref(0, 552960);

procedure tty_port_close_end($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation tty_port_close_end($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    return;
}



const prepare_to_wait_event: ref;

axiom prepare_to_wait_event == $sub.ref(0, 553992);

procedure prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1773} {:cexpr "prepare_to_wait_event:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1774} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 1775} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_11208;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const tty_unlock: ref;

axiom tty_unlock == $sub.ref(0, 555024);

procedure tty_unlock($p0: ref);
  free requires assertsPassed;



implementation tty_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11210;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    return;
}



const tty_lock: ref;

axiom tty_lock == $sub.ref(0, 556056);

procedure tty_lock($p0: ref);
  free requires assertsPassed;



implementation tty_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11212;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 557088);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    return;
}



const block_til_ready: ref;

axiom block_til_ready == $sub.ref(0, 558120);

procedure block_til_ready($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.51, $M.52, $M.53, $M.54, $M.55, $M.0, $M.1, $M.50, $M.62, $M.63, $CurrAddr;



implementation block_til_ready($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i8;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $p73: ref;
  var $i74: i64;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i64;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var $i82: i64;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i88: i32;
  var $p89: ref;
  var $i90: i64;
  var $i91: i64;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i87: i32;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $p111: ref;
  var $i112: i64;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $i117: i32;
  var $i118: i32;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i122: i32;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i32;
  var $i133: i1;
  var $p134: ref;
  var $i135: i64;
  var $i136: i64;
  var $p137: ref;
  var $i35: i32;
  var vslice_dummy_var_440: i32;
  var vslice_dummy_var_441: i32;
  var vslice_dummy_var_442: i32;
  var vslice_dummy_var_443: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11216;

  corral_source_split_11216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} $p6 := get_current();
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_11218;

  corral_source_split_11218:
    assume {:verifier.code 0} true;
    $M.51 := $store.i32($M.51, $p7, 0);
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    goto corral_source_split_11220;

  corral_source_split_11220:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    $M.52 := $store.ref($M.52, $p9, $p6);
    goto corral_source_split_11222;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    $M.53 := $store.ref($M.53, $p10, default_wake_function);
    goto corral_source_split_11224;

  corral_source_split_11224:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_11225;

  corral_source_split_11225:
    assume {:verifier.code 0} true;
    $M.54 := $store.ref($M.54, $p12, $0.ref);
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    $M.55 := $store.ref($M.55, $p14, $0.ref);
    goto corral_source_split_11228;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(16, 1));
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    $i16 := $M.2;
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i16, 2);
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(128, 1));
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_11241;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 2048);
    goto corral_source_split_11242;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i26 == 1);
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1336, 1));
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 2);
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_11254;

  corral_source_split_11254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_11259;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 2048);
    goto corral_source_split_11260;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_11261;

  corral_source_split_11261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} add_wait_queue($p42, $p3);
    goto corral_source_split_11266;

  corral_source_split_11266:
    assume {:verifier.code 0} true;
    $i43 := $M.2;
    goto corral_source_split_11267;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    $i44 := $sgt.i32($i43, 2);
    goto corral_source_split_11268;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} ldv_spin_lock();
    $p52 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(412, 1));
    goto corral_source_split_11278;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_11279;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32($i53, 1);
    $p55 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(412, 1));
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i54);
    goto corral_source_split_11281;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_11282;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} spin_unlock_irqrestore($p56, $u0);
    $p57 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(408, 1));
    goto corral_source_split_11283;

  corral_source_split_11283:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_11284;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, 1);
    $p60 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(408, 1));
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_11286;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    call $p62, $i63, $i64, $i65, $p66, $i67, $i68, $p69, $p70, $p71, $i72, $p73, $i74, $i75, $i76, $p77, $i78, $i79, $i80, $i88, $p89, $i90, $i91, $i92, $i93, $i94, $p95, $i96, $i97, $i98, $i99, $p100, $p101, $p102, $p103, $p104, $i105, vslice_dummy_var_442 := block_til_ready_loop_$bb17($p0, $p1, $p2, $p4, $p15, $i41, $p62, $i63, $i64, $i65, $p66, $i67, $i68, $p69, $p70, $p71, $i72, $p73, $i74, $i75, $i76, $p77, $i78, $i79, $i80, $i88, $p89, $i90, $i91, $i92, $i93, $i94, $p95, $i96, $i97, $i98, $i99, $p100, $p101, $p102, $p103, $p104, $i105, vslice_dummy_var_442);
    goto $bb17_last;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, 4111);
    goto corral_source_split_11290;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_11291;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} $p69 := get_current();
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_11301;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    $M.50 := $store.i64($M.50, $p70, 0);
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    $M.62 := $store.i64($M.62, $p4, 1);
    goto corral_source_split_11303;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} $p71 := get_current();
    goto corral_source_split_11304;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.62, $p4);
    goto corral_source_split_11305;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p71, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 1790} $i74 := devirtbounce.5(0, $p73, $i72, $p73);
    goto corral_source_split_11306;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    $M.62 := $store.i64($M.62, $p4, $i74);
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} $i75 := tty_hung_up_p($p1);
    call {:si_unique_call 1792} {:cexpr "tmp___6"} boogie_si_record_i32($i75);
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb27;

  $bb27:
    assume !($i76 == 1);
    $p77 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_11319;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.0, $p77);
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    $i79 := $and.i64($i78, 2147483648);
    goto corral_source_split_11321;

  corral_source_split_11321:
    assume {:verifier.code 0} true;
    $i80 := $eq.i64($i79, 0);
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} $i88 := tty_port_carrier_raised($p15);
    call {:si_unique_call 1798} {:cexpr "cd"} boogie_si_record_i32($i88);
    $p89 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.0, $p89);
    goto corral_source_split_11335;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    $i91 := $and.i64($i90, 134217728);
    goto corral_source_split_11336;

  corral_source_split_11336:
    assume {:verifier.code 0} true;
    $i92 := $eq.i64($i91, 0);
    goto corral_source_split_11337;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} $p95 := get_current();
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} $i96 := signal_pending($p95);
    call {:si_unique_call 1801} {:cexpr "tmp___8"} boogie_si_record_i32($i96);
    goto corral_source_split_11346;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_11347;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i98 := $M.2;
    goto corral_source_split_11351;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    $i99 := $sgt.i32($i98, 2);
    goto corral_source_split_11352;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} tty_unlock($p0);
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} schedule();
    goto corral_source_split_11363;

  corral_source_split_11363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} tty_lock($p0);
    goto corral_source_split_11364;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    goto corral_source_split_11364_dummy;

  $bb44:
    assume $i99 == 1;
    goto corral_source_split_11354;

  corral_source_split_11354:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(16, 1));
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_11356;

  corral_source_split_11356:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    $p104 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(412, 1));
    goto corral_source_split_11358;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_11359;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} vslice_dummy_var_442 := printk.ref.ref.i32.ref.i32(.str.136, .str.1, 3355, $p103, $i105);
    goto corral_source_split_11360;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i97 == 1;
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    $i87 := $sub.i32(0, 512);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} $p107 := get_current();
    goto corral_source_split_11325;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_11326;

  corral_source_split_11326:
    assume {:verifier.code 0} true;
    $M.50 := $store.i64($M.50, $p108, 0);
    goto corral_source_split_11327;

  corral_source_split_11327:
    assume {:verifier.code 0} true;
    $M.63 := $store.i64($M.63, $p5, 0);
    goto corral_source_split_11328;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} $p109 := get_current();
    goto corral_source_split_11329;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    $i110 := $load.i64($M.63, $p5);
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p109, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 1796} $i112 := devirtbounce.5(0, $p111, $i110, $p111);
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    $M.63 := $store.i64($M.63, $p5, $i112);
    goto corral_source_split_11332;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    $p113 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_11366;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} remove_wait_queue($p113, $p3);
    goto corral_source_split_11367;

  corral_source_split_11367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} $i114 := tty_hung_up_p($p1);
    call {:si_unique_call 1808} {:cexpr "tmp___14"} boogie_si_record_i32($i114);
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 0);
    goto corral_source_split_11369;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    $p120 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(408, 1));
    goto corral_source_split_11376;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_11377;

  corral_source_split_11377:
    assume {:verifier.code 0} true;
    $i122 := $sub.i32($i121, 1);
    $p123 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(408, 1));
    goto corral_source_split_11378;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p123, $i122);
    goto corral_source_split_11379;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    $i124 := $M.2;
    goto corral_source_split_11380;

  corral_source_split_11380:
    assume {:verifier.code 0} true;
    $i125 := $sgt.i32($i124, 2);
    goto corral_source_split_11381;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i87, 0);
    goto corral_source_split_11391;

  corral_source_split_11391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i35 := $i87;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_11256;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    $r := $i35;
    return;

  $bb54:
    assume $i133 == 1;
    $p134 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_11393;

  corral_source_split_11393:
    assume {:verifier.code 0} true;
    $i135 := $load.i64($M.0, $p134);
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    $i136 := $or.i64($i135, 536870912);
    $p137 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_11395;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p137, $i136);
    goto corral_source_split_11396;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume $i125 == 1;
    goto corral_source_split_11383;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(16, 1));
    goto corral_source_split_11384;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_11385;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p127, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_11386;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    $p130 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(412, 1));
    goto corral_source_split_11387;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_11388;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} vslice_dummy_var_443 := printk.ref.ref.i32.ref.i32(.str.137, .str.1, 3370, $p129, $i131);
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb48:
    assume $i115 == 1;
    $p116 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(412, 1));
    goto corral_source_split_11371;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.0, $p116);
    goto corral_source_split_11372;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    $i118 := $add.i32($i117, 1);
    $p119 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(412, 1));
    goto corral_source_split_11373;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p119, $i118);
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb32:
    assume $i92 == 1;
    goto corral_source_split_11339;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i8.i1($i41);
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb37;

  $bb37:
    assume !($i93 == 1);
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i88, 0);
    goto corral_source_split_11343;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb34;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i87 := 0;
    goto $bb30;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i93 == 1;
    goto $bb36;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb26;

  $bb26:
    $p81 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_11312;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    $i82 := $load.i64($M.0, $p81);
    goto corral_source_split_11313;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i64.i32($i82);
    goto corral_source_split_11314;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i83, 1);
    goto corral_source_split_11315;

  corral_source_split_11315:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_11316;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    $i86 := (if $i85 == 1 then $sub.i32(0, 11) else $sub.i32(0, 512));
    call {:si_unique_call 1793} {:cexpr "retval"} boogie_si_record_i32($i86);
    goto corral_source_split_11317;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    $i87 := $i86;
    goto $bb30;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb26;

  $bb18:
    assume $i65 == 1;
    $p66 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_11293;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} $i67 := constant_test_bit(31, $p66);
    call {:si_unique_call 1786} {:cexpr "tmp___0"} boogie_si_record_i32($i67);
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_11295;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i68 == 1;
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} tty_port_raise_dtr_rts($p15);
    goto corral_source_split_11298;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i44 == 1;
    goto corral_source_split_11270;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(16, 1));
    goto corral_source_split_11271;

  corral_source_split_11271:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_11273;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    $p49 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(412, 1));
    goto corral_source_split_11274;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_11275;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} vslice_dummy_var_441 := printk.ref.ref.i32.ref.i32(.str.135, .str.1, 3324, $p48, $i50);
    goto corral_source_split_11276;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i40 == 1;
    goto corral_source_split_11263;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    $i41 := 1;
    goto $bb13;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb5;

  $bb5:
    $p31 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    $i33 := $or.i64($i32, 536870912);
    $p34 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_11247;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p34, $i33);
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb5;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(16, 1));
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_11236;

  corral_source_split_11236:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_11237;

  corral_source_split_11237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} vslice_dummy_var_440 := printk.ref.ref.i32.ref(.str.134, .str.1, 3300, $p21);
    goto corral_source_split_11238;

  corral_source_split_11238:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_11364_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_11288;
}



const tty_port_raise_dtr_rts: ref;

axiom tty_port_raise_dtr_rts == $sub.ref(0, 559152);

procedure tty_port_raise_dtr_rts($p0: ref);
  free requires assertsPassed;



implementation tty_port_raise_dtr_rts($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    return;
}



const tty_hung_up_p: ref;

axiom tty_hung_up_p == $sub.ref(0, 560184);

procedure tty_hung_up_p($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_hung_up_p($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1810} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1811} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_11401;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const tty_port_carrier_raised: ref;

axiom tty_port_carrier_raised == $sub.ref(0, 561216);

procedure tty_port_carrier_raised($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_port_carrier_raised($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11403;

  corral_source_split_11403:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1812} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1813} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_11404;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const tty_port_install: ref;

axiom tty_port_install == $sub.ref(0, 562248);

procedure tty_port_install($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_port_install($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11406;

  corral_source_split_11406:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1814} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1815} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_11407;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_lseek: ref;

axiom seq_lseek == $sub.ref(0, 563280);

procedure seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1816} {:cexpr "seq_lseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1817} {:cexpr "seq_lseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1818} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 1819} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_11410;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_read: ref;

axiom seq_read == $sub.ref(0, 564312);

procedure seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1820} {:cexpr "seq_read:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_11412;

  corral_source_split_11412:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1821} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 1822} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_11413;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const synclinkmp_proc_open: ref;

axiom synclinkmp_proc_open == $sub.ref(0, 565344);

procedure synclinkmp_proc_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation synclinkmp_proc_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11415;

  corral_source_split_11415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} $i2 := single_open($p1, synclinkmp_proc_show, $0.ref);
    call {:si_unique_call 1824} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_11416;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const single_release: ref;

axiom single_release == $sub.ref(0, 566376);

procedure single_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11418;

  corral_source_split_11418:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1825} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1826} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_11419;

  corral_source_split_11419:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const synclinkmp_proc_show: ref;

axiom synclinkmp_proc_show == $sub.ref(0, 567408);

procedure synclinkmp_proc_show($p0: ref, $p1: ref) returns ($r: i32);



const single_open: ref;

axiom single_open == $sub.ref(0, 568440);

procedure single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11421;

  corral_source_split_11421:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1827} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1828} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_11422;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_printf: ref;

axiom seq_printf == $sub.ref(0, 569472);

procedure seq_printf.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);



procedure seq_printf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



procedure seq_printf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure seq_printf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);



procedure seq_printf.ref.ref.ref.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32);



const line_info: ref;

axiom line_info == $sub.ref(0, 570504);

procedure line_info($p0: ref, $p1: ref);



const strcat: ref;

axiom strcat == $sub.ref(0, 571536);

procedure strcat($p0: ref, $p1: ref) returns ($r: ref);



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 572568);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.66;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1830} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_11425;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_75 := $M.66;
    call {:si_unique_call 1831} cmdloc_dummy_var_76 := $memset.i8(cmdloc_dummy_var_75, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.66 := cmdloc_dummy_var_76;
    goto corral_source_split_11426;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const work_init_2: ref;

axiom work_init_2 == $sub.ref(0, 573600);

procedure work_init_2();
  free requires assertsPassed;
  modifies $M.37, $M.39, $M.41, $M.43;



implementation work_init_2()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11428;

  corral_source_split_11428:
    assume {:verifier.code 0} true;
    $M.37 := 0;
    call {:si_unique_call 1832} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_11429;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    $M.39 := 0;
    call {:si_unique_call 1833} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_11430;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    $M.41 := 0;
    call {:si_unique_call 1834} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_11431;

  corral_source_split_11431:
    assume {:verifier.code 0} true;
    $M.43 := 0;
    call {:si_unique_call 1835} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_11432;

  corral_source_split_11432:
    assume {:verifier.code 0} true;
    return;
}



const choose_timer_3: ref;

axiom choose_timer_3 == $sub.ref(0, 574632);

procedure choose_timer_3();
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9, $M.0, $M.1;



implementation choose_timer_3()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11434;

  corral_source_split_11434:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1836} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1837} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1838} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} ldv_stop();
    goto corral_source_split_11476;

  corral_source_split_11476:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_11440;

  corral_source_split_11440:
    assume {:verifier.code 0} true;
    $i18 := $M.9;
    goto corral_source_split_11441;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_11442;

  corral_source_split_11442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i19 == 1;
    goto corral_source_split_11470;

  corral_source_split_11470:
    assume {:verifier.code 0} true;
    $M.9 := 2;
    call {:si_unique_call 1845} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(2);
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    $i20 := $M.9;
    goto corral_source_split_11472;

  corral_source_split_11472:
    assume {:verifier.code 0} true;
    $p21 := $M.10;
    goto corral_source_split_11473;

  corral_source_split_11473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} ldv_timer_3($i20, $p21);
    goto corral_source_split_11474;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_11436;

  corral_source_split_11436:
    assume {:verifier.code 0} true;
    $i14 := $M.7;
    goto corral_source_split_11437;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_11438;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_11464;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    $M.7 := 2;
    call {:si_unique_call 1843} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(2);
    goto corral_source_split_11465;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    $i16 := $M.7;
    goto corral_source_split_11466;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    $p17 := $M.8;
    goto corral_source_split_11467;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} ldv_timer_3($i16, $p17);
    goto corral_source_split_11468;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_11444;

  corral_source_split_11444:
    assume {:verifier.code 0} true;
    $i10 := $M.5;
    goto corral_source_split_11445;

  corral_source_split_11445:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_11446;

  corral_source_split_11446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_11458;

  corral_source_split_11458:
    assume {:verifier.code 0} true;
    $M.5 := 2;
    call {:si_unique_call 1841} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(2);
    goto corral_source_split_11459;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    $i12 := $M.5;
    goto corral_source_split_11460;

  corral_source_split_11460:
    assume {:verifier.code 0} true;
    $p13 := $M.6;
    goto corral_source_split_11461;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} ldv_timer_3($i12, $p13);
    goto corral_source_split_11462;

  corral_source_split_11462:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_11448;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    $i6 := $M.3;
    goto corral_source_split_11449;

  corral_source_split_11449:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_11450;

  corral_source_split_11450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_11452;

  corral_source_split_11452:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1839} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(2);
    goto corral_source_split_11453;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    $i8 := $M.3;
    goto corral_source_split_11454;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    $p9 := $M.4;
    goto corral_source_split_11455;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} ldv_timer_3($i8, $p9);
    goto corral_source_split_11456;

  corral_source_split_11456:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const ldv_timer_3: ref;

axiom ldv_timer_3 == $sub.ref(0, 575664);

procedure ldv_timer_3($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1;



implementation ldv_timer_3($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} {:cexpr "ldv_timer_3:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_11478;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_11479;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_11481;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} tx_timeout($i3);
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_11483;

  corral_source_split_11483:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 576696);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11485;

  corral_source_split_11485:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const timer_init_4: ref;

axiom timer_init_4 == $sub.ref(0, 577728);

procedure timer_init_4();
  free requires assertsPassed;
  modifies $M.68, $M.69, $M.70, $M.71;



implementation timer_init_4()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11487;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    $M.68 := 0;
    call {:si_unique_call 1852} {:cexpr "ldv_timer_4_0"} boogie_si_record_i32(0);
    goto corral_source_split_11488;

  corral_source_split_11488:
    assume {:verifier.code 0} true;
    $M.69 := 0;
    call {:si_unique_call 1853} {:cexpr "ldv_timer_4_1"} boogie_si_record_i32(0);
    goto corral_source_split_11489;

  corral_source_split_11489:
    assume {:verifier.code 0} true;
    $M.70 := 0;
    call {:si_unique_call 1854} {:cexpr "ldv_timer_4_2"} boogie_si_record_i32(0);
    goto corral_source_split_11490;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    $M.71 := 0;
    call {:si_unique_call 1855} {:cexpr "ldv_timer_4_3"} boogie_si_record_i32(0);
    goto corral_source_split_11491;

  corral_source_split_11491:
    assume {:verifier.code 0} true;
    return;
}



const timer_init_3: ref;

axiom timer_init_3 == $sub.ref(0, 578760);

procedure timer_init_3();
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9;



implementation timer_init_3()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11493;

  corral_source_split_11493:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 1856} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(0);
    goto corral_source_split_11494;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    $M.5 := 0;
    call {:si_unique_call 1857} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(0);
    goto corral_source_split_11495;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 1858} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(0);
    goto corral_source_split_11496;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 1859} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(0);
    goto corral_source_split_11497;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    return;
}



const ldv_tty_port_operations_6: ref;

axiom ldv_tty_port_operations_6 == $sub.ref(0, 579792);

procedure ldv_tty_port_operations_6();
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_tty_port_operations_6()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11499;

  corral_source_split_11499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} $p0 := ldv_init_zalloc(1040);
    goto corral_source_split_11500;

  corral_source_split_11500:
    assume {:verifier.code 0} true;
    goto corral_source_split_11501;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    return;
}



const choose_interrupt_1: ref;

axiom choose_interrupt_1 == $sub.ref(0, 580824);

procedure choose_interrupt_1();
  free requires assertsPassed;
  modifies $M.25, $M.0, $M.1, $M.22, $M.45, $M.46, $M.3, $M.5, $M.7, $M.9, $CurrAddr, $M.4, $M.6, $M.8, $M.10, $M.38, $M.37, $M.39, $M.41, $M.43;



implementation choose_interrupt_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11503;

  corral_source_split_11503:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1861} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1862} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1863} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} ldv_stop();
    goto corral_source_split_11533;

  corral_source_split_11533:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_11512;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    $i18 := $M.34;
    goto corral_source_split_11513;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    $i19 := $M.35;
    goto corral_source_split_11514;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    $p20 := $M.36;
    goto corral_source_split_11515;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} $i21 := ldv_irq_1($i18, $i19, $p20);
    goto corral_source_split_11516;

  corral_source_split_11516:
    assume {:verifier.code 0} true;
    $M.25 := $i21;
    call {:si_unique_call 1867} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i21);
    goto corral_source_split_11517;

  corral_source_split_11517:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_11505;

  corral_source_split_11505:
    assume {:verifier.code 0} true;
    $i14 := $M.31;
    goto corral_source_split_11506;

  corral_source_split_11506:
    assume {:verifier.code 0} true;
    $i15 := $M.32;
    goto corral_source_split_11507;

  corral_source_split_11507:
    assume {:verifier.code 0} true;
    $p16 := $M.33;
    goto corral_source_split_11508;

  corral_source_split_11508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} $i17 := ldv_irq_1($i14, $i15, $p16);
    goto corral_source_split_11509;

  corral_source_split_11509:
    assume {:verifier.code 0} true;
    $M.25 := $i17;
    call {:si_unique_call 1865} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i17);
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_11519;

  corral_source_split_11519:
    assume {:verifier.code 0} true;
    $i10 := $M.28;
    goto corral_source_split_11520;

  corral_source_split_11520:
    assume {:verifier.code 0} true;
    $i11 := $M.29;
    goto corral_source_split_11521;

  corral_source_split_11521:
    assume {:verifier.code 0} true;
    $p12 := $M.30;
    goto corral_source_split_11522;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} $i13 := ldv_irq_1($i10, $i11, $p12);
    goto corral_source_split_11523;

  corral_source_split_11523:
    assume {:verifier.code 0} true;
    $M.25 := $i13;
    call {:si_unique_call 1869} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i13);
    goto corral_source_split_11524;

  corral_source_split_11524:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_11526;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    $i6 := $M.25;
    goto corral_source_split_11527;

  corral_source_split_11527:
    assume {:verifier.code 0} true;
    $i7 := $M.26;
    goto corral_source_split_11528;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    $p8 := $M.27;
    goto corral_source_split_11529;

  corral_source_split_11529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} $i9 := ldv_irq_1($i6, $i7, $p8);
    goto corral_source_split_11530;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    $M.25 := $i9;
    call {:si_unique_call 1871} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i9);
    goto corral_source_split_11531;

  corral_source_split_11531:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const ldv_irq_1: ref;

axiom ldv_irq_1 == $sub.ref(0, 581856);

procedure ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.22, $M.45, $M.46, $M.3, $M.5, $M.7, $M.9, $CurrAddr, $M.4, $M.6, $M.8, $M.10, $M.38, $M.37, $M.39, $M.41, $M.43;



implementation ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1873} {:cexpr "ldv_irq_1:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 1874} {:cexpr "ldv_irq_1:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_11535;

  corral_source_split_11535:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1875} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1876} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 1877} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_11536;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i0, 0);
    goto corral_source_split_11537;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_11539;

  corral_source_split_11539:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1878} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1879} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1880} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} ldv_stop();
    goto corral_source_split_11549;

  corral_source_split_11549:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_11541;

  corral_source_split_11541:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 1);
    goto corral_source_split_11542;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_11545;

  corral_source_split_11545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} $i8 := synclinkmp_interrupt($i1, $p2);
    call {:si_unique_call 1883} {:cexpr "irq_retval"} boogie_si_record_i32($i8);
    goto corral_source_split_11546;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_11547;

  corral_source_split_11547:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const choose_timer_4: ref;

axiom choose_timer_4 == $sub.ref(0, 582888);

procedure choose_timer_4();
  free requires assertsPassed;
  modifies $M.68, $M.69, $M.70, $M.71, $M.1, $M.0, $M.22, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $CurrAddr;



implementation choose_timer_4()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11551;

  corral_source_split_11551:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1886} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1887} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1888} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} ldv_stop();
    goto corral_source_split_11593;

  corral_source_split_11593:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_11557;

  corral_source_split_11557:
    assume {:verifier.code 0} true;
    $i18 := $M.71;
    goto corral_source_split_11558;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_11559;

  corral_source_split_11559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i19 == 1;
    goto corral_source_split_11587;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 1895} {:cexpr "ldv_timer_4_3"} boogie_si_record_i32(2);
    goto corral_source_split_11588;

  corral_source_split_11588:
    assume {:verifier.code 0} true;
    $i20 := $M.71;
    goto corral_source_split_11589;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    $p21 := $M.76;
    goto corral_source_split_11590;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} ldv_timer_4($i20, $p21);
    goto corral_source_split_11591;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_11553;

  corral_source_split_11553:
    assume {:verifier.code 0} true;
    $i14 := $M.70;
    goto corral_source_split_11554;

  corral_source_split_11554:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_11555;

  corral_source_split_11555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_11581;

  corral_source_split_11581:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1893} {:cexpr "ldv_timer_4_2"} boogie_si_record_i32(2);
    goto corral_source_split_11582;

  corral_source_split_11582:
    assume {:verifier.code 0} true;
    $i16 := $M.70;
    goto corral_source_split_11583;

  corral_source_split_11583:
    assume {:verifier.code 0} true;
    $p17 := $M.75;
    goto corral_source_split_11584;

  corral_source_split_11584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} ldv_timer_4($i16, $p17);
    goto corral_source_split_11585;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_11561;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    $i10 := $M.69;
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_11563;

  corral_source_split_11563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_11575;

  corral_source_split_11575:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1891} {:cexpr "ldv_timer_4_1"} boogie_si_record_i32(2);
    goto corral_source_split_11576;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    $i12 := $M.69;
    goto corral_source_split_11577;

  corral_source_split_11577:
    assume {:verifier.code 0} true;
    $p13 := $M.74;
    goto corral_source_split_11578;

  corral_source_split_11578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} ldv_timer_4($i12, $p13);
    goto corral_source_split_11579;

  corral_source_split_11579:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_11565;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    $i6 := $M.68;
    goto corral_source_split_11566;

  corral_source_split_11566:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_11567;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_11569;

  corral_source_split_11569:
    assume {:verifier.code 0} true;
    $M.68 := 2;
    call {:si_unique_call 1889} {:cexpr "ldv_timer_4_0"} boogie_si_record_i32(2);
    goto corral_source_split_11570;

  corral_source_split_11570:
    assume {:verifier.code 0} true;
    $i8 := $M.68;
    goto corral_source_split_11571;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    $p9 := $M.73;
    goto corral_source_split_11572;

  corral_source_split_11572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} ldv_timer_4($i8, $p9);
    goto corral_source_split_11573;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const ldv_timer_4: ref;

axiom ldv_timer_4 == $sub.ref(0, 583920);

procedure ldv_timer_4($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.22, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $CurrAddr;



implementation ldv_timer_4($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} {:cexpr "ldv_timer_4:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_11595;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_11596;

  corral_source_split_11596:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_11597;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.77, $p2);
    goto corral_source_split_11598;

  corral_source_split_11598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} status_timeout($i3);
    goto corral_source_split_11599;

  corral_source_split_11599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_11600;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_8: ref;

axiom ldv_file_operations_8 == $sub.ref(0, 584952);

procedure ldv_file_operations_8();
  free requires assertsPassed;
  modifies $M.78, $M.79, $M.0, $CurrAddr;



implementation ldv_file_operations_8()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11602;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_11603;

  corral_source_split_11603:
    assume {:verifier.code 0} true;
    goto corral_source_split_11604;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    $M.78 := $p0;
    goto corral_source_split_11605;

  corral_source_split_11605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_11606;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    goto corral_source_split_11607;

  corral_source_split_11607:
    assume {:verifier.code 0} true;
    $M.79 := $p2;
    goto corral_source_split_11608;

  corral_source_split_11608:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pci_driver_9: ref;

axiom ldv_pci_driver_9 == $sub.ref(0, 585984);

procedure ldv_pci_driver_9();
  free requires assertsPassed;
  modifies $M.80, $M.0, $CurrAddr;



implementation ldv_pci_driver_9()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11610;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} $p0 := ldv_init_zalloc(2976);
    goto corral_source_split_11611;

  corral_source_split_11611:
    assume {:verifier.code 0} true;
    goto corral_source_split_11612;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    $M.80 := $p0;
    goto corral_source_split_11613;

  corral_source_split_11613:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_tty_operations_5: ref;

axiom ldv_initialize_tty_operations_5 == $sub.ref(0, 587016);

procedure ldv_initialize_tty_operations_5();
  free requires assertsPassed;
  modifies $M.81, $M.82, $M.0, $CurrAddr;



implementation ldv_initialize_tty_operations_5()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11615;

  corral_source_split_11615:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1905} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 1906} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_11616;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    goto corral_source_split_11617;

  corral_source_split_11617:
    assume {:verifier.code 0} true;
    $M.81 := $p0;
    goto corral_source_split_11618;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} $p2 := ldv_init_zalloc(1816);
    goto corral_source_split_11619;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    goto corral_source_split_11620;

  corral_source_split_11620:
    assume {:verifier.code 0} true;
    $M.82 := $p2;
    goto corral_source_split_11621;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_2: ref;

axiom invoke_work_2 == $sub.ref(0, 588048);

procedure invoke_work_2();
  free requires assertsPassed;
  modifies $M.37, $M.0, $M.39, $M.41, $M.43, $M.1, assertsPassed;



implementation invoke_work_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11623;

  corral_source_split_11623:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1908} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1909} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1910} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} ldv_stop();
    goto corral_source_split_11677;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_11629;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    $i21 := $M.43;
    goto corral_source_split_11630;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_11631;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_11673;

  corral_source_split_11673:
    assume {:verifier.code 0} true;
    $i23 := $M.43;
    goto corral_source_split_11674;

  corral_source_split_11674:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_11675;

  corral_source_split_11675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.43 := 4;
    call {:si_unique_call 1920} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(4);
    goto corral_source_split_11668;

  corral_source_split_11668:
    assume {:verifier.code 0} true;
    $p25 := $M.38;
    goto corral_source_split_11669;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} bh_handler($p25);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_11670;

  corral_source_split_11670:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1922} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_11671;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_11625;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    $i16 := $M.41;
    goto corral_source_split_11626;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_11627;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_11664;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    $i18 := $M.41;
    goto corral_source_split_11665;

  corral_source_split_11665:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_11666;

  corral_source_split_11666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 1917} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(4);
    goto corral_source_split_11659;

  corral_source_split_11659:
    assume {:verifier.code 0} true;
    $p20 := $M.38;
    goto corral_source_split_11660;

  corral_source_split_11660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} bh_handler($p20);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_11661;

  corral_source_split_11661:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1919} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_11662;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_11633;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    $i11 := $M.39;
    goto corral_source_split_11634;

  corral_source_split_11634:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_11635;

  corral_source_split_11635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_11655;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    $i13 := $M.39;
    goto corral_source_split_11656;

  corral_source_split_11656:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_11657;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.39 := 4;
    call {:si_unique_call 1914} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(4);
    goto corral_source_split_11650;

  corral_source_split_11650:
    assume {:verifier.code 0} true;
    $p15 := $M.38;
    goto corral_source_split_11651;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} bh_handler($p15);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_11652;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1916} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_11653;

  corral_source_split_11653:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_11637;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    $i6 := $M.37;
    goto corral_source_split_11638;

  corral_source_split_11638:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_11639;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_11646;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    $i8 := $M.37;
    goto corral_source_split_11647;

  corral_source_split_11647:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_11648;

  corral_source_split_11648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.37 := 4;
    call {:si_unique_call 1911} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(4);
    goto corral_source_split_11641;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    $p10 := $M.38;
    goto corral_source_split_11642;

  corral_source_split_11642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} bh_handler($p10);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_11643;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1913} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_11644;

  corral_source_split_11644:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const main: ref;

axiom main == $sub.ref(0, 589080);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.66, $M.83, $M.3, $M.5, $M.7, $M.9, $M.84, $M.48, $M.85, $M.37, $M.39, $M.41, $M.43, $M.86, $M.87, $M.88, $M.68, $M.69, $M.70, $M.71, $M.89, $M.90, $M.91, $M.92, $M.0, $M.93, $M.1, $M.94, $M.95, $M.14, $M.96, $M.97, $M.25, $M.98, $M.81, $M.82, $M.78, $M.79, $M.99, $M.34, $M.31, $M.28, $M.49, $M.4, $M.6, $M.8, $M.10, $M.73, $M.74, $M.75, $M.76, $M.38, $M.26, $M.27, $M.29, $M.30, $M.32, $M.33, $M.35, $M.36, $M.80, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.104, $M.100, $M.175, $M.103, $M.102, $M.64, $M.24, $M.20, $M.19, $M.18, $M.23, $M.17, $M.16, $M.15, $M.11, $M.12, $M.13, $M.2, $M.176, $M.65, $CurrAddr, $M.22, $M.51, $M.52, $M.53, $M.54, $M.55, $M.50, $M.62, $M.63, $M.59, $M.61, $M.60, $M.56, $M.58, $M.57, $M.47, $M.21, $M.45, $M.46, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i32;
  var $i85: i1;
  var $i87: i32;
  var $i88: i1;
  var $i90: i32;
  var $i91: i1;
  var $i93: i32;
  var $i94: i1;
  var $i95: i32;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i32;
  var $i109: i1;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $i113: i1;
  var $i115: i32;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $i138: i32;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $i143: i32;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $i148: i32;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $i153: i32;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $i158: i32;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $i163: i32;
  var $i164: i32;
  var $i165: i1;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $i170: i32;
  var $i171: i1;
  var $p172: ref;
  var $i173: i32;
  var $i174: i1;
  var $p175: ref;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $i179: i32;
  var $i180: i1;
  var $i181: i32;
  var $i182: i32;
  var $i183: i1;
  var $i184: i32;
  var $i185: i32;
  var $i186: i32;
  var $i187: i1;
  var $i189: i32;
  var $i190: i32;
  var $i191: i32;
  var $i192: i1;
  var $i193: i32;
  var $i194: i1;
  var $i195: i1;
  var $i196: i1;
  var $i197: i1;
  var $i198: i32;
  var $i199: i1;
  var $p200: ref;
  var $i201: i32;
  var $i202: i32;
  var $i203: i1;
  var $i204: i32;
  var $i205: i32;
  var $i206: i32;
  var $i207: i1;
  var $p208: ref;
  var $i209: i32;
  var $i210: i1;
  var $i212: i32;
  var $i213: i1;
  var $i214: i32;
  var $i215: i1;
  var $i216: i32;
  var $i217: i1;
  var $i218: i1;
  var $i219: i1;
  var $i220: i1;
  var $i221: i1;
  var $i222: i32;
  var $i223: i1;
  var $p224: ref;
  var $p225: ref;
  var $i227: i32;
  var $i228: i32;
  var $i229: i32;
  var $i230: i1;
  var $p231: ref;
  var $i232: i64;
  var $i234: i32;
  var $i235: i1;
  var $p236: ref;
  var $i237: i64;
  var $i238: i32;
  var $i240: i32;
  var $i241: i1;
  var $p242: ref;
  var $p243: ref;
  var $i244: i32;
  var $i245: i32;
  var $i246: i1;
  var $i247: i32;
  var $i248: i32;
  var $i249: i32;
  var $i250: i1;
  var $i251: i32;
  var $i252: i1;
  var $i253: i32;
  var $i254: i1;
  var $i255: i32;
  var $i256: i1;
  var $i257: i1;
  var $i258: i1;
  var $i259: i32;
  var $i260: i1;
  var $i261: i32;
  var $i262: i1;
  var $i263: i32;
  var $i264: i1;
  var $i265: i32;
  var $i266: i32;
  var $i267: i1;
  var $i268: i32;
  var $i269: i1;
  var $i270: i32;
  var $i271: i1;
  var $i272: i32;
  var $i273: i1;
  var $i274: i1;
  var $i275: i1;
  var $i276: i1;
  var $i277: i1;
  var $i278: i1;
  var $i279: i1;
  var $i280: i1;
  var $i281: i1;
  var $i282: i1;
  var $i283: i1;
  var $i284: i1;
  var $i285: i1;
  var $i286: i1;
  var $i287: i1;
  var $i288: i1;
  var $i289: i1;
  var $i290: i1;
  var $i291: i1;
  var $i292: i1;
  var $i293: i1;
  var $i294: i1;
  var $i295: i1;
  var $i296: i1;
  var $i297: i1;
  var $i298: i1;
  var $i299: i32;
  var $i300: i1;
  var $p301: ref;
  var $i302: i32;
  var $i303: i1;
  var $p304: ref;
  var $i305: i8;
  var $i306: i32;
  var $i307: i8;
  var $i308: i32;
  var $i309: i1;
  var $p310: ref;
  var $i311: i8;
  var $i312: i32;
  var $i313: i8;
  var $i314: i32;
  var $i315: i1;
  var $p316: ref;
  var $i317: i8;
  var $i318: i32;
  var $i319: i8;
  var $i320: i32;
  var $i321: i1;
  var $p322: ref;
  var $i323: i8;
  var $i324: i32;
  var $i325: i8;
  var $i326: i32;
  var $i327: i1;
  var $p328: ref;
  var $i329: i8;
  var $i330: i32;
  var $i331: i8;
  var $i332: i32;
  var $i333: i1;
  var $p334: ref;
  var $i335: i8;
  var $i336: i32;
  var $i337: i8;
  var $i339: i32;
  var $i340: i1;
  var $p341: ref;
  var $i342: i8;
  var $i343: i32;
  var $i344: i8;
  var $i346: i32;
  var $i347: i1;
  var $p348: ref;
  var $i349: i8;
  var $i350: i32;
  var $i351: i8;
  var $i353: i32;
  var $i354: i1;
  var $p355: ref;
  var $i356: i8;
  var $i357: i32;
  var $i358: i8;
  var $i360: i32;
  var $i361: i1;
  var $p362: ref;
  var $i363: i8;
  var $i364: i32;
  var $i365: i8;
  var $i367: i32;
  var $i368: i1;
  var $p369: ref;
  var $i370: i32;
  var $i371: i1;
  var $p372: ref;
  var $i373: i32;
  var $i374: i1;
  var $p375: ref;
  var $i376: i32;
  var $i377: i1;
  var $p378: ref;
  var $i379: i32;
  var $i380: i1;
  var $p381: ref;
  var $i382: i32;
  var $i383: i1;
  var $p384: ref;
  var $i386: i32;
  var $i387: i1;
  var $p388: ref;
  var $i390: i32;
  var $i391: i1;
  var $p392: ref;
  var $i394: i32;
  var $i395: i1;
  var $p396: ref;
  var $i398: i32;
  var $i399: i1;
  var $p400: ref;
  var $i402: i32;
  var $i403: i1;
  var $p404: ref;
  var $i405: i32;
  var $i406: i1;
  var $p407: ref;
  var $i408: i32;
  var $i409: i1;
  var $p410: ref;
  var $i411: i32;
  var $i412: i1;
  var $p413: ref;
  var $i414: i32;
  var $i415: i1;
  var $p416: ref;
  var $i417: i32;
  var $i418: i1;
  var $p419: ref;
  var $i420: i32;
  var $i421: i1;
  var $p422: ref;
  var $i423: i32;
  var $i424: i1;
  var $p425: ref;
  var $i426: i32;
  var $i427: i1;
  var $p428: ref;
  var $i429: i32;
  var $i430: i1;
  var $p431: ref;
  var $i432: i32;
  var $i433: i1;
  var $p434: ref;
  var $p435: ref;
  var $i436: i32;
  var $i437: i32;
  var $i438: i1;
  var $i439: i32;
  var $i440: i1;
  var $p441: ref;
  var $i442: i32;
  var $i443: i1;
  var $p444: ref;
  var $i445: i32;
  var $i446: i1;
  var $p447: ref;
  var $i448: i32;
  var $i449: i1;
  var $p450: ref;
  var $i451: i32;
  var $i452: i1;
  var $p453: ref;
  var $i454: i32;
  var $i455: i1;
  var $p456: ref;
  var $i457: i32;
  var $i458: i1;
  var $p459: ref;
  var $i460: i32;
  var $i461: i1;
  var $p462: ref;
  var $i463: i32;
  var $i464: i1;
  var $p465: ref;
  var $i466: i32;
  var $i467: i1;
  var $p468: ref;
  var $i469: i32;
  var $i470: i1;
  var $p471: ref;
  var $i472: i32;
  var $i473: i64;
  var $i475: i32;
  var $i476: i1;
  var $p477: ref;
  var $i478: i32;
  var $i479: i64;
  var $i481: i32;
  var $i482: i1;
  var $p483: ref;
  var $i484: i32;
  var $i485: i64;
  var $i487: i32;
  var $i488: i1;
  var $p489: ref;
  var $i490: i32;
  var $i491: i64;
  var $i493: i32;
  var $i494: i1;
  var $p495: ref;
  var $i496: i32;
  var $i497: i64;
  var $i499: i32;
  var $i500: i1;
  var $p501: ref;
  var $i503: i32;
  var $i504: i1;
  var $p505: ref;
  var $i507: i32;
  var $i508: i1;
  var $p509: ref;
  var $i511: i32;
  var $i512: i1;
  var $p513: ref;
  var $i515: i32;
  var $i516: i1;
  var $p517: ref;
  var $i519: i32;
  var $i520: i1;
  var $p521: ref;
  var $i522: i32;
  var $i523: i1;
  var $p524: ref;
  var $i525: i32;
  var $i526: i32;
  var $i528: i32;
  var $i529: i1;
  var $p530: ref;
  var $i531: i32;
  var $i532: i32;
  var $i534: i32;
  var $i535: i1;
  var $p536: ref;
  var $i537: i32;
  var $i538: i32;
  var $i540: i32;
  var $i541: i1;
  var $p542: ref;
  var $i543: i32;
  var $i544: i32;
  var $i546: i32;
  var $i547: i1;
  var $p548: ref;
  var $i549: i32;
  var $i550: i32;
  var $i552: i32;
  var $i553: i1;
  var $p554: ref;
  var $i555: i32;
  var $i557: i32;
  var $i558: i1;
  var $p559: ref;
  var $p560: ref;
  var $i561: i32;
  var $i562: i1;
  var $p563: ref;
  var $i565: i32;
  var $i566: i1;
  var $p567: ref;
  var $i569: i32;
  var $i570: i1;
  var $p571: ref;
  var $i573: i32;
  var $i574: i1;
  var $p575: ref;
  var $i577: i32;
  var $i578: i1;
  var $p579: ref;
  var $i581: i32;
  var $i582: i1;
  var $p583: ref;
  var $i584: i32;
  var $i586: i32;
  var $i587: i1;
  var $p588: ref;
  var $i589: i32;
  var $i591: i32;
  var $i592: i1;
  var $p593: ref;
  var $i594: i32;
  var $i596: i32;
  var $i597: i1;
  var $p598: ref;
  var $i599: i32;
  var $i601: i32;
  var $i602: i1;
  var $p603: ref;
  var $i604: i32;
  var $i606: i32;
  var $i607: i1;
  var $p608: ref;
  var $i610: i32;
  var $i611: i1;
  var $p612: ref;
  var $i614: i32;
  var $i615: i1;
  var $p616: ref;
  var $i618: i32;
  var $i619: i1;
  var $p620: ref;
  var $i622: i32;
  var $i623: i1;
  var $p624: ref;
  var $i626: i32;
  var $i627: i1;
  var $p628: ref;
  var $i630: i32;
  var $i631: i1;
  var $p632: ref;
  var $i634: i32;
  var $i635: i1;
  var $p636: ref;
  var $i638: i32;
  var $i639: i1;
  var $p640: ref;
  var $i642: i32;
  var $i643: i1;
  var $p644: ref;
  var $i646: i32;
  var $i647: i1;
  var $p648: ref;
  var $i649: i32;
  var $i650: i1;
  var $p651: ref;
  var $i652: i32;
  var $i653: i1;
  var $p654: ref;
  var $i655: i32;
  var $i656: i1;
  var $p657: ref;
  var $i658: i32;
  var $i659: i1;
  var $p660: ref;
  var $i661: i32;
  var $i662: i1;
  var $p663: ref;
  var $i664: i32;
  var $i665: i32;
  var $i666: i1;
  var $p667: ref;
  var $i668: i32;
  var $i669: i32;
  var $i670: i1;
  var $p671: ref;
  var $i672: i32;
  var $i673: i32;
  var $i674: i1;
  var $p675: ref;
  var $i676: i32;
  var $i677: i32;
  var $i678: i1;
  var $p679: ref;
  var $i680: i32;
  var $i681: i32;
  var $i682: i1;
  var $i684: i32;
  var $i685: i1;
  var $i687: i32;
  var $i688: i1;
  var $i690: i32;
  var $i691: i1;
  var $i693: i32;
  var $i694: i32;
  var $i695: i32;
  var $i696: i1;
  var $i698: i32;
  var $i699: i32;
  var vslice_dummy_var_444: ref;
  var vslice_dummy_var_445: ref;
  var vslice_dummy_var_446: ref;
  var vslice_dummy_var_447: ref;
  var vslice_dummy_var_448: ref;
  var vslice_dummy_var_449: ref;
  var vslice_dummy_var_450: ref;
  var vslice_dummy_var_451: ref;
  var vslice_dummy_var_452: ref;
  var vslice_dummy_var_453: ref;
  var vslice_dummy_var_454: ref;
  var vslice_dummy_var_455: ref;
  var vslice_dummy_var_456: ref;
  var vslice_dummy_var_457: ref;
  var vslice_dummy_var_458: ref;
  var vslice_dummy_var_459: i32;
  var vslice_dummy_var_460: i32;
  var vslice_dummy_var_461: i32;
  var vslice_dummy_var_462: i32;
  var vslice_dummy_var_463: i32;
  var vslice_dummy_var_464: i32;
  var vslice_dummy_var_465: i32;
  var vslice_dummy_var_466: i32;
  var vslice_dummy_var_467: i32;
  var vslice_dummy_var_468: i32;
  var vslice_dummy_var_469: i32;
  var vslice_dummy_var_470: i32;
  var vslice_dummy_var_471: i32;
  var vslice_dummy_var_472: i32;
  var vslice_dummy_var_473: i32;
  var vslice_dummy_var_474: i64;
  var vslice_dummy_var_475: i64;
  var vslice_dummy_var_476: i32;
  var vslice_dummy_var_477: i32;
  var vslice_dummy_var_478: i32;
  var vslice_dummy_var_479: i32;
  var vslice_dummy_var_480: i32;
  var vslice_dummy_var_481: i32;
  var vslice_dummy_var_482: i32;
  var vslice_dummy_var_483: i32;
  var vslice_dummy_var_484: i32;
  var vslice_dummy_var_485: i32;
  var vslice_dummy_var_486: i32;
  var vslice_dummy_var_487: i32;
  var vslice_dummy_var_488: i32;
  var vslice_dummy_var_489: i32;
  var vslice_dummy_var_490: i32;
  var vslice_dummy_var_491: i32;
  var vslice_dummy_var_492: i32;
  var vslice_dummy_var_493: i32;
  var vslice_dummy_var_494: i32;
  var vslice_dummy_var_495: i32;
  var vslice_dummy_var_496: i32;
  var vslice_dummy_var_497: i32;
  var vslice_dummy_var_498: i32;
  var vslice_dummy_var_499: i32;
  var vslice_dummy_var_500: i32;
  var vslice_dummy_var_501: i32;
  var vslice_dummy_var_502: i32;
  var vslice_dummy_var_503: i32;
  var vslice_dummy_var_504: i32;
  var vslice_dummy_var_505: i32;
  var vslice_dummy_var_506: i32;
  var vslice_dummy_var_507: i32;
  var vslice_dummy_var_508: i32;
  var vslice_dummy_var_509: i32;
  var vslice_dummy_var_510: i32;
  var vslice_dummy_var_511: i32;
  var vslice_dummy_var_512: i32;
  var vslice_dummy_var_513: i32;
  var vslice_dummy_var_514: i32;
  var vslice_dummy_var_515: i32;
  var vslice_dummy_var_516: i32;
  var vslice_dummy_var_517: i32;
  var vslice_dummy_var_518: i32;
  var vslice_dummy_var_519: i32;
  var vslice_dummy_var_520: i32;
  var vslice_dummy_var_521: i32;
  var vslice_dummy_var_522: i32;
  var vslice_dummy_var_523: i32;
  var vslice_dummy_var_524: i32;
  var vslice_dummy_var_525: i32;
  var vslice_dummy_var_526: i32;

  $bb0:
    call {:si_unique_call 1924} $initialize();
    goto corral_source_split_11679;

  corral_source_split_11679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1927} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1929} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} $p6 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} $p9 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} $p10 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1937} $p11 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1938} $p12 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} $p13 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} $p14 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_11680;

  corral_source_split_11680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} $p15 := ldv_init_zalloc(1040);
    goto corral_source_split_11681;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_11682;

  corral_source_split_11682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1942} $p17 := ldv_init_zalloc(1040);
    goto corral_source_split_11683;

  corral_source_split_11683:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_11684;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} $p19 := ldv_init_zalloc(232);
    goto corral_source_split_11685;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_11686;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} $p21 := ldv_init_zalloc(40);
    goto corral_source_split_11687;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_11688;

  corral_source_split_11688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} $p23 := ldv_init_zalloc(32);
    goto corral_source_split_11689;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_11690;

  corral_source_split_11690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} $p25 := ldv_init_zalloc(8);
    goto corral_source_split_11691;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_11692;

  corral_source_split_11692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} $p27 := ldv_init_zalloc(1);
    goto corral_source_split_11693;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} $p28 := ldv_init_zalloc(80);
    goto corral_source_split_11694;

  corral_source_split_11694:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_11695;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} $p30 := ldv_init_zalloc(1);
    goto corral_source_split_11696;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1950} $p31 := ldv_init_zalloc(44);
    goto corral_source_split_11697;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_11698;

  corral_source_split_11698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} $p33 := ldv_init_zalloc(184);
    goto corral_source_split_11699;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_11700;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} ldv_initialize();
    goto corral_source_split_11701;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p0);
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1953} vslice_dummy_var_444 := ldv_memset($p35, 0, 4);
    goto corral_source_split_11703;

  corral_source_split_11703:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p1);
    goto corral_source_split_11704;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1954} vslice_dummy_var_445 := ldv_memset($p37, 0, 4);
    goto corral_source_split_11705;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p2);
    goto corral_source_split_11706;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} vslice_dummy_var_446 := ldv_memset($p39, 0, 4);
    goto corral_source_split_11707;

  corral_source_split_11707:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p3);
    goto corral_source_split_11708;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} vslice_dummy_var_447 := ldv_memset($p41, 0, 4);
    goto corral_source_split_11709;

  corral_source_split_11709:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p4);
    goto corral_source_split_11710;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} vslice_dummy_var_448 := ldv_memset($p43, 0, 8);
    goto corral_source_split_11711;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p5);
    goto corral_source_split_11712;

  corral_source_split_11712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} vslice_dummy_var_449 := ldv_memset($p45, 0, 8);
    goto corral_source_split_11713;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} vslice_dummy_var_450 := ldv_memset($p6, 0, 1);
    goto corral_source_split_11714;

  corral_source_split_11714:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p7);
    goto corral_source_split_11715;

  corral_source_split_11715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1960} vslice_dummy_var_451 := ldv_memset($p48, 0, 4);
    goto corral_source_split_11716;

  corral_source_split_11716:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p8);
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} vslice_dummy_var_452 := ldv_memset($p50, 0, 8);
    goto corral_source_split_11718;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p9);
    goto corral_source_split_11719;

  corral_source_split_11719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} vslice_dummy_var_453 := ldv_memset($p52, 0, 4);
    goto corral_source_split_11720;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p10);
    goto corral_source_split_11721;

  corral_source_split_11721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} vslice_dummy_var_454 := ldv_memset($p54, 0, 4);
    goto corral_source_split_11722;

  corral_source_split_11722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} vslice_dummy_var_455 := ldv_memset($p11, 0, 1);
    goto corral_source_split_11723;

  corral_source_split_11723:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p12);
    goto corral_source_split_11724;

  corral_source_split_11724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} vslice_dummy_var_456 := ldv_memset($p57, 0, 4);
    goto corral_source_split_11725;

  corral_source_split_11725:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p13);
    goto corral_source_split_11726;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} vslice_dummy_var_457 := ldv_memset($p59, 0, 4);
    goto corral_source_split_11727;

  corral_source_split_11727:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p14);
    goto corral_source_split_11728;

  corral_source_split_11728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} vslice_dummy_var_458 := ldv_memset($p61, 0, 4);
    goto corral_source_split_11729;

  corral_source_split_11729:
    assume {:verifier.code 0} true;
    $M.83 := 0;
    call {:si_unique_call 1968} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_11730;

  corral_source_split_11730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} timer_init_3();
    goto corral_source_split_11731;

  corral_source_split_11731:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1970} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_11732;

  corral_source_split_11732:
    assume {:verifier.code 0} true;
    $M.48 := 0;
    call {:si_unique_call 1971} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_11733;

  corral_source_split_11733:
    assume {:verifier.code 0} true;
    $M.85 := 0;
    call {:si_unique_call 1972} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_11734;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} work_init_2();
    goto corral_source_split_11735;

  corral_source_split_11735:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1974} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_11736;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    $M.87 := 0;
    call {:si_unique_call 1975} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_11737;

  corral_source_split_11737:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1976} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_11738;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} timer_init_4();
    goto corral_source_split_11739;

  corral_source_split_11739:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1978} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_11740;

  corral_source_split_11740:
    assume {:verifier.code 0} true;
    $M.90 := 0;
    call {:si_unique_call 1979} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_11741;

  corral_source_split_11741:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1980} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_11742;

  corral_source_split_11742:
    assume {:verifier.code 0} true;
    $M.92 := 0;
    call {:si_unique_call 1981} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_11743;

  corral_source_split_11743:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i87, $i88, $i90, $i91, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $p133, $i135, $i136, $p137, $i138, $i140, $i141, $p142, $i143, $i145, $i146, $p147, $i148, $i150, $i151, $p152, $i153, $i155, $i156, $p157, $i158, $i160, $i161, $p162, $i163, $i164, $i165, $i166, $i167, $p168, $i170, $i171, $p172, $i173, $i174, $p175, $i176, $i177, $p178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $p200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $p208, $i209, $i210, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $p224, $p225, $i227, $i228, $i229, $i230, $p231, $i232, $i234, $i235, $p236, $i237, $i238, $i240, $i241, $p242, $p243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $i298, $i299, $i300, $p301, $i302, $i303, $p304, $i305, $i306, $i307, $i308, $i309, $p310, $i311, $i312, $i313, $i314, $i315, $p316, $i317, $i318, $i319, $i320, $i321, $p322, $i323, $i324, $i325, $i326, $i327, $p328, $i329, $i330, $i331, $i332, $i333, $p334, $i335, $i336, $i337, $i339, $i340, $p341, $i342, $i343, $i344, $i346, $i347, $p348, $i349, $i350, $i351, $i353, $i354, $p355, $i356, $i357, $i358, $i360, $i361, $p362, $i363, $i364, $i365, $i367, $i368, $p369, $i370, $i371, $p372, $i373, $i374, $p375, $i376, $i377, $p378, $i379, $i380, $p381, $i382, $i383, $p384, $i386, $i387, $p388, $i390, $i391, $p392, $i394, $i395, $p396, $i398, $i399, $p400, $i402, $i403, $p404, $i405, $i406, $p407, $i408, $i409, $p410, $i411, $i412, $p413, $i414, $i415, $p416, $i417, $i418, $p419, $i420, $i421, $p422, $i423, $i424, $p425, $i426, $i427, $p428, $i429, $i430, $p431, $i432, $i433, $p434, $p435, $i436, $i437, $i438, $i439, $i440, $p441, $i442, $i443, $p444, $i445, $i446, $p447, $i448, $i449, $p450, $i451, $i452, $p453, $i454, $i455, $p456, $i457, $i458, $p459, $i460, $i461, $p462, $i463, $i464, $p465, $i466, $i467, $p468, $i469, $i470, $p471, $i472, $i473, $i475, $i476, $p477, $i478, $i479, $i481, $i482, $p483, $i484, $i485, $i487, $i488, $p489, $i490, $i491, $i493, $i494, $p495, $i496, $i497, $i499, $i500, $p501, $i503, $i504, $p505, $i507, $i508, $p509, $i511, $i512, $p513, $i515, $i516, $p517, $i519, $i520, $p521, $i522, $i523, $p524, $i525, $i526, $i528, $i529, $p530, $i531, $i532, $i534, $i535, $p536, $i537, $i538, $i540, $i541, $p542, $i543, $i544, $i546, $i547, $p548, $i549, $i550, $i552, $i553, $p554, $i555, $i557, $i558, $p559, $p560, $i561, $i562, $p563, $i565, $i566, $p567, $i569, $i570, $p571, $i573, $i574, $p575, $i577, $i578, $p579, $i581, $i582, $p583, $i584, $i586, $i587, $p588, $i589, $i591, $i592, $p593, $i594, $i596, $i597, $p598, $i599, $i601, $i602, $p603, $i604, $i606, $i607, $p608, $i610, $i611, $p612, $i614, $i615, $p616, $i618, $i619, $p620, $i622, $i623, $p624, $i626, $i627, $p628, $i630, $i631, $p632, $i634, $i635, $p636, $i638, $i639, $p640, $i642, $i643, $p644, $i646, $i647, $p648, $i649, $i650, $p651, $i652, $i653, $p654, $i655, $i656, $p657, $i658, $i659, $p660, $i661, $i662, $p663, $i664, $i665, $i666, $p667, $i668, $i669, $i670, $p671, $i672, $i673, $i674, $p675, $i676, $i677, $i678, $p679, $i680, $i681, $i682, $i684, $i685, $i687, $i688, $i690, $i691, $i693, $i694, $i695, $i696, $i698, $i699, vslice_dummy_var_459, vslice_dummy_var_460, vslice_dummy_var_461, vslice_dummy_var_462, vslice_dummy_var_463, vslice_dummy_var_464, vslice_dummy_var_465, vslice_dummy_var_466, vslice_dummy_var_467, vslice_dummy_var_468, vslice_dummy_var_469, vslice_dummy_var_470, vslice_dummy_var_471, vslice_dummy_var_472, vslice_dummy_var_473, vslice_dummy_var_474, vslice_dummy_var_475, vslice_dummy_var_476, vslice_dummy_var_477, vslice_dummy_var_478, vslice_dummy_var_479, vslice_dummy_var_480, vslice_dummy_var_481, vslice_dummy_var_482, vslice_dummy_var_483, vslice_dummy_var_484, vslice_dummy_var_485, vslice_dummy_var_486, vslice_dummy_var_487, vslice_dummy_var_488, vslice_dummy_var_489, vslice_dummy_var_490, vslice_dummy_var_491, vslice_dummy_var_492, vslice_dummy_var_493, vslice_dummy_var_494, vslice_dummy_var_495, vslice_dummy_var_496, vslice_dummy_var_497, vslice_dummy_var_498, vslice_dummy_var_499, vslice_dummy_var_500, vslice_dummy_var_501, vslice_dummy_var_502, vslice_dummy_var_503, vslice_dummy_var_504, vslice_dummy_var_505, vslice_dummy_var_506, vslice_dummy_var_507, vslice_dummy_var_508, vslice_dummy_var_509, vslice_dummy_var_510, vslice_dummy_var_511, vslice_dummy_var_512, vslice_dummy_var_513, vslice_dummy_var_514, vslice_dummy_var_515, vslice_dummy_var_516, vslice_dummy_var_517, vslice_dummy_var_518, vslice_dummy_var_519, vslice_dummy_var_520, vslice_dummy_var_521, vslice_dummy_var_522, vslice_dummy_var_523, vslice_dummy_var_524, vslice_dummy_var_525, vslice_dummy_var_526 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p13, $p14, $p16, $p18, $p20, $p22, $p24, $p26, $p27, $p29, $p30, $p32, $p34, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i87, $i88, $i90, $i91, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $p133, $i135, $i136, $p137, $i138, $i140, $i141, $p142, $i143, $i145, $i146, $p147, $i148, $i150, $i151, $p152, $i153, $i155, $i156, $p157, $i158, $i160, $i161, $p162, $i163, $i164, $i165, $i166, $i167, $p168, $i170, $i171, $p172, $i173, $i174, $p175, $i176, $i177, $p178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $p200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $p208, $i209, $i210, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $p224, $p225, $i227, $i228, $i229, $i230, $p231, $i232, $i234, $i235, $p236, $i237, $i238, $i240, $i241, $p242, $p243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $i298, $i299, $i300, $p301, $i302, $i303, $p304, $i305, $i306, $i307, $i308, $i309, $p310, $i311, $i312, $i313, $i314, $i315, $p316, $i317, $i318, $i319, $i320, $i321, $p322, $i323, $i324, $i325, $i326, $i327, $p328, $i329, $i330, $i331, $i332, $i333, $p334, $i335, $i336, $i337, $i339, $i340, $p341, $i342, $i343, $i344, $i346, $i347, $p348, $i349, $i350, $i351, $i353, $i354, $p355, $i356, $i357, $i358, $i360, $i361, $p362, $i363, $i364, $i365, $i367, $i368, $p369, $i370, $i371, $p372, $i373, $i374, $p375, $i376, $i377, $p378, $i379, $i380, $p381, $i382, $i383, $p384, $i386, $i387, $p388, $i390, $i391, $p392, $i394, $i395, $p396, $i398, $i399, $p400, $i402, $i403, $p404, $i405, $i406, $p407, $i408, $i409, $p410, $i411, $i412, $p413, $i414, $i415, $p416, $i417, $i418, $p419, $i420, $i421, $p422, $i423, $i424, $p425, $i426, $i427, $p428, $i429, $i430, $p431, $i432, $i433, $p434, $p435, $i436, $i437, $i438, $i439, $i440, $p441, $i442, $i443, $p444, $i445, $i446, $p447, $i448, $i449, $p450, $i451, $i452, $p453, $i454, $i455, $p456, $i457, $i458, $p459, $i460, $i461, $p462, $i463, $i464, $p465, $i466, $i467, $p468, $i469, $i470, $p471, $i472, $i473, $i475, $i476, $p477, $i478, $i479, $i481, $i482, $p483, $i484, $i485, $i487, $i488, $p489, $i490, $i491, $i493, $i494, $p495, $i496, $i497, $i499, $i500, $p501, $i503, $i504, $p505, $i507, $i508, $p509, $i511, $i512, $p513, $i515, $i516, $p517, $i519, $i520, $p521, $i522, $i523, $p524, $i525, $i526, $i528, $i529, $p530, $i531, $i532, $i534, $i535, $p536, $i537, $i538, $i540, $i541, $p542, $i543, $i544, $i546, $i547, $p548, $i549, $i550, $i552, $i553, $p554, $i555, $i557, $i558, $p559, $p560, $i561, $i562, $p563, $i565, $i566, $p567, $i569, $i570, $p571, $i573, $i574, $p575, $i577, $i578, $p579, $i581, $i582, $p583, $i584, $i586, $i587, $p588, $i589, $i591, $i592, $p593, $i594, $i596, $i597, $p598, $i599, $i601, $i602, $p603, $i604, $i606, $i607, $p608, $i610, $i611, $p612, $i614, $i615, $p616, $i618, $i619, $p620, $i622, $i623, $p624, $i626, $i627, $p628, $i630, $i631, $p632, $i634, $i635, $p636, $i638, $i639, $p640, $i642, $i643, $p644, $i646, $i647, $p648, $i649, $i650, $p651, $i652, $i653, $p654, $i655, $i656, $p657, $i658, $i659, $p660, $i661, $i662, $p663, $i664, $i665, $i666, $p667, $i668, $i669, $i670, $p671, $i672, $i673, $i674, $p675, $i676, $i677, $i678, $p679, $i680, $i681, $i682, $i684, $i685, $i687, $i688, $i690, $i691, $i693, $i694, $i695, $i696, $i698, $i699, vslice_dummy_var_459, vslice_dummy_var_460, vslice_dummy_var_461, vslice_dummy_var_462, vslice_dummy_var_463, vslice_dummy_var_464, vslice_dummy_var_465, vslice_dummy_var_466, vslice_dummy_var_467, vslice_dummy_var_468, vslice_dummy_var_469, vslice_dummy_var_470, vslice_dummy_var_471, vslice_dummy_var_472, vslice_dummy_var_473, vslice_dummy_var_474, vslice_dummy_var_475, vslice_dummy_var_476, vslice_dummy_var_477, vslice_dummy_var_478, vslice_dummy_var_479, vslice_dummy_var_480, vslice_dummy_var_481, vslice_dummy_var_482, vslice_dummy_var_483, vslice_dummy_var_484, vslice_dummy_var_485, vslice_dummy_var_486, vslice_dummy_var_487, vslice_dummy_var_488, vslice_dummy_var_489, vslice_dummy_var_490, vslice_dummy_var_491, vslice_dummy_var_492, vslice_dummy_var_493, vslice_dummy_var_494, vslice_dummy_var_495, vslice_dummy_var_496, vslice_dummy_var_497, vslice_dummy_var_498, vslice_dummy_var_499, vslice_dummy_var_500, vslice_dummy_var_501, vslice_dummy_var_502, vslice_dummy_var_503, vslice_dummy_var_504, vslice_dummy_var_505, vslice_dummy_var_506, vslice_dummy_var_507, vslice_dummy_var_508, vslice_dummy_var_509, vslice_dummy_var_510, vslice_dummy_var_511, vslice_dummy_var_512, vslice_dummy_var_513, vslice_dummy_var_514, vslice_dummy_var_515, vslice_dummy_var_516, vslice_dummy_var_517, vslice_dummy_var_518, vslice_dummy_var_519, vslice_dummy_var_520, vslice_dummy_var_521, vslice_dummy_var_522, vslice_dummy_var_523, vslice_dummy_var_524, vslice_dummy_var_525, vslice_dummy_var_526);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i63, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i63, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i63, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i63, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i63, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2289} ldv_stop();
    goto corral_source_split_13013;

  corral_source_split_13013:
    assume {:verifier.code 0} true;
    goto $bb600;

  $bb600:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb76_dummy;

  $bb11:
    assume $i68 == 1;
    goto corral_source_split_11753;

  corral_source_split_11753:
    assume {:verifier.code 0} true;
    $i270 := $M.92;
    goto corral_source_split_11754;

  corral_source_split_11754:
    assume {:verifier.code 0} true;
    $i271 := $ne.i32($i270, 0);
    goto corral_source_split_11755;

  corral_source_split_11755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb598;

  $bb598:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb251:
    assume $i271 == 1;
    goto corral_source_split_12155;

  corral_source_split_12155:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2092} $i272 := __VERIFIER_nondet_int();
    call {:si_unique_call 2093} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i272);
    call {:si_unique_call 2094} {:cexpr "tmp___16"} boogie_si_record_i32($i272);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $i273 := $slt.i32($i272, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    $i274 := $slt.i32($i272, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    $i275 := $slt.i32($i272, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i275 == 1);
    assume {:verifier.code 0} true;
    $i276 := $slt.i32($i272, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    $i277 := $slt.i32($i272, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  $bb263:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i272, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    assume !($i278 == 1);
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2288} ldv_stop();
    goto corral_source_split_13011;

  corral_source_split_13011:
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb597:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb598;

  $bb264:
    assume $i278 == 1;
    goto corral_source_split_12161;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    $i695 := $M.92;
    goto corral_source_split_12162;

  corral_source_split_12162:
    assume {:verifier.code 0} true;
    $i696 := $eq.i32($i695, 1);
    goto corral_source_split_12163;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb593, $bb594;

  $bb594:
    assume !($i696 == 1);
    assume {:verifier.code 0} true;
    goto $bb595;

  $bb595:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb593:
    assume $i696 == 1;
    goto corral_source_split_13004;

  corral_source_split_13004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2285} vslice_dummy_var_526 := ldv_setup_5();
    goto corral_source_split_13005;

  corral_source_split_13005:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2286} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_13006;

  corral_source_split_13006:
    assume {:verifier.code 0} true;
    $i698 := $M.90;
    goto corral_source_split_13007;

  corral_source_split_13007:
    assume {:verifier.code 0} true;
    $i699 := $add.i32($i698, 1);
    goto corral_source_split_13008;

  corral_source_split_13008:
    assume {:verifier.code 0} true;
    $M.90 := $i699;
    call {:si_unique_call 2287} {:cexpr "ref_cnt"} boogie_si_record_i32($i699);
    goto corral_source_split_13009;

  corral_source_split_13009:
    assume {:verifier.code 0} true;
    goto $bb595;

  $bb262:
    assume $i277 == 1;
    goto corral_source_split_12157;

  corral_source_split_12157:
    assume {:verifier.code 0} true;
    $i690 := $M.92;
    goto corral_source_split_12158;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    $i691 := $eq.i32($i690, 4);
    goto corral_source_split_12159;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb590, $bb591;

  $bb591:
    assume !($i691 == 1);
    assume {:verifier.code 0} true;
    goto $bb592;

  $bb592:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb590:
    assume $i691 == 1;
    goto corral_source_split_12997;

  corral_source_split_12997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2282} vslice_dummy_var_525 := ldv_release_5();
    goto corral_source_split_12998;

  corral_source_split_12998:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2283} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12999;

  corral_source_split_12999:
    assume {:verifier.code 0} true;
    $i693 := $M.90;
    goto corral_source_split_13000;

  corral_source_split_13000:
    assume {:verifier.code 0} true;
    $i694 := $sub.i32($i693, 1);
    goto corral_source_split_13001;

  corral_source_split_13001:
    assume {:verifier.code 0} true;
    $M.90 := $i694;
    call {:si_unique_call 2284} {:cexpr "ref_cnt"} boogie_si_record_i32($i694);
    goto corral_source_split_13002;

  corral_source_split_13002:
    assume {:verifier.code 0} true;
    goto $bb592;

  $bb260:
    assume $i276 == 1;
    assume {:verifier.code 0} true;
    $i279 := $slt.i32($i272, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i279 == 1);
    goto corral_source_split_12169;

  corral_source_split_12169:
    assume {:verifier.code 0} true;
    $i681 := $M.92;
    goto corral_source_split_12170;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    $i682 := $eq.i32($i681, 3);
    goto corral_source_split_12171;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb581, $bb582;

  $bb582:
    assume !($i682 == 1);
    assume {:verifier.code 0} true;
    goto $bb583;

  $bb583:
    assume {:verifier.code 0} true;
    $i684 := $M.92;
    goto corral_source_split_12983;

  corral_source_split_12983:
    assume {:verifier.code 0} true;
    $i685 := $eq.i32($i684, 2);
    goto corral_source_split_12984;

  corral_source_split_12984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb584, $bb585;

  $bb585:
    assume !($i685 == 1);
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    $i687 := $M.92;
    goto corral_source_split_12990;

  corral_source_split_12990:
    assume {:verifier.code 0} true;
    $i688 := $eq.i32($i687, 5);
    goto corral_source_split_12991;

  corral_source_split_12991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb587, $bb588;

  $bb588:
    assume !($i688 == 1);
    assume {:verifier.code 0} true;
    goto $bb589;

  $bb589:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb587:
    assume $i688 == 1;
    goto corral_source_split_12993;

  corral_source_split_12993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2280} vslice_dummy_var_524 := ldv_disconnect_5();
    goto corral_source_split_12994;

  corral_source_split_12994:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2281} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12995;

  corral_source_split_12995:
    assume {:verifier.code 0} true;
    goto $bb589;

  $bb584:
    assume $i685 == 1;
    goto corral_source_split_12986;

  corral_source_split_12986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2278} vslice_dummy_var_523 := ldv_disconnect_5();
    goto corral_source_split_12987;

  corral_source_split_12987:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2279} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12988;

  corral_source_split_12988:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb581:
    assume $i682 == 1;
    goto corral_source_split_12979;

  corral_source_split_12979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2276} vslice_dummy_var_522 := ldv_disconnect_5();
    goto corral_source_split_12980;

  corral_source_split_12980:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2277} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12981;

  corral_source_split_12981:
    assume {:verifier.code 0} true;
    goto $bb583;

  $bb267:
    assume $i279 == 1;
    goto corral_source_split_12165;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    $i661 := $M.92;
    goto corral_source_split_12166;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    $i662 := $eq.i32($i661, 4);
    goto corral_source_split_12167;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb566, $bb567;

  $bb567:
    assume !($i662 == 1);
    assume {:verifier.code 0} true;
    goto $bb568;

  $bb568:
    assume {:verifier.code 0} true;
    $i665 := $M.92;
    goto corral_source_split_12943;

  corral_source_split_12943:
    assume {:verifier.code 0} true;
    $i666 := $eq.i32($i665, 1);
    goto corral_source_split_12944;

  corral_source_split_12944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb569, $bb570;

  $bb570:
    assume !($i666 == 1);
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb571:
    assume {:verifier.code 0} true;
    $i669 := $M.92;
    goto corral_source_split_12952;

  corral_source_split_12952:
    assume {:verifier.code 0} true;
    $i670 := $eq.i32($i669, 3);
    goto corral_source_split_12953;

  corral_source_split_12953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb572, $bb573;

  $bb573:
    assume !($i670 == 1);
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb574:
    assume {:verifier.code 0} true;
    $i673 := $M.92;
    goto corral_source_split_12961;

  corral_source_split_12961:
    assume {:verifier.code 0} true;
    $i674 := $eq.i32($i673, 2);
    goto corral_source_split_12962;

  corral_source_split_12962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb575, $bb576;

  $bb576:
    assume !($i674 == 1);
    assume {:verifier.code 0} true;
    goto $bb577;

  $bb577:
    assume {:verifier.code 0} true;
    $i677 := $M.92;
    goto corral_source_split_12970;

  corral_source_split_12970:
    assume {:verifier.code 0} true;
    $i678 := $eq.i32($i677, 5);
    goto corral_source_split_12971;

  corral_source_split_12971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb578, $bb579;

  $bb579:
    assume !($i678 == 1);
    assume {:verifier.code 0} true;
    goto $bb580;

  $bb580:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb578:
    assume $i678 == 1;
    goto corral_source_split_12973;

  corral_source_split_12973:
    assume {:verifier.code 0} true;
    $p679 := $M.82;
    goto corral_source_split_12974;

  corral_source_split_12974:
    assume {:verifier.code 0} true;
    $i680 := $load.i32($M.66, $p14);
    goto corral_source_split_12975;

  corral_source_split_12975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} wait_until_sent($p679, $i680);
    goto corral_source_split_12976;

  corral_source_split_12976:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2275} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12977;

  corral_source_split_12977:
    assume {:verifier.code 0} true;
    goto $bb580;

  $bb575:
    assume $i674 == 1;
    goto corral_source_split_12964;

  corral_source_split_12964:
    assume {:verifier.code 0} true;
    $p675 := $M.82;
    goto corral_source_split_12965;

  corral_source_split_12965:
    assume {:verifier.code 0} true;
    $i676 := $load.i32($M.66, $p14);
    goto corral_source_split_12966;

  corral_source_split_12966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} wait_until_sent($p675, $i676);
    goto corral_source_split_12967;

  corral_source_split_12967:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2273} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12968;

  corral_source_split_12968:
    assume {:verifier.code 0} true;
    goto $bb577;

  $bb572:
    assume $i670 == 1;
    goto corral_source_split_12955;

  corral_source_split_12955:
    assume {:verifier.code 0} true;
    $p671 := $M.82;
    goto corral_source_split_12956;

  corral_source_split_12956:
    assume {:verifier.code 0} true;
    $i672 := $load.i32($M.66, $p14);
    goto corral_source_split_12957;

  corral_source_split_12957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2270} wait_until_sent($p671, $i672);
    goto corral_source_split_12958;

  corral_source_split_12958:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2271} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12959;

  corral_source_split_12959:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb569:
    assume $i666 == 1;
    goto corral_source_split_12946;

  corral_source_split_12946:
    assume {:verifier.code 0} true;
    $p667 := $M.82;
    goto corral_source_split_12947;

  corral_source_split_12947:
    assume {:verifier.code 0} true;
    $i668 := $load.i32($M.66, $p14);
    goto corral_source_split_12948;

  corral_source_split_12948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2268} wait_until_sent($p667, $i668);
    goto corral_source_split_12949;

  corral_source_split_12949:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2269} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12950;

  corral_source_split_12950:
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb566:
    assume $i662 == 1;
    goto corral_source_split_12937;

  corral_source_split_12937:
    assume {:verifier.code 0} true;
    $p663 := $M.82;
    goto corral_source_split_12938;

  corral_source_split_12938:
    assume {:verifier.code 0} true;
    $i664 := $load.i32($M.66, $p14);
    goto corral_source_split_12939;

  corral_source_split_12939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} wait_until_sent($p663, $i664);
    goto corral_source_split_12940;

  corral_source_split_12940:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2267} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12941;

  corral_source_split_12941:
    assume {:verifier.code 0} true;
    goto $bb568;

  $bb258:
    assume $i275 == 1;
    assume {:verifier.code 0} true;
    $i280 := $slt.i32($i272, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    $i281 := $slt.i32($i272, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i281 == 1);
    goto corral_source_split_12181;

  corral_source_split_12181:
    assume {:verifier.code 0} true;
    $i646 := $M.92;
    goto corral_source_split_12182;

  corral_source_split_12182:
    assume {:verifier.code 0} true;
    $i647 := $eq.i32($i646, 4);
    goto corral_source_split_12183;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb551, $bb552;

  $bb552:
    assume !($i647 == 1);
    assume {:verifier.code 0} true;
    goto $bb553;

  $bb553:
    assume {:verifier.code 0} true;
    $i649 := $M.92;
    goto corral_source_split_12905;

  corral_source_split_12905:
    assume {:verifier.code 0} true;
    $i650 := $eq.i32($i649, 1);
    goto corral_source_split_12906;

  corral_source_split_12906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb554, $bb555;

  $bb555:
    assume !($i650 == 1);
    assume {:verifier.code 0} true;
    goto $bb556;

  $bb556:
    assume {:verifier.code 0} true;
    $i652 := $M.92;
    goto corral_source_split_12913;

  corral_source_split_12913:
    assume {:verifier.code 0} true;
    $i653 := $eq.i32($i652, 3);
    goto corral_source_split_12914;

  corral_source_split_12914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb557, $bb558;

  $bb558:
    assume !($i653 == 1);
    assume {:verifier.code 0} true;
    goto $bb559;

  $bb559:
    assume {:verifier.code 0} true;
    $i655 := $M.92;
    goto corral_source_split_12921;

  corral_source_split_12921:
    assume {:verifier.code 0} true;
    $i656 := $eq.i32($i655, 2);
    goto corral_source_split_12922;

  corral_source_split_12922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb560, $bb561;

  $bb561:
    assume !($i656 == 1);
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb562:
    assume {:verifier.code 0} true;
    $i658 := $M.92;
    goto corral_source_split_12929;

  corral_source_split_12929:
    assume {:verifier.code 0} true;
    $i659 := $eq.i32($i658, 5);
    goto corral_source_split_12930;

  corral_source_split_12930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb563, $bb564;

  $bb564:
    assume !($i659 == 1);
    assume {:verifier.code 0} true;
    goto $bb565;

  $bb565:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb563:
    assume $i659 == 1;
    goto corral_source_split_12932;

  corral_source_split_12932:
    assume {:verifier.code 0} true;
    $p660 := $M.82;
    goto corral_source_split_12933;

  corral_source_split_12933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} flush_chars($p660);
    goto corral_source_split_12934;

  corral_source_split_12934:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2265} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12935;

  corral_source_split_12935:
    assume {:verifier.code 0} true;
    goto $bb565;

  $bb560:
    assume $i656 == 1;
    goto corral_source_split_12924;

  corral_source_split_12924:
    assume {:verifier.code 0} true;
    $p657 := $M.82;
    goto corral_source_split_12925;

  corral_source_split_12925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2262} flush_chars($p657);
    goto corral_source_split_12926;

  corral_source_split_12926:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2263} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12927;

  corral_source_split_12927:
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb557:
    assume $i653 == 1;
    goto corral_source_split_12916;

  corral_source_split_12916:
    assume {:verifier.code 0} true;
    $p654 := $M.82;
    goto corral_source_split_12917;

  corral_source_split_12917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2260} flush_chars($p654);
    goto corral_source_split_12918;

  corral_source_split_12918:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2261} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12919;

  corral_source_split_12919:
    assume {:verifier.code 0} true;
    goto $bb559;

  $bb554:
    assume $i650 == 1;
    goto corral_source_split_12908;

  corral_source_split_12908:
    assume {:verifier.code 0} true;
    $p651 := $M.82;
    goto corral_source_split_12909;

  corral_source_split_12909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2258} flush_chars($p651);
    goto corral_source_split_12910;

  corral_source_split_12910:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2259} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12911;

  corral_source_split_12911:
    assume {:verifier.code 0} true;
    goto $bb556;

  $bb551:
    assume $i647 == 1;
    goto corral_source_split_12900;

  corral_source_split_12900:
    assume {:verifier.code 0} true;
    $p648 := $M.82;
    goto corral_source_split_12901;

  corral_source_split_12901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2256} flush_chars($p648);
    goto corral_source_split_12902;

  corral_source_split_12902:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2257} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12903;

  corral_source_split_12903:
    assume {:verifier.code 0} true;
    goto $bb553;

  $bb271:
    assume $i281 == 1;
    goto corral_source_split_12177;

  corral_source_split_12177:
    assume {:verifier.code 0} true;
    $i626 := $M.92;
    goto corral_source_split_12178;

  corral_source_split_12178:
    assume {:verifier.code 0} true;
    $i627 := $eq.i32($i626, 4);
    goto corral_source_split_12179;

  corral_source_split_12179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb536, $bb537;

  $bb537:
    assume !($i627 == 1);
    assume {:verifier.code 0} true;
    goto $bb538;

  $bb538:
    assume {:verifier.code 0} true;
    $i630 := $M.92;
    goto corral_source_split_12868;

  corral_source_split_12868:
    assume {:verifier.code 0} true;
    $i631 := $eq.i32($i630, 1);
    goto corral_source_split_12869;

  corral_source_split_12869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb539, $bb540;

  $bb540:
    assume !($i631 == 1);
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb541:
    assume {:verifier.code 0} true;
    $i634 := $M.92;
    goto corral_source_split_12876;

  corral_source_split_12876:
    assume {:verifier.code 0} true;
    $i635 := $eq.i32($i634, 3);
    goto corral_source_split_12877;

  corral_source_split_12877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb542, $bb543;

  $bb543:
    assume !($i635 == 1);
    assume {:verifier.code 0} true;
    goto $bb544;

  $bb544:
    assume {:verifier.code 0} true;
    $i638 := $M.92;
    goto corral_source_split_12884;

  corral_source_split_12884:
    assume {:verifier.code 0} true;
    $i639 := $eq.i32($i638, 2);
    goto corral_source_split_12885;

  corral_source_split_12885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb545, $bb546;

  $bb546:
    assume !($i639 == 1);
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb547:
    assume {:verifier.code 0} true;
    $i642 := $M.92;
    goto corral_source_split_12892;

  corral_source_split_12892:
    assume {:verifier.code 0} true;
    $i643 := $eq.i32($i642, 5);
    goto corral_source_split_12893;

  corral_source_split_12893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb548, $bb549;

  $bb549:
    assume !($i643 == 1);
    assume {:verifier.code 0} true;
    goto $bb550;

  $bb550:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb548:
    assume $i643 == 1;
    goto corral_source_split_12895;

  corral_source_split_12895:
    assume {:verifier.code 0} true;
    $p644 := $M.82;
    goto corral_source_split_12896;

  corral_source_split_12896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} vslice_dummy_var_521 := tiocmget($p644);
    goto corral_source_split_12897;

  corral_source_split_12897:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2255} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12898;

  corral_source_split_12898:
    assume {:verifier.code 0} true;
    goto $bb550;

  $bb545:
    assume $i639 == 1;
    goto corral_source_split_12887;

  corral_source_split_12887:
    assume {:verifier.code 0} true;
    $p640 := $M.82;
    goto corral_source_split_12888;

  corral_source_split_12888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2252} vslice_dummy_var_520 := tiocmget($p640);
    goto corral_source_split_12889;

  corral_source_split_12889:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2253} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12890;

  corral_source_split_12890:
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb542:
    assume $i635 == 1;
    goto corral_source_split_12879;

  corral_source_split_12879:
    assume {:verifier.code 0} true;
    $p636 := $M.82;
    goto corral_source_split_12880;

  corral_source_split_12880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2250} vslice_dummy_var_519 := tiocmget($p636);
    goto corral_source_split_12881;

  corral_source_split_12881:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2251} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12882;

  corral_source_split_12882:
    assume {:verifier.code 0} true;
    goto $bb544;

  $bb539:
    assume $i631 == 1;
    goto corral_source_split_12871;

  corral_source_split_12871:
    assume {:verifier.code 0} true;
    $p632 := $M.82;
    goto corral_source_split_12872;

  corral_source_split_12872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} vslice_dummy_var_518 := tiocmget($p632);
    goto corral_source_split_12873;

  corral_source_split_12873:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2249} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12874;

  corral_source_split_12874:
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb536:
    assume $i627 == 1;
    goto corral_source_split_12863;

  corral_source_split_12863:
    assume {:verifier.code 0} true;
    $p628 := $M.82;
    goto corral_source_split_12864;

  corral_source_split_12864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2246} vslice_dummy_var_517 := tiocmget($p628);
    goto corral_source_split_12865;

  corral_source_split_12865:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2247} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12866;

  corral_source_split_12866:
    assume {:verifier.code 0} true;
    goto $bb538;

  $bb269:
    assume $i280 == 1;
    goto corral_source_split_12173;

  corral_source_split_12173:
    assume {:verifier.code 0} true;
    $i606 := $M.92;
    goto corral_source_split_12174;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    $i607 := $eq.i32($i606, 4);
    goto corral_source_split_12175;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb521, $bb522;

  $bb522:
    assume !($i607 == 1);
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb523:
    assume {:verifier.code 0} true;
    $i610 := $M.92;
    goto corral_source_split_12831;

  corral_source_split_12831:
    assume {:verifier.code 0} true;
    $i611 := $eq.i32($i610, 1);
    goto corral_source_split_12832;

  corral_source_split_12832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb524, $bb525;

  $bb525:
    assume !($i611 == 1);
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    $i614 := $M.92;
    goto corral_source_split_12839;

  corral_source_split_12839:
    assume {:verifier.code 0} true;
    $i615 := $eq.i32($i614, 3);
    goto corral_source_split_12840;

  corral_source_split_12840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb527, $bb528;

  $bb528:
    assume !($i615 == 1);
    assume {:verifier.code 0} true;
    goto $bb529;

  $bb529:
    assume {:verifier.code 0} true;
    $i618 := $M.92;
    goto corral_source_split_12847;

  corral_source_split_12847:
    assume {:verifier.code 0} true;
    $i619 := $eq.i32($i618, 2);
    goto corral_source_split_12848;

  corral_source_split_12848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb530, $bb531;

  $bb531:
    assume !($i619 == 1);
    assume {:verifier.code 0} true;
    goto $bb532;

  $bb532:
    assume {:verifier.code 0} true;
    $i622 := $M.92;
    goto corral_source_split_12855;

  corral_source_split_12855:
    assume {:verifier.code 0} true;
    $i623 := $eq.i32($i622, 5);
    goto corral_source_split_12856;

  corral_source_split_12856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb533, $bb534;

  $bb534:
    assume !($i623 == 1);
    assume {:verifier.code 0} true;
    goto $bb535;

  $bb535:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb533:
    assume $i623 == 1;
    goto corral_source_split_12858;

  corral_source_split_12858:
    assume {:verifier.code 0} true;
    $p624 := $M.82;
    goto corral_source_split_12859;

  corral_source_split_12859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2244} vslice_dummy_var_516 := chars_in_buffer($p624);
    goto corral_source_split_12860;

  corral_source_split_12860:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2245} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12861;

  corral_source_split_12861:
    assume {:verifier.code 0} true;
    goto $bb535;

  $bb530:
    assume $i619 == 1;
    goto corral_source_split_12850;

  corral_source_split_12850:
    assume {:verifier.code 0} true;
    $p620 := $M.82;
    goto corral_source_split_12851;

  corral_source_split_12851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2242} vslice_dummy_var_515 := chars_in_buffer($p620);
    goto corral_source_split_12852;

  corral_source_split_12852:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2243} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12853;

  corral_source_split_12853:
    assume {:verifier.code 0} true;
    goto $bb532;

  $bb527:
    assume $i615 == 1;
    goto corral_source_split_12842;

  corral_source_split_12842:
    assume {:verifier.code 0} true;
    $p616 := $M.82;
    goto corral_source_split_12843;

  corral_source_split_12843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2240} vslice_dummy_var_514 := chars_in_buffer($p616);
    goto corral_source_split_12844;

  corral_source_split_12844:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2241} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12845;

  corral_source_split_12845:
    assume {:verifier.code 0} true;
    goto $bb529;

  $bb524:
    assume $i611 == 1;
    goto corral_source_split_12834;

  corral_source_split_12834:
    assume {:verifier.code 0} true;
    $p612 := $M.82;
    goto corral_source_split_12835;

  corral_source_split_12835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2238} vslice_dummy_var_513 := chars_in_buffer($p612);
    goto corral_source_split_12836;

  corral_source_split_12836:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2239} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12837;

  corral_source_split_12837:
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb521:
    assume $i607 == 1;
    goto corral_source_split_12826;

  corral_source_split_12826:
    assume {:verifier.code 0} true;
    $p608 := $M.82;
    goto corral_source_split_12827;

  corral_source_split_12827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2236} vslice_dummy_var_512 := chars_in_buffer($p608);
    goto corral_source_split_12828;

  corral_source_split_12828:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2237} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12829;

  corral_source_split_12829:
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb256:
    assume $i274 == 1;
    assume {:verifier.code 0} true;
    $i282 := $slt.i32($i272, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb273, $bb274;

  $bb274:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    $i283 := $slt.i32($i272, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i283 == 1);
    assume {:verifier.code 0} true;
    $i284 := $slt.i32($i272, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i284 == 1);
    goto corral_source_split_12193;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    $i581 := $M.92;
    goto corral_source_split_12194;

  corral_source_split_12194:
    assume {:verifier.code 0} true;
    $i582 := $eq.i32($i581, 4);
    goto corral_source_split_12195;

  corral_source_split_12195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb506, $bb507;

  $bb507:
    assume !($i582 == 1);
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    $i586 := $M.92;
    goto corral_source_split_12790;

  corral_source_split_12790:
    assume {:verifier.code 0} true;
    $i587 := $eq.i32($i586, 1);
    goto corral_source_split_12791;

  corral_source_split_12791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb509, $bb510;

  $bb510:
    assume !($i587 == 1);
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    $i591 := $M.92;
    goto corral_source_split_12799;

  corral_source_split_12799:
    assume {:verifier.code 0} true;
    $i592 := $eq.i32($i591, 3);
    goto corral_source_split_12800;

  corral_source_split_12800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb512, $bb513;

  $bb513:
    assume !($i592 == 1);
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    $i596 := $M.92;
    goto corral_source_split_12808;

  corral_source_split_12808:
    assume {:verifier.code 0} true;
    $i597 := $eq.i32($i596, 2);
    goto corral_source_split_12809;

  corral_source_split_12809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb515, $bb516;

  $bb516:
    assume !($i597 == 1);
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    $i601 := $M.92;
    goto corral_source_split_12817;

  corral_source_split_12817:
    assume {:verifier.code 0} true;
    $i602 := $eq.i32($i601, 5);
    goto corral_source_split_12818;

  corral_source_split_12818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb518, $bb519;

  $bb519:
    assume !($i602 == 1);
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb520:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb518:
    assume $i602 == 1;
    goto corral_source_split_12820;

  corral_source_split_12820:
    assume {:verifier.code 0} true;
    $p603 := $M.82;
    goto corral_source_split_12821;

  corral_source_split_12821:
    assume {:verifier.code 0} true;
    $i604 := $load.i32($M.66, $p12);
    goto corral_source_split_12822;

  corral_source_split_12822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2234} vslice_dummy_var_511 := set_break($p603, $i604);
    goto corral_source_split_12823;

  corral_source_split_12823:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2235} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12824;

  corral_source_split_12824:
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb515:
    assume $i597 == 1;
    goto corral_source_split_12811;

  corral_source_split_12811:
    assume {:verifier.code 0} true;
    $p598 := $M.82;
    goto corral_source_split_12812;

  corral_source_split_12812:
    assume {:verifier.code 0} true;
    $i599 := $load.i32($M.66, $p12);
    goto corral_source_split_12813;

  corral_source_split_12813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2232} vslice_dummy_var_510 := set_break($p598, $i599);
    goto corral_source_split_12814;

  corral_source_split_12814:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2233} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12815;

  corral_source_split_12815:
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb512:
    assume $i592 == 1;
    goto corral_source_split_12802;

  corral_source_split_12802:
    assume {:verifier.code 0} true;
    $p593 := $M.82;
    goto corral_source_split_12803;

  corral_source_split_12803:
    assume {:verifier.code 0} true;
    $i594 := $load.i32($M.66, $p12);
    goto corral_source_split_12804;

  corral_source_split_12804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2230} vslice_dummy_var_509 := set_break($p593, $i594);
    goto corral_source_split_12805;

  corral_source_split_12805:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2231} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12806;

  corral_source_split_12806:
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb509:
    assume $i587 == 1;
    goto corral_source_split_12793;

  corral_source_split_12793:
    assume {:verifier.code 0} true;
    $p588 := $M.82;
    goto corral_source_split_12794;

  corral_source_split_12794:
    assume {:verifier.code 0} true;
    $i589 := $load.i32($M.66, $p12);
    goto corral_source_split_12795;

  corral_source_split_12795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2228} vslice_dummy_var_508 := set_break($p588, $i589);
    goto corral_source_split_12796;

  corral_source_split_12796:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2229} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12797;

  corral_source_split_12797:
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb506:
    assume $i582 == 1;
    goto corral_source_split_12784;

  corral_source_split_12784:
    assume {:verifier.code 0} true;
    $p583 := $M.82;
    goto corral_source_split_12785;

  corral_source_split_12785:
    assume {:verifier.code 0} true;
    $i584 := $load.i32($M.66, $p12);
    goto corral_source_split_12786;

  corral_source_split_12786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2226} vslice_dummy_var_507 := set_break($p583, $i584);
    goto corral_source_split_12787;

  corral_source_split_12787:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2227} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12788;

  corral_source_split_12788:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb277:
    assume $i284 == 1;
    goto corral_source_split_12189;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    $i561 := $M.92;
    goto corral_source_split_12190;

  corral_source_split_12190:
    assume {:verifier.code 0} true;
    $i562 := $eq.i32($i561, 4);
    goto corral_source_split_12191;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb491, $bb492;

  $bb492:
    assume !($i562 == 1);
    assume {:verifier.code 0} true;
    goto $bb493;

  $bb493:
    assume {:verifier.code 0} true;
    $i565 := $M.92;
    goto corral_source_split_12752;

  corral_source_split_12752:
    assume {:verifier.code 0} true;
    $i566 := $eq.i32($i565, 1);
    goto corral_source_split_12753;

  corral_source_split_12753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb494, $bb495;

  $bb495:
    assume !($i566 == 1);
    assume {:verifier.code 0} true;
    goto $bb496;

  $bb496:
    assume {:verifier.code 0} true;
    $i569 := $M.92;
    goto corral_source_split_12760;

  corral_source_split_12760:
    assume {:verifier.code 0} true;
    $i570 := $eq.i32($i569, 3);
    goto corral_source_split_12761;

  corral_source_split_12761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb497, $bb498;

  $bb498:
    assume !($i570 == 1);
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb499:
    assume {:verifier.code 0} true;
    $i573 := $M.92;
    goto corral_source_split_12768;

  corral_source_split_12768:
    assume {:verifier.code 0} true;
    $i574 := $eq.i32($i573, 2);
    goto corral_source_split_12769;

  corral_source_split_12769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb500, $bb501;

  $bb501:
    assume !($i574 == 1);
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    $i577 := $M.92;
    goto corral_source_split_12776;

  corral_source_split_12776:
    assume {:verifier.code 0} true;
    $i578 := $eq.i32($i577, 5);
    goto corral_source_split_12777;

  corral_source_split_12777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb503, $bb504;

  $bb504:
    assume !($i578 == 1);
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb505:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb503:
    assume $i578 == 1;
    goto corral_source_split_12779;

  corral_source_split_12779:
    assume {:verifier.code 0} true;
    $p579 := $M.82;
    goto corral_source_split_12780;

  corral_source_split_12780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2224} vslice_dummy_var_506 := write_room($p579);
    goto corral_source_split_12781;

  corral_source_split_12781:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2225} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12782;

  corral_source_split_12782:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb500:
    assume $i574 == 1;
    goto corral_source_split_12771;

  corral_source_split_12771:
    assume {:verifier.code 0} true;
    $p575 := $M.82;
    goto corral_source_split_12772;

  corral_source_split_12772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2222} vslice_dummy_var_505 := write_room($p575);
    goto corral_source_split_12773;

  corral_source_split_12773:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2223} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12774;

  corral_source_split_12774:
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb497:
    assume $i570 == 1;
    goto corral_source_split_12763;

  corral_source_split_12763:
    assume {:verifier.code 0} true;
    $p571 := $M.82;
    goto corral_source_split_12764;

  corral_source_split_12764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} vslice_dummy_var_504 := write_room($p571);
    goto corral_source_split_12765;

  corral_source_split_12765:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2221} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12766;

  corral_source_split_12766:
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb494:
    assume $i566 == 1;
    goto corral_source_split_12755;

  corral_source_split_12755:
    assume {:verifier.code 0} true;
    $p567 := $M.82;
    goto corral_source_split_12756;

  corral_source_split_12756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2218} vslice_dummy_var_503 := write_room($p567);
    goto corral_source_split_12757;

  corral_source_split_12757:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2219} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12758;

  corral_source_split_12758:
    assume {:verifier.code 0} true;
    goto $bb496;

  $bb491:
    assume $i562 == 1;
    goto corral_source_split_12747;

  corral_source_split_12747:
    assume {:verifier.code 0} true;
    $p563 := $M.82;
    goto corral_source_split_12748;

  corral_source_split_12748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2216} vslice_dummy_var_502 := write_room($p563);
    goto corral_source_split_12749;

  corral_source_split_12749:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2217} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12750;

  corral_source_split_12750:
    assume {:verifier.code 0} true;
    goto $bb493;

  $bb275:
    assume $i283 == 1;
    goto corral_source_split_12185;

  corral_source_split_12185:
    assume {:verifier.code 0} true;
    $i557 := $M.92;
    goto corral_source_split_12186;

  corral_source_split_12186:
    assume {:verifier.code 0} true;
    $i558 := $eq.i32($i557, 3);
    goto corral_source_split_12187;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb488, $bb489;

  $bb489:
    assume !($i558 == 1);
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb488:
    assume $i558 == 1;
    goto corral_source_split_12741;

  corral_source_split_12741:
    assume {:verifier.code 0} true;
    $p559 := $M.82;
    goto corral_source_split_12742;

  corral_source_split_12742:
    assume {:verifier.code 0} true;
    $p560 := $M.81;
    goto corral_source_split_12743;

  corral_source_split_12743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2214} close($p559, $p560);
    goto corral_source_split_12744;

  corral_source_split_12744:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2215} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12745;

  corral_source_split_12745:
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb273:
    assume $i282 == 1;
    assume {:verifier.code 0} true;
    $i285 := $slt.i32($i272, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    $i286 := $slt.i32($i272, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb282:
    assume !($i286 == 1);
    goto corral_source_split_12205;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    $i552 := $M.92;
    goto corral_source_split_12206;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    $i553 := $eq.i32($i552, 5);
    goto corral_source_split_12207;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb485, $bb486;

  $bb486:
    assume !($i553 == 1);
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb485:
    assume $i553 == 1;
    goto corral_source_split_12735;

  corral_source_split_12735:
    assume {:verifier.code 0} true;
    $p554 := $M.82;
    goto corral_source_split_12736;

  corral_source_split_12736:
    assume {:verifier.code 0} true;
    $i555 := $load.i32($M.66, $p9);
    goto corral_source_split_12737;

  corral_source_split_12737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2212} vslice_dummy_var_501 := write($p554, $p30, $i555);
    goto corral_source_split_12738;

  corral_source_split_12738:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2213} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12739;

  corral_source_split_12739:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb281:
    assume $i286 == 1;
    goto corral_source_split_12201;

  corral_source_split_12201:
    assume {:verifier.code 0} true;
    $i522 := $M.92;
    goto corral_source_split_12202;

  corral_source_split_12202:
    assume {:verifier.code 0} true;
    $i523 := $eq.i32($i522, 4);
    goto corral_source_split_12203;

  corral_source_split_12203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb470, $bb471;

  $bb471:
    assume !($i523 == 1);
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb472:
    assume {:verifier.code 0} true;
    $i528 := $M.92;
    goto corral_source_split_12695;

  corral_source_split_12695:
    assume {:verifier.code 0} true;
    $i529 := $eq.i32($i528, 1);
    goto corral_source_split_12696;

  corral_source_split_12696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb473, $bb474;

  $bb474:
    assume !($i529 == 1);
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    $i534 := $M.92;
    goto corral_source_split_12705;

  corral_source_split_12705:
    assume {:verifier.code 0} true;
    $i535 := $eq.i32($i534, 3);
    goto corral_source_split_12706;

  corral_source_split_12706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb476, $bb477;

  $bb477:
    assume !($i535 == 1);
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    $i540 := $M.92;
    goto corral_source_split_12715;

  corral_source_split_12715:
    assume {:verifier.code 0} true;
    $i541 := $eq.i32($i540, 2);
    goto corral_source_split_12716;

  corral_source_split_12716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb479, $bb480;

  $bb480:
    assume !($i541 == 1);
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    $i546 := $M.92;
    goto corral_source_split_12725;

  corral_source_split_12725:
    assume {:verifier.code 0} true;
    $i547 := $eq.i32($i546, 5);
    goto corral_source_split_12726;

  corral_source_split_12726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb482, $bb483;

  $bb483:
    assume !($i547 == 1);
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb482:
    assume $i547 == 1;
    goto corral_source_split_12728;

  corral_source_split_12728:
    assume {:verifier.code 0} true;
    $p548 := $M.82;
    goto corral_source_split_12729;

  corral_source_split_12729:
    assume {:verifier.code 0} true;
    $i549 := $load.i32($M.66, $p7);
    goto corral_source_split_12730;

  corral_source_split_12730:
    assume {:verifier.code 0} true;
    $i550 := $load.i32($M.66, $p13);
    goto corral_source_split_12731;

  corral_source_split_12731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2210} vslice_dummy_var_500 := tiocmset($p548, $i549, $i550);
    goto corral_source_split_12732;

  corral_source_split_12732:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2211} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12733;

  corral_source_split_12733:
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb479:
    assume $i541 == 1;
    goto corral_source_split_12718;

  corral_source_split_12718:
    assume {:verifier.code 0} true;
    $p542 := $M.82;
    goto corral_source_split_12719;

  corral_source_split_12719:
    assume {:verifier.code 0} true;
    $i543 := $load.i32($M.66, $p7);
    goto corral_source_split_12720;

  corral_source_split_12720:
    assume {:verifier.code 0} true;
    $i544 := $load.i32($M.66, $p13);
    goto corral_source_split_12721;

  corral_source_split_12721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2208} vslice_dummy_var_499 := tiocmset($p542, $i543, $i544);
    goto corral_source_split_12722;

  corral_source_split_12722:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2209} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12723;

  corral_source_split_12723:
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb476:
    assume $i535 == 1;
    goto corral_source_split_12708;

  corral_source_split_12708:
    assume {:verifier.code 0} true;
    $p536 := $M.82;
    goto corral_source_split_12709;

  corral_source_split_12709:
    assume {:verifier.code 0} true;
    $i537 := $load.i32($M.66, $p7);
    goto corral_source_split_12710;

  corral_source_split_12710:
    assume {:verifier.code 0} true;
    $i538 := $load.i32($M.66, $p13);
    goto corral_source_split_12711;

  corral_source_split_12711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2206} vslice_dummy_var_498 := tiocmset($p536, $i537, $i538);
    goto corral_source_split_12712;

  corral_source_split_12712:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2207} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12713;

  corral_source_split_12713:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb473:
    assume $i529 == 1;
    goto corral_source_split_12698;

  corral_source_split_12698:
    assume {:verifier.code 0} true;
    $p530 := $M.82;
    goto corral_source_split_12699;

  corral_source_split_12699:
    assume {:verifier.code 0} true;
    $i531 := $load.i32($M.66, $p7);
    goto corral_source_split_12700;

  corral_source_split_12700:
    assume {:verifier.code 0} true;
    $i532 := $load.i32($M.66, $p13);
    goto corral_source_split_12701;

  corral_source_split_12701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2204} vslice_dummy_var_497 := tiocmset($p530, $i531, $i532);
    goto corral_source_split_12702;

  corral_source_split_12702:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2205} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12703;

  corral_source_split_12703:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb470:
    assume $i523 == 1;
    goto corral_source_split_12688;

  corral_source_split_12688:
    assume {:verifier.code 0} true;
    $p524 := $M.82;
    goto corral_source_split_12689;

  corral_source_split_12689:
    assume {:verifier.code 0} true;
    $i525 := $load.i32($M.66, $p7);
    goto corral_source_split_12690;

  corral_source_split_12690:
    assume {:verifier.code 0} true;
    $i526 := $load.i32($M.66, $p13);
    goto corral_source_split_12691;

  corral_source_split_12691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2202} vslice_dummy_var_496 := tiocmset($p524, $i525, $i526);
    goto corral_source_split_12692;

  corral_source_split_12692:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2203} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12693;

  corral_source_split_12693:
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb279:
    assume $i285 == 1;
    goto corral_source_split_12197;

  corral_source_split_12197:
    assume {:verifier.code 0} true;
    $i519 := $M.92;
    goto corral_source_split_12198;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    $i520 := $eq.i32($i519, 5);
    goto corral_source_split_12199;

  corral_source_split_12199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb467, $bb468;

  $bb468:
    assume !($i520 == 1);
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb467:
    assume $i520 == 1;
    goto corral_source_split_12683;

  corral_source_split_12683:
    assume {:verifier.code 0} true;
    $p521 := $M.82;
    goto corral_source_split_12684;

  corral_source_split_12684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2200} tx_hold($p521);
    goto corral_source_split_12685;

  corral_source_split_12685:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2201} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12686;

  corral_source_split_12686:
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb254:
    assume $i273 == 1;
    assume {:verifier.code 0} true;
    $i287 := $slt.i32($i272, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    $i288 := $slt.i32($i272, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    $i289 := $slt.i32($i272, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    $i290 := $slt.i32($i272, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i290 == 1);
    goto corral_source_split_12217;

  corral_source_split_12217:
    assume {:verifier.code 0} true;
    $i499 := $M.92;
    goto corral_source_split_12218;

  corral_source_split_12218:
    assume {:verifier.code 0} true;
    $i500 := $eq.i32($i499, 4);
    goto corral_source_split_12219;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb452, $bb453;

  $bb453:
    assume !($i500 == 1);
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    $i503 := $M.92;
    goto corral_source_split_12651;

  corral_source_split_12651:
    assume {:verifier.code 0} true;
    $i504 := $eq.i32($i503, 1);
    goto corral_source_split_12652;

  corral_source_split_12652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb455, $bb456;

  $bb456:
    assume !($i504 == 1);
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    $i507 := $M.92;
    goto corral_source_split_12659;

  corral_source_split_12659:
    assume {:verifier.code 0} true;
    $i508 := $eq.i32($i507, 3);
    goto corral_source_split_12660;

  corral_source_split_12660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb458, $bb459;

  $bb459:
    assume !($i508 == 1);
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    $i511 := $M.92;
    goto corral_source_split_12667;

  corral_source_split_12667:
    assume {:verifier.code 0} true;
    $i512 := $eq.i32($i511, 2);
    goto corral_source_split_12668;

  corral_source_split_12668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb461, $bb462;

  $bb462:
    assume !($i512 == 1);
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    $i515 := $M.92;
    goto corral_source_split_12675;

  corral_source_split_12675:
    assume {:verifier.code 0} true;
    $i516 := $eq.i32($i515, 5);
    goto corral_source_split_12676;

  corral_source_split_12676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb464, $bb465;

  $bb465:
    assume !($i516 == 1);
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb464:
    assume $i516 == 1;
    goto corral_source_split_12678;

  corral_source_split_12678:
    assume {:verifier.code 0} true;
    $p517 := $M.82;
    goto corral_source_split_12679;

  corral_source_split_12679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2198} vslice_dummy_var_495 := install($p34, $p517);
    goto corral_source_split_12680;

  corral_source_split_12680:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2199} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12681;

  corral_source_split_12681:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb461:
    assume $i512 == 1;
    goto corral_source_split_12670;

  corral_source_split_12670:
    assume {:verifier.code 0} true;
    $p513 := $M.82;
    goto corral_source_split_12671;

  corral_source_split_12671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2196} vslice_dummy_var_494 := install($p34, $p513);
    goto corral_source_split_12672;

  corral_source_split_12672:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2197} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12673;

  corral_source_split_12673:
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb458:
    assume $i508 == 1;
    goto corral_source_split_12662;

  corral_source_split_12662:
    assume {:verifier.code 0} true;
    $p509 := $M.82;
    goto corral_source_split_12663;

  corral_source_split_12663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2194} vslice_dummy_var_493 := install($p34, $p509);
    goto corral_source_split_12664;

  corral_source_split_12664:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2195} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12665;

  corral_source_split_12665:
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb455:
    assume $i504 == 1;
    goto corral_source_split_12654;

  corral_source_split_12654:
    assume {:verifier.code 0} true;
    $p505 := $M.82;
    goto corral_source_split_12655;

  corral_source_split_12655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2192} vslice_dummy_var_492 := install($p34, $p505);
    goto corral_source_split_12656;

  corral_source_split_12656:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2193} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12657;

  corral_source_split_12657:
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb452:
    assume $i500 == 1;
    goto corral_source_split_12646;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    $p501 := $M.82;
    goto corral_source_split_12647;

  corral_source_split_12647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2190} vslice_dummy_var_491 := install($p34, $p501);
    goto corral_source_split_12648;

  corral_source_split_12648:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2191} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12649;

  corral_source_split_12649:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb289:
    assume $i290 == 1;
    goto corral_source_split_12213;

  corral_source_split_12213:
    assume {:verifier.code 0} true;
    $i469 := $M.92;
    goto corral_source_split_12214;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    $i470 := $eq.i32($i469, 4);
    goto corral_source_split_12215;

  corral_source_split_12215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb437, $bb438;

  $bb438:
    assume !($i470 == 1);
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    $i475 := $M.92;
    goto corral_source_split_12606;

  corral_source_split_12606:
    assume {:verifier.code 0} true;
    $i476 := $eq.i32($i475, 1);
    goto corral_source_split_12607;

  corral_source_split_12607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb440, $bb441;

  $bb441:
    assume !($i476 == 1);
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    $i481 := $M.92;
    goto corral_source_split_12616;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    $i482 := $eq.i32($i481, 3);
    goto corral_source_split_12617;

  corral_source_split_12617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb443, $bb444;

  $bb444:
    assume !($i482 == 1);
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb445:
    assume {:verifier.code 0} true;
    $i487 := $M.92;
    goto corral_source_split_12626;

  corral_source_split_12626:
    assume {:verifier.code 0} true;
    $i488 := $eq.i32($i487, 2);
    goto corral_source_split_12627;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb446, $bb447;

  $bb447:
    assume !($i488 == 1);
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    $i493 := $M.92;
    goto corral_source_split_12636;

  corral_source_split_12636:
    assume {:verifier.code 0} true;
    $i494 := $eq.i32($i493, 5);
    goto corral_source_split_12637;

  corral_source_split_12637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb449, $bb450;

  $bb450:
    assume !($i494 == 1);
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb449:
    assume $i494 == 1;
    goto corral_source_split_12639;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    $p495 := $M.82;
    goto corral_source_split_12640;

  corral_source_split_12640:
    assume {:verifier.code 0} true;
    $i496 := $load.i32($M.66, $p10);
    goto corral_source_split_12641;

  corral_source_split_12641:
    assume {:verifier.code 0} true;
    $i497 := $load.i64($M.66, $p8);
    goto corral_source_split_12642;

  corral_source_split_12642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2188} vslice_dummy_var_490 := ioctl($p495, $i496, $i497);
    goto corral_source_split_12643;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2189} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12644;

  corral_source_split_12644:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb446:
    assume $i488 == 1;
    goto corral_source_split_12629;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    $p489 := $M.82;
    goto corral_source_split_12630;

  corral_source_split_12630:
    assume {:verifier.code 0} true;
    $i490 := $load.i32($M.66, $p10);
    goto corral_source_split_12631;

  corral_source_split_12631:
    assume {:verifier.code 0} true;
    $i491 := $load.i64($M.66, $p8);
    goto corral_source_split_12632;

  corral_source_split_12632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2186} vslice_dummy_var_489 := ioctl($p489, $i490, $i491);
    goto corral_source_split_12633;

  corral_source_split_12633:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2187} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12634;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb443:
    assume $i482 == 1;
    goto corral_source_split_12619;

  corral_source_split_12619:
    assume {:verifier.code 0} true;
    $p483 := $M.82;
    goto corral_source_split_12620;

  corral_source_split_12620:
    assume {:verifier.code 0} true;
    $i484 := $load.i32($M.66, $p10);
    goto corral_source_split_12621;

  corral_source_split_12621:
    assume {:verifier.code 0} true;
    $i485 := $load.i64($M.66, $p8);
    goto corral_source_split_12622;

  corral_source_split_12622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} vslice_dummy_var_488 := ioctl($p483, $i484, $i485);
    goto corral_source_split_12623;

  corral_source_split_12623:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2185} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12624;

  corral_source_split_12624:
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb440:
    assume $i476 == 1;
    goto corral_source_split_12609;

  corral_source_split_12609:
    assume {:verifier.code 0} true;
    $p477 := $M.82;
    goto corral_source_split_12610;

  corral_source_split_12610:
    assume {:verifier.code 0} true;
    $i478 := $load.i32($M.66, $p10);
    goto corral_source_split_12611;

  corral_source_split_12611:
    assume {:verifier.code 0} true;
    $i479 := $load.i64($M.66, $p8);
    goto corral_source_split_12612;

  corral_source_split_12612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2182} vslice_dummy_var_487 := ioctl($p477, $i478, $i479);
    goto corral_source_split_12613;

  corral_source_split_12613:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2183} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12614;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb437:
    assume $i470 == 1;
    goto corral_source_split_12599;

  corral_source_split_12599:
    assume {:verifier.code 0} true;
    $p471 := $M.82;
    goto corral_source_split_12600;

  corral_source_split_12600:
    assume {:verifier.code 0} true;
    $i472 := $load.i32($M.66, $p10);
    goto corral_source_split_12601;

  corral_source_split_12601:
    assume {:verifier.code 0} true;
    $i473 := $load.i64($M.66, $p8);
    goto corral_source_split_12602;

  corral_source_split_12602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2180} vslice_dummy_var_486 := ioctl($p471, $i472, $i473);
    goto corral_source_split_12603;

  corral_source_split_12603:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2181} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12604;

  corral_source_split_12604:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb287:
    assume $i289 == 1;
    goto corral_source_split_12209;

  corral_source_split_12209:
    assume {:verifier.code 0} true;
    $i454 := $M.92;
    goto corral_source_split_12210;

  corral_source_split_12210:
    assume {:verifier.code 0} true;
    $i455 := $eq.i32($i454, 4);
    goto corral_source_split_12211;

  corral_source_split_12211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb422, $bb423;

  $bb423:
    assume !($i455 == 1);
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    $i457 := $M.92;
    goto corral_source_split_12567;

  corral_source_split_12567:
    assume {:verifier.code 0} true;
    $i458 := $eq.i32($i457, 1);
    goto corral_source_split_12568;

  corral_source_split_12568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb425, $bb426;

  $bb426:
    assume !($i458 == 1);
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    $i460 := $M.92;
    goto corral_source_split_12575;

  corral_source_split_12575:
    assume {:verifier.code 0} true;
    $i461 := $eq.i32($i460, 3);
    goto corral_source_split_12576;

  corral_source_split_12576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb428, $bb429;

  $bb429:
    assume !($i461 == 1);
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    $i463 := $M.92;
    goto corral_source_split_12583;

  corral_source_split_12583:
    assume {:verifier.code 0} true;
    $i464 := $eq.i32($i463, 2);
    goto corral_source_split_12584;

  corral_source_split_12584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb431, $bb432;

  $bb432:
    assume !($i464 == 1);
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    $i466 := $M.92;
    goto corral_source_split_12591;

  corral_source_split_12591:
    assume {:verifier.code 0} true;
    $i467 := $eq.i32($i466, 5);
    goto corral_source_split_12592;

  corral_source_split_12592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb434, $bb435;

  $bb435:
    assume !($i467 == 1);
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb434:
    assume $i467 == 1;
    goto corral_source_split_12594;

  corral_source_split_12594:
    assume {:verifier.code 0} true;
    $p468 := $M.82;
    goto corral_source_split_12595;

  corral_source_split_12595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2178} flush_buffer($p468);
    goto corral_source_split_12596;

  corral_source_split_12596:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2179} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12597;

  corral_source_split_12597:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb431:
    assume $i464 == 1;
    goto corral_source_split_12586;

  corral_source_split_12586:
    assume {:verifier.code 0} true;
    $p465 := $M.82;
    goto corral_source_split_12587;

  corral_source_split_12587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} flush_buffer($p465);
    goto corral_source_split_12588;

  corral_source_split_12588:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2177} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12589;

  corral_source_split_12589:
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb428:
    assume $i461 == 1;
    goto corral_source_split_12578;

  corral_source_split_12578:
    assume {:verifier.code 0} true;
    $p462 := $M.82;
    goto corral_source_split_12579;

  corral_source_split_12579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2174} flush_buffer($p462);
    goto corral_source_split_12580;

  corral_source_split_12580:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2175} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12581;

  corral_source_split_12581:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb425:
    assume $i458 == 1;
    goto corral_source_split_12570;

  corral_source_split_12570:
    assume {:verifier.code 0} true;
    $p459 := $M.82;
    goto corral_source_split_12571;

  corral_source_split_12571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2172} flush_buffer($p459);
    goto corral_source_split_12572;

  corral_source_split_12572:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2173} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12573;

  corral_source_split_12573:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb422:
    assume $i455 == 1;
    goto corral_source_split_12562;

  corral_source_split_12562:
    assume {:verifier.code 0} true;
    $p456 := $M.82;
    goto corral_source_split_12563;

  corral_source_split_12563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} flush_buffer($p456);
    goto corral_source_split_12564;

  corral_source_split_12564:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2171} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12565;

  corral_source_split_12565:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb285:
    assume $i288 == 1;
    assume {:verifier.code 0} true;
    $i291 := $slt.i32($i272, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  $bb292:
    assume !($i291 == 1);
    assume {:verifier.code 0} true;
    $i292 := $slt.i32($i272, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i292 == 1);
    goto corral_source_split_12229;

  corral_source_split_12229:
    assume {:verifier.code 0} true;
    $i439 := $M.92;
    goto corral_source_split_12230;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    $i440 := $eq.i32($i439, 4);
    goto corral_source_split_12231;

  corral_source_split_12231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb407, $bb408;

  $bb408:
    assume !($i440 == 1);
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    $i442 := $M.92;
    goto corral_source_split_12530;

  corral_source_split_12530:
    assume {:verifier.code 0} true;
    $i443 := $eq.i32($i442, 1);
    goto corral_source_split_12531;

  corral_source_split_12531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb410, $bb411;

  $bb411:
    assume !($i443 == 1);
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    $i445 := $M.92;
    goto corral_source_split_12538;

  corral_source_split_12538:
    assume {:verifier.code 0} true;
    $i446 := $eq.i32($i445, 3);
    goto corral_source_split_12539;

  corral_source_split_12539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb413, $bb414;

  $bb414:
    assume !($i446 == 1);
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    $i448 := $M.92;
    goto corral_source_split_12546;

  corral_source_split_12546:
    assume {:verifier.code 0} true;
    $i449 := $eq.i32($i448, 2);
    goto corral_source_split_12547;

  corral_source_split_12547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb416, $bb417;

  $bb417:
    assume !($i449 == 1);
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    $i451 := $M.92;
    goto corral_source_split_12554;

  corral_source_split_12554:
    assume {:verifier.code 0} true;
    $i452 := $eq.i32($i451, 5);
    goto corral_source_split_12555;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb419, $bb420;

  $bb420:
    assume !($i452 == 1);
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb419:
    assume $i452 == 1;
    goto corral_source_split_12557;

  corral_source_split_12557:
    assume {:verifier.code 0} true;
    $p453 := $M.82;
    goto corral_source_split_12558;

  corral_source_split_12558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2168} set_termios($p453, $p32);
    goto corral_source_split_12559;

  corral_source_split_12559:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2169} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12560;

  corral_source_split_12560:
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb416:
    assume $i449 == 1;
    goto corral_source_split_12549;

  corral_source_split_12549:
    assume {:verifier.code 0} true;
    $p450 := $M.82;
    goto corral_source_split_12550;

  corral_source_split_12550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2166} set_termios($p450, $p32);
    goto corral_source_split_12551;

  corral_source_split_12551:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2167} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12552;

  corral_source_split_12552:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb413:
    assume $i446 == 1;
    goto corral_source_split_12541;

  corral_source_split_12541:
    assume {:verifier.code 0} true;
    $p447 := $M.82;
    goto corral_source_split_12542;

  corral_source_split_12542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2164} set_termios($p447, $p32);
    goto corral_source_split_12543;

  corral_source_split_12543:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2165} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12544;

  corral_source_split_12544:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb410:
    assume $i443 == 1;
    goto corral_source_split_12533;

  corral_source_split_12533:
    assume {:verifier.code 0} true;
    $p444 := $M.82;
    goto corral_source_split_12534;

  corral_source_split_12534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2162} set_termios($p444, $p32);
    goto corral_source_split_12535;

  corral_source_split_12535:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2163} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12536;

  corral_source_split_12536:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb407:
    assume $i440 == 1;
    goto corral_source_split_12525;

  corral_source_split_12525:
    assume {:verifier.code 0} true;
    $p441 := $M.82;
    goto corral_source_split_12526;

  corral_source_split_12526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} set_termios($p441, $p32);
    goto corral_source_split_12527;

  corral_source_split_12527:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2161} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12528;

  corral_source_split_12528:
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb293:
    assume $i292 == 1;
    goto corral_source_split_12225;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    $i432 := $M.92;
    goto corral_source_split_12226;

  corral_source_split_12226:
    assume {:verifier.code 0} true;
    $i433 := $eq.i32($i432, 2);
    goto corral_source_split_12227;

  corral_source_split_12227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb401, $bb402;

  $bb402:
    assume !($i433 == 1);
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb401:
    assume $i433 == 1;
    goto corral_source_split_12514;

  corral_source_split_12514:
    assume {:verifier.code 0} true;
    $p434 := $M.82;
    goto corral_source_split_12515;

  corral_source_split_12515:
    assume {:verifier.code 0} true;
    $p435 := $M.81;
    goto corral_source_split_12516;

  corral_source_split_12516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2157} $i436 := open($p434, $p435);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_12517;

  corral_source_split_12517:
    assume {:verifier.code 0} true;
    $M.99 := $i436;
    call {:si_unique_call 2158} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i436);
    goto corral_source_split_12518;

  corral_source_split_12518:
    assume {:verifier.code 0} true;
    $i437 := $M.99;
    goto corral_source_split_12519;

  corral_source_split_12519:
    assume {:verifier.code 0} true;
    $i438 := $eq.i32($i437, 0);
    goto corral_source_split_12520;

  corral_source_split_12520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb403, $bb404;

  $bb404:
    assume !($i438 == 1);
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb403:
    assume $i438 == 1;
    goto corral_source_split_12522;

  corral_source_split_12522:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2159} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12523;

  corral_source_split_12523:
    assume {:verifier.code 0} true;
    goto $bb405;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb291:
    assume $i291 == 1;
    goto corral_source_split_12221;

  corral_source_split_12221:
    assume {:verifier.code 0} true;
    $i417 := $M.92;
    goto corral_source_split_12222;

  corral_source_split_12222:
    assume {:verifier.code 0} true;
    $i418 := $eq.i32($i417, 4);
    goto corral_source_split_12223;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  $bb387:
    assume !($i418 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    $i420 := $M.92;
    goto corral_source_split_12482;

  corral_source_split_12482:
    assume {:verifier.code 0} true;
    $i421 := $eq.i32($i420, 1);
    goto corral_source_split_12483;

  corral_source_split_12483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  $bb390:
    assume !($i421 == 1);
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    $i423 := $M.92;
    goto corral_source_split_12490;

  corral_source_split_12490:
    assume {:verifier.code 0} true;
    $i424 := $eq.i32($i423, 3);
    goto corral_source_split_12491;

  corral_source_split_12491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb392, $bb393;

  $bb393:
    assume !($i424 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    $i426 := $M.92;
    goto corral_source_split_12498;

  corral_source_split_12498:
    assume {:verifier.code 0} true;
    $i427 := $eq.i32($i426, 2);
    goto corral_source_split_12499;

  corral_source_split_12499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb395, $bb396;

  $bb396:
    assume !($i427 == 1);
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    $i429 := $M.92;
    goto corral_source_split_12506;

  corral_source_split_12506:
    assume {:verifier.code 0} true;
    $i430 := $eq.i32($i429, 5);
    goto corral_source_split_12507;

  corral_source_split_12507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb398, $bb399;

  $bb399:
    assume !($i430 == 1);
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb398:
    assume $i430 == 1;
    goto corral_source_split_12509;

  corral_source_split_12509:
    assume {:verifier.code 0} true;
    $p431 := $M.82;
    goto corral_source_split_12510;

  corral_source_split_12510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2155} unthrottle($p431);
    goto corral_source_split_12511;

  corral_source_split_12511:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2156} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12512;

  corral_source_split_12512:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb395:
    assume $i427 == 1;
    goto corral_source_split_12501;

  corral_source_split_12501:
    assume {:verifier.code 0} true;
    $p428 := $M.82;
    goto corral_source_split_12502;

  corral_source_split_12502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} unthrottle($p428);
    goto corral_source_split_12503;

  corral_source_split_12503:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2154} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12504;

  corral_source_split_12504:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb392:
    assume $i424 == 1;
    goto corral_source_split_12493;

  corral_source_split_12493:
    assume {:verifier.code 0} true;
    $p425 := $M.82;
    goto corral_source_split_12494;

  corral_source_split_12494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2151} unthrottle($p425);
    goto corral_source_split_12495;

  corral_source_split_12495:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2152} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12496;

  corral_source_split_12496:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb389:
    assume $i421 == 1;
    goto corral_source_split_12485;

  corral_source_split_12485:
    assume {:verifier.code 0} true;
    $p422 := $M.82;
    goto corral_source_split_12486;

  corral_source_split_12486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} unthrottle($p422);
    goto corral_source_split_12487;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2150} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12488;

  corral_source_split_12488:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb386:
    assume $i418 == 1;
    goto corral_source_split_12477;

  corral_source_split_12477:
    assume {:verifier.code 0} true;
    $p419 := $M.82;
    goto corral_source_split_12478;

  corral_source_split_12478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} unthrottle($p419);
    goto corral_source_split_12479;

  corral_source_split_12479:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2148} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12480;

  corral_source_split_12480:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb283:
    assume $i287 == 1;
    assume {:verifier.code 0} true;
    $i293 := $slt.i32($i272, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i293 == 1);
    assume {:verifier.code 0} true;
    $i294 := $slt.i32($i272, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  $bb298:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    $i295 := $slt.i32($i272, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i295 == 1);
    goto corral_source_split_12241;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    $i402 := $M.92;
    goto corral_source_split_12242;

  corral_source_split_12242:
    assume {:verifier.code 0} true;
    $i403 := $eq.i32($i402, 4);
    goto corral_source_split_12243;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb371, $bb372;

  $bb372:
    assume !($i403 == 1);
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    $i405 := $M.92;
    goto corral_source_split_12445;

  corral_source_split_12445:
    assume {:verifier.code 0} true;
    $i406 := $eq.i32($i405, 1);
    goto corral_source_split_12446;

  corral_source_split_12446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb374, $bb375;

  $bb375:
    assume !($i406 == 1);
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    $i408 := $M.92;
    goto corral_source_split_12453;

  corral_source_split_12453:
    assume {:verifier.code 0} true;
    $i409 := $eq.i32($i408, 3);
    goto corral_source_split_12454;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  $bb378:
    assume !($i409 == 1);
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    $i411 := $M.92;
    goto corral_source_split_12461;

  corral_source_split_12461:
    assume {:verifier.code 0} true;
    $i412 := $eq.i32($i411, 2);
    goto corral_source_split_12462;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb380, $bb381;

  $bb381:
    assume !($i412 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    $i414 := $M.92;
    goto corral_source_split_12469;

  corral_source_split_12469:
    assume {:verifier.code 0} true;
    $i415 := $eq.i32($i414, 5);
    goto corral_source_split_12470;

  corral_source_split_12470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb383, $bb384;

  $bb384:
    assume !($i415 == 1);
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb383:
    assume $i415 == 1;
    goto corral_source_split_12472;

  corral_source_split_12472:
    assume {:verifier.code 0} true;
    $p416 := $M.82;
    goto corral_source_split_12473;

  corral_source_split_12473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} hangup($p416);
    goto corral_source_split_12474;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2146} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12475;

  corral_source_split_12475:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb380:
    assume $i412 == 1;
    goto corral_source_split_12464;

  corral_source_split_12464:
    assume {:verifier.code 0} true;
    $p413 := $M.82;
    goto corral_source_split_12465;

  corral_source_split_12465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} hangup($p413);
    goto corral_source_split_12466;

  corral_source_split_12466:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2144} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12467;

  corral_source_split_12467:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb377:
    assume $i409 == 1;
    goto corral_source_split_12456;

  corral_source_split_12456:
    assume {:verifier.code 0} true;
    $p410 := $M.82;
    goto corral_source_split_12457;

  corral_source_split_12457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} hangup($p410);
    goto corral_source_split_12458;

  corral_source_split_12458:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2142} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12459;

  corral_source_split_12459:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb374:
    assume $i406 == 1;
    goto corral_source_split_12448;

  corral_source_split_12448:
    assume {:verifier.code 0} true;
    $p407 := $M.82;
    goto corral_source_split_12449;

  corral_source_split_12449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} hangup($p407);
    goto corral_source_split_12450;

  corral_source_split_12450:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2140} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12451;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb371:
    assume $i403 == 1;
    goto corral_source_split_12440;

  corral_source_split_12440:
    assume {:verifier.code 0} true;
    $p404 := $M.82;
    goto corral_source_split_12441;

  corral_source_split_12441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} hangup($p404);
    goto corral_source_split_12442;

  corral_source_split_12442:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2138} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12443;

  corral_source_split_12443:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb299:
    assume $i295 == 1;
    goto corral_source_split_12237;

  corral_source_split_12237:
    assume {:verifier.code 0} true;
    $i382 := $M.92;
    goto corral_source_split_12238;

  corral_source_split_12238:
    assume {:verifier.code 0} true;
    $i383 := $eq.i32($i382, 4);
    goto corral_source_split_12239;

  corral_source_split_12239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  $bb357:
    assume !($i383 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    $i386 := $M.92;
    goto corral_source_split_12408;

  corral_source_split_12408:
    assume {:verifier.code 0} true;
    $i387 := $eq.i32($i386, 1);
    goto corral_source_split_12409;

  corral_source_split_12409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  $bb360:
    assume !($i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    $i390 := $M.92;
    goto corral_source_split_12416;

  corral_source_split_12416:
    assume {:verifier.code 0} true;
    $i391 := $eq.i32($i390, 3);
    goto corral_source_split_12417;

  corral_source_split_12417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  $bb363:
    assume !($i391 == 1);
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    $i394 := $M.92;
    goto corral_source_split_12424;

  corral_source_split_12424:
    assume {:verifier.code 0} true;
    $i395 := $eq.i32($i394, 2);
    goto corral_source_split_12425;

  corral_source_split_12425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  $bb366:
    assume !($i395 == 1);
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    $i398 := $M.92;
    goto corral_source_split_12432;

  corral_source_split_12432:
    assume {:verifier.code 0} true;
    $i399 := $eq.i32($i398, 5);
    goto corral_source_split_12433;

  corral_source_split_12433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb368, $bb369;

  $bb369:
    assume !($i399 == 1);
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb368:
    assume $i399 == 1;
    goto corral_source_split_12435;

  corral_source_split_12435:
    assume {:verifier.code 0} true;
    $p400 := $M.82;
    goto corral_source_split_12436;

  corral_source_split_12436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} vslice_dummy_var_485 := get_icount($p400, $p29);
    goto corral_source_split_12437;

  corral_source_split_12437:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2136} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12438;

  corral_source_split_12438:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb365:
    assume $i395 == 1;
    goto corral_source_split_12427;

  corral_source_split_12427:
    assume {:verifier.code 0} true;
    $p396 := $M.82;
    goto corral_source_split_12428;

  corral_source_split_12428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2133} vslice_dummy_var_484 := get_icount($p396, $p29);
    goto corral_source_split_12429;

  corral_source_split_12429:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2134} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12430;

  corral_source_split_12430:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb362:
    assume $i391 == 1;
    goto corral_source_split_12419;

  corral_source_split_12419:
    assume {:verifier.code 0} true;
    $p392 := $M.82;
    goto corral_source_split_12420;

  corral_source_split_12420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} vslice_dummy_var_483 := get_icount($p392, $p29);
    goto corral_source_split_12421;

  corral_source_split_12421:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2132} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12422;

  corral_source_split_12422:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb359:
    assume $i387 == 1;
    goto corral_source_split_12411;

  corral_source_split_12411:
    assume {:verifier.code 0} true;
    $p388 := $M.82;
    goto corral_source_split_12412;

  corral_source_split_12412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} vslice_dummy_var_482 := get_icount($p388, $p29);
    goto corral_source_split_12413;

  corral_source_split_12413:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2130} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12414;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb356:
    assume $i383 == 1;
    goto corral_source_split_12403;

  corral_source_split_12403:
    assume {:verifier.code 0} true;
    $p384 := $M.82;
    goto corral_source_split_12404;

  corral_source_split_12404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} vslice_dummy_var_481 := get_icount($p384, $p29);
    goto corral_source_split_12405;

  corral_source_split_12405:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2128} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12406;

  corral_source_split_12406:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb297:
    assume $i294 == 1;
    goto corral_source_split_12233;

  corral_source_split_12233:
    assume {:verifier.code 0} true;
    $i367 := $M.92;
    goto corral_source_split_12234;

  corral_source_split_12234:
    assume {:verifier.code 0} true;
    $i368 := $eq.i32($i367, 4);
    goto corral_source_split_12235;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  $bb342:
    assume !($i368 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    $i370 := $M.92;
    goto corral_source_split_12371;

  corral_source_split_12371:
    assume {:verifier.code 0} true;
    $i371 := $eq.i32($i370, 1);
    goto corral_source_split_12372;

  corral_source_split_12372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  $bb345:
    assume !($i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    $i373 := $M.92;
    goto corral_source_split_12379;

  corral_source_split_12379:
    assume {:verifier.code 0} true;
    $i374 := $eq.i32($i373, 3);
    goto corral_source_split_12380;

  corral_source_split_12380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  $bb348:
    assume !($i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    $i376 := $M.92;
    goto corral_source_split_12387;

  corral_source_split_12387:
    assume {:verifier.code 0} true;
    $i377 := $eq.i32($i376, 2);
    goto corral_source_split_12388;

  corral_source_split_12388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  $bb351:
    assume !($i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    $i379 := $M.92;
    goto corral_source_split_12395;

  corral_source_split_12395:
    assume {:verifier.code 0} true;
    $i380 := $eq.i32($i379, 5);
    goto corral_source_split_12396;

  corral_source_split_12396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb353, $bb354;

  $bb354:
    assume !($i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb353:
    assume $i380 == 1;
    goto corral_source_split_12398;

  corral_source_split_12398:
    assume {:verifier.code 0} true;
    $p381 := $M.82;
    goto corral_source_split_12399;

  corral_source_split_12399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} throttle($p381);
    goto corral_source_split_12400;

  corral_source_split_12400:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2126} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12401;

  corral_source_split_12401:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb350:
    assume $i377 == 1;
    goto corral_source_split_12390;

  corral_source_split_12390:
    assume {:verifier.code 0} true;
    $p378 := $M.82;
    goto corral_source_split_12391;

  corral_source_split_12391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} throttle($p378);
    goto corral_source_split_12392;

  corral_source_split_12392:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2124} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12393;

  corral_source_split_12393:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb347:
    assume $i374 == 1;
    goto corral_source_split_12382;

  corral_source_split_12382:
    assume {:verifier.code 0} true;
    $p375 := $M.82;
    goto corral_source_split_12383;

  corral_source_split_12383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} throttle($p375);
    goto corral_source_split_12384;

  corral_source_split_12384:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2122} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12385;

  corral_source_split_12385:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb344:
    assume $i371 == 1;
    goto corral_source_split_12374;

  corral_source_split_12374:
    assume {:verifier.code 0} true;
    $p372 := $M.82;
    goto corral_source_split_12375;

  corral_source_split_12375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} throttle($p372);
    goto corral_source_split_12376;

  corral_source_split_12376:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2120} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12377;

  corral_source_split_12377:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb341:
    assume $i368 == 1;
    goto corral_source_split_12366;

  corral_source_split_12366:
    assume {:verifier.code 0} true;
    $p369 := $M.82;
    goto corral_source_split_12367;

  corral_source_split_12367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} throttle($p369);
    goto corral_source_split_12368;

  corral_source_split_12368:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2118} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12369;

  corral_source_split_12369:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb295:
    assume $i293 == 1;
    assume {:verifier.code 0} true;
    $i296 := $slt.i32($i272, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    $i297 := $slt.i32($i272, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb303, $bb304;

  $bb304:
    assume !($i297 == 1);
    goto corral_source_split_12249;

  corral_source_split_12249:
    assume {:verifier.code 0} true;
    $i332 := $M.92;
    goto corral_source_split_12250;

  corral_source_split_12250:
    assume {:verifier.code 0} true;
    $i333 := $eq.i32($i332, 4);
    goto corral_source_split_12251;

  corral_source_split_12251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb327:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    $i339 := $M.92;
    goto corral_source_split_12322;

  corral_source_split_12322:
    assume {:verifier.code 0} true;
    $i340 := $eq.i32($i339, 1);
    goto corral_source_split_12323;

  corral_source_split_12323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  $bb330:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    $i346 := $M.92;
    goto corral_source_split_12333;

  corral_source_split_12333:
    assume {:verifier.code 0} true;
    $i347 := $eq.i32($i346, 3);
    goto corral_source_split_12334;

  corral_source_split_12334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    $i353 := $M.92;
    goto corral_source_split_12344;

  corral_source_split_12344:
    assume {:verifier.code 0} true;
    $i354 := $eq.i32($i353, 2);
    goto corral_source_split_12345;

  corral_source_split_12345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  $bb336:
    assume !($i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    $i360 := $M.92;
    goto corral_source_split_12355;

  corral_source_split_12355:
    assume {:verifier.code 0} true;
    $i361 := $eq.i32($i360, 5);
    goto corral_source_split_12356;

  corral_source_split_12356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  $bb339:
    assume !($i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb338:
    assume $i361 == 1;
    goto corral_source_split_12358;

  corral_source_split_12358:
    assume {:verifier.code 0} true;
    $p362 := $M.82;
    goto corral_source_split_12359;

  corral_source_split_12359:
    assume {:verifier.code 0} true;
    $i363 := $load.i8($M.66, $p6);
    goto corral_source_split_12360;

  corral_source_split_12360:
    assume {:verifier.code 0} true;
    $i364 := $zext.i8.i32($i363);
    goto corral_source_split_12361;

  corral_source_split_12361:
    assume {:verifier.code 0} true;
    $i365 := $trunc.i32.i8($i364);
    goto corral_source_split_12362;

  corral_source_split_12362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} vslice_dummy_var_480 := put_char($p362, $i365);
    goto corral_source_split_12363;

  corral_source_split_12363:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2116} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12364;

  corral_source_split_12364:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb335:
    assume $i354 == 1;
    goto corral_source_split_12347;

  corral_source_split_12347:
    assume {:verifier.code 0} true;
    $p355 := $M.82;
    goto corral_source_split_12348;

  corral_source_split_12348:
    assume {:verifier.code 0} true;
    $i356 := $load.i8($M.66, $p6);
    goto corral_source_split_12349;

  corral_source_split_12349:
    assume {:verifier.code 0} true;
    $i357 := $zext.i8.i32($i356);
    goto corral_source_split_12350;

  corral_source_split_12350:
    assume {:verifier.code 0} true;
    $i358 := $trunc.i32.i8($i357);
    goto corral_source_split_12351;

  corral_source_split_12351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} vslice_dummy_var_479 := put_char($p355, $i358);
    goto corral_source_split_12352;

  corral_source_split_12352:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2114} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12353;

  corral_source_split_12353:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb332:
    assume $i347 == 1;
    goto corral_source_split_12336;

  corral_source_split_12336:
    assume {:verifier.code 0} true;
    $p348 := $M.82;
    goto corral_source_split_12337;

  corral_source_split_12337:
    assume {:verifier.code 0} true;
    $i349 := $load.i8($M.66, $p6);
    goto corral_source_split_12338;

  corral_source_split_12338:
    assume {:verifier.code 0} true;
    $i350 := $zext.i8.i32($i349);
    goto corral_source_split_12339;

  corral_source_split_12339:
    assume {:verifier.code 0} true;
    $i351 := $trunc.i32.i8($i350);
    goto corral_source_split_12340;

  corral_source_split_12340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} vslice_dummy_var_478 := put_char($p348, $i351);
    goto corral_source_split_12341;

  corral_source_split_12341:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2112} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12342;

  corral_source_split_12342:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb329:
    assume $i340 == 1;
    goto corral_source_split_12325;

  corral_source_split_12325:
    assume {:verifier.code 0} true;
    $p341 := $M.82;
    goto corral_source_split_12326;

  corral_source_split_12326:
    assume {:verifier.code 0} true;
    $i342 := $load.i8($M.66, $p6);
    goto corral_source_split_12327;

  corral_source_split_12327:
    assume {:verifier.code 0} true;
    $i343 := $zext.i8.i32($i342);
    goto corral_source_split_12328;

  corral_source_split_12328:
    assume {:verifier.code 0} true;
    $i344 := $trunc.i32.i8($i343);
    goto corral_source_split_12329;

  corral_source_split_12329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} vslice_dummy_var_477 := put_char($p341, $i344);
    goto corral_source_split_12330;

  corral_source_split_12330:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2110} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12331;

  corral_source_split_12331:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb326:
    assume $i333 == 1;
    goto corral_source_split_12314;

  corral_source_split_12314:
    assume {:verifier.code 0} true;
    $p334 := $M.82;
    goto corral_source_split_12315;

  corral_source_split_12315:
    assume {:verifier.code 0} true;
    $i335 := $load.i8($M.66, $p6);
    goto corral_source_split_12316;

  corral_source_split_12316:
    assume {:verifier.code 0} true;
    $i336 := $zext.i8.i32($i335);
    goto corral_source_split_12317;

  corral_source_split_12317:
    assume {:verifier.code 0} true;
    $i337 := $trunc.i32.i8($i336);
    goto corral_source_split_12318;

  corral_source_split_12318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} vslice_dummy_var_476 := put_char($p334, $i337);
    goto corral_source_split_12319;

  corral_source_split_12319:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2108} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12320;

  corral_source_split_12320:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb303:
    assume $i297 == 1;
    goto corral_source_split_12245;

  corral_source_split_12245:
    assume {:verifier.code 0} true;
    $i302 := $M.92;
    goto corral_source_split_12246;

  corral_source_split_12246:
    assume {:verifier.code 0} true;
    $i303 := $eq.i32($i302, 4);
    goto corral_source_split_12247;

  corral_source_split_12247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    $i308 := $M.92;
    goto corral_source_split_12270;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i308, 1);
    goto corral_source_split_12271;

  corral_source_split_12271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb315:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    $i314 := $M.92;
    goto corral_source_split_12281;

  corral_source_split_12281:
    assume {:verifier.code 0} true;
    $i315 := $eq.i32($i314, 3);
    goto corral_source_split_12282;

  corral_source_split_12282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    $i320 := $M.92;
    goto corral_source_split_12292;

  corral_source_split_12292:
    assume {:verifier.code 0} true;
    $i321 := $eq.i32($i320, 2);
    goto corral_source_split_12293;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  $bb321:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    $i326 := $M.92;
    goto corral_source_split_12303;

  corral_source_split_12303:
    assume {:verifier.code 0} true;
    $i327 := $eq.i32($i326, 5);
    goto corral_source_split_12304;

  corral_source_split_12304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  $bb324:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb323:
    assume $i327 == 1;
    goto corral_source_split_12306;

  corral_source_split_12306:
    assume {:verifier.code 0} true;
    $p328 := $M.82;
    goto corral_source_split_12307;

  corral_source_split_12307:
    assume {:verifier.code 0} true;
    $i329 := $load.i8($M.66, $p11);
    goto corral_source_split_12308;

  corral_source_split_12308:
    assume {:verifier.code 0} true;
    $i330 := $sext.i8.i32($i329);
    goto corral_source_split_12309;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    $i331 := $trunc.i32.i8($i330);
    goto corral_source_split_12310;

  corral_source_split_12310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} send_xchar($p328, $i331);
    goto corral_source_split_12311;

  corral_source_split_12311:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2106} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12312;

  corral_source_split_12312:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb320:
    assume $i321 == 1;
    goto corral_source_split_12295;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    $p322 := $M.82;
    goto corral_source_split_12296;

  corral_source_split_12296:
    assume {:verifier.code 0} true;
    $i323 := $load.i8($M.66, $p11);
    goto corral_source_split_12297;

  corral_source_split_12297:
    assume {:verifier.code 0} true;
    $i324 := $sext.i8.i32($i323);
    goto corral_source_split_12298;

  corral_source_split_12298:
    assume {:verifier.code 0} true;
    $i325 := $trunc.i32.i8($i324);
    goto corral_source_split_12299;

  corral_source_split_12299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2103} send_xchar($p322, $i325);
    goto corral_source_split_12300;

  corral_source_split_12300:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2104} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12301;

  corral_source_split_12301:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb317:
    assume $i315 == 1;
    goto corral_source_split_12284;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    $p316 := $M.82;
    goto corral_source_split_12285;

  corral_source_split_12285:
    assume {:verifier.code 0} true;
    $i317 := $load.i8($M.66, $p11);
    goto corral_source_split_12286;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    $i318 := $sext.i8.i32($i317);
    goto corral_source_split_12287;

  corral_source_split_12287:
    assume {:verifier.code 0} true;
    $i319 := $trunc.i32.i8($i318);
    goto corral_source_split_12288;

  corral_source_split_12288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} send_xchar($p316, $i319);
    goto corral_source_split_12289;

  corral_source_split_12289:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2102} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12290;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb314:
    assume $i309 == 1;
    goto corral_source_split_12273;

  corral_source_split_12273:
    assume {:verifier.code 0} true;
    $p310 := $M.82;
    goto corral_source_split_12274;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    $i311 := $load.i8($M.66, $p11);
    goto corral_source_split_12275;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    $i312 := $sext.i8.i32($i311);
    goto corral_source_split_12276;

  corral_source_split_12276:
    assume {:verifier.code 0} true;
    $i313 := $trunc.i32.i8($i312);
    goto corral_source_split_12277;

  corral_source_split_12277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} send_xchar($p310, $i313);
    goto corral_source_split_12278;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2100} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12279;

  corral_source_split_12279:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb311:
    assume $i303 == 1;
    goto corral_source_split_12262;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    $p304 := $M.82;
    goto corral_source_split_12263;

  corral_source_split_12263:
    assume {:verifier.code 0} true;
    $i305 := $load.i8($M.66, $p11);
    goto corral_source_split_12264;

  corral_source_split_12264:
    assume {:verifier.code 0} true;
    $i306 := $sext.i8.i32($i305);
    goto corral_source_split_12265;

  corral_source_split_12265:
    assume {:verifier.code 0} true;
    $i307 := $trunc.i32.i8($i306);
    goto corral_source_split_12266;

  corral_source_split_12266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} send_xchar($p304, $i307);
    goto corral_source_split_12267;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2098} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12268;

  corral_source_split_12268:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb301:
    assume $i296 == 1;
    assume {:verifier.code 0} true;
    $i298 := $eq.i32($i272, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    assume !($i298 == 1);
    goto $bb266;

  $bb305:
    assume $i298 == 1;
    goto corral_source_split_12253;

  corral_source_split_12253:
    assume {:verifier.code 0} true;
    $i299 := $M.92;
    goto corral_source_split_12254;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    $i300 := $eq.i32($i299, 3);
    goto corral_source_split_12255;

  corral_source_split_12255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  $bb308:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb307:
    assume $i300 == 1;
    goto corral_source_split_12257;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    $p301 := $M.82;
    goto corral_source_split_12258;

  corral_source_split_12258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} tx_release($p301);
    goto corral_source_split_12259;

  corral_source_split_12259:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2096} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12260;

  corral_source_split_12260:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb9:
    assume $i67 == 1;
    goto corral_source_split_11749;

  corral_source_split_11749:
    assume {:verifier.code 0} true;
    $i253 := $M.91;
    goto corral_source_split_11750;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    $i254 := $ne.i32($i253, 0);
    goto corral_source_split_11751;

  corral_source_split_11751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb221:
    assume $i254 == 1;
    goto corral_source_split_12112;

  corral_source_split_12112:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2075} $i255 := __VERIFIER_nondet_int();
    call {:si_unique_call 2076} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i255);
    call {:si_unique_call 2077} {:cexpr "tmp___15"} boogie_si_record_i32($i255);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $i256 := $slt.i32($i255, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    $i257 := $eq.i32($i255, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    assume !($i257 == 1);
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} ldv_stop();
    goto corral_source_split_12153;

  corral_source_split_12153:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb226:
    assume $i257 == 1;
    goto corral_source_split_12114;

  corral_source_split_12114:
    assume {:verifier.code 0} true;
    $i263 := $M.91;
    goto corral_source_split_12115;

  corral_source_split_12115:
    assume {:verifier.code 0} true;
    $i264 := $eq.i32($i263, 1);
    goto corral_source_split_12116;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb239:
    assume $i264 == 1;
    goto corral_source_split_12132;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} $i265 := synclinkmp_init();
    goto corral_source_split_12133;

  corral_source_split_12133:
    assume {:verifier.code 0} true;
    $M.98 := $i265;
    call {:si_unique_call 2082} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i265);
    goto corral_source_split_12134;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    $i266 := $M.98;
    goto corral_source_split_12135;

  corral_source_split_12135:
    assume {:verifier.code 0} true;
    $i267 := $ne.i32($i266, 0);
    goto corral_source_split_12136;

  corral_source_split_12136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $i268 := $M.98;
    goto corral_source_split_12141;

  corral_source_split_12141:
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i268, 0);
    goto corral_source_split_12142;

  corral_source_split_12142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb244:
    assume $i269 == 1;
    goto corral_source_split_12144;

  corral_source_split_12144:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 2084} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_12145;

  corral_source_split_12145:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2085} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12146;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2086} ldv_initialize_tty_operations_5();
    goto corral_source_split_12147;

  corral_source_split_12147:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 2087} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_12148;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} ldv_tty_port_operations_6();
    goto corral_source_split_12149;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 2089} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_12150;

  corral_source_split_12150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2090} ldv_file_operations_8();
    goto corral_source_split_12151;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb241:
    assume $i267 == 1;
    goto corral_source_split_12138;

  corral_source_split_12138:
    assume {:verifier.code 0} true;
    $M.91 := 3;
    call {:si_unique_call 2083} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_12139;

  corral_source_split_12139:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2080} ldv_check_final_state();
    goto corral_source_split_12130;

  corral_source_split_12130:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb224:
    assume $i256 == 1;
    assume {:verifier.code 0} true;
    $i258 := $eq.i32($i255, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    assume !($i258 == 1);
    goto $bb228;

  $bb229:
    assume $i258 == 1;
    goto corral_source_split_12118;

  corral_source_split_12118:
    assume {:verifier.code 0} true;
    $i259 := $M.91;
    goto corral_source_split_12119;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i259, 2);
    goto corral_source_split_12120;

  corral_source_split_12120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    assume !($i260 == 1);
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb231:
    assume $i260 == 1;
    goto corral_source_split_12122;

  corral_source_split_12122:
    assume {:verifier.code 0} true;
    $i261 := $M.90;
    goto corral_source_split_12123;

  corral_source_split_12123:
    assume {:verifier.code 0} true;
    $i262 := $eq.i32($i261, 0);
    goto corral_source_split_12124;

  corral_source_split_12124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    assume !($i262 == 1);
    goto $bb233;

  $bb234:
    assume $i262 == 1;
    goto corral_source_split_12126;

  corral_source_split_12126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2078} synclinkmp_exit();
    goto corral_source_split_12127;

  corral_source_split_12127:
    assume {:verifier.code 0} true;
    $M.91 := 3;
    call {:si_unique_call 2079} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_12128;

  corral_source_split_12128:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb7:
    assume $i66 == 1;
    goto corral_source_split_11745;

  corral_source_split_11745:
    assume {:verifier.code 0} true;
    $i251 := $M.89;
    goto corral_source_split_11746;

  corral_source_split_11746:
    assume {:verifier.code 0} true;
    $i252 := $ne.i32($i251, 0);
    goto corral_source_split_11747;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb218:
    assume $i252 == 1;
    goto corral_source_split_12109;

  corral_source_split_12109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2074} choose_timer_4();
    goto corral_source_split_12110;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb5:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i63, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i69 == 1);
    goto corral_source_split_11761;

  corral_source_split_11761:
    assume {:verifier.code 0} true;
    $i249 := $M.88;
    goto corral_source_split_11762;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    $i250 := $ne.i32($i249, 0);
    goto corral_source_split_11763;

  corral_source_split_11763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb215:
    assume $i250 == 1;
    goto corral_source_split_12106;

  corral_source_split_12106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} choose_interrupt_1();
    goto corral_source_split_12107;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb14:
    assume $i69 == 1;
    goto corral_source_split_11757;

  corral_source_split_11757:
    assume {:verifier.code 0} true;
    $i214 := $M.87;
    goto corral_source_split_11758;

  corral_source_split_11758:
    assume {:verifier.code 0} true;
    $i215 := $ne.i32($i214, 0);
    goto corral_source_split_11759;

  corral_source_split_11759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb182:
    assume $i215 == 1;
    goto corral_source_split_12050;

  corral_source_split_12050:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2058} $i216 := __VERIFIER_nondet_int();
    call {:si_unique_call 2059} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i216);
    call {:si_unique_call 2060} {:cexpr "tmp___14"} boogie_si_record_i32($i216);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $i217 := $slt.i32($i216, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    $i218 := $slt.i32($i216, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i216, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    assume !($i219 == 1);
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2072} ldv_stop();
    goto corral_source_split_12104;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb189:
    assume $i219 == 1;
    goto corral_source_split_12056;

  corral_source_split_12056:
    assume {:verifier.code 0} true;
    $i240 := $M.87;
    goto corral_source_split_12057;

  corral_source_split_12057:
    assume {:verifier.code 0} true;
    $i241 := $eq.i32($i240, 1);
    goto corral_source_split_12058;

  corral_source_split_12058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb206:
    assume $i241 == 1;
    goto corral_source_split_12090;

  corral_source_split_12090:
    assume {:verifier.code 0} true;
    $p242 := $M.78;
    goto corral_source_split_12091;

  corral_source_split_12091:
    assume {:verifier.code 0} true;
    $p243 := $M.79;
    goto corral_source_split_12092;

  corral_source_split_12092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} $i244 := synclinkmp_proc_open($p242, $p243);
    goto corral_source_split_12093;

  corral_source_split_12093:
    assume {:verifier.code 0} true;
    $M.97 := $i244;
    call {:si_unique_call 2069} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i244);
    goto corral_source_split_12094;

  corral_source_split_12094:
    assume {:verifier.code 0} true;
    $i245 := $M.97;
    goto corral_source_split_12095;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i245, 0);
    goto corral_source_split_12096;

  corral_source_split_12096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb208:
    assume $i246 == 1;
    goto corral_source_split_12098;

  corral_source_split_12098:
    assume {:verifier.code 0} true;
    $M.87 := 2;
    call {:si_unique_call 2070} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_12099;

  corral_source_split_12099:
    assume {:verifier.code 0} true;
    $i247 := $M.90;
    goto corral_source_split_12100;

  corral_source_split_12100:
    assume {:verifier.code 0} true;
    $i248 := $add.i32($i247, 1);
    goto corral_source_split_12101;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    $M.90 := $i248;
    call {:si_unique_call 2071} {:cexpr "ref_cnt"} boogie_si_record_i32($i248);
    goto corral_source_split_12102;

  corral_source_split_12102:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb187:
    assume $i218 == 1;
    goto corral_source_split_12052;

  corral_source_split_12052:
    assume {:verifier.code 0} true;
    $i234 := $M.87;
    goto corral_source_split_12053;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 2);
    goto corral_source_split_12054;

  corral_source_split_12054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb203:
    assume $i235 == 1;
    goto corral_source_split_12083;

  corral_source_split_12083:
    assume {:verifier.code 0} true;
    $p236 := $M.79;
    goto corral_source_split_12084;

  corral_source_split_12084:
    assume {:verifier.code 0} true;
    $i237 := $load.i64($M.66, $p5);
    goto corral_source_split_12085;

  corral_source_split_12085:
    assume {:verifier.code 0} true;
    $i238 := $load.i32($M.66, $p3);
    goto corral_source_split_12086;

  corral_source_split_12086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2066} vslice_dummy_var_475 := seq_lseek($p236, $i237, $i238);
    goto corral_source_split_12087;

  corral_source_split_12087:
    assume {:verifier.code 0} true;
    $M.87 := 2;
    call {:si_unique_call 2067} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_12088;

  corral_source_split_12088:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb185:
    assume $i217 == 1;
    assume {:verifier.code 0} true;
    $i220 := $slt.i32($i216, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i220 == 1);
    goto corral_source_split_12060;

  corral_source_split_12060:
    assume {:verifier.code 0} true;
    $i229 := $M.87;
    goto corral_source_split_12061;

  corral_source_split_12061:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i229, 2);
    goto corral_source_split_12062;

  corral_source_split_12062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb200:
    assume $i230 == 1;
    goto corral_source_split_12077;

  corral_source_split_12077:
    assume {:verifier.code 0} true;
    $p231 := $M.79;
    goto corral_source_split_12078;

  corral_source_split_12078:
    assume {:verifier.code 0} true;
    $i232 := $load.i64($M.66, $p4);
    goto corral_source_split_12079;

  corral_source_split_12079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} vslice_dummy_var_474 := seq_read($p231, $p27, $i232, $p26);
    goto corral_source_split_12080;

  corral_source_split_12080:
    assume {:verifier.code 0} true;
    $M.87 := 2;
    call {:si_unique_call 2065} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_12081;

  corral_source_split_12081:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb192:
    assume $i220 == 1;
    assume {:verifier.code 0} true;
    $i221 := $eq.i32($i216, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    assume !($i221 == 1);
    goto $bb191;

  $bb194:
    assume $i221 == 1;
    goto corral_source_split_12064;

  corral_source_split_12064:
    assume {:verifier.code 0} true;
    $i222 := $M.87;
    goto corral_source_split_12065;

  corral_source_split_12065:
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i222, 2);
    goto corral_source_split_12066;

  corral_source_split_12066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb196:
    assume $i223 == 1;
    goto corral_source_split_12068;

  corral_source_split_12068:
    assume {:verifier.code 0} true;
    $p224 := $M.78;
    goto corral_source_split_12069;

  corral_source_split_12069:
    assume {:verifier.code 0} true;
    $p225 := $M.79;
    goto corral_source_split_12070;

  corral_source_split_12070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} vslice_dummy_var_473 := single_release($p224, $p225);
    goto corral_source_split_12071;

  corral_source_split_12071:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 2062} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_12072;

  corral_source_split_12072:
    assume {:verifier.code 0} true;
    $i227 := $M.90;
    goto corral_source_split_12073;

  corral_source_split_12073:
    assume {:verifier.code 0} true;
    $i228 := $sub.i32($i227, 1);
    goto corral_source_split_12074;

  corral_source_split_12074:
    assume {:verifier.code 0} true;
    $M.90 := $i228;
    call {:si_unique_call 2063} {:cexpr "ref_cnt"} boogie_si_record_i32($i228);
    goto corral_source_split_12075;

  corral_source_split_12075:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb3:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i63, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i63, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i63, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i72 == 1);
    goto corral_source_split_11773;

  corral_source_split_11773:
    assume {:verifier.code 0} true;
    $i212 := $M.86;
    goto corral_source_split_11774;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    $i213 := $ne.i32($i212, 0);
    goto corral_source_split_11775;

  corral_source_split_11775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb179:
    assume $i213 == 1;
    goto corral_source_split_12047;

  corral_source_split_12047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} invoke_work_2();
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_12048;

  corral_source_split_12048:
    assume {:verifier.code 0} true;
    goto $bb181;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i72 == 1;
    goto corral_source_split_11769;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    $i191 := $M.85;
    goto corral_source_split_11770;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    $i192 := $ne.i32($i191, 0);
    goto corral_source_split_11771;

  corral_source_split_11771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb151:
    assume $i192 == 1;
    goto corral_source_split_12009;

  corral_source_split_12009:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2045} $i193 := __VERIFIER_nondet_int();
    call {:si_unique_call 2046} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i193);
    call {:si_unique_call 2047} {:cexpr "tmp___13"} boogie_si_record_i32($i193);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $i194 := $slt.i32($i193, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    $i195 := $slt.i32($i193, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i193, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    assume !($i196 == 1);
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} ldv_stop();
    goto corral_source_split_12045;

  corral_source_split_12045:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb158:
    assume $i196 == 1;
    goto corral_source_split_12015;

  corral_source_split_12015:
    assume {:verifier.code 0} true;
    $i209 := $M.85;
    goto corral_source_split_12016;

  corral_source_split_12016:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i209, 2);
    goto corral_source_split_12017;

  corral_source_split_12017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb173:
    assume $i210 == 1;
    goto corral_source_split_12041;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} vslice_dummy_var_472 := ldv_shutdown_9();
    goto corral_source_split_12042;

  corral_source_split_12042:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 2055} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_12043;

  corral_source_split_12043:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb156:
    assume $i195 == 1;
    goto corral_source_split_12011;

  corral_source_split_12011:
    assume {:verifier.code 0} true;
    $i206 := $M.85;
    goto corral_source_split_12012;

  corral_source_split_12012:
    assume {:verifier.code 0} true;
    $i207 := $eq.i32($i206, 2);
    goto corral_source_split_12013;

  corral_source_split_12013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb170:
    assume $i207 == 1;
    goto corral_source_split_12036;

  corral_source_split_12036:
    assume {:verifier.code 0} true;
    $p208 := $M.80;
    goto corral_source_split_12037;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} synclinkmp_remove_one($p208);
    goto corral_source_split_12038;

  corral_source_split_12038:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 2053} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_12039;

  corral_source_split_12039:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb154:
    assume $i194 == 1;
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i193, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    assume !($i197 == 1);
    goto $bb160;

  $bb161:
    assume $i197 == 1;
    goto corral_source_split_12019;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    $i198 := $M.85;
    goto corral_source_split_12020;

  corral_source_split_12020:
    assume {:verifier.code 0} true;
    $i199 := $eq.i32($i198, 1);
    goto corral_source_split_12021;

  corral_source_split_12021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb163:
    assume $i199 == 1;
    goto corral_source_split_12023;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    $p200 := $M.80;
    goto corral_source_split_12024;

  corral_source_split_12024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} $i201 := synclinkmp_init_one($p200, $p24);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_12025;

  corral_source_split_12025:
    assume {:verifier.code 0} true;
    $M.96 := $i201;
    call {:si_unique_call 2049} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i201);
    goto corral_source_split_12026;

  corral_source_split_12026:
    assume {:verifier.code 0} true;
    $i202 := $M.96;
    goto corral_source_split_12027;

  corral_source_split_12027:
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i202, 0);
    goto corral_source_split_12028;

  corral_source_split_12028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb165:
    assume $i203 == 1;
    goto corral_source_split_12030;

  corral_source_split_12030:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 2050} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_12031;

  corral_source_split_12031:
    assume {:verifier.code 0} true;
    $i204 := $M.90;
    goto corral_source_split_12032;

  corral_source_split_12032:
    assume {:verifier.code 0} true;
    $i205 := $add.i32($i204, 1);
    goto corral_source_split_12033;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    $M.90 := $i205;
    call {:si_unique_call 2051} {:cexpr "ref_cnt"} boogie_si_record_i32($i205);
    goto corral_source_split_12034;

  corral_source_split_12034:
    assume {:verifier.code 0} true;
    goto $bb167;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i71 == 1;
    goto corral_source_split_11765;

  corral_source_split_11765:
    assume {:verifier.code 0} true;
    $i119 := $M.48;
    goto corral_source_split_11766;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_11767;

  corral_source_split_11767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb80:
    assume $i120 == 1;
    goto corral_source_split_11874;

  corral_source_split_11874:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2011} $i121 := __VERIFIER_nondet_int();
    call {:si_unique_call 2012} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i121);
    call {:si_unique_call 2013} {:cexpr "tmp___12"} boogie_si_record_i32($i121);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i122 := $slt.i32($i121, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    $i123 := $slt.i32($i121, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i121, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i121, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume !($i125 == 1);
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} ldv_stop();
    goto corral_source_split_12007;

  corral_source_split_12007:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb89:
    assume $i125 == 1;
    goto corral_source_split_11880;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    $i186 := $M.48;
    goto corral_source_split_11881;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    $i187 := $eq.i32($i186, 2);
    goto corral_source_split_11882;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb145:
    assume $i187 == 1;
    goto corral_source_split_12000;

  corral_source_split_12000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} vslice_dummy_var_471 := ldv_ndo_uninit_7();
    goto corral_source_split_12001;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 2042} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_12002;

  corral_source_split_12002:
    assume {:verifier.code 0} true;
    $i189 := $M.90;
    goto corral_source_split_12003;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    $i190 := $sub.i32($i189, 1);
    goto corral_source_split_12004;

  corral_source_split_12004:
    assume {:verifier.code 0} true;
    $M.90 := $i190;
    call {:si_unique_call 2043} {:cexpr "ref_cnt"} boogie_si_record_i32($i190);
    goto corral_source_split_12005;

  corral_source_split_12005:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb87:
    assume $i124 == 1;
    goto corral_source_split_11876;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    $i179 := $M.48;
    goto corral_source_split_11877;

  corral_source_split_11877:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, 1);
    goto corral_source_split_11878;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb139:
    assume $i180 == 1;
    goto corral_source_split_11988;

  corral_source_split_11988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} $i181 := ldv_ndo_init_7();
    goto corral_source_split_11989;

  corral_source_split_11989:
    assume {:verifier.code 0} true;
    $M.95 := $i181;
    call {:si_unique_call 2038} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i181);
    goto corral_source_split_11990;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    $i182 := $M.95;
    goto corral_source_split_11991;

  corral_source_split_11991:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i182, 0);
    goto corral_source_split_11992;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb141:
    assume $i183 == 1;
    goto corral_source_split_11994;

  corral_source_split_11994:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 2039} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_11995;

  corral_source_split_11995:
    assume {:verifier.code 0} true;
    $i184 := $M.90;
    goto corral_source_split_11996;

  corral_source_split_11996:
    assume {:verifier.code 0} true;
    $i185 := $add.i32($i184, 1);
    goto corral_source_split_11997;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    $M.90 := $i185;
    call {:si_unique_call 2040} {:cexpr "ref_cnt"} boogie_si_record_i32($i185);
    goto corral_source_split_11998;

  corral_source_split_11998:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb85:
    assume $i123 == 1;
    assume {:verifier.code 0} true;
    $i126 := $slt.i32($i121, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i126 == 1);
    goto corral_source_split_11888;

  corral_source_split_11888:
    assume {:verifier.code 0} true;
    $i170 := $M.48;
    goto corral_source_split_11889;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, 1);
    goto corral_source_split_11890;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $i173 := $M.48;
    goto corral_source_split_11972;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 3);
    goto corral_source_split_11973;

  corral_source_split_11973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $i176 := $M.48;
    goto corral_source_split_11980;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 2);
    goto corral_source_split_11981;

  corral_source_split_11981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb136:
    assume $i177 == 1;
    goto corral_source_split_11983;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    $p178 := $M.49;
    goto corral_source_split_11984;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} hdlcdev_tx_timeout($p178);
    goto corral_source_split_11985;

  corral_source_split_11985:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 2036} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_11986;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb133:
    assume $i174 == 1;
    goto corral_source_split_11975;

  corral_source_split_11975:
    assume {:verifier.code 0} true;
    $p175 := $M.49;
    goto corral_source_split_11976;

  corral_source_split_11976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} hdlcdev_tx_timeout($p175);
    goto corral_source_split_11977;

  corral_source_split_11977:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 2034} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_11978;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb130:
    assume $i171 == 1;
    goto corral_source_split_11967;

  corral_source_split_11967:
    assume {:verifier.code 0} true;
    $p172 := $M.49;
    goto corral_source_split_11968;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2031} hdlcdev_tx_timeout($p172);
    goto corral_source_split_11969;

  corral_source_split_11969:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 2032} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_11970;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb92:
    assume $i126 == 1;
    goto corral_source_split_11884;

  corral_source_split_11884:
    assume {:verifier.code 0} true;
    $i166 := $M.48;
    goto corral_source_split_11885;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i166, 3);
    goto corral_source_split_11886;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb127:
    assume $i167 == 1;
    goto corral_source_split_11962;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    $p168 := $M.49;
    goto corral_source_split_11963;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} vslice_dummy_var_470 := hdlc_start_xmit($p20, $p168);
    goto corral_source_split_11964;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 2030} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_11965;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb83:
    assume $i122 == 1;
    assume {:verifier.code 0} true;
    $i127 := $slt.i32($i121, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i121, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i128 == 1);
    goto corral_source_split_11896;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    $i160 := $M.48;
    goto corral_source_split_11897;

  corral_source_split_11897:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 2);
    goto corral_source_split_11898;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb121:
    assume $i161 == 1;
    goto corral_source_split_11952;

  corral_source_split_11952:
    assume {:verifier.code 0} true;
    $p162 := $M.49;
    goto corral_source_split_11953;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2026} $i163 := hdlcdev_open($p162);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_11954;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    $M.94 := $i163;
    call {:si_unique_call 2027} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i163);
    goto corral_source_split_11955;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    $i164 := $M.94;
    goto corral_source_split_11956;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 0);
    goto corral_source_split_11957;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb123:
    assume $i165 == 1;
    goto corral_source_split_11959;

  corral_source_split_11959:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 2028} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_11960;

  corral_source_split_11960:
    assume {:verifier.code 0} true;
    goto $bb125;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb96:
    assume $i128 == 1;
    goto corral_source_split_11892;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    $i150 := $M.48;
    goto corral_source_split_11893;

  corral_source_split_11893:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 3);
    goto corral_source_split_11894;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $i155 := $M.48;
    goto corral_source_split_11943;

  corral_source_split_11943:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 2);
    goto corral_source_split_11944;

  corral_source_split_11944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb118:
    assume $i156 == 1;
    goto corral_source_split_11946;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    $p157 := $M.49;
    goto corral_source_split_11947;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.66, $p1);
    goto corral_source_split_11948;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} vslice_dummy_var_469 := hdlc_change_mtu($p157, $i158);
    goto corral_source_split_11949;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 2025} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_11950;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb115:
    assume $i151 == 1;
    goto corral_source_split_11937;

  corral_source_split_11937:
    assume {:verifier.code 0} true;
    $p152 := $M.49;
    goto corral_source_split_11938;

  corral_source_split_11938:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.66, $p1);
    goto corral_source_split_11939;

  corral_source_split_11939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2022} vslice_dummy_var_468 := hdlc_change_mtu($p152, $i153);
    goto corral_source_split_11940;

  corral_source_split_11940:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 2023} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_11941;

  corral_source_split_11941:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb94:
    assume $i127 == 1;
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i121, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i129 == 1);
    goto corral_source_split_11900;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    $i135 := $M.48;
    goto corral_source_split_11901;

  corral_source_split_11901:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 1);
    goto corral_source_split_11902;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i140 := $M.48;
    goto corral_source_split_11919;

  corral_source_split_11919:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 3);
    goto corral_source_split_11920;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i145 := $M.48;
    goto corral_source_split_11928;

  corral_source_split_11928:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 2);
    goto corral_source_split_11929;

  corral_source_split_11929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb112:
    assume $i146 == 1;
    goto corral_source_split_11931;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    $p147 := $M.49;
    goto corral_source_split_11932;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.66, $p2);
    goto corral_source_split_11933;

  corral_source_split_11933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} vslice_dummy_var_467 := hdlcdev_ioctl($p147, $p22, $i148);
    goto corral_source_split_11934;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 2021} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_11935;

  corral_source_split_11935:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb109:
    assume $i141 == 1;
    goto corral_source_split_11922;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    $p142 := $M.49;
    goto corral_source_split_11923;

  corral_source_split_11923:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.66, $p2);
    goto corral_source_split_11924;

  corral_source_split_11924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2018} vslice_dummy_var_466 := hdlcdev_ioctl($p142, $p22, $i143);
    goto corral_source_split_11925;

  corral_source_split_11925:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 2019} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_11926;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb106:
    assume $i136 == 1;
    goto corral_source_split_11913;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    $p137 := $M.49;
    goto corral_source_split_11914;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.66, $p2);
    goto corral_source_split_11915;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} vslice_dummy_var_465 := hdlcdev_ioctl($p137, $p22, $i138);
    goto corral_source_split_11916;

  corral_source_split_11916:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 2017} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_11917;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb98:
    assume $i129 == 1;
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i121, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb91;

  $bb100:
    assume $i130 == 1;
    goto corral_source_split_11904;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    $i131 := $M.48;
    goto corral_source_split_11905;

  corral_source_split_11905:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, 3);
    goto corral_source_split_11906;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb102:
    assume $i132 == 1;
    goto corral_source_split_11908;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    $p133 := $M.49;
    goto corral_source_split_11909;

  corral_source_split_11909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2014} vslice_dummy_var_464 := hdlcdev_close($p133);
    goto corral_source_split_11910;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 2015} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_11911;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb16:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i63, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i73 == 1);
    goto corral_source_split_11777;

  corral_source_split_11777:
    assume {:verifier.code 0} true;
    $i117 := $M.84;
    goto corral_source_split_11778;

  corral_source_split_11778:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_11779;

  corral_source_split_11779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb77:
    assume $i118 == 1;
    goto corral_source_split_11871;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2010} choose_timer_3();
    goto corral_source_split_11872;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb22:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i63, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb13;

  $bb24:
    assume $i74 == 1;
    goto corral_source_split_11781;

  corral_source_split_11781:
    assume {:verifier.code 0} true;
    $i75 := $M.83;
    goto corral_source_split_11782;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_11783;

  corral_source_split_11783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb26:
    assume $i76 == 1;
    goto corral_source_split_11785;

  corral_source_split_11785:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1985} $i77 := __VERIFIER_nondet_int();
    call {:si_unique_call 1986} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i77);
    call {:si_unique_call 1987} {:cexpr "tmp___11"} boogie_si_record_i32($i77);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i77, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i77, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i77, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i77, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} ldv_stop();
    goto corral_source_split_11869;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb35:
    assume $i81 == 1;
    goto corral_source_split_11795;

  corral_source_split_11795:
    assume {:verifier.code 0} true;
    $i112 := $M.83;
    goto corral_source_split_11796;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 3);
    goto corral_source_split_11797;

  corral_source_split_11797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb70:
    assume $i113 == 1;
    goto corral_source_split_11862;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} vslice_dummy_var_463 := ldv_shutdown_6();
    goto corral_source_split_11863;

  corral_source_split_11863:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 2007} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11864;

  corral_source_split_11864:
    assume {:verifier.code 0} true;
    $i115 := $M.90;
    goto corral_source_split_11865;

  corral_source_split_11865:
    assume {:verifier.code 0} true;
    $i116 := $sub.i32($i115, 1);
    goto corral_source_split_11866;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    $M.90 := $i116;
    call {:si_unique_call 2008} {:cexpr "ref_cnt"} boogie_si_record_i32($i116);
    goto corral_source_split_11867;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb33:
    assume $i80 == 1;
    goto corral_source_split_11791;

  corral_source_split_11791:
    assume {:verifier.code 0} true;
    $i105 := $M.83;
    goto corral_source_split_11792;

  corral_source_split_11792:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 1);
    goto corral_source_split_11793;

  corral_source_split_11793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb64:
    assume $i106 == 1;
    goto corral_source_split_11850;

  corral_source_split_11850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2002} $i107 := ldv_activate_6();
    goto corral_source_split_11851;

  corral_source_split_11851:
    assume {:verifier.code 0} true;
    $M.93 := $i107;
    call {:si_unique_call 2003} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i107);
    goto corral_source_split_11852;

  corral_source_split_11852:
    assume {:verifier.code 0} true;
    $i108 := $M.93;
    goto corral_source_split_11853;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 0);
    goto corral_source_split_11854;

  corral_source_split_11854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb66:
    assume $i109 == 1;
    goto corral_source_split_11856;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    $M.83 := 3;
    call {:si_unique_call 2004} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_11857;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    $i110 := $M.90;
    goto corral_source_split_11858;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i110, 1);
    goto corral_source_split_11859;

  corral_source_split_11859:
    assume {:verifier.code 0} true;
    $M.90 := $i111;
    call {:si_unique_call 2005} {:cexpr "ref_cnt"} boogie_si_record_i32($i111);
    goto corral_source_split_11860;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb31:
    assume $i79 == 1;
    goto corral_source_split_11787;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    $i102 := $M.83;
    goto corral_source_split_11788;

  corral_source_split_11788:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 1);
    goto corral_source_split_11789;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb61:
    assume $i103 == 1;
    goto corral_source_split_11846;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2000} vslice_dummy_var_462 := ldv_destruct_6();
    goto corral_source_split_11847;

  corral_source_split_11847:
    assume {:verifier.code 0} true;
    $M.83 := 2;
    call {:si_unique_call 2001} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_11848;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb29:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i77, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i82 == 1);
    goto corral_source_split_11799;

  corral_source_split_11799:
    assume {:verifier.code 0} true;
    $i93 := $M.83;
    goto corral_source_split_11800;

  corral_source_split_11800:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 1);
    goto corral_source_split_11801;

  corral_source_split_11801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i96 := $M.83;
    goto corral_source_split_11830;

  corral_source_split_11830:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 3);
    goto corral_source_split_11831;

  corral_source_split_11831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i99 := $M.83;
    goto corral_source_split_11838;

  corral_source_split_11838:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 2);
    goto corral_source_split_11839;

  corral_source_split_11839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb58:
    assume $i100 == 1;
    goto corral_source_split_11841;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.66, $p0);
    goto corral_source_split_11842;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1998} dtr_rts($p16, $i101);
    goto corral_source_split_11843;

  corral_source_split_11843:
    assume {:verifier.code 0} true;
    $M.83 := 2;
    call {:si_unique_call 1999} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_11844;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb55:
    assume $i97 == 1;
    goto corral_source_split_11833;

  corral_source_split_11833:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.66, $p0);
    goto corral_source_split_11834;

  corral_source_split_11834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1996} dtr_rts($p16, $i98);
    goto corral_source_split_11835;

  corral_source_split_11835:
    assume {:verifier.code 0} true;
    $M.83 := 3;
    call {:si_unique_call 1997} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_11836;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb52:
    assume $i94 == 1;
    goto corral_source_split_11825;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.66, $p0);
    goto corral_source_split_11826;

  corral_source_split_11826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1994} dtr_rts($p16, $i95);
    goto corral_source_split_11827;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1995} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11828;

  corral_source_split_11828:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb38:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i77, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb37;

  $bb40:
    assume $i83 == 1;
    goto corral_source_split_11803;

  corral_source_split_11803:
    assume {:verifier.code 0} true;
    $i84 := $M.83;
    goto corral_source_split_11804;

  corral_source_split_11804:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 1);
    goto corral_source_split_11805;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i87 := $M.83;
    goto corral_source_split_11811;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 3);
    goto corral_source_split_11812;

  corral_source_split_11812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i90 := $M.83;
    goto corral_source_split_11818;

  corral_source_split_11818:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 2);
    goto corral_source_split_11819;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb48:
    assume $i91 == 1;
    goto corral_source_split_11821;

  corral_source_split_11821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} vslice_dummy_var_461 := carrier_raised($p18);
    goto corral_source_split_11822;

  corral_source_split_11822:
    assume {:verifier.code 0} true;
    $M.83 := 2;
    call {:si_unique_call 1993} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_11823;

  corral_source_split_11823:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb45:
    assume $i88 == 1;
    goto corral_source_split_11814;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} vslice_dummy_var_460 := carrier_raised($p18);
    goto corral_source_split_11815;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    $M.83 := 3;
    call {:si_unique_call 1991} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_11816;

  corral_source_split_11816:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume $i85 == 1;
    goto corral_source_split_11807;

  corral_source_split_11807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} vslice_dummy_var_459 := carrier_raised($p18);
    goto corral_source_split_11808;

  corral_source_split_11808:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1989} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11809;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb76_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1982} $i63 := __VERIFIER_nondet_int();
    call {:si_unique_call 1983} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i63);
    call {:si_unique_call 1984} {:cexpr "tmp___10"} boogie_si_record_i32($i63);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 590112);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13015;

  corral_source_split_13015:
    assume {:verifier.code 0} true;
    return;
}



const ldv_destruct_6: ref;

axiom ldv_destruct_6 == $sub.ref(0, 591144);

procedure ldv_destruct_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_destruct_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13017;

  corral_source_split_13017:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2290} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2291} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_13018;

  corral_source_split_13018:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_activate_6: ref;

axiom ldv_activate_6 == $sub.ref(0, 592176);

procedure ldv_activate_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_activate_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13020;

  corral_source_split_13020:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2292} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2293} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_13021;

  corral_source_split_13021:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_shutdown_6: ref;

axiom ldv_shutdown_6 == $sub.ref(0, 593208);

procedure ldv_shutdown_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_shutdown_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13023;

  corral_source_split_13023:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2294} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2295} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_13024;

  corral_source_split_13024:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_init_7: ref;

axiom ldv_ndo_init_7 == $sub.ref(0, 594240);

procedure ldv_ndo_init_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_init_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13026;

  corral_source_split_13026:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2296} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2297} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_13027;

  corral_source_split_13027:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_uninit_7: ref;

axiom ldv_ndo_uninit_7 == $sub.ref(0, 595272);

procedure ldv_ndo_uninit_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_uninit_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13029;

  corral_source_split_13029:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2298} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2299} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_13030;

  corral_source_split_13030:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_shutdown_9: ref;

axiom ldv_shutdown_9 == $sub.ref(0, 596304);

procedure ldv_shutdown_9() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_shutdown_9() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13032;

  corral_source_split_13032:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2300} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2301} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_13033;

  corral_source_split_13033:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const synclinkmp_exit: ref;

axiom synclinkmp_exit == $sub.ref(0, 597336);

procedure synclinkmp_exit();
  free requires assertsPassed;
  modifies $M.0, $M.85, $M.3, $M.5, $M.7, $M.9, $M.48, $M.25, $M.28, $M.31, $M.34;



implementation synclinkmp_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13035;

  corral_source_split_13035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2302} synclinkmp_cleanup();
    goto corral_source_split_13036;

  corral_source_split_13036:
    assume {:verifier.code 0} true;
    return;
}



const synclinkmp_init: ref;

axiom synclinkmp_init == $sub.ref(0, 598368);

procedure synclinkmp_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.103, $M.0, $M.85, $M.80, $M.3, $M.5, $M.7, $M.9, $M.48, $M.25, $M.28, $M.31, $M.34, $CurrAddr;



implementation synclinkmp_init() returns ($r: i32)
{
  var $i0: i8;
  var $i1: i1;
  var $p3: ref;
  var $p4: ref;
  var $i6: i32;
  var $i7: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i14: i32;
  var $i9: i32;
  var cmdloc_dummy_var_77: [ref]i8;
  var cmdloc_dummy_var_78: [ref]i8;
  var cmdloc_dummy_var_79: [ref]i8;
  var vslice_dummy_var_527: ref;
  var vslice_dummy_var_528: i32;
  var vslice_dummy_var_529: i32;
  var vslice_dummy_var_530: i32;
  var vslice_dummy_var_531: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13038;

  corral_source_split_13038:
    assume {:verifier.code 0} true;
    $i0 := $M.100;
    goto corral_source_split_13039;

  corral_source_split_13039:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i8.i1($i0);
    goto corral_source_split_13040;

  corral_source_split_13040:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p3 := $M.102;
    goto corral_source_split_13045;

  corral_source_split_13045:
    assume {:verifier.code 0} true;
    $p4 := $M.64;
    goto corral_source_split_13046;

  corral_source_split_13046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2304} vslice_dummy_var_528 := printk.ref.ref.ref(.str.114, $p3, $p4);
    goto corral_source_split_13047;

  corral_source_split_13047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2305} $i6 := ldv___pci_register_driver_53(synclinkmp_pci_driver, __this_module, .str.70);
    call {:si_unique_call 2306} {:cexpr "rc"} boogie_si_record_i32($i6);
    goto corral_source_split_13048;

  corral_source_split_13048:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_13049;

  corral_source_split_13049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2308} $p10 := alloc_tty_driver(128);
    goto corral_source_split_13056;

  corral_source_split_13056:
    assume {:verifier.code 0} true;
    $M.103 := $p10;
    goto corral_source_split_13057;

  corral_source_split_13057:
    assume {:verifier.code 0} true;
    $p11 := $M.103;
    goto corral_source_split_13058;

  corral_source_split_13058:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_13059;

  corral_source_split_13059:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_13060;

  corral_source_split_13060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p15 := $M.103;
    goto corral_source_split_13067;

  corral_source_split_13067:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_13068;

  corral_source_split_13068:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, .str.70);
    goto corral_source_split_13069;

  corral_source_split_13069:
    assume {:verifier.code 0} true;
    $p17 := $M.103;
    goto corral_source_split_13070;

  corral_source_split_13070:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_13071;

  corral_source_split_13071:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, .str.116);
    goto corral_source_split_13072;

  corral_source_split_13072:
    assume {:verifier.code 0} true;
    $i19 := $M.104;
    goto corral_source_split_13073;

  corral_source_split_13073:
    assume {:verifier.code 0} true;
    $p20 := $M.103;
    goto corral_source_split_13074;

  corral_source_split_13074:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 184)), $mul.ref(44, 1));
    goto corral_source_split_13075;

  corral_source_split_13075:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i19);
    goto corral_source_split_13076;

  corral_source_split_13076:
    assume {:verifier.code 0} true;
    $p22 := $M.103;
    goto corral_source_split_13077;

  corral_source_split_13077:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_13078;

  corral_source_split_13078:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 64);
    goto corral_source_split_13079;

  corral_source_split_13079:
    assume {:verifier.code 0} true;
    $p24 := $M.103;
    goto corral_source_split_13080;

  corral_source_split_13080:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_13081;

  corral_source_split_13081:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, 3);
    goto corral_source_split_13082;

  corral_source_split_13082:
    assume {:verifier.code 0} true;
    $p26 := $M.103;
    goto corral_source_split_13083;

  corral_source_split_13083:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 184)), $mul.ref(58, 1));
    goto corral_source_split_13084;

  corral_source_split_13084:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, 1);
    goto corral_source_split_13085;

  corral_source_split_13085:
    assume {:verifier.code 0} true;
    $p28 := $M.103;
    goto corral_source_split_13086;

  corral_source_split_13086:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 184)), $mul.ref(60, 1));
    goto corral_source_split_13087;

  corral_source_split_13087:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_13088;

  corral_source_split_13088:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_77 := $M.0;
    cmdloc_dummy_var_78 := $M.0;
    call {:si_unique_call 2310} cmdloc_dummy_var_79 := $memcpy.i8(cmdloc_dummy_var_77, cmdloc_dummy_var_78, $p30, tty_std_termios, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_79;
    goto corral_source_split_13089;

  corral_source_split_13089:
    assume {:verifier.code 0} true;
    $p31 := $M.103;
    goto corral_source_split_13090;

  corral_source_split_13090:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 184)), $mul.ref(60, 1)), $mul.ref(8, 1));
    goto corral_source_split_13091;

  corral_source_split_13091:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 3261);
    goto corral_source_split_13092;

  corral_source_split_13092:
    assume {:verifier.code 0} true;
    $p34 := $M.103;
    goto corral_source_split_13093;

  corral_source_split_13093:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 184)), $mul.ref(60, 1)), $mul.ref(36, 1));
    goto corral_source_split_13094;

  corral_source_split_13094:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 9600);
    goto corral_source_split_13095;

  corral_source_split_13095:
    assume {:verifier.code 0} true;
    $p37 := $M.103;
    goto corral_source_split_13096;

  corral_source_split_13096:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 184)), $mul.ref(60, 1)), $mul.ref(40, 1));
    goto corral_source_split_13097;

  corral_source_split_13097:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 9600);
    goto corral_source_split_13098;

  corral_source_split_13098:
    assume {:verifier.code 0} true;
    $p40 := $M.103;
    goto corral_source_split_13099;

  corral_source_split_13099:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_13100;

  corral_source_split_13100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p41, 4);
    goto corral_source_split_13101;

  corral_source_split_13101:
    assume {:verifier.code 0} true;
    $p42 := $M.103;
    goto corral_source_split_13102;

  corral_source_split_13102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2311} tty_set_operations($p42, ops);
    goto corral_source_split_13103;

  corral_source_split_13103:
    assume {:verifier.code 0} true;
    $p43 := $M.103;
    goto corral_source_split_13104;

  corral_source_split_13104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2312} $i44 := tty_register_driver($p43);
    call {:si_unique_call 2313} {:cexpr "rc"} boogie_si_record_i32($i44);
    goto corral_source_split_13105;

  corral_source_split_13105:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i44, 0);
    goto corral_source_split_13106;

  corral_source_split_13106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p48 := $M.102;
    goto corral_source_split_13114;

  corral_source_split_13114:
    assume {:verifier.code 0} true;
    $p49 := $M.64;
    goto corral_source_split_13115;

  corral_source_split_13115:
    assume {:verifier.code 0} true;
    $p50 := $M.103;
    goto corral_source_split_13116;

  corral_source_split_13116:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 184)), $mul.ref(44, 1));
    goto corral_source_split_13117;

  corral_source_split_13117:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_13118;

  corral_source_split_13118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2316} vslice_dummy_var_531 := printk.ref.ref.ref.i32(.str.118, $p48, $p49, $i52);
    goto corral_source_split_13119;

  corral_source_split_13119:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_13054;

  corral_source_split_13054:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb12:
    assume $i45 == 1;
    goto corral_source_split_13108;

  corral_source_split_13108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2314} vslice_dummy_var_530 := printk.ref.ref.i32(.str.117, .str.1, 4004);
    goto corral_source_split_13109;

  corral_source_split_13109:
    assume {:verifier.code 0} true;
    $p47 := $M.103;
    goto corral_source_split_13110;

  corral_source_split_13110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2315} put_tty_driver($p47);
    goto corral_source_split_13111;

  corral_source_split_13111:
    assume {:verifier.code 0} true;
    $M.103 := $0.ref;
    goto corral_source_split_13112;

  corral_source_split_13112:
    assume {:verifier.code 0} true;
    $i14 := $i44;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_13064;

  corral_source_split_13064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2309} synclinkmp_cleanup();
    goto corral_source_split_13065;

  corral_source_split_13065:
    assume {:verifier.code 0} true;
    $i9 := $i14;
    goto $bb6;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_13062;

  corral_source_split_13062:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 12);
    goto $bb10;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_13051;

  corral_source_split_13051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2307} vslice_dummy_var_529 := printk.ref.ref.i32(.str.115, .str.1, $i6);
    goto corral_source_split_13052;

  corral_source_split_13052:
    assume {:verifier.code 0} true;
    $i9 := $i6;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_13042;

  corral_source_split_13042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2303} vslice_dummy_var_527 := synclinkmp_get_text_ptr();
    goto corral_source_split_13043;

  corral_source_split_13043:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_disconnect_5: ref;

axiom ldv_disconnect_5 == $sub.ref(0, 599400);

procedure ldv_disconnect_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_disconnect_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13121;

  corral_source_split_13121:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2317} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2318} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_13122;

  corral_source_split_13122:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_5: ref;

axiom ldv_release_5 == $sub.ref(0, 600432);

procedure ldv_release_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13124;

  corral_source_split_13124:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2319} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2320} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_13125;

  corral_source_split_13125:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_setup_5: ref;

axiom ldv_setup_5 == $sub.ref(0, 601464);

procedure ldv_setup_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_setup_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13127;

  corral_source_split_13127:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2321} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2322} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_13128;

  corral_source_split_13128:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 602496);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13130;

  corral_source_split_13130:
    assume {:verifier.code 0} true;
    return;
}



const synclinkmp_get_text_ptr: ref;

axiom synclinkmp_get_text_ptr == $sub.ref(0, 603528);

procedure synclinkmp_get_text_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation synclinkmp_get_text_ptr() returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13132;

  corral_source_split_13132:
    assume {:verifier.code 0} true;
    $r := synclinkmp_get_text_ptr;
    return;
}



const ldv___pci_register_driver_53: ref;

axiom ldv___pci_register_driver_53 == $sub.ref(0, 604560);

procedure ldv___pci_register_driver_53($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.85, $M.80, $M.0, $CurrAddr;



implementation ldv___pci_register_driver_53($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13134;

  corral_source_split_13134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2323} $i3 := __pci_register_driver($p0, $p1, $p2);
    call {:si_unique_call 2324} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_13135;

  corral_source_split_13135:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 2325} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_13136;

  corral_source_split_13136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2326} ldv_pci_driver_9();
    goto corral_source_split_13137;

  corral_source_split_13137:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const alloc_tty_driver: ref;

axiom alloc_tty_driver == $sub.ref(0, 605592);

procedure alloc_tty_driver($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_tty_driver($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2327} {:cexpr "alloc_tty_driver:arg:lines"} boogie_si_record_i32($i0);
    goto corral_source_split_13139;

  corral_source_split_13139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2328} $p1 := __tty_alloc_driver($i0, __this_module, 0);
    goto corral_source_split_13140;

  corral_source_split_13140:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13141;

  corral_source_split_13141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2329} $i3 := IS_ERR($p2);
    goto corral_source_split_13142;

  corral_source_split_13142:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 2330} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_13143;

  corral_source_split_13143:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_13144;

  corral_source_split_13144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13148;

  corral_source_split_13148:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_13146;

  corral_source_split_13146:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;
}



const tty_set_operations: ref;

axiom tty_set_operations == $sub.ref(0, 606624);

procedure tty_set_operations($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation tty_set_operations($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13150;

  corral_source_split_13150:
    assume {:verifier.code 0} true;
    return;
}



const tty_register_driver: ref;

axiom tty_register_driver == $sub.ref(0, 607656);

procedure tty_register_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_register_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13152;

  corral_source_split_13152:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2331} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2332} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_13153;

  corral_source_split_13153:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const put_tty_driver: ref;

axiom put_tty_driver == $sub.ref(0, 608688);

procedure put_tty_driver($p0: ref);
  free requires assertsPassed;



implementation put_tty_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13155;

  corral_source_split_13155:
    assume {:verifier.code 0} true;
    return;
}



const synclinkmp_cleanup: ref;

axiom synclinkmp_cleanup == $sub.ref(0, 609720);

procedure synclinkmp_cleanup();
  free requires assertsPassed;
  modifies $M.0, $M.85, $M.3, $M.5, $M.7, $M.9, $M.48, $M.25, $M.28, $M.31, $M.34;



implementation synclinkmp_cleanup()
{
  var $p0: ref;
  var $p1: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p14: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p22: ref;
  var vslice_dummy_var_532: i32;
  var vslice_dummy_var_533: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13157;

  corral_source_split_13157:
    assume {:verifier.code 0} true;
    $p0 := $M.102;
    goto corral_source_split_13158;

  corral_source_split_13158:
    assume {:verifier.code 0} true;
    $p1 := $M.64;
    goto corral_source_split_13159;

  corral_source_split_13159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2333} vslice_dummy_var_532 := printk.ref.ref.ref(.str.111, $p0, $p1);
    goto corral_source_split_13160;

  corral_source_split_13160:
    assume {:verifier.code 0} true;
    $p3 := $M.103;
    goto corral_source_split_13161;

  corral_source_split_13161:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_13162;

  corral_source_split_13162:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_13163;

  corral_source_split_13163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p11 := $M.17;
    goto corral_source_split_13176;

  corral_source_split_13176:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_13177;

  corral_source_split_13177:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_13178;

  corral_source_split_13178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p19 := $M.17;
    goto corral_source_split_13192;

  corral_source_split_13192:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_13193;

  corral_source_split_13193:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_13194;

  corral_source_split_13194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2346} ldv_pci_unregister_driver_52(synclinkmp_pci_driver);
    goto corral_source_split_13229;

  corral_source_split_13229:
    assume {:verifier.code 0} true;
    return;

  $bb15:
    assume $i21 == 1;
    goto corral_source_split_13196;

  corral_source_split_13196:
    assume {:verifier.code 0} true;
    $p22 := $p19;
    goto $bb18;

  $bb18:
    call $p23, $i24, $i25, $p26, $p27, $i28, $i29, $p30, $p31, $p32, $p33, $i34, $i35, $p22 := synclinkmp_cleanup_loop_$bb18($p23, $i24, $i25, $p26, $p27, $i28, $i29, $p30, $p31, $p32, $p33, $i34, $i35, $p22);
    goto $bb18_last;

  corral_source_split_13198:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2339} hdlcdev_exit($p22);
    goto corral_source_split_13200;

  corral_source_split_13200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2340} free_dma_bufs($p22);
    goto corral_source_split_13201;

  corral_source_split_13201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2341} free_tmp_rx_buf($p22);
    goto corral_source_split_13202;

  corral_source_split_13202:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 6384)), $mul.ref(6044, 1));
    goto corral_source_split_13203;

  corral_source_split_13203:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_13204;

  corral_source_split_13204:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_13205;

  corral_source_split_13205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p22, $mul.ref(0, 6384)), $mul.ref(1504, 1));
    goto corral_source_split_13218;

  corral_source_split_13218:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_13219;

  corral_source_split_13219:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p22, $mul.ref(0, 6384)), $mul.ref(16, 1));
    goto corral_source_split_13220;

  corral_source_split_13220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2344} tty_port_destroy($p32);
    goto corral_source_split_13221;

  corral_source_split_13221:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p22);
    goto corral_source_split_13222;

  corral_source_split_13222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2345} kfree($p33);
    goto corral_source_split_13223;

  corral_source_split_13223:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p31);
    goto corral_source_split_13224;

  corral_source_split_13224:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_13225;

  corral_source_split_13225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i35 == 1);
    goto corral_source_split_13227;

  corral_source_split_13227:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb26:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $p22 := $p31;
    goto $bb26_dummy;

  $bb20:
    assume $i25 == 1;
    goto corral_source_split_13207;

  corral_source_split_13207:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p22, $mul.ref(0, 6384)), $mul.ref(6184, 1));
    goto corral_source_split_13208;

  corral_source_split_13208:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_13209;

  corral_source_split_13209:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_13210;

  corral_source_split_13210:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_13211;

  corral_source_split_13211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2343} release_resources($p22);
    goto corral_source_split_13216;

  corral_source_split_13216:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i29 == 1;
    goto corral_source_split_13213;

  corral_source_split_13213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2342} write_reg($p22, 0, 1);
    goto corral_source_split_13214;

  corral_source_split_13214:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_13180;

  corral_source_split_13180:
    assume {:verifier.code 0} true;
    $p14 := $p11;
    goto $bb10;

  $bb10:
    call $p15, $p16, $i17, $i18, $p14 := synclinkmp_cleanup_loop_$bb10($p15, $p16, $i17, $i18, $p14);
    goto $bb10_last;

  corral_source_split_13182:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2338} reset_port($p14);
    goto corral_source_split_13184;

  corral_source_split_13184:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 6384)), $mul.ref(1504, 1));
    goto corral_source_split_13185;

  corral_source_split_13185:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_13186;

  corral_source_split_13186:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_13187;

  corral_source_split_13187:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_13188;

  corral_source_split_13188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i18 == 1);
    goto corral_source_split_13190;

  corral_source_split_13190:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb12:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $p14 := $p16;
    goto $bb12_dummy;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_13165;

  corral_source_split_13165:
    assume {:verifier.code 0} true;
    $p6 := $M.103;
    goto corral_source_split_13166;

  corral_source_split_13166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2334} $i7 := tty_unregister_driver($p6);
    call {:si_unique_call 2335} {:cexpr "rc"} boogie_si_record_i32($i7);
    goto corral_source_split_13167;

  corral_source_split_13167:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_13168;

  corral_source_split_13168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $M.103;
    goto corral_source_split_13173;

  corral_source_split_13173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2337} put_tty_driver($p10);
    goto corral_source_split_13174;

  corral_source_split_13174:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_13170;

  corral_source_split_13170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2336} vslice_dummy_var_533 := printk.ref.ref.i32.i32(.str.112, .str.1, 3929, $i7);
    goto corral_source_split_13171;

  corral_source_split_13171:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb26_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_13198;

  $bb12_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_13182;
}



const tty_unregister_driver: ref;

axiom tty_unregister_driver == $sub.ref(0, 610752);

procedure tty_unregister_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_unregister_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13231;

  corral_source_split_13231:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2347} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2348} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_13232;

  corral_source_split_13232:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const hdlcdev_exit: ref;

axiom hdlcdev_exit == $sub.ref(0, 611784);

procedure hdlcdev_exit($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.48;



implementation hdlcdev_exit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13234;

  corral_source_split_13234:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6376, 1));
    goto corral_source_split_13235;

  corral_source_split_13235:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_13236;

  corral_source_split_13236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2349} unregister_hdlc_device($p2);
    goto corral_source_split_13237;

  corral_source_split_13237:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6376, 1));
    goto corral_source_split_13238;

  corral_source_split_13238:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_13239;

  corral_source_split_13239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2350} ldv_free_netdev_45($p4);
    goto corral_source_split_13240;

  corral_source_split_13240:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6376, 1));
    goto corral_source_split_13241;

  corral_source_split_13241:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_13242;

  corral_source_split_13242:
    assume {:verifier.code 0} true;
    return;
}



const free_dma_bufs: ref;

axiom free_dma_bufs == $sub.ref(0, 612816);

procedure free_dma_bufs($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation free_dma_bufs($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13244;

  corral_source_split_13244:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1832, 1));
    goto corral_source_split_13245;

  corral_source_split_13245:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $0.ref);
    goto corral_source_split_13246;

  corral_source_split_13246:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(1856, 1));
    goto corral_source_split_13247;

  corral_source_split_13247:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $0.ref);
    goto corral_source_split_13248;

  corral_source_split_13248:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(3920, 1));
    goto corral_source_split_13249;

  corral_source_split_13249:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $0.ref);
    goto corral_source_split_13250;

  corral_source_split_13250:
    assume {:verifier.code 0} true;
    return;
}



const free_tmp_rx_buf: ref;

axiom free_tmp_rx_buf == $sub.ref(0, 613848);

procedure free_tmp_rx_buf($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation free_tmp_rx_buf($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13252;

  corral_source_split_13252:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5984, 1));
    goto corral_source_split_13253;

  corral_source_split_13253:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_13254;

  corral_source_split_13254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2351} kfree($p2);
    goto corral_source_split_13255;

  corral_source_split_13255:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(5984, 1));
    goto corral_source_split_13256;

  corral_source_split_13256:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $0.ref);
    goto corral_source_split_13257;

  corral_source_split_13257:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6256, 1));
    goto corral_source_split_13258;

  corral_source_split_13258:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_13259;

  corral_source_split_13259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2352} kfree($p5);
    goto corral_source_split_13260;

  corral_source_split_13260:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(6256, 1));
    goto corral_source_split_13261;

  corral_source_split_13261:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_13262;

  corral_source_split_13262:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pci_unregister_driver_52: ref;

axiom ldv_pci_unregister_driver_52 == $sub.ref(0, 614880);

procedure ldv_pci_unregister_driver_52($p0: ref);
  free requires assertsPassed;
  modifies $M.85;



implementation ldv_pci_unregister_driver_52($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13264;

  corral_source_split_13264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2353} pci_unregister_driver($p0);
    goto corral_source_split_13265;

  corral_source_split_13265:
    assume {:verifier.code 0} true;
    $M.85 := 0;
    call {:si_unique_call 2354} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_13266;

  corral_source_split_13266:
    assume {:verifier.code 0} true;
    return;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 615912);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13268;

  corral_source_split_13268:
    assume {:verifier.code 0} true;
    return;
}



const unregister_hdlc_device: ref;

axiom unregister_hdlc_device == $sub.ref(0, 616944);

procedure unregister_hdlc_device($p0: ref);
  free requires assertsPassed;



implementation unregister_hdlc_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13270;

  corral_source_split_13270:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_netdev_45: ref;

axiom ldv_free_netdev_45 == $sub.ref(0, 617976);

procedure ldv_free_netdev_45($p0: ref);
  free requires assertsPassed;
  modifies $M.48;



implementation ldv_free_netdev_45($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13272;

  corral_source_split_13272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2355} free_netdev($p0);
    goto corral_source_split_13273;

  corral_source_split_13273:
    assume {:verifier.code 0} true;
    $M.48 := 0;
    call {:si_unique_call 2356} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_13274;

  corral_source_split_13274:
    assume {:verifier.code 0} true;
    return;
}



const __tty_alloc_driver: ref;

axiom __tty_alloc_driver == $sub.ref(0, 619008);

procedure __tty_alloc_driver($i0: i32, $p1: ref, $i2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation __tty_alloc_driver($i0: i32, $p1: ref, $i2: i64) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2357} {:cexpr "__tty_alloc_driver:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2358} {:cexpr "__tty_alloc_driver:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_13276;

  corral_source_split_13276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2359} $p3 := external_alloc();
    goto corral_source_split_13277;

  corral_source_split_13277:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_13278;

  corral_source_split_13278:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 620040);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13280;

  corral_source_split_13280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2360} $i1 := ldv_is_err($p0);
    goto corral_source_split_13281;

  corral_source_split_13281:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2361} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_13282;

  corral_source_split_13282:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_13283;

  corral_source_split_13283:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 621072);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13285;

  corral_source_split_13285:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_13286;

  corral_source_split_13286:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_13287;

  corral_source_split_13287:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 622104);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13289;

  corral_source_split_13289:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2362} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2363} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_13290;

  corral_source_split_13290:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 623136);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2364} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_13292;

  corral_source_split_13292:
    assume {:verifier.code 1} true;
    goto corral_source_split_13293;

  corral_source_split_13293:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_13294;

  corral_source_split_13294:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 624168);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 625200);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 626232);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13296;

  corral_source_split_13296:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_13297;

  corral_source_split_13297:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_412:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 627264);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 628296);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 629328);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 630360);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 631392);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 632424);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 633456);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 634488);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 635520);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 636552);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13299;

  corral_source_split_13299:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2365} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 2366} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2367} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_13300;

  corral_source_split_13300:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_13301;

  corral_source_split_13301:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_13305;

  corral_source_split_13305:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_13306;

  corral_source_split_13306:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2368} __VERIFIER_assume($i4);
    goto corral_source_split_13307;

  corral_source_split_13307:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_13303;

  corral_source_split_13303:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 637584);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 638616);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 639648);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 640680);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13309;

  corral_source_split_13309:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2369} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2370} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2371} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_13310;

  corral_source_split_13310:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2372} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2373} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 2374} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_13311;

  corral_source_split_13311:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2375} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2376} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 2377} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_13312;

  corral_source_split_13312:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_13313;

  corral_source_split_13313:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_13318;

  corral_source_split_13318:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_13319;

  corral_source_split_13319:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2378} __VERIFIER_assume($i7);
    goto corral_source_split_13320;

  corral_source_split_13320:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_13321;

  corral_source_split_13321:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_13327;

  corral_source_split_13327:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_13328;

  corral_source_split_13328:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2379} __VERIFIER_assume($i11);
    goto corral_source_split_13329;

  corral_source_split_13329:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_13325;

  corral_source_split_13325:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_13315;

  corral_source_split_13315:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_13316;

  corral_source_split_13316:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_13323;

  corral_source_split_13323:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 641712);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 642744);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13331;

  corral_source_split_13331:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2380} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 2381} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2382} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_13332;

  corral_source_split_13332:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_13333;

  corral_source_split_13333:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_13337;

  corral_source_split_13337:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_13338;

  corral_source_split_13338:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2383} __VERIFIER_assume($i4);
    goto corral_source_split_13339;

  corral_source_split_13339:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_13335;

  corral_source_split_13335:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 643776);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 644808);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 645840);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 646872);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 647904);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13341;

  corral_source_split_13341:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2384} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2385} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2386} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_13342;

  corral_source_split_13342:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2387} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2388} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 2389} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_13343;

  corral_source_split_13343:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2390} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2391} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 2392} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_13344;

  corral_source_split_13344:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_13345;

  corral_source_split_13345:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_13350;

  corral_source_split_13350:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_13351;

  corral_source_split_13351:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2393} __VERIFIER_assume($i7);
    goto corral_source_split_13352;

  corral_source_split_13352:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_13353;

  corral_source_split_13353:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_13359;

  corral_source_split_13359:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_13360;

  corral_source_split_13360:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2394} __VERIFIER_assume($i11);
    goto corral_source_split_13361;

  corral_source_split_13361:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_13357;

  corral_source_split_13357:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_13347;

  corral_source_split_13347:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_13348;

  corral_source_split_13348:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_13355;

  corral_source_split_13355:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 648936);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 649968);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 651000);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 652032);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 653064);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 654096);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 655128);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 656160);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 657192);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13363;

  corral_source_split_13363:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2395} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2396} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_13364;

  corral_source_split_13364:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_13365;

  corral_source_split_13365:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2397} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_13366;

  corral_source_split_13366:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_13367;

  corral_source_split_13367:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_13368;

  corral_source_split_13368:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_13369;

  corral_source_split_13369:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_13376;

  corral_source_split_13376:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_13377;

  corral_source_split_13377:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_13378;

  corral_source_split_13378:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_13379;

  corral_source_split_13379:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_13371;

  corral_source_split_13371:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_13372;

  corral_source_split_13372:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2398} __VERIFIER_assume($i10);
    goto corral_source_split_13373;

  corral_source_split_13373:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_13374;

  corral_source_split_13374:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 658224);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13381;

  corral_source_split_13381:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2399} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 2400} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2401} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_13382;

  corral_source_split_13382:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 659256);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13384;

  corral_source_split_13384:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2402} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 2403} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2404} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_13385;

  corral_source_split_13385:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 660288);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13387;

  corral_source_split_13387:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2405} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 2406} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_13388;

  corral_source_split_13388:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 661320);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 662352);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2407} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2408} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 663384);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 664416);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13390;

  corral_source_split_13390:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_13391;

  corral_source_split_13391:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 665448);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_80: [ref]i8;
  var cmdloc_dummy_var_81: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2409} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 2410} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_13393;

  corral_source_split_13393:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2411} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2412} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_13394;

  corral_source_split_13394:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_13395;

  corral_source_split_13395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_13399;

  corral_source_split_13399:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_13400;

  corral_source_split_13400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2413} $p6 := malloc($i5);
    goto corral_source_split_13401;

  corral_source_split_13401:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_13402;

  corral_source_split_13402:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_80 := $M.0;
    call {:si_unique_call 2414} cmdloc_dummy_var_81 := $memset.i8(cmdloc_dummy_var_80, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_81;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13404;

  corral_source_split_13404:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_13397;

  corral_source_split_13397:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 666480);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 667512);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.34, $M.25, $M.31, $M.28, $M.49, $M.37, $M.39, $M.41, $M.43, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.73, $M.68, $M.74, $M.69, $M.75, $M.70, $M.76, $M.71, $M.38, $M.26, $M.27, $M.29, $M.30, $M.32, $M.33, $M.35, $M.36, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.48, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.1, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.104, $M.100, $M.0, $M.175, $M.103, $M.102, $M.64, $M.24, $M.20, $M.19, $M.18, $M.23, $M.17, $M.16, $M.15, $M.14, $M.11, $M.12, $M.13, $M.2, $M.176, $M.65;



implementation __SMACK_static_init()
{

  $bb0:
    $M.34 := 0;
    call {:si_unique_call 2415} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    $M.25 := 0;
    call {:si_unique_call 2416} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 2417} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    call {:si_unique_call 2418} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.28 := 0;
    call {:si_unique_call 2419} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    $M.49 := $0.ref;
    $M.37 := 0;
    call {:si_unique_call 2420} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 2421} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 2422} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 2423} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    $M.3 := 0;
    call {:si_unique_call 2424} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(0);
    $M.4 := $0.ref;
    $M.5 := 0;
    call {:si_unique_call 2425} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(0);
    $M.6 := $0.ref;
    $M.7 := 0;
    call {:si_unique_call 2426} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(0);
    $M.8 := $0.ref;
    $M.9 := 0;
    call {:si_unique_call 2427} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(0);
    $M.10 := $0.ref;
    $M.73 := $0.ref;
    $M.68 := 0;
    call {:si_unique_call 2428} {:cexpr "ldv_timer_4_0"} boogie_si_record_i32(0);
    $M.74 := $0.ref;
    $M.69 := 0;
    call {:si_unique_call 2429} {:cexpr "ldv_timer_4_1"} boogie_si_record_i32(0);
    $M.75 := $0.ref;
    $M.70 := 0;
    call {:si_unique_call 2430} {:cexpr "ldv_timer_4_2"} boogie_si_record_i32(0);
    $M.76 := $0.ref;
    $M.71 := 0;
    call {:si_unique_call 2431} {:cexpr "ldv_timer_4_3"} boogie_si_record_i32(0);
    $M.38 := $0.ref;
    $M.26 := 0;
    call {:si_unique_call 2432} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32(0);
    $M.27 := $0.ref;
    $M.29 := 0;
    call {:si_unique_call 2433} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32(0);
    $M.30 := $0.ref;
    $M.32 := 0;
    call {:si_unique_call 2434} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32(0);
    $M.33 := $0.ref;
    $M.35 := 0;
    call {:si_unique_call 2435} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32(0);
    $M.36 := $0.ref;
    $M.78 := $0.ref;
    $M.79 := $0.ref;
    $M.80 := $0.ref;
    $M.81 := $0.ref;
    $M.82 := $0.ref;
    $M.83 := 0;
    call {:si_unique_call 2436} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.84 := 0;
    call {:si_unique_call 2437} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 2438} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.85 := 0;
    call {:si_unique_call 2439} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.86 := 0;
    call {:si_unique_call 2440} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.87 := 0;
    call {:si_unique_call 2441} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.88 := 0;
    call {:si_unique_call 2442} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.89 := 0;
    call {:si_unique_call 2443} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.90 := 0;
    call {:si_unique_call 2444} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.91 := 0;
    call {:si_unique_call 2445} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.92 := 0;
    call {:si_unique_call 2446} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.93 := 0;
    call {:si_unique_call 2447} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.94 := 0;
    call {:si_unique_call 2448} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.95 := 0;
    call {:si_unique_call 2449} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.96 := 0;
    call {:si_unique_call 2450} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.97 := 0;
    call {:si_unique_call 2451} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.98 := 0;
    call {:si_unique_call 2452} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.99 := 0;
    call {:si_unique_call 2453} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.1 := 0;
    call {:si_unique_call 2454} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    call {:si_unique_call 2455} {:cexpr "pci_counter"} boogie_si_record_i32(0);
    $M.106 := $store.i32($M.106, __mod_pci__synclinkmp_pci_tbl_device_table, 0);
    $M.107 := $store.i32($M.107, $add.ref($add.ref($add.ref(__mod_pci__synclinkmp_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i32($M.108, $add.ref($add.ref($add.ref(__mod_pci__synclinkmp_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.109 := $store.i32($M.109, $add.ref($add.ref($add.ref(__mod_pci__synclinkmp_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.110 := $store.i32($M.110, $add.ref($add.ref($add.ref(__mod_pci__synclinkmp_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.111 := $store.i32($M.111, $add.ref($add.ref($add.ref(__mod_pci__synclinkmp_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.112 := $store.i64($M.112, $add.ref($add.ref($add.ref(__mod_pci__synclinkmp_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.106 := $store.i32($M.106, $add.ref($add.ref($add.ref(__mod_pci__synclinkmp_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.107 := $store.i32($M.107, $add.ref($add.ref($add.ref(__mod_pci__synclinkmp_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i32($M.108, $add.ref($add.ref($add.ref(__mod_pci__synclinkmp_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.109 := $store.i32($M.109, $add.ref($add.ref($add.ref(__mod_pci__synclinkmp_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.110 := $store.i32($M.110, $add.ref($add.ref($add.ref(__mod_pci__synclinkmp_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.111 := $store.i32($M.111, $add.ref($add.ref($add.ref(__mod_pci__synclinkmp_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.112 := $store.i64($M.112, $add.ref($add.ref($add.ref(__mod_pci__synclinkmp_pci_tbl_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.104 := 0;
    call {:si_unique_call 2456} {:cexpr "ttymajor"} boogie_si_record_i32(0);
    $M.100 := 0;
    call {:si_unique_call 2457} {:cexpr "break_on_load"} boogie_si_record_i8(0);
    $M.0 := $store.i32($M.0, synclinkmp_pci_tbl, 5056);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(synclinkmp_pci_tbl, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 48);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(synclinkmp_pci_tbl, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(synclinkmp_pci_tbl, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(synclinkmp_pci_tbl, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(synclinkmp_pci_tbl, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(synclinkmp_pci_tbl, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(synclinkmp_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(synclinkmp_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(synclinkmp_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(synclinkmp_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(synclinkmp_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(synclinkmp_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(synclinkmp_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.175 := $store.ref($M.175, synclinkmp_pci_driver, $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str.70);
    $M.175 := $store.ref($M.175, $add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), synclinkmp_pci_tbl);
    $M.175 := $store.ref($M.175, $add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), synclinkmp_init_one);
    $M.175 := $store.ref($M.175, $add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), synclinkmp_remove_one);
    $M.175 := $store.ref($M.175, $add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.175 := $store.i32($M.175, $add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(36, 1)), 0);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.175 := $store.i32($M.175, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.175 := $store.i32($M.175, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.175 := $store.i32($M.175, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.175 := $store.i32($M.175, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.175 := $store.i64($M.175, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref($add.ref(synclinkmp_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.103 := $0.ref;
    $M.102 := .str.113;
    $M.64 := .str.90;
    $M.24 := 4;
    call {:si_unique_call 2458} {:cexpr "dma_priority"} boogie_si_record_i8(4);
    $M.20 := 8273984;
    call {:si_unique_call 2459} {:cexpr "misc_ctrl_value"} boogie_si_record_i32(8273984);
    $M.19 := 8;
    call {:si_unique_call 2460} {:cexpr "read_ahead_count"} boogie_si_record_i32(8);
    $M.18 := 8388648;
    call {:si_unique_call 2461} {:cexpr "lcr1_brdr_value"} boogie_si_record_i32(8388648);
    $M.23 := 64;
    call {:si_unique_call 2462} {:cexpr "sca_pci_load_interval"} boogie_si_record_i32(64);
    $M.0 := $store.ref($M.0, hdlcdev_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(16, 1)), hdlcdev_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(24, 1)), hdlcdev_close);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(32, 1)), hdlc_start_xmit);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(80, 1)), hdlcdev_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(96, 1)), hdlc_change_mtu);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(112, 1)), hdlcdev_tx_timeout);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(424, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(432, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(440, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(480, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hdlcdev_ops, $mul.ref(0, 528)), $mul.ref(520, 1)), $0.ref);
    $M.17 := $0.ref;
    $M.16 := $store.i32($M.16, maxframe, 0);
    $M.16 := $store.i32($M.16, $add.ref($add.ref(maxframe, $mul.ref(0, 48)), $mul.ref(1, 4)), 0);
    $M.16 := $store.i32($M.16, $add.ref($add.ref(maxframe, $mul.ref(0, 48)), $mul.ref(2, 4)), 0);
    $M.16 := $store.i32($M.16, $add.ref($add.ref(maxframe, $mul.ref(0, 48)), $mul.ref(3, 4)), 0);
    $M.16 := $store.i32($M.16, $add.ref($add.ref(maxframe, $mul.ref(0, 48)), $mul.ref(4, 4)), 0);
    $M.16 := $store.i32($M.16, $add.ref($add.ref(maxframe, $mul.ref(0, 48)), $mul.ref(5, 4)), 0);
    $M.16 := $store.i32($M.16, $add.ref($add.ref(maxframe, $mul.ref(0, 48)), $mul.ref(6, 4)), 0);
    $M.16 := $store.i32($M.16, $add.ref($add.ref(maxframe, $mul.ref(0, 48)), $mul.ref(7, 4)), 0);
    $M.16 := $store.i32($M.16, $add.ref($add.ref(maxframe, $mul.ref(0, 48)), $mul.ref(8, 4)), 0);
    $M.16 := $store.i32($M.16, $add.ref($add.ref(maxframe, $mul.ref(0, 48)), $mul.ref(9, 4)), 0);
    $M.16 := $store.i32($M.16, $add.ref($add.ref(maxframe, $mul.ref(0, 48)), $mul.ref(10, 4)), 0);
    $M.16 := $store.i32($M.16, $add.ref($add.ref(maxframe, $mul.ref(0, 48)), $mul.ref(11, 4)), 0);
    $M.15 := 0;
    call {:si_unique_call 2463} {:cexpr "synclinkmp_device_count"} boogie_si_record_i32(0);
    $M.0 := $store.i64($M.0, default_params, 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(default_params, $mul.ref(0, 48)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(default_params, $mul.ref(0, 48)), $mul.ref(10, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(default_params, $mul.ref(0, 48)), $mul.ref(12, 1)), 3);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(default_params, $mul.ref(0, 48)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(default_params, $mul.ref(0, 48)), $mul.ref(24, 1)), $sub.i8(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref(default_params, $mul.ref(0, 48)), $mul.ref(26, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(default_params, $mul.ref(0, 48)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(default_params, $mul.ref(0, 48)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(default_params, $mul.ref(0, 48)), $mul.ref(32, 1)), 9600);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(default_params, $mul.ref(0, 48)), $mul.ref(40, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(default_params, $mul.ref(0, 48)), $mul.ref(41, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(default_params, $mul.ref(0, 48)), $mul.ref(42, 1)), 0);
    $M.0 := $store.ref($M.0, port_ops, carrier_raised);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(port_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), dtr_rts);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(port_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(port_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(port_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), $0.ref);
    $M.14 := $sub.i32(0, 1);
    call {:si_unique_call 2464} {:cexpr "synclinkmp_adapter_count"} boogie_si_record_i32($sub.i32(0, 1));
    $M.11 := 16;
    call {:si_unique_call 2465} {:cexpr "rx_active_fifo_level"} boogie_si_record_i8(16);
    $M.12 := 16;
    call {:si_unique_call 2466} {:cexpr "tx_active_fifo_level"} boogie_si_record_i8(16);
    $M.13 := 32;
    call {:si_unique_call 2467} {:cexpr "tx_negate_fifo_level"} boogie_si_record_i8(32);
    $M.2 := 0;
    call {:si_unique_call 2468} {:cexpr "debug_level"} boogie_si_record_i32(0);
    $M.0 := $store.i8($M.0, .str.1, 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(1, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(5, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(8, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(9, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(13, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(17, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(19, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(20, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(21, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(22, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(23, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(24, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(25, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(26, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(27, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(28, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(29, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(30, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(31, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(32, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(33, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(34, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(35, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(36, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(37, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(38, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(39, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(40, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(41, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(42, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(43, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(44, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(45, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(46, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(47, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(48, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(49, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(50, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(51, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(52, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(53, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(54, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(55, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(56, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(57, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(58, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(59, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(60, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(61, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(62, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(63, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(64, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(65, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(66, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(67, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(68, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(69, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(70, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(71, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(72, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(73, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(74, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(75, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(76, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(77, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(78, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(79, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(80, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(81, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(82, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(83, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(84, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(85, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(86, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(87, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(88, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(89, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(90, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(91, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(92, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(93, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(94, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(95, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(96, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(97, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(98, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(99, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(100, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(101, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(102, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(103, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(104, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(105, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(106, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(107, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(108, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(109, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(110, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(111, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(112, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(113, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(114, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(115, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(116, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(117, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(118, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(119, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(120, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(121, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(122, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(123, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(124, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(125, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(126, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(127, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(128, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(129, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(130, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(131, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(132, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(133, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(134, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(135, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(136, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(137, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(138, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(139, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(140, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(141, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(142, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(143, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(144, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(145, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(146, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(147, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(148, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(149, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(150, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(151, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(152, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(153, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(154, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(155, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(156, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(157, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(158, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(159, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(160, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(161, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(162, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(163, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(164, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(165, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(166, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(167, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(168, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(169, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(170, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(171, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(172, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(173, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(174, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(175, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(176, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(177, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(178, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(179, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(180, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(181, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(182, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(183, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(184, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(185, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(186, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(187, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(188, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(189, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(190, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(191, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(192, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(193, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(194, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(195, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(196, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(197, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(198, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(199, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(200, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(201, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(202, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 204)), $mul.ref(203, 1)), 0);
    $M.0 := $store.i8($M.0, .str.50, 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(1, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(5, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(6, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(7, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(8, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(9, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(10, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(13, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(18, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(21, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(22, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(23, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(24, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(25, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(26, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(28, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(29, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(30, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(31, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, .str.70, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 11)), $mul.ref(1, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 11)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 11)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 11)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 11)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 11)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 11)), $mul.ref(7, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 11)), $mul.ref(8, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 11)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.14, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 3)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, .str.15, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 4)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 4)), $mul.ref(2, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.176 := $store.i8($M.176, .str.65, 116);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(.str.65, $mul.ref(0, 12)), $mul.ref(1, 1)), 116);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(.str.65, $mul.ref(0, 12)), $mul.ref(2, 1)), 121);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(.str.65, $mul.ref(0, 12)), $mul.ref(3, 1)), 83);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(.str.65, $mul.ref(0, 12)), $mul.ref(4, 1)), 76);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(.str.65, $mul.ref(0, 12)), $mul.ref(5, 1)), 77);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(.str.65, $mul.ref(0, 12)), $mul.ref(6, 1)), 37);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(.str.65, $mul.ref(0, 12)), $mul.ref(7, 1)), 100);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(.str.65, $mul.ref(0, 12)), $mul.ref(8, 1)), 112);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(.str.65, $mul.ref(0, 12)), $mul.ref(9, 1)), 37);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(.str.65, $mul.ref(0, 12)), $mul.ref(10, 1)), 100);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(.str.65, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.65 := $store.i8($M.65, .str.92, 124);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.92, $mul.ref(0, 5)), $mul.ref(1, 1)), 82);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.92, $mul.ref(0, 5)), $mul.ref(2, 1)), 84);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.92, $mul.ref(0, 5)), $mul.ref(3, 1)), 83);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.92, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.65 := $store.i8($M.65, .str.93, 124);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.93, $mul.ref(0, 5)), $mul.ref(1, 1)), 67);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.93, $mul.ref(0, 5)), $mul.ref(2, 1)), 84);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.93, $mul.ref(0, 5)), $mul.ref(3, 1)), 83);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.93, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.65 := $store.i8($M.65, .str.94, 124);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.94, $mul.ref(0, 5)), $mul.ref(1, 1)), 68);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.94, $mul.ref(0, 5)), $mul.ref(2, 1)), 84);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.94, $mul.ref(0, 5)), $mul.ref(3, 1)), 82);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.94, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.65 := $store.i8($M.65, .str.95, 124);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.95, $mul.ref(0, 5)), $mul.ref(1, 1)), 68);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.95, $mul.ref(0, 5)), $mul.ref(2, 1)), 83);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.95, $mul.ref(0, 5)), $mul.ref(3, 1)), 82);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.95, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.65 := $store.i8($M.65, .str.96, 124);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.96, $mul.ref(0, 4)), $mul.ref(1, 1)), 67);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.96, $mul.ref(0, 4)), $mul.ref(2, 1)), 68);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.96, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.65 := $store.i8($M.65, .str.97, 124);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.97, $mul.ref(0, 4)), $mul.ref(1, 1)), 82);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.97, $mul.ref(0, 4)), $mul.ref(2, 1)), 73);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.97, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.116, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 7)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 7)), $mul.ref(2, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 7)), $mul.ref(3, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 7)), $mul.ref(4, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 7)), $mul.ref(5, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    call {:si_unique_call 2469} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 668544);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 669576);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 670608);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i16);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i16)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 671640);

procedure devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 672672);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2470} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 673704);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 674736);

procedure devirtbounce.6(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.22, $M.45, $M.46, $M.3, $M.5, $M.7, $M.9, $CurrAddr, $M.4, $M.6, $M.8, $M.10, $M.38, $M.37, $M.39, $M.41, $M.43;



implementation devirtbounce.6(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i5 := $eq.ref(synclinkmp_interrupt, $p0);
    assume {:branchcond $i5} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1);
    $i4 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    call {:si_unique_call 2471} $i1 := __builtinx_object_size();
    $r := $i1;
    return;

  $bb3:
    assume $i5 == 1;
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2472} $i3 := synclinkmp_interrupt(arg, $p2);
    $r := $i3;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.34, $M.25, $M.31, $M.28, $M.49, $M.37, $M.39, $M.41, $M.43, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.73, $M.68, $M.74, $M.69, $M.75, $M.70, $M.76, $M.71, $M.38, $M.26, $M.27, $M.29, $M.30, $M.32, $M.33, $M.35, $M.36, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.48, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.1, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.104, $M.100, $M.0, $M.175, $M.103, $M.102, $M.64, $M.24, $M.20, $M.19, $M.18, $M.23, $M.17, $M.16, $M.15, $M.14, $M.11, $M.12, $M.13, $M.2, $M.176, $M.65, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2473} __SMACK_static_init();
    call {:si_unique_call 2474} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.66, $M.83, $M.3, $M.5, $M.7, $M.9, $M.84, $M.48, $M.85, $M.37, $M.39, $M.41, $M.43, $M.86, $M.87, $M.88, $M.68, $M.69, $M.70, $M.71, $M.89, $M.90, $M.91, $M.92, $M.0, $M.93, $M.1, $M.94, $M.95, $M.14, $M.96, $M.97, $M.25, $M.98, $M.81, $M.82, $M.78, $M.79, $M.99, $M.34, $M.31, $M.28, $M.49, $M.4, $M.6, $M.8, $M.10, $M.73, $M.74, $M.75, $M.76, $M.38, $M.26, $M.27, $M.29, $M.30, $M.32, $M.33, $M.35, $M.36, $M.80, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.104, $M.100, $M.175, $M.103, $M.102, $M.64, $M.24, $M.20, $M.19, $M.18, $M.23, $M.17, $M.16, $M.15, $M.11, $M.12, $M.13, $M.2, $M.176, $M.65, $CurrAddr, $M.22, $M.51, $M.52, $M.53, $M.54, $M.55, $M.50, $M.62, $M.63, $M.59, $M.61, $M.60, $M.56, $M.58, $M.57, $M.47, $M.21, $M.45, $M.46;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation rx_start_loop_$bb9(in_$p0: ref, in_$p20: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i23: i32, in_vslice_dummy_var_91: i8) returns (out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i23: i32, out_vslice_dummy_var_91: i8)
{

  entry:
    out_$p24, out_$p25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i32, out_$i33, out_$i34, out_$i23, out_vslice_dummy_var_91 := in_$p24, in_$p25, in_$i26, in_$p28, in_$i29, in_$i30, in_$i32, in_$i33, in_$i34, in_$i23, in_vslice_dummy_var_91;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1425;

  $bb14:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i23 := out_$i32;
    goto $bb14_dummy;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    out_$i34 := $ult.i32(out_$i32, out_$i33);
    goto corral_source_split_1441;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, in_$p20);
    goto corral_source_split_1440;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i23, 1);
    call {:si_unique_call 252} {:cexpr "i"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_1439;

  $bb12:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} out_vslice_dummy_var_91 := read_status_reg(in_$p0);
    goto corral_source_split_1437;

  $bb11:
    assume out_$i30 == 1;
    goto corral_source_split_1436;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 0);
    goto corral_source_split_1434;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    out_$i29 := $and.i32(out_$i23, 3);
    goto corral_source_split_1433;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p28, $sub.i8(0, 1));
    goto corral_source_split_1432;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 10)), $mul.ref(8, 1));
    goto corral_source_split_1431;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    goto corral_source_split_1430;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i23);
    goto corral_source_split_1429;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_1428;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1856, 1));
    goto corral_source_split_1427;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p24, out_$p25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i32, out_$i33, out_$i34, out_$i23, out_vslice_dummy_var_91 := rx_start_loop_$bb9(in_$p0, in_$p20, out_$p24, out_$p25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i32, out_$i33, out_$i34, out_$i23, out_vslice_dummy_var_91);
    return;

  exit:
    return;
}



procedure rx_start_loop_$bb9(in_$p0: ref, in_$p20: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i23: i32, in_vslice_dummy_var_91: i8) returns (out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i23: i32, out_vslice_dummy_var_91: i8);
  modifies $M.0;



implementation set_rate_loop_$bb15(in_$i16: i32, in_$i17: i32, in_$i18: i32, in_$i19: i8, in_$i20: i1, in_$i14: i8, in_$i15: i32, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i8, in_$i21: i32, in_$i22: i8) returns (out_$i16: i32, out_$i17: i32, out_$i18: i32, out_$i19: i8, out_$i20: i1, out_$i14: i8, out_$i15: i32, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i8, out_$i21: i32, out_$i22: i8)
{

  entry:
    out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i14, out_$i15, out_$i23, out_$i24, out_$i25, out_$i26, out_$i21, out_$i22 := in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i14, in_$i15, in_$i23, in_$i24, in_$i25, in_$i26, in_$i21, in_$i22;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1562;

  $bb17:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i14, out_$i15 := out_$i19, out_$i16;
    goto $bb17_dummy;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    out_$i21, out_$i22 := out_$i16, out_$i19;
    assume true;
    goto $bb17;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    out_$i20 := $ugt.i32(out_$i16, 256);
    goto corral_source_split_1570;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    out_$i19 := $trunc.i32.i8(out_$i18);
    call {:si_unique_call 269} {:cexpr "BRValue"} boogie_si_record_i8(out_$i19);
    goto corral_source_split_1569;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i17, 1);
    goto corral_source_split_1568;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i8.i32(out_$i14);
    goto corral_source_split_1567;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i16 := $lshr.i32(out_$i15, 1);
    call {:si_unique_call 268} {:cexpr "TMCValue"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_1566;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb19:
    assume out_$i24 == 1;
    goto corral_source_split_1574;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    out_$i25, out_$i26 := out_$i15, out_$i14;
    assume true;
    goto $bb19;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    out_$i24 := $ule.i32(out_$i23, 9);
    goto corral_source_split_1564;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i8.i32(out_$i14);
    goto corral_source_split_1563;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i14, out_$i15, out_$i23, out_$i24, out_$i25, out_$i26, out_$i21, out_$i22 := set_rate_loop_$bb15(out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i14, out_$i15, out_$i23, out_$i24, out_$i25, out_$i26, out_$i21, out_$i22);
    return;

  exit:
    return;
}



procedure set_rate_loop_$bb15(in_$i16: i32, in_$i17: i32, in_$i18: i32, in_$i19: i8, in_$i20: i1, in_$i14: i8, in_$i15: i32, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i8, in_$i21: i32, in_$i22: i8) returns (out_$i16: i32, out_$i17: i32, out_$i18: i32, out_$i19: i8, out_$i20: i1, out_$i14: i8, out_$i15: i32, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i8, out_$i21: i32, out_$i22: i8);



implementation {:SIextraRecBound 4} device_init_loop_$bb18(in_$p2: ref, in_$p3: ref, in_$i30: i64, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i29: i32, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8, in_cmdloc_dummy_var_6: [ref]i8, in_vslice_dummy_var_100: ref) returns (out_$i30: i64, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i29: i32, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8, out_cmdloc_dummy_var_6: [ref]i8, out_vslice_dummy_var_100: ref)
{

  entry:
    out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i44, out_$p45, out_$p46, out_$p48, out_$p49, out_$i50, out_$i51, out_$i29, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_vslice_dummy_var_100 := in_$i30, in_$p31, in_$p32, in_$p33, in_$p34, in_$p35, in_$i36, in_$p37, in_$p38, in_$i39, in_$p40, in_$p41, in_$p42, in_$i44, in_$p45, in_$p46, in_$p48, in_$p49, in_$i50, in_$i51, in_$i29, in_cmdloc_dummy_var_4, in_cmdloc_dummy_var_5, in_cmdloc_dummy_var_6, in_vslice_dummy_var_100;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_2370;

  $bb20:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := out_$i50;
    goto $bb20_dummy;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    out_$i51 := $sle.i32(out_$i50, 3);
    goto corral_source_split_2395;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i29, 1);
    call {:si_unique_call 414} {:cexpr "port"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_2394;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} __raw_spin_lock_init(out_$p49, .str.58, in_$p3);
    goto corral_source_split_2393;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_2392;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(0, 6384)), $mul.ref(1640, 1)), $mul.ref(0, 1));
    goto corral_source_split_2391;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_2390;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p2, $mul.ref(0, 32)), $mul.ref(out_$i44, 8));
    goto corral_source_split_2389;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i29);
    goto corral_source_split_2388;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} out_vslice_dummy_var_100 := spinlock_check(out_$p42);
    goto corral_source_split_2387;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p41, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_2386;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_2385;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p2, $mul.ref(0, 32)), $mul.ref(out_$i39, 8));
    goto corral_source_split_2384;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i29);
    goto corral_source_split_2383;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} add_device(out_$p38);
    goto corral_source_split_2382;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_2381;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p2, $mul.ref(0, 32)), $mul.ref(out_$i36, 8));
    goto corral_source_split_2380;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    out_$i36 := $sext.i32.i64(out_$i29);
    goto corral_source_split_2379;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_4 := $M.0;
    out_cmdloc_dummy_var_5 := $M.0;
    call {:si_unique_call 410} out_cmdloc_dummy_var_6 := $memcpy.i8(out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_$p34, out_$p35, 32, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_6;
    goto corral_source_split_2378;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_2377;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_2376;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p32, $mul.ref(0, 6384)), $mul.ref(6048, 1));
    goto corral_source_split_2375;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_2374;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p2, $mul.ref(0, 32)), $mul.ref(out_$i30, 8));
    goto corral_source_split_2373;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i29);
    goto corral_source_split_2372;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i44, out_$p45, out_$p46, out_$p48, out_$p49, out_$i50, out_$i51, out_$i29, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_vslice_dummy_var_100 := device_init_loop_$bb18(in_$p2, in_$p3, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i44, out_$p45, out_$p46, out_$p48, out_$p49, out_$i50, out_$i51, out_$i29, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_vslice_dummy_var_100);
    return;

  exit:
    return;
}



procedure device_init_loop_$bb18(in_$p2: ref, in_$p3: ref, in_$i30: i64, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i29: i32, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8, in_cmdloc_dummy_var_6: [ref]i8, in_vslice_dummy_var_100: ref) returns (out_$i30: i64, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i29: i32, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8, out_cmdloc_dummy_var_6: [ref]i8, out_vslice_dummy_var_100: ref);
  modifies $M.0, $M.15, $M.17, $M.48, $M.49, $CurrAddr;



implementation device_init_loop_$bb8(in_$p2: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$i16: i32) returns (out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$i16: i32)
{

  entry:
    out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i16 := in_$i17, in_$p18, in_$p19, in_$p20, in_$i21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$i16;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2350;

  $bb10:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i25;
    goto $bb10_dummy;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    out_$i26 := $sge.i32(out_$i25, 0);
    goto corral_source_split_2363;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    out_$i25 := $sub.i32(out_$i16, 1);
    call {:si_unique_call 408} {:cexpr "port"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_2362;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} kfree(out_$p24);
    goto corral_source_split_2361;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_2360;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_2359;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p2, $mul.ref(0, 32)), $mul.ref(out_$i21, 8));
    goto corral_source_split_2358;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i16);
    goto corral_source_split_2357;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} tty_port_destroy(out_$p20);
    goto corral_source_split_2356;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 6384)), $mul.ref(16, 1));
    goto corral_source_split_2355;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_2354;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p2, $mul.ref(0, 32)), $mul.ref(out_$i17, 8));
    goto corral_source_split_2353;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    goto corral_source_split_2352;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i16 := device_init_loop_$bb8(in_$p2, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i16);
    return;

  exit:
    return;
}



procedure device_init_loop_$bb8(in_$p2: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$i16: i32) returns (out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$i16: i32);



implementation device_init_loop_$bb1(in_$i0: i32, in_$p1: ref, in_$p2: ref, in_$p5: ref, in_$i6: i64, in_$p7: ref, in_$i8: i64, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$i13: i32, in_$i27: i32, in_$i28: i1, in_$i4: i32) returns (out_$p5: ref, out_$i6: i64, out_$p7: ref, out_$i8: i64, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$i13: i32, out_$i27: i32, out_$i28: i1, out_$i4: i32)
{

  entry:
    out_$p5, out_$i6, out_$p7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i27, out_$i28, out_$i4 := in_$p5, in_$i6, in_$p7, in_$i8, in_$p9, in_$p10, in_$i11, in_$i12, in_$i13, in_$i27, in_$i28, in_$i4;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2332;

  $bb15:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i27;
    goto $bb15_dummy;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    out_$i28 := $sle.i32(out_$i27, 3);
    goto corral_source_split_2368;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i4, 1);
    call {:si_unique_call 409} {:cexpr "port"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_2367;

  $bb4:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i4;
    assume true;
    goto $bb4;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i64(out_$i11, 0);
    goto corral_source_split_2342;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_2341;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_2340;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p2, $mul.ref(0, 32)), $mul.ref(out_$i8, 8));
    goto corral_source_split_2339;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i4);
    goto corral_source_split_2338;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p7, out_$p5);
    goto corral_source_split_2337;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p2, $mul.ref(0, 32)), $mul.ref(out_$i6, 8));
    goto corral_source_split_2336;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i4);
    goto corral_source_split_2335;

  SeqInstr_21:
    goto corral_source_split_2334;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} out_$p5 := alloc_dev(in_$i0, out_$i4, in_$p1);
    goto SeqInstr_20;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p5, out_$i6, out_$p7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i27, out_$i28, out_$i4 := device_init_loop_$bb1(in_$i0, in_$p1, in_$p2, out_$p5, out_$i6, out_$p7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i27, out_$i28, out_$i4);
    return;

  exit:
    return;
}



procedure device_init_loop_$bb1(in_$i0: i32, in_$p1: ref, in_$p2: ref, in_$p5: ref, in_$i6: i64, in_$p7: ref, in_$i8: i64, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$i13: i32, in_$i27: i32, in_$i28: i1, in_$i4: i32) returns (out_$p5: ref, out_$i6: i64, out_$p7: ref, out_$i8: i64, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$i13: i32, out_$i27: i32, out_$i28: i1, out_$i4: i32);
  modifies $M.0, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $CurrAddr, assertsPassed;



implementation add_device_loop_$bb13(in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p37: ref, in_$p44: ref) returns (out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p37: ref, out_$p44: ref)
{

  entry:
    out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p37, out_$p44 := in_$p38, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p37, in_$p44;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2783;

  $bb15:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$p37 := out_$p39;
    goto $bb15_dummy;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    out_$p44 := out_$p39;
    assume true;
    goto $bb15;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_2790;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_2789;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_2788;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p39, $mul.ref(0, 6384)), $mul.ref(1504, 1));
    goto corral_source_split_2787;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_2786;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p37, $mul.ref(0, 6384)), $mul.ref(1504, 1));
    goto corral_source_split_2785;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p37, out_$p44 := add_device_loop_$bb13(out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p37, out_$p44);
    return;

  exit:
    return;
}



procedure add_device_loop_$bb13(in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p37: ref, in_$p44: ref) returns (out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p37: ref, out_$p44: ref);



implementation synclinkmp_interrupt_loop_$bb32(in_$p2: ref, in_$i13: i8, in_$i16: i8, in_$i49: i8, in_$i50: i8, in_$p64: ref, in_$i68: i64, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$i75: i1, in_$i76: i8, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i8, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$i85: i32, in_$i86: i1, in_$i87: i64, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$i96: i64, in_$p98: ref, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i103: i32, in_$i104: i1, in_$i105: i64, in_$p107: ref, in_$p108: ref, in_$i109: i32, in_$i110: i32, in_$i111: i32, in_$i112: i32, in_$i113: i1, in_$i114: i64, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$i120: i32, in_$i121: i32, in_$i122: i1, in_$i123: i64, in_$p125: ref, in_$p126: ref, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$i130: i32, in_$i131: i1, in_$i132: i64, in_$p134: ref, in_$p135: ref, in_$i136: i32, in_$i137: i32, in_$i138: i32, in_$i139: i32, in_$i140: i1, in_$i141: i64, in_$p143: ref, in_$p144: ref, in_$i145: i32, in_$i146: i32, in_$i147: i32, in_$i148: i32, in_$i149: i1, in_$i150: i64, in_$p152: ref, in_$p153: ref, in_$i74: i32, in_$i154: i32, in_$i155: i32, in_$i156: i1, in_$i67: i32) returns (out_$i68: i64, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$i75: i1, out_$i76: i8, out_$i77: i8, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i8, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$i85: i32, out_$i86: i1, out_$i87: i64, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$i96: i64, out_$p98: ref, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i103: i32, out_$i104: i1, out_$i105: i64, out_$p107: ref, out_$p108: ref, out_$i109: i32, out_$i110: i32, out_$i111: i32, out_$i112: i32, out_$i113: i1, out_$i114: i64, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$i120: i32, out_$i121: i32, out_$i122: i1, out_$i123: i64, out_$p125: ref, out_$p126: ref, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$i130: i32, out_$i131: i1, out_$i132: i64, out_$p134: ref, out_$p135: ref, out_$i136: i32, out_$i137: i32, out_$i138: i32, out_$i139: i32, out_$i140: i1, out_$i141: i64, out_$p143: ref, out_$p144: ref, out_$i145: i32, out_$i146: i32, out_$i147: i32, out_$i148: i32, out_$i149: i1, out_$i150: i64, out_$p152: ref, out_$p153: ref, out_$i74: i32, out_$i154: i32, out_$i155: i32, out_$i156: i1, out_$i67: i32)
{

  entry:
    out_$i68, out_$p70, out_$p71, out_$i72, out_$i73, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$p152, out_$p153, out_$i74, out_$i154, out_$i155, out_$i156, out_$i67 := in_$i68, in_$p70, in_$p71, in_$i72, in_$i73, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$p89, in_$p90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$p98, in_$p99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$p107, in_$p108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$p116, in_$p117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$p125, in_$p126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$p134, in_$p135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$p143, in_$p144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$p152, in_$p153, in_$i74, in_$i154, in_$i155, in_$i156, in_$i67;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_3267;

  $bb65:
    assume out_$i156 == 1;
    assume {:verifier.code 0} true;
    out_$i67 := out_$i154;
    goto $bb65_dummy;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    out_$i156 := $ugt.i32(out_$i155, out_$i154);
    goto corral_source_split_3280;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    out_$i155 := $load.i32($M.0, in_$p64);
    goto corral_source_split_3279;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    out_$i154 := $add.i32(out_$i74, 1);
    call {:si_unique_call 506} {:cexpr "i"} boogie_si_record_i32(out_$i154);
    goto corral_source_split_3278;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_3277;

  $bb64:
    assume {:verifier.code 0} true;
    out_$i74 := out_$i67;
    goto $bb36;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    out_$i74 := out_$i67;
    goto $bb36;

  $bb34:
    assume out_$i73 == 1;
    goto corral_source_split_3275;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i64(out_$i72, 0);
    goto corral_source_split_3273;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    out_$i72 := $p2i.ref.i64(out_$p71);
    goto corral_source_split_3272;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.0, out_$p70);
    goto corral_source_split_3271;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(out_$i68, 8));
    goto corral_source_split_3270;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i32.i64(out_$i67);
    goto corral_source_split_3269;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb63:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} isr_txdmaok(out_$p153);
    goto corral_source_split_3385;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    out_$p153 := $load.ref($M.0, out_$p152);
    goto corral_source_split_3384;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(out_$i150, 8));
    goto corral_source_split_3383;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    out_$i150 := $zext.i32.i64(out_$i67);
    goto corral_source_split_3382;

  $bb62:
    assume out_$i149 == 1;
    goto corral_source_split_3381;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    out_$i149 := $ne.i32(out_$i148, 0);
    goto corral_source_split_3379;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    out_$i148 := $and.i32(out_$i145, out_$i147);
    goto corral_source_split_3378;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    out_$i147 := $shl.i32(8, out_$i146);
    goto corral_source_split_3377;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    out_$i146 := $zext.i8.i32(out_$i81);
    goto corral_source_split_3376;

  $bb61:
    assume {:verifier.code 0} true;
    out_$i145 := $zext.i8.i32(out_$i76);
    goto corral_source_split_3375;

  $bb60:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} isr_txdmaerror(out_$p144);
    goto corral_source_split_3373;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    out_$p144 := $load.ref($M.0, out_$p143);
    goto corral_source_split_3372;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(out_$i141, 8));
    goto corral_source_split_3371;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    out_$i141 := $zext.i32.i64(out_$i67);
    goto corral_source_split_3370;

  $bb59:
    assume out_$i140 == 1;
    goto corral_source_split_3369;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    out_$i140 := $ne.i32(out_$i139, 0);
    goto corral_source_split_3367;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    out_$i139 := $and.i32(out_$i136, out_$i138);
    goto corral_source_split_3366;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    out_$i138 := $shl.i32(4, out_$i137);
    goto corral_source_split_3365;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    out_$i137 := $zext.i8.i32(out_$i81);
    goto corral_source_split_3364;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i136 := $zext.i8.i32(out_$i76);
    goto corral_source_split_3363;

  $bb57:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} isr_rxdmaok(out_$p135);
    goto corral_source_split_3361;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    out_$p135 := $load.ref($M.0, out_$p134);
    goto corral_source_split_3360;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(out_$i132, 8));
    goto corral_source_split_3359;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    out_$i132 := $zext.i32.i64(out_$i67);
    goto corral_source_split_3358;

  $bb56:
    assume out_$i131 == 1;
    goto corral_source_split_3357;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    out_$i131 := $ne.i32(out_$i130, 0);
    goto corral_source_split_3355;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    out_$i130 := $and.i32(out_$i127, out_$i129);
    goto corral_source_split_3354;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    out_$i129 := $shl.i32(2, out_$i128);
    goto corral_source_split_3353;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.i8.i32(out_$i81);
    goto corral_source_split_3352;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i127 := $zext.i8.i32(out_$i76);
    goto corral_source_split_3351;

  $bb54:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} isr_rxdmaerror(out_$p126);
    goto corral_source_split_3349;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    out_$p126 := $load.ref($M.0, out_$p125);
    goto corral_source_split_3348;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(out_$i123, 8));
    goto corral_source_split_3347;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i32.i64(out_$i67);
    goto corral_source_split_3346;

  $bb53:
    assume out_$i122 == 1;
    goto corral_source_split_3345;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i32(out_$i121, 0);
    goto corral_source_split_3343;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    out_$i121 := $and.i32(out_$i120, 1);
    goto corral_source_split_3342;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    out_$i120 := $ashr.i32(out_$i118, out_$i119);
    goto corral_source_split_3341;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    out_$i119 := $zext.i8.i32(out_$i81);
    goto corral_source_split_3340;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i118 := $zext.i8.i32(out_$i76);
    goto corral_source_split_3339;

  $bb51:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} isr_txint(out_$p117);
    goto corral_source_split_3337;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    out_$p117 := $load.ref($M.0, out_$p116);
    goto corral_source_split_3336;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(out_$i114, 8));
    goto corral_source_split_3335;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    out_$i114 := $zext.i32.i64(out_$i67);
    goto corral_source_split_3334;

  $bb50:
    assume out_$i113 == 1;
    goto corral_source_split_3333;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    out_$i113 := $ne.i32(out_$i112, 0);
    goto corral_source_split_3331;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    out_$i112 := $and.i32(out_$i109, out_$i111);
    goto corral_source_split_3330;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    out_$i111 := $shl.i32(8, out_$i110);
    goto corral_source_split_3329;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    out_$i110 := $zext.i8.i32(out_$i81);
    goto corral_source_split_3328;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i8.i32(out_$i77);
    goto corral_source_split_3327;

  $bb48:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} isr_rxint(out_$p108);
    goto corral_source_split_3325;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    out_$p108 := $load.ref($M.0, out_$p107);
    goto corral_source_split_3324;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(out_$i105, 8));
    goto corral_source_split_3323;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    out_$i105 := $zext.i32.i64(out_$i67);
    goto corral_source_split_3322;

  $bb47:
    assume out_$i104 == 1;
    goto corral_source_split_3321;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    out_$i104 := $ne.i32(out_$i103, 0);
    goto corral_source_split_3319;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    out_$i103 := $and.i32(out_$i100, out_$i102);
    goto corral_source_split_3318;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    out_$i102 := $shl.i32(4, out_$i101);
    goto corral_source_split_3317;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    out_$i101 := $zext.i8.i32(out_$i81);
    goto corral_source_split_3316;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i100 := $zext.i8.i32(out_$i77);
    goto corral_source_split_3315;

  $bb45:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} isr_txrdy(out_$p99);
    goto corral_source_split_3313;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    out_$p99 := $load.ref($M.0, out_$p98);
    goto corral_source_split_3312;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(out_$i96, 8));
    goto corral_source_split_3311;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i32.i64(out_$i67);
    goto corral_source_split_3310;

  $bb44:
    assume out_$i95 == 1;
    goto corral_source_split_3309;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    out_$i95 := $ne.i32(out_$i94, 0);
    goto corral_source_split_3307;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    out_$i94 := $and.i32(out_$i91, out_$i93);
    goto corral_source_split_3306;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    out_$i93 := $shl.i32(2, out_$i92);
    goto corral_source_split_3305;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    out_$i92 := $zext.i8.i32(out_$i81);
    goto corral_source_split_3304;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i91 := $zext.i8.i32(out_$i77);
    goto corral_source_split_3303;

  $bb42:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} isr_rxrdy(out_$p90);
    goto corral_source_split_3301;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.0, out_$p89);
    goto corral_source_split_3300;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(out_$i87, 8));
    goto corral_source_split_3299;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    out_$i87 := $zext.i32.i64(out_$i67);
    goto corral_source_split_3298;

  $bb41:
    assume out_$i86 == 1;
    goto corral_source_split_3297;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i32(out_$i85, 0);
    goto corral_source_split_3295;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    out_$i85 := $and.i32(out_$i84, 1);
    goto corral_source_split_3294;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    out_$i84 := $ashr.i32(out_$i82, out_$i83);
    goto corral_source_split_3293;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i8.i32(out_$i81);
    goto corral_source_split_3292;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i8.i32(out_$i77);
    goto corral_source_split_3291;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    out_$i81 := $trunc.i32.i8(out_$i80);
    call {:si_unique_call 507} {:cexpr "shift"} boogie_si_record_i8(out_$i81);
    goto corral_source_split_3290;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    out_$i80 := (if out_$i79 == 1 then 4 else 0);
    goto corral_source_split_3289;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_3288;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    out_$i78 := $and.i32(out_$i67, 1);
    goto corral_source_split_3287;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3286;

  $bb39:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$i76, out_$i77 := in_$i50, in_$i49;
    goto $bb40;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    out_$i76, out_$i77 := in_$i16, in_$i13;
    goto $bb40;

  $bb38:
    assume out_$i75 == 1;
    goto corral_source_split_3284;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i75 := $ule.i32(out_$i67, 1);
    goto corral_source_split_3282;

  $bb35:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb65_dummy:
    call {:si_unique_call 1} out_$i68, out_$p70, out_$p71, out_$i72, out_$i73, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$p152, out_$p153, out_$i74, out_$i154, out_$i155, out_$i156, out_$i67 := synclinkmp_interrupt_loop_$bb32(in_$p2, in_$i13, in_$i16, in_$i49, in_$i50, in_$p64, out_$i68, out_$p70, out_$p71, out_$i72, out_$i73, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$p152, out_$p153, out_$i74, out_$i154, out_$i155, out_$i156, out_$i67);
    return;

  exit:
    return;
}



procedure synclinkmp_interrupt_loop_$bb32(in_$p2: ref, in_$i13: i8, in_$i16: i8, in_$i49: i8, in_$i50: i8, in_$p64: ref, in_$i68: i64, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$i75: i1, in_$i76: i8, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i8, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$i85: i32, in_$i86: i1, in_$i87: i64, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$i96: i64, in_$p98: ref, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i103: i32, in_$i104: i1, in_$i105: i64, in_$p107: ref, in_$p108: ref, in_$i109: i32, in_$i110: i32, in_$i111: i32, in_$i112: i32, in_$i113: i1, in_$i114: i64, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$i120: i32, in_$i121: i32, in_$i122: i1, in_$i123: i64, in_$p125: ref, in_$p126: ref, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$i130: i32, in_$i131: i1, in_$i132: i64, in_$p134: ref, in_$p135: ref, in_$i136: i32, in_$i137: i32, in_$i138: i32, in_$i139: i32, in_$i140: i1, in_$i141: i64, in_$p143: ref, in_$p144: ref, in_$i145: i32, in_$i146: i32, in_$i147: i32, in_$i148: i32, in_$i149: i1, in_$i150: i64, in_$p152: ref, in_$p153: ref, in_$i74: i32, in_$i154: i32, in_$i155: i32, in_$i156: i1, in_$i67: i32) returns (out_$i68: i64, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$i75: i1, out_$i76: i8, out_$i77: i8, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i8, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$i85: i32, out_$i86: i1, out_$i87: i64, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$i96: i64, out_$p98: ref, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i103: i32, out_$i104: i1, out_$i105: i64, out_$p107: ref, out_$p108: ref, out_$i109: i32, out_$i110: i32, out_$i111: i32, out_$i112: i32, out_$i113: i1, out_$i114: i64, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$i120: i32, out_$i121: i32, out_$i122: i1, out_$i123: i64, out_$p125: ref, out_$p126: ref, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$i130: i32, out_$i131: i1, out_$i132: i64, out_$p134: ref, out_$p135: ref, out_$i136: i32, out_$i137: i32, out_$i138: i32, out_$i139: i32, out_$i140: i1, out_$i141: i64, out_$p143: ref, out_$p144: ref, out_$i145: i32, out_$i146: i32, out_$i147: i32, out_$i148: i32, out_$i149: i1, out_$i150: i64, out_$p152: ref, out_$p153: ref, out_$i74: i32, out_$i154: i32, out_$i155: i32, out_$i156: i1, out_$i67: i32);
  modifies $M.0, $M.3, $M.5, $M.7, $M.9, $M.22, $M.4, $M.6, $M.8, $M.10, $CurrAddr, $M.45, $M.46;



implementation synclinkmp_interrupt_loop_$bb83(in_$p2: ref, in_$p181: ref, in_$i185: i64, in_$p187: ref, in_$p188: ref, in_$i189: i64, in_$i190: i1, in_$p192: ref, in_$i193: i32, in_$i194: i1, in_$p195: ref, in_$i196: i32, in_$i197: i1, in_$p198: ref, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$i202: i8, in_$i203: i1, in_$p204: ref, in_$i205: i8, in_$i206: i1, in_$i207: i32, in_$i208: i1, in_$p209: ref, in_$p210: ref, in_$p212: ref, in_$p214: ref, in_$i215: i32, in_$i216: i32, in_$i217: i1, in_$i184: i32, in_vslice_dummy_var_131: i32, in_vslice_dummy_var_132: i1) returns (out_$i185: i64, out_$p187: ref, out_$p188: ref, out_$i189: i64, out_$i190: i1, out_$p192: ref, out_$i193: i32, out_$i194: i1, out_$p195: ref, out_$i196: i32, out_$i197: i1, out_$p198: ref, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$i202: i8, out_$i203: i1, out_$p204: ref, out_$i205: i8, out_$i206: i1, out_$i207: i32, out_$i208: i1, out_$p209: ref, out_$p210: ref, out_$p212: ref, out_$p214: ref, out_$i215: i32, out_$i216: i32, out_$i217: i1, out_$i184: i32, out_vslice_dummy_var_131: i32, out_vslice_dummy_var_132: i1)
{

  entry:
    out_$i185, out_$p187, out_$p188, out_$i189, out_$i190, out_$p192, out_$i193, out_$i194, out_$p195, out_$i196, out_$i197, out_$p198, out_$i199, out_$i200, out_$p201, out_$i202, out_$i203, out_$p204, out_$i205, out_$i206, out_$i207, out_$i208, out_$p209, out_$p210, out_$p212, out_$p214, out_$i215, out_$i216, out_$i217, out_$i184, out_vslice_dummy_var_131, out_vslice_dummy_var_132 := in_$i185, in_$p187, in_$p188, in_$i189, in_$i190, in_$p192, in_$i193, in_$i194, in_$p195, in_$i196, in_$i197, in_$p198, in_$i199, in_$i200, in_$p201, in_$i202, in_$i203, in_$p204, in_$i205, in_$i206, in_$i207, in_$i208, in_$p209, in_$p210, in_$p212, in_$p214, in_$i215, in_$i216, in_$i217, in_$i184, in_vslice_dummy_var_131, in_vslice_dummy_var_132;
    goto $bb83, exit;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_3427;

  $bb103:
    assume out_$i217 == 1;
    assume {:verifier.code 0} true;
    out_$i184 := out_$i215;
    goto $bb103_dummy;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    out_$i217 := $ugt.i32(out_$i216, out_$i215);
    goto corral_source_split_3475;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    out_$i216 := $load.i32($M.0, in_$p181);
    goto corral_source_split_3474;

  $bb102:
    assume {:verifier.code 0} true;
    out_$i215 := $add.i32(out_$i184, 1);
    call {:si_unique_call 522} {:cexpr "i"} boogie_si_record_i32(out_$i215);
    goto corral_source_split_3473;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p214, 1);
    goto corral_source_split_3471;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    out_$p214 := $add.ref($add.ref(out_$p188, $mul.ref(0, 6384)), $mul.ref(1808, 1));
    goto corral_source_split_3470;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} out_vslice_dummy_var_132 := schedule_work(out_$p212);
    goto corral_source_split_3469;

  $bb101:
    assume {:verifier.code 0} true;
    out_$p212 := $add.ref($add.ref(out_$p188, $mul.ref(0, 6384)), $mul.ref(1712, 1));
    goto corral_source_split_3468;

  $bb100:
    assume !(out_$i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} out_vslice_dummy_var_131 := printk.ref.ref.i32.ref(.str.4, .str.1, 2632, out_$p210);
    goto corral_source_split_3466;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    out_$p210 := $bitcast.ref.ref(out_$p209);
    goto corral_source_split_3465;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    out_$p209 := $add.ref($add.ref(out_$p188, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3464;

  $bb99:
    assume out_$i208 == 1;
    goto corral_source_split_3463;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    out_$i208 := $sgt.i32(out_$i207, 4);
    goto corral_source_split_3461;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    out_$i207 := $M.2;
    goto corral_source_split_3460;

  $bb98:
    assume !(out_$i206 == 1);
    goto corral_source_split_3459;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    out_$i206 := $trunc.i8.i1(out_$i205);
    goto corral_source_split_3457;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    out_$i205 := $load.i8($M.0, out_$p204);
    goto corral_source_split_3456;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    out_$p204 := $add.ref($add.ref(out_$p188, $mul.ref(0, 6384)), $mul.ref(1808, 1));
    goto corral_source_split_3455;

  $bb96:
    assume !(out_$i203 == 1);
    goto corral_source_split_3454;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    out_$i203 := $trunc.i8.i1(out_$i202);
    goto corral_source_split_3452;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    out_$i202 := $load.i8($M.0, out_$p201);
    goto corral_source_split_3451;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    out_$p201 := $add.ref($add.ref(out_$p188, $mul.ref(0, 6384)), $mul.ref(1800, 1));
    goto corral_source_split_3450;

  $bb93:
    assume out_$i200 == 1;
    goto corral_source_split_3449;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    out_$i200 := $ne.i32(out_$i199, 0);
    goto corral_source_split_3442;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    out_$i199 := $load.i32($M.0, out_$p198);
    goto corral_source_split_3441;

  $bb89:
    assume {:verifier.code 0} true;
    out_$p198 := $add.ref($add.ref(out_$p188, $mul.ref(0, 6384)), $mul.ref(1796, 1));
    goto corral_source_split_3440;

  $bb91:
    assume {:verifier.code 0} true;
    assume out_$i197 == 1;
    goto $bb89;

  $bb88:
    assume {:verifier.code 0} true;
    assume out_$i194 == 1;
    goto $bb89;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb90;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    out_$i194 := $ne.i32(out_$i193, 0);
    goto corral_source_split_3438;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    out_$i193 := $load.i32($M.0, out_$p192);
    goto corral_source_split_3437;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    out_$p192 := $add.ref($add.ref($add.ref(out_$p188, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(412, 1));
    goto corral_source_split_3436;

  $bb85:
    assume out_$i190 == 1;
    goto corral_source_split_3435;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    out_$i190 := $ne.i64(out_$i189, 0);
    goto corral_source_split_3433;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    out_$i189 := $p2i.ref.i64(out_$p188);
    goto corral_source_split_3432;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    out_$p188 := $load.ref($M.0, out_$p187);
    goto corral_source_split_3431;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(out_$i185, 8));
    goto corral_source_split_3430;

  $bb84:
    assume {:verifier.code 0} true;
    out_$i185 := $zext.i32.i64(out_$i184);
    goto corral_source_split_3429;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    out_$i197 := $ne.i32(out_$i196, 0);
    goto corral_source_split_3447;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    out_$i196 := $load.i32($M.0, out_$p195);
    goto corral_source_split_3446;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    out_$p195 := $add.ref($add.ref(out_$p188, $mul.ref(0, 6384)), $mul.ref(6300, 1));
    goto corral_source_split_3445;

  $bb90:
    assume !(out_$i194 == 1);
    goto corral_source_split_3444;

  $bb86:
    assume {:verifier.code 0} true;
    assume !(out_$i190 == 1);
    goto $bb87;

  $bb92:
    assume {:verifier.code 0} true;
    assume !(out_$i197 == 1);
    goto $bb87;

  $bb94:
    assume {:verifier.code 0} true;
    assume !(out_$i200 == 1);
    goto $bb87;

  $bb97:
    assume {:verifier.code 0} true;
    assume out_$i206 == 1;
    goto $bb87;

  $bb95:
    assume {:verifier.code 0} true;
    assume out_$i203 == 1;
    goto $bb87;

  $bb103_dummy:
    call {:si_unique_call 1} out_$i185, out_$p187, out_$p188, out_$i189, out_$i190, out_$p192, out_$i193, out_$i194, out_$p195, out_$i196, out_$i197, out_$p198, out_$i199, out_$i200, out_$p201, out_$i202, out_$i203, out_$p204, out_$i205, out_$i206, out_$i207, out_$i208, out_$p209, out_$p210, out_$p212, out_$p214, out_$i215, out_$i216, out_$i217, out_$i184, out_vslice_dummy_var_131, out_vslice_dummy_var_132 := synclinkmp_interrupt_loop_$bb83(in_$p2, in_$p181, out_$i185, out_$p187, out_$p188, out_$i189, out_$i190, out_$p192, out_$i193, out_$i194, out_$p195, out_$i196, out_$i197, out_$p198, out_$i199, out_$i200, out_$p201, out_$i202, out_$i203, out_$p204, out_$i205, out_$i206, out_$i207, out_$i208, out_$p209, out_$p210, out_$p212, out_$p214, out_$i215, out_$i216, out_$i217, out_$i184, out_vslice_dummy_var_131, out_vslice_dummy_var_132);
    return;

  exit:
    return;
}



procedure synclinkmp_interrupt_loop_$bb83(in_$p2: ref, in_$p181: ref, in_$i185: i64, in_$p187: ref, in_$p188: ref, in_$i189: i64, in_$i190: i1, in_$p192: ref, in_$i193: i32, in_$i194: i1, in_$p195: ref, in_$i196: i32, in_$i197: i1, in_$p198: ref, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$i202: i8, in_$i203: i1, in_$p204: ref, in_$i205: i8, in_$i206: i1, in_$i207: i32, in_$i208: i1, in_$p209: ref, in_$p210: ref, in_$p212: ref, in_$p214: ref, in_$i215: i32, in_$i216: i32, in_$i217: i1, in_$i184: i32, in_vslice_dummy_var_131: i32, in_vslice_dummy_var_132: i1) returns (out_$i185: i64, out_$p187: ref, out_$p188: ref, out_$i189: i64, out_$i190: i1, out_$p192: ref, out_$i193: i32, out_$i194: i1, out_$p195: ref, out_$i196: i32, out_$i197: i1, out_$p198: ref, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$i202: i8, out_$i203: i1, out_$p204: ref, out_$i205: i8, out_$i206: i1, out_$i207: i32, out_$i208: i1, out_$p209: ref, out_$p210: ref, out_$p212: ref, out_$p214: ref, out_$i215: i32, out_$i216: i32, out_$i217: i1, out_$i184: i32, out_vslice_dummy_var_131: i32, out_vslice_dummy_var_132: i1);
  modifies $M.0, $M.38, $M.37, $M.39, $M.41, $M.43;



implementation synclinkmp_interrupt_loop_$bb4(in_$p2: ref, in_$i9: i8, in_$i10: i8, in_$i11: i8, in_$i12: i16, in_$i13: i8, in_$i14: i32, in_$i15: i32, in_$i16: i8, in_$i17: i8, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$p30: ref, in_$p31: ref, in_$i32: i16, in_$i33: i8, in_$i34: i32, in_$i35: i32, in_$i36: i8, in_$p38: ref, in_$p39: ref, in_$i40: i8, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$i49: i8, in_$i50: i8, in_$i51: i8, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$i68: i64, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$i75: i1, in_$i76: i8, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i8, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$i85: i32, in_$i86: i1, in_$i87: i64, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$i96: i64, in_$p98: ref, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i103: i32, in_$i104: i1, in_$i105: i64, in_$p107: ref, in_$p108: ref, in_$i109: i32, in_$i110: i32, in_$i111: i32, in_$i112: i32, in_$i113: i1, in_$i114: i64, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$i120: i32, in_$i121: i32, in_$i122: i1, in_$i123: i64, in_$p125: ref, in_$p126: ref, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$i130: i32, in_$i131: i1, in_$i132: i64, in_$p134: ref, in_$p135: ref, in_$i136: i32, in_$i137: i32, in_$i138: i32, in_$i139: i32, in_$i140: i1, in_$i141: i64, in_$p143: ref, in_$p144: ref, in_$i145: i32, in_$i146: i32, in_$i147: i32, in_$i148: i32, in_$i149: i1, in_$i150: i64, in_$p152: ref, in_$p153: ref, in_$i74: i32, in_$i154: i32, in_$i155: i32, in_$i156: i1, in_$i67: i32, in_$i157: i32, in_$i158: i32, in_$i159: i1, in_$p161: ref, in_$p162: ref, in_$i163: i32, in_$i164: i32, in_$i165: i1, in_$p167: ref, in_$p168: ref, in_$i169: i32, in_$i170: i32, in_$i171: i1, in_$p173: ref, in_$p174: ref, in_$i175: i32, in_$i176: i32, in_$i177: i1, in_$p179: ref, in_$p180: ref, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: i32) returns (out_$i9: i8, out_$i10: i8, out_$i11: i8, out_$i12: i16, out_$i13: i8, out_$i14: i32, out_$i15: i32, out_$i16: i8, out_$i17: i8, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$p30: ref, out_$p31: ref, out_$i32: i16, out_$i33: i8, out_$i34: i32, out_$i35: i32, out_$i36: i8, out_$p38: ref, out_$p39: ref, out_$i40: i8, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$i49: i8, out_$i50: i8, out_$i51: i8, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$i68: i64, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$i75: i1, out_$i76: i8, out_$i77: i8, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i8, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$i85: i32, out_$i86: i1, out_$i87: i64, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$i96: i64, out_$p98: ref, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i103: i32, out_$i104: i1, out_$i105: i64, out_$p107: ref, out_$p108: ref, out_$i109: i32, out_$i110: i32, out_$i111: i32, out_$i112: i32, out_$i113: i1, out_$i114: i64, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$i120: i32, out_$i121: i32, out_$i122: i1, out_$i123: i64, out_$p125: ref, out_$p126: ref, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$i130: i32, out_$i131: i1, out_$i132: i64, out_$p134: ref, out_$p135: ref, out_$i136: i32, out_$i137: i32, out_$i138: i32, out_$i139: i32, out_$i140: i1, out_$i141: i64, out_$p143: ref, out_$p144: ref, out_$i145: i32, out_$i146: i32, out_$i147: i32, out_$i148: i32, out_$i149: i1, out_$i150: i64, out_$p152: ref, out_$p153: ref, out_$i74: i32, out_$i154: i32, out_$i155: i32, out_$i156: i1, out_$i67: i32, out_$i157: i32, out_$i158: i32, out_$i159: i1, out_$p161: ref, out_$p162: ref, out_$i163: i32, out_$i164: i32, out_$i165: i1, out_$p167: ref, out_$p168: ref, out_$i169: i32, out_$i170: i32, out_$i171: i1, out_$p173: ref, out_$p174: ref, out_$i175: i32, out_$i176: i32, out_$i177: i1, out_$p179: ref, out_$p180: ref, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: i32)
{

  entry:
    out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i68, out_$p70, out_$p71, out_$i72, out_$i73, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$p152, out_$p153, out_$i74, out_$i154, out_$i155, out_$i156, out_$i67, out_$i157, out_$i158, out_$i159, out_$p161, out_$p162, out_$i163, out_$i164, out_$i165, out_$p167, out_$p168, out_$i169, out_$i170, out_$i171, out_$p173, out_$p174, out_$i175, out_$i176, out_$i177, out_$p179, out_$p180, out_vslice_dummy_var_129, out_vslice_dummy_var_130 := in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$p26, in_$i27, in_$i28, in_$p30, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p38, in_$p39, in_$i40, in_$i41, in_$i42, in_$p43, in_$p44, in_$i45, in_$i46, in_$i47, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$i68, in_$p70, in_$p71, in_$i72, in_$i73, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$p89, in_$p90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$p98, in_$p99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$p107, in_$p108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$p116, in_$p117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$p125, in_$p126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$p134, in_$p135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$p143, in_$p144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$p152, in_$p153, in_$i74, in_$i154, in_$i155, in_$i156, in_$i67, in_$i157, in_$i158, in_$i159, in_$p161, in_$p162, in_$i163, in_$i164, in_$i165, in_$p167, in_$p168, in_$i169, in_$i170, in_$i171, in_$p173, in_$p174, in_$i175, in_$i176, in_$i177, in_$p179, in_$p180, in_vslice_dummy_var_129, in_vslice_dummy_var_130;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3187;

  $bb79:
    assume {:verifier.code 0} true;
    out_$i9, out_$i10, out_$i11 := out_$i49, out_$i50, out_$i51;
    goto $bb79_dummy;

  $bb78:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} isr_timer(out_$p180);
    goto corral_source_split_3423;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    out_$p180 := $load.ref($M.0, out_$p179);
    goto corral_source_split_3422;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    out_$p179 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(3, 8));
    goto corral_source_split_3421;

  $bb77:
    assume out_$i177 == 1;
    goto corral_source_split_3420;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    out_$i177 := $ne.i32(out_$i176, 0);
    goto corral_source_split_3418;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    out_$i176 := $and.i32(out_$i175, 192);
    goto corral_source_split_3417;

  $bb76:
    assume {:verifier.code 0} true;
    out_$i175 := $zext.i8.i32(out_$i51);
    goto corral_source_split_3416;

  $bb75:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} isr_timer(out_$p174);
    goto corral_source_split_3414;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    out_$p174 := $load.ref($M.0, out_$p173);
    goto corral_source_split_3413;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    out_$p173 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(2, 8));
    goto corral_source_split_3412;

  $bb74:
    assume out_$i171 == 1;
    goto corral_source_split_3411;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    out_$i171 := $ne.i32(out_$i170, 0);
    goto corral_source_split_3409;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    out_$i170 := $and.i32(out_$i169, 48);
    goto corral_source_split_3408;

  $bb73:
    assume {:verifier.code 0} true;
    out_$i169 := $zext.i8.i32(out_$i51);
    goto corral_source_split_3407;

  $bb72:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} isr_timer(out_$p168);
    goto corral_source_split_3405;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    out_$p168 := $load.ref($M.0, out_$p167);
    goto corral_source_split_3404;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(1, 8));
    goto corral_source_split_3403;

  $bb71:
    assume out_$i165 == 1;
    goto corral_source_split_3402;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    out_$i165 := $ne.i32(out_$i164, 0);
    goto corral_source_split_3400;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    out_$i164 := $and.i32(out_$i163, 192);
    goto corral_source_split_3399;

  $bb70:
    assume {:verifier.code 0} true;
    out_$i163 := $zext.i8.i32(out_$i17);
    goto corral_source_split_3398;

  $bb69:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} isr_timer(out_$p162);
    goto corral_source_split_3396;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    out_$p162 := $load.ref($M.0, out_$p161);
    goto corral_source_split_3395;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_3394;

  $bb68:
    assume out_$i159 == 1;
    goto corral_source_split_3393;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    out_$i159 := $ne.i32(out_$i158, 0);
    goto corral_source_split_3391;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    out_$i158 := $and.i32(out_$i157, 48);
    goto corral_source_split_3390;

  $bb67:
    assume {:verifier.code 0} true;
    out_$i157 := $zext.i8.i32(out_$i17);
    goto corral_source_split_3389;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i66 == 1);
    goto $bb31;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb66:
    assume !(out_$i156 == 1);
    goto corral_source_split_3387;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    out_$i156 := $ugt.i32(out_$i155, out_$i154);
    goto corral_source_split_3280;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    out_$i155 := $load.i32($M.0, out_$p64);
    goto corral_source_split_3279;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    out_$i154 := $add.i32(out_$i74, 1);
    call {:si_unique_call 506} {:cexpr "i"} boogie_si_record_i32(out_$i154);
    goto corral_source_split_3278;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_3277;

  $bb64:
    assume {:verifier.code 0} true;
    out_$i74 := out_$i67;
    goto $bb36;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    out_$i74 := out_$i67;
    goto $bb36;

  $bb34:
    assume out_$i73 == 1;
    goto corral_source_split_3275;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i64(out_$i72, 0);
    goto corral_source_split_3273;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    out_$i72 := $p2i.ref.i64(out_$p71);
    goto corral_source_split_3272;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.0, out_$p70);
    goto corral_source_split_3271;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(out_$i68, 8));
    goto corral_source_split_3270;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i32.i64(out_$i67);
    goto corral_source_split_3269;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb32:
    call out_$i68, out_$p70, out_$p71, out_$i72, out_$i73, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$p152, out_$p153, out_$i74, out_$i154, out_$i155, out_$i156, out_$i67 := synclinkmp_interrupt_loop_$bb32(in_$p2, out_$i13, out_$i16, out_$i49, out_$i50, out_$p64, out_$i68, out_$p70, out_$p71, out_$i72, out_$i73, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$p152, out_$p153, out_$i74, out_$i154, out_$i155, out_$i156, out_$i67);
    goto $bb32_last;

  $bb32_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3267;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    out_$i67 := 0;
    goto $bb32;

  $bb65:
    assume out_$i156 == 1;
    assume {:verifier.code 0} true;
    out_$i67 := out_$i154;
    assume false;
    return;

  $bb29:
    assume out_$i66 == 1;
    goto corral_source_split_3265;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    out_$i66 := $ugt.i32(out_$i65, 0);
    goto corral_source_split_3263;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, out_$p64);
    goto corral_source_split_3262;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6036, 1));
    goto corral_source_split_3261;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i53 == 1);
    goto $bb16;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb16;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i57 == 1);
    goto $bb16;

  $bb22:
    assume {:verifier.code 0} true;
    assume !(out_$i59 == 1);
    goto $bb16;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i61 == 1);
    goto $bb16;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i63 == 1);
    goto $bb16;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i62, 0);
    goto corral_source_split_3253;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i8.i32(out_$i51);
    goto corral_source_split_3252;

  $bb23:
    assume out_$i61 == 1;
    goto corral_source_split_3251;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i60, 0);
    goto corral_source_split_3249;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i8.i32(out_$i50);
    goto corral_source_split_3248;

  $bb21:
    assume out_$i59 == 1;
    goto corral_source_split_3247;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i58, 0);
    goto corral_source_split_3245;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i8.i32(out_$i49);
    goto corral_source_split_3244;

  $bb19:
    assume out_$i57 == 1;
    goto corral_source_split_3243;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i56, 0);
    goto corral_source_split_3241;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i8.i32(out_$i17);
    goto corral_source_split_3240;

  $bb17:
    assume out_$i55 == 1;
    goto corral_source_split_3239;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i54, 0);
    goto corral_source_split_3237;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i8.i32(out_$i16);
    goto corral_source_split_3236;

  $bb14:
    assume out_$i53 == 1;
    goto corral_source_split_3235;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, 0);
    goto corral_source_split_3233;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i8.i32(out_$i13);
    goto corral_source_split_3232;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3231;

  $bb9:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    out_$i49, out_$i50, out_$i51 := out_$i9, out_$i10, out_$i11;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i49, out_$i50, out_$i51 := out_$i33, out_$i36, out_$i40;
    goto $bb13;

  $bb11:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} out_vslice_dummy_var_130 := printk.ref.ref.i32.ref.i32.i32.i32(.str.3, .str.1, 2567, out_$p44, out_$i45, out_$i46, out_$i47);
    goto corral_source_split_3229;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i8.i32(out_$i40);
    goto corral_source_split_3228;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i8.i32(out_$i36);
    goto corral_source_split_3227;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i8.i32(out_$i33);
    goto corral_source_split_3226;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    out_$p44 := $bitcast.ref.ref(out_$p43);
    goto corral_source_split_3225;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3224;

  $bb10:
    assume out_$i42 == 1;
    goto corral_source_split_3223;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    out_$i42 := $sgt.i32(out_$i41, 4);
    goto corral_source_split_3221;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    out_$i41 := $M.2;
    goto corral_source_split_3220;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} out_$i40 := read_reg(out_$p39, 18);
    call {:si_unique_call 504} {:cexpr "timerstatus1"} boogie_si_record_i8(out_$i40);
    goto corral_source_split_3219;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_3218;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(2, 8));
    goto corral_source_split_3217;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i32.i8(out_$i35);
    call {:si_unique_call 502} {:cexpr "dmastatus1"} boogie_si_record_i8(out_$i36);
    goto corral_source_split_3216;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    out_$i35 := $ashr.i32(out_$i34, 8);
    goto corral_source_split_3215;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i32(out_$i32);
    goto corral_source_split_3214;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    out_$i33 := $trunc.i16.i8(out_$i32);
    call {:si_unique_call 501} {:cexpr "status1"} boogie_si_record_i8(out_$i33);
    goto corral_source_split_3213;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} out_$i32 := read_reg16(out_$p31, 16);
    call {:si_unique_call 500} {:cexpr "tmp"} boogie_si_record_i16(out_$i32);
    goto corral_source_split_3212;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_3211;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(2, 8));
    goto corral_source_split_3210;

  $bb8:
    assume out_$i28 == 1;
    goto corral_source_split_3209;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 4);
    goto corral_source_split_3207;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_3206;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6036, 1));
    goto corral_source_split_3205;

  $bb6:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} out_vslice_dummy_var_129 := printk.ref.ref.i32.ref.i32.i32.i32(.str.2, .str.1, 2555, out_$p21, out_$i22, out_$i23, out_$i24);
    goto corral_source_split_3203;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i8.i32(out_$i17);
    goto corral_source_split_3202;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i8.i32(out_$i16);
    goto corral_source_split_3201;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i8.i32(out_$i13);
    goto corral_source_split_3200;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_3199;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_3198;

  $bb5:
    assume out_$i19 == 1;
    goto corral_source_split_3197;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    out_$i19 := $sgt.i32(out_$i18, 4);
    goto corral_source_split_3195;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    out_$i18 := $M.2;
    goto corral_source_split_3194;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} out_$i17 := read_reg(in_$p2, 18);
    call {:si_unique_call 497} {:cexpr "timerstatus0"} boogie_si_record_i8(out_$i17);
    goto corral_source_split_3193;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    out_$i16 := $trunc.i32.i8(out_$i15);
    call {:si_unique_call 495} {:cexpr "dmastatus0"} boogie_si_record_i8(out_$i16);
    goto corral_source_split_3192;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    out_$i15 := $ashr.i32(out_$i14, 8);
    goto corral_source_split_3191;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i16.i32(out_$i12);
    goto corral_source_split_3190;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    out_$i13 := $trunc.i16.i8(out_$i12);
    call {:si_unique_call 494} {:cexpr "status0"} boogie_si_record_i8(out_$i13);
    goto corral_source_split_3189;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} out_$i12 := read_reg16(in_$p2, 16);
    call {:si_unique_call 493} {:cexpr "tmp"} boogie_si_record_i16(out_$i12);
    goto corral_source_split_3188;

  $bb63:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} isr_txdmaok(out_$p153);
    goto corral_source_split_3385;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    out_$p153 := $load.ref($M.0, out_$p152);
    goto corral_source_split_3384;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(out_$i150, 8));
    goto corral_source_split_3383;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    out_$i150 := $zext.i32.i64(out_$i67);
    goto corral_source_split_3382;

  $bb62:
    assume out_$i149 == 1;
    goto corral_source_split_3381;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    out_$i149 := $ne.i32(out_$i148, 0);
    goto corral_source_split_3379;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    out_$i148 := $and.i32(out_$i145, out_$i147);
    goto corral_source_split_3378;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    out_$i147 := $shl.i32(8, out_$i146);
    goto corral_source_split_3377;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    out_$i146 := $zext.i8.i32(out_$i81);
    goto corral_source_split_3376;

  $bb61:
    assume {:verifier.code 0} true;
    out_$i145 := $zext.i8.i32(out_$i76);
    goto corral_source_split_3375;

  $bb60:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} isr_txdmaerror(out_$p144);
    goto corral_source_split_3373;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    out_$p144 := $load.ref($M.0, out_$p143);
    goto corral_source_split_3372;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(out_$i141, 8));
    goto corral_source_split_3371;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    out_$i141 := $zext.i32.i64(out_$i67);
    goto corral_source_split_3370;

  $bb59:
    assume out_$i140 == 1;
    goto corral_source_split_3369;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    out_$i140 := $ne.i32(out_$i139, 0);
    goto corral_source_split_3367;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    out_$i139 := $and.i32(out_$i136, out_$i138);
    goto corral_source_split_3366;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    out_$i138 := $shl.i32(4, out_$i137);
    goto corral_source_split_3365;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    out_$i137 := $zext.i8.i32(out_$i81);
    goto corral_source_split_3364;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i136 := $zext.i8.i32(out_$i76);
    goto corral_source_split_3363;

  $bb57:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} isr_rxdmaok(out_$p135);
    goto corral_source_split_3361;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    out_$p135 := $load.ref($M.0, out_$p134);
    goto corral_source_split_3360;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(out_$i132, 8));
    goto corral_source_split_3359;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    out_$i132 := $zext.i32.i64(out_$i67);
    goto corral_source_split_3358;

  $bb56:
    assume out_$i131 == 1;
    goto corral_source_split_3357;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    out_$i131 := $ne.i32(out_$i130, 0);
    goto corral_source_split_3355;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    out_$i130 := $and.i32(out_$i127, out_$i129);
    goto corral_source_split_3354;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    out_$i129 := $shl.i32(2, out_$i128);
    goto corral_source_split_3353;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.i8.i32(out_$i81);
    goto corral_source_split_3352;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i127 := $zext.i8.i32(out_$i76);
    goto corral_source_split_3351;

  $bb54:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} isr_rxdmaerror(out_$p126);
    goto corral_source_split_3349;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    out_$p126 := $load.ref($M.0, out_$p125);
    goto corral_source_split_3348;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(out_$i123, 8));
    goto corral_source_split_3347;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i32.i64(out_$i67);
    goto corral_source_split_3346;

  $bb53:
    assume out_$i122 == 1;
    goto corral_source_split_3345;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i32(out_$i121, 0);
    goto corral_source_split_3343;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    out_$i121 := $and.i32(out_$i120, 1);
    goto corral_source_split_3342;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    out_$i120 := $ashr.i32(out_$i118, out_$i119);
    goto corral_source_split_3341;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    out_$i119 := $zext.i8.i32(out_$i81);
    goto corral_source_split_3340;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i118 := $zext.i8.i32(out_$i76);
    goto corral_source_split_3339;

  $bb51:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} isr_txint(out_$p117);
    goto corral_source_split_3337;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    out_$p117 := $load.ref($M.0, out_$p116);
    goto corral_source_split_3336;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(out_$i114, 8));
    goto corral_source_split_3335;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    out_$i114 := $zext.i32.i64(out_$i67);
    goto corral_source_split_3334;

  $bb50:
    assume out_$i113 == 1;
    goto corral_source_split_3333;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    out_$i113 := $ne.i32(out_$i112, 0);
    goto corral_source_split_3331;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    out_$i112 := $and.i32(out_$i109, out_$i111);
    goto corral_source_split_3330;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    out_$i111 := $shl.i32(8, out_$i110);
    goto corral_source_split_3329;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    out_$i110 := $zext.i8.i32(out_$i81);
    goto corral_source_split_3328;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i8.i32(out_$i77);
    goto corral_source_split_3327;

  $bb48:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} isr_rxint(out_$p108);
    goto corral_source_split_3325;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    out_$p108 := $load.ref($M.0, out_$p107);
    goto corral_source_split_3324;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(out_$i105, 8));
    goto corral_source_split_3323;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    out_$i105 := $zext.i32.i64(out_$i67);
    goto corral_source_split_3322;

  $bb47:
    assume out_$i104 == 1;
    goto corral_source_split_3321;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    out_$i104 := $ne.i32(out_$i103, 0);
    goto corral_source_split_3319;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    out_$i103 := $and.i32(out_$i100, out_$i102);
    goto corral_source_split_3318;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    out_$i102 := $shl.i32(4, out_$i101);
    goto corral_source_split_3317;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    out_$i101 := $zext.i8.i32(out_$i81);
    goto corral_source_split_3316;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i100 := $zext.i8.i32(out_$i77);
    goto corral_source_split_3315;

  $bb45:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} isr_txrdy(out_$p99);
    goto corral_source_split_3313;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    out_$p99 := $load.ref($M.0, out_$p98);
    goto corral_source_split_3312;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(out_$i96, 8));
    goto corral_source_split_3311;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i32.i64(out_$i67);
    goto corral_source_split_3310;

  $bb44:
    assume out_$i95 == 1;
    goto corral_source_split_3309;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    out_$i95 := $ne.i32(out_$i94, 0);
    goto corral_source_split_3307;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    out_$i94 := $and.i32(out_$i91, out_$i93);
    goto corral_source_split_3306;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    out_$i93 := $shl.i32(2, out_$i92);
    goto corral_source_split_3305;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    out_$i92 := $zext.i8.i32(out_$i81);
    goto corral_source_split_3304;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i91 := $zext.i8.i32(out_$i77);
    goto corral_source_split_3303;

  $bb42:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} isr_rxrdy(out_$p90);
    goto corral_source_split_3301;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.0, out_$p89);
    goto corral_source_split_3300;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(out_$i87, 8));
    goto corral_source_split_3299;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    out_$i87 := $zext.i32.i64(out_$i67);
    goto corral_source_split_3298;

  $bb41:
    assume out_$i86 == 1;
    goto corral_source_split_3297;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i32(out_$i85, 0);
    goto corral_source_split_3295;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    out_$i85 := $and.i32(out_$i84, 1);
    goto corral_source_split_3294;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    out_$i84 := $ashr.i32(out_$i82, out_$i83);
    goto corral_source_split_3293;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i8.i32(out_$i81);
    goto corral_source_split_3292;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i8.i32(out_$i77);
    goto corral_source_split_3291;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    out_$i81 := $trunc.i32.i8(out_$i80);
    call {:si_unique_call 507} {:cexpr "shift"} boogie_si_record_i8(out_$i81);
    goto corral_source_split_3290;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    out_$i80 := (if out_$i79 == 1 then 4 else 0);
    goto corral_source_split_3289;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_3288;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    out_$i78 := $and.i32(out_$i67, 1);
    goto corral_source_split_3287;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3286;

  $bb39:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$i76, out_$i77 := out_$i50, out_$i49;
    goto $bb40;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    out_$i76, out_$i77 := out_$i16, out_$i13;
    goto $bb40;

  $bb38:
    assume out_$i75 == 1;
    goto corral_source_split_3284;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i75 := $ule.i32(out_$i67, 1);
    goto corral_source_split_3282;

  $bb35:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb79_dummy:
    call {:si_unique_call 1} out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i68, out_$p70, out_$p71, out_$i72, out_$i73, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$p152, out_$p153, out_$i74, out_$i154, out_$i155, out_$i156, out_$i67, out_$i157, out_$i158, out_$i159, out_$p161, out_$p162, out_$i163, out_$i164, out_$i165, out_$p167, out_$p168, out_$i169, out_$i170, out_$i171, out_$p173, out_$p174, out_$i175, out_$i176, out_$i177, out_$p179, out_$p180, out_vslice_dummy_var_129, out_vslice_dummy_var_130 := synclinkmp_interrupt_loop_$bb4(in_$p2, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i68, out_$p70, out_$p71, out_$i72, out_$i73, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$p152, out_$p153, out_$i74, out_$i154, out_$i155, out_$i156, out_$i67, out_$i157, out_$i158, out_$i159, out_$p161, out_$p162, out_$i163, out_$i164, out_$i165, out_$p167, out_$p168, out_$i169, out_$i170, out_$i171, out_$p173, out_$p174, out_$i175, out_$i176, out_$i177, out_$p179, out_$p180, out_vslice_dummy_var_129, out_vslice_dummy_var_130);
    return;

  exit:
    return;
}



procedure synclinkmp_interrupt_loop_$bb4(in_$p2: ref, in_$i9: i8, in_$i10: i8, in_$i11: i8, in_$i12: i16, in_$i13: i8, in_$i14: i32, in_$i15: i32, in_$i16: i8, in_$i17: i8, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$p30: ref, in_$p31: ref, in_$i32: i16, in_$i33: i8, in_$i34: i32, in_$i35: i32, in_$i36: i8, in_$p38: ref, in_$p39: ref, in_$i40: i8, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$i49: i8, in_$i50: i8, in_$i51: i8, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$i68: i64, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$i75: i1, in_$i76: i8, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i8, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$i85: i32, in_$i86: i1, in_$i87: i64, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$i96: i64, in_$p98: ref, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i103: i32, in_$i104: i1, in_$i105: i64, in_$p107: ref, in_$p108: ref, in_$i109: i32, in_$i110: i32, in_$i111: i32, in_$i112: i32, in_$i113: i1, in_$i114: i64, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$i120: i32, in_$i121: i32, in_$i122: i1, in_$i123: i64, in_$p125: ref, in_$p126: ref, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$i130: i32, in_$i131: i1, in_$i132: i64, in_$p134: ref, in_$p135: ref, in_$i136: i32, in_$i137: i32, in_$i138: i32, in_$i139: i32, in_$i140: i1, in_$i141: i64, in_$p143: ref, in_$p144: ref, in_$i145: i32, in_$i146: i32, in_$i147: i32, in_$i148: i32, in_$i149: i1, in_$i150: i64, in_$p152: ref, in_$p153: ref, in_$i74: i32, in_$i154: i32, in_$i155: i32, in_$i156: i1, in_$i67: i32, in_$i157: i32, in_$i158: i32, in_$i159: i1, in_$p161: ref, in_$p162: ref, in_$i163: i32, in_$i164: i32, in_$i165: i1, in_$p167: ref, in_$p168: ref, in_$i169: i32, in_$i170: i32, in_$i171: i1, in_$p173: ref, in_$p174: ref, in_$i175: i32, in_$i176: i32, in_$i177: i1, in_$p179: ref, in_$p180: ref, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: i32) returns (out_$i9: i8, out_$i10: i8, out_$i11: i8, out_$i12: i16, out_$i13: i8, out_$i14: i32, out_$i15: i32, out_$i16: i8, out_$i17: i8, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$p30: ref, out_$p31: ref, out_$i32: i16, out_$i33: i8, out_$i34: i32, out_$i35: i32, out_$i36: i8, out_$p38: ref, out_$p39: ref, out_$i40: i8, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$i49: i8, out_$i50: i8, out_$i51: i8, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$i68: i64, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$i75: i1, out_$i76: i8, out_$i77: i8, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i8, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$i85: i32, out_$i86: i1, out_$i87: i64, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$i96: i64, out_$p98: ref, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i103: i32, out_$i104: i1, out_$i105: i64, out_$p107: ref, out_$p108: ref, out_$i109: i32, out_$i110: i32, out_$i111: i32, out_$i112: i32, out_$i113: i1, out_$i114: i64, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$i120: i32, out_$i121: i32, out_$i122: i1, out_$i123: i64, out_$p125: ref, out_$p126: ref, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$i130: i32, out_$i131: i1, out_$i132: i64, out_$p134: ref, out_$p135: ref, out_$i136: i32, out_$i137: i32, out_$i138: i32, out_$i139: i32, out_$i140: i1, out_$i141: i64, out_$p143: ref, out_$p144: ref, out_$i145: i32, out_$i146: i32, out_$i147: i32, out_$i148: i32, out_$i149: i1, out_$i150: i64, out_$p152: ref, out_$p153: ref, out_$i74: i32, out_$i154: i32, out_$i155: i32, out_$i156: i1, out_$i67: i32, out_$i157: i32, out_$i158: i32, out_$i159: i1, out_$p161: ref, out_$p162: ref, out_$i163: i32, out_$i164: i32, out_$i165: i1, out_$p167: ref, out_$p168: ref, out_$i169: i32, out_$i170: i32, out_$i171: i1, out_$p173: ref, out_$p174: ref, out_$i175: i32, out_$i176: i32, out_$i177: i1, out_$p179: ref, out_$p180: ref, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: i32);
  modifies $M.0, $M.3, $M.5, $M.7, $M.9, $M.22, $M.4, $M.6, $M.8, $M.10, $CurrAddr, $M.45, $M.46;



implementation tx_load_dma_buffer_loop_$bb7(in_$p0: ref, in_$i7: i32, in_$p8: ref, in_$i9: i32, in_$i10: i1, in_$i11: i32, in_$i12: i16, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i16, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i37: i32) returns (out_$i7: i32, out_$p8: ref, out_$i9: i32, out_$i10: i1, out_$i11: i32, out_$i12: i16, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i16, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i37: i32)
{

  entry:
    out_$i7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$p14, out_$i15, out_$p17, out_$p18, out_$i19, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37 := in_$i7, in_$p8, in_$i9, in_$i10, in_$i11, in_$i12, in_$p13, in_$p14, in_$i15, in_$p17, in_$p18, in_$i19, in_$p21, in_$p22, in_$i23, in_$i24, in_$p25, in_$p26, in_$i27, in_$p28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5575;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    out_$i7, out_$p8, out_$i9 := out_$i30, out_$p28, out_$i37;
    goto corral_source_split_5626_dummy;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5626;

  $bb16:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    out_$i37 := out_$i33;
    goto $bb17;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    out_$i37 := 0;
    goto $bb17;

  $bb15:
    assume out_$i36 == 1;
    goto corral_source_split_5624;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    out_$i36 := $ule.i32(out_$i35, out_$i33);
    goto corral_source_split_5622;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, out_$p34);
    goto corral_source_split_5621;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(3916, 1));
    goto corral_source_split_5620;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i9, 1);
    call {:si_unique_call 971} {:cexpr "i"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_5619;

  $bb12:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i9;
    assume true;
    goto $bb12;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 0);
    goto corral_source_split_5605;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    out_$i30 := $sub.i32(out_$i7, out_$i29);
    call {:si_unique_call 969} {:cexpr "count"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_5604;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i16.i32(out_$i12);
    goto corral_source_split_5603;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref(out_$p8, $mul.ref(out_$i27, 1));
    goto corral_source_split_5602;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i16.i64(out_$i12);
    goto corral_source_split_5601;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p26, 0);
    goto corral_source_split_5600;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 10)), $mul.ref(8, 1));
    goto corral_source_split_5599;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p25, out_$i12);
    goto corral_source_split_5598;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 10)), $mul.ref(6, 1));
    goto corral_source_split_5597;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} load_pci_memory(in_$p0, out_$p22, out_$p8, out_$i24);
    goto corral_source_split_5596;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i32.i16(out_$i23);
    goto corral_source_split_5595;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i16.i32(out_$i12);
    goto corral_source_split_5594;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_5593;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 16)), $mul.ref(0, 1));
    goto corral_source_split_5592;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    goto corral_source_split_5591;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i32.i64(out_$i9);
    goto corral_source_split_5590;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_5589;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(3928, 1));
    goto corral_source_split_5588;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    goto corral_source_split_5587;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i32.i64(out_$i9);
    goto corral_source_split_5586;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_5585;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(3920, 1));
    goto corral_source_split_5584;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    out_$i12 := $trunc.i32.i16(out_$i11);
    call {:si_unique_call 967} {:cexpr "copy_count"} boogie_si_record_i16(out_$i12);
    goto corral_source_split_5583;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5582;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    out_$i11 := 1024;
    goto $bb10;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i7;
    goto $bb10;

  $bb8:
    assume out_$i10 == 1;
    goto corral_source_split_5578;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    out_$i10 := $ult.i32(out_$i7, 1024);
    goto corral_source_split_5576;

  $bb9:
    assume !(out_$i10 == 1);
    goto corral_source_split_5580;

  corral_source_split_5626_dummy:
    call {:si_unique_call 1} out_$i7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$p14, out_$i15, out_$p17, out_$p18, out_$i19, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37 := tx_load_dma_buffer_loop_$bb7(in_$p0, out_$i7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$p14, out_$i15, out_$p17, out_$p18, out_$i19, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37);
    return;

  exit:
    return;
}



procedure tx_load_dma_buffer_loop_$bb7(in_$p0: ref, in_$i7: i32, in_$p8: ref, in_$i9: i32, in_$i10: i1, in_$i11: i32, in_$i12: i16, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i16, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i37: i32) returns (out_$i7: i32, out_$p8: ref, out_$i9: i32, out_$i10: i1, out_$i11: i32, out_$i12: i16, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i16, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i37: i32);
  modifies $M.0;



implementation rx_get_frame_loop_$bb76(in_$p0: ref, in_$i211: i1, in_$i212: i32, in_$i213: i64, in_$p216: ref, in_$p217: ref, in_$i218: i64, in_$i219: i64, in_$p220: ref, in_$i221: i32, in_$i222: i32, in_$p223: ref, in_$i224: i32, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$p208: ref, in_$i209: i32, in_$i210: i32, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8, in_cmdloc_dummy_var_23: [ref]i8) returns (out_$i211: i1, out_$i212: i32, out_$i213: i64, out_$p216: ref, out_$p217: ref, out_$i218: i64, out_$i219: i64, out_$p220: ref, out_$i221: i32, out_$i222: i32, out_$p223: ref, out_$i224: i32, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$p208: ref, out_$i209: i32, out_$i210: i32, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8, out_cmdloc_dummy_var_23: [ref]i8)
{

  entry:
    out_$i211, out_$i212, out_$i213, out_$p216, out_$p217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$p223, out_$i224, out_$i225, out_$i226, out_$i227, out_$p208, out_$i209, out_$i210, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23 := in_$i211, in_$i212, in_$i213, in_$p216, in_$p217, in_$i218, in_$i219, in_$p220, in_$i221, in_$i222, in_$p223, in_$i224, in_$i225, in_$i226, in_$i227, in_$p208, in_$i209, in_$i210, in_cmdloc_dummy_var_21, in_cmdloc_dummy_var_22, in_cmdloc_dummy_var_23;
    goto $bb76, exit;

  $bb76:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6020;

  $bb84:
    assume out_$i227 == 1;
    assume {:verifier.code 0} true;
    out_$p208, out_$i209, out_$i210 := out_$p220, out_$i226, out_$i221;
    goto $bb84_dummy;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    out_$i227 := $ne.i32(out_$i221, 0);
    goto corral_source_split_6045;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_6044;

  $bb82:
    assume !(out_$i225 == 1);
    assume {:verifier.code 0} true;
    out_$i226 := out_$i222;
    goto $bb83;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    out_$i226 := 0;
    goto $bb83;

  $bb81:
    assume out_$i225 == 1;
    goto corral_source_split_6042;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    out_$i225 := $eq.i32(out_$i222, out_$i224);
    goto corral_source_split_6040;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    out_$i224 := $load.i32($M.0, out_$p223);
    goto corral_source_split_6039;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    out_$p223 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1848, 1));
    goto corral_source_split_6038;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    out_$i222 := $add.i32(out_$i209, 1);
    call {:si_unique_call 1010} {:cexpr "index"} boogie_si_record_i32(out_$i222);
    goto corral_source_split_6037;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    out_$i221 := $sub.i32(out_$i210, out_$i212);
    call {:si_unique_call 1009} {:cexpr "copy_count"} boogie_si_record_i32(out_$i221);
    goto corral_source_split_6036;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    out_$p220 := $add.ref(out_$p208, $mul.ref(out_$i219, 1));
    goto corral_source_split_6035;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    out_$i219 := $sext.i32.i64(out_$i212);
    goto corral_source_split_6034;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_21 := $M.0;
    out_cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 1008} out_cmdloc_dummy_var_23 := $memcpy.i8(out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_$p208, out_$p217, out_$i218, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_23;
    goto corral_source_split_6033;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    out_$i218 := $sext.i32.i64(out_$i212);
    goto corral_source_split_6032;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    out_$p217 := $load.ref($M.0, out_$p216);
    goto corral_source_split_6031;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    out_$p216 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1864, 1)), $mul.ref(out_$i213, 16)), $mul.ref(0, 1));
    goto corral_source_split_6030;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    out_$i213 := $sext.i32.i64(out_$i209);
    goto corral_source_split_6029;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_6028;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    out_$i212 := 1024;
    goto $bb80;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    out_$i212 := out_$i210;
    goto $bb80;

  $bb78:
    assume out_$i211 == 1;
    goto corral_source_split_6024;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb77:
    assume {:verifier.code 0} true;
    out_$i211 := $slt.i32(out_$i210, 1024);
    goto corral_source_split_6022;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb79:
    assume !(out_$i211 == 1);
    goto corral_source_split_6026;

  $bb84_dummy:
    call {:si_unique_call 1} out_$i211, out_$i212, out_$i213, out_$p216, out_$p217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$p223, out_$i224, out_$i225, out_$i226, out_$i227, out_$p208, out_$i209, out_$i210, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23 := rx_get_frame_loop_$bb76(in_$p0, out_$i211, out_$i212, out_$i213, out_$p216, out_$p217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$p223, out_$i224, out_$i225, out_$i226, out_$i227, out_$p208, out_$i209, out_$i210, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23);
    return;

  exit:
    return;
}



procedure rx_get_frame_loop_$bb76(in_$p0: ref, in_$i211: i1, in_$i212: i32, in_$i213: i64, in_$p216: ref, in_$p217: ref, in_$i218: i64, in_$i219: i64, in_$p220: ref, in_$i221: i32, in_$i222: i32, in_$p223: ref, in_$i224: i32, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$p208: ref, in_$i209: i32, in_$i210: i32, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8, in_cmdloc_dummy_var_23: [ref]i8) returns (out_$i211: i1, out_$i212: i32, out_$i213: i64, out_$p216: ref, out_$p217: ref, out_$i218: i64, out_$i219: i64, out_$p220: ref, out_$i221: i32, out_$i222: i32, out_$p223: ref, out_$i224: i32, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$p208: ref, out_$i209: i32, out_$i210: i32, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8, out_cmdloc_dummy_var_23: [ref]i8);
  modifies $M.0;



implementation rx_get_frame_loop_$bb5(in_$p0: ref, in_$p6: ref, in_$p11: ref, in_$i29: i32, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i8, in_$i32: i1, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$i40: i8, in_$i41: i8, in_$p42: ref, in_$i43: i16, in_$i44: i32, in_$i45: i32, in_$p46: ref, in_$i47: i8, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$p51: ref, in_$i52: i8, in_$i53: i32, in_$i54: i32, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$p67: ref, in_$i68: i64, in_$p69: ref, in_$i70: i64, in_$p71: ref, in_$p72: ref, in_$i73: i8, in_$i74: i32, in_$i75: i1) returns (out_$i29: i32, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i8, out_$i32: i1, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$i40: i8, out_$i41: i8, out_$p42: ref, out_$i43: i16, out_$i44: i32, out_$i45: i32, out_$p46: ref, out_$i47: i8, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$p51: ref, out_$i52: i8, out_$i53: i32, out_$i54: i32, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$p67: ref, out_$i68: i64, out_$p69: ref, out_$i70: i64, out_$p71: ref, out_$p72: ref, out_$i73: i8, out_$i74: i32, out_$i75: i1)
{

  entry:
    out_$i29, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p67, out_$i68, out_$p69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75 := in_$i29, in_$p22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i32, in_$p34, in_$i35, in_$i36, in_$i37, in_$p38, in_$p39, in_$i40, in_$i41, in_$p42, in_$i43, in_$i44, in_$i45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p51, in_$i52, in_$i53, in_$i54, in_$p55, in_$i56, in_$i57, in_$i58, in_$p59, in_$i60, in_$i61, in_$i62, in_$p67, in_$i68, in_$p69, in_$i70, in_$p71, in_$p72, in_$i73, in_$i74, in_$i75;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb30:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$p22, out_$p23, out_$i24, out_$i25, out_$i26 := out_$p71, out_$p69, out_$i58, out_$i45, out_$i41;
    goto $bb30_dummy;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i58;
    assume true;
    goto $bb30;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i74, 255);
    goto corral_source_split_5860;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i8.i32(out_$i73);
    goto corral_source_split_5859;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i8($M.0, out_$p72);
    goto corral_source_split_5858;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p67, $mul.ref(out_$i68, 10)), $mul.ref(8, 1));
    goto corral_source_split_5857;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref(in_$p11, $mul.ref(out_$i70, 16));
    goto corral_source_split_5856;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i32.i64(out_$i58);
    goto corral_source_split_5855;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref(out_$p67, $mul.ref(out_$i68, 10));
    goto corral_source_split_5854;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i32.i64(out_$i58);
    goto corral_source_split_5853;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, in_$p6);
    goto corral_source_split_5852;

  $bb25:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    out_$i62 := out_$i58;
    assume true;
    goto $bb25;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i60, out_$i58);
    goto corral_source_split_5839;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.0, out_$p59);
    goto corral_source_split_5838;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(3912, 1));
    goto corral_source_split_5837;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5836;

  $bb22:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    out_$i58 := out_$i54;
    goto $bb23;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    out_$i58 := 0;
    goto $bb23;

  $bb21:
    assume out_$i57 == 1;
    goto corral_source_split_5834;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i56, out_$i54);
    goto corral_source_split_5832;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.0, out_$p55);
    goto corral_source_split_5831;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1848, 1));
    goto corral_source_split_5830;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i24, 1);
    call {:si_unique_call 998} {:cexpr "EndIndex"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_5829;

  $bb18:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    out_$i50, out_$p51, out_$i52, out_$i53 := out_$i24, out_$p23, out_$i41, out_$i45;
    assume true;
    goto $bb18;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i32(out_$i48, 0);
    goto corral_source_split_5817;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i8.i32(out_$i47);
    goto corral_source_split_5816;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i8($M.0, out_$p46);
    goto corral_source_split_5815;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p23, $mul.ref(0, 10)), $mul.ref(8, 1));
    goto corral_source_split_5814;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i44, out_$i25);
    call {:si_unique_call 996} {:cexpr "framesize"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_5813;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i16.i32(out_$i43);
    goto corral_source_split_5812;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i16($M.0, out_$p42);
    goto corral_source_split_5811;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p23, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_5810;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_5809;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i26;
    goto $bb16;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i40;
    goto $bb16;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i8($M.0, out_$p39);
    call {:si_unique_call 995} {:cexpr "addr_field"} boogie_si_record_i8(out_$i40);
    goto corral_source_split_5807;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_5806;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p22, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5805;

  $bb14:
    assume out_$i37 == 1;
    goto corral_source_split_5804;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 255);
    goto corral_source_split_5802;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i8.i32(out_$i35);
    goto corral_source_split_5801;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i8($M.0, out_$p34);
    goto corral_source_split_5800;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(24, 1));
    goto corral_source_split_5799;

  $bb11:
    assume out_$i32 == 1;
    goto corral_source_split_5798;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i25, 0);
    goto corral_source_split_5796;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb13;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb13;

  $bb30_dummy:
    call {:si_unique_call 1} out_$i29, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p67, out_$i68, out_$p69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75 := rx_get_frame_loop_$bb5(in_$p0, in_$p6, in_$p11, out_$i29, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p67, out_$i68, out_$p69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75);
    return;

  exit:
    return;
}



procedure rx_get_frame_loop_$bb5(in_$p0: ref, in_$p6: ref, in_$p11: ref, in_$i29: i32, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i8, in_$i32: i1, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$i40: i8, in_$i41: i8, in_$p42: ref, in_$i43: i16, in_$i44: i32, in_$i45: i32, in_$p46: ref, in_$i47: i8, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$p51: ref, in_$i52: i8, in_$i53: i32, in_$i54: i32, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$p67: ref, in_$i68: i64, in_$p69: ref, in_$i70: i64, in_$p71: ref, in_$p72: ref, in_$i73: i8, in_$i74: i32, in_$i75: i1) returns (out_$i29: i32, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i8, out_$i32: i1, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$i40: i8, out_$i41: i8, out_$p42: ref, out_$i43: i16, out_$i44: i32, out_$i45: i32, out_$p46: ref, out_$i47: i8, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$p51: ref, out_$i52: i8, out_$i53: i32, out_$i54: i32, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$p67: ref, out_$i68: i64, out_$p69: ref, out_$i70: i64, out_$p71: ref, out_$p72: ref, out_$i73: i8, out_$i74: i32, out_$i75: i1);



implementation rx_get_frame_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$p6: ref, in_$p11: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i27: i32, in_$i29: i32, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i8, in_$i32: i1, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$i40: i8, in_$i41: i8, in_$p42: ref, in_$i43: i16, in_$i44: i32, in_$i45: i32, in_$p46: ref, in_$i47: i8, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$p51: ref, in_$i52: i8, in_$i53: i32, in_$i54: i32, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$p67: ref, in_$i68: i64, in_$p69: ref, in_$i70: i64, in_$p71: ref, in_$p72: ref, in_$i73: i8, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$i77: i8, in_$i78: i16, in_$p80: ref, in_$i81: i16, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i32, in_$i86: i16, in_$i87: i16, in_$i88: i1, in_$i89: i32, in_$i90: i1, in_$p96: ref, in_$i97: i8, in_$i98: i32, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$p102: ref, in_$i103: i64, in_$p104: ref, in_$i105: i64, in_$p106: ref, in_$p107: ref, in_$i108: i8, in_$i109: i32, in_$i110: i1, in_$i91: i32, in_$i92: i16, in_$i93: i32, in_$i94: i32) returns (out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i27: i32, out_$i29: i32, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i8, out_$i32: i1, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$i40: i8, out_$i41: i8, out_$p42: ref, out_$i43: i16, out_$i44: i32, out_$i45: i32, out_$p46: ref, out_$i47: i8, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$p51: ref, out_$i52: i8, out_$i53: i32, out_$i54: i32, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$p67: ref, out_$i68: i64, out_$p69: ref, out_$i70: i64, out_$p71: ref, out_$p72: ref, out_$i73: i8, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$i77: i8, out_$i78: i16, out_$p80: ref, out_$i81: i16, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i32, out_$i86: i16, out_$i87: i16, out_$i88: i1, out_$i89: i32, out_$i90: i1, out_$p96: ref, out_$i97: i8, out_$i98: i32, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$p102: ref, out_$i103: i64, out_$p104: ref, out_$i105: i64, out_$p106: ref, out_$p107: ref, out_$i108: i8, out_$i109: i32, out_$i110: i1, out_$i91: i32, out_$i92: i16, out_$i93: i32, out_$i94: i32)
{

  entry:
    out_$p19, out_$p20, out_$i21, out_$i27, out_$i29, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p67, out_$i68, out_$p69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$i103, out_$p104, out_$i105, out_$p106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i91, out_$i92, out_$i93, out_$i94 := in_$p19, in_$p20, in_$i21, in_$i27, in_$i29, in_$p22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i32, in_$p34, in_$i35, in_$i36, in_$i37, in_$p38, in_$p39, in_$i40, in_$i41, in_$p42, in_$i43, in_$i44, in_$i45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p51, in_$i52, in_$i53, in_$i54, in_$p55, in_$i56, in_$i57, in_$i58, in_$p59, in_$i60, in_$i61, in_$i62, in_$p67, in_$i68, in_$p69, in_$i70, in_$p71, in_$p72, in_$i73, in_$i74, in_$i75, in_$p76, in_$i77, in_$i78, in_$p80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$p96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$p102, in_$i103, in_$p104, in_$i105, in_$p106, in_$p107, in_$i108, in_$i109, in_$i110, in_$i91, in_$i92, in_$i93, in_$i94;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5783;

  $bb42:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    out_$p19, out_$p20, out_$i21 := out_$p106, out_$p104, out_$i101;
    goto $bb42_dummy;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    out_$i27 := out_$i101;
    assume true;
    goto $bb42;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i109, 255);
    goto corral_source_split_5880;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i8.i32(out_$i108);
    goto corral_source_split_5879;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i8($M.0, out_$p107);
    goto corral_source_split_5878;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p102, $mul.ref(out_$i103, 10)), $mul.ref(8, 1));
    goto corral_source_split_5877;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref(in_$p11, $mul.ref(out_$i105, 16));
    goto corral_source_split_5876;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    out_$i105 := $zext.i32.i64(out_$i101);
    goto corral_source_split_5875;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref(out_$p102, $mul.ref(out_$i103, 10));
    goto corral_source_split_5874;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    out_$i103 := $zext.i32.i64(out_$i101);
    goto corral_source_split_5873;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    out_$p102 := $load.ref($M.0, in_$p6);
    goto corral_source_split_5872;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i32($M.0, in_$p4);
    call {:si_unique_call 1004} {:cexpr "EndIndex"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_5871;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} rx_free_frame_buffers(in_$p0, out_$i21, out_$i50);
    goto corral_source_split_5870;

  $bb40:
    assume {:verifier.code 0} true;
    assume out_$i100 == 1;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    assume out_$i88 == 1;
    goto $bb35;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb36;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i53, 0);
    goto corral_source_split_5868;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_5867;

  $bb32:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    out_$i87 := out_$i78;
    goto $bb33;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    out_$i87 := out_$i86;
    goto $bb33;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    out_$i86 := $trunc.i32.i16(out_$i85);
    call {:si_unique_call 1002} {:cexpr "status"} boogie_si_record_i16(out_$i86);
    goto corral_source_split_5865;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    out_$i85 := $and.i32(out_$i84, 65531);
    goto corral_source_split_5864;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i16.i32(out_$i78);
    goto corral_source_split_5863;

  $bb31:
    assume out_$i83 == 1;
    goto corral_source_split_5862;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i82, 0);
    goto corral_source_split_5827;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i16.i32(out_$i81);
    goto corral_source_split_5826;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i16($M.0, out_$p80);
    goto corral_source_split_5825;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(26, 1));
    goto corral_source_split_5824;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i8.i16(out_$i77);
    call {:si_unique_call 997} {:cexpr "status"} boogie_si_record_i16(out_$i78);
    goto corral_source_split_5823;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i8($M.0, out_$p76);
    goto corral_source_split_5822;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p51, $mul.ref(0, 10)), $mul.ref(8, 1));
    goto corral_source_split_5821;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5819;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    out_$i50, out_$p51, out_$i52, out_$i53 := out_$i24, out_$p23, out_$i41, out_$i45;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i32(out_$i48, 0);
    goto corral_source_split_5817;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i8.i32(out_$i47);
    goto corral_source_split_5816;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i8($M.0, out_$p46);
    goto corral_source_split_5815;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p23, $mul.ref(0, 10)), $mul.ref(8, 1));
    goto corral_source_split_5814;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i44, out_$i25);
    call {:si_unique_call 996} {:cexpr "framesize"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_5813;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i16.i32(out_$i43);
    goto corral_source_split_5812;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i16($M.0, out_$p42);
    goto corral_source_split_5811;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p23, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_5810;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_5809;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i26;
    goto $bb16;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i40;
    goto $bb16;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i8($M.0, out_$p39);
    call {:si_unique_call 995} {:cexpr "addr_field"} boogie_si_record_i8(out_$i40);
    goto corral_source_split_5807;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_5806;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p22, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5805;

  $bb14:
    assume out_$i37 == 1;
    goto corral_source_split_5804;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 255);
    goto corral_source_split_5802;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i8.i32(out_$i35);
    goto corral_source_split_5801;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i8($M.0, out_$p34);
    goto corral_source_split_5800;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(24, 1));
    goto corral_source_split_5799;

  $bb11:
    assume out_$i32 == 1;
    goto corral_source_split_5798;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i25, 0);
    goto corral_source_split_5796;

  $bb5:
    call out_$i29, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p67, out_$i68, out_$p69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75 := rx_get_frame_loop_$bb5(in_$p0, in_$p6, in_$p11, out_$i29, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p67, out_$i68, out_$p69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75);
    goto $bb5_last;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    out_$p22, out_$p23, out_$i24, out_$i25, out_$i26 := out_$p19, out_$p20, out_$i21, 0, $sub.i8(0, 1);
    goto $bb5;

  $bb30:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$p22, out_$p23, out_$i24, out_$i25, out_$i26 := out_$p71, out_$p69, out_$i58, out_$i45, out_$i41;
    assume false;
    return;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i58;
    assume true;
    goto $bb30;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i74, 255);
    goto corral_source_split_5860;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i8.i32(out_$i73);
    goto corral_source_split_5859;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i8($M.0, out_$p72);
    goto corral_source_split_5858;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p67, $mul.ref(out_$i68, 10)), $mul.ref(8, 1));
    goto corral_source_split_5857;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref(in_$p11, $mul.ref(out_$i70, 16));
    goto corral_source_split_5856;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i32.i64(out_$i58);
    goto corral_source_split_5855;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref(out_$p67, $mul.ref(out_$i68, 10));
    goto corral_source_split_5854;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i32.i64(out_$i58);
    goto corral_source_split_5853;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, in_$p6);
    goto corral_source_split_5852;

  $bb25:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    out_$i62 := out_$i58;
    assume true;
    goto $bb25;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i60, out_$i58);
    goto corral_source_split_5839;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.0, out_$p59);
    goto corral_source_split_5838;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(3912, 1));
    goto corral_source_split_5837;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5836;

  $bb22:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    out_$i58 := out_$i54;
    goto $bb23;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    out_$i58 := 0;
    goto $bb23;

  $bb21:
    assume out_$i57 == 1;
    goto corral_source_split_5834;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i56, out_$i54);
    goto corral_source_split_5832;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.0, out_$p55);
    goto corral_source_split_5831;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1848, 1));
    goto corral_source_split_5830;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i24, 1);
    call {:si_unique_call 998} {:cexpr "EndIndex"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_5829;

  $bb18:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb13;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb13;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    out_$i91, out_$i92, out_$i93, out_$i94 := out_$i21, out_$i87, out_$i50, out_$i53;
    assume true;
    goto $bb40;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    out_$i100 := $ne.i32(out_$i98, out_$i99);
    goto corral_source_split_5891;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i8.i32(out_$i52);
    goto corral_source_split_5890;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    out_$i98 := $zext.i8.i32(out_$i97);
    goto corral_source_split_5889;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i8($M.0, out_$p96);
    goto corral_source_split_5888;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(6104, 1)), $mul.ref(24, 1));
    goto corral_source_split_5887;

  $bb37:
    assume out_$i90 == 1;
    goto corral_source_split_5886;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    out_$i91, out_$i92, out_$i93, out_$i94 := out_$i21, out_$i87, out_$i50, out_$i53;
    assume true;
    goto $bb37;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i32(out_$i89, 255);
    goto corral_source_split_5884;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i8.i32(out_$i52);
    goto corral_source_split_5883;

  $bb36:
    assume !(out_$i88 == 1);
    goto corral_source_split_5882;

  $bb42_dummy:
    call {:si_unique_call 1} out_$p19, out_$p20, out_$i21, out_$i27, out_$i29, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p67, out_$i68, out_$p69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$i103, out_$p104, out_$i105, out_$p106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i91, out_$i92, out_$i93, out_$i94 := rx_get_frame_loop_$bb4(in_$p0, in_$p4, in_$p6, in_$p11, out_$p19, out_$p20, out_$i21, out_$i27, out_$i29, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p67, out_$i68, out_$p69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$i103, out_$p104, out_$i105, out_$p106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i91, out_$i92, out_$i93, out_$i94);
    return;

  exit:
    return;
}



procedure rx_get_frame_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$p6: ref, in_$p11: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i27: i32, in_$i29: i32, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i8, in_$i32: i1, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$i40: i8, in_$i41: i8, in_$p42: ref, in_$i43: i16, in_$i44: i32, in_$i45: i32, in_$p46: ref, in_$i47: i8, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$p51: ref, in_$i52: i8, in_$i53: i32, in_$i54: i32, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$p67: ref, in_$i68: i64, in_$p69: ref, in_$i70: i64, in_$p71: ref, in_$p72: ref, in_$i73: i8, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$i77: i8, in_$i78: i16, in_$p80: ref, in_$i81: i16, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i32, in_$i86: i16, in_$i87: i16, in_$i88: i1, in_$i89: i32, in_$i90: i1, in_$p96: ref, in_$i97: i8, in_$i98: i32, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$p102: ref, in_$i103: i64, in_$p104: ref, in_$i105: i64, in_$p106: ref, in_$p107: ref, in_$i108: i8, in_$i109: i32, in_$i110: i1, in_$i91: i32, in_$i92: i16, in_$i93: i32, in_$i94: i32) returns (out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i27: i32, out_$i29: i32, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i8, out_$i32: i1, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$i40: i8, out_$i41: i8, out_$p42: ref, out_$i43: i16, out_$i44: i32, out_$i45: i32, out_$p46: ref, out_$i47: i8, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$p51: ref, out_$i52: i8, out_$i53: i32, out_$i54: i32, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$p67: ref, out_$i68: i64, out_$p69: ref, out_$i70: i64, out_$p71: ref, out_$p72: ref, out_$i73: i8, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$i77: i8, out_$i78: i16, out_$p80: ref, out_$i81: i16, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i32, out_$i86: i16, out_$i87: i16, out_$i88: i1, out_$i89: i32, out_$i90: i1, out_$p96: ref, out_$i97: i8, out_$i98: i32, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$p102: ref, out_$i103: i64, out_$p104: ref, out_$i105: i64, out_$p106: ref, out_$p107: ref, out_$i108: i8, out_$i109: i32, out_$i110: i1, out_$i91: i32, out_$i92: i16, out_$i93: i32, out_$i94: i32);
  modifies $M.0;



implementation rx_free_frame_buffers_loop_$bb1(in_$p0: ref, in_$i2: i32, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$p9: ref, in_$i10: i1, in_$i11: i64, in_$p14: ref, in_$i15: i16, in_$i16: i32, in_$i17: i16, in_$i18: i8, in_$i19: i32, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i3: i8, in_$i4: i32, in_$i25: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$p9: ref, out_$i10: i1, out_$i11: i64, out_$p14: ref, out_$i15: i16, out_$i16: i32, out_$i17: i16, out_$i18: i8, out_$i19: i32, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i3: i8, out_$i4: i32, out_$i25: i32)
{

  entry:
    out_$p5, out_$p6, out_$i7, out_$p9, out_$i10, out_$i11, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i3, out_$i4, out_$i25 := in_$p5, in_$p6, in_$i7, in_$p9, in_$i10, in_$i11, in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i3, in_$i4, in_$i25;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6133;

  $bb10:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    out_$i3, out_$i4 := out_$i18, out_$i23;
    goto $bb10_dummy;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i23;
    assume true;
    goto $bb10;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i8.i1(out_$i18);
    goto corral_source_split_6160;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6159;

  $bb7:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$i23 := out_$i19;
    goto $bb8;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    out_$i23 := 0;
    goto $bb8;

  $bb6:
    assume out_$i22 == 1;
    goto corral_source_split_6157;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i21, out_$i19);
    goto corral_source_split_6155;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_6154;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1848, 1));
    goto corral_source_split_6153;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i4, 1);
    call {:si_unique_call 1024} {:cexpr "first"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_6152;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_6151;

  $bb4:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    out_$i18 := out_$i3;
    goto $bb5;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    out_$i18 := 1;
    goto $bb5;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} write_reg16(in_$p0, $sub.i8(0, 118), out_$i17);
    goto corral_source_split_6149;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    out_$i17 := $trunc.i32.i16(out_$i16);
    goto corral_source_split_6148;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i16.i32(out_$i15);
    goto corral_source_split_6147;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i16($M.0, out_$p14);
    goto corral_source_split_6146;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1864, 1)), $mul.ref(out_$i11, 16)), $mul.ref(8, 1));
    goto corral_source_split_6145;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i32.i64(out_$i4);
    goto corral_source_split_6144;

  $bb3:
    assume out_$i10 == 1;
    goto corral_source_split_6143;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i4, in_$i2);
    goto corral_source_split_6141;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p9, $sub.i8(0, 1));
    goto corral_source_split_6140;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 10)), $mul.ref(8, 1));
    goto corral_source_split_6139;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    goto corral_source_split_6138;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    out_$i7 := $zext.i32.i64(out_$i4);
    goto corral_source_split_6137;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.0, out_$p5);
    goto corral_source_split_6136;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1856, 1));
    goto corral_source_split_6135;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$i7, out_$p9, out_$i10, out_$i11, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i3, out_$i4, out_$i25 := rx_free_frame_buffers_loop_$bb1(in_$p0, in_$i2, out_$p5, out_$p6, out_$i7, out_$p9, out_$i10, out_$i11, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i3, out_$i4, out_$i25);
    return;

  exit:
    return;
}



procedure rx_free_frame_buffers_loop_$bb1(in_$p0: ref, in_$i2: i32, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$p9: ref, in_$i10: i1, in_$i11: i64, in_$p14: ref, in_$i15: i16, in_$i16: i32, in_$i17: i16, in_$i18: i8, in_$i19: i32, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i3: i8, in_$i4: i32, in_$i25: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$p9: ref, out_$i10: i1, out_$i11: i64, out_$p14: ref, out_$i15: i16, out_$i16: i32, out_$i17: i16, out_$i18: i8, out_$i19: i32, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i3: i8, out_$i4: i32, out_$i25: i32);
  modifies $M.0;



implementation trace_block_loop_$bb31(in_$i15: i32, in_$i34: i64, in_$p35: ref, in_$i36: i8, in_$i37: i32, in_$i38: i1, in_$i39: i64, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$i43: i1, in_$i44: i64, in_$p45: ref, in_$i46: i8, in_$i47: i32, in_$i50: i32, in_$i51: i1, in_$i33: i32, in_$p12: ref, in_vslice_dummy_var_356: i32, in_vslice_dummy_var_357: i32) returns (out_$i34: i64, out_$p35: ref, out_$i36: i8, out_$i37: i32, out_$i38: i1, out_$i39: i64, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$i43: i1, out_$i44: i64, out_$p45: ref, out_$i46: i8, out_$i47: i32, out_$i50: i32, out_$i51: i1, out_$i33: i32, out_vslice_dummy_var_356: i32, out_vslice_dummy_var_357: i32)
{

  entry:
    out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i50, out_$i51, out_$i33, out_vslice_dummy_var_356, out_vslice_dummy_var_357 := in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i46, in_$i47, in_$i50, in_$i51, in_$i33, in_vslice_dummy_var_356, in_vslice_dummy_var_357;
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_6220;

  $bb39:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := out_$i50;
    goto $bb39_dummy;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    out_$i51 := $slt.i32(out_$i50, in_$i15);
    goto corral_source_split_6243;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i33, 1);
    call {:si_unique_call 1035} {:cexpr "i"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_6242;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} out_vslice_dummy_var_356 := printk.ref(.str.41);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} out_vslice_dummy_var_357 := printk.ref.i32(.str.40, out_$i47);
    goto corral_source_split_6240;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i8.i32(out_$i46);
    goto corral_source_split_6239;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i8($M.0, out_$p45);
    goto corral_source_split_6238;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(in_$p12, $mul.ref(out_$i44, 1));
    goto corral_source_split_6237;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i33);
    goto corral_source_split_6236;

  $bb36:
    assume out_$i43 == 1;
    goto corral_source_split_6235;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i32(out_$i42, 127);
    goto corral_source_split_6233;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i8.i32(out_$i41);
    goto corral_source_split_6232;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i8($M.0, out_$p40);
    goto corral_source_split_6231;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref(in_$p12, $mul.ref(out_$i39, 1));
    goto corral_source_split_6230;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i33);
    goto corral_source_split_6229;

  $bb33:
    assume out_$i38 == 1;
    goto corral_source_split_6228;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    out_$i38 := $sgt.i32(out_$i37, 31);
    goto corral_source_split_6226;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i8.i32(out_$i36);
    goto corral_source_split_6225;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i8($M.0, out_$p35);
    goto corral_source_split_6224;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref(in_$p12, $mul.ref(out_$i34, 1));
    goto corral_source_split_6223;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i33);
    goto corral_source_split_6222;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb34:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb35;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i43 == 1);
    goto $bb35;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i50, out_$i51, out_$i33, out_vslice_dummy_var_356, out_vslice_dummy_var_357 := trace_block_loop_$bb31(in_$i15, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i50, out_$i51, out_$i33, in_$p12, out_vslice_dummy_var_356, out_vslice_dummy_var_357);
    return;

  exit:
    return;
}



procedure trace_block_loop_$bb31(in_$i15: i32, in_$i34: i64, in_$p35: ref, in_$i36: i8, in_$i37: i32, in_$i38: i1, in_$i39: i64, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$i43: i1, in_$i44: i64, in_$p45: ref, in_$i46: i8, in_$i47: i32, in_$i50: i32, in_$i51: i1, in_$i33: i32, in_$p12: ref, in_vslice_dummy_var_356: i32, in_vslice_dummy_var_357: i32) returns (out_$i34: i64, out_$p35: ref, out_$i36: i8, out_$i37: i32, out_$i38: i1, out_$i39: i64, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$i43: i1, out_$i44: i64, out_$p45: ref, out_$i46: i8, out_$i47: i32, out_$i50: i32, out_$i51: i1, out_$i33: i32, out_vslice_dummy_var_356: i32, out_vslice_dummy_var_357: i32);



implementation trace_block_loop_$bb23(in_$i30: i32, in_$i31: i1, in_$i28: i32, in_vslice_dummy_var_355: i32) returns (out_$i30: i32, out_$i31: i1, out_$i28: i32, out_vslice_dummy_var_355: i32)
{

  entry:
    out_$i30, out_$i31, out_$i28, out_vslice_dummy_var_355 := in_$i30, in_$i31, in_$i28, in_vslice_dummy_var_355;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_6208;

  $bb25:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$i28 := out_$i30;
    goto $bb25_dummy;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    out_$i31 := $sle.i32(out_$i30, 16);
    goto corral_source_split_6212;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i28, 1);
    call {:si_unique_call 1032} {:cexpr "i"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_6211;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} out_vslice_dummy_var_355 := printk.ref(.str.39);
    goto corral_source_split_6210;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb25_dummy:
    call {:si_unique_call 1} out_$i30, out_$i31, out_$i28, out_vslice_dummy_var_355 := trace_block_loop_$bb23(out_$i30, out_$i31, out_$i28, out_vslice_dummy_var_355);
    return;

  exit:
    return;
}



procedure trace_block_loop_$bb23(in_$i30: i32, in_$i31: i1, in_$i28: i32, in_vslice_dummy_var_355: i32) returns (out_$i30: i32, out_$i31: i1, out_$i28: i32, out_vslice_dummy_var_355: i32);



implementation trace_block_loop_$bb15(in_$i15: i32, in_$i19: i64, in_$p20: ref, in_$i21: i8, in_$i22: i32, in_$i24: i32, in_$i25: i1, in_$i18: i32, in_$i26: i32, in_$p12: ref, in_vslice_dummy_var_354: i32) returns (out_$i19: i64, out_$p20: ref, out_$i21: i8, out_$i22: i32, out_$i24: i32, out_$i25: i1, out_$i18: i32, out_$i26: i32, out_vslice_dummy_var_354: i32)
{

  entry:
    out_$i19, out_$p20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i18, out_$i26, out_vslice_dummy_var_354 := in_$i19, in_$p20, in_$i21, in_$i22, in_$i24, in_$i25, in_$i18, in_$i26, in_vslice_dummy_var_354;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_6192;

  $bb17:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := out_$i24;
    goto $bb17_dummy;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i24;
    assume true;
    goto $bb17;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i24, in_$i15);
    goto corral_source_split_6200;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i18, 1);
    call {:si_unique_call 1030} {:cexpr "i"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_6199;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} out_vslice_dummy_var_354 := printk.ref.i32(.str.38, out_$i22);
    goto corral_source_split_6198;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i8.i32(out_$i21);
    goto corral_source_split_6197;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i8($M.0, out_$p20);
    goto corral_source_split_6196;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref(in_$p12, $mul.ref(out_$i19, 1));
    goto corral_source_split_6195;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i18);
    goto corral_source_split_6194;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i19, out_$p20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i18, out_$i26, out_vslice_dummy_var_354 := trace_block_loop_$bb15(in_$i15, out_$i19, out_$p20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i18, out_$i26, in_$p12, out_vslice_dummy_var_354);
    return;

  exit:
    return;
}



procedure trace_block_loop_$bb15(in_$i15: i32, in_$i19: i64, in_$p20: ref, in_$i21: i8, in_$i22: i32, in_$i24: i32, in_$i25: i1, in_$i18: i32, in_$i26: i32, in_$p12: ref, in_vslice_dummy_var_354: i32) returns (out_$i19: i64, out_$p20: ref, out_$i21: i8, out_$i22: i32, out_$i24: i32, out_$i25: i1, out_$i18: i32, out_$i26: i32, out_vslice_dummy_var_354: i32);



implementation trace_block_loop_$bb7(in_$i14: i1, in_$i15: i32, in_$i16: i1, in_$i19: i64, in_$p20: ref, in_$i21: i8, in_$i22: i32, in_$i24: i32, in_$i25: i1, in_$i18: i32, in_$i26: i32, in_$i17: i32, in_$i27: i1, in_$i30: i32, in_$i31: i1, in_$i28: i32, in_$i32: i1, in_$i34: i64, in_$p35: ref, in_$i36: i8, in_$i37: i32, in_$i38: i1, in_$i39: i64, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$i43: i1, in_$i44: i64, in_$p45: ref, in_$i46: i8, in_$i47: i32, in_$i50: i32, in_$i51: i1, in_$i33: i32, in_$i53: i64, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p12: ref, in_$i13: i32, in_vslice_dummy_var_354: i32, in_vslice_dummy_var_355: i32, in_vslice_dummy_var_356: i32, in_vslice_dummy_var_357: i32, in_vslice_dummy_var_358: i32) returns (out_$i14: i1, out_$i15: i32, out_$i16: i1, out_$i19: i64, out_$p20: ref, out_$i21: i8, out_$i22: i32, out_$i24: i32, out_$i25: i1, out_$i18: i32, out_$i26: i32, out_$i17: i32, out_$i27: i1, out_$i30: i32, out_$i31: i1, out_$i28: i32, out_$i32: i1, out_$i34: i64, out_$p35: ref, out_$i36: i8, out_$i37: i32, out_$i38: i1, out_$i39: i64, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$i43: i1, out_$i44: i64, out_$p45: ref, out_$i46: i8, out_$i47: i32, out_$i50: i32, out_$i51: i1, out_$i33: i32, out_$i53: i64, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p12: ref, out_$i13: i32, out_vslice_dummy_var_354: i32, out_vslice_dummy_var_355: i32, out_vslice_dummy_var_356: i32, out_vslice_dummy_var_357: i32, out_vslice_dummy_var_358: i32)
{

  entry:
    out_$i14, out_$i15, out_$i16, out_$i19, out_$p20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i18, out_$i26, out_$i17, out_$i27, out_$i30, out_$i31, out_$i28, out_$i32, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i50, out_$i51, out_$i33, out_$i53, out_$p54, out_$i55, out_$i56, out_$p12, out_$i13, out_vslice_dummy_var_354, out_vslice_dummy_var_355, out_vslice_dummy_var_356, out_vslice_dummy_var_357, out_vslice_dummy_var_358 := in_$i14, in_$i15, in_$i16, in_$i19, in_$p20, in_$i21, in_$i22, in_$i24, in_$i25, in_$i18, in_$i26, in_$i17, in_$i27, in_$i30, in_$i31, in_$i28, in_$i32, in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i46, in_$i47, in_$i50, in_$i51, in_$i33, in_$i53, in_$p54, in_$i55, in_$i56, in_$p12, in_$i13, in_vslice_dummy_var_354, in_vslice_dummy_var_355, in_vslice_dummy_var_356, in_vslice_dummy_var_357, in_vslice_dummy_var_358;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6181;

  $bb42:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$p12, out_$i13 := out_$p54, out_$i55;
    goto $bb42_dummy;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i32(out_$i55, 0);
    goto corral_source_split_6251;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    out_$i55 := $sub.i32(out_$i13, out_$i15);
    call {:si_unique_call 1037} {:cexpr "count"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_6250;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(out_$p12, $mul.ref(out_$i53, 1));
    goto corral_source_split_6249;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    out_$i53 := $sext.i32.i64(out_$i15);
    goto corral_source_split_6248;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} out_vslice_dummy_var_358 := printk.ref(.str.42);
    goto corral_source_split_6247;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb30;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb40:
    assume !(out_$i51 == 1);
    goto corral_source_split_6245;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    out_$i51 := $slt.i32(out_$i50, out_$i15);
    goto corral_source_split_6243;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i33, 1);
    call {:si_unique_call 1035} {:cexpr "i"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_6242;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} out_vslice_dummy_var_356 := printk.ref(.str.41);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} out_vslice_dummy_var_357 := printk.ref.i32(.str.40, out_$i47);
    goto corral_source_split_6240;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i8.i32(out_$i46);
    goto corral_source_split_6239;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i8($M.0, out_$p45);
    goto corral_source_split_6238;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p12, $mul.ref(out_$i44, 1));
    goto corral_source_split_6237;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i33);
    goto corral_source_split_6236;

  $bb36:
    assume out_$i43 == 1;
    goto corral_source_split_6235;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i32(out_$i42, 127);
    goto corral_source_split_6233;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i8.i32(out_$i41);
    goto corral_source_split_6232;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i8($M.0, out_$p40);
    goto corral_source_split_6231;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref(out_$p12, $mul.ref(out_$i39, 1));
    goto corral_source_split_6230;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i33);
    goto corral_source_split_6229;

  $bb33:
    assume out_$i38 == 1;
    goto corral_source_split_6228;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    out_$i38 := $sgt.i32(out_$i37, 31);
    goto corral_source_split_6226;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i8.i32(out_$i36);
    goto corral_source_split_6225;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i8($M.0, out_$p35);
    goto corral_source_split_6224;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref(out_$p12, $mul.ref(out_$i34, 1));
    goto corral_source_split_6223;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i33);
    goto corral_source_split_6222;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb31:
    call out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i50, out_$i51, out_$i33, out_vslice_dummy_var_356, out_vslice_dummy_var_357 := trace_block_loop_$bb31(out_$i15, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i50, out_$i51, out_$i33, out_$p12, out_vslice_dummy_var_356, out_vslice_dummy_var_357);
    goto $bb31_last;

  $bb31_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6220;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    out_$i33 := 0;
    goto $bb31;

  $bb39:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := out_$i50;
    assume false;
    return;

  $bb28:
    assume out_$i32 == 1;
    goto corral_source_split_6218;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(0, out_$i15);
    goto corral_source_split_6216;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i27 == 1);
    goto $bb22;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26:
    assume !(out_$i31 == 1);
    goto corral_source_split_6214;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    out_$i31 := $sle.i32(out_$i30, 16);
    goto corral_source_split_6212;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i28, 1);
    call {:si_unique_call 1032} {:cexpr "i"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_6211;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} out_vslice_dummy_var_355 := printk.ref(.str.39);
    goto corral_source_split_6210;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb23:
    call out_$i30, out_$i31, out_$i28, out_vslice_dummy_var_355 := trace_block_loop_$bb23(out_$i30, out_$i31, out_$i28, out_vslice_dummy_var_355);
    goto $bb23_last;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6208;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i17;
    goto $bb23;

  $bb25:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$i28 := out_$i30;
    assume false;
    return;

  $bb20:
    assume out_$i27 == 1;
    goto corral_source_split_6206;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i27 := $sle.i32(out_$i17, 16);
    goto corral_source_split_6204;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i16 == 1);
    goto $bb14;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i26;
    goto $bb14;

  $bb18:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6202;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i24;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i24, out_$i15);
    goto corral_source_split_6200;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i18, 1);
    call {:si_unique_call 1030} {:cexpr "i"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_6199;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} out_vslice_dummy_var_354 := printk.ref.i32(.str.38, out_$i22);
    goto corral_source_split_6198;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i8.i32(out_$i21);
    goto corral_source_split_6197;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i8($M.0, out_$p20);
    goto corral_source_split_6196;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref(out_$p12, $mul.ref(out_$i19, 1));
    goto corral_source_split_6195;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i18);
    goto corral_source_split_6194;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb15:
    call out_$i19, out_$p20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i18, out_$i26, out_vslice_dummy_var_354 := trace_block_loop_$bb15(out_$i15, out_$i19, out_$p20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i18, out_$i26, out_$p12, out_vslice_dummy_var_354);
    goto $bb15_last;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6192;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    out_$i18 := 0;
    goto $bb15;

  $bb17:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := out_$i24;
    assume false;
    return;

  $bb12:
    assume out_$i16 == 1;
    goto corral_source_split_6190;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    out_$i17 := 0;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(0, out_$i15);
    goto corral_source_split_6188;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6187;

  $bb10:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    out_$i15 := out_$i13;
    goto $bb11;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    out_$i15 := 16;
    goto $bb11;

  $bb9:
    assume out_$i14 == 1;
    goto corral_source_split_6185;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i14 := $sgt.i32(out_$i13, 16);
    goto corral_source_split_6183;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb34:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb35;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i43 == 1);
    goto $bb35;

  $bb42_dummy:
    call {:si_unique_call 1} out_$i14, out_$i15, out_$i16, out_$i19, out_$p20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i18, out_$i26, out_$i17, out_$i27, out_$i30, out_$i31, out_$i28, out_$i32, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i50, out_$i51, out_$i33, out_$i53, out_$p54, out_$i55, out_$i56, out_$p12, out_$i13, out_vslice_dummy_var_354, out_vslice_dummy_var_355, out_vslice_dummy_var_356, out_vslice_dummy_var_357, out_vslice_dummy_var_358 := trace_block_loop_$bb7(out_$i14, out_$i15, out_$i16, out_$i19, out_$p20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i18, out_$i26, out_$i17, out_$i27, out_$i30, out_$i31, out_$i28, out_$i32, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i50, out_$i51, out_$i33, out_$i53, out_$p54, out_$i55, out_$i56, out_$p12, out_$i13, out_vslice_dummy_var_354, out_vslice_dummy_var_355, out_vslice_dummy_var_356, out_vslice_dummy_var_357, out_vslice_dummy_var_358);
    return;

  exit:
    return;
}



procedure trace_block_loop_$bb7(in_$i14: i1, in_$i15: i32, in_$i16: i1, in_$i19: i64, in_$p20: ref, in_$i21: i8, in_$i22: i32, in_$i24: i32, in_$i25: i1, in_$i18: i32, in_$i26: i32, in_$i17: i32, in_$i27: i1, in_$i30: i32, in_$i31: i1, in_$i28: i32, in_$i32: i1, in_$i34: i64, in_$p35: ref, in_$i36: i8, in_$i37: i32, in_$i38: i1, in_$i39: i64, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$i43: i1, in_$i44: i64, in_$p45: ref, in_$i46: i8, in_$i47: i32, in_$i50: i32, in_$i51: i1, in_$i33: i32, in_$i53: i64, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p12: ref, in_$i13: i32, in_vslice_dummy_var_354: i32, in_vslice_dummy_var_355: i32, in_vslice_dummy_var_356: i32, in_vslice_dummy_var_357: i32, in_vslice_dummy_var_358: i32) returns (out_$i14: i1, out_$i15: i32, out_$i16: i1, out_$i19: i64, out_$p20: ref, out_$i21: i8, out_$i22: i32, out_$i24: i32, out_$i25: i1, out_$i18: i32, out_$i26: i32, out_$i17: i32, out_$i27: i1, out_$i30: i32, out_$i31: i1, out_$i28: i32, out_$i32: i1, out_$i34: i64, out_$p35: ref, out_$i36: i8, out_$i37: i32, out_$i38: i1, out_$i39: i64, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$i43: i1, out_$i44: i64, out_$p45: ref, out_$i46: i8, out_$i47: i32, out_$i50: i32, out_$i51: i1, out_$i33: i32, out_$i53: i64, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p12: ref, out_$i13: i32, out_vslice_dummy_var_354: i32, out_vslice_dummy_var_355: i32, out_vslice_dummy_var_356: i32, out_vslice_dummy_var_357: i32, out_vslice_dummy_var_358: i32);



implementation tx_load_fifo_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p8: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$i18: i32, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$i27: i8, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$i35: i32, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i8, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$p62: ref, in_$p63: ref, in_$i64: i16, in_$i65: i32, in_$i66: i16, in_$p67: ref, in_$i68: i32, in_$i69: i32, in_$p70: ref, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i81: i32, in_$i82: i8, in_$i83: i32, in_$i84: i8, in_$p85: ref, in_$p86: ref, in_$i87: i32, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$p95: ref, in_$i96: i8, in_$i97: i32, in_$i98: i8, in_$p99: ref, in_$i100: i32, in_$p101: ref, in_$i102: i32, in_$i103: i1, in_$p104: ref, in_$i105: i32, in_$p106: ref, in_$i107: i32, in_$i108: i32, in_$p109: ref, in_$p110: ref, in_$i111: i32, in_$i112: i32, in_$p113: ref, in_$p115: ref, in_$i116: i32, in_$i117: i32, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$i122: i8, in_$i123: i32, in_$i124: i32, in_$i125: i1) returns (out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$i18: i32, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$i27: i8, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$i35: i32, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i8, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$p62: ref, out_$p63: ref, out_$i64: i16, out_$i65: i32, out_$i66: i16, out_$p67: ref, out_$i68: i32, out_$i69: i32, out_$p70: ref, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i81: i32, out_$i82: i8, out_$i83: i32, out_$i84: i8, out_$p85: ref, out_$p86: ref, out_$i87: i32, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$p95: ref, out_$i96: i8, out_$i97: i32, out_$i98: i8, out_$p99: ref, out_$i100: i32, out_$p101: ref, out_$i102: i32, out_$i103: i1, out_$p104: ref, out_$i105: i32, out_$p106: ref, out_$i107: i32, out_$i108: i32, out_$p109: ref, out_$p110: ref, out_$i111: i32, out_$i112: i32, out_$p113: ref, out_$p115: ref, out_$i116: i32, out_$i117: i32, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$i122: i8, out_$i123: i32, out_$i124: i32, out_$i125: i1)
{

  entry:
    out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$p28, out_$p29, out_$i30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$p51, out_$p52, out_$i53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p72, out_$i73, out_$i74, out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$p101, out_$i102, out_$i103, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$p113, out_$p115, out_$i116, out_$i117, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125 := in_$p11, in_$i12, in_$i13, in_$p14, in_$i15, in_$i16, in_$p17, in_$i18, in_$p19, in_$i20, in_$i21, in_$p22, in_$p23, in_$p24, in_$i25, in_$p26, in_$i27, in_$p28, in_$p29, in_$i30, in_$p31, in_$i32, in_$i33, in_$p34, in_$i35, in_$p36, in_$i37, in_$i38, in_$p39, in_$p40, in_$i41, in_$p42, in_$i43, in_$i44, in_$p45, in_$p46, in_$p47, in_$i48, in_$p49, in_$i50, in_$p51, in_$p52, in_$i53, in_$p54, in_$i55, in_$i56, in_$p57, in_$i58, in_$p59, in_$i60, in_$i61, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$p70, in_$p72, in_$i73, in_$i74, in_$p76, in_$p77, in_$i78, in_$i79, in_$p80, in_$i81, in_$i82, in_$i83, in_$i84, in_$p85, in_$p86, in_$i87, in_$p88, in_$i89, in_$i90, in_$p91, in_$p92, in_$p93, in_$i94, in_$p95, in_$i96, in_$i97, in_$i98, in_$p99, in_$i100, in_$p101, in_$i102, in_$i103, in_$p104, in_$i105, in_$p106, in_$i107, in_$i108, in_$p109, in_$p110, in_$i111, in_$i112, in_$p113, in_$p115, in_$i116, in_$i117, in_$p119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} out_$i122 := read_reg(in_$p0, 34);
    call {:si_unique_call 1075} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i122);
    goto corral_source_split_6411;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i121 == 1;
    goto $bb31_dummy;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    out_$i121 := $ne.i32(out_$i120, 0);
    goto corral_source_split_6505;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i32($M.0, in_$p8);
    goto corral_source_split_6504;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p119, out_$i117);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p76, out_$i74);
    goto corral_source_split_6502;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(16, 1));
    goto corral_source_split_6501;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i32(out_$i73, 2);
    goto corral_source_split_6500;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.0, out_$p72);
    goto corral_source_split_6499;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(16, 1));
    goto corral_source_split_6498;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p70, out_$i69);
    goto corral_source_split_6497;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_6496;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i32(out_$i68, $sub.i32(0, 2));
    goto corral_source_split_6495;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.0, out_$p67);
    goto corral_source_split_6494;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_6493;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} write_reg16(in_$p0, 32, out_$i66);
    goto corral_source_split_6492;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i32.i16(out_$i65);
    goto corral_source_split_6491;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i16.i32(out_$i64);
    goto corral_source_split_6490;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i16($M.22, out_$p63);
    goto corral_source_split_6489;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p63 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_6488;

  $bb22:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p62, out_$i61);
    goto corral_source_split_6486;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6485;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    out_$i61 := $sub.i32(out_$i58, out_$i60);
    goto corral_source_split_6484;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.0, out_$p59);
    goto corral_source_split_6483;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_6482;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.0, out_$p57);
    goto corral_source_split_6481;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6480;

  $bb21:
    assume out_$i56 == 1;
    goto corral_source_split_6479;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    out_$i56 := $uge.i32(out_$i53, out_$i55);
    goto corral_source_split_6477;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.0, out_$p54);
    goto corral_source_split_6476;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_6475;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.0, out_$p52);
    goto corral_source_split_6474;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6473;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, out_$p51, out_$i50);
    goto corral_source_split_6472;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p1, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_6471;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i8($M.0, out_$p49);
    goto corral_source_split_6470;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(out_$p47, $mul.ref(out_$i48, 1));
    goto corral_source_split_6469;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i41);
    goto corral_source_split_6468;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_6467;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1176, 1));
    goto corral_source_split_6466;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p45, out_$i44);
    goto corral_source_split_6465;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6464;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i43, 1);
    goto corral_source_split_6463;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.0, out_$p42);
    goto corral_source_split_6462;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6461;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.0, out_$p40);
    call {:si_unique_call 1077} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_6460;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6459;

  $bb19:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p39, out_$i38);
    goto corral_source_split_6457;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6456;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    out_$i38 := $sub.i32(out_$i35, out_$i37);
    goto corral_source_split_6455;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, out_$p36);
    goto corral_source_split_6454;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_6453;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, out_$p34);
    goto corral_source_split_6452;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6451;

  $bb18:
    assume out_$i33 == 1;
    goto corral_source_split_6450;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    out_$i33 := $uge.i32(out_$i30, out_$i32);
    goto corral_source_split_6448;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.0, out_$p31);
    goto corral_source_split_6447;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_6446;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, out_$p29);
    goto corral_source_split_6445;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6444;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, out_$p28, out_$i27);
    goto corral_source_split_6443;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p1, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_6442;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i8($M.0, out_$p26);
    goto corral_source_split_6441;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p24, $mul.ref(out_$i25, 1));
    goto corral_source_split_6440;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i18);
    goto corral_source_split_6439;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_6438;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1176, 1));
    goto corral_source_split_6437;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p22, out_$i21);
    goto corral_source_split_6436;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6435;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i20, 1);
    goto corral_source_split_6434;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_6433;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6432;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, out_$p17);
    call {:si_unique_call 1076} {:cexpr "tmp"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_6431;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6430;

  $bb16:
    assume out_$i16 == 1;
    goto corral_source_split_6429;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i15, 0);
    goto corral_source_split_6423;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.0, out_$p14);
    goto corral_source_split_6422;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1160, 1));
    goto corral_source_split_6421;

  $bb13:
    assume out_$i13 == 1;
    goto corral_source_split_6420;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    out_$i13 := $sgt.i32(out_$i12, 1);
    goto corral_source_split_6418;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, out_$p11);
    goto corral_source_split_6417;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_6416;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb33:
    assume out_$i125 == 1;
    goto corral_source_split_6560;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    out_$i125 := $ne.i32(out_$i124, 0);
    goto corral_source_split_6414;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    out_$i124 := $and.i32(out_$i123, 2);
    goto corral_source_split_6413;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i8.i32(out_$i122);
    goto corral_source_split_6412;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(16, 1));
    goto corral_source_split_6542;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    out_$i117 := $add.i32(out_$i116, 1);
    goto corral_source_split_6541;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i32($M.0, out_$p115);
    goto corral_source_split_6540;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(16, 1));
    goto corral_source_split_6539;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p113, out_$i112);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p85, 0);
    goto corral_source_split_6515;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1160, 1));
    goto corral_source_split_6514;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} write_reg(in_$p0, 32, out_$i84);
    goto corral_source_split_6513;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    out_$i84 := $trunc.i32.i8(out_$i83);
    goto corral_source_split_6512;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i8.i32(out_$i82);
    goto corral_source_split_6511;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    out_$i82 := $trunc.i32.i8(out_$i81);
    goto corral_source_split_6510;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i32($M.0, out_$p80);
    goto corral_source_split_6509;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1160, 1));
    goto corral_source_split_6508;

  $bb25:
    assume out_$i79 == 1;
    goto corral_source_split_6507;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_6427;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.0, out_$p77);
    goto corral_source_split_6426;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1160, 1));
    goto corral_source_split_6425;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i13 == 1);
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i16 == 1);
    goto $bb15;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_6556;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    out_$i112 := $sub.i32(out_$i111, 1);
    goto corral_source_split_6555;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i32($M.0, out_$p110);
    goto corral_source_split_6554;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_6553;

  $bb29:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p109, out_$i108);
    goto corral_source_split_6551;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6550;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    out_$i108 := $sub.i32(out_$i105, out_$i107);
    goto corral_source_split_6549;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i32($M.0, out_$p106);
    goto corral_source_split_6548;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_6547;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i32($M.0, out_$p104);
    goto corral_source_split_6546;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6545;

  $bb28:
    assume out_$i103 == 1;
    goto corral_source_split_6544;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    out_$i103 := $uge.i32(out_$i100, out_$i102);
    goto corral_source_split_6537;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i32($M.0, out_$p101);
    goto corral_source_split_6536;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_6535;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i32($M.0, out_$p99);
    goto corral_source_split_6534;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6533;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} write_reg(in_$p0, 32, out_$i98);
    goto corral_source_split_6532;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    out_$i98 := $trunc.i32.i8(out_$i97);
    goto corral_source_split_6531;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    out_$i97 := $zext.i8.i32(out_$i96);
    goto corral_source_split_6530;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i8($M.0, out_$p95);
    goto corral_source_split_6529;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref(out_$p93, $mul.ref(out_$i94, 1));
    goto corral_source_split_6528;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    out_$i94 := $sext.i32.i64(out_$i87);
    goto corral_source_split_6527;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.0, out_$p92);
    goto corral_source_split_6526;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1176, 1));
    goto corral_source_split_6525;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p91, out_$i90);
    goto corral_source_split_6524;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6523;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    out_$i90 := $add.i32(out_$i89, 1);
    goto corral_source_split_6522;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i32($M.0, out_$p88);
    goto corral_source_split_6521;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6520;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.0, out_$p86);
    call {:si_unique_call 1080} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i87);
    goto corral_source_split_6519;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1188, 1));
    goto corral_source_split_6518;

  $bb26:
    assume !(out_$i79 == 1);
    goto corral_source_split_6517;

  $bb31_dummy:
    call {:si_unique_call 1} out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$p28, out_$p29, out_$i30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$p51, out_$p52, out_$i53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p72, out_$i73, out_$i74, out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$p101, out_$i102, out_$i103, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$p113, out_$p115, out_$i116, out_$i117, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125 := tx_load_fifo_loop_$bb11(in_$p0, in_$p1, in_$p8, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$p28, out_$p29, out_$i30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$p51, out_$p52, out_$i53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p72, out_$i73, out_$i74, out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$p101, out_$i102, out_$i103, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$p113, out_$p115, out_$i116, out_$i117, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125);
    return;

  exit:
    return;
}



procedure tx_load_fifo_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p8: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$i18: i32, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$i27: i8, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$i35: i32, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i8, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$p62: ref, in_$p63: ref, in_$i64: i16, in_$i65: i32, in_$i66: i16, in_$p67: ref, in_$i68: i32, in_$i69: i32, in_$p70: ref, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i81: i32, in_$i82: i8, in_$i83: i32, in_$i84: i8, in_$p85: ref, in_$p86: ref, in_$i87: i32, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$p95: ref, in_$i96: i8, in_$i97: i32, in_$i98: i8, in_$p99: ref, in_$i100: i32, in_$p101: ref, in_$i102: i32, in_$i103: i1, in_$p104: ref, in_$i105: i32, in_$p106: ref, in_$i107: i32, in_$i108: i32, in_$p109: ref, in_$p110: ref, in_$i111: i32, in_$i112: i32, in_$p113: ref, in_$p115: ref, in_$i116: i32, in_$i117: i32, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$i122: i8, in_$i123: i32, in_$i124: i32, in_$i125: i1) returns (out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$i18: i32, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$i27: i8, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$i35: i32, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i8, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$p62: ref, out_$p63: ref, out_$i64: i16, out_$i65: i32, out_$i66: i16, out_$p67: ref, out_$i68: i32, out_$i69: i32, out_$p70: ref, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i81: i32, out_$i82: i8, out_$i83: i32, out_$i84: i8, out_$p85: ref, out_$p86: ref, out_$i87: i32, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$p95: ref, out_$i96: i8, out_$i97: i32, out_$i98: i8, out_$p99: ref, out_$i100: i32, out_$p101: ref, out_$i102: i32, out_$i103: i1, out_$p104: ref, out_$i105: i32, out_$p106: ref, out_$i107: i32, out_$i108: i32, out_$p109: ref, out_$p110: ref, out_$i111: i32, out_$i112: i32, out_$p113: ref, out_$p115: ref, out_$i116: i32, out_$i117: i32, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$i122: i8, out_$i123: i32, out_$i124: i32, out_$i125: i1);
  modifies $M.0, $M.22;



implementation load_pci_memory_loop_$bb4(in_$p0: ref, in_$i8: i32, in_$i15: i32, in_$i16: i64, in_$i18: i32, in_$i19: i64, in_$p20: ref, in_$i21: i32, in_$i22: i64, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i16, in_$i27: i32, in_$i28: i1, in_$i12: i16, in_$p13: ref, in_$p14: ref, in_$p29: ref, in_$p30: ref, in_cmdloc_dummy_var_27: [ref]i8, in_cmdloc_dummy_var_28: [ref]i8, in_cmdloc_dummy_var_29: [ref]i8, in_vslice_dummy_var_362: i8) returns (out_$i15: i32, out_$i16: i64, out_$i18: i32, out_$i19: i64, out_$p20: ref, out_$i21: i32, out_$i22: i64, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i16, out_$i27: i32, out_$i28: i1, out_$i12: i16, out_$p13: ref, out_$p14: ref, out_$p29: ref, out_$p30: ref, out_cmdloc_dummy_var_27: [ref]i8, out_cmdloc_dummy_var_28: [ref]i8, out_cmdloc_dummy_var_29: [ref]i8, out_vslice_dummy_var_362: i8)
{

  entry:
    out_$i15, out_$i16, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i12, out_$p13, out_$p14, out_$p29, out_$p30, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29, out_vslice_dummy_var_362 := in_$i15, in_$i16, in_$i18, in_$i19, in_$p20, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i12, in_$p13, in_$p14, in_$p29, in_$p30, in_cmdloc_dummy_var_27, in_cmdloc_dummy_var_28, in_cmdloc_dummy_var_29, in_vslice_dummy_var_362;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6574;

  $bb6:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i12, out_$p13, out_$p14 := out_$i26, out_$p20, out_$p23;
    goto $bb6_dummy;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    out_$p29, out_$p30 := out_$p23, out_$p20;
    assume true;
    goto $bb6;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i27, in_$i8);
    goto corral_source_split_6590;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i16.i32(out_$i26);
    goto corral_source_split_6589;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    out_$i26 := $trunc.i32.i16(out_$i25);
    call {:si_unique_call 1086} {:cexpr "i"} boogie_si_record_i16(out_$i26);
    goto corral_source_split_6588;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i24, 1);
    goto corral_source_split_6587;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i16.i32(out_$i12);
    goto corral_source_split_6586;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p14, $mul.ref(out_$i22, 1));
    goto corral_source_split_6585;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i32.i64(out_$i21);
    goto corral_source_split_6584;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    out_$i21 := $M.23;
    goto corral_source_split_6583;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref(out_$p13, $mul.ref(out_$i19, 1));
    goto corral_source_split_6582;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i32.i64(out_$i18);
    goto corral_source_split_6581;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    out_$i18 := $M.23;
    goto corral_source_split_6580;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} out_vslice_dummy_var_362 := read_status_reg(in_$p0);
    goto corral_source_split_6579;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_27 := $M.0;
    out_cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 1084} out_cmdloc_dummy_var_29 := $memcpy.i8(out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_$p13, out_$p14, out_$i16, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_29;
    goto corral_source_split_6578;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i32.i64(out_$i15);
    goto corral_source_split_6577;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i15 := $M.23;
    goto corral_source_split_6576;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i12, out_$p13, out_$p14, out_$p29, out_$p30, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29, out_vslice_dummy_var_362 := load_pci_memory_loop_$bb4(in_$p0, in_$i8, out_$i15, out_$i16, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i12, out_$p13, out_$p14, out_$p29, out_$p30, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29, out_vslice_dummy_var_362);
    return;

  exit:
    return;
}



procedure load_pci_memory_loop_$bb4(in_$p0: ref, in_$i8: i32, in_$i15: i32, in_$i16: i64, in_$i18: i32, in_$i19: i64, in_$p20: ref, in_$i21: i32, in_$i22: i64, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i16, in_$i27: i32, in_$i28: i1, in_$i12: i16, in_$p13: ref, in_$p14: ref, in_$p29: ref, in_$p30: ref, in_cmdloc_dummy_var_27: [ref]i8, in_cmdloc_dummy_var_28: [ref]i8, in_cmdloc_dummy_var_29: [ref]i8, in_vslice_dummy_var_362: i8) returns (out_$i15: i32, out_$i16: i64, out_$i18: i32, out_$i19: i64, out_$p20: ref, out_$i21: i32, out_$i22: i64, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i16, out_$i27: i32, out_$i28: i1, out_$i12: i16, out_$p13: ref, out_$p14: ref, out_$p29: ref, out_$p30: ref, out_cmdloc_dummy_var_27: [ref]i8, out_cmdloc_dummy_var_28: [ref]i8, out_cmdloc_dummy_var_29: [ref]i8, out_vslice_dummy_var_362: i8);
  modifies $M.0;



implementation isr_rxrdy_loop_$bb7(in_$p0: ref, in_$i13: i8, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$p31: ref, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$i36: i32, in_$i37: i32, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$p45: ref, in_$i46: i32, in_$p47: ref, in_$i48: i8, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i52: i8, in_$i53: i16, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i58: i16, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$i62: i16, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i66: i32, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i74: i8, in_$i75: i32, in_$i76: i8, in_$p77: ref, in_$i78: i32, in_$i79: i8, in_$i80: i8, in_$i81: i32, in_$i82: i8, in_$i84: i1, in_$p85: ref, in_$i12: i16, in_vslice_dummy_var_364: i32, in_vslice_dummy_var_365: i32, in_vslice_dummy_var_366: i32) returns (out_$i13: i8, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$p31: ref, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$i36: i32, out_$i37: i32, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$p45: ref, out_$i46: i32, out_$p47: ref, out_$i48: i8, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i52: i8, out_$i53: i16, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i58: i16, out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$i62: i16, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i66: i32, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i74: i8, out_$i75: i32, out_$i76: i8, out_$p77: ref, out_$i78: i32, out_$i79: i8, out_$i80: i8, out_$i81: i32, out_$i82: i8, out_$i84: i1, out_$p85: ref, out_$i12: i16, out_vslice_dummy_var_364: i32, out_vslice_dummy_var_365: i32, out_vslice_dummy_var_366: i32)
{

  entry:
    out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i67, out_$i68, out_$i69, out_$i70, out_$i66, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i84, out_$p85, out_$i12, out_vslice_dummy_var_364, out_vslice_dummy_var_365, out_vslice_dummy_var_366 := in_$i13, in_$p14, in_$i15, in_$i16, in_$p17, in_$i18, in_$i19, in_$i20, in_$p21, in_$p22, in_$i23, in_$i25, in_$i26, in_$i27, in_$p28, in_$i29, in_$i30, in_$p31, in_$i32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$i41, in_$p42, in_$i43, in_$i44, in_$p45, in_$i46, in_$p47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i67, in_$i68, in_$i69, in_$i70, in_$i66, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$p77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i84, in_$p85, in_$i12, in_vslice_dummy_var_364, in_vslice_dummy_var_365, in_vslice_dummy_var_366;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6727;

  $bb23:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := out_$i53;
    goto $bb23_dummy;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i32(out_$i55, 0);
    goto corral_source_split_6784;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    out_$i55 := $and.i32(out_$i54, 1);
    goto corral_source_split_6783;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i16.i32(out_$i53);
    goto corral_source_split_6782;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i8.i16(out_$i52);
    call {:si_unique_call 1128} {:cexpr "status"} boogie_si_record_i16(out_$i53);
    goto corral_source_split_6781;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} out_$i52 := read_reg(in_$p0, 60);
    call {:si_unique_call 1127} {:cexpr "tmp"} boogie_si_record_i8(out_$i52);
    goto corral_source_split_6780;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i51 == 1;
    goto corral_source_split_6778;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i32(out_$i50, 0);
    goto corral_source_split_6761;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    out_$i50 := $and.i32(out_$i46, out_$i49);
    goto corral_source_split_6760;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i8.i32(out_$i48);
    goto corral_source_split_6759;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i8($M.0, out_$p47);
    goto corral_source_split_6758;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1169, 1));
    goto corral_source_split_6757;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i16.i32(out_$i12);
    goto corral_source_split_6756;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p31, out_$i30);
    goto corral_source_split_6749;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i29, 1);
    out_$p31 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(28, 1));
    goto corral_source_split_6748;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, out_$p28);
    goto corral_source_split_6747;

  $bb11:
    assume out_$i27 == 1;
    out_$p28 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(28, 1));
    goto corral_source_split_6746;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_6744;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    out_$i26 := $and.i32(out_$i25, 32);
    goto corral_source_split_6743;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i16.i32(out_$i12);
    goto corral_source_split_6742;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} out_vslice_dummy_var_364 := printk.ref.ref.i32.ref.i32(.str.7, .str.1, 2187, out_$p22, out_$i23);
    goto corral_source_split_6741;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i16.i32(out_$i12);
    goto corral_source_split_6740;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_6739;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(6009, 1));
    goto corral_source_split_6738;

  $bb9:
    assume out_$i20 == 1;
    goto corral_source_split_6737;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_6735;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    out_$i19 := $and.i32(out_$i18, 56);
    goto corral_source_split_6734;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i16.i32(out_$i12);
    goto corral_source_split_6733;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p17, out_$i16);
    goto corral_source_split_6732;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i15, 1);
    out_$p17 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(20, 1));
    goto corral_source_split_6731;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.0, out_$p14);
    goto corral_source_split_6730;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} out_$i13 := read_reg(in_$p0, 32);
    call {:si_unique_call 1124} {:cexpr "DataByte"} boogie_si_record_i8(out_$i13);
    out_$p14 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(20, 1));
    goto corral_source_split_6729;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p38, out_$i37);
    goto corral_source_split_6766;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i36, 1);
    out_$p38 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(24, 1));
    goto corral_source_split_6765;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, out_$p35);
    goto corral_source_split_6764;

  $bb14:
    assume out_$i34 == 1;
    out_$p35 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(24, 1));
    goto corral_source_split_6763;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 0);
    goto corral_source_split_6754;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    out_$i33 := $and.i32(out_$i32, 16);
    goto corral_source_split_6753;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i16.i32(out_$i12);
    goto corral_source_split_6752;

  $bb12:
    assume !(out_$i27 == 1);
    goto corral_source_split_6751;

  $bb18:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p45, out_$i44);
    goto corral_source_split_6776;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i43, 1);
    out_$p45 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(32, 1));
    goto corral_source_split_6775;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.0, out_$p42);
    goto corral_source_split_6774;

  $bb17:
    assume out_$i41 == 1;
    out_$p42 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1064, 1)), $mul.ref(32, 1));
    goto corral_source_split_6773;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_6771;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    out_$i40 := $and.i32(out_$i39, 8);
    goto corral_source_split_6770;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i16.i32(out_$i12);
    goto corral_source_split_6769;

  $bb15:
    assume !(out_$i34 == 1);
    goto corral_source_split_6768;

  $bb37:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} out_vslice_dummy_var_366 := tty_insert_flip_char(out_$p85, 0, 4);
    goto corral_source_split_6828;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(16, 1));
    goto corral_source_split_6827;

  $bb36:
    assume out_$i84 == 1;
    goto corral_source_split_6826;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    out_$i84 := $trunc.i8.i1(out_$i76);
    goto corral_source_split_6824;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} out_vslice_dummy_var_365 := tty_insert_flip_char(out_$p77, out_$i79, out_$i82);
    goto corral_source_split_6823;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    out_$i82 := $trunc.i32.i8(out_$i81);
    goto corral_source_split_6822;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    out_$i81 := $sext.i8.i32(out_$i80);
    goto corral_source_split_6821;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    out_$i80 := $trunc.i32.i8(out_$i75);
    goto corral_source_split_6820;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    out_$i79 := $trunc.i32.i8(out_$i78);
    goto corral_source_split_6819;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i8.i32(out_$i13);
    goto corral_source_split_6818;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(16, 1));
    goto corral_source_split_6817;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6816;

  $bb10:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$i75, out_$i76 := 0, 0;
    goto $bb35;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    out_$i75, out_$i76 := out_$i66, out_$i74;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_6814;

  $bb33:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    out_$i74 := 0;
    goto $bb34;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    out_$i74 := 1;
    goto $bb34;

  $bb32:
    assume out_$i73 == 1;
    goto corral_source_split_6812;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_6808;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    out_$i72 := $and.i32(out_$i71, 8);
    goto corral_source_split_6807;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i16.i32(out_$i62);
    goto corral_source_split_6806;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_6805;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i66 := out_$i70;
    goto $bb28;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    out_$i66 := 3;
    goto $bb28;

  $bb26:
    assume out_$i65 == 1;
    goto corral_source_split_6798;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i32(out_$i64, 0);
    goto corral_source_split_6796;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    out_$i64 := $and.i32(out_$i63, 32);
    goto corral_source_split_6795;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i16.i32(out_$i62);
    goto corral_source_split_6794;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    out_$i62 := $trunc.i32.i16(out_$i61);
    call {:si_unique_call 1129} {:cexpr "status"} boogie_si_record_i16(out_$i62);
    goto corral_source_split_6793;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    out_$i61 := $and.i32(out_$i59, out_$i60);
    goto corral_source_split_6792;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i16.i32(out_$i12);
    goto corral_source_split_6791;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i16.i32(out_$i58);
    goto corral_source_split_6790;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i16($M.0, out_$p57);
    goto corral_source_split_6789;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1166, 1));
    goto corral_source_split_6788;

  $bb21:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb30:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    out_$i70 := 0;
    goto $bb31;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    out_$i70 := 2;
    goto $bb31;

  $bb29:
    assume out_$i69 == 1;
    goto corral_source_split_6810;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_6803;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    out_$i68 := $and.i32(out_$i67, 16);
    goto corral_source_split_6802;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i16.i32(out_$i62);
    goto corral_source_split_6801;

  $bb27:
    assume !(out_$i65 == 1);
    goto corral_source_split_6800;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i67, out_$i68, out_$i69, out_$i70, out_$i66, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i84, out_$p85, out_$i12, out_vslice_dummy_var_364, out_vslice_dummy_var_365, out_vslice_dummy_var_366 := isr_rxrdy_loop_$bb7(in_$p0, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i67, out_$i68, out_$i69, out_$i70, out_$i66, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i84, out_$p85, out_$i12, out_vslice_dummy_var_364, out_vslice_dummy_var_365, out_vslice_dummy_var_366);
    return;

  exit:
    return;
}



procedure isr_rxrdy_loop_$bb7(in_$p0: ref, in_$i13: i8, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$p31: ref, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$i36: i32, in_$i37: i32, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$p45: ref, in_$i46: i32, in_$p47: ref, in_$i48: i8, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i52: i8, in_$i53: i16, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i58: i16, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$i62: i16, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i66: i32, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i74: i8, in_$i75: i32, in_$i76: i8, in_$p77: ref, in_$i78: i32, in_$i79: i8, in_$i80: i8, in_$i81: i32, in_$i82: i8, in_$i84: i1, in_$p85: ref, in_$i12: i16, in_vslice_dummy_var_364: i32, in_vslice_dummy_var_365: i32, in_vslice_dummy_var_366: i32) returns (out_$i13: i8, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$p31: ref, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$i36: i32, out_$i37: i32, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$p45: ref, out_$i46: i32, out_$p47: ref, out_$i48: i8, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i52: i8, out_$i53: i16, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i58: i16, out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$i62: i16, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i66: i32, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i74: i8, out_$i75: i32, out_$i76: i8, out_$p77: ref, out_$i78: i32, out_$i79: i8, out_$i80: i8, out_$i81: i32, out_$i82: i8, out_$i84: i1, out_$p85: ref, out_$i12: i16, out_vslice_dummy_var_364: i32, out_vslice_dummy_var_365: i32, out_vslice_dummy_var_366: i32);
  modifies $M.0, $M.45, $M.46, $CurrAddr;



implementation alloc_buf_list_loop_$bb15(in_$p0: ref, in_$p100: ref, in_$p104: ref, in_$i105: i64, in_$i106: i16, in_$i107: i32, in_$p108: ref, in_$i109: i32, in_$i110: i32, in_$i111: i16, in_$i112: i32, in_$i113: i32, in_$i114: i32, in_$i115: i16, in_$i116: i64, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$i122: i16, in_$i123: i32, in_$p124: ref, in_$i125: i32, in_$i126: i16, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$i130: i16, in_$p131: ref, in_$p132: ref, in_$i133: i64, in_$p135: ref, in_$p136: ref, in_$i137: i32, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$p141: ref, in_$i142: i64, in_$p144: ref, in_$i145: i16, in_$i146: i32, in_$i147: i32, in_$i148: i16, in_$i149: i32, in_$i150: i32, in_$i151: i32, in_$i152: i16, in_$p153: ref, in_$p154: ref, in_$i155: i64, in_$p157: ref, in_$i158: i32, in_$i159: i32, in_$i160: i1, in_$i103: i32) returns (out_$p104: ref, out_$i105: i64, out_$i106: i16, out_$i107: i32, out_$p108: ref, out_$i109: i32, out_$i110: i32, out_$i111: i16, out_$i112: i32, out_$i113: i32, out_$i114: i32, out_$i115: i16, out_$i116: i64, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$i122: i16, out_$i123: i32, out_$p124: ref, out_$i125: i32, out_$i126: i16, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$i130: i16, out_$p131: ref, out_$p132: ref, out_$i133: i64, out_$p135: ref, out_$p136: ref, out_$i137: i32, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$p141: ref, out_$i142: i64, out_$p144: ref, out_$i145: i16, out_$i146: i32, out_$i147: i32, out_$i148: i16, out_$i149: i32, out_$i150: i32, out_$i151: i32, out_$i152: i16, out_$p153: ref, out_$p154: ref, out_$i155: i64, out_$p157: ref, out_$i158: i32, out_$i159: i32, out_$i160: i1, out_$i103: i32)
{

  entry:
    out_$p104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$p119, out_$p120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$p131, out_$p132, out_$i133, out_$p135, out_$p136, out_$i137, out_$i138, out_$i139, out_$p140, out_$p141, out_$i142, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$p153, out_$p154, out_$i155, out_$p157, out_$i158, out_$i159, out_$i160, out_$i103 := in_$p104, in_$i105, in_$i106, in_$i107, in_$p108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$p119, in_$p120, in_$i121, in_$i122, in_$i123, in_$p124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$p131, in_$p132, in_$i133, in_$p135, in_$p136, in_$i137, in_$i138, in_$i139, in_$p140, in_$p141, in_$i142, in_$p144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$p153, in_$p154, in_$i155, in_$p157, in_$i158, in_$i159, in_$i160, in_$i103;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_8004;

  $bb20:
    assume out_$i160 == 1;
    assume {:verifier.code 0} true;
    out_$i103 := out_$i158;
    goto $bb20_dummy;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    out_$i160 := $ugt.i32(out_$i159, out_$i158);
    goto corral_source_split_8066;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    out_$i159 := $load.i32($M.0, in_$p100);
    goto corral_source_split_8065;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i158 := $add.i32(out_$i103, 1);
    call {:si_unique_call 1271} {:cexpr "i"} boogie_si_record_i32(out_$i158);
    goto corral_source_split_8064;

  $bb18:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p157, out_$i152);
    goto corral_source_split_8062;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref(out_$p154, $mul.ref(out_$i155, 10)), $mul.ref(0, 1));
    goto corral_source_split_8061;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    goto corral_source_split_8060;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    out_$i155 := $zext.i32.i64(out_$i103);
    goto corral_source_split_8059;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    out_$p154 := $load.ref($M.0, out_$p153);
    goto corral_source_split_8058;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(3920, 1));
    goto corral_source_split_8057;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    out_$i152 := $trunc.i32.i16(out_$i151);
    goto corral_source_split_8056;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    out_$i151 := $add.i32(out_$i146, out_$i150);
    goto corral_source_split_8055;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    out_$i150 := $mul.i32(out_$i149, 10);
    goto corral_source_split_8054;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    out_$i149 := $zext.i16.i32(out_$i148);
    goto corral_source_split_8053;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    out_$i148 := $trunc.i32.i16(out_$i147);
    goto corral_source_split_8052;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    out_$i147 := $add.i32(out_$i103, 1);
    goto corral_source_split_8051;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    out_$i146 := $zext.i16.i32(out_$i145);
    goto corral_source_split_8050;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    out_$i145 := $load.i16($M.0, out_$p144);
    goto corral_source_split_8049;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(out_$p141, $mul.ref(out_$i142, 10)), $mul.ref(0, 1));
    goto corral_source_split_8048;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    goto corral_source_split_8047;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    out_$i142 := $zext.i32.i64(out_$i103);
    goto corral_source_split_8046;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    out_$p141 := $load.ref($M.0, out_$p140);
    goto corral_source_split_8045;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(3920, 1));
    goto corral_source_split_8044;

  $bb17:
    assume out_$i139 == 1;
    goto corral_source_split_8043;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    out_$i139 := $ugt.i32(out_$i138, out_$i103);
    goto corral_source_split_8041;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    out_$i138 := $sub.i32(out_$i137, 1);
    goto corral_source_split_8040;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    out_$i137 := $load.i32($M.0, out_$p136);
    goto corral_source_split_8039;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(3916, 1));
    goto corral_source_split_8038;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p135, out_$i130);
    goto corral_source_split_8037;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(out_$p132, $mul.ref(out_$i133, 10)), $mul.ref(0, 1));
    goto corral_source_split_8036;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    goto corral_source_split_8035;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    out_$i133 := $zext.i32.i64(out_$i103);
    goto corral_source_split_8034;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    out_$p132 := $load.ref($M.0, out_$p131);
    goto corral_source_split_8033;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(3920, 1));
    goto corral_source_split_8032;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    out_$i130 := $trunc.i32.i16(out_$i129);
    goto corral_source_split_8031;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    out_$i129 := $add.i32(out_$i123, out_$i128);
    goto corral_source_split_8030;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    out_$i128 := $mul.i32(out_$i127, 10);
    goto corral_source_split_8029;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    out_$i127 := $zext.i16.i32(out_$i126);
    goto corral_source_split_8028;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    out_$i126 := $trunc.i32.i16(out_$i125);
    goto corral_source_split_8027;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i32($M.0, out_$p124);
    goto corral_source_split_8026;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1848, 1));
    goto corral_source_split_8025;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i16.i32(out_$i122);
    goto corral_source_split_8024;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    out_$i122 := $trunc.i64.i16(out_$i121);
    goto corral_source_split_8023;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i64($M.0, out_$p120);
    goto corral_source_split_8022;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1840, 1));
    goto corral_source_split_8021;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p119, out_$i115);
    goto corral_source_split_8020;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(3928, 1)), $mul.ref(out_$i116, 16)), $mul.ref(8, 1));
    goto corral_source_split_8019;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    out_$i116 := $zext.i32.i64(out_$i103);
    goto corral_source_split_8018;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    out_$i115 := $trunc.i32.i16(out_$i114);
    goto corral_source_split_8017;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    out_$i114 := $add.i32(out_$i107, out_$i113);
    goto corral_source_split_8016;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    out_$i113 := $mul.i32(out_$i112, 10);
    goto corral_source_split_8015;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i16.i32(out_$i111);
    goto corral_source_split_8014;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    out_$i111 := $trunc.i32.i16(out_$i110);
    goto corral_source_split_8013;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    out_$i110 := $add.i32(out_$i109, out_$i103);
    goto corral_source_split_8012;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i32($M.0, out_$p108);
    goto corral_source_split_8011;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1848, 1));
    goto corral_source_split_8010;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    out_$i107 := $zext.i16.i32(out_$i106);
    goto corral_source_split_8009;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    out_$i106 := $trunc.i64.i16(out_$i105);
    goto corral_source_split_8008;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i64($M.0, out_$p104);
    goto corral_source_split_8007;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1840, 1));
    goto corral_source_split_8006;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$p119, out_$p120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$p131, out_$p132, out_$i133, out_$p135, out_$p136, out_$i137, out_$i138, out_$i139, out_$p140, out_$p141, out_$i142, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$p153, out_$p154, out_$i155, out_$p157, out_$i158, out_$i159, out_$i160, out_$i103 := alloc_buf_list_loop_$bb15(in_$p0, in_$p100, out_$p104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$p119, out_$p120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$p131, out_$p132, out_$i133, out_$p135, out_$p136, out_$i137, out_$i138, out_$i139, out_$p140, out_$p141, out_$i142, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$p153, out_$p154, out_$i155, out_$p157, out_$i158, out_$i159, out_$i160, out_$i103);
    return;

  exit:
    return;
}



procedure alloc_buf_list_loop_$bb15(in_$p0: ref, in_$p100: ref, in_$p104: ref, in_$i105: i64, in_$i106: i16, in_$i107: i32, in_$p108: ref, in_$i109: i32, in_$i110: i32, in_$i111: i16, in_$i112: i32, in_$i113: i32, in_$i114: i32, in_$i115: i16, in_$i116: i64, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$i122: i16, in_$i123: i32, in_$p124: ref, in_$i125: i32, in_$i126: i16, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$i130: i16, in_$p131: ref, in_$p132: ref, in_$i133: i64, in_$p135: ref, in_$p136: ref, in_$i137: i32, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$p141: ref, in_$i142: i64, in_$p144: ref, in_$i145: i16, in_$i146: i32, in_$i147: i32, in_$i148: i16, in_$i149: i32, in_$i150: i32, in_$i151: i32, in_$i152: i16, in_$p153: ref, in_$p154: ref, in_$i155: i64, in_$p157: ref, in_$i158: i32, in_$i159: i32, in_$i160: i1, in_$i103: i32) returns (out_$p104: ref, out_$i105: i64, out_$i106: i16, out_$i107: i32, out_$p108: ref, out_$i109: i32, out_$i110: i32, out_$i111: i16, out_$i112: i32, out_$i113: i32, out_$i114: i32, out_$i115: i16, out_$i116: i64, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$i122: i16, out_$i123: i32, out_$p124: ref, out_$i125: i32, out_$i126: i16, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$i130: i16, out_$p131: ref, out_$p132: ref, out_$i133: i64, out_$p135: ref, out_$p136: ref, out_$i137: i32, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$p141: ref, out_$i142: i64, out_$p144: ref, out_$i145: i16, out_$i146: i32, out_$i147: i32, out_$i148: i16, out_$i149: i32, out_$i150: i32, out_$i151: i32, out_$i152: i16, out_$p153: ref, out_$p154: ref, out_$i155: i64, out_$p157: ref, out_$i158: i32, out_$i159: i32, out_$i160: i1, out_$i103: i32);
  modifies $M.0;



implementation alloc_buf_list_loop_$bb4(in_$p0: ref, in_$p45: ref, in_$p49: ref, in_$i50: i64, in_$i51: i16, in_$i52: i32, in_$i53: i16, in_$i54: i32, in_$i55: i32, in_$i56: i32, in_$i57: i16, in_$i58: i64, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i16, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$p69: ref, in_$p70: ref, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$p78: ref, in_$i79: i16, in_$i80: i32, in_$i81: i32, in_$i82: i16, in_$i83: i32, in_$i84: i32, in_$i85: i32, in_$i86: i16, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$p96: ref, in_$i97: i32, in_$i98: i32, in_$i99: i1, in_$i48: i32) returns (out_$p49: ref, out_$i50: i64, out_$i51: i16, out_$i52: i32, out_$i53: i16, out_$i54: i32, out_$i55: i32, out_$i56: i32, out_$i57: i16, out_$i58: i64, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i16, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$p69: ref, out_$p70: ref, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$p78: ref, out_$i79: i16, out_$i80: i32, out_$i81: i32, out_$i82: i16, out_$i83: i32, out_$i84: i32, out_$i85: i32, out_$i86: i16, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$p96: ref, out_$i97: i32, out_$i98: i32, out_$i99: i1, out_$i48: i32)
{

  entry:
    out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$p69, out_$p70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$p91, out_$p92, out_$p93, out_$i94, out_$p96, out_$i97, out_$i98, out_$i99, out_$i48 := in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$p61, in_$p62, in_$i63, in_$i64, in_$p65, in_$p66, in_$i67, in_$p69, in_$p70, in_$i71, in_$i72, in_$i73, in_$p74, in_$p75, in_$i76, in_$p78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$p87, in_$p88, in_$i89, in_$p91, in_$p92, in_$p93, in_$i94, in_$p96, in_$i97, in_$i98, in_$i99, in_$i48;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7937;

  $bb9:
    assume out_$i99 == 1;
    assume {:verifier.code 0} true;
    out_$i48 := out_$i97;
    goto $bb9_dummy;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    out_$i99 := $ugt.i32(out_$i98, out_$i97);
    goto corral_source_split_7994;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i32($M.0, in_$p45);
    goto corral_source_split_7993;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    out_$i97 := $add.i32(out_$i48, 1);
    call {:si_unique_call 1270} {:cexpr "i"} boogie_si_record_i32(out_$i97);
    goto corral_source_split_7992;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p96, 1024);
    goto corral_source_split_7991;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p93, $mul.ref(out_$i94, 10)), $mul.ref(6, 1));
    goto corral_source_split_7990;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    goto corral_source_split_7989;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    out_$i94 := $zext.i32.i64(out_$i48);
    goto corral_source_split_7988;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.0, out_$p92);
    goto corral_source_split_7987;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1856, 1));
    goto corral_source_split_7986;

  $bb7:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p91, out_$i86);
    goto corral_source_split_7984;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p88, $mul.ref(out_$i89, 10)), $mul.ref(0, 1));
    goto corral_source_split_7983;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    goto corral_source_split_7982;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i32.i64(out_$i48);
    goto corral_source_split_7981;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.0, out_$p87);
    goto corral_source_split_7980;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1856, 1));
    goto corral_source_split_7979;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    out_$i86 := $trunc.i32.i16(out_$i85);
    goto corral_source_split_7978;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    out_$i85 := $add.i32(out_$i80, out_$i84);
    goto corral_source_split_7977;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    out_$i84 := $mul.i32(out_$i83, 10);
    goto corral_source_split_7976;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i16.i32(out_$i82);
    goto corral_source_split_7975;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    out_$i82 := $trunc.i32.i16(out_$i81);
    goto corral_source_split_7974;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i32(out_$i48, 1);
    goto corral_source_split_7973;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    out_$i80 := $zext.i16.i32(out_$i79);
    goto corral_source_split_7972;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i16($M.0, out_$p78);
    goto corral_source_split_7971;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(out_$p75, $mul.ref(out_$i76, 10)), $mul.ref(0, 1));
    goto corral_source_split_7970;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    goto corral_source_split_7969;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i32.i64(out_$i48);
    goto corral_source_split_7968;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.0, out_$p74);
    goto corral_source_split_7967;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1856, 1));
    goto corral_source_split_7966;

  $bb6:
    assume out_$i73 == 1;
    goto corral_source_split_7965;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    out_$i73 := $ugt.i32(out_$i72, out_$i48);
    goto corral_source_split_7963;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    out_$i72 := $sub.i32(out_$i71, 1);
    goto corral_source_split_7962;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.0, out_$p70);
    goto corral_source_split_7961;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1848, 1));
    goto corral_source_split_7960;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p69, out_$i64);
    goto corral_source_split_7959;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p66, $mul.ref(out_$i67, 10)), $mul.ref(0, 1));
    goto corral_source_split_7958;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    goto corral_source_split_7957;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i32.i64(out_$i48);
    goto corral_source_split_7956;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    goto corral_source_split_7955;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1856, 1));
    goto corral_source_split_7954;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    out_$i64 := $trunc.i64.i16(out_$i63);
    goto corral_source_split_7953;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i64($M.0, out_$p62);
    goto corral_source_split_7952;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1840, 1));
    goto corral_source_split_7951;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p61, out_$i57);
    goto corral_source_split_7950;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1864, 1)), $mul.ref(out_$i58, 16)), $mul.ref(8, 1));
    goto corral_source_split_7949;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i32.i64(out_$i48);
    goto corral_source_split_7948;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    out_$i57 := $trunc.i32.i16(out_$i56);
    goto corral_source_split_7947;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i32(out_$i52, out_$i55);
    goto corral_source_split_7946;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    out_$i55 := $mul.i32(out_$i54, 1024);
    goto corral_source_split_7945;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i16.i32(out_$i53);
    goto corral_source_split_7944;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    out_$i53 := $trunc.i32.i16(out_$i48);
    goto corral_source_split_7943;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i16.i32(out_$i51);
    goto corral_source_split_7942;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i64.i16(out_$i50);
    goto corral_source_split_7941;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i64($M.0, out_$p49);
    goto corral_source_split_7940;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1840, 1));
    goto corral_source_split_7939;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$p69, out_$p70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$p91, out_$p92, out_$p93, out_$i94, out_$p96, out_$i97, out_$i98, out_$i99, out_$i48 := alloc_buf_list_loop_$bb4(in_$p0, in_$p45, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$p69, out_$p70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$p91, out_$p92, out_$p93, out_$i94, out_$p96, out_$i97, out_$i98, out_$i99, out_$i48);
    return;

  exit:
    return;
}



procedure alloc_buf_list_loop_$bb4(in_$p0: ref, in_$p45: ref, in_$p49: ref, in_$i50: i64, in_$i51: i16, in_$i52: i32, in_$i53: i16, in_$i54: i32, in_$i55: i32, in_$i56: i32, in_$i57: i16, in_$i58: i64, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i16, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$p69: ref, in_$p70: ref, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$p78: ref, in_$i79: i16, in_$i80: i32, in_$i81: i32, in_$i82: i16, in_$i83: i32, in_$i84: i32, in_$i85: i32, in_$i86: i16, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$p96: ref, in_$i97: i32, in_$i98: i32, in_$i99: i1, in_$i48: i32) returns (out_$p49: ref, out_$i50: i64, out_$i51: i16, out_$i52: i32, out_$i53: i16, out_$i54: i32, out_$i55: i32, out_$i56: i32, out_$i57: i16, out_$i58: i64, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i16, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$p69: ref, out_$p70: ref, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$p78: ref, out_$i79: i16, out_$i80: i32, out_$i81: i32, out_$i82: i16, out_$i83: i32, out_$i84: i32, out_$i85: i32, out_$i86: i16, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$p96: ref, out_$i97: i32, out_$i98: i32, out_$i99: i1, out_$i48: i32);
  modifies $M.0;



implementation alloc_frame_bufs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$p6: ref, in_$p7: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i64, in_$p14: ref, in_$i15: i64, in_$p17: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i64, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i16, in_$i35: i64, in_$p37: ref, in_$i38: i64, in_$i39: i8, in_$i40: i64, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i64, out_$p14: ref, out_$i15: i64, out_$p17: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i64, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i16, out_$i35: i64, out_$p37: ref, out_$i38: i64, out_$i39: i8, out_$i40: i64, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$i5: i32)
{

  entry:
    out_$p6, out_$p7, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$p17, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$i44, out_$i5 := in_$p6, in_$p7, in_$p9, in_$p10, in_$p11, in_$i12, in_$i13, in_$p14, in_$i15, in_$p17, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p37, in_$i38, in_$i39, in_$i40, in_$p42, in_$i43, in_$i44, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_8075;

  $bb6:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i43;
    goto $bb6_dummy;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i43, in_$i3);
    goto corral_source_split_8115;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i32(out_$i5, 1);
    call {:si_unique_call 1274} {:cexpr "i"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_8114;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p42, out_$i39);
    goto corral_source_split_8113;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i40, 10)), $mul.ref(4, 1));
    goto corral_source_split_8112;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    goto corral_source_split_8111;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    out_$i40 := $sext.i32.i64(out_$i5);
    goto corral_source_split_8110;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i64.i8(out_$i38);
    goto corral_source_split_8109;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    out_$i38 := $lshr.i64(out_$i23, 16);
    goto corral_source_split_8108;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p37, out_$i34);
    goto corral_source_split_8107;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i35, 10)), $mul.ref(2, 1));
    goto corral_source_split_8106;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    goto corral_source_split_8105;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i5);
    goto corral_source_split_8104;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    out_$i34 := $trunc.i64.i16(out_$i23);
    goto corral_source_split_8103;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p33, out_$i29);
    goto corral_source_split_8102;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p32, $mul.ref(0, 6384)), $mul.ref(6160, 1));
    goto corral_source_split_8101;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_8100;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_8099;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i28, 1024);
    goto corral_source_split_8098;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    goto corral_source_split_8097;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 6384)), $mul.ref(6160, 1));
    goto corral_source_split_8096;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_8095;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_8094;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i32.i64(out_$i22);
    call {:si_unique_call 1273} {:cexpr "phys_addr"} boogie_si_record_i64(out_$i23);
    goto corral_source_split_8093;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.0, out_$p21);
    goto corral_source_split_8092;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 6384)), $mul.ref(6160, 1));
    goto corral_source_split_8091;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_8090;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_8089;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p17, out_$p14);
    goto corral_source_split_8088;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p2, $mul.ref(out_$i15, 16)), $mul.ref(0, 1));
    goto corral_source_split_8087;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    goto corral_source_split_8086;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i5);
    goto corral_source_split_8085;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p7, $mul.ref(out_$i13, 1));
    goto corral_source_split_8084;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i32.i64(out_$i12);
    goto corral_source_split_8083;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, out_$p11);
    goto corral_source_split_8082;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p10, $mul.ref(0, 6384)), $mul.ref(6160, 1));
    goto corral_source_split_8081;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_8080;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(6048, 1)), $mul.ref(0, 8));
    goto corral_source_split_8079;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.0, out_$p6);
    goto corral_source_split_8078;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(6168, 1));
    goto corral_source_split_8077;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$p17, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$i44, out_$i5 := alloc_frame_bufs_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$i3, out_$p6, out_$p7, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$p17, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$i44, out_$i5);
    return;

  exit:
    return;
}



procedure alloc_frame_bufs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$p6: ref, in_$p7: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i64, in_$p14: ref, in_$i15: i64, in_$p17: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i64, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i16, in_$i35: i64, in_$p37: ref, in_$i38: i64, in_$i39: i8, in_$i40: i64, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i64, out_$p14: ref, out_$i15: i64, out_$p17: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i64, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i16, out_$i35: i64, out_$p37: ref, out_$i38: i64, out_$i39: i8, out_$i40: i64, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$i5: i32);
  modifies $M.0;



implementation memory_test_loop_$bb15(in_$i30: i64, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p28: ref, in_$i29: i64) returns (out_$i30: i64, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p28: ref, out_$i29: i64)
{

  entry:
    out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p28, out_$i29 := in_$i30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$p28, in_$i29;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8215;

  $bb20:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$p28, out_$i29 := out_$p33, out_$i34;
    goto $bb20_dummy;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    out_$i35 := $ult.i64(out_$i34, 32768);
    goto corral_source_split_8225;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i64(out_$i29, 1);
    call {:si_unique_call 1288} {:cexpr "i"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_8224;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref(out_$p28, $mul.ref(1, 8));
    goto corral_source_split_8223;

  $bb18:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i30, out_$i31);
    goto corral_source_split_8219;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    out_$i31 := $mul.i64(out_$i29, 4);
    goto corral_source_split_8218;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i64($M.0, out_$p28);
    goto corral_source_split_8217;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p28, out_$i29 := memory_test_loop_$bb15(out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p28, out_$i29);
    return;

  exit:
    return;
}



procedure memory_test_loop_$bb15(in_$i30: i64, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p28: ref, in_$i29: i64) returns (out_$i30: i64, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p28: ref, out_$i29: i64);



implementation memory_test_loop_$bb10(in_$i21: i64, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p19: ref, in_$i20: i64) returns (out_$i21: i64, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p19: ref, out_$i20: i64)
{

  entry:
    out_$i21, out_$p22, out_$i23, out_$i24, out_$p19, out_$i20 := in_$i21, in_$p22, in_$i23, in_$i24, in_$p19, in_$i20;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8203;

  $bb12:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$p19, out_$i20 := out_$p22, out_$i23;
    goto $bb12_dummy;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    out_$i24 := $ult.i64(out_$i23, 32768);
    goto corral_source_split_8209;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i64(out_$i20, 1);
    call {:si_unique_call 1287} {:cexpr "i"} boogie_si_record_i64(out_$i23);
    goto corral_source_split_8208;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(out_$p19, $mul.ref(1, 8));
    goto corral_source_split_8207;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p19, out_$i21);
    goto corral_source_split_8206;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i21 := $mul.i64(out_$i20, 4);
    goto corral_source_split_8205;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i21, out_$p22, out_$i23, out_$i24, out_$p19, out_$i20 := memory_test_loop_$bb10(out_$i21, out_$p22, out_$i23, out_$i24, out_$p19, out_$i20);
    return;

  exit:
    return;
}



procedure memory_test_loop_$bb10(in_$i21: i64, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p19: ref, in_$i20: i64) returns (out_$i21: i64, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p19: ref, out_$i20: i64);
  modifies $M.0;



implementation bh_handler_loop_$bb7(in_$p1: ref, in_$p2: ref, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$p22: ref, in_$p23: ref, in_$i25: i32, in_$i26: i1, in_$i11: i32, in_vslice_dummy_var_389: i32, in_vslice_dummy_var_390: i32) returns (out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$p22: ref, out_$p23: ref, out_$i25: i32, out_$i26: i1, out_$i11: i32, out_vslice_dummy_var_389: i32, out_vslice_dummy_var_390: i32)
{

  entry:
    out_$i12, out_$i13, out_$p14, out_$p15, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i25, out_$i26, out_$i11, out_vslice_dummy_var_389, out_vslice_dummy_var_390 := in_$i12, in_$i13, in_$p14, in_$p15, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$p22, in_$p23, in_$i25, in_$i26, in_$i11, in_vslice_dummy_var_389, in_vslice_dummy_var_390;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8578;

  $bb26:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i25;
    goto $bb26_dummy;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_8598;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} out_$i25 := bh_action(in_$p2);
    call {:si_unique_call 1342} {:cexpr "action"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_8597;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_378:
    goto corral_source_split_8595;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} bh_receive(in_$p2);
    goto SeqInstr_377;

  $bb22:
    assume out_$i21 == 1;
    goto corral_source_split_8594;

  $bb13:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i11, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i11, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} out_vslice_dummy_var_389 := printk.ref.ref.i32.ref.i32(.str.30, .str.1, 2025, out_$p15, out_$i11);
    goto corral_source_split_8586;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_8585;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p1, $mul.ref($sub.ref(0, 1712), 6384)), $mul.ref(6009, 1));
    goto corral_source_split_8584;

  $bb9:
    assume out_$i13 == 1;
    goto corral_source_split_8583;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    out_$i13 := $sgt.i32(out_$i12, 3);
    goto corral_source_split_8581;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i12 := $M.2;
    goto corral_source_split_8580;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} bh_transmit(in_$p2);
    goto corral_source_split_8592;

  $bb20:
    assume out_$i20 == 1;
    goto corral_source_split_8591;

  $bb15:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i11, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb14:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i11, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} bh_status(in_$p2);
    goto corral_source_split_8589;

  $bb17:
    assume out_$i19 == 1;
    goto corral_source_split_8588;

  $bb16:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i11, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} out_vslice_dummy_var_390 := printk.ref.ref.i32.ref.i32(.str.31, .str.1, 2041, out_$p23, out_$i11);
    goto corral_source_split_8602;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_8601;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p1, $mul.ref($sub.ref(0, 1712), 6384)), $mul.ref(6009, 1));
    goto corral_source_split_8600;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i19 == 1);
    goto $bb19;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i20 == 1);
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i21 == 1);
    goto $bb19;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i12, out_$i13, out_$p14, out_$p15, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i25, out_$i26, out_$i11, out_vslice_dummy_var_389, out_vslice_dummy_var_390 := bh_handler_loop_$bb7(in_$p1, in_$p2, out_$i12, out_$i13, out_$p14, out_$p15, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i25, out_$i26, out_$i11, out_vslice_dummy_var_389, out_vslice_dummy_var_390);
    return;

  exit:
    return;
}



procedure bh_handler_loop_$bb7(in_$p1: ref, in_$p2: ref, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$p22: ref, in_$p23: ref, in_$i25: i32, in_$i26: i1, in_$i11: i32, in_vslice_dummy_var_389: i32, in_vslice_dummy_var_390: i32) returns (out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$p22: ref, out_$p23: ref, out_$i25: i32, out_$i26: i1, out_$i11: i32, out_vslice_dummy_var_389: i32, out_vslice_dummy_var_390: i32);
  modifies $M.1, $M.0, assertsPassed;



implementation bh_receive_loop_$bb7(in_$p0: ref, in_$i9: i1, in_$i10: i8, in_$i11: i1) returns (out_$i9: i1, out_$i10: i8, out_$i11: i1)
{

  entry:
    out_$i9, out_$i10, out_$i11 := in_$i9, in_$i10, in_$i11;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i11 == 1;
    goto $bb9_dummy;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    out_$i11 := $trunc.i8.i1(out_$i10);
    goto corral_source_split_8805;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i1.i8(out_$i9);
    call {:si_unique_call 1376} {:cexpr "tmp"} boogie_si_record_i8(out_$i10);
    goto corral_source_split_8804;

  SeqInstr_384:
    goto corral_source_split_8803;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} out_$i9 := rx_get_frame(in_$p0);
    goto SeqInstr_383;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i9, out_$i10, out_$i11 := bh_receive_loop_$bb7(in_$p0, out_$i9, out_$i10, out_$i11);
    return;

  exit:
    return;
}



procedure bh_receive_loop_$bb7(in_$p0: ref, in_$i9: i1, in_$i10: i8, in_$i11: i1) returns (out_$i9: i1, out_$i10: i8, out_$i11: i1);
  modifies $M.1, $M.0, assertsPassed;



implementation install_loop_$bb8(in_$i3: i32, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p12: ref, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$p17: ref) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p12: ref, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$p17: ref)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$i16, out_$p12, out_$p18, out_$i19, out_$i20, out_$p21, out_$p17 := in_$p13, in_$p14, in_$i15, in_$i16, in_$p12, in_$p18, in_$i19, in_$i20, in_$p21, in_$p17;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8896;

  $bb10:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$p12 := out_$p14;
    goto $bb10_dummy;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    out_$p17 := out_$p14;
    assume true;
    goto $bb10;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_8904;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_8903;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_8902;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 6384)), $mul.ref(1504, 1));
    goto corral_source_split_8901;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb12:
    assume out_$i20 == 1;
    goto corral_source_split_8908;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    out_$p21 := out_$p12;
    assume true;
    goto $bb12;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, in_$i3);
    goto corral_source_split_8899;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    goto corral_source_split_8898;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p12, $mul.ref(0, 6384)), $mul.ref(1056, 1));
    goto corral_source_split_8897;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$i16, out_$p12, out_$p18, out_$i19, out_$i20, out_$p21, out_$p17 := install_loop_$bb8(in_$i3, out_$p13, out_$p14, out_$i15, out_$i16, out_$p12, out_$p18, out_$i19, out_$i20, out_$p21, out_$p17);
    return;

  exit:
    return;
}



procedure install_loop_$bb8(in_$i3: i32, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p12: ref, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$p17: ref) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p12: ref, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$p17: ref);



implementation open_loop_$bb11(in_$p0: ref, in_$p2: ref, in_$p31: ref, in_$p34: ref, in_$i38: i64, in_$i39: i1, in_$i40: i64, in_$i41: i64, in_$i42: i64, in_$i43: i1) returns (out_$i38: i64, out_$i39: i1, out_$i40: i64, out_$i41: i64, out_$i42: i64, out_$i43: i1)
{

  entry:
    out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43 := in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb18:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i38 := out_$i40;
    goto $bb18_dummy;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i64(out_$i42, 0);
    goto corral_source_split_8994;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i64(out_$i41, 134217728);
    goto corral_source_split_8993;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i64($M.0, in_$p34);
    goto corral_source_split_8992;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} out_$i40 := prepare_to_wait_event(in_$p31, in_$p2, 1);
    call {:si_unique_call 1397} {:cexpr "tmp"} boogie_si_record_i64(out_$i40);
    goto corral_source_split_8991;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} tty_lock(in_$p0);
    goto corral_source_split_8990;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} schedule();
    goto corral_source_split_8989;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} tty_unlock(in_$p0);
    goto corral_source_split_8988;

  $bb16:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i64(out_$i38, 0);
    goto corral_source_split_8984;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43 := open_loop_$bb11(in_$p0, in_$p2, in_$p31, in_$p34, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43);
    return;

  exit:
    return;
}



procedure open_loop_$bb11(in_$p0: ref, in_$p2: ref, in_$p31: ref, in_$p34: ref, in_$i38: i64, in_$i39: i1, in_$i40: i64, in_$i41: i64, in_$i42: i64, in_$i43: i1) returns (out_$i38: i64, out_$i39: i1, out_$i40: i64, out_$i41: i64, out_$i42: i64, out_$i43: i1);



implementation write_loop_$bb24(in_$p5: ref, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$p48: ref, in_$i49: i32, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i32, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i64, in_$p65: ref, in_$i66: i64, in_$p67: ref, in_$i68: i32, in_$i69: i32, in_$p70: ref, in_$p71: ref, in_$i72: i32, in_$p73: ref, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$i77: i32, in_$p78: ref, in_$i79: i32, in_$i80: i32, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$i84: i32, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_cmdloc_dummy_var_37: [ref]i8, in_cmdloc_dummy_var_38: [ref]i8, in_cmdloc_dummy_var_39: [ref]i8) returns (out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$p48: ref, out_$i49: i32, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i32, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i64, out_$p65: ref, out_$i66: i64, out_$p67: ref, out_$i68: i32, out_$i69: i32, out_$p70: ref, out_$p71: ref, out_$i72: i32, out_$p73: ref, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$i77: i32, out_$p78: ref, out_$i79: i32, out_$i80: i32, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$i84: i32, out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_cmdloc_dummy_var_37: [ref]i8, out_cmdloc_dummy_var_38: [ref]i8, out_cmdloc_dummy_var_39: [ref]i8)
{

  entry:
    out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$p88, out_$i89, out_$i90, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38, out_cmdloc_dummy_var_39 := in_$i39, in_$i40, in_$p41, in_$p42, in_$i43, in_$p44, in_$i45, in_$i46, in_$i47, in_$p48, in_$i49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p65, in_$i66, in_$p67, in_$i68, in_$i69, in_$p70, in_$p71, in_$i72, in_$p73, in_$i74, in_$i75, in_$p76, in_$i77, in_$p78, in_$i79, in_$i80, in_$p81, in_$p82, in_$i83, in_$i84, in_$p85, in_$p86, in_$i87, in_$p88, in_$i89, in_$i90, in_cmdloc_dummy_var_37, in_cmdloc_dummy_var_38, in_cmdloc_dummy_var_39;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9214;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    out_$i39, out_$i40, out_$p41 := out_$i90, out_$i89, out_$p88;
    goto corral_source_split_9287_dummy;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    out_$i90 := $add.i32(out_$i39, out_$i56);
    call {:si_unique_call 1435} {:cexpr "ret"} boogie_si_record_i32(out_$i90);
    goto corral_source_split_9287;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    out_$i89 := $sub.i32(out_$i40, out_$i56);
    call {:si_unique_call 1434} {:cexpr "count"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_9286;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref(out_$p41, $mul.ref(out_$i87, 1));
    goto corral_source_split_9285;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    out_$i87 := $sext.i32.i64(out_$i56);
    goto corral_source_split_9284;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} spin_unlock_irqrestore(out_$p86, $u0);
    goto corral_source_split_9283;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p5, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_9282;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p85, out_$i84);
    goto corral_source_split_9281;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p5, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_9280;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    out_$i84 := $add.i32(out_$i83, out_$i56);
    goto corral_source_split_9279;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i32($M.0, out_$p82);
    goto corral_source_split_9278;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p5, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_9277;

  $bb36:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p81, out_$i80);
    goto corral_source_split_9275;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p5, $mul.ref(0, 6384)), $mul.ref(1184, 1));
    goto corral_source_split_9274;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    out_$i80 := $sub.i32(out_$i77, out_$i79);
    goto corral_source_split_9273;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i32($M.0, out_$p78);
    goto corral_source_split_9272;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p5, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_9271;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i32($M.0, out_$p76);
    goto corral_source_split_9270;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p5, $mul.ref(0, 6384)), $mul.ref(1184, 1));
    goto corral_source_split_9269;

  $bb35:
    assume out_$i75 == 1;
    goto corral_source_split_9268;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    out_$i75 := $uge.i32(out_$i72, out_$i74);
    goto corral_source_split_9266;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.0, out_$p73);
    goto corral_source_split_9265;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p5, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_9264;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i32($M.0, out_$p71);
    goto corral_source_split_9263;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p5, $mul.ref(0, 6384)), $mul.ref(1184, 1));
    goto corral_source_split_9262;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p70, out_$i69);
    goto corral_source_split_9261;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p5, $mul.ref(0, 6384)), $mul.ref(1184, 1));
    goto corral_source_split_9260;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i32(out_$i68, out_$i56);
    goto corral_source_split_9259;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.0, out_$p67);
    goto corral_source_split_9258;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p5, $mul.ref(0, 6384)), $mul.ref(1184, 1));
    goto corral_source_split_9257;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} ldv_spin_lock();
    goto corral_source_split_9256;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_37 := $M.0;
    out_cmdloc_dummy_var_38 := $M.0;
    call {:si_unique_call 1431} out_cmdloc_dummy_var_39 := $memcpy.i8(out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38, out_$p65, out_$p41, out_$i66, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_39;
    goto corral_source_split_9255;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(out_$i56);
    goto corral_source_split_9254;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref(out_$p61, $mul.ref(out_$i64, 1));
    goto corral_source_split_9253;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    out_$i64 := $sext.i32.i64(out_$i63);
    goto corral_source_split_9252;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.0, out_$p62);
    goto corral_source_split_9251;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p5, $mul.ref(0, 6384)), $mul.ref(1184, 1));
    goto corral_source_split_9250;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_9249;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p5, $mul.ref(0, 6384)), $mul.ref(1176, 1));
    goto corral_source_split_9248;

  $bb32:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    out_$i58, out_$i59 := out_$i39, out_$i40;
    assume true;
    goto $bb32;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    out_$i57 := $sle.i32(out_$i56, 0);
    goto corral_source_split_9240;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_9239;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    out_$i56 := out_$i54;
    goto $bb30;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    out_$i56 := out_$i40;
    goto $bb30;

  $bb28:
    assume out_$i55 == 1;
    goto corral_source_split_9235;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    out_$i55 := $slt.i32(out_$i40, out_$i54);
    goto corral_source_split_9233;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_9232;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i52;
    goto $bb27;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i47;
    goto $bb27;

  $bb25:
    assume out_$i53 == 1;
    goto corral_source_split_9228;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    out_$i53 := $ult.i32(out_$i47, out_$i52);
    goto corral_source_split_9226;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    out_$i52 := $sub.i32(out_$i49, out_$i51);
    call {:si_unique_call 1430} {:cexpr "_min2"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_9225;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.0, out_$p50);
    goto corral_source_split_9224;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p5, $mul.ref(0, 6384)), $mul.ref(1184, 1));
    goto corral_source_split_9223;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.0, out_$p48);
    goto corral_source_split_9222;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p5, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_9221;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    out_$i47 := $sub.i32(out_$i46, 1);
    call {:si_unique_call 1429} {:cexpr "_min1"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_9220;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    out_$i46 := $sub.i32(out_$i43, out_$i45);
    goto corral_source_split_9219;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_9218;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p5, $mul.ref(0, 6384)), $mul.ref(1192, 1));
    goto corral_source_split_9217;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.0, out_$p42);
    goto corral_source_split_9216;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p5, $mul.ref(0, 6384)), $mul.ref(1792, 1));
    goto corral_source_split_9215;

  $bb26:
    assume !(out_$i53 == 1);
    goto corral_source_split_9230;

  $bb29:
    assume !(out_$i55 == 1);
    goto corral_source_split_9237;

  corral_source_split_9287_dummy:
    call {:si_unique_call 1} out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$p88, out_$i89, out_$i90, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38, out_cmdloc_dummy_var_39 := write_loop_$bb24(in_$p5, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$p88, out_$i89, out_$i90, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38, out_cmdloc_dummy_var_39);
    return;

  exit:
    return;
}



procedure write_loop_$bb24(in_$p5: ref, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$p48: ref, in_$i49: i32, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i32, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i64, in_$p65: ref, in_$i66: i64, in_$p67: ref, in_$i68: i32, in_$i69: i32, in_$p70: ref, in_$p71: ref, in_$i72: i32, in_$p73: ref, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$i77: i32, in_$p78: ref, in_$i79: i32, in_$i80: i32, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$i84: i32, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_cmdloc_dummy_var_37: [ref]i8, in_cmdloc_dummy_var_38: [ref]i8, in_cmdloc_dummy_var_39: [ref]i8) returns (out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$p48: ref, out_$i49: i32, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i32, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i64, out_$p65: ref, out_$i66: i64, out_$p67: ref, out_$i68: i32, out_$i69: i32, out_$p70: ref, out_$p71: ref, out_$i72: i32, out_$p73: ref, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$i77: i32, out_$p78: ref, out_$i79: i32, out_$i80: i32, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$i84: i32, out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_cmdloc_dummy_var_37: [ref]i8, out_cmdloc_dummy_var_38: [ref]i8, out_cmdloc_dummy_var_39: [ref]i8);
  modifies $M.1, $M.0;



implementation wait_until_sent_loop_$bb51(in_$i1: i32, in_$p4: ref, in_$i20: i64, in_$i37: i64, in_$p58: ref, in_$i61: i32, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$i66: i1, in_$i67: i64, in_$i68: i64, in_$i69: i64, in_$i70: i64, in_$i71: i1, in_$i72: i8, in_$i73: i1, in_$p74: ref, in_$i75: i8, in_$i76: i1, in_vslice_dummy_var_423: i64) returns (out_$i61: i32, out_$p63: ref, out_$i64: i32, out_$i65: i1, out_$i66: i1, out_$i67: i64, out_$i68: i64, out_$i69: i64, out_$i70: i64, out_$i71: i1, out_$i72: i8, out_$i73: i1, out_$p74: ref, out_$i75: i8, out_$i76: i1, out_vslice_dummy_var_423: i64)
{

  entry:
    out_$i61, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_vslice_dummy_var_423 := in_$i61, in_$p63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$p74, in_$i75, in_$i76, in_vslice_dummy_var_423;
    goto $bb51, exit;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p4, $mul.ref(0, 6384)), $mul.ref(5998, 1));
    goto corral_source_split_10130;

  $bb63:
    assume {:verifier.code 0} true;
    assume out_$i73 == 1;
    goto $bb63_dummy;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    out_$i73 := $trunc.i8.i1(out_$i72);
    goto corral_source_split_10154;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i8($M.0, in_$p58);
    goto corral_source_split_10153;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb58:
    assume {:verifier.code 0} true;
    assume !(out_$i66 == 1);
    goto $bb59;

  $bb61:
    assume {:verifier.code 0} true;
    assume !(out_$i71 == 1);
    goto $bb59;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i64(out_$i70, 0);
    goto corral_source_split_10149;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    out_$i70 := $sub.i64(out_$i68, out_$i69);
    goto corral_source_split_10148;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i64($M.0, jiffies);
    goto corral_source_split_10147;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i64(out_$i67, in_$i20);
    goto corral_source_split_10146;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(in_$i1);
    goto corral_source_split_10145;

  $bb57:
    assume out_$i66 == 1;
    goto corral_source_split_10144;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(in_$i1, 0);
    goto corral_source_split_10142;

  $bb54:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i32(out_$i64, 0);
    goto corral_source_split_10138;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} out_$i64 := signal_pending(out_$p63);
    call {:si_unique_call 1575} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_10137;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} out_$p63 := get_current();
    goto corral_source_split_10136;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} out_vslice_dummy_var_423 := msleep_interruptible(out_$i61);
    goto corral_source_split_10135;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} out_$i61 := jiffies_to_msecs(in_$i37);
    call {:si_unique_call 1571} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_10134;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb65:
    assume out_$i76 == 1;
    goto corral_source_split_10158;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    out_$i76 := $trunc.i8.i1(out_$i75);
    goto corral_source_split_10132;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i8($M.0, out_$p74);
    goto corral_source_split_10131;

  $bb63_dummy:
    call {:si_unique_call 1} out_$i61, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_vslice_dummy_var_423 := wait_until_sent_loop_$bb51(in_$i1, in_$p4, in_$i20, in_$i37, in_$p58, out_$i61, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_vslice_dummy_var_423);
    return;

  exit:
    return;
}



procedure wait_until_sent_loop_$bb51(in_$i1: i32, in_$p4: ref, in_$i20: i64, in_$i37: i64, in_$p58: ref, in_$i61: i32, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$i66: i1, in_$i67: i64, in_$i68: i64, in_$i69: i64, in_$i70: i64, in_$i71: i1, in_$i72: i8, in_$i73: i1, in_$p74: ref, in_$i75: i8, in_$i76: i1, in_vslice_dummy_var_423: i64) returns (out_$i61: i32, out_$p63: ref, out_$i64: i32, out_$i65: i1, out_$i66: i1, out_$i67: i64, out_$i68: i64, out_$i69: i64, out_$i70: i64, out_$i71: i1, out_$i72: i8, out_$i73: i1, out_$p74: ref, out_$i75: i8, out_$i76: i1, out_vslice_dummy_var_423: i64);



implementation wait_until_sent_loop_$bb32(in_$i1: i32, in_$i20: i64, in_$i37: i64, in_$p42: ref, in_$i45: i32, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$i50: i1, in_$i51: i64, in_$i52: i64, in_$i53: i64, in_$i54: i64, in_$i55: i1, in_$i56: i8, in_$i57: i1, in_vslice_dummy_var_422: i64) returns (out_$i45: i32, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$i50: i1, out_$i51: i64, out_$i52: i64, out_$i53: i64, out_$i54: i64, out_$i55: i1, out_$i56: i8, out_$i57: i1, out_vslice_dummy_var_422: i64)
{

  entry:
    out_$i45, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_vslice_dummy_var_422 := in_$i45, in_$p47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_vslice_dummy_var_422;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb44:
    assume {:verifier.code 0} true;
    assume out_$i57 == 1;
    goto $bb44_dummy;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    out_$i57 := $trunc.i8.i1(out_$i56);
    goto corral_source_split_10124;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i8($M.0, in_$p42);
    goto corral_source_split_10123;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i50 == 1);
    goto $bb40;

  $bb42:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb40;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    out_$i55 := $slt.i64(out_$i54, 0);
    goto corral_source_split_10119;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    out_$i54 := $sub.i64(out_$i52, out_$i53);
    goto corral_source_split_10118;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i64($M.0, jiffies);
    goto corral_source_split_10117;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i64(out_$i51, in_$i20);
    goto corral_source_split_10116;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(in_$i1);
    goto corral_source_split_10115;

  $bb38:
    assume out_$i50 == 1;
    goto corral_source_split_10114;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(in_$i1, 0);
    goto corral_source_split_10112;

  $bb35:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i32(out_$i48, 0);
    goto corral_source_split_10108;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} out_$i48 := signal_pending(out_$p47);
    call {:si_unique_call 1569} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_10107;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} out_$p47 := get_current();
    goto corral_source_split_10106;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} out_vslice_dummy_var_422 := msleep_interruptible(out_$i45);
    goto corral_source_split_10105;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} out_$i45 := jiffies_to_msecs(in_$i37);
    call {:si_unique_call 1565} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_10104;

  $bb44_dummy:
    call {:si_unique_call 1} out_$i45, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_vslice_dummy_var_422 := wait_until_sent_loop_$bb32(in_$i1, in_$i20, in_$i37, in_$p42, out_$i45, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_vslice_dummy_var_422);
    return;

  exit:
    return;
}



procedure wait_until_sent_loop_$bb32(in_$i1: i32, in_$i20: i64, in_$i37: i64, in_$p42: ref, in_$i45: i32, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$i50: i1, in_$i51: i64, in_$i52: i64, in_$i53: i64, in_$i54: i64, in_$i55: i1, in_$i56: i8, in_$i57: i1, in_vslice_dummy_var_422: i64) returns (out_$i45: i32, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$i50: i1, out_$i51: i64, out_$i52: i64, out_$i53: i64, out_$i54: i64, out_$i55: i1, out_$i56: i8, out_$i57: i1, out_vslice_dummy_var_422: i64);



implementation wait_mgsl_event_loop_$bb22(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p9: ref, in_$i101: i32, in_$i100: i32, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$p114: ref, in_$i115: i64, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i123: i32, in_$p124: ref, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$i128: i32, in_$p129: ref, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$i133: i32, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i32, in_$p139: ref, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$i143: i32, in_$p144: ref, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i148: i32, in_$p149: ref, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$i153: i32, in_$p154: ref, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i32, in_$p159: ref, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$p164: ref, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$p168: ref, in_$i169: i32, in_$p170: ref, in_$i171: i32, in_$i172: i1, in_$i173: i32, in_$p174: ref, in_$i175: i32, in_$p176: ref, in_$i177: i32, in_$i178: i1, in_$i179: i32, in_$i180: i32, in_$p181: ref, in_$i182: i32, in_$p183: ref, in_$i184: i32, in_$i185: i1, in_$i186: i32, in_$i187: i32, in_$p188: ref, in_$i189: i32, in_$p190: ref, in_$i191: i32, in_$i192: i1, in_$i193: i32, in_$i194: i32, in_$p195: ref, in_$i196: i32, in_$p197: ref, in_$i198: i32, in_$i199: i1, in_$i200: i32, in_$i201: i32, in_$p202: ref, in_$i203: i32, in_$p204: ref, in_$i205: i32, in_$i206: i1, in_$i207: i32, in_$i208: i32, in_$p209: ref, in_$i210: i32, in_$p211: ref, in_$i212: i32, in_$i213: i1, in_$i214: i32, in_$i215: i32, in_$p216: ref, in_$i217: i32, in_$p218: ref, in_$i219: i32, in_$i220: i1, in_$i221: i32, in_$i222: i32, in_$p223: ref, in_$i224: i32, in_$p225: ref, in_$i226: i32, in_$i227: i1, in_$i228: i32, in_$i229: i32, in_$p230: ref, in_$i231: i32, in_$p232: ref, in_$i233: i32, in_$i234: i1, in_$i235: i32, in_$i236: i32, in_$i237: i32, in_$i238: i32, in_$i239: i1, in_$i240: i32, in_$p241: ref, in_$p242: ref, in_$p243: ref, in_$p244: ref, in_$p245: ref, in_$i246: i32, in_$i247: i1, in_cmdloc_dummy_var_54: [ref]i8, in_cmdloc_dummy_var_55: [ref]i8, in_cmdloc_dummy_var_56: [ref]i8, in_cmdloc_dummy_var_57: [ref]i8, in_cmdloc_dummy_var_58: [ref]i8, in_cmdloc_dummy_var_59: [ref]i8, in_cmdloc_dummy_var_60: [ref]i8, in_cmdloc_dummy_var_61: [ref]i8, in_cmdloc_dummy_var_62: [ref]i8, in_cmdloc_dummy_var_63: [ref]i8, in_cmdloc_dummy_var_64: [ref]i8, in_cmdloc_dummy_var_65: [ref]i8) returns (out_$i101: i32, out_$i100: i32, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$p114: ref, out_$i115: i64, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i123: i32, out_$p124: ref, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$i128: i32, out_$p129: ref, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$i133: i32, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i32, out_$p139: ref, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$i143: i32, out_$p144: ref, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i148: i32, out_$p149: ref, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$i153: i32, out_$p154: ref, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i32, out_$p159: ref, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$p164: ref, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$p168: ref, out_$i169: i32, out_$p170: ref, out_$i171: i32, out_$i172: i1, out_$i173: i32, out_$p174: ref, out_$i175: i32, out_$p176: ref, out_$i177: i32, out_$i178: i1, out_$i179: i32, out_$i180: i32, out_$p181: ref, out_$i182: i32, out_$p183: ref, out_$i184: i32, out_$i185: i1, out_$i186: i32, out_$i187: i32, out_$p188: ref, out_$i189: i32, out_$p190: ref, out_$i191: i32, out_$i192: i1, out_$i193: i32, out_$i194: i32, out_$p195: ref, out_$i196: i32, out_$p197: ref, out_$i198: i32, out_$i199: i1, out_$i200: i32, out_$i201: i32, out_$p202: ref, out_$i203: i32, out_$p204: ref, out_$i205: i32, out_$i206: i1, out_$i207: i32, out_$i208: i32, out_$p209: ref, out_$i210: i32, out_$p211: ref, out_$i212: i32, out_$i213: i1, out_$i214: i32, out_$i215: i32, out_$p216: ref, out_$i217: i32, out_$p218: ref, out_$i219: i32, out_$i220: i1, out_$i221: i32, out_$i222: i32, out_$p223: ref, out_$i224: i32, out_$p225: ref, out_$i226: i32, out_$i227: i1, out_$i228: i32, out_$i229: i32, out_$p230: ref, out_$i231: i32, out_$p232: ref, out_$i233: i32, out_$i234: i1, out_$i235: i32, out_$i236: i32, out_$i237: i32, out_$i238: i32, out_$i239: i1, out_$i240: i32, out_$p241: ref, out_$p242: ref, out_$p243: ref, out_$p244: ref, out_$p245: ref, out_$i246: i32, out_$i247: i1, out_cmdloc_dummy_var_54: [ref]i8, out_cmdloc_dummy_var_55: [ref]i8, out_cmdloc_dummy_var_56: [ref]i8, out_cmdloc_dummy_var_57: [ref]i8, out_cmdloc_dummy_var_58: [ref]i8, out_cmdloc_dummy_var_59: [ref]i8, out_cmdloc_dummy_var_60: [ref]i8, out_cmdloc_dummy_var_61: [ref]i8, out_cmdloc_dummy_var_62: [ref]i8, out_cmdloc_dummy_var_63: [ref]i8, out_cmdloc_dummy_var_64: [ref]i8, out_cmdloc_dummy_var_65: [ref]i8)
{

  entry:
    out_$i101, out_$i100, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$p114, out_$i115, out_$p116, out_$p117, out_$i118, out_$p119, out_$i120, out_$i121, out_$p122, out_$i123, out_$p124, out_$i125, out_$i126, out_$p127, out_$i128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i133, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$p139, out_$i140, out_$i141, out_$p142, out_$i143, out_$p144, out_$i145, out_$i146, out_$p147, out_$i148, out_$p149, out_$i150, out_$i151, out_$p152, out_$i153, out_$p154, out_$i155, out_$i156, out_$p157, out_$i158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$p164, out_$i165, out_$i166, out_$i167, out_$p168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$p181, out_$i182, out_$p183, out_$i184, out_$i185, out_$i186, out_$i187, out_$p188, out_$i189, out_$p190, out_$i191, out_$i192, out_$i193, out_$i194, out_$p195, out_$i196, out_$p197, out_$i198, out_$i199, out_$i200, out_$i201, out_$p202, out_$i203, out_$p204, out_$i205, out_$i206, out_$i207, out_$i208, out_$p209, out_$i210, out_$p211, out_$i212, out_$i213, out_$i214, out_$i215, out_$p216, out_$i217, out_$p218, out_$i219, out_$i220, out_$i221, out_$i222, out_$p223, out_$i224, out_$p225, out_$i226, out_$i227, out_$i228, out_$i229, out_$p230, out_$i231, out_$p232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$p242, out_$p243, out_$p244, out_$p245, out_$i246, out_$i247, out_cmdloc_dummy_var_54, out_cmdloc_dummy_var_55, out_cmdloc_dummy_var_56, out_cmdloc_dummy_var_57, out_cmdloc_dummy_var_58, out_cmdloc_dummy_var_59, out_cmdloc_dummy_var_60, out_cmdloc_dummy_var_61, out_cmdloc_dummy_var_62, out_cmdloc_dummy_var_63, out_cmdloc_dummy_var_64, out_cmdloc_dummy_var_65 := in_$i101, in_$i100, in_$p104, in_$p105, in_$p106, in_$p107, in_$p108, in_$p109, in_$p110, in_$p111, in_$p112, in_$i113, in_$p114, in_$i115, in_$p116, in_$p117, in_$i118, in_$p119, in_$i120, in_$i121, in_$p122, in_$i123, in_$p124, in_$i125, in_$i126, in_$p127, in_$i128, in_$p129, in_$i130, in_$i131, in_$p132, in_$i133, in_$p134, in_$i135, in_$i136, in_$p137, in_$i138, in_$p139, in_$i140, in_$i141, in_$p142, in_$i143, in_$p144, in_$i145, in_$i146, in_$p147, in_$i148, in_$p149, in_$i150, in_$i151, in_$p152, in_$i153, in_$p154, in_$i155, in_$i156, in_$p157, in_$i158, in_$p159, in_$i160, in_$i161, in_$p162, in_$i163, in_$p164, in_$i165, in_$i166, in_$i167, in_$p168, in_$i169, in_$p170, in_$i171, in_$i172, in_$i173, in_$p174, in_$i175, in_$p176, in_$i177, in_$i178, in_$i179, in_$i180, in_$p181, in_$i182, in_$p183, in_$i184, in_$i185, in_$i186, in_$i187, in_$p188, in_$i189, in_$p190, in_$i191, in_$i192, in_$i193, in_$i194, in_$p195, in_$i196, in_$p197, in_$i198, in_$i199, in_$i200, in_$i201, in_$p202, in_$i203, in_$p204, in_$i205, in_$i206, in_$i207, in_$i208, in_$p209, in_$i210, in_$p211, in_$i212, in_$i213, in_$i214, in_$i215, in_$p216, in_$i217, in_$p218, in_$i219, in_$i220, in_$i221, in_$i222, in_$p223, in_$i224, in_$p225, in_$i226, in_$i227, in_$i228, in_$i229, in_$p230, in_$i231, in_$p232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$p241, in_$p242, in_$p243, in_$p244, in_$p245, in_$i246, in_$i247, in_cmdloc_dummy_var_54, in_cmdloc_dummy_var_55, in_cmdloc_dummy_var_56, in_cmdloc_dummy_var_57, in_cmdloc_dummy_var_58, in_cmdloc_dummy_var_59, in_cmdloc_dummy_var_60, in_cmdloc_dummy_var_61, in_cmdloc_dummy_var_62, in_cmdloc_dummy_var_63, in_cmdloc_dummy_var_64, in_cmdloc_dummy_var_65;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb52:
    assume !(out_$i247 == 1);
    assume {:verifier.code 0} true;
    out_$i100 := out_$i238;
    goto $bb52_dummy;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    out_$i101 := out_$i238;
    assume true;
    goto $bb52;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    out_$i247 := $ne.i32(out_$i246, 0);
    goto corral_source_split_11001;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} out_$i246 := signal_pending(out_$p245);
    call {:si_unique_call 1726} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i246);
    goto corral_source_split_11000;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} out_$p245 := get_current();
    goto corral_source_split_10999;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} schedule();
    goto corral_source_split_10998;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_63 := $M.0;
    out_cmdloc_dummy_var_64 := $M.0;
    call {:si_unique_call 1722} out_cmdloc_dummy_var_65 := $memcpy.i8(out_cmdloc_dummy_var_63, out_cmdloc_dummy_var_64, out_$p243, out_$p244, 32, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_65;
    goto corral_source_split_10997;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    out_$p244 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_10996;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    out_$p243 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_10995;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_60 := $M.0;
    out_cmdloc_dummy_var_61 := $M.0;
    call {:si_unique_call 1721} out_cmdloc_dummy_var_62 := $memcpy.i8(out_cmdloc_dummy_var_60, out_cmdloc_dummy_var_61, out_$p241, out_$p242, 92, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_62;
    goto corral_source_split_10994;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    out_$p242 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_10993;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p241 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_10992;

  $bb50:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    out_$i240 := out_$i238;
    assume true;
    goto $bb50;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    out_$i239 := $ne.i32(out_$i238, 0);
    goto corral_source_split_10988;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    out_$i238 := $and.i32(out_$i236, out_$i237);
    call {:si_unique_call 1720} {:cexpr "events"} boogie_si_record_i32(out_$i238);
    goto corral_source_split_10987;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    out_$i237 := $load.i32($M.0, in_$p4);
    goto corral_source_split_10986;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    out_$i236 := $add.i32(out_$i229, out_$i235);
    goto corral_source_split_10985;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    out_$i235 := (if out_$i234 == 1 then 512 else 0);
    goto corral_source_split_10984;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    out_$i234 := $ne.i32(out_$i231, out_$i233);
    goto corral_source_split_10983;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    out_$i233 := $load.i32($M.0, out_$p232);
    goto corral_source_split_10982;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    out_$p232 := $add.ref($add.ref(in_$p2, $mul.ref(0, 92)), $mul.ref(88, 1));
    goto corral_source_split_10981;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    out_$i231 := $load.i32($M.0, out_$p230);
    goto corral_source_split_10980;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    out_$p230 := $add.ref($add.ref(in_$p3, $mul.ref(0, 92)), $mul.ref(88, 1));
    goto corral_source_split_10979;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    out_$i229 := $add.i32(out_$i222, out_$i228);
    goto corral_source_split_10978;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    out_$i228 := (if out_$i227 == 1 then 256 else 0);
    goto corral_source_split_10977;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    out_$i227 := $ne.i32(out_$i224, out_$i226);
    goto corral_source_split_10976;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    out_$i226 := $load.i32($M.0, out_$p225);
    goto corral_source_split_10975;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    out_$p225 := $add.ref($add.ref(in_$p2, $mul.ref(0, 92)), $mul.ref(84, 1));
    goto corral_source_split_10974;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    out_$i224 := $load.i32($M.0, out_$p223);
    goto corral_source_split_10973;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    out_$p223 := $add.ref($add.ref(in_$p3, $mul.ref(0, 92)), $mul.ref(84, 1));
    goto corral_source_split_10972;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    out_$i222 := $add.i32(out_$i215, out_$i221);
    goto corral_source_split_10971;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    out_$i221 := (if out_$i220 == 1 then 128 else 0);
    goto corral_source_split_10970;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    out_$i220 := $ne.i32(out_$i217, out_$i219);
    goto corral_source_split_10969;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    out_$i219 := $load.i32($M.0, out_$p218);
    goto corral_source_split_10968;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    out_$p218 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_10967;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    out_$i217 := $load.i32($M.0, out_$p216);
    goto corral_source_split_10966;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    out_$p216 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_10965;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    out_$i215 := $add.i32(out_$i208, out_$i214);
    goto corral_source_split_10964;

  corral_source_split_10962:
    assume {:verifier.code 0} true;
    out_$i214 := (if out_$i213 == 1 then 64 else 0);
    goto corral_source_split_10963;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    out_$i213 := $ne.i32(out_$i210, out_$i212);
    goto corral_source_split_10962;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    out_$i212 := $load.i32($M.0, out_$p211);
    goto corral_source_split_10961;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    out_$p211 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_10960;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    out_$i210 := $load.i32($M.0, out_$p209);
    goto corral_source_split_10959;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    out_$p209 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_10958;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    out_$i208 := $add.i32(out_$i201, out_$i207);
    goto corral_source_split_10957;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    out_$i207 := (if out_$i206 == 1 then 8 else 0);
    goto corral_source_split_10956;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    out_$i206 := $ne.i32(out_$i203, out_$i205);
    goto corral_source_split_10955;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    out_$i205 := $load.i32($M.0, out_$p204);
    goto corral_source_split_10954;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    out_$p204 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_10953;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    out_$i203 := $load.i32($M.0, out_$p202);
    goto corral_source_split_10952;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    out_$p202 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_10951;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    out_$i201 := $add.i32(out_$i194, out_$i200);
    goto corral_source_split_10950;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    out_$i200 := (if out_$i199 == 1 then 4 else 0);
    goto corral_source_split_10949;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    out_$i199 := $ne.i32(out_$i196, out_$i198);
    goto corral_source_split_10948;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    out_$i198 := $load.i32($M.0, out_$p197);
    goto corral_source_split_10947;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    out_$p197 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_10946;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    out_$i196 := $load.i32($M.0, out_$p195);
    goto corral_source_split_10945;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    out_$p195 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_10944;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    out_$i194 := $add.i32(out_$i187, out_$i193);
    goto corral_source_split_10943;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    out_$i193 := (if out_$i192 == 1 then 32 else 0);
    goto corral_source_split_10942;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    out_$i192 := $ne.i32(out_$i189, out_$i191);
    goto corral_source_split_10941;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    out_$i191 := $load.i32($M.0, out_$p190);
    goto corral_source_split_10940;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    out_$p190 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_10939;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    out_$i189 := $load.i32($M.0, out_$p188);
    goto corral_source_split_10938;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    out_$p188 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_10937;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    out_$i187 := $add.i32(out_$i180, out_$i186);
    goto corral_source_split_10936;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    out_$i186 := (if out_$i185 == 1 then 16 else 0);
    goto corral_source_split_10935;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    out_$i185 := $ne.i32(out_$i182, out_$i184);
    goto corral_source_split_10934;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    out_$i184 := $load.i32($M.0, out_$p183);
    goto corral_source_split_10933;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    out_$p183 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_10932;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    out_$i182 := $load.i32($M.0, out_$p181);
    goto corral_source_split_10931;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_10930;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    out_$i180 := $add.i32(out_$i173, out_$i179);
    goto corral_source_split_10929;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    out_$i179 := (if out_$i178 == 1 then 2 else 0);
    goto corral_source_split_10928;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    out_$i178 := $ne.i32(out_$i175, out_$i177);
    goto corral_source_split_10927;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    out_$i177 := $load.i32($M.0, out_$p176);
    goto corral_source_split_10926;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    out_$p176 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_10925;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    out_$i175 := $load.i32($M.0, out_$p174);
    goto corral_source_split_10924;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_10923;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    out_$i173 := $zext.i1.i32(out_$i172);
    goto corral_source_split_10922;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    out_$i172 := $ne.i32(out_$i169, out_$i171);
    goto corral_source_split_10921;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    out_$i171 := $load.i32($M.0, out_$p170);
    goto corral_source_split_10920;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_10919;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    out_$i169 := $load.i32($M.0, out_$p168);
    goto corral_source_split_10918;

  $bb48:
    assume {:verifier.code 0} true;
    out_$p168 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_10917;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i121 == 1);
    goto $bb29;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i126 == 1);
    goto $bb29;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i131 == 1);
    goto $bb29;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i136 == 1);
    goto $bb29;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i141 == 1);
    goto $bb29;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i146 == 1);
    goto $bb29;

  $bb41:
    assume {:verifier.code 0} true;
    assume !(out_$i151 == 1);
    goto $bb29;

  $bb43:
    assume {:verifier.code 0} true;
    assume !(out_$i156 == 1);
    goto $bb29;

  $bb45:
    assume {:verifier.code 0} true;
    assume !(out_$i161 == 1);
    goto $bb29;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i166 == 1);
    goto $bb29;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    out_$i167 := out_$i100;
    assume true;
    goto $bb47;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i163, out_$i165);
    goto corral_source_split_10913;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    out_$i165 := $load.i32($M.0, out_$p164);
    goto corral_source_split_10912;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref($add.ref(in_$p2, $mul.ref(0, 92)), $mul.ref(88, 1));
    goto corral_source_split_10911;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i32($M.0, out_$p162);
    goto corral_source_split_10910;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(in_$p3, $mul.ref(0, 92)), $mul.ref(88, 1));
    goto corral_source_split_10909;

  $bb44:
    assume out_$i161 == 1;
    goto corral_source_split_10908;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i32(out_$i158, out_$i160);
    goto corral_source_split_10906;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    out_$i160 := $load.i32($M.0, out_$p159);
    goto corral_source_split_10905;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(in_$p2, $mul.ref(0, 92)), $mul.ref(84, 1));
    goto corral_source_split_10904;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    out_$i158 := $load.i32($M.0, out_$p157);
    goto corral_source_split_10903;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref(in_$p3, $mul.ref(0, 92)), $mul.ref(84, 1));
    goto corral_source_split_10902;

  $bb42:
    assume out_$i156 == 1;
    goto corral_source_split_10901;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    out_$i156 := $eq.i32(out_$i153, out_$i155);
    goto corral_source_split_10899;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    out_$i155 := $load.i32($M.0, out_$p154);
    goto corral_source_split_10898;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_10897;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    out_$i153 := $load.i32($M.0, out_$p152);
    goto corral_source_split_10896;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_10895;

  $bb40:
    assume out_$i151 == 1;
    goto corral_source_split_10894;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    out_$i151 := $eq.i32(out_$i148, out_$i150);
    goto corral_source_split_10892;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    out_$i150 := $load.i32($M.0, out_$p149);
    goto corral_source_split_10891;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_10890;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    out_$i148 := $load.i32($M.0, out_$p147);
    goto corral_source_split_10889;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_10888;

  $bb38:
    assume out_$i146 == 1;
    goto corral_source_split_10887;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i32(out_$i143, out_$i145);
    goto corral_source_split_10885;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    out_$i145 := $load.i32($M.0, out_$p144);
    goto corral_source_split_10884;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_10883;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    out_$i143 := $load.i32($M.0, out_$p142);
    goto corral_source_split_10882;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_10881;

  $bb36:
    assume out_$i141 == 1;
    goto corral_source_split_10880;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    out_$i141 := $eq.i32(out_$i138, out_$i140);
    goto corral_source_split_10878;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    out_$i140 := $load.i32($M.0, out_$p139);
    goto corral_source_split_10877;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_10876;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i32($M.0, out_$p137);
    goto corral_source_split_10875;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_10874;

  $bb34:
    assume out_$i136 == 1;
    goto corral_source_split_10873;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    out_$i136 := $eq.i32(out_$i133, out_$i135);
    goto corral_source_split_10871;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i32($M.0, out_$p134);
    goto corral_source_split_10870;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_10869;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i32($M.0, out_$p132);
    goto corral_source_split_10868;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_10867;

  $bb32:
    assume out_$i131 == 1;
    goto corral_source_split_10866;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i128, out_$i130);
    goto corral_source_split_10864;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i32($M.0, out_$p129);
    goto corral_source_split_10863;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_10862;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    out_$i128 := $load.i32($M.0, out_$p127);
    goto corral_source_split_10861;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_10860;

  $bb30:
    assume out_$i126 == 1;
    goto corral_source_split_10859;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i123, out_$i125);
    goto corral_source_split_10857;

  corral_source_split_10855:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i32($M.0, out_$p124);
    goto corral_source_split_10856;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_10855;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    out_$i123 := $load.i32($M.0, out_$p122);
    goto corral_source_split_10854;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_10853;

  $bb27:
    assume out_$i121 == 1;
    goto corral_source_split_10852;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i32(out_$i118, out_$i120);
    goto corral_source_split_10850;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i32($M.0, out_$p119);
    goto corral_source_split_10849;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_10848;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i32($M.0, out_$p117);
    goto corral_source_split_10847;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_10846;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} spin_unlock_irqrestore(out_$p116, $u0);
    goto corral_source_split_10845;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_10844;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_10841:
    assume {:verifier.code 0} true;
    $M.57 := $store.i64($M.57, in_$p9, out_$i115);
    goto corral_source_split_10842;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(out_$p112, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 1718} out_$i115 := devirtbounce.5(0, out_$p114, out_$i113, out_$p114);
    goto corral_source_split_10841;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i64($M.57, in_$p9);
    goto corral_source_split_10840;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} out_$p112 := get_current();
    goto corral_source_split_10839;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    $M.57 := $store.i64($M.57, in_$p9, 1);
    goto corral_source_split_10838;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    $M.50 := $store.i64($M.50, out_$p111, 0);
    goto corral_source_split_10837;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(out_$p110, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_10836;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} out_$p110 := get_current();
    goto corral_source_split_10835;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_57 := $M.0;
    out_cmdloc_dummy_var_58 := $M.0;
    call {:si_unique_call 1715} out_cmdloc_dummy_var_59 := $memcpy.i8(out_cmdloc_dummy_var_57, out_cmdloc_dummy_var_58, out_$p108, out_$p109, 32, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_59;
    goto corral_source_split_10834;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    out_$p109 := $bitcast.ref.ref(out_$p107);
    goto corral_source_split_10833;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    out_$p108 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_10832;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(6268, 1));
    goto corral_source_split_10831;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_54 := $M.0;
    out_cmdloc_dummy_var_55 := $M.0;
    call {:si_unique_call 1714} out_cmdloc_dummy_var_56 := $memcpy.i8(out_cmdloc_dummy_var_54, out_cmdloc_dummy_var_55, out_$p105, out_$p106, 92, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_56;
    goto corral_source_split_10830;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    out_$p106 := $bitcast.ref.ref(out_$p104);
    goto corral_source_split_10829;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    out_$p105 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_10828;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1064, 1));
    goto corral_source_split_10827;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} ldv_spin_lock();
    goto corral_source_split_10826;

  $bb52_dummy:
    call {:si_unique_call 1} out_$i101, out_$i100, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$p114, out_$i115, out_$p116, out_$p117, out_$i118, out_$p119, out_$i120, out_$i121, out_$p122, out_$i123, out_$p124, out_$i125, out_$i126, out_$p127, out_$i128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i133, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$p139, out_$i140, out_$i141, out_$p142, out_$i143, out_$p144, out_$i145, out_$i146, out_$p147, out_$i148, out_$p149, out_$i150, out_$i151, out_$p152, out_$i153, out_$p154, out_$i155, out_$i156, out_$p157, out_$i158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$p164, out_$i165, out_$i166, out_$i167, out_$p168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$p181, out_$i182, out_$p183, out_$i184, out_$i185, out_$i186, out_$i187, out_$p188, out_$i189, out_$p190, out_$i191, out_$i192, out_$i193, out_$i194, out_$p195, out_$i196, out_$p197, out_$i198, out_$i199, out_$i200, out_$i201, out_$p202, out_$i203, out_$p204, out_$i205, out_$i206, out_$i207, out_$i208, out_$p209, out_$i210, out_$p211, out_$i212, out_$i213, out_$i214, out_$i215, out_$p216, out_$i217, out_$p218, out_$i219, out_$i220, out_$i221, out_$i222, out_$p223, out_$i224, out_$p225, out_$i226, out_$i227, out_$i228, out_$i229, out_$p230, out_$i231, out_$p232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$p242, out_$p243, out_$p244, out_$p245, out_$i246, out_$i247, out_cmdloc_dummy_var_54, out_cmdloc_dummy_var_55, out_cmdloc_dummy_var_56, out_cmdloc_dummy_var_57, out_cmdloc_dummy_var_58, out_cmdloc_dummy_var_59, out_cmdloc_dummy_var_60, out_cmdloc_dummy_var_61, out_cmdloc_dummy_var_62, out_cmdloc_dummy_var_63, out_cmdloc_dummy_var_64, out_cmdloc_dummy_var_65 := wait_mgsl_event_loop_$bb22(in_$p0, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p9, out_$i101, out_$i100, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$p114, out_$i115, out_$p116, out_$p117, out_$i118, out_$p119, out_$i120, out_$i121, out_$p122, out_$i123, out_$p124, out_$i125, out_$i126, out_$p127, out_$i128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i133, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$p139, out_$i140, out_$i141, out_$p142, out_$i143, out_$p144, out_$i145, out_$i146, out_$p147, out_$i148, out_$p149, out_$i150, out_$i151, out_$p152, out_$i153, out_$p154, out_$i155, out_$i156, out_$p157, out_$i158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$p164, out_$i165, out_$i166, out_$i167, out_$p168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$p181, out_$i182, out_$p183, out_$i184, out_$i185, out_$i186, out_$i187, out_$p188, out_$i189, out_$p190, out_$i191, out_$i192, out_$i193, out_$i194, out_$p195, out_$i196, out_$p197, out_$i198, out_$i199, out_$i200, out_$i201, out_$p202, out_$i203, out_$p204, out_$i205, out_$i206, out_$i207, out_$i208, out_$p209, out_$i210, out_$p211, out_$i212, out_$i213, out_$i214, out_$i215, out_$p216, out_$i217, out_$p218, out_$i219, out_$i220, out_$i221, out_$i222, out_$p223, out_$i224, out_$p225, out_$i226, out_$i227, out_$i228, out_$i229, out_$p230, out_$i231, out_$p232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$p242, out_$p243, out_$p244, out_$p245, out_$i246, out_$i247, out_cmdloc_dummy_var_54, out_cmdloc_dummy_var_55, out_cmdloc_dummy_var_56, out_cmdloc_dummy_var_57, out_cmdloc_dummy_var_58, out_cmdloc_dummy_var_59, out_cmdloc_dummy_var_60, out_cmdloc_dummy_var_61, out_cmdloc_dummy_var_62, out_cmdloc_dummy_var_63, out_cmdloc_dummy_var_64, out_cmdloc_dummy_var_65);
    return;

  exit:
    return;
}



procedure wait_mgsl_event_loop_$bb22(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p9: ref, in_$i101: i32, in_$i100: i32, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$p114: ref, in_$i115: i64, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i123: i32, in_$p124: ref, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$i128: i32, in_$p129: ref, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$i133: i32, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i32, in_$p139: ref, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$i143: i32, in_$p144: ref, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i148: i32, in_$p149: ref, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$i153: i32, in_$p154: ref, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i32, in_$p159: ref, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$p164: ref, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$p168: ref, in_$i169: i32, in_$p170: ref, in_$i171: i32, in_$i172: i1, in_$i173: i32, in_$p174: ref, in_$i175: i32, in_$p176: ref, in_$i177: i32, in_$i178: i1, in_$i179: i32, in_$i180: i32, in_$p181: ref, in_$i182: i32, in_$p183: ref, in_$i184: i32, in_$i185: i1, in_$i186: i32, in_$i187: i32, in_$p188: ref, in_$i189: i32, in_$p190: ref, in_$i191: i32, in_$i192: i1, in_$i193: i32, in_$i194: i32, in_$p195: ref, in_$i196: i32, in_$p197: ref, in_$i198: i32, in_$i199: i1, in_$i200: i32, in_$i201: i32, in_$p202: ref, in_$i203: i32, in_$p204: ref, in_$i205: i32, in_$i206: i1, in_$i207: i32, in_$i208: i32, in_$p209: ref, in_$i210: i32, in_$p211: ref, in_$i212: i32, in_$i213: i1, in_$i214: i32, in_$i215: i32, in_$p216: ref, in_$i217: i32, in_$p218: ref, in_$i219: i32, in_$i220: i1, in_$i221: i32, in_$i222: i32, in_$p223: ref, in_$i224: i32, in_$p225: ref, in_$i226: i32, in_$i227: i1, in_$i228: i32, in_$i229: i32, in_$p230: ref, in_$i231: i32, in_$p232: ref, in_$i233: i32, in_$i234: i1, in_$i235: i32, in_$i236: i32, in_$i237: i32, in_$i238: i32, in_$i239: i1, in_$i240: i32, in_$p241: ref, in_$p242: ref, in_$p243: ref, in_$p244: ref, in_$p245: ref, in_$i246: i32, in_$i247: i1, in_cmdloc_dummy_var_54: [ref]i8, in_cmdloc_dummy_var_55: [ref]i8, in_cmdloc_dummy_var_56: [ref]i8, in_cmdloc_dummy_var_57: [ref]i8, in_cmdloc_dummy_var_58: [ref]i8, in_cmdloc_dummy_var_59: [ref]i8, in_cmdloc_dummy_var_60: [ref]i8, in_cmdloc_dummy_var_61: [ref]i8, in_cmdloc_dummy_var_62: [ref]i8, in_cmdloc_dummy_var_63: [ref]i8, in_cmdloc_dummy_var_64: [ref]i8, in_cmdloc_dummy_var_65: [ref]i8) returns (out_$i101: i32, out_$i100: i32, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$p114: ref, out_$i115: i64, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i123: i32, out_$p124: ref, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$i128: i32, out_$p129: ref, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$i133: i32, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i32, out_$p139: ref, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$i143: i32, out_$p144: ref, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i148: i32, out_$p149: ref, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$i153: i32, out_$p154: ref, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i32, out_$p159: ref, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$p164: ref, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$p168: ref, out_$i169: i32, out_$p170: ref, out_$i171: i32, out_$i172: i1, out_$i173: i32, out_$p174: ref, out_$i175: i32, out_$p176: ref, out_$i177: i32, out_$i178: i1, out_$i179: i32, out_$i180: i32, out_$p181: ref, out_$i182: i32, out_$p183: ref, out_$i184: i32, out_$i185: i1, out_$i186: i32, out_$i187: i32, out_$p188: ref, out_$i189: i32, out_$p190: ref, out_$i191: i32, out_$i192: i1, out_$i193: i32, out_$i194: i32, out_$p195: ref, out_$i196: i32, out_$p197: ref, out_$i198: i32, out_$i199: i1, out_$i200: i32, out_$i201: i32, out_$p202: ref, out_$i203: i32, out_$p204: ref, out_$i205: i32, out_$i206: i1, out_$i207: i32, out_$i208: i32, out_$p209: ref, out_$i210: i32, out_$p211: ref, out_$i212: i32, out_$i213: i1, out_$i214: i32, out_$i215: i32, out_$p216: ref, out_$i217: i32, out_$p218: ref, out_$i219: i32, out_$i220: i1, out_$i221: i32, out_$i222: i32, out_$p223: ref, out_$i224: i32, out_$p225: ref, out_$i226: i32, out_$i227: i1, out_$i228: i32, out_$i229: i32, out_$p230: ref, out_$i231: i32, out_$p232: ref, out_$i233: i32, out_$i234: i1, out_$i235: i32, out_$i236: i32, out_$i237: i32, out_$i238: i32, out_$i239: i1, out_$i240: i32, out_$p241: ref, out_$p242: ref, out_$p243: ref, out_$p244: ref, out_$p245: ref, out_$i246: i32, out_$i247: i1, out_cmdloc_dummy_var_54: [ref]i8, out_cmdloc_dummy_var_55: [ref]i8, out_cmdloc_dummy_var_56: [ref]i8, out_cmdloc_dummy_var_57: [ref]i8, out_cmdloc_dummy_var_58: [ref]i8, out_cmdloc_dummy_var_59: [ref]i8, out_cmdloc_dummy_var_60: [ref]i8, out_cmdloc_dummy_var_61: [ref]i8, out_cmdloc_dummy_var_62: [ref]i8, out_cmdloc_dummy_var_63: [ref]i8, out_cmdloc_dummy_var_64: [ref]i8, out_cmdloc_dummy_var_65: [ref]i8);
  modifies $M.0, $M.1, $M.57, $M.50;



implementation modem_input_wait_loop_$bb5(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$p3: ref, in_$p6: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p39: ref, in_$i40: i64, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$p52: ref, in_$i53: i32, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$i65: i32, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$i72: i32, in_$p73: ref, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$i79: i32, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$i84: i1, in_$p85: ref, in_$i86: i32, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i32, in_$i94: i1, in_cmdloc_dummy_var_69: [ref]i8, in_cmdloc_dummy_var_70: [ref]i8, in_cmdloc_dummy_var_71: [ref]i8, in_cmdloc_dummy_var_72: [ref]i8, in_cmdloc_dummy_var_73: [ref]i8, in_cmdloc_dummy_var_74: [ref]i8) returns (out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p39: ref, out_$i40: i64, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$p52: ref, out_$i53: i32, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$i65: i32, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$i72: i32, out_$p73: ref, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$i79: i32, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$i84: i1, out_$p85: ref, out_$i86: i32, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i32, out_$i94: i1, out_cmdloc_dummy_var_69: [ref]i8, out_cmdloc_dummy_var_70: [ref]i8, out_cmdloc_dummy_var_71: [ref]i8, out_cmdloc_dummy_var_72: [ref]i8, out_cmdloc_dummy_var_73: [ref]i8, out_cmdloc_dummy_var_74: [ref]i8)
{

  entry:
    out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$p39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$i53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_cmdloc_dummy_var_69, out_cmdloc_dummy_var_70, out_cmdloc_dummy_var_71, out_cmdloc_dummy_var_72, out_cmdloc_dummy_var_73, out_cmdloc_dummy_var_74 := in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$i38, in_$p39, in_$i40, in_$p41, in_$p42, in_$i43, in_$p44, in_$i45, in_$i46, in_$p47, in_$i48, in_$p49, in_$i50, in_$i51, in_$p52, in_$i53, in_$p54, in_$i55, in_$i56, in_$p57, in_$i58, in_$p59, in_$i60, in_$i61, in_$i62, in_$i63, in_$p64, in_$i65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$p71, in_$i72, in_$p73, in_$i74, in_$i75, in_$i76, in_$i77, in_$p78, in_$i79, in_$p80, in_$i81, in_$i82, in_$i83, in_$i84, in_$p85, in_$i86, in_$p87, in_$i88, in_$i89, in_$p90, in_$p91, in_$p92, in_$i93, in_$i94, in_cmdloc_dummy_var_69, in_cmdloc_dummy_var_70, in_cmdloc_dummy_var_71, in_cmdloc_dummy_var_72, in_cmdloc_dummy_var_73, in_cmdloc_dummy_var_74;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb42:
    assume {:verifier.code 0} true;
    assume !(out_$i94 == 1);
    goto $bb42_dummy;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    out_$i94 := $ne.i32(out_$i93, 0);
    goto corral_source_split_11178;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} out_$i93 := signal_pending(out_$p92);
    call {:si_unique_call 1768} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i93);
    goto corral_source_split_11177;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} out_$p92 := get_current();
    goto corral_source_split_11176;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} schedule();
    goto corral_source_split_11175;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_72 := $M.0;
    out_cmdloc_dummy_var_73 := $M.0;
    call {:si_unique_call 1764} out_cmdloc_dummy_var_74 := $memcpy.i8(out_cmdloc_dummy_var_72, out_cmdloc_dummy_var_73, out_$p90, out_$p91, 92, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_74;
    goto corral_source_split_11174;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    out_$p91 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_11173;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p90 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_11172;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i84 == 1);
    goto $bb38;

  $bb40:
    assume {:verifier.code 0} true;
    assume !(out_$i89 == 1);
    goto $bb38;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i32(out_$i86, out_$i88);
    goto corral_source_split_11170;

  corral_source_split_11168:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.0, out_$p87);
    goto corral_source_split_11169;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p2, $mul.ref(0, 92)), $mul.ref(0, 1));
    goto corral_source_split_11168;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i32($M.0, out_$p85);
    goto corral_source_split_11167;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p3, $mul.ref(0, 92)), $mul.ref(0, 1));
    goto corral_source_split_11166;

  $bb36:
    assume out_$i84 == 1;
    goto corral_source_split_11165;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i32(out_$i83, 0);
    goto corral_source_split_11163;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i83 := $and.i32(in_$i1, 32);
    goto corral_source_split_11162;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i77 == 1);
    goto $bb33;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i82 == 1);
    goto $bb33;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i32(out_$i79, out_$i81);
    goto corral_source_split_11160;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i32($M.0, out_$p80);
    goto corral_source_split_11159;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p2, $mul.ref(0, 92)), $mul.ref(12, 1));
    goto corral_source_split_11158;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i32($M.0, out_$p78);
    goto corral_source_split_11157;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p3, $mul.ref(0, 92)), $mul.ref(12, 1));
    goto corral_source_split_11156;

  $bb31:
    assume out_$i77 == 1;
    goto corral_source_split_11155;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i32(out_$i76, 0);
    goto corral_source_split_11153;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i76 := $and.i32(in_$i1, 64);
    goto corral_source_split_11152;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i70 == 1);
    goto $bb28;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i75 == 1);
    goto $bb28;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i32(out_$i72, out_$i74);
    goto corral_source_split_11150;

  corral_source_split_11148:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.0, out_$p73);
    goto corral_source_split_11149;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p2, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_11148;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i32($M.0, out_$p71);
    goto corral_source_split_11147;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p3, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_11146;

  $bb26:
    assume out_$i70 == 1;
    goto corral_source_split_11145;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i32(out_$i69, 0);
    goto corral_source_split_11143;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i69 := $and.i32(in_$i1, 256);
    goto corral_source_split_11142;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i63 == 1);
    goto $bb22;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i68 == 1);
    goto $bb22;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i32(out_$i65, out_$i67);
    goto corral_source_split_11140;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i32($M.0, out_$p66);
    goto corral_source_split_11139;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p2, $mul.ref(0, 92)), $mul.ref(8, 1));
    goto corral_source_split_11138;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, out_$p64);
    goto corral_source_split_11137;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p3, $mul.ref(0, 92)), $mul.ref(8, 1));
    goto corral_source_split_11136;

  $bb20:
    assume out_$i63 == 1;
    goto corral_source_split_11135;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i32(out_$i62, 0);
    goto corral_source_split_11133;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i62 := $and.i32(in_$i1, 128);
    goto corral_source_split_11132;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i46 == 1);
    goto $bb12;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i51 == 1);
    goto $bb12;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i56 == 1);
    goto $bb12;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i61 == 1);
    goto $bb12;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i58, out_$i60);
    goto corral_source_split_11128;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.0, out_$p59);
    goto corral_source_split_11127;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p2, $mul.ref(0, 92)), $mul.ref(0, 1));
    goto corral_source_split_11126;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.0, out_$p57);
    goto corral_source_split_11125;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p3, $mul.ref(0, 92)), $mul.ref(0, 1));
    goto corral_source_split_11124;

  $bb15:
    assume out_$i56 == 1;
    goto corral_source_split_11123;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i53, out_$i55);
    goto corral_source_split_11121;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.0, out_$p54);
    goto corral_source_split_11120;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p2, $mul.ref(0, 92)), $mul.ref(12, 1));
    goto corral_source_split_11119;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.0, out_$p52);
    goto corral_source_split_11118;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p3, $mul.ref(0, 92)), $mul.ref(12, 1));
    goto corral_source_split_11117;

  $bb13:
    assume out_$i51 == 1;
    goto corral_source_split_11116;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i48, out_$i50);
    goto corral_source_split_11114;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, out_$p49);
    goto corral_source_split_11113;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p2, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_11112;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, out_$p47);
    goto corral_source_split_11111;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p3, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_11110;

  $bb10:
    assume out_$i46 == 1;
    goto corral_source_split_11109;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i43, out_$i45);
    goto corral_source_split_11107;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_11106;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p2, $mul.ref(0, 92)), $mul.ref(8, 1));
    goto corral_source_split_11105;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.0, out_$p42);
    goto corral_source_split_11104;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p3, $mul.ref(0, 92)), $mul.ref(8, 1));
    goto corral_source_split_11103;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} spin_unlock_irqrestore(out_$p41, $u0);
    goto corral_source_split_11102;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1640, 1));
    goto corral_source_split_11101;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    $M.60 := $store.i64($M.60, in_$p6, out_$i40);
    goto corral_source_split_11099;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p37, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 1762} out_$i40 := devirtbounce.5(0, out_$p39, out_$i38, out_$p39);
    goto corral_source_split_11098;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i64($M.60, in_$p6);
    goto corral_source_split_11097;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} out_$p37 := get_current();
    goto corral_source_split_11096;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    $M.60 := $store.i64($M.60, in_$p6, 1);
    goto corral_source_split_11095;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    $M.50 := $store.i64($M.50, out_$p36, 0);
    goto corral_source_split_11094;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p35, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_11093;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} out_$p35 := get_current();
    goto corral_source_split_11092;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_69 := $M.0;
    out_cmdloc_dummy_var_70 := $M.0;
    call {:si_unique_call 1759} out_cmdloc_dummy_var_71 := $memcpy.i8(out_cmdloc_dummy_var_69, out_cmdloc_dummy_var_70, out_$p33, out_$p34, 92, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_71;
    goto corral_source_split_11091;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_11090;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_11089;

  corral_source_split_11087:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6384)), $mul.ref(1064, 1));
    goto corral_source_split_11088;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} ldv_spin_lock();
    goto corral_source_split_11087;

  $bb42_dummy:
    call {:si_unique_call 1} out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$p39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$i53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_cmdloc_dummy_var_69, out_cmdloc_dummy_var_70, out_cmdloc_dummy_var_71, out_cmdloc_dummy_var_72, out_cmdloc_dummy_var_73, out_cmdloc_dummy_var_74 := modem_input_wait_loop_$bb5(in_$p0, in_$i1, in_$p2, in_$p3, in_$p6, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$p39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$i53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_cmdloc_dummy_var_69, out_cmdloc_dummy_var_70, out_cmdloc_dummy_var_71, out_cmdloc_dummy_var_72, out_cmdloc_dummy_var_73, out_cmdloc_dummy_var_74);
    return;

  exit:
    return;
}



procedure modem_input_wait_loop_$bb5(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$p3: ref, in_$p6: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p39: ref, in_$i40: i64, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$p52: ref, in_$i53: i32, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$i65: i32, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$i72: i32, in_$p73: ref, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$i79: i32, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$i84: i1, in_$p85: ref, in_$i86: i32, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i32, in_$i94: i1, in_cmdloc_dummy_var_69: [ref]i8, in_cmdloc_dummy_var_70: [ref]i8, in_cmdloc_dummy_var_71: [ref]i8, in_cmdloc_dummy_var_72: [ref]i8, in_cmdloc_dummy_var_73: [ref]i8, in_cmdloc_dummy_var_74: [ref]i8) returns (out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p39: ref, out_$i40: i64, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$p52: ref, out_$i53: i32, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$i65: i32, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$i72: i32, out_$p73: ref, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$i79: i32, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$i84: i1, out_$p85: ref, out_$i86: i32, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i32, out_$i94: i1, out_cmdloc_dummy_var_69: [ref]i8, out_cmdloc_dummy_var_70: [ref]i8, out_cmdloc_dummy_var_71: [ref]i8, out_cmdloc_dummy_var_72: [ref]i8, out_cmdloc_dummy_var_73: [ref]i8, out_cmdloc_dummy_var_74: [ref]i8);
  modifies $M.0, $M.1, $M.60, $M.50;



implementation block_til_ready_loop_$bb17(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p4: ref, in_$p15: ref, in_$i41: i8, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p73: ref, in_$i74: i64, in_$i75: i32, in_$i76: i1, in_$p77: ref, in_$i78: i64, in_$i79: i64, in_$i80: i1, in_$i88: i32, in_$p89: ref, in_$i90: i64, in_$i91: i64, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$p95: ref, in_$i96: i32, in_$i97: i1, in_$i98: i32, in_$i99: i1, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$i105: i32, in_vslice_dummy_var_442: i32) returns (out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p73: ref, out_$i74: i64, out_$i75: i32, out_$i76: i1, out_$p77: ref, out_$i78: i64, out_$i79: i64, out_$i80: i1, out_$i88: i32, out_$p89: ref, out_$i90: i64, out_$i91: i64, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$p95: ref, out_$i96: i32, out_$i97: i1, out_$i98: i32, out_$i99: i1, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$i105: i32, out_vslice_dummy_var_442: i32)
{

  entry:
    out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_vslice_dummy_var_442 := in_$p62, in_$i63, in_$i64, in_$i65, in_$p66, in_$i67, in_$i68, in_$p69, in_$p70, in_$p71, in_$i72, in_$p73, in_$i74, in_$i75, in_$i76, in_$p77, in_$i78, in_$i79, in_$i80, in_$i88, in_$p89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99, in_$p100, in_$p101, in_$p102, in_$p103, in_$p104, in_$i105, in_vslice_dummy_var_442;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_11288;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    goto corral_source_split_11364_dummy;

  corral_source_split_11363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} tty_lock(in_$p0);
    goto corral_source_split_11364;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} schedule();
    goto corral_source_split_11363;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} tty_unlock(in_$p0);
    goto corral_source_split_11362;

  $bb45:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} out_vslice_dummy_var_442 := printk.ref.ref.i32.ref.i32(.str.136, .str.1, 3355, out_$p103, out_$i105);
    goto corral_source_split_11360;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i32($M.0, out_$p104);
    goto corral_source_split_11359;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    out_$p103 := $load.ref($M.0, out_$p102);
    out_$p104 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(412, 1));
    goto corral_source_split_11358;

  corral_source_split_11356:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(out_$p101, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_11357;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    out_$p101 := $load.ref($M.0, out_$p100);
    goto corral_source_split_11356;

  corral_source_split_11354:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1816)), $mul.ref(16, 1));
    goto corral_source_split_11355;

  $bb44:
    assume out_$i99 == 1;
    goto corral_source_split_11354;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    out_$i99 := $sgt.i32(out_$i98, 2);
    goto corral_source_split_11352;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i98 := $M.2;
    goto corral_source_split_11351;

  $bb42:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.i32(out_$i96, 0);
    goto corral_source_split_11347;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} out_$i96 := signal_pending(out_$p95);
    call {:si_unique_call 1801} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_11346;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} out_$p95 := get_current();
    goto corral_source_split_11345;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i92 == 1);
    goto $bb34;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i94 == 1);
    goto $bb34;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    out_$i94 := $ne.i32(out_$i88, 0);
    goto corral_source_split_11343;

  $bb37:
    assume !(out_$i93 == 1);
    goto corral_source_split_11342;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    out_$i93 := $trunc.i8.i1(in_$i41);
    goto corral_source_split_11340;

  $bb32:
    assume out_$i92 == 1;
    goto corral_source_split_11339;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_11336:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i64(out_$i91, 0);
    goto corral_source_split_11337;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    out_$i91 := $and.i64(out_$i90, 134217728);
    goto corral_source_split_11336;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i64($M.0, out_$p89);
    goto corral_source_split_11335;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} out_$i88 := tty_port_carrier_raised(in_$p15);
    call {:si_unique_call 1798} {:cexpr "cd"} boogie_si_record_i32(out_$i88);
    out_$p89 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_11334;

  $bb29:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_11321:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i64(out_$i79, 0);
    goto corral_source_split_11322;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    out_$i79 := $and.i64(out_$i78, 2147483648);
    goto corral_source_split_11321;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i64($M.0, out_$p77);
    goto corral_source_split_11320;

  $bb27:
    assume !(out_$i76 == 1);
    out_$p77 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_11319;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i32(out_$i75, 0);
    goto corral_source_split_11310;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} out_$i75 := tty_hung_up_p(in_$p1);
    call {:si_unique_call 1792} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_11309;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    $M.62 := $store.i64($M.62, in_$p4, out_$i74);
    goto corral_source_split_11307;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p71, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 1790} out_$i74 := devirtbounce.5(0, out_$p73, out_$i72, out_$p73);
    goto corral_source_split_11306;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i64($M.62, in_$p4);
    goto corral_source_split_11305;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} out_$p71 := get_current();
    goto corral_source_split_11304;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    $M.62 := $store.i64($M.62, in_$p4, 1);
    goto corral_source_split_11303;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    $M.50 := $store.i64($M.50, out_$p70, 0);
    goto corral_source_split_11302;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p69, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_11301;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} out_$p69 := get_current();
    goto corral_source_split_11300;

  $bb19:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} tty_port_raise_dtr_rts(in_$p15);
    goto corral_source_split_11298;

  $bb20:
    assume out_$i68 == 1;
    goto corral_source_split_11297;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i32(out_$i67, 0);
    goto corral_source_split_11295;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} out_$i67 := constant_test_bit(31, out_$p66);
    call {:si_unique_call 1786} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_11294;

  $bb18:
    assume out_$i65 == 1;
    out_$p66 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 6384)), $mul.ref(16, 1)), $mul.ref(680, 1));
    goto corral_source_split_11293;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i32(out_$i64, 0);
    goto corral_source_split_11291;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    out_$i64 := $and.i32(out_$i63, 4111);
    goto corral_source_split_11290;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.0, out_$p62);
    goto corral_source_split_11289;

  corral_source_split_11364_dummy:
    call {:si_unique_call 1} out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_vslice_dummy_var_442 := block_til_ready_loop_$bb17(in_$p0, in_$p1, in_$p2, in_$p4, in_$p15, in_$i41, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_vslice_dummy_var_442);
    return;

  exit:
    return;
}



procedure block_til_ready_loop_$bb17(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p4: ref, in_$p15: ref, in_$i41: i8, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p73: ref, in_$i74: i64, in_$i75: i32, in_$i76: i1, in_$p77: ref, in_$i78: i64, in_$i79: i64, in_$i80: i1, in_$i88: i32, in_$p89: ref, in_$i90: i64, in_$i91: i64, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$p95: ref, in_$i96: i32, in_$i97: i1, in_$i98: i32, in_$i99: i1, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$i105: i32, in_vslice_dummy_var_442: i32) returns (out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p73: ref, out_$i74: i64, out_$i75: i32, out_$i76: i1, out_$p77: ref, out_$i78: i64, out_$i79: i64, out_$i80: i1, out_$i88: i32, out_$p89: ref, out_$i90: i64, out_$i91: i64, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$p95: ref, out_$i96: i32, out_$i97: i1, out_$i98: i32, out_$i99: i1, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$i105: i32, out_vslice_dummy_var_442: i32);
  modifies $M.62, $M.50;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p32: ref, in_$p34: ref, in_$i63: i32, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i32, in_$i85: i1, in_$i87: i32, in_$i88: i1, in_$i90: i32, in_$i91: i1, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$i96: i32, in_$i97: i1, in_$i98: i32, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i105: i32, in_$i106: i1, in_$i107: i32, in_$i108: i32, in_$i109: i1, in_$i110: i32, in_$i111: i32, in_$i112: i32, in_$i113: i1, in_$i115: i32, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i32, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$i143: i32, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i148: i32, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$i153: i32, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i32, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i164: i32, in_$i165: i1, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$i170: i32, in_$i171: i1, in_$p172: ref, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i179: i32, in_$i180: i1, in_$i181: i32, in_$i182: i32, in_$i183: i1, in_$i184: i32, in_$i185: i32, in_$i186: i32, in_$i187: i1, in_$i189: i32, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$i193: i32, in_$i194: i1, in_$i195: i1, in_$i196: i1, in_$i197: i1, in_$i198: i32, in_$i199: i1, in_$p200: ref, in_$i201: i32, in_$i202: i32, in_$i203: i1, in_$i204: i32, in_$i205: i32, in_$i206: i32, in_$i207: i1, in_$p208: ref, in_$i209: i32, in_$i210: i1, in_$i212: i32, in_$i213: i1, in_$i214: i32, in_$i215: i1, in_$i216: i32, in_$i217: i1, in_$i218: i1, in_$i219: i1, in_$i220: i1, in_$i221: i1, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$p225: ref, in_$i227: i32, in_$i228: i32, in_$i229: i32, in_$i230: i1, in_$p231: ref, in_$i232: i64, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$i237: i64, in_$i238: i32, in_$i240: i32, in_$i241: i1, in_$p242: ref, in_$p243: ref, in_$i244: i32, in_$i245: i32, in_$i246: i1, in_$i247: i32, in_$i248: i32, in_$i249: i32, in_$i250: i1, in_$i251: i32, in_$i252: i1, in_$i253: i32, in_$i254: i1, in_$i255: i32, in_$i256: i1, in_$i257: i1, in_$i258: i1, in_$i259: i32, in_$i260: i1, in_$i261: i32, in_$i262: i1, in_$i263: i32, in_$i264: i1, in_$i265: i32, in_$i266: i32, in_$i267: i1, in_$i268: i32, in_$i269: i1, in_$i270: i32, in_$i271: i1, in_$i272: i32, in_$i273: i1, in_$i274: i1, in_$i275: i1, in_$i276: i1, in_$i277: i1, in_$i278: i1, in_$i279: i1, in_$i280: i1, in_$i281: i1, in_$i282: i1, in_$i283: i1, in_$i284: i1, in_$i285: i1, in_$i286: i1, in_$i287: i1, in_$i288: i1, in_$i289: i1, in_$i290: i1, in_$i291: i1, in_$i292: i1, in_$i293: i1, in_$i294: i1, in_$i295: i1, in_$i296: i1, in_$i297: i1, in_$i298: i1, in_$i299: i32, in_$i300: i1, in_$p301: ref, in_$i302: i32, in_$i303: i1, in_$p304: ref, in_$i305: i8, in_$i306: i32, in_$i307: i8, in_$i308: i32, in_$i309: i1, in_$p310: ref, in_$i311: i8, in_$i312: i32, in_$i313: i8, in_$i314: i32, in_$i315: i1, in_$p316: ref, in_$i317: i8, in_$i318: i32, in_$i319: i8, in_$i320: i32, in_$i321: i1, in_$p322: ref, in_$i323: i8, in_$i324: i32, in_$i325: i8, in_$i326: i32, in_$i327: i1, in_$p328: ref, in_$i329: i8, in_$i330: i32, in_$i331: i8, in_$i332: i32, in_$i333: i1, in_$p334: ref, in_$i335: i8, in_$i336: i32, in_$i337: i8, in_$i339: i32, in_$i340: i1, in_$p341: ref, in_$i342: i8, in_$i343: i32, in_$i344: i8, in_$i346: i32, in_$i347: i1, in_$p348: ref, in_$i349: i8, in_$i350: i32, in_$i351: i8, in_$i353: i32, in_$i354: i1, in_$p355: ref, in_$i356: i8, in_$i357: i32, in_$i358: i8, in_$i360: i32, in_$i361: i1, in_$p362: ref, in_$i363: i8, in_$i364: i32, in_$i365: i8, in_$i367: i32, in_$i368: i1, in_$p369: ref, in_$i370: i32, in_$i371: i1, in_$p372: ref, in_$i373: i32, in_$i374: i1, in_$p375: ref, in_$i376: i32, in_$i377: i1, in_$p378: ref, in_$i379: i32, in_$i380: i1, in_$p381: ref, in_$i382: i32, in_$i383: i1, in_$p384: ref, in_$i386: i32, in_$i387: i1, in_$p388: ref, in_$i390: i32, in_$i391: i1, in_$p392: ref, in_$i394: i32, in_$i395: i1, in_$p396: ref, in_$i398: i32, in_$i399: i1, in_$p400: ref, in_$i402: i32, in_$i403: i1, in_$p404: ref, in_$i405: i32, in_$i406: i1, in_$p407: ref, in_$i408: i32, in_$i409: i1, in_$p410: ref, in_$i411: i32, in_$i412: i1, in_$p413: ref, in_$i414: i32, in_$i415: i1, in_$p416: ref, in_$i417: i32, in_$i418: i1, in_$p419: ref, in_$i420: i32, in_$i421: i1, in_$p422: ref, in_$i423: i32, in_$i424: i1, in_$p425: ref, in_$i426: i32, in_$i427: i1, in_$p428: ref, in_$i429: i32, in_$i430: i1, in_$p431: ref, in_$i432: i32, in_$i433: i1, in_$p434: ref, in_$p435: ref, in_$i436: i32, in_$i437: i32, in_$i438: i1, in_$i439: i32, in_$i440: i1, in_$p441: ref, in_$i442: i32, in_$i443: i1, in_$p444: ref, in_$i445: i32, in_$i446: i1, in_$p447: ref, in_$i448: i32, in_$i449: i1, in_$p450: ref, in_$i451: i32, in_$i452: i1, in_$p453: ref, in_$i454: i32, in_$i455: i1, in_$p456: ref, in_$i457: i32, in_$i458: i1, in_$p459: ref, in_$i460: i32, in_$i461: i1, in_$p462: ref, in_$i463: i32, in_$i464: i1, in_$p465: ref, in_$i466: i32, in_$i467: i1, in_$p468: ref, in_$i469: i32, in_$i470: i1, in_$p471: ref, in_$i472: i32, in_$i473: i64, in_$i475: i32, in_$i476: i1, in_$p477: ref, in_$i478: i32, in_$i479: i64, in_$i481: i32, in_$i482: i1, in_$p483: ref, in_$i484: i32, in_$i485: i64, in_$i487: i32, in_$i488: i1, in_$p489: ref, in_$i490: i32, in_$i491: i64, in_$i493: i32, in_$i494: i1, in_$p495: ref, in_$i496: i32, in_$i497: i64, in_$i499: i32, in_$i500: i1, in_$p501: ref, in_$i503: i32, in_$i504: i1, in_$p505: ref, in_$i507: i32, in_$i508: i1, in_$p509: ref, in_$i511: i32, in_$i512: i1, in_$p513: ref, in_$i515: i32, in_$i516: i1, in_$p517: ref, in_$i519: i32, in_$i520: i1, in_$p521: ref, in_$i522: i32, in_$i523: i1, in_$p524: ref, in_$i525: i32, in_$i526: i32, in_$i528: i32, in_$i529: i1, in_$p530: ref, in_$i531: i32, in_$i532: i32, in_$i534: i32, in_$i535: i1, in_$p536: ref, in_$i537: i32, in_$i538: i32, in_$i540: i32, in_$i541: i1, in_$p542: ref, in_$i543: i32, in_$i544: i32, in_$i546: i32, in_$i547: i1, in_$p548: ref, in_$i549: i32, in_$i550: i32, in_$i552: i32, in_$i553: i1, in_$p554: ref, in_$i555: i32, in_$i557: i32, in_$i558: i1, in_$p559: ref, in_$p560: ref, in_$i561: i32, in_$i562: i1, in_$p563: ref, in_$i565: i32, in_$i566: i1, in_$p567: ref, in_$i569: i32, in_$i570: i1, in_$p571: ref, in_$i573: i32, in_$i574: i1, in_$p575: ref, in_$i577: i32, in_$i578: i1, in_$p579: ref, in_$i581: i32, in_$i582: i1, in_$p583: ref, in_$i584: i32, in_$i586: i32, in_$i587: i1, in_$p588: ref, in_$i589: i32, in_$i591: i32, in_$i592: i1, in_$p593: ref, in_$i594: i32, in_$i596: i32, in_$i597: i1, in_$p598: ref, in_$i599: i32, in_$i601: i32, in_$i602: i1, in_$p603: ref, in_$i604: i32, in_$i606: i32, in_$i607: i1, in_$p608: ref, in_$i610: i32, in_$i611: i1, in_$p612: ref, in_$i614: i32, in_$i615: i1, in_$p616: ref, in_$i618: i32, in_$i619: i1, in_$p620: ref, in_$i622: i32, in_$i623: i1, in_$p624: ref, in_$i626: i32, in_$i627: i1, in_$p628: ref, in_$i630: i32, in_$i631: i1, in_$p632: ref, in_$i634: i32, in_$i635: i1, in_$p636: ref, in_$i638: i32, in_$i639: i1, in_$p640: ref, in_$i642: i32, in_$i643: i1, in_$p644: ref, in_$i646: i32, in_$i647: i1, in_$p648: ref, in_$i649: i32, in_$i650: i1, in_$p651: ref, in_$i652: i32, in_$i653: i1, in_$p654: ref, in_$i655: i32, in_$i656: i1, in_$p657: ref, in_$i658: i32, in_$i659: i1, in_$p660: ref, in_$i661: i32, in_$i662: i1, in_$p663: ref, in_$i664: i32, in_$i665: i32, in_$i666: i1, in_$p667: ref, in_$i668: i32, in_$i669: i32, in_$i670: i1, in_$p671: ref, in_$i672: i32, in_$i673: i32, in_$i674: i1, in_$p675: ref, in_$i676: i32, in_$i677: i32, in_$i678: i1, in_$p679: ref, in_$i680: i32, in_$i681: i32, in_$i682: i1, in_$i684: i32, in_$i685: i1, in_$i687: i32, in_$i688: i1, in_$i690: i32, in_$i691: i1, in_$i693: i32, in_$i694: i32, in_$i695: i32, in_$i696: i1, in_$i698: i32, in_$i699: i32, in_vslice_dummy_var_459: i32, in_vslice_dummy_var_460: i32, in_vslice_dummy_var_461: i32, in_vslice_dummy_var_462: i32, in_vslice_dummy_var_463: i32, in_vslice_dummy_var_464: i32, in_vslice_dummy_var_465: i32, in_vslice_dummy_var_466: i32, in_vslice_dummy_var_467: i32, in_vslice_dummy_var_468: i32, in_vslice_dummy_var_469: i32, in_vslice_dummy_var_470: i32, in_vslice_dummy_var_471: i32, in_vslice_dummy_var_472: i32, in_vslice_dummy_var_473: i32, in_vslice_dummy_var_474: i64, in_vslice_dummy_var_475: i64, in_vslice_dummy_var_476: i32, in_vslice_dummy_var_477: i32, in_vslice_dummy_var_478: i32, in_vslice_dummy_var_479: i32, in_vslice_dummy_var_480: i32, in_vslice_dummy_var_481: i32, in_vslice_dummy_var_482: i32, in_vslice_dummy_var_483: i32, in_vslice_dummy_var_484: i32, in_vslice_dummy_var_485: i32, in_vslice_dummy_var_486: i32, in_vslice_dummy_var_487: i32, in_vslice_dummy_var_488: i32, in_vslice_dummy_var_489: i32, in_vslice_dummy_var_490: i32, in_vslice_dummy_var_491: i32, in_vslice_dummy_var_492: i32, in_vslice_dummy_var_493: i32, in_vslice_dummy_var_494: i32, in_vslice_dummy_var_495: i32, in_vslice_dummy_var_496: i32, in_vslice_dummy_var_497: i32, in_vslice_dummy_var_498: i32, in_vslice_dummy_var_499: i32, in_vslice_dummy_var_500: i32, in_vslice_dummy_var_501: i32, in_vslice_dummy_var_502: i32, in_vslice_dummy_var_503: i32, in_vslice_dummy_var_504: i32, in_vslice_dummy_var_505: i32, in_vslice_dummy_var_506: i32, in_vslice_dummy_var_507: i32, in_vslice_dummy_var_508: i32, in_vslice_dummy_var_509: i32, in_vslice_dummy_var_510: i32, in_vslice_dummy_var_511: i32, in_vslice_dummy_var_512: i32, in_vslice_dummy_var_513: i32, in_vslice_dummy_var_514: i32, in_vslice_dummy_var_515: i32, in_vslice_dummy_var_516: i32, in_vslice_dummy_var_517: i32, in_vslice_dummy_var_518: i32, in_vslice_dummy_var_519: i32, in_vslice_dummy_var_520: i32, in_vslice_dummy_var_521: i32, in_vslice_dummy_var_522: i32, in_vslice_dummy_var_523: i32, in_vslice_dummy_var_524: i32, in_vslice_dummy_var_525: i32, in_vslice_dummy_var_526: i32) returns (out_$i63: i32, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i32, out_$i85: i1, out_$i87: i32, out_$i88: i1, out_$i90: i32, out_$i91: i1, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$i96: i32, out_$i97: i1, out_$i98: i32, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i105: i32, out_$i106: i1, out_$i107: i32, out_$i108: i32, out_$i109: i1, out_$i110: i32, out_$i111: i32, out_$i112: i32, out_$i113: i1, out_$i115: i32, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i32, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$i143: i32, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i148: i32, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$i153: i32, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i32, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i164: i32, out_$i165: i1, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$i170: i32, out_$i171: i1, out_$p172: ref, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i179: i32, out_$i180: i1, out_$i181: i32, out_$i182: i32, out_$i183: i1, out_$i184: i32, out_$i185: i32, out_$i186: i32, out_$i187: i1, out_$i189: i32, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$i193: i32, out_$i194: i1, out_$i195: i1, out_$i196: i1, out_$i197: i1, out_$i198: i32, out_$i199: i1, out_$p200: ref, out_$i201: i32, out_$i202: i32, out_$i203: i1, out_$i204: i32, out_$i205: i32, out_$i206: i32, out_$i207: i1, out_$p208: ref, out_$i209: i32, out_$i210: i1, out_$i212: i32, out_$i213: i1, out_$i214: i32, out_$i215: i1, out_$i216: i32, out_$i217: i1, out_$i218: i1, out_$i219: i1, out_$i220: i1, out_$i221: i1, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$p225: ref, out_$i227: i32, out_$i228: i32, out_$i229: i32, out_$i230: i1, out_$p231: ref, out_$i232: i64, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$i237: i64, out_$i238: i32, out_$i240: i32, out_$i241: i1, out_$p242: ref, out_$p243: ref, out_$i244: i32, out_$i245: i32, out_$i246: i1, out_$i247: i32, out_$i248: i32, out_$i249: i32, out_$i250: i1, out_$i251: i32, out_$i252: i1, out_$i253: i32, out_$i254: i1, out_$i255: i32, out_$i256: i1, out_$i257: i1, out_$i258: i1, out_$i259: i32, out_$i260: i1, out_$i261: i32, out_$i262: i1, out_$i263: i32, out_$i264: i1, out_$i265: i32, out_$i266: i32, out_$i267: i1, out_$i268: i32, out_$i269: i1, out_$i270: i32, out_$i271: i1, out_$i272: i32, out_$i273: i1, out_$i274: i1, out_$i275: i1, out_$i276: i1, out_$i277: i1, out_$i278: i1, out_$i279: i1, out_$i280: i1, out_$i281: i1, out_$i282: i1, out_$i283: i1, out_$i284: i1, out_$i285: i1, out_$i286: i1, out_$i287: i1, out_$i288: i1, out_$i289: i1, out_$i290: i1, out_$i291: i1, out_$i292: i1, out_$i293: i1, out_$i294: i1, out_$i295: i1, out_$i296: i1, out_$i297: i1, out_$i298: i1, out_$i299: i32, out_$i300: i1, out_$p301: ref, out_$i302: i32, out_$i303: i1, out_$p304: ref, out_$i305: i8, out_$i306: i32, out_$i307: i8, out_$i308: i32, out_$i309: i1, out_$p310: ref, out_$i311: i8, out_$i312: i32, out_$i313: i8, out_$i314: i32, out_$i315: i1, out_$p316: ref, out_$i317: i8, out_$i318: i32, out_$i319: i8, out_$i320: i32, out_$i321: i1, out_$p322: ref, out_$i323: i8, out_$i324: i32, out_$i325: i8, out_$i326: i32, out_$i327: i1, out_$p328: ref, out_$i329: i8, out_$i330: i32, out_$i331: i8, out_$i332: i32, out_$i333: i1, out_$p334: ref, out_$i335: i8, out_$i336: i32, out_$i337: i8, out_$i339: i32, out_$i340: i1, out_$p341: ref, out_$i342: i8, out_$i343: i32, out_$i344: i8, out_$i346: i32, out_$i347: i1, out_$p348: ref, out_$i349: i8, out_$i350: i32, out_$i351: i8, out_$i353: i32, out_$i354: i1, out_$p355: ref, out_$i356: i8, out_$i357: i32, out_$i358: i8, out_$i360: i32, out_$i361: i1, out_$p362: ref, out_$i363: i8, out_$i364: i32, out_$i365: i8, out_$i367: i32, out_$i368: i1, out_$p369: ref, out_$i370: i32, out_$i371: i1, out_$p372: ref, out_$i373: i32, out_$i374: i1, out_$p375: ref, out_$i376: i32, out_$i377: i1, out_$p378: ref, out_$i379: i32, out_$i380: i1, out_$p381: ref, out_$i382: i32, out_$i383: i1, out_$p384: ref, out_$i386: i32, out_$i387: i1, out_$p388: ref, out_$i390: i32, out_$i391: i1, out_$p392: ref, out_$i394: i32, out_$i395: i1, out_$p396: ref, out_$i398: i32, out_$i399: i1, out_$p400: ref, out_$i402: i32, out_$i403: i1, out_$p404: ref, out_$i405: i32, out_$i406: i1, out_$p407: ref, out_$i408: i32, out_$i409: i1, out_$p410: ref, out_$i411: i32, out_$i412: i1, out_$p413: ref, out_$i414: i32, out_$i415: i1, out_$p416: ref, out_$i417: i32, out_$i418: i1, out_$p419: ref, out_$i420: i32, out_$i421: i1, out_$p422: ref, out_$i423: i32, out_$i424: i1, out_$p425: ref, out_$i426: i32, out_$i427: i1, out_$p428: ref, out_$i429: i32, out_$i430: i1, out_$p431: ref, out_$i432: i32, out_$i433: i1, out_$p434: ref, out_$p435: ref, out_$i436: i32, out_$i437: i32, out_$i438: i1, out_$i439: i32, out_$i440: i1, out_$p441: ref, out_$i442: i32, out_$i443: i1, out_$p444: ref, out_$i445: i32, out_$i446: i1, out_$p447: ref, out_$i448: i32, out_$i449: i1, out_$p450: ref, out_$i451: i32, out_$i452: i1, out_$p453: ref, out_$i454: i32, out_$i455: i1, out_$p456: ref, out_$i457: i32, out_$i458: i1, out_$p459: ref, out_$i460: i32, out_$i461: i1, out_$p462: ref, out_$i463: i32, out_$i464: i1, out_$p465: ref, out_$i466: i32, out_$i467: i1, out_$p468: ref, out_$i469: i32, out_$i470: i1, out_$p471: ref, out_$i472: i32, out_$i473: i64, out_$i475: i32, out_$i476: i1, out_$p477: ref, out_$i478: i32, out_$i479: i64, out_$i481: i32, out_$i482: i1, out_$p483: ref, out_$i484: i32, out_$i485: i64, out_$i487: i32, out_$i488: i1, out_$p489: ref, out_$i490: i32, out_$i491: i64, out_$i493: i32, out_$i494: i1, out_$p495: ref, out_$i496: i32, out_$i497: i64, out_$i499: i32, out_$i500: i1, out_$p501: ref, out_$i503: i32, out_$i504: i1, out_$p505: ref, out_$i507: i32, out_$i508: i1, out_$p509: ref, out_$i511: i32, out_$i512: i1, out_$p513: ref, out_$i515: i32, out_$i516: i1, out_$p517: ref, out_$i519: i32, out_$i520: i1, out_$p521: ref, out_$i522: i32, out_$i523: i1, out_$p524: ref, out_$i525: i32, out_$i526: i32, out_$i528: i32, out_$i529: i1, out_$p530: ref, out_$i531: i32, out_$i532: i32, out_$i534: i32, out_$i535: i1, out_$p536: ref, out_$i537: i32, out_$i538: i32, out_$i540: i32, out_$i541: i1, out_$p542: ref, out_$i543: i32, out_$i544: i32, out_$i546: i32, out_$i547: i1, out_$p548: ref, out_$i549: i32, out_$i550: i32, out_$i552: i32, out_$i553: i1, out_$p554: ref, out_$i555: i32, out_$i557: i32, out_$i558: i1, out_$p559: ref, out_$p560: ref, out_$i561: i32, out_$i562: i1, out_$p563: ref, out_$i565: i32, out_$i566: i1, out_$p567: ref, out_$i569: i32, out_$i570: i1, out_$p571: ref, out_$i573: i32, out_$i574: i1, out_$p575: ref, out_$i577: i32, out_$i578: i1, out_$p579: ref, out_$i581: i32, out_$i582: i1, out_$p583: ref, out_$i584: i32, out_$i586: i32, out_$i587: i1, out_$p588: ref, out_$i589: i32, out_$i591: i32, out_$i592: i1, out_$p593: ref, out_$i594: i32, out_$i596: i32, out_$i597: i1, out_$p598: ref, out_$i599: i32, out_$i601: i32, out_$i602: i1, out_$p603: ref, out_$i604: i32, out_$i606: i32, out_$i607: i1, out_$p608: ref, out_$i610: i32, out_$i611: i1, out_$p612: ref, out_$i614: i32, out_$i615: i1, out_$p616: ref, out_$i618: i32, out_$i619: i1, out_$p620: ref, out_$i622: i32, out_$i623: i1, out_$p624: ref, out_$i626: i32, out_$i627: i1, out_$p628: ref, out_$i630: i32, out_$i631: i1, out_$p632: ref, out_$i634: i32, out_$i635: i1, out_$p636: ref, out_$i638: i32, out_$i639: i1, out_$p640: ref, out_$i642: i32, out_$i643: i1, out_$p644: ref, out_$i646: i32, out_$i647: i1, out_$p648: ref, out_$i649: i32, out_$i650: i1, out_$p651: ref, out_$i652: i32, out_$i653: i1, out_$p654: ref, out_$i655: i32, out_$i656: i1, out_$p657: ref, out_$i658: i32, out_$i659: i1, out_$p660: ref, out_$i661: i32, out_$i662: i1, out_$p663: ref, out_$i664: i32, out_$i665: i32, out_$i666: i1, out_$p667: ref, out_$i668: i32, out_$i669: i32, out_$i670: i1, out_$p671: ref, out_$i672: i32, out_$i673: i32, out_$i674: i1, out_$p675: ref, out_$i676: i32, out_$i677: i32, out_$i678: i1, out_$p679: ref, out_$i680: i32, out_$i681: i32, out_$i682: i1, out_$i684: i32, out_$i685: i1, out_$i687: i32, out_$i688: i1, out_$i690: i32, out_$i691: i1, out_$i693: i32, out_$i694: i32, out_$i695: i32, out_$i696: i1, out_$i698: i32, out_$i699: i32, out_vslice_dummy_var_459: i32, out_vslice_dummy_var_460: i32, out_vslice_dummy_var_461: i32, out_vslice_dummy_var_462: i32, out_vslice_dummy_var_463: i32, out_vslice_dummy_var_464: i32, out_vslice_dummy_var_465: i32, out_vslice_dummy_var_466: i32, out_vslice_dummy_var_467: i32, out_vslice_dummy_var_468: i32, out_vslice_dummy_var_469: i32, out_vslice_dummy_var_470: i32, out_vslice_dummy_var_471: i32, out_vslice_dummy_var_472: i32, out_vslice_dummy_var_473: i32, out_vslice_dummy_var_474: i64, out_vslice_dummy_var_475: i64, out_vslice_dummy_var_476: i32, out_vslice_dummy_var_477: i32, out_vslice_dummy_var_478: i32, out_vslice_dummy_var_479: i32, out_vslice_dummy_var_480: i32, out_vslice_dummy_var_481: i32, out_vslice_dummy_var_482: i32, out_vslice_dummy_var_483: i32, out_vslice_dummy_var_484: i32, out_vslice_dummy_var_485: i32, out_vslice_dummy_var_486: i32, out_vslice_dummy_var_487: i32, out_vslice_dummy_var_488: i32, out_vslice_dummy_var_489: i32, out_vslice_dummy_var_490: i32, out_vslice_dummy_var_491: i32, out_vslice_dummy_var_492: i32, out_vslice_dummy_var_493: i32, out_vslice_dummy_var_494: i32, out_vslice_dummy_var_495: i32, out_vslice_dummy_var_496: i32, out_vslice_dummy_var_497: i32, out_vslice_dummy_var_498: i32, out_vslice_dummy_var_499: i32, out_vslice_dummy_var_500: i32, out_vslice_dummy_var_501: i32, out_vslice_dummy_var_502: i32, out_vslice_dummy_var_503: i32, out_vslice_dummy_var_504: i32, out_vslice_dummy_var_505: i32, out_vslice_dummy_var_506: i32, out_vslice_dummy_var_507: i32, out_vslice_dummy_var_508: i32, out_vslice_dummy_var_509: i32, out_vslice_dummy_var_510: i32, out_vslice_dummy_var_511: i32, out_vslice_dummy_var_512: i32, out_vslice_dummy_var_513: i32, out_vslice_dummy_var_514: i32, out_vslice_dummy_var_515: i32, out_vslice_dummy_var_516: i32, out_vslice_dummy_var_517: i32, out_vslice_dummy_var_518: i32, out_vslice_dummy_var_519: i32, out_vslice_dummy_var_520: i32, out_vslice_dummy_var_521: i32, out_vslice_dummy_var_522: i32, out_vslice_dummy_var_523: i32, out_vslice_dummy_var_524: i32, out_vslice_dummy_var_525: i32, out_vslice_dummy_var_526: i32)
{

  entry:
    out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i87, out_$i88, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i135, out_$i136, out_$p137, out_$i138, out_$i140, out_$i141, out_$p142, out_$i143, out_$i145, out_$i146, out_$p147, out_$i148, out_$i150, out_$i151, out_$p152, out_$i153, out_$i155, out_$i156, out_$p157, out_$i158, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p168, out_$i170, out_$i171, out_$p172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$p200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$p208, out_$i209, out_$i210, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$p224, out_$p225, out_$i227, out_$i228, out_$i229, out_$i230, out_$p231, out_$i232, out_$i234, out_$i235, out_$p236, out_$i237, out_$i238, out_$i240, out_$i241, out_$p242, out_$p243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$p301, out_$i302, out_$i303, out_$p304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$p310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$p316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$p322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$p328, out_$i329, out_$i330, out_$i331, out_$i332, out_$i333, out_$p334, out_$i335, out_$i336, out_$i337, out_$i339, out_$i340, out_$p341, out_$i342, out_$i343, out_$i344, out_$i346, out_$i347, out_$p348, out_$i349, out_$i350, out_$i351, out_$i353, out_$i354, out_$p355, out_$i356, out_$i357, out_$i358, out_$i360, out_$i361, out_$p362, out_$i363, out_$i364, out_$i365, out_$i367, out_$i368, out_$p369, out_$i370, out_$i371, out_$p372, out_$i373, out_$i374, out_$p375, out_$i376, out_$i377, out_$p378, out_$i379, out_$i380, out_$p381, out_$i382, out_$i383, out_$p384, out_$i386, out_$i387, out_$p388, out_$i390, out_$i391, out_$p392, out_$i394, out_$i395, out_$p396, out_$i398, out_$i399, out_$p400, out_$i402, out_$i403, out_$p404, out_$i405, out_$i406, out_$p407, out_$i408, out_$i409, out_$p410, out_$i411, out_$i412, out_$p413, out_$i414, out_$i415, out_$p416, out_$i417, out_$i418, out_$p419, out_$i420, out_$i421, out_$p422, out_$i423, out_$i424, out_$p425, out_$i426, out_$i427, out_$p428, out_$i429, out_$i430, out_$p431, out_$i432, out_$i433, out_$p434, out_$p435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$p441, out_$i442, out_$i443, out_$p444, out_$i445, out_$i446, out_$p447, out_$i448, out_$i449, out_$p450, out_$i451, out_$i452, out_$p453, out_$i454, out_$i455, out_$p456, out_$i457, out_$i458, out_$p459, out_$i460, out_$i461, out_$p462, out_$i463, out_$i464, out_$p465, out_$i466, out_$i467, out_$p468, out_$i469, out_$i470, out_$p471, out_$i472, out_$i473, out_$i475, out_$i476, out_$p477, out_$i478, out_$i479, out_$i481, out_$i482, out_$p483, out_$i484, out_$i485, out_$i487, out_$i488, out_$p489, out_$i490, out_$i491, out_$i493, out_$i494, out_$p495, out_$i496, out_$i497, out_$i499, out_$i500, out_$p501, out_$i503, out_$i504, out_$p505, out_$i507, out_$i508, out_$p509, out_$i511, out_$i512, out_$p513, out_$i515, out_$i516, out_$p517, out_$i519, out_$i520, out_$p521, out_$i522, out_$i523, out_$p524, out_$i525, out_$i526, out_$i528, out_$i529, out_$p530, out_$i531, out_$i532, out_$i534, out_$i535, out_$p536, out_$i537, out_$i538, out_$i540, out_$i541, out_$p542, out_$i543, out_$i544, out_$i546, out_$i547, out_$p548, out_$i549, out_$i550, out_$i552, out_$i553, out_$p554, out_$i555, out_$i557, out_$i558, out_$p559, out_$p560, out_$i561, out_$i562, out_$p563, out_$i565, out_$i566, out_$p567, out_$i569, out_$i570, out_$p571, out_$i573, out_$i574, out_$p575, out_$i577, out_$i578, out_$p579, out_$i581, out_$i582, out_$p583, out_$i584, out_$i586, out_$i587, out_$p588, out_$i589, out_$i591, out_$i592, out_$p593, out_$i594, out_$i596, out_$i597, out_$p598, out_$i599, out_$i601, out_$i602, out_$p603, out_$i604, out_$i606, out_$i607, out_$p608, out_$i610, out_$i611, out_$p612, out_$i614, out_$i615, out_$p616, out_$i618, out_$i619, out_$p620, out_$i622, out_$i623, out_$p624, out_$i626, out_$i627, out_$p628, out_$i630, out_$i631, out_$p632, out_$i634, out_$i635, out_$p636, out_$i638, out_$i639, out_$p640, out_$i642, out_$i643, out_$p644, out_$i646, out_$i647, out_$p648, out_$i649, out_$i650, out_$p651, out_$i652, out_$i653, out_$p654, out_$i655, out_$i656, out_$p657, out_$i658, out_$i659, out_$p660, out_$i661, out_$i662, out_$p663, out_$i664, out_$i665, out_$i666, out_$p667, out_$i668, out_$i669, out_$i670, out_$p671, out_$i672, out_$i673, out_$i674, out_$p675, out_$i676, out_$i677, out_$i678, out_$p679, out_$i680, out_$i681, out_$i682, out_$i684, out_$i685, out_$i687, out_$i688, out_$i690, out_$i691, out_$i693, out_$i694, out_$i695, out_$i696, out_$i698, out_$i699, out_vslice_dummy_var_459, out_vslice_dummy_var_460, out_vslice_dummy_var_461, out_vslice_dummy_var_462, out_vslice_dummy_var_463, out_vslice_dummy_var_464, out_vslice_dummy_var_465, out_vslice_dummy_var_466, out_vslice_dummy_var_467, out_vslice_dummy_var_468, out_vslice_dummy_var_469, out_vslice_dummy_var_470, out_vslice_dummy_var_471, out_vslice_dummy_var_472, out_vslice_dummy_var_473, out_vslice_dummy_var_474, out_vslice_dummy_var_475, out_vslice_dummy_var_476, out_vslice_dummy_var_477, out_vslice_dummy_var_478, out_vslice_dummy_var_479, out_vslice_dummy_var_480, out_vslice_dummy_var_481, out_vslice_dummy_var_482, out_vslice_dummy_var_483, out_vslice_dummy_var_484, out_vslice_dummy_var_485, out_vslice_dummy_var_486, out_vslice_dummy_var_487, out_vslice_dummy_var_488, out_vslice_dummy_var_489, out_vslice_dummy_var_490, out_vslice_dummy_var_491, out_vslice_dummy_var_492, out_vslice_dummy_var_493, out_vslice_dummy_var_494, out_vslice_dummy_var_495, out_vslice_dummy_var_496, out_vslice_dummy_var_497, out_vslice_dummy_var_498, out_vslice_dummy_var_499, out_vslice_dummy_var_500, out_vslice_dummy_var_501, out_vslice_dummy_var_502, out_vslice_dummy_var_503, out_vslice_dummy_var_504, out_vslice_dummy_var_505, out_vslice_dummy_var_506, out_vslice_dummy_var_507, out_vslice_dummy_var_508, out_vslice_dummy_var_509, out_vslice_dummy_var_510, out_vslice_dummy_var_511, out_vslice_dummy_var_512, out_vslice_dummy_var_513, out_vslice_dummy_var_514, out_vslice_dummy_var_515, out_vslice_dummy_var_516, out_vslice_dummy_var_517, out_vslice_dummy_var_518, out_vslice_dummy_var_519, out_vslice_dummy_var_520, out_vslice_dummy_var_521, out_vslice_dummy_var_522, out_vslice_dummy_var_523, out_vslice_dummy_var_524, out_vslice_dummy_var_525, out_vslice_dummy_var_526 := in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i87, in_$i88, in_$i90, in_$i91, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$p133, in_$i135, in_$i136, in_$p137, in_$i138, in_$i140, in_$i141, in_$p142, in_$i143, in_$i145, in_$i146, in_$p147, in_$i148, in_$i150, in_$i151, in_$p152, in_$i153, in_$i155, in_$i156, in_$p157, in_$i158, in_$i160, in_$i161, in_$p162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$p168, in_$i170, in_$i171, in_$p172, in_$i173, in_$i174, in_$p175, in_$i176, in_$i177, in_$p178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$p200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$p208, in_$i209, in_$i210, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$p224, in_$p225, in_$i227, in_$i228, in_$i229, in_$i230, in_$p231, in_$i232, in_$i234, in_$i235, in_$p236, in_$i237, in_$i238, in_$i240, in_$i241, in_$p242, in_$p243, in_$i244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i253, in_$i254, in_$i255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$i272, in_$i273, in_$i274, in_$i275, in_$i276, in_$i277, in_$i278, in_$i279, in_$i280, in_$i281, in_$i282, in_$i283, in_$i284, in_$i285, in_$i286, in_$i287, in_$i288, in_$i289, in_$i290, in_$i291, in_$i292, in_$i293, in_$i294, in_$i295, in_$i296, in_$i297, in_$i298, in_$i299, in_$i300, in_$p301, in_$i302, in_$i303, in_$p304, in_$i305, in_$i306, in_$i307, in_$i308, in_$i309, in_$p310, in_$i311, in_$i312, in_$i313, in_$i314, in_$i315, in_$p316, in_$i317, in_$i318, in_$i319, in_$i320, in_$i321, in_$p322, in_$i323, in_$i324, in_$i325, in_$i326, in_$i327, in_$p328, in_$i329, in_$i330, in_$i331, in_$i332, in_$i333, in_$p334, in_$i335, in_$i336, in_$i337, in_$i339, in_$i340, in_$p341, in_$i342, in_$i343, in_$i344, in_$i346, in_$i347, in_$p348, in_$i349, in_$i350, in_$i351, in_$i353, in_$i354, in_$p355, in_$i356, in_$i357, in_$i358, in_$i360, in_$i361, in_$p362, in_$i363, in_$i364, in_$i365, in_$i367, in_$i368, in_$p369, in_$i370, in_$i371, in_$p372, in_$i373, in_$i374, in_$p375, in_$i376, in_$i377, in_$p378, in_$i379, in_$i380, in_$p381, in_$i382, in_$i383, in_$p384, in_$i386, in_$i387, in_$p388, in_$i390, in_$i391, in_$p392, in_$i394, in_$i395, in_$p396, in_$i398, in_$i399, in_$p400, in_$i402, in_$i403, in_$p404, in_$i405, in_$i406, in_$p407, in_$i408, in_$i409, in_$p410, in_$i411, in_$i412, in_$p413, in_$i414, in_$i415, in_$p416, in_$i417, in_$i418, in_$p419, in_$i420, in_$i421, in_$p422, in_$i423, in_$i424, in_$p425, in_$i426, in_$i427, in_$p428, in_$i429, in_$i430, in_$p431, in_$i432, in_$i433, in_$p434, in_$p435, in_$i436, in_$i437, in_$i438, in_$i439, in_$i440, in_$p441, in_$i442, in_$i443, in_$p444, in_$i445, in_$i446, in_$p447, in_$i448, in_$i449, in_$p450, in_$i451, in_$i452, in_$p453, in_$i454, in_$i455, in_$p456, in_$i457, in_$i458, in_$p459, in_$i460, in_$i461, in_$p462, in_$i463, in_$i464, in_$p465, in_$i466, in_$i467, in_$p468, in_$i469, in_$i470, in_$p471, in_$i472, in_$i473, in_$i475, in_$i476, in_$p477, in_$i478, in_$i479, in_$i481, in_$i482, in_$p483, in_$i484, in_$i485, in_$i487, in_$i488, in_$p489, in_$i490, in_$i491, in_$i493, in_$i494, in_$p495, in_$i496, in_$i497, in_$i499, in_$i500, in_$p501, in_$i503, in_$i504, in_$p505, in_$i507, in_$i508, in_$p509, in_$i511, in_$i512, in_$p513, in_$i515, in_$i516, in_$p517, in_$i519, in_$i520, in_$p521, in_$i522, in_$i523, in_$p524, in_$i525, in_$i526, in_$i528, in_$i529, in_$p530, in_$i531, in_$i532, in_$i534, in_$i535, in_$p536, in_$i537, in_$i538, in_$i540, in_$i541, in_$p542, in_$i543, in_$i544, in_$i546, in_$i547, in_$p548, in_$i549, in_$i550, in_$i552, in_$i553, in_$p554, in_$i555, in_$i557, in_$i558, in_$p559, in_$p560, in_$i561, in_$i562, in_$p563, in_$i565, in_$i566, in_$p567, in_$i569, in_$i570, in_$p571, in_$i573, in_$i574, in_$p575, in_$i577, in_$i578, in_$p579, in_$i581, in_$i582, in_$p583, in_$i584, in_$i586, in_$i587, in_$p588, in_$i589, in_$i591, in_$i592, in_$p593, in_$i594, in_$i596, in_$i597, in_$p598, in_$i599, in_$i601, in_$i602, in_$p603, in_$i604, in_$i606, in_$i607, in_$p608, in_$i610, in_$i611, in_$p612, in_$i614, in_$i615, in_$p616, in_$i618, in_$i619, in_$p620, in_$i622, in_$i623, in_$p624, in_$i626, in_$i627, in_$p628, in_$i630, in_$i631, in_$p632, in_$i634, in_$i635, in_$p636, in_$i638, in_$i639, in_$p640, in_$i642, in_$i643, in_$p644, in_$i646, in_$i647, in_$p648, in_$i649, in_$i650, in_$p651, in_$i652, in_$i653, in_$p654, in_$i655, in_$i656, in_$p657, in_$i658, in_$i659, in_$p660, in_$i661, in_$i662, in_$p663, in_$i664, in_$i665, in_$i666, in_$p667, in_$i668, in_$i669, in_$i670, in_$p671, in_$i672, in_$i673, in_$i674, in_$p675, in_$i676, in_$i677, in_$i678, in_$p679, in_$i680, in_$i681, in_$i682, in_$i684, in_$i685, in_$i687, in_$i688, in_$i690, in_$i691, in_$i693, in_$i694, in_$i695, in_$i696, in_$i698, in_$i699, in_vslice_dummy_var_459, in_vslice_dummy_var_460, in_vslice_dummy_var_461, in_vslice_dummy_var_462, in_vslice_dummy_var_463, in_vslice_dummy_var_464, in_vslice_dummy_var_465, in_vslice_dummy_var_466, in_vslice_dummy_var_467, in_vslice_dummy_var_468, in_vslice_dummy_var_469, in_vslice_dummy_var_470, in_vslice_dummy_var_471, in_vslice_dummy_var_472, in_vslice_dummy_var_473, in_vslice_dummy_var_474, in_vslice_dummy_var_475, in_vslice_dummy_var_476, in_vslice_dummy_var_477, in_vslice_dummy_var_478, in_vslice_dummy_var_479, in_vslice_dummy_var_480, in_vslice_dummy_var_481, in_vslice_dummy_var_482, in_vslice_dummy_var_483, in_vslice_dummy_var_484, in_vslice_dummy_var_485, in_vslice_dummy_var_486, in_vslice_dummy_var_487, in_vslice_dummy_var_488, in_vslice_dummy_var_489, in_vslice_dummy_var_490, in_vslice_dummy_var_491, in_vslice_dummy_var_492, in_vslice_dummy_var_493, in_vslice_dummy_var_494, in_vslice_dummy_var_495, in_vslice_dummy_var_496, in_vslice_dummy_var_497, in_vslice_dummy_var_498, in_vslice_dummy_var_499, in_vslice_dummy_var_500, in_vslice_dummy_var_501, in_vslice_dummy_var_502, in_vslice_dummy_var_503, in_vslice_dummy_var_504, in_vslice_dummy_var_505, in_vslice_dummy_var_506, in_vslice_dummy_var_507, in_vslice_dummy_var_508, in_vslice_dummy_var_509, in_vslice_dummy_var_510, in_vslice_dummy_var_511, in_vslice_dummy_var_512, in_vslice_dummy_var_513, in_vslice_dummy_var_514, in_vslice_dummy_var_515, in_vslice_dummy_var_516, in_vslice_dummy_var_517, in_vslice_dummy_var_518, in_vslice_dummy_var_519, in_vslice_dummy_var_520, in_vslice_dummy_var_521, in_vslice_dummy_var_522, in_vslice_dummy_var_523, in_vslice_dummy_var_524, in_vslice_dummy_var_525, in_vslice_dummy_var_526;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1982} out_$i63 := __VERIFIER_nondet_int();
    call {:si_unique_call 1983} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i63);
    call {:si_unique_call 1984} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i63);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb76_dummy;

  $bb600:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb598:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb27:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb49:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_11823:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_11822:
    assume {:verifier.code 0} true;
    $M.83 := 2;
    call {:si_unique_call 1993} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_11823;

  corral_source_split_11821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} out_vslice_dummy_var_461 := carrier_raised(in_$p18);
    goto corral_source_split_11822;

  $bb48:
    assume out_$i91 == 1;
    goto corral_source_split_11821;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_11818:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i90, 2);
    goto corral_source_split_11819;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i90 := $M.83;
    goto corral_source_split_11818;

  $bb46:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_11816:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    $M.83 := 3;
    call {:si_unique_call 1991} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_11816;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} out_vslice_dummy_var_460 := carrier_raised(in_$p18);
    goto corral_source_split_11815;

  $bb45:
    assume out_$i88 == 1;
    goto corral_source_split_11814;

  corral_source_split_11812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i87, 3);
    goto corral_source_split_11812;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i87 := $M.83;
    goto corral_source_split_11811;

  $bb43:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_11808:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1989} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11809;

  corral_source_split_11807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} out_vslice_dummy_var_459 := carrier_raised(in_$p18);
    goto corral_source_split_11808;

  $bb42:
    assume out_$i85 == 1;
    goto corral_source_split_11807;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_11804:
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i84, 1);
    goto corral_source_split_11805;

  corral_source_split_11803:
    assume {:verifier.code 0} true;
    out_$i84 := $M.83;
    goto corral_source_split_11804;

  $bb40:
    assume out_$i83 == 1;
    goto corral_source_split_11803;

  $bb38:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i77, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb29:
    assume out_$i78 == 1;
    assume {:verifier.code 0} true;
    out_$i82 := $slt.i32(out_$i77, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i78 := $slt.i32(out_$i77, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_11785:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1985} out_$i77 := __VERIFIER_nondet_int();
    call {:si_unique_call 1986} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i77);
    call {:si_unique_call 1987} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i77);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume out_$i76 == 1;
    goto corral_source_split_11785;

  corral_source_split_11783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i32(out_$i75, 0);
    goto corral_source_split_11783;

  corral_source_split_11781:
    assume {:verifier.code 0} true;
    out_$i75 := $M.83;
    goto corral_source_split_11782;

  $bb24:
    assume out_$i74 == 1;
    goto corral_source_split_11781;

  $bb22:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i63, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb16:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i73 := $slt.i32(out_$i63, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb3:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i63, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i64 := $slt.i32(out_$i63, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb59:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_11843:
    assume {:verifier.code 0} true;
    $M.83 := 2;
    call {:si_unique_call 1999} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_11844;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1998} dtr_rts(in_$p16, out_$i101);
    goto corral_source_split_11843;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i32($M.66, in_$p0);
    goto corral_source_split_11842;

  $bb58:
    assume out_$i100 == 1;
    goto corral_source_split_11841;

  corral_source_split_11839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_11838:
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i99, 2);
    goto corral_source_split_11839;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i99 := $M.83;
    goto corral_source_split_11838;

  $bb56:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_11835:
    assume {:verifier.code 0} true;
    $M.83 := 3;
    call {:si_unique_call 1997} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_11836;

  corral_source_split_11834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1996} dtr_rts(in_$p16, out_$i98);
    goto corral_source_split_11835;

  corral_source_split_11833:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i32($M.66, in_$p0);
    goto corral_source_split_11834;

  $bb55:
    assume out_$i97 == 1;
    goto corral_source_split_11833;

  corral_source_split_11831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_11830:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i96, 3);
    goto corral_source_split_11831;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i96 := $M.83;
    goto corral_source_split_11830;

  $bb53:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_11828:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1995} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11828;

  corral_source_split_11826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1994} dtr_rts(in_$p16, out_$i95);
    goto corral_source_split_11827;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i32($M.66, in_$p0);
    goto corral_source_split_11826;

  $bb52:
    assume out_$i94 == 1;
    goto corral_source_split_11825;

  corral_source_split_11801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_11800:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i93, 1);
    goto corral_source_split_11801;

  corral_source_split_11799:
    assume {:verifier.code 0} true;
    out_$i93 := $M.83;
    goto corral_source_split_11800;

  $bb39:
    assume !(out_$i82 == 1);
    goto corral_source_split_11799;

  $bb62:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_11847:
    assume {:verifier.code 0} true;
    $M.83 := 2;
    call {:si_unique_call 2001} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_11848;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2000} out_vslice_dummy_var_462 := ldv_destruct_6();
    goto corral_source_split_11847;

  $bb61:
    assume out_$i103 == 1;
    goto corral_source_split_11846;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_11788:
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i32(out_$i102, 1);
    goto corral_source_split_11789;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    out_$i102 := $M.83;
    goto corral_source_split_11788;

  $bb31:
    assume out_$i79 == 1;
    goto corral_source_split_11787;

  $bb30:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i32(out_$i77, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb65:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb67:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_11859:
    assume {:verifier.code 0} true;
    $M.90 := out_$i111;
    call {:si_unique_call 2005} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i111);
    goto corral_source_split_11860;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    out_$i111 := $add.i32(out_$i110, 1);
    goto corral_source_split_11859;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    out_$i110 := $M.90;
    goto corral_source_split_11858;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    $M.83 := 3;
    call {:si_unique_call 2004} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_11857;

  $bb66:
    assume out_$i109 == 1;
    goto corral_source_split_11856;

  corral_source_split_11854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    out_$i109 := $eq.i32(out_$i108, 0);
    goto corral_source_split_11854;

  corral_source_split_11852:
    assume {:verifier.code 0} true;
    out_$i108 := $M.93;
    goto corral_source_split_11853;

  corral_source_split_11851:
    assume {:verifier.code 0} true;
    $M.93 := out_$i107;
    call {:si_unique_call 2003} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i107);
    goto corral_source_split_11852;

  corral_source_split_11850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2002} out_$i107 := ldv_activate_6();
    goto corral_source_split_11851;

  $bb64:
    assume out_$i106 == 1;
    goto corral_source_split_11850;

  corral_source_split_11793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_11792:
    assume {:verifier.code 0} true;
    out_$i106 := $eq.i32(out_$i105, 1);
    goto corral_source_split_11793;

  corral_source_split_11791:
    assume {:verifier.code 0} true;
    out_$i105 := $M.83;
    goto corral_source_split_11792;

  $bb33:
    assume out_$i80 == 1;
    goto corral_source_split_11791;

  $bb32:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    out_$i80 := $slt.i32(out_$i77, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb71:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    $M.90 := out_$i116;
    call {:si_unique_call 2008} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_11867;

  corral_source_split_11865:
    assume {:verifier.code 0} true;
    out_$i116 := $sub.i32(out_$i115, 1);
    goto corral_source_split_11866;

  corral_source_split_11864:
    assume {:verifier.code 0} true;
    out_$i115 := $M.90;
    goto corral_source_split_11865;

  corral_source_split_11863:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 2007} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11864;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} out_vslice_dummy_var_463 := ldv_shutdown_6();
    goto corral_source_split_11863;

  $bb70:
    assume out_$i113 == 1;
    goto corral_source_split_11862;

  corral_source_split_11797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    out_$i113 := $eq.i32(out_$i112, 3);
    goto corral_source_split_11797;

  corral_source_split_11795:
    assume {:verifier.code 0} true;
    out_$i112 := $M.83;
    goto corral_source_split_11796;

  $bb35:
    assume out_$i81 == 1;
    goto corral_source_split_11795;

  $bb34:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i77, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} ldv_stop();
    goto corral_source_split_11869;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(out_$i81 == 1);
    goto $bb37;

  $bb41:
    assume {:verifier.code 0} true;
    assume !(out_$i83 == 1);
    goto $bb37;

  $bb78:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2010} choose_timer_3();
    goto corral_source_split_11872;

  $bb77:
    assume out_$i118 == 1;
    goto corral_source_split_11871;

  corral_source_split_11779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_11778:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i32(out_$i117, 0);
    goto corral_source_split_11779;

  corral_source_split_11777:
    assume {:verifier.code 0} true;
    out_$i117 := $M.84;
    goto corral_source_split_11778;

  $bb23:
    assume !(out_$i73 == 1);
    goto corral_source_split_11777;

  $bb81:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb103:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 2015} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_11911;

  corral_source_split_11909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2014} out_vslice_dummy_var_464 := hdlcdev_close(out_$p133);
    goto corral_source_split_11910;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    out_$p133 := $M.49;
    goto corral_source_split_11909;

  $bb102:
    assume out_$i132 == 1;
    goto corral_source_split_11908;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  corral_source_split_11905:
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i32(out_$i131, 3);
    goto corral_source_split_11906;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    out_$i131 := $M.48;
    goto corral_source_split_11905;

  $bb100:
    assume out_$i130 == 1;
    goto corral_source_split_11904;

  $bb98:
    assume out_$i129 == 1;
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i121, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb94:
    assume out_$i127 == 1;
    assume {:verifier.code 0} true;
    out_$i129 := $slt.i32(out_$i121, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb83:
    assume out_$i122 == 1;
    assume {:verifier.code 0} true;
    out_$i127 := $slt.i32(out_$i121, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb82:
    assume {:verifier.code 0} true;
    out_$i122 := $slt.i32(out_$i121, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_11874:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2011} out_$i121 := __VERIFIER_nondet_int();
    call {:si_unique_call 2012} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i121);
    call {:si_unique_call 2013} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i121);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb80:
    assume out_$i120 == 1;
    goto corral_source_split_11874;

  corral_source_split_11767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    out_$i120 := $ne.i32(out_$i119, 0);
    goto corral_source_split_11767;

  corral_source_split_11765:
    assume {:verifier.code 0} true;
    out_$i119 := $M.48;
    goto corral_source_split_11766;

  $bb18:
    assume out_$i71 == 1;
    goto corral_source_split_11765;

  $bb17:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i63, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb113:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_11935:
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 2021} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_11935;

  corral_source_split_11933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} out_vslice_dummy_var_467 := hdlcdev_ioctl(out_$p147, in_$p22, out_$i148);
    goto corral_source_split_11934;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    out_$i148 := $load.i32($M.66, in_$p2);
    goto corral_source_split_11933;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    out_$p147 := $M.49;
    goto corral_source_split_11932;

  $bb112:
    assume out_$i146 == 1;
    goto corral_source_split_11931;

  corral_source_split_11929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_11928:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i32(out_$i145, 2);
    goto corral_source_split_11929;

  $bb111:
    assume {:verifier.code 0} true;
    out_$i145 := $M.48;
    goto corral_source_split_11928;

  $bb110:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_11925:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 2019} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_11926;

  corral_source_split_11924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2018} out_vslice_dummy_var_466 := hdlcdev_ioctl(out_$p142, in_$p22, out_$i143);
    goto corral_source_split_11925;

  corral_source_split_11923:
    assume {:verifier.code 0} true;
    out_$i143 := $load.i32($M.66, in_$p2);
    goto corral_source_split_11924;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    out_$p142 := $M.49;
    goto corral_source_split_11923;

  $bb109:
    assume out_$i141 == 1;
    goto corral_source_split_11922;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_11919:
    assume {:verifier.code 0} true;
    out_$i141 := $eq.i32(out_$i140, 3);
    goto corral_source_split_11920;

  $bb108:
    assume {:verifier.code 0} true;
    out_$i140 := $M.48;
    goto corral_source_split_11919;

  $bb107:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_11916:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 2017} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_11917;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} out_vslice_dummy_var_465 := hdlcdev_ioctl(out_$p137, in_$p22, out_$i138);
    goto corral_source_split_11916;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i32($M.66, in_$p2);
    goto corral_source_split_11915;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    out_$p137 := $M.49;
    goto corral_source_split_11914;

  $bb106:
    assume out_$i136 == 1;
    goto corral_source_split_11913;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_11901:
    assume {:verifier.code 0} true;
    out_$i136 := $eq.i32(out_$i135, 1);
    goto corral_source_split_11902;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    out_$i135 := $M.48;
    goto corral_source_split_11901;

  $bb99:
    assume !(out_$i129 == 1);
    goto corral_source_split_11900;

  $bb119:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 2025} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_11950;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} out_vslice_dummy_var_469 := hdlc_change_mtu(out_$p157, out_$i158);
    goto corral_source_split_11949;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    out_$i158 := $load.i32($M.66, in_$p1);
    goto corral_source_split_11948;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    out_$p157 := $M.49;
    goto corral_source_split_11947;

  $bb118:
    assume out_$i156 == 1;
    goto corral_source_split_11946;

  corral_source_split_11944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_11943:
    assume {:verifier.code 0} true;
    out_$i156 := $eq.i32(out_$i155, 2);
    goto corral_source_split_11944;

  $bb117:
    assume {:verifier.code 0} true;
    out_$i155 := $M.48;
    goto corral_source_split_11943;

  $bb116:
    assume !(out_$i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_11941:
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_11940:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 2023} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_11941;

  corral_source_split_11939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2022} out_vslice_dummy_var_468 := hdlc_change_mtu(out_$p152, out_$i153);
    goto corral_source_split_11940;

  corral_source_split_11938:
    assume {:verifier.code 0} true;
    out_$i153 := $load.i32($M.66, in_$p1);
    goto corral_source_split_11939;

  corral_source_split_11937:
    assume {:verifier.code 0} true;
    out_$p152 := $M.49;
    goto corral_source_split_11938;

  $bb115:
    assume out_$i151 == 1;
    goto corral_source_split_11937;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_11893:
    assume {:verifier.code 0} true;
    out_$i151 := $eq.i32(out_$i150, 3);
    goto corral_source_split_11894;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    out_$i150 := $M.48;
    goto corral_source_split_11893;

  $bb96:
    assume out_$i128 == 1;
    goto corral_source_split_11892;

  $bb95:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    out_$i128 := $slt.i32(out_$i121, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb122:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb124:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_11960:
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_11959:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 2028} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_11960;

  $bb123:
    assume out_$i165 == 1;
    goto corral_source_split_11959;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    out_$i165 := $eq.i32(out_$i164, 0);
    goto corral_source_split_11957;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    out_$i164 := $M.94;
    goto corral_source_split_11956;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    $M.94 := out_$i163;
    call {:si_unique_call 2027} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i163);
    goto corral_source_split_11955;

  SeqInstr_402:
    goto corral_source_split_11954;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2026} out_$i163 := hdlcdev_open(out_$p162);
    goto SeqInstr_401;

  corral_source_split_11952:
    assume {:verifier.code 0} true;
    out_$p162 := $M.49;
    goto corral_source_split_11953;

  $bb121:
    assume out_$i161 == 1;
    goto corral_source_split_11952;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_11897:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i32(out_$i160, 2);
    goto corral_source_split_11898;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    out_$i160 := $M.48;
    goto corral_source_split_11897;

  $bb97:
    assume !(out_$i128 == 1);
    goto corral_source_split_11896;

  $bb128:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 2030} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_11965;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} out_vslice_dummy_var_470 := hdlc_start_xmit(in_$p20, out_$p168);
    goto corral_source_split_11964;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    out_$p168 := $M.49;
    goto corral_source_split_11963;

  $bb127:
    assume out_$i167 == 1;
    goto corral_source_split_11962;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i32(out_$i166, 3);
    goto corral_source_split_11886;

  corral_source_split_11884:
    assume {:verifier.code 0} true;
    out_$i166 := $M.48;
    goto corral_source_split_11885;

  $bb92:
    assume out_$i126 == 1;
    goto corral_source_split_11884;

  $bb85:
    assume out_$i123 == 1;
    assume {:verifier.code 0} true;
    out_$i126 := $slt.i32(out_$i121, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb84:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    out_$i123 := $slt.i32(out_$i121, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb137:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_11985:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 2036} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_11986;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} hdlcdev_tx_timeout(out_$p178);
    goto corral_source_split_11985;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    out_$p178 := $M.49;
    goto corral_source_split_11984;

  $bb136:
    assume out_$i177 == 1;
    goto corral_source_split_11983;

  corral_source_split_11981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i176, 2);
    goto corral_source_split_11981;

  $bb135:
    assume {:verifier.code 0} true;
    out_$i176 := $M.48;
    goto corral_source_split_11980;

  $bb134:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_11977:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 2034} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_11978;

  corral_source_split_11976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} hdlcdev_tx_timeout(out_$p175);
    goto corral_source_split_11977;

  corral_source_split_11975:
    assume {:verifier.code 0} true;
    out_$p175 := $M.49;
    goto corral_source_split_11976;

  $bb133:
    assume out_$i174 == 1;
    goto corral_source_split_11975;

  corral_source_split_11973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 3);
    goto corral_source_split_11973;

  $bb132:
    assume {:verifier.code 0} true;
    out_$i173 := $M.48;
    goto corral_source_split_11972;

  $bb131:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_11969:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 2032} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_11970;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2031} hdlcdev_tx_timeout(out_$p172);
    goto corral_source_split_11969;

  corral_source_split_11967:
    assume {:verifier.code 0} true;
    out_$p172 := $M.49;
    goto corral_source_split_11968;

  $bb130:
    assume out_$i171 == 1;
    goto corral_source_split_11967;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    out_$i171 := $eq.i32(out_$i170, 1);
    goto corral_source_split_11890;

  corral_source_split_11888:
    assume {:verifier.code 0} true;
    out_$i170 := $M.48;
    goto corral_source_split_11889;

  $bb93:
    assume !(out_$i126 == 1);
    goto corral_source_split_11888;

  $bb140:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb142:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_11998:
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    $M.90 := out_$i185;
    call {:si_unique_call 2040} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i185);
    goto corral_source_split_11998;

  corral_source_split_11996:
    assume {:verifier.code 0} true;
    out_$i185 := $add.i32(out_$i184, 1);
    goto corral_source_split_11997;

  corral_source_split_11995:
    assume {:verifier.code 0} true;
    out_$i184 := $M.90;
    goto corral_source_split_11996;

  corral_source_split_11994:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 2039} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_11995;

  $bb141:
    assume out_$i183 == 1;
    goto corral_source_split_11994;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  corral_source_split_11991:
    assume {:verifier.code 0} true;
    out_$i183 := $eq.i32(out_$i182, 0);
    goto corral_source_split_11992;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    out_$i182 := $M.95;
    goto corral_source_split_11991;

  corral_source_split_11989:
    assume {:verifier.code 0} true;
    $M.95 := out_$i181;
    call {:si_unique_call 2038} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i181);
    goto corral_source_split_11990;

  corral_source_split_11988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} out_$i181 := ldv_ndo_init_7();
    goto corral_source_split_11989;

  $bb139:
    assume out_$i180 == 1;
    goto corral_source_split_11988;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_11877:
    assume {:verifier.code 0} true;
    out_$i180 := $eq.i32(out_$i179, 1);
    goto corral_source_split_11878;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    out_$i179 := $M.48;
    goto corral_source_split_11877;

  $bb87:
    assume out_$i124 == 1;
    goto corral_source_split_11876;

  $bb86:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    out_$i124 := $slt.i32(out_$i121, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb146:
    assume !(out_$i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_12005:
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_12004:
    assume {:verifier.code 0} true;
    $M.90 := out_$i190;
    call {:si_unique_call 2043} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i190);
    goto corral_source_split_12005;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    out_$i190 := $sub.i32(out_$i189, 1);
    goto corral_source_split_12004;

  corral_source_split_12002:
    assume {:verifier.code 0} true;
    out_$i189 := $M.90;
    goto corral_source_split_12003;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 2042} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_12002;

  corral_source_split_12000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} out_vslice_dummy_var_471 := ldv_ndo_uninit_7();
    goto corral_source_split_12001;

  $bb145:
    assume out_$i187 == 1;
    goto corral_source_split_12000;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    out_$i187 := $eq.i32(out_$i186, 2);
    goto corral_source_split_11882;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    out_$i186 := $M.48;
    goto corral_source_split_11881;

  $bb89:
    assume out_$i125 == 1;
    goto corral_source_split_11880;

  $bb88:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i121, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_12007:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} ldv_stop();
    goto corral_source_split_12007;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb90:
    assume {:verifier.code 0} true;
    assume !(out_$i125 == 1);
    goto $bb91;

  $bb101:
    assume {:verifier.code 0} true;
    assume !(out_$i130 == 1);
    goto $bb91;

  $bb152:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb164:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb166:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  corral_source_split_12034:
    assume {:verifier.code 0} true;
    goto $bb167;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    $M.90 := out_$i205;
    call {:si_unique_call 2051} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i205);
    goto corral_source_split_12034;

  corral_source_split_12032:
    assume {:verifier.code 0} true;
    out_$i205 := $add.i32(out_$i204, 1);
    goto corral_source_split_12033;

  corral_source_split_12031:
    assume {:verifier.code 0} true;
    out_$i204 := $M.90;
    goto corral_source_split_12032;

  corral_source_split_12030:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 2050} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_12031;

  $bb165:
    assume out_$i203 == 1;
    goto corral_source_split_12030;

  corral_source_split_12028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  corral_source_split_12027:
    assume {:verifier.code 0} true;
    out_$i203 := $eq.i32(out_$i202, 0);
    goto corral_source_split_12028;

  corral_source_split_12026:
    assume {:verifier.code 0} true;
    out_$i202 := $M.96;
    goto corral_source_split_12027;

  corral_source_split_12025:
    assume {:verifier.code 0} true;
    $M.96 := out_$i201;
    call {:si_unique_call 2049} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i201);
    goto corral_source_split_12026;

  SeqInstr_405:
    goto corral_source_split_12025;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  corral_source_split_12024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} out_$i201 := synclinkmp_init_one(out_$p200, in_$p24);
    goto SeqInstr_404;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    out_$p200 := $M.80;
    goto corral_source_split_12024;

  $bb163:
    assume out_$i199 == 1;
    goto corral_source_split_12023;

  corral_source_split_12021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  corral_source_split_12020:
    assume {:verifier.code 0} true;
    out_$i199 := $eq.i32(out_$i198, 1);
    goto corral_source_split_12021;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    out_$i198 := $M.85;
    goto corral_source_split_12020;

  $bb161:
    assume out_$i197 == 1;
    goto corral_source_split_12019;

  $bb154:
    assume out_$i194 == 1;
    assume {:verifier.code 0} true;
    out_$i197 := $eq.i32(out_$i193, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb153:
    assume {:verifier.code 0} true;
    out_$i194 := $slt.i32(out_$i193, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  corral_source_split_12009:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2045} out_$i193 := __VERIFIER_nondet_int();
    call {:si_unique_call 2046} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i193);
    call {:si_unique_call 2047} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i193);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb151:
    assume out_$i192 == 1;
    goto corral_source_split_12009;

  corral_source_split_11771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    out_$i192 := $ne.i32(out_$i191, 0);
    goto corral_source_split_11771;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    out_$i191 := $M.85;
    goto corral_source_split_11770;

  $bb20:
    assume out_$i72 == 1;
    goto corral_source_split_11769;

  $bb19:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i63, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb171:
    assume !(out_$i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  corral_source_split_12039:
    assume {:verifier.code 0} true;
    goto $bb172;

  corral_source_split_12038:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 2053} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_12039;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} synclinkmp_remove_one(out_$p208);
    goto corral_source_split_12038;

  corral_source_split_12036:
    assume {:verifier.code 0} true;
    out_$p208 := $M.80;
    goto corral_source_split_12037;

  $bb170:
    assume out_$i207 == 1;
    goto corral_source_split_12036;

  corral_source_split_12013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  corral_source_split_12012:
    assume {:verifier.code 0} true;
    out_$i207 := $eq.i32(out_$i206, 2);
    goto corral_source_split_12013;

  corral_source_split_12011:
    assume {:verifier.code 0} true;
    out_$i206 := $M.85;
    goto corral_source_split_12012;

  $bb156:
    assume out_$i195 == 1;
    goto corral_source_split_12011;

  $bb155:
    assume !(out_$i194 == 1);
    assume {:verifier.code 0} true;
    out_$i195 := $slt.i32(out_$i193, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb174:
    assume !(out_$i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_12043:
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_12042:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 2055} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_12043;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} out_vslice_dummy_var_472 := ldv_shutdown_9();
    goto corral_source_split_12042;

  $bb173:
    assume out_$i210 == 1;
    goto corral_source_split_12041;

  corral_source_split_12017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  corral_source_split_12016:
    assume {:verifier.code 0} true;
    out_$i210 := $eq.i32(out_$i209, 2);
    goto corral_source_split_12017;

  corral_source_split_12015:
    assume {:verifier.code 0} true;
    out_$i209 := $M.85;
    goto corral_source_split_12016;

  $bb158:
    assume out_$i196 == 1;
    goto corral_source_split_12015;

  $bb157:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    out_$i196 := $eq.i32(out_$i193, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_12045:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} ldv_stop();
    goto corral_source_split_12045;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb159:
    assume {:verifier.code 0} true;
    assume !(out_$i196 == 1);
    goto $bb160;

  $bb162:
    assume {:verifier.code 0} true;
    assume !(out_$i197 == 1);
    goto $bb160;

  $bb180:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_12048:
    assume {:verifier.code 0} true;
    goto $bb181;

  SeqInstr_408:
    goto corral_source_split_12048;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  corral_source_split_12047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} invoke_work_2();
    goto SeqInstr_407;

  $bb179:
    assume out_$i213 == 1;
    goto corral_source_split_12047;

  corral_source_split_11775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    out_$i213 := $ne.i32(out_$i212, 0);
    goto corral_source_split_11775;

  corral_source_split_11773:
    assume {:verifier.code 0} true;
    out_$i212 := $M.86;
    goto corral_source_split_11774;

  $bb21:
    assume !(out_$i72 == 1);
    goto corral_source_split_11773;

  $bb183:
    assume !(out_$i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb197:
    assume !(out_$i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_12075:
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_12074:
    assume {:verifier.code 0} true;
    $M.90 := out_$i228;
    call {:si_unique_call 2063} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i228);
    goto corral_source_split_12075;

  corral_source_split_12073:
    assume {:verifier.code 0} true;
    out_$i228 := $sub.i32(out_$i227, 1);
    goto corral_source_split_12074;

  corral_source_split_12072:
    assume {:verifier.code 0} true;
    out_$i227 := $M.90;
    goto corral_source_split_12073;

  corral_source_split_12071:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 2062} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_12072;

  corral_source_split_12070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} out_vslice_dummy_var_473 := single_release(out_$p224, out_$p225);
    goto corral_source_split_12071;

  corral_source_split_12069:
    assume {:verifier.code 0} true;
    out_$p225 := $M.79;
    goto corral_source_split_12070;

  corral_source_split_12068:
    assume {:verifier.code 0} true;
    out_$p224 := $M.78;
    goto corral_source_split_12069;

  $bb196:
    assume out_$i223 == 1;
    goto corral_source_split_12068;

  corral_source_split_12066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  corral_source_split_12065:
    assume {:verifier.code 0} true;
    out_$i223 := $eq.i32(out_$i222, 2);
    goto corral_source_split_12066;

  corral_source_split_12064:
    assume {:verifier.code 0} true;
    out_$i222 := $M.87;
    goto corral_source_split_12065;

  $bb194:
    assume out_$i221 == 1;
    goto corral_source_split_12064;

  $bb192:
    assume out_$i220 == 1;
    assume {:verifier.code 0} true;
    out_$i221 := $eq.i32(out_$i216, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb185:
    assume out_$i217 == 1;
    assume {:verifier.code 0} true;
    out_$i220 := $slt.i32(out_$i216, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb184:
    assume {:verifier.code 0} true;
    out_$i217 := $slt.i32(out_$i216, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  corral_source_split_12050:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2058} out_$i216 := __VERIFIER_nondet_int();
    call {:si_unique_call 2059} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i216);
    call {:si_unique_call 2060} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i216);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb182:
    assume out_$i215 == 1;
    goto corral_source_split_12050;

  corral_source_split_11759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  corral_source_split_11758:
    assume {:verifier.code 0} true;
    out_$i215 := $ne.i32(out_$i214, 0);
    goto corral_source_split_11759;

  corral_source_split_11757:
    assume {:verifier.code 0} true;
    out_$i214 := $M.87;
    goto corral_source_split_11758;

  $bb14:
    assume out_$i69 == 1;
    goto corral_source_split_11757;

  $bb5:
    assume out_$i65 == 1;
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i63, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb4:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    out_$i65 := $slt.i32(out_$i63, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb201:
    assume !(out_$i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_12081:
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_12080:
    assume {:verifier.code 0} true;
    $M.87 := 2;
    call {:si_unique_call 2065} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_12081;

  corral_source_split_12079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} out_vslice_dummy_var_474 := seq_read(out_$p231, in_$p27, out_$i232, in_$p26);
    goto corral_source_split_12080;

  corral_source_split_12078:
    assume {:verifier.code 0} true;
    out_$i232 := $load.i64($M.66, in_$p4);
    goto corral_source_split_12079;

  corral_source_split_12077:
    assume {:verifier.code 0} true;
    out_$p231 := $M.79;
    goto corral_source_split_12078;

  $bb200:
    assume out_$i230 == 1;
    goto corral_source_split_12077;

  corral_source_split_12062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_12061:
    assume {:verifier.code 0} true;
    out_$i230 := $eq.i32(out_$i229, 2);
    goto corral_source_split_12062;

  corral_source_split_12060:
    assume {:verifier.code 0} true;
    out_$i229 := $M.87;
    goto corral_source_split_12061;

  $bb193:
    assume !(out_$i220 == 1);
    goto corral_source_split_12060;

  $bb204:
    assume !(out_$i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_12088:
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_12087:
    assume {:verifier.code 0} true;
    $M.87 := 2;
    call {:si_unique_call 2067} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_12088;

  corral_source_split_12086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2066} out_vslice_dummy_var_475 := seq_lseek(out_$p236, out_$i237, out_$i238);
    goto corral_source_split_12087;

  corral_source_split_12085:
    assume {:verifier.code 0} true;
    out_$i238 := $load.i32($M.66, in_$p3);
    goto corral_source_split_12086;

  corral_source_split_12084:
    assume {:verifier.code 0} true;
    out_$i237 := $load.i64($M.66, in_$p5);
    goto corral_source_split_12085;

  corral_source_split_12083:
    assume {:verifier.code 0} true;
    out_$p236 := $M.79;
    goto corral_source_split_12084;

  $bb203:
    assume out_$i235 == 1;
    goto corral_source_split_12083;

  corral_source_split_12054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    out_$i235 := $eq.i32(out_$i234, 2);
    goto corral_source_split_12054;

  corral_source_split_12052:
    assume {:verifier.code 0} true;
    out_$i234 := $M.87;
    goto corral_source_split_12053;

  $bb187:
    assume out_$i218 == 1;
    goto corral_source_split_12052;

  $bb186:
    assume !(out_$i217 == 1);
    assume {:verifier.code 0} true;
    out_$i218 := $slt.i32(out_$i216, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb207:
    assume !(out_$i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb209:
    assume !(out_$i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  corral_source_split_12102:
    assume {:verifier.code 0} true;
    goto $bb210;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    $M.90 := out_$i248;
    call {:si_unique_call 2071} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i248);
    goto corral_source_split_12102;

  corral_source_split_12100:
    assume {:verifier.code 0} true;
    out_$i248 := $add.i32(out_$i247, 1);
    goto corral_source_split_12101;

  corral_source_split_12099:
    assume {:verifier.code 0} true;
    out_$i247 := $M.90;
    goto corral_source_split_12100;

  corral_source_split_12098:
    assume {:verifier.code 0} true;
    $M.87 := 2;
    call {:si_unique_call 2070} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_12099;

  $bb208:
    assume out_$i246 == 1;
    goto corral_source_split_12098;

  corral_source_split_12096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    out_$i246 := $eq.i32(out_$i245, 0);
    goto corral_source_split_12096;

  corral_source_split_12094:
    assume {:verifier.code 0} true;
    out_$i245 := $M.97;
    goto corral_source_split_12095;

  corral_source_split_12093:
    assume {:verifier.code 0} true;
    $M.97 := out_$i244;
    call {:si_unique_call 2069} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i244);
    goto corral_source_split_12094;

  corral_source_split_12092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} out_$i244 := synclinkmp_proc_open(out_$p242, out_$p243);
    goto corral_source_split_12093;

  corral_source_split_12091:
    assume {:verifier.code 0} true;
    out_$p243 := $M.79;
    goto corral_source_split_12092;

  corral_source_split_12090:
    assume {:verifier.code 0} true;
    out_$p242 := $M.78;
    goto corral_source_split_12091;

  $bb206:
    assume out_$i241 == 1;
    goto corral_source_split_12090;

  corral_source_split_12058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  corral_source_split_12057:
    assume {:verifier.code 0} true;
    out_$i241 := $eq.i32(out_$i240, 1);
    goto corral_source_split_12058;

  corral_source_split_12056:
    assume {:verifier.code 0} true;
    out_$i240 := $M.87;
    goto corral_source_split_12057;

  $bb189:
    assume out_$i219 == 1;
    goto corral_source_split_12056;

  $bb188:
    assume !(out_$i218 == 1);
    assume {:verifier.code 0} true;
    out_$i219 := $eq.i32(out_$i216, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2072} ldv_stop();
    goto corral_source_split_12104;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb190:
    assume {:verifier.code 0} true;
    assume !(out_$i219 == 1);
    goto $bb191;

  $bb195:
    assume {:verifier.code 0} true;
    assume !(out_$i221 == 1);
    goto $bb191;

  $bb216:
    assume !(out_$i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_12106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} choose_interrupt_1();
    goto corral_source_split_12107;

  $bb215:
    assume out_$i250 == 1;
    goto corral_source_split_12106;

  corral_source_split_11763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    out_$i250 := $ne.i32(out_$i249, 0);
    goto corral_source_split_11763;

  corral_source_split_11761:
    assume {:verifier.code 0} true;
    out_$i249 := $M.88;
    goto corral_source_split_11762;

  $bb15:
    assume !(out_$i69 == 1);
    goto corral_source_split_11761;

  $bb219:
    assume !(out_$i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_12109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2074} choose_timer_4();
    goto corral_source_split_12110;

  $bb218:
    assume out_$i252 == 1;
    goto corral_source_split_12109;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  corral_source_split_11746:
    assume {:verifier.code 0} true;
    out_$i252 := $ne.i32(out_$i251, 0);
    goto corral_source_split_11747;

  corral_source_split_11745:
    assume {:verifier.code 0} true;
    out_$i251 := $M.89;
    goto corral_source_split_11746;

  $bb7:
    assume out_$i66 == 1;
    goto corral_source_split_11745;

  $bb6:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i63, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb222:
    assume !(out_$i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb232:
    assume {:verifier.code 0} true;
    assume !(out_$i260 == 1);
    goto $bb233;

  $bb235:
    assume {:verifier.code 0} true;
    assume !(out_$i262 == 1);
    goto $bb233;

  corral_source_split_12124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235;

  corral_source_split_12123:
    assume {:verifier.code 0} true;
    out_$i262 := $eq.i32(out_$i261, 0);
    goto corral_source_split_12124;

  corral_source_split_12122:
    assume {:verifier.code 0} true;
    out_$i261 := $M.90;
    goto corral_source_split_12123;

  $bb231:
    assume out_$i260 == 1;
    goto corral_source_split_12122;

  corral_source_split_12120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    out_$i260 := $eq.i32(out_$i259, 2);
    goto corral_source_split_12120;

  corral_source_split_12118:
    assume {:verifier.code 0} true;
    out_$i259 := $M.91;
    goto corral_source_split_12119;

  $bb229:
    assume out_$i258 == 1;
    goto corral_source_split_12118;

  $bb224:
    assume out_$i256 == 1;
    assume {:verifier.code 0} true;
    out_$i258 := $eq.i32(out_$i255, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  $bb223:
    assume {:verifier.code 0} true;
    out_$i256 := $slt.i32(out_$i255, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  corral_source_split_12112:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2075} out_$i255 := __VERIFIER_nondet_int();
    call {:si_unique_call 2076} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i255);
    call {:si_unique_call 2077} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i255);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb221:
    assume out_$i254 == 1;
    goto corral_source_split_12112;

  corral_source_split_11751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    out_$i254 := $ne.i32(out_$i253, 0);
    goto corral_source_split_11751;

  corral_source_split_11749:
    assume {:verifier.code 0} true;
    out_$i253 := $M.91;
    goto corral_source_split_11750;

  $bb9:
    assume out_$i67 == 1;
    goto corral_source_split_11749;

  $bb8:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(out_$i63, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb240:
    assume !(out_$i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb245:
    assume !(out_$i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    goto $bb246;

  corral_source_split_12150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2090} ldv_file_operations_8();
    goto corral_source_split_12151;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 2089} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_12150;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} ldv_tty_port_operations_6();
    goto corral_source_split_12149;

  corral_source_split_12147:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 2087} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_12148;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2086} ldv_initialize_tty_operations_5();
    goto corral_source_split_12147;

  corral_source_split_12145:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2085} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12146;

  corral_source_split_12144:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 2084} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_12145;

  $bb244:
    assume out_$i269 == 1;
    goto corral_source_split_12144;

  corral_source_split_12142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  corral_source_split_12141:
    assume {:verifier.code 0} true;
    out_$i269 := $eq.i32(out_$i268, 0);
    goto corral_source_split_12142;

  $bb243:
    assume {:verifier.code 0} true;
    out_$i268 := $M.98;
    goto corral_source_split_12141;

  $bb242:
    assume !(out_$i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  corral_source_split_12136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242;

  corral_source_split_12135:
    assume {:verifier.code 0} true;
    out_$i267 := $ne.i32(out_$i266, 0);
    goto corral_source_split_12136;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    out_$i266 := $M.98;
    goto corral_source_split_12135;

  corral_source_split_12133:
    assume {:verifier.code 0} true;
    $M.98 := out_$i265;
    call {:si_unique_call 2082} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i265);
    goto corral_source_split_12134;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} out_$i265 := synclinkmp_init();
    goto corral_source_split_12133;

  $bb239:
    assume out_$i264 == 1;
    goto corral_source_split_12132;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  corral_source_split_12115:
    assume {:verifier.code 0} true;
    out_$i264 := $eq.i32(out_$i263, 1);
    goto corral_source_split_12116;

  corral_source_split_12114:
    assume {:verifier.code 0} true;
    out_$i263 := $M.91;
    goto corral_source_split_12115;

  $bb226:
    assume out_$i257 == 1;
    goto corral_source_split_12114;

  $bb225:
    assume !(out_$i256 == 1);
    assume {:verifier.code 0} true;
    out_$i257 := $eq.i32(out_$i255, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  corral_source_split_12153:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} ldv_stop();
    goto corral_source_split_12153;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb227:
    assume {:verifier.code 0} true;
    assume !(out_$i257 == 1);
    goto $bb228;

  $bb230:
    assume {:verifier.code 0} true;
    assume !(out_$i258 == 1);
    goto $bb228;

  $bb252:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb598;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb598;

  $bb597:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb595:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb592:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb589:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb580:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb565:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb550:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb535:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb520:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb505:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb490:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb487:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb484:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb469:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb466:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb451:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb436:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb421:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb400:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb308:
    assume !(out_$i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  corral_source_split_12260:
    assume {:verifier.code 0} true;
    goto $bb309;

  corral_source_split_12259:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2096} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12260;

  corral_source_split_12258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} tx_release(out_$p301);
    goto corral_source_split_12259;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    out_$p301 := $M.82;
    goto corral_source_split_12258;

  $bb307:
    assume out_$i300 == 1;
    goto corral_source_split_12257;

  corral_source_split_12255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    out_$i300 := $eq.i32(out_$i299, 3);
    goto corral_source_split_12255;

  corral_source_split_12253:
    assume {:verifier.code 0} true;
    out_$i299 := $M.92;
    goto corral_source_split_12254;

  $bb305:
    assume out_$i298 == 1;
    goto corral_source_split_12253;

  $bb301:
    assume out_$i296 == 1;
    assume {:verifier.code 0} true;
    out_$i298 := $eq.i32(out_$i272, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  $bb295:
    assume out_$i293 == 1;
    assume {:verifier.code 0} true;
    out_$i296 := $slt.i32(out_$i272, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  $bb283:
    assume out_$i287 == 1;
    assume {:verifier.code 0} true;
    out_$i293 := $slt.i32(out_$i272, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb254:
    assume out_$i273 == 1;
    assume {:verifier.code 0} true;
    out_$i287 := $slt.i32(out_$i272, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb253:
    assume {:verifier.code 0} true;
    out_$i273 := $slt.i32(out_$i272, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_12155:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2092} out_$i272 := __VERIFIER_nondet_int();
    call {:si_unique_call 2093} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i272);
    call {:si_unique_call 2094} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i272);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb251:
    assume out_$i271 == 1;
    goto corral_source_split_12155;

  corral_source_split_11755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  corral_source_split_11754:
    assume {:verifier.code 0} true;
    out_$i271 := $ne.i32(out_$i270, 0);
    goto corral_source_split_11755;

  corral_source_split_11753:
    assume {:verifier.code 0} true;
    out_$i270 := $M.92;
    goto corral_source_split_11754;

  $bb11:
    assume out_$i68 == 1;
    goto corral_source_split_11753;

  $bb10:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i32(out_$i63, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb324:
    assume !(out_$i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  corral_source_split_12312:
    assume {:verifier.code 0} true;
    goto $bb325;

  corral_source_split_12311:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2106} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12312;

  corral_source_split_12310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} send_xchar(out_$p328, out_$i331);
    goto corral_source_split_12311;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    out_$i331 := $trunc.i32.i8(out_$i330);
    goto corral_source_split_12310;

  corral_source_split_12308:
    assume {:verifier.code 0} true;
    out_$i330 := $sext.i8.i32(out_$i329);
    goto corral_source_split_12309;

  corral_source_split_12307:
    assume {:verifier.code 0} true;
    out_$i329 := $load.i8($M.66, in_$p11);
    goto corral_source_split_12308;

  corral_source_split_12306:
    assume {:verifier.code 0} true;
    out_$p328 := $M.82;
    goto corral_source_split_12307;

  $bb323:
    assume out_$i327 == 1;
    goto corral_source_split_12306;

  corral_source_split_12304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  corral_source_split_12303:
    assume {:verifier.code 0} true;
    out_$i327 := $eq.i32(out_$i326, 5);
    goto corral_source_split_12304;

  $bb322:
    assume {:verifier.code 0} true;
    out_$i326 := $M.92;
    goto corral_source_split_12303;

  $bb321:
    assume !(out_$i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  corral_source_split_12301:
    assume {:verifier.code 0} true;
    goto $bb322;

  corral_source_split_12300:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2104} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12301;

  corral_source_split_12299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2103} send_xchar(out_$p322, out_$i325);
    goto corral_source_split_12300;

  corral_source_split_12298:
    assume {:verifier.code 0} true;
    out_$i325 := $trunc.i32.i8(out_$i324);
    goto corral_source_split_12299;

  corral_source_split_12297:
    assume {:verifier.code 0} true;
    out_$i324 := $sext.i8.i32(out_$i323);
    goto corral_source_split_12298;

  corral_source_split_12296:
    assume {:verifier.code 0} true;
    out_$i323 := $load.i8($M.66, in_$p11);
    goto corral_source_split_12297;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    out_$p322 := $M.82;
    goto corral_source_split_12296;

  $bb320:
    assume out_$i321 == 1;
    goto corral_source_split_12295;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  corral_source_split_12292:
    assume {:verifier.code 0} true;
    out_$i321 := $eq.i32(out_$i320, 2);
    goto corral_source_split_12293;

  $bb319:
    assume {:verifier.code 0} true;
    out_$i320 := $M.92;
    goto corral_source_split_12292;

  $bb318:
    assume !(out_$i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    goto $bb319;

  corral_source_split_12289:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2102} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12290;

  corral_source_split_12288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} send_xchar(out_$p316, out_$i319);
    goto corral_source_split_12289;

  corral_source_split_12287:
    assume {:verifier.code 0} true;
    out_$i319 := $trunc.i32.i8(out_$i318);
    goto corral_source_split_12288;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    out_$i318 := $sext.i8.i32(out_$i317);
    goto corral_source_split_12287;

  corral_source_split_12285:
    assume {:verifier.code 0} true;
    out_$i317 := $load.i8($M.66, in_$p11);
    goto corral_source_split_12286;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    out_$p316 := $M.82;
    goto corral_source_split_12285;

  $bb317:
    assume out_$i315 == 1;
    goto corral_source_split_12284;

  corral_source_split_12282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  corral_source_split_12281:
    assume {:verifier.code 0} true;
    out_$i315 := $eq.i32(out_$i314, 3);
    goto corral_source_split_12282;

  $bb316:
    assume {:verifier.code 0} true;
    out_$i314 := $M.92;
    goto corral_source_split_12281;

  $bb315:
    assume !(out_$i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  corral_source_split_12279:
    assume {:verifier.code 0} true;
    goto $bb316;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2100} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12279;

  corral_source_split_12277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} send_xchar(out_$p310, out_$i313);
    goto corral_source_split_12278;

  corral_source_split_12276:
    assume {:verifier.code 0} true;
    out_$i313 := $trunc.i32.i8(out_$i312);
    goto corral_source_split_12277;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    out_$i312 := $sext.i8.i32(out_$i311);
    goto corral_source_split_12276;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    out_$i311 := $load.i8($M.66, in_$p11);
    goto corral_source_split_12275;

  corral_source_split_12273:
    assume {:verifier.code 0} true;
    out_$p310 := $M.82;
    goto corral_source_split_12274;

  $bb314:
    assume out_$i309 == 1;
    goto corral_source_split_12273;

  corral_source_split_12271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    out_$i309 := $eq.i32(out_$i308, 1);
    goto corral_source_split_12271;

  $bb313:
    assume {:verifier.code 0} true;
    out_$i308 := $M.92;
    goto corral_source_split_12270;

  $bb312:
    assume !(out_$i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  corral_source_split_12268:
    assume {:verifier.code 0} true;
    goto $bb313;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2098} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12268;

  corral_source_split_12266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} send_xchar(out_$p304, out_$i307);
    goto corral_source_split_12267;

  corral_source_split_12265:
    assume {:verifier.code 0} true;
    out_$i307 := $trunc.i32.i8(out_$i306);
    goto corral_source_split_12266;

  corral_source_split_12264:
    assume {:verifier.code 0} true;
    out_$i306 := $sext.i8.i32(out_$i305);
    goto corral_source_split_12265;

  corral_source_split_12263:
    assume {:verifier.code 0} true;
    out_$i305 := $load.i8($M.66, in_$p11);
    goto corral_source_split_12264;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    out_$p304 := $M.82;
    goto corral_source_split_12263;

  $bb311:
    assume out_$i303 == 1;
    goto corral_source_split_12262;

  corral_source_split_12247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  corral_source_split_12246:
    assume {:verifier.code 0} true;
    out_$i303 := $eq.i32(out_$i302, 4);
    goto corral_source_split_12247;

  corral_source_split_12245:
    assume {:verifier.code 0} true;
    out_$i302 := $M.92;
    goto corral_source_split_12246;

  $bb303:
    assume out_$i297 == 1;
    goto corral_source_split_12245;

  $bb302:
    assume !(out_$i296 == 1);
    assume {:verifier.code 0} true;
    out_$i297 := $slt.i32(out_$i272, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb303, $bb304;

  $bb339:
    assume !(out_$i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  corral_source_split_12364:
    assume {:verifier.code 0} true;
    goto $bb340;

  corral_source_split_12363:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2116} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12364;

  corral_source_split_12362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} out_vslice_dummy_var_480 := put_char(out_$p362, out_$i365);
    goto corral_source_split_12363;

  corral_source_split_12361:
    assume {:verifier.code 0} true;
    out_$i365 := $trunc.i32.i8(out_$i364);
    goto corral_source_split_12362;

  corral_source_split_12360:
    assume {:verifier.code 0} true;
    out_$i364 := $zext.i8.i32(out_$i363);
    goto corral_source_split_12361;

  corral_source_split_12359:
    assume {:verifier.code 0} true;
    out_$i363 := $load.i8($M.66, in_$p6);
    goto corral_source_split_12360;

  corral_source_split_12358:
    assume {:verifier.code 0} true;
    out_$p362 := $M.82;
    goto corral_source_split_12359;

  $bb338:
    assume out_$i361 == 1;
    goto corral_source_split_12358;

  corral_source_split_12356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  corral_source_split_12355:
    assume {:verifier.code 0} true;
    out_$i361 := $eq.i32(out_$i360, 5);
    goto corral_source_split_12356;

  $bb337:
    assume {:verifier.code 0} true;
    out_$i360 := $M.92;
    goto corral_source_split_12355;

  $bb336:
    assume !(out_$i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  corral_source_split_12353:
    assume {:verifier.code 0} true;
    goto $bb337;

  corral_source_split_12352:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2114} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12353;

  corral_source_split_12351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} out_vslice_dummy_var_479 := put_char(out_$p355, out_$i358);
    goto corral_source_split_12352;

  corral_source_split_12350:
    assume {:verifier.code 0} true;
    out_$i358 := $trunc.i32.i8(out_$i357);
    goto corral_source_split_12351;

  corral_source_split_12349:
    assume {:verifier.code 0} true;
    out_$i357 := $zext.i8.i32(out_$i356);
    goto corral_source_split_12350;

  corral_source_split_12348:
    assume {:verifier.code 0} true;
    out_$i356 := $load.i8($M.66, in_$p6);
    goto corral_source_split_12349;

  corral_source_split_12347:
    assume {:verifier.code 0} true;
    out_$p355 := $M.82;
    goto corral_source_split_12348;

  $bb335:
    assume out_$i354 == 1;
    goto corral_source_split_12347;

  corral_source_split_12345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  corral_source_split_12344:
    assume {:verifier.code 0} true;
    out_$i354 := $eq.i32(out_$i353, 2);
    goto corral_source_split_12345;

  $bb334:
    assume {:verifier.code 0} true;
    out_$i353 := $M.92;
    goto corral_source_split_12344;

  $bb333:
    assume !(out_$i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  corral_source_split_12342:
    assume {:verifier.code 0} true;
    goto $bb334;

  corral_source_split_12341:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2112} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12342;

  corral_source_split_12340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} out_vslice_dummy_var_478 := put_char(out_$p348, out_$i351);
    goto corral_source_split_12341;

  corral_source_split_12339:
    assume {:verifier.code 0} true;
    out_$i351 := $trunc.i32.i8(out_$i350);
    goto corral_source_split_12340;

  corral_source_split_12338:
    assume {:verifier.code 0} true;
    out_$i350 := $zext.i8.i32(out_$i349);
    goto corral_source_split_12339;

  corral_source_split_12337:
    assume {:verifier.code 0} true;
    out_$i349 := $load.i8($M.66, in_$p6);
    goto corral_source_split_12338;

  corral_source_split_12336:
    assume {:verifier.code 0} true;
    out_$p348 := $M.82;
    goto corral_source_split_12337;

  $bb332:
    assume out_$i347 == 1;
    goto corral_source_split_12336;

  corral_source_split_12334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  corral_source_split_12333:
    assume {:verifier.code 0} true;
    out_$i347 := $eq.i32(out_$i346, 3);
    goto corral_source_split_12334;

  $bb331:
    assume {:verifier.code 0} true;
    out_$i346 := $M.92;
    goto corral_source_split_12333;

  $bb330:
    assume !(out_$i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  corral_source_split_12331:
    assume {:verifier.code 0} true;
    goto $bb331;

  corral_source_split_12330:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2110} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12331;

  corral_source_split_12329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} out_vslice_dummy_var_477 := put_char(out_$p341, out_$i344);
    goto corral_source_split_12330;

  corral_source_split_12328:
    assume {:verifier.code 0} true;
    out_$i344 := $trunc.i32.i8(out_$i343);
    goto corral_source_split_12329;

  corral_source_split_12327:
    assume {:verifier.code 0} true;
    out_$i343 := $zext.i8.i32(out_$i342);
    goto corral_source_split_12328;

  corral_source_split_12326:
    assume {:verifier.code 0} true;
    out_$i342 := $load.i8($M.66, in_$p6);
    goto corral_source_split_12327;

  corral_source_split_12325:
    assume {:verifier.code 0} true;
    out_$p341 := $M.82;
    goto corral_source_split_12326;

  $bb329:
    assume out_$i340 == 1;
    goto corral_source_split_12325;

  corral_source_split_12323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  corral_source_split_12322:
    assume {:verifier.code 0} true;
    out_$i340 := $eq.i32(out_$i339, 1);
    goto corral_source_split_12323;

  $bb328:
    assume {:verifier.code 0} true;
    out_$i339 := $M.92;
    goto corral_source_split_12322;

  $bb327:
    assume !(out_$i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  corral_source_split_12320:
    assume {:verifier.code 0} true;
    goto $bb328;

  corral_source_split_12319:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2108} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12320;

  corral_source_split_12318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} out_vslice_dummy_var_476 := put_char(out_$p334, out_$i337);
    goto corral_source_split_12319;

  corral_source_split_12317:
    assume {:verifier.code 0} true;
    out_$i337 := $trunc.i32.i8(out_$i336);
    goto corral_source_split_12318;

  corral_source_split_12316:
    assume {:verifier.code 0} true;
    out_$i336 := $zext.i8.i32(out_$i335);
    goto corral_source_split_12317;

  corral_source_split_12315:
    assume {:verifier.code 0} true;
    out_$i335 := $load.i8($M.66, in_$p6);
    goto corral_source_split_12316;

  corral_source_split_12314:
    assume {:verifier.code 0} true;
    out_$p334 := $M.82;
    goto corral_source_split_12315;

  $bb326:
    assume out_$i333 == 1;
    goto corral_source_split_12314;

  corral_source_split_12251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  corral_source_split_12250:
    assume {:verifier.code 0} true;
    out_$i333 := $eq.i32(out_$i332, 4);
    goto corral_source_split_12251;

  corral_source_split_12249:
    assume {:verifier.code 0} true;
    out_$i332 := $M.92;
    goto corral_source_split_12250;

  $bb304:
    assume !(out_$i297 == 1);
    goto corral_source_split_12249;

  $bb354:
    assume !(out_$i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb355;

  corral_source_split_12401:
    assume {:verifier.code 0} true;
    goto $bb355;

  corral_source_split_12400:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2126} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12401;

  corral_source_split_12399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} throttle(out_$p381);
    goto corral_source_split_12400;

  corral_source_split_12398:
    assume {:verifier.code 0} true;
    out_$p381 := $M.82;
    goto corral_source_split_12399;

  $bb353:
    assume out_$i380 == 1;
    goto corral_source_split_12398;

  corral_source_split_12396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb353, $bb354;

  corral_source_split_12395:
    assume {:verifier.code 0} true;
    out_$i380 := $eq.i32(out_$i379, 5);
    goto corral_source_split_12396;

  $bb352:
    assume {:verifier.code 0} true;
    out_$i379 := $M.92;
    goto corral_source_split_12395;

  $bb351:
    assume !(out_$i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  corral_source_split_12393:
    assume {:verifier.code 0} true;
    goto $bb352;

  corral_source_split_12392:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2124} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12393;

  corral_source_split_12391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} throttle(out_$p378);
    goto corral_source_split_12392;

  corral_source_split_12390:
    assume {:verifier.code 0} true;
    out_$p378 := $M.82;
    goto corral_source_split_12391;

  $bb350:
    assume out_$i377 == 1;
    goto corral_source_split_12390;

  corral_source_split_12388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  corral_source_split_12387:
    assume {:verifier.code 0} true;
    out_$i377 := $eq.i32(out_$i376, 2);
    goto corral_source_split_12388;

  $bb349:
    assume {:verifier.code 0} true;
    out_$i376 := $M.92;
    goto corral_source_split_12387;

  $bb348:
    assume !(out_$i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  corral_source_split_12385:
    assume {:verifier.code 0} true;
    goto $bb349;

  corral_source_split_12384:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2122} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12385;

  corral_source_split_12383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} throttle(out_$p375);
    goto corral_source_split_12384;

  corral_source_split_12382:
    assume {:verifier.code 0} true;
    out_$p375 := $M.82;
    goto corral_source_split_12383;

  $bb347:
    assume out_$i374 == 1;
    goto corral_source_split_12382;

  corral_source_split_12380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  corral_source_split_12379:
    assume {:verifier.code 0} true;
    out_$i374 := $eq.i32(out_$i373, 3);
    goto corral_source_split_12380;

  $bb346:
    assume {:verifier.code 0} true;
    out_$i373 := $M.92;
    goto corral_source_split_12379;

  $bb345:
    assume !(out_$i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb346;

  corral_source_split_12377:
    assume {:verifier.code 0} true;
    goto $bb346;

  corral_source_split_12376:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2120} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12377;

  corral_source_split_12375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} throttle(out_$p372);
    goto corral_source_split_12376;

  corral_source_split_12374:
    assume {:verifier.code 0} true;
    out_$p372 := $M.82;
    goto corral_source_split_12375;

  $bb344:
    assume out_$i371 == 1;
    goto corral_source_split_12374;

  corral_source_split_12372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  corral_source_split_12371:
    assume {:verifier.code 0} true;
    out_$i371 := $eq.i32(out_$i370, 1);
    goto corral_source_split_12372;

  $bb343:
    assume {:verifier.code 0} true;
    out_$i370 := $M.92;
    goto corral_source_split_12371;

  $bb342:
    assume !(out_$i368 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  corral_source_split_12369:
    assume {:verifier.code 0} true;
    goto $bb343;

  corral_source_split_12368:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2118} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12369;

  corral_source_split_12367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} throttle(out_$p369);
    goto corral_source_split_12368;

  corral_source_split_12366:
    assume {:verifier.code 0} true;
    out_$p369 := $M.82;
    goto corral_source_split_12367;

  $bb341:
    assume out_$i368 == 1;
    goto corral_source_split_12366;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  corral_source_split_12234:
    assume {:verifier.code 0} true;
    out_$i368 := $eq.i32(out_$i367, 4);
    goto corral_source_split_12235;

  corral_source_split_12233:
    assume {:verifier.code 0} true;
    out_$i367 := $M.92;
    goto corral_source_split_12234;

  $bb297:
    assume out_$i294 == 1;
    goto corral_source_split_12233;

  $bb296:
    assume !(out_$i293 == 1);
    assume {:verifier.code 0} true;
    out_$i294 := $slt.i32(out_$i272, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  $bb369:
    assume !(out_$i399 == 1);
    assume {:verifier.code 0} true;
    goto $bb370;

  corral_source_split_12438:
    assume {:verifier.code 0} true;
    goto $bb370;

  corral_source_split_12437:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2136} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12438;

  corral_source_split_12436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} out_vslice_dummy_var_485 := get_icount(out_$p400, in_$p29);
    goto corral_source_split_12437;

  corral_source_split_12435:
    assume {:verifier.code 0} true;
    out_$p400 := $M.82;
    goto corral_source_split_12436;

  $bb368:
    assume out_$i399 == 1;
    goto corral_source_split_12435;

  corral_source_split_12433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb368, $bb369;

  corral_source_split_12432:
    assume {:verifier.code 0} true;
    out_$i399 := $eq.i32(out_$i398, 5);
    goto corral_source_split_12433;

  $bb367:
    assume {:verifier.code 0} true;
    out_$i398 := $M.92;
    goto corral_source_split_12432;

  $bb366:
    assume !(out_$i395 == 1);
    assume {:verifier.code 0} true;
    goto $bb367;

  corral_source_split_12430:
    assume {:verifier.code 0} true;
    goto $bb367;

  corral_source_split_12429:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2134} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12430;

  corral_source_split_12428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2133} out_vslice_dummy_var_484 := get_icount(out_$p396, in_$p29);
    goto corral_source_split_12429;

  corral_source_split_12427:
    assume {:verifier.code 0} true;
    out_$p396 := $M.82;
    goto corral_source_split_12428;

  $bb365:
    assume out_$i395 == 1;
    goto corral_source_split_12427;

  corral_source_split_12425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  corral_source_split_12424:
    assume {:verifier.code 0} true;
    out_$i395 := $eq.i32(out_$i394, 2);
    goto corral_source_split_12425;

  $bb364:
    assume {:verifier.code 0} true;
    out_$i394 := $M.92;
    goto corral_source_split_12424;

  $bb363:
    assume !(out_$i391 == 1);
    assume {:verifier.code 0} true;
    goto $bb364;

  corral_source_split_12422:
    assume {:verifier.code 0} true;
    goto $bb364;

  corral_source_split_12421:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2132} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12422;

  corral_source_split_12420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} out_vslice_dummy_var_483 := get_icount(out_$p392, in_$p29);
    goto corral_source_split_12421;

  corral_source_split_12419:
    assume {:verifier.code 0} true;
    out_$p392 := $M.82;
    goto corral_source_split_12420;

  $bb362:
    assume out_$i391 == 1;
    goto corral_source_split_12419;

  corral_source_split_12417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  corral_source_split_12416:
    assume {:verifier.code 0} true;
    out_$i391 := $eq.i32(out_$i390, 3);
    goto corral_source_split_12417;

  $bb361:
    assume {:verifier.code 0} true;
    out_$i390 := $M.92;
    goto corral_source_split_12416;

  $bb360:
    assume !(out_$i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb361;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    goto $bb361;

  corral_source_split_12413:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2130} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12414;

  corral_source_split_12412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} out_vslice_dummy_var_482 := get_icount(out_$p388, in_$p29);
    goto corral_source_split_12413;

  corral_source_split_12411:
    assume {:verifier.code 0} true;
    out_$p388 := $M.82;
    goto corral_source_split_12412;

  $bb359:
    assume out_$i387 == 1;
    goto corral_source_split_12411;

  corral_source_split_12409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  corral_source_split_12408:
    assume {:verifier.code 0} true;
    out_$i387 := $eq.i32(out_$i386, 1);
    goto corral_source_split_12409;

  $bb358:
    assume {:verifier.code 0} true;
    out_$i386 := $M.92;
    goto corral_source_split_12408;

  $bb357:
    assume !(out_$i383 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  corral_source_split_12406:
    assume {:verifier.code 0} true;
    goto $bb358;

  corral_source_split_12405:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2128} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12406;

  corral_source_split_12404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} out_vslice_dummy_var_481 := get_icount(out_$p384, in_$p29);
    goto corral_source_split_12405;

  corral_source_split_12403:
    assume {:verifier.code 0} true;
    out_$p384 := $M.82;
    goto corral_source_split_12404;

  $bb356:
    assume out_$i383 == 1;
    goto corral_source_split_12403;

  corral_source_split_12239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  corral_source_split_12238:
    assume {:verifier.code 0} true;
    out_$i383 := $eq.i32(out_$i382, 4);
    goto corral_source_split_12239;

  corral_source_split_12237:
    assume {:verifier.code 0} true;
    out_$i382 := $M.92;
    goto corral_source_split_12238;

  $bb299:
    assume out_$i295 == 1;
    goto corral_source_split_12237;

  $bb298:
    assume !(out_$i294 == 1);
    assume {:verifier.code 0} true;
    out_$i295 := $slt.i32(out_$i272, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb384:
    assume !(out_$i415 == 1);
    assume {:verifier.code 0} true;
    goto $bb385;

  corral_source_split_12475:
    assume {:verifier.code 0} true;
    goto $bb385;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2146} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12475;

  corral_source_split_12473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} hangup(out_$p416);
    goto corral_source_split_12474;

  corral_source_split_12472:
    assume {:verifier.code 0} true;
    out_$p416 := $M.82;
    goto corral_source_split_12473;

  $bb383:
    assume out_$i415 == 1;
    goto corral_source_split_12472;

  corral_source_split_12470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb383, $bb384;

  corral_source_split_12469:
    assume {:verifier.code 0} true;
    out_$i415 := $eq.i32(out_$i414, 5);
    goto corral_source_split_12470;

  $bb382:
    assume {:verifier.code 0} true;
    out_$i414 := $M.92;
    goto corral_source_split_12469;

  $bb381:
    assume !(out_$i412 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  corral_source_split_12467:
    assume {:verifier.code 0} true;
    goto $bb382;

  corral_source_split_12466:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2144} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12467;

  corral_source_split_12465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} hangup(out_$p413);
    goto corral_source_split_12466;

  corral_source_split_12464:
    assume {:verifier.code 0} true;
    out_$p413 := $M.82;
    goto corral_source_split_12465;

  $bb380:
    assume out_$i412 == 1;
    goto corral_source_split_12464;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb380, $bb381;

  corral_source_split_12461:
    assume {:verifier.code 0} true;
    out_$i412 := $eq.i32(out_$i411, 2);
    goto corral_source_split_12462;

  $bb379:
    assume {:verifier.code 0} true;
    out_$i411 := $M.92;
    goto corral_source_split_12461;

  $bb378:
    assume !(out_$i409 == 1);
    assume {:verifier.code 0} true;
    goto $bb379;

  corral_source_split_12459:
    assume {:verifier.code 0} true;
    goto $bb379;

  corral_source_split_12458:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2142} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12459;

  corral_source_split_12457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} hangup(out_$p410);
    goto corral_source_split_12458;

  corral_source_split_12456:
    assume {:verifier.code 0} true;
    out_$p410 := $M.82;
    goto corral_source_split_12457;

  $bb377:
    assume out_$i409 == 1;
    goto corral_source_split_12456;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  corral_source_split_12453:
    assume {:verifier.code 0} true;
    out_$i409 := $eq.i32(out_$i408, 3);
    goto corral_source_split_12454;

  $bb376:
    assume {:verifier.code 0} true;
    out_$i408 := $M.92;
    goto corral_source_split_12453;

  $bb375:
    assume !(out_$i406 == 1);
    assume {:verifier.code 0} true;
    goto $bb376;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    goto $bb376;

  corral_source_split_12450:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2140} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12451;

  corral_source_split_12449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} hangup(out_$p407);
    goto corral_source_split_12450;

  corral_source_split_12448:
    assume {:verifier.code 0} true;
    out_$p407 := $M.82;
    goto corral_source_split_12449;

  $bb374:
    assume out_$i406 == 1;
    goto corral_source_split_12448;

  corral_source_split_12446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb374, $bb375;

  corral_source_split_12445:
    assume {:verifier.code 0} true;
    out_$i406 := $eq.i32(out_$i405, 1);
    goto corral_source_split_12446;

  $bb373:
    assume {:verifier.code 0} true;
    out_$i405 := $M.92;
    goto corral_source_split_12445;

  $bb372:
    assume !(out_$i403 == 1);
    assume {:verifier.code 0} true;
    goto $bb373;

  corral_source_split_12443:
    assume {:verifier.code 0} true;
    goto $bb373;

  corral_source_split_12442:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2138} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12443;

  corral_source_split_12441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} hangup(out_$p404);
    goto corral_source_split_12442;

  corral_source_split_12440:
    assume {:verifier.code 0} true;
    out_$p404 := $M.82;
    goto corral_source_split_12441;

  $bb371:
    assume out_$i403 == 1;
    goto corral_source_split_12440;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb371, $bb372;

  corral_source_split_12242:
    assume {:verifier.code 0} true;
    out_$i403 := $eq.i32(out_$i402, 4);
    goto corral_source_split_12243;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    out_$i402 := $M.92;
    goto corral_source_split_12242;

  $bb300:
    assume !(out_$i295 == 1);
    goto corral_source_split_12241;

  $bb399:
    assume !(out_$i430 == 1);
    assume {:verifier.code 0} true;
    goto $bb400;

  corral_source_split_12512:
    assume {:verifier.code 0} true;
    goto $bb400;

  corral_source_split_12511:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2156} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12512;

  corral_source_split_12510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2155} unthrottle(out_$p431);
    goto corral_source_split_12511;

  corral_source_split_12509:
    assume {:verifier.code 0} true;
    out_$p431 := $M.82;
    goto corral_source_split_12510;

  $bb398:
    assume out_$i430 == 1;
    goto corral_source_split_12509;

  corral_source_split_12507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb398, $bb399;

  corral_source_split_12506:
    assume {:verifier.code 0} true;
    out_$i430 := $eq.i32(out_$i429, 5);
    goto corral_source_split_12507;

  $bb397:
    assume {:verifier.code 0} true;
    out_$i429 := $M.92;
    goto corral_source_split_12506;

  $bb396:
    assume !(out_$i427 == 1);
    assume {:verifier.code 0} true;
    goto $bb397;

  corral_source_split_12504:
    assume {:verifier.code 0} true;
    goto $bb397;

  corral_source_split_12503:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2154} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12504;

  corral_source_split_12502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} unthrottle(out_$p428);
    goto corral_source_split_12503;

  corral_source_split_12501:
    assume {:verifier.code 0} true;
    out_$p428 := $M.82;
    goto corral_source_split_12502;

  $bb395:
    assume out_$i427 == 1;
    goto corral_source_split_12501;

  corral_source_split_12499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb395, $bb396;

  corral_source_split_12498:
    assume {:verifier.code 0} true;
    out_$i427 := $eq.i32(out_$i426, 2);
    goto corral_source_split_12499;

  $bb394:
    assume {:verifier.code 0} true;
    out_$i426 := $M.92;
    goto corral_source_split_12498;

  $bb393:
    assume !(out_$i424 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  corral_source_split_12496:
    assume {:verifier.code 0} true;
    goto $bb394;

  corral_source_split_12495:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2152} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12496;

  corral_source_split_12494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2151} unthrottle(out_$p425);
    goto corral_source_split_12495;

  corral_source_split_12493:
    assume {:verifier.code 0} true;
    out_$p425 := $M.82;
    goto corral_source_split_12494;

  $bb392:
    assume out_$i424 == 1;
    goto corral_source_split_12493;

  corral_source_split_12491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb392, $bb393;

  corral_source_split_12490:
    assume {:verifier.code 0} true;
    out_$i424 := $eq.i32(out_$i423, 3);
    goto corral_source_split_12491;

  $bb391:
    assume {:verifier.code 0} true;
    out_$i423 := $M.92;
    goto corral_source_split_12490;

  $bb390:
    assume !(out_$i421 == 1);
    assume {:verifier.code 0} true;
    goto $bb391;

  corral_source_split_12488:
    assume {:verifier.code 0} true;
    goto $bb391;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2150} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12488;

  corral_source_split_12486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} unthrottle(out_$p422);
    goto corral_source_split_12487;

  corral_source_split_12485:
    assume {:verifier.code 0} true;
    out_$p422 := $M.82;
    goto corral_source_split_12486;

  $bb389:
    assume out_$i421 == 1;
    goto corral_source_split_12485;

  corral_source_split_12483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  corral_source_split_12482:
    assume {:verifier.code 0} true;
    out_$i421 := $eq.i32(out_$i420, 1);
    goto corral_source_split_12483;

  $bb388:
    assume {:verifier.code 0} true;
    out_$i420 := $M.92;
    goto corral_source_split_12482;

  $bb387:
    assume !(out_$i418 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  corral_source_split_12480:
    assume {:verifier.code 0} true;
    goto $bb388;

  corral_source_split_12479:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2148} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12480;

  corral_source_split_12478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} unthrottle(out_$p419);
    goto corral_source_split_12479;

  corral_source_split_12477:
    assume {:verifier.code 0} true;
    out_$p419 := $M.82;
    goto corral_source_split_12478;

  $bb386:
    assume out_$i418 == 1;
    goto corral_source_split_12477;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  corral_source_split_12222:
    assume {:verifier.code 0} true;
    out_$i418 := $eq.i32(out_$i417, 4);
    goto corral_source_split_12223;

  corral_source_split_12221:
    assume {:verifier.code 0} true;
    out_$i417 := $M.92;
    goto corral_source_split_12222;

  $bb291:
    assume out_$i291 == 1;
    goto corral_source_split_12221;

  $bb285:
    assume out_$i288 == 1;
    assume {:verifier.code 0} true;
    out_$i291 := $slt.i32(out_$i272, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  $bb284:
    assume !(out_$i287 == 1);
    assume {:verifier.code 0} true;
    out_$i288 := $slt.i32(out_$i272, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  $bb402:
    assume !(out_$i433 == 1);
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb404:
    assume !(out_$i438 == 1);
    assume {:verifier.code 0} true;
    goto $bb405;

  corral_source_split_12523:
    assume {:verifier.code 0} true;
    goto $bb405;

  corral_source_split_12522:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2159} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12523;

  $bb403:
    assume out_$i438 == 1;
    goto corral_source_split_12522;

  corral_source_split_12520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb403, $bb404;

  corral_source_split_12519:
    assume {:verifier.code 0} true;
    out_$i438 := $eq.i32(out_$i437, 0);
    goto corral_source_split_12520;

  corral_source_split_12518:
    assume {:verifier.code 0} true;
    out_$i437 := $M.99;
    goto corral_source_split_12519;

  corral_source_split_12517:
    assume {:verifier.code 0} true;
    $M.99 := out_$i436;
    call {:si_unique_call 2158} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i436);
    goto corral_source_split_12518;

  SeqInstr_411:
    goto corral_source_split_12517;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  corral_source_split_12516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2157} out_$i436 := open(out_$p434, out_$p435);
    goto SeqInstr_410;

  corral_source_split_12515:
    assume {:verifier.code 0} true;
    out_$p435 := $M.81;
    goto corral_source_split_12516;

  corral_source_split_12514:
    assume {:verifier.code 0} true;
    out_$p434 := $M.82;
    goto corral_source_split_12515;

  $bb401:
    assume out_$i433 == 1;
    goto corral_source_split_12514;

  corral_source_split_12227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb401, $bb402;

  corral_source_split_12226:
    assume {:verifier.code 0} true;
    out_$i433 := $eq.i32(out_$i432, 2);
    goto corral_source_split_12227;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    out_$i432 := $M.92;
    goto corral_source_split_12226;

  $bb293:
    assume out_$i292 == 1;
    goto corral_source_split_12225;

  $bb292:
    assume !(out_$i291 == 1);
    assume {:verifier.code 0} true;
    out_$i292 := $slt.i32(out_$i272, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb420:
    assume !(out_$i452 == 1);
    assume {:verifier.code 0} true;
    goto $bb421;

  corral_source_split_12560:
    assume {:verifier.code 0} true;
    goto $bb421;

  corral_source_split_12559:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2169} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12560;

  corral_source_split_12558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2168} set_termios(out_$p453, in_$p32);
    goto corral_source_split_12559;

  corral_source_split_12557:
    assume {:verifier.code 0} true;
    out_$p453 := $M.82;
    goto corral_source_split_12558;

  $bb419:
    assume out_$i452 == 1;
    goto corral_source_split_12557;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb419, $bb420;

  corral_source_split_12554:
    assume {:verifier.code 0} true;
    out_$i452 := $eq.i32(out_$i451, 5);
    goto corral_source_split_12555;

  $bb418:
    assume {:verifier.code 0} true;
    out_$i451 := $M.92;
    goto corral_source_split_12554;

  $bb417:
    assume !(out_$i449 == 1);
    assume {:verifier.code 0} true;
    goto $bb418;

  corral_source_split_12552:
    assume {:verifier.code 0} true;
    goto $bb418;

  corral_source_split_12551:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2167} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12552;

  corral_source_split_12550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2166} set_termios(out_$p450, in_$p32);
    goto corral_source_split_12551;

  corral_source_split_12549:
    assume {:verifier.code 0} true;
    out_$p450 := $M.82;
    goto corral_source_split_12550;

  $bb416:
    assume out_$i449 == 1;
    goto corral_source_split_12549;

  corral_source_split_12547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb416, $bb417;

  corral_source_split_12546:
    assume {:verifier.code 0} true;
    out_$i449 := $eq.i32(out_$i448, 2);
    goto corral_source_split_12547;

  $bb415:
    assume {:verifier.code 0} true;
    out_$i448 := $M.92;
    goto corral_source_split_12546;

  $bb414:
    assume !(out_$i446 == 1);
    assume {:verifier.code 0} true;
    goto $bb415;

  corral_source_split_12544:
    assume {:verifier.code 0} true;
    goto $bb415;

  corral_source_split_12543:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2165} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12544;

  corral_source_split_12542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2164} set_termios(out_$p447, in_$p32);
    goto corral_source_split_12543;

  corral_source_split_12541:
    assume {:verifier.code 0} true;
    out_$p447 := $M.82;
    goto corral_source_split_12542;

  $bb413:
    assume out_$i446 == 1;
    goto corral_source_split_12541;

  corral_source_split_12539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb413, $bb414;

  corral_source_split_12538:
    assume {:verifier.code 0} true;
    out_$i446 := $eq.i32(out_$i445, 3);
    goto corral_source_split_12539;

  $bb412:
    assume {:verifier.code 0} true;
    out_$i445 := $M.92;
    goto corral_source_split_12538;

  $bb411:
    assume !(out_$i443 == 1);
    assume {:verifier.code 0} true;
    goto $bb412;

  corral_source_split_12536:
    assume {:verifier.code 0} true;
    goto $bb412;

  corral_source_split_12535:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2163} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12536;

  corral_source_split_12534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2162} set_termios(out_$p444, in_$p32);
    goto corral_source_split_12535;

  corral_source_split_12533:
    assume {:verifier.code 0} true;
    out_$p444 := $M.82;
    goto corral_source_split_12534;

  $bb410:
    assume out_$i443 == 1;
    goto corral_source_split_12533;

  corral_source_split_12531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb410, $bb411;

  corral_source_split_12530:
    assume {:verifier.code 0} true;
    out_$i443 := $eq.i32(out_$i442, 1);
    goto corral_source_split_12531;

  $bb409:
    assume {:verifier.code 0} true;
    out_$i442 := $M.92;
    goto corral_source_split_12530;

  $bb408:
    assume !(out_$i440 == 1);
    assume {:verifier.code 0} true;
    goto $bb409;

  corral_source_split_12528:
    assume {:verifier.code 0} true;
    goto $bb409;

  corral_source_split_12527:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2161} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12528;

  corral_source_split_12526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} set_termios(out_$p441, in_$p32);
    goto corral_source_split_12527;

  corral_source_split_12525:
    assume {:verifier.code 0} true;
    out_$p441 := $M.82;
    goto corral_source_split_12526;

  $bb407:
    assume out_$i440 == 1;
    goto corral_source_split_12525;

  corral_source_split_12231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb407, $bb408;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    out_$i440 := $eq.i32(out_$i439, 4);
    goto corral_source_split_12231;

  corral_source_split_12229:
    assume {:verifier.code 0} true;
    out_$i439 := $M.92;
    goto corral_source_split_12230;

  $bb294:
    assume !(out_$i292 == 1);
    goto corral_source_split_12229;

  $bb435:
    assume !(out_$i467 == 1);
    assume {:verifier.code 0} true;
    goto $bb436;

  corral_source_split_12597:
    assume {:verifier.code 0} true;
    goto $bb436;

  corral_source_split_12596:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2179} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12597;

  corral_source_split_12595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2178} flush_buffer(out_$p468);
    goto corral_source_split_12596;

  corral_source_split_12594:
    assume {:verifier.code 0} true;
    out_$p468 := $M.82;
    goto corral_source_split_12595;

  $bb434:
    assume out_$i467 == 1;
    goto corral_source_split_12594;

  corral_source_split_12592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb434, $bb435;

  corral_source_split_12591:
    assume {:verifier.code 0} true;
    out_$i467 := $eq.i32(out_$i466, 5);
    goto corral_source_split_12592;

  $bb433:
    assume {:verifier.code 0} true;
    out_$i466 := $M.92;
    goto corral_source_split_12591;

  $bb432:
    assume !(out_$i464 == 1);
    assume {:verifier.code 0} true;
    goto $bb433;

  corral_source_split_12589:
    assume {:verifier.code 0} true;
    goto $bb433;

  corral_source_split_12588:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2177} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12589;

  corral_source_split_12587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} flush_buffer(out_$p465);
    goto corral_source_split_12588;

  corral_source_split_12586:
    assume {:verifier.code 0} true;
    out_$p465 := $M.82;
    goto corral_source_split_12587;

  $bb431:
    assume out_$i464 == 1;
    goto corral_source_split_12586;

  corral_source_split_12584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb431, $bb432;

  corral_source_split_12583:
    assume {:verifier.code 0} true;
    out_$i464 := $eq.i32(out_$i463, 2);
    goto corral_source_split_12584;

  $bb430:
    assume {:verifier.code 0} true;
    out_$i463 := $M.92;
    goto corral_source_split_12583;

  $bb429:
    assume !(out_$i461 == 1);
    assume {:verifier.code 0} true;
    goto $bb430;

  corral_source_split_12581:
    assume {:verifier.code 0} true;
    goto $bb430;

  corral_source_split_12580:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2175} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12581;

  corral_source_split_12579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2174} flush_buffer(out_$p462);
    goto corral_source_split_12580;

  corral_source_split_12578:
    assume {:verifier.code 0} true;
    out_$p462 := $M.82;
    goto corral_source_split_12579;

  $bb428:
    assume out_$i461 == 1;
    goto corral_source_split_12578;

  corral_source_split_12576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb428, $bb429;

  corral_source_split_12575:
    assume {:verifier.code 0} true;
    out_$i461 := $eq.i32(out_$i460, 3);
    goto corral_source_split_12576;

  $bb427:
    assume {:verifier.code 0} true;
    out_$i460 := $M.92;
    goto corral_source_split_12575;

  $bb426:
    assume !(out_$i458 == 1);
    assume {:verifier.code 0} true;
    goto $bb427;

  corral_source_split_12573:
    assume {:verifier.code 0} true;
    goto $bb427;

  corral_source_split_12572:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2173} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12573;

  corral_source_split_12571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2172} flush_buffer(out_$p459);
    goto corral_source_split_12572;

  corral_source_split_12570:
    assume {:verifier.code 0} true;
    out_$p459 := $M.82;
    goto corral_source_split_12571;

  $bb425:
    assume out_$i458 == 1;
    goto corral_source_split_12570;

  corral_source_split_12568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb425, $bb426;

  corral_source_split_12567:
    assume {:verifier.code 0} true;
    out_$i458 := $eq.i32(out_$i457, 1);
    goto corral_source_split_12568;

  $bb424:
    assume {:verifier.code 0} true;
    out_$i457 := $M.92;
    goto corral_source_split_12567;

  $bb423:
    assume !(out_$i455 == 1);
    assume {:verifier.code 0} true;
    goto $bb424;

  corral_source_split_12565:
    assume {:verifier.code 0} true;
    goto $bb424;

  corral_source_split_12564:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2171} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12565;

  corral_source_split_12563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} flush_buffer(out_$p456);
    goto corral_source_split_12564;

  corral_source_split_12562:
    assume {:verifier.code 0} true;
    out_$p456 := $M.82;
    goto corral_source_split_12563;

  $bb422:
    assume out_$i455 == 1;
    goto corral_source_split_12562;

  corral_source_split_12211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb422, $bb423;

  corral_source_split_12210:
    assume {:verifier.code 0} true;
    out_$i455 := $eq.i32(out_$i454, 4);
    goto corral_source_split_12211;

  corral_source_split_12209:
    assume {:verifier.code 0} true;
    out_$i454 := $M.92;
    goto corral_source_split_12210;

  $bb287:
    assume out_$i289 == 1;
    goto corral_source_split_12209;

  $bb286:
    assume !(out_$i288 == 1);
    assume {:verifier.code 0} true;
    out_$i289 := $slt.i32(out_$i272, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb450:
    assume !(out_$i494 == 1);
    assume {:verifier.code 0} true;
    goto $bb451;

  corral_source_split_12644:
    assume {:verifier.code 0} true;
    goto $bb451;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2189} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12644;

  corral_source_split_12642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2188} out_vslice_dummy_var_490 := ioctl(out_$p495, out_$i496, out_$i497);
    goto corral_source_split_12643;

  corral_source_split_12641:
    assume {:verifier.code 0} true;
    out_$i497 := $load.i64($M.66, in_$p8);
    goto corral_source_split_12642;

  corral_source_split_12640:
    assume {:verifier.code 0} true;
    out_$i496 := $load.i32($M.66, in_$p10);
    goto corral_source_split_12641;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    out_$p495 := $M.82;
    goto corral_source_split_12640;

  $bb449:
    assume out_$i494 == 1;
    goto corral_source_split_12639;

  corral_source_split_12637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb449, $bb450;

  corral_source_split_12636:
    assume {:verifier.code 0} true;
    out_$i494 := $eq.i32(out_$i493, 5);
    goto corral_source_split_12637;

  $bb448:
    assume {:verifier.code 0} true;
    out_$i493 := $M.92;
    goto corral_source_split_12636;

  $bb447:
    assume !(out_$i488 == 1);
    assume {:verifier.code 0} true;
    goto $bb448;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    goto $bb448;

  corral_source_split_12633:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2187} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12634;

  corral_source_split_12632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2186} out_vslice_dummy_var_489 := ioctl(out_$p489, out_$i490, out_$i491);
    goto corral_source_split_12633;

  corral_source_split_12631:
    assume {:verifier.code 0} true;
    out_$i491 := $load.i64($M.66, in_$p8);
    goto corral_source_split_12632;

  corral_source_split_12630:
    assume {:verifier.code 0} true;
    out_$i490 := $load.i32($M.66, in_$p10);
    goto corral_source_split_12631;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    out_$p489 := $M.82;
    goto corral_source_split_12630;

  $bb446:
    assume out_$i488 == 1;
    goto corral_source_split_12629;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb446, $bb447;

  corral_source_split_12626:
    assume {:verifier.code 0} true;
    out_$i488 := $eq.i32(out_$i487, 2);
    goto corral_source_split_12627;

  $bb445:
    assume {:verifier.code 0} true;
    out_$i487 := $M.92;
    goto corral_source_split_12626;

  $bb444:
    assume !(out_$i482 == 1);
    assume {:verifier.code 0} true;
    goto $bb445;

  corral_source_split_12624:
    assume {:verifier.code 0} true;
    goto $bb445;

  corral_source_split_12623:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2185} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12624;

  corral_source_split_12622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} out_vslice_dummy_var_488 := ioctl(out_$p483, out_$i484, out_$i485);
    goto corral_source_split_12623;

  corral_source_split_12621:
    assume {:verifier.code 0} true;
    out_$i485 := $load.i64($M.66, in_$p8);
    goto corral_source_split_12622;

  corral_source_split_12620:
    assume {:verifier.code 0} true;
    out_$i484 := $load.i32($M.66, in_$p10);
    goto corral_source_split_12621;

  corral_source_split_12619:
    assume {:verifier.code 0} true;
    out_$p483 := $M.82;
    goto corral_source_split_12620;

  $bb443:
    assume out_$i482 == 1;
    goto corral_source_split_12619;

  corral_source_split_12617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb443, $bb444;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    out_$i482 := $eq.i32(out_$i481, 3);
    goto corral_source_split_12617;

  $bb442:
    assume {:verifier.code 0} true;
    out_$i481 := $M.92;
    goto corral_source_split_12616;

  $bb441:
    assume !(out_$i476 == 1);
    assume {:verifier.code 0} true;
    goto $bb442;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    goto $bb442;

  corral_source_split_12613:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2183} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12614;

  corral_source_split_12612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2182} out_vslice_dummy_var_487 := ioctl(out_$p477, out_$i478, out_$i479);
    goto corral_source_split_12613;

  corral_source_split_12611:
    assume {:verifier.code 0} true;
    out_$i479 := $load.i64($M.66, in_$p8);
    goto corral_source_split_12612;

  corral_source_split_12610:
    assume {:verifier.code 0} true;
    out_$i478 := $load.i32($M.66, in_$p10);
    goto corral_source_split_12611;

  corral_source_split_12609:
    assume {:verifier.code 0} true;
    out_$p477 := $M.82;
    goto corral_source_split_12610;

  $bb440:
    assume out_$i476 == 1;
    goto corral_source_split_12609;

  corral_source_split_12607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb440, $bb441;

  corral_source_split_12606:
    assume {:verifier.code 0} true;
    out_$i476 := $eq.i32(out_$i475, 1);
    goto corral_source_split_12607;

  $bb439:
    assume {:verifier.code 0} true;
    out_$i475 := $M.92;
    goto corral_source_split_12606;

  $bb438:
    assume !(out_$i470 == 1);
    assume {:verifier.code 0} true;
    goto $bb439;

  corral_source_split_12604:
    assume {:verifier.code 0} true;
    goto $bb439;

  corral_source_split_12603:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2181} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12604;

  corral_source_split_12602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2180} out_vslice_dummy_var_486 := ioctl(out_$p471, out_$i472, out_$i473);
    goto corral_source_split_12603;

  corral_source_split_12601:
    assume {:verifier.code 0} true;
    out_$i473 := $load.i64($M.66, in_$p8);
    goto corral_source_split_12602;

  corral_source_split_12600:
    assume {:verifier.code 0} true;
    out_$i472 := $load.i32($M.66, in_$p10);
    goto corral_source_split_12601;

  corral_source_split_12599:
    assume {:verifier.code 0} true;
    out_$p471 := $M.82;
    goto corral_source_split_12600;

  $bb437:
    assume out_$i470 == 1;
    goto corral_source_split_12599;

  corral_source_split_12215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb437, $bb438;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    out_$i470 := $eq.i32(out_$i469, 4);
    goto corral_source_split_12215;

  corral_source_split_12213:
    assume {:verifier.code 0} true;
    out_$i469 := $M.92;
    goto corral_source_split_12214;

  $bb289:
    assume out_$i290 == 1;
    goto corral_source_split_12213;

  $bb288:
    assume !(out_$i289 == 1);
    assume {:verifier.code 0} true;
    out_$i290 := $slt.i32(out_$i272, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  $bb465:
    assume !(out_$i516 == 1);
    assume {:verifier.code 0} true;
    goto $bb466;

  corral_source_split_12681:
    assume {:verifier.code 0} true;
    goto $bb466;

  corral_source_split_12680:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2199} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12681;

  corral_source_split_12679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2198} out_vslice_dummy_var_495 := install(in_$p34, out_$p517);
    goto corral_source_split_12680;

  corral_source_split_12678:
    assume {:verifier.code 0} true;
    out_$p517 := $M.82;
    goto corral_source_split_12679;

  $bb464:
    assume out_$i516 == 1;
    goto corral_source_split_12678;

  corral_source_split_12676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb464, $bb465;

  corral_source_split_12675:
    assume {:verifier.code 0} true;
    out_$i516 := $eq.i32(out_$i515, 5);
    goto corral_source_split_12676;

  $bb463:
    assume {:verifier.code 0} true;
    out_$i515 := $M.92;
    goto corral_source_split_12675;

  $bb462:
    assume !(out_$i512 == 1);
    assume {:verifier.code 0} true;
    goto $bb463;

  corral_source_split_12673:
    assume {:verifier.code 0} true;
    goto $bb463;

  corral_source_split_12672:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2197} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12673;

  corral_source_split_12671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2196} out_vslice_dummy_var_494 := install(in_$p34, out_$p513);
    goto corral_source_split_12672;

  corral_source_split_12670:
    assume {:verifier.code 0} true;
    out_$p513 := $M.82;
    goto corral_source_split_12671;

  $bb461:
    assume out_$i512 == 1;
    goto corral_source_split_12670;

  corral_source_split_12668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb461, $bb462;

  corral_source_split_12667:
    assume {:verifier.code 0} true;
    out_$i512 := $eq.i32(out_$i511, 2);
    goto corral_source_split_12668;

  $bb460:
    assume {:verifier.code 0} true;
    out_$i511 := $M.92;
    goto corral_source_split_12667;

  $bb459:
    assume !(out_$i508 == 1);
    assume {:verifier.code 0} true;
    goto $bb460;

  corral_source_split_12665:
    assume {:verifier.code 0} true;
    goto $bb460;

  corral_source_split_12664:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2195} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12665;

  corral_source_split_12663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2194} out_vslice_dummy_var_493 := install(in_$p34, out_$p509);
    goto corral_source_split_12664;

  corral_source_split_12662:
    assume {:verifier.code 0} true;
    out_$p509 := $M.82;
    goto corral_source_split_12663;

  $bb458:
    assume out_$i508 == 1;
    goto corral_source_split_12662;

  corral_source_split_12660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb458, $bb459;

  corral_source_split_12659:
    assume {:verifier.code 0} true;
    out_$i508 := $eq.i32(out_$i507, 3);
    goto corral_source_split_12660;

  $bb457:
    assume {:verifier.code 0} true;
    out_$i507 := $M.92;
    goto corral_source_split_12659;

  $bb456:
    assume !(out_$i504 == 1);
    assume {:verifier.code 0} true;
    goto $bb457;

  corral_source_split_12657:
    assume {:verifier.code 0} true;
    goto $bb457;

  corral_source_split_12656:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2193} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12657;

  corral_source_split_12655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2192} out_vslice_dummy_var_492 := install(in_$p34, out_$p505);
    goto corral_source_split_12656;

  corral_source_split_12654:
    assume {:verifier.code 0} true;
    out_$p505 := $M.82;
    goto corral_source_split_12655;

  $bb455:
    assume out_$i504 == 1;
    goto corral_source_split_12654;

  corral_source_split_12652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb455, $bb456;

  corral_source_split_12651:
    assume {:verifier.code 0} true;
    out_$i504 := $eq.i32(out_$i503, 1);
    goto corral_source_split_12652;

  $bb454:
    assume {:verifier.code 0} true;
    out_$i503 := $M.92;
    goto corral_source_split_12651;

  $bb453:
    assume !(out_$i500 == 1);
    assume {:verifier.code 0} true;
    goto $bb454;

  corral_source_split_12649:
    assume {:verifier.code 0} true;
    goto $bb454;

  corral_source_split_12648:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2191} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12649;

  corral_source_split_12647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2190} out_vslice_dummy_var_491 := install(in_$p34, out_$p501);
    goto corral_source_split_12648;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    out_$p501 := $M.82;
    goto corral_source_split_12647;

  $bb452:
    assume out_$i500 == 1;
    goto corral_source_split_12646;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb452, $bb453;

  corral_source_split_12218:
    assume {:verifier.code 0} true;
    out_$i500 := $eq.i32(out_$i499, 4);
    goto corral_source_split_12219;

  corral_source_split_12217:
    assume {:verifier.code 0} true;
    out_$i499 := $M.92;
    goto corral_source_split_12218;

  $bb290:
    assume !(out_$i290 == 1);
    goto corral_source_split_12217;

  $bb468:
    assume !(out_$i520 == 1);
    assume {:verifier.code 0} true;
    goto $bb469;

  corral_source_split_12686:
    assume {:verifier.code 0} true;
    goto $bb469;

  corral_source_split_12685:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2201} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12686;

  corral_source_split_12684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2200} tx_hold(out_$p521);
    goto corral_source_split_12685;

  corral_source_split_12683:
    assume {:verifier.code 0} true;
    out_$p521 := $M.82;
    goto corral_source_split_12684;

  $bb467:
    assume out_$i520 == 1;
    goto corral_source_split_12683;

  corral_source_split_12199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb467, $bb468;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    out_$i520 := $eq.i32(out_$i519, 5);
    goto corral_source_split_12199;

  corral_source_split_12197:
    assume {:verifier.code 0} true;
    out_$i519 := $M.92;
    goto corral_source_split_12198;

  $bb279:
    assume out_$i285 == 1;
    goto corral_source_split_12197;

  $bb273:
    assume out_$i282 == 1;
    assume {:verifier.code 0} true;
    out_$i285 := $slt.i32(out_$i272, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  $bb256:
    assume out_$i274 == 1;
    assume {:verifier.code 0} true;
    out_$i282 := $slt.i32(out_$i272, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb273, $bb274;

  $bb255:
    assume !(out_$i273 == 1);
    assume {:verifier.code 0} true;
    out_$i274 := $slt.i32(out_$i272, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  $bb483:
    assume !(out_$i547 == 1);
    assume {:verifier.code 0} true;
    goto $bb484;

  corral_source_split_12733:
    assume {:verifier.code 0} true;
    goto $bb484;

  corral_source_split_12732:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2211} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12733;

  corral_source_split_12731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2210} out_vslice_dummy_var_500 := tiocmset(out_$p548, out_$i549, out_$i550);
    goto corral_source_split_12732;

  corral_source_split_12730:
    assume {:verifier.code 0} true;
    out_$i550 := $load.i32($M.66, in_$p13);
    goto corral_source_split_12731;

  corral_source_split_12729:
    assume {:verifier.code 0} true;
    out_$i549 := $load.i32($M.66, in_$p7);
    goto corral_source_split_12730;

  corral_source_split_12728:
    assume {:verifier.code 0} true;
    out_$p548 := $M.82;
    goto corral_source_split_12729;

  $bb482:
    assume out_$i547 == 1;
    goto corral_source_split_12728;

  corral_source_split_12726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb482, $bb483;

  corral_source_split_12725:
    assume {:verifier.code 0} true;
    out_$i547 := $eq.i32(out_$i546, 5);
    goto corral_source_split_12726;

  $bb481:
    assume {:verifier.code 0} true;
    out_$i546 := $M.92;
    goto corral_source_split_12725;

  $bb480:
    assume !(out_$i541 == 1);
    assume {:verifier.code 0} true;
    goto $bb481;

  corral_source_split_12723:
    assume {:verifier.code 0} true;
    goto $bb481;

  corral_source_split_12722:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2209} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12723;

  corral_source_split_12721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2208} out_vslice_dummy_var_499 := tiocmset(out_$p542, out_$i543, out_$i544);
    goto corral_source_split_12722;

  corral_source_split_12720:
    assume {:verifier.code 0} true;
    out_$i544 := $load.i32($M.66, in_$p13);
    goto corral_source_split_12721;

  corral_source_split_12719:
    assume {:verifier.code 0} true;
    out_$i543 := $load.i32($M.66, in_$p7);
    goto corral_source_split_12720;

  corral_source_split_12718:
    assume {:verifier.code 0} true;
    out_$p542 := $M.82;
    goto corral_source_split_12719;

  $bb479:
    assume out_$i541 == 1;
    goto corral_source_split_12718;

  corral_source_split_12716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb479, $bb480;

  corral_source_split_12715:
    assume {:verifier.code 0} true;
    out_$i541 := $eq.i32(out_$i540, 2);
    goto corral_source_split_12716;

  $bb478:
    assume {:verifier.code 0} true;
    out_$i540 := $M.92;
    goto corral_source_split_12715;

  $bb477:
    assume !(out_$i535 == 1);
    assume {:verifier.code 0} true;
    goto $bb478;

  corral_source_split_12713:
    assume {:verifier.code 0} true;
    goto $bb478;

  corral_source_split_12712:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2207} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12713;

  corral_source_split_12711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2206} out_vslice_dummy_var_498 := tiocmset(out_$p536, out_$i537, out_$i538);
    goto corral_source_split_12712;

  corral_source_split_12710:
    assume {:verifier.code 0} true;
    out_$i538 := $load.i32($M.66, in_$p13);
    goto corral_source_split_12711;

  corral_source_split_12709:
    assume {:verifier.code 0} true;
    out_$i537 := $load.i32($M.66, in_$p7);
    goto corral_source_split_12710;

  corral_source_split_12708:
    assume {:verifier.code 0} true;
    out_$p536 := $M.82;
    goto corral_source_split_12709;

  $bb476:
    assume out_$i535 == 1;
    goto corral_source_split_12708;

  corral_source_split_12706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb476, $bb477;

  corral_source_split_12705:
    assume {:verifier.code 0} true;
    out_$i535 := $eq.i32(out_$i534, 3);
    goto corral_source_split_12706;

  $bb475:
    assume {:verifier.code 0} true;
    out_$i534 := $M.92;
    goto corral_source_split_12705;

  $bb474:
    assume !(out_$i529 == 1);
    assume {:verifier.code 0} true;
    goto $bb475;

  corral_source_split_12703:
    assume {:verifier.code 0} true;
    goto $bb475;

  corral_source_split_12702:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2205} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12703;

  corral_source_split_12701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2204} out_vslice_dummy_var_497 := tiocmset(out_$p530, out_$i531, out_$i532);
    goto corral_source_split_12702;

  corral_source_split_12700:
    assume {:verifier.code 0} true;
    out_$i532 := $load.i32($M.66, in_$p13);
    goto corral_source_split_12701;

  corral_source_split_12699:
    assume {:verifier.code 0} true;
    out_$i531 := $load.i32($M.66, in_$p7);
    goto corral_source_split_12700;

  corral_source_split_12698:
    assume {:verifier.code 0} true;
    out_$p530 := $M.82;
    goto corral_source_split_12699;

  $bb473:
    assume out_$i529 == 1;
    goto corral_source_split_12698;

  corral_source_split_12696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb473, $bb474;

  corral_source_split_12695:
    assume {:verifier.code 0} true;
    out_$i529 := $eq.i32(out_$i528, 1);
    goto corral_source_split_12696;

  $bb472:
    assume {:verifier.code 0} true;
    out_$i528 := $M.92;
    goto corral_source_split_12695;

  $bb471:
    assume !(out_$i523 == 1);
    assume {:verifier.code 0} true;
    goto $bb472;

  corral_source_split_12693:
    assume {:verifier.code 0} true;
    goto $bb472;

  corral_source_split_12692:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2203} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12693;

  corral_source_split_12691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2202} out_vslice_dummy_var_496 := tiocmset(out_$p524, out_$i525, out_$i526);
    goto corral_source_split_12692;

  corral_source_split_12690:
    assume {:verifier.code 0} true;
    out_$i526 := $load.i32($M.66, in_$p13);
    goto corral_source_split_12691;

  corral_source_split_12689:
    assume {:verifier.code 0} true;
    out_$i525 := $load.i32($M.66, in_$p7);
    goto corral_source_split_12690;

  corral_source_split_12688:
    assume {:verifier.code 0} true;
    out_$p524 := $M.82;
    goto corral_source_split_12689;

  $bb470:
    assume out_$i523 == 1;
    goto corral_source_split_12688;

  corral_source_split_12203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb470, $bb471;

  corral_source_split_12202:
    assume {:verifier.code 0} true;
    out_$i523 := $eq.i32(out_$i522, 4);
    goto corral_source_split_12203;

  corral_source_split_12201:
    assume {:verifier.code 0} true;
    out_$i522 := $M.92;
    goto corral_source_split_12202;

  $bb281:
    assume out_$i286 == 1;
    goto corral_source_split_12201;

  $bb280:
    assume !(out_$i285 == 1);
    assume {:verifier.code 0} true;
    out_$i286 := $slt.i32(out_$i272, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb486:
    assume !(out_$i553 == 1);
    assume {:verifier.code 0} true;
    goto $bb487;

  corral_source_split_12739:
    assume {:verifier.code 0} true;
    goto $bb487;

  corral_source_split_12738:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2213} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12739;

  corral_source_split_12737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2212} out_vslice_dummy_var_501 := write(out_$p554, in_$p30, out_$i555);
    goto corral_source_split_12738;

  corral_source_split_12736:
    assume {:verifier.code 0} true;
    out_$i555 := $load.i32($M.66, in_$p9);
    goto corral_source_split_12737;

  corral_source_split_12735:
    assume {:verifier.code 0} true;
    out_$p554 := $M.82;
    goto corral_source_split_12736;

  $bb485:
    assume out_$i553 == 1;
    goto corral_source_split_12735;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb485, $bb486;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    out_$i553 := $eq.i32(out_$i552, 5);
    goto corral_source_split_12207;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    out_$i552 := $M.92;
    goto corral_source_split_12206;

  $bb282:
    assume !(out_$i286 == 1);
    goto corral_source_split_12205;

  $bb489:
    assume !(out_$i558 == 1);
    assume {:verifier.code 0} true;
    goto $bb490;

  corral_source_split_12745:
    assume {:verifier.code 0} true;
    goto $bb490;

  corral_source_split_12744:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2215} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12745;

  corral_source_split_12743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2214} close(out_$p559, out_$p560);
    goto corral_source_split_12744;

  corral_source_split_12742:
    assume {:verifier.code 0} true;
    out_$p560 := $M.81;
    goto corral_source_split_12743;

  corral_source_split_12741:
    assume {:verifier.code 0} true;
    out_$p559 := $M.82;
    goto corral_source_split_12742;

  $bb488:
    assume out_$i558 == 1;
    goto corral_source_split_12741;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb488, $bb489;

  corral_source_split_12186:
    assume {:verifier.code 0} true;
    out_$i558 := $eq.i32(out_$i557, 3);
    goto corral_source_split_12187;

  corral_source_split_12185:
    assume {:verifier.code 0} true;
    out_$i557 := $M.92;
    goto corral_source_split_12186;

  $bb275:
    assume out_$i283 == 1;
    goto corral_source_split_12185;

  $bb274:
    assume !(out_$i282 == 1);
    assume {:verifier.code 0} true;
    out_$i283 := $slt.i32(out_$i272, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb504:
    assume !(out_$i578 == 1);
    assume {:verifier.code 0} true;
    goto $bb505;

  corral_source_split_12782:
    assume {:verifier.code 0} true;
    goto $bb505;

  corral_source_split_12781:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2225} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12782;

  corral_source_split_12780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2224} out_vslice_dummy_var_506 := write_room(out_$p579);
    goto corral_source_split_12781;

  corral_source_split_12779:
    assume {:verifier.code 0} true;
    out_$p579 := $M.82;
    goto corral_source_split_12780;

  $bb503:
    assume out_$i578 == 1;
    goto corral_source_split_12779;

  corral_source_split_12777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb503, $bb504;

  corral_source_split_12776:
    assume {:verifier.code 0} true;
    out_$i578 := $eq.i32(out_$i577, 5);
    goto corral_source_split_12777;

  $bb502:
    assume {:verifier.code 0} true;
    out_$i577 := $M.92;
    goto corral_source_split_12776;

  $bb501:
    assume !(out_$i574 == 1);
    assume {:verifier.code 0} true;
    goto $bb502;

  corral_source_split_12774:
    assume {:verifier.code 0} true;
    goto $bb502;

  corral_source_split_12773:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2223} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12774;

  corral_source_split_12772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2222} out_vslice_dummy_var_505 := write_room(out_$p575);
    goto corral_source_split_12773;

  corral_source_split_12771:
    assume {:verifier.code 0} true;
    out_$p575 := $M.82;
    goto corral_source_split_12772;

  $bb500:
    assume out_$i574 == 1;
    goto corral_source_split_12771;

  corral_source_split_12769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb500, $bb501;

  corral_source_split_12768:
    assume {:verifier.code 0} true;
    out_$i574 := $eq.i32(out_$i573, 2);
    goto corral_source_split_12769;

  $bb499:
    assume {:verifier.code 0} true;
    out_$i573 := $M.92;
    goto corral_source_split_12768;

  $bb498:
    assume !(out_$i570 == 1);
    assume {:verifier.code 0} true;
    goto $bb499;

  corral_source_split_12766:
    assume {:verifier.code 0} true;
    goto $bb499;

  corral_source_split_12765:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2221} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12766;

  corral_source_split_12764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} out_vslice_dummy_var_504 := write_room(out_$p571);
    goto corral_source_split_12765;

  corral_source_split_12763:
    assume {:verifier.code 0} true;
    out_$p571 := $M.82;
    goto corral_source_split_12764;

  $bb497:
    assume out_$i570 == 1;
    goto corral_source_split_12763;

  corral_source_split_12761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb497, $bb498;

  corral_source_split_12760:
    assume {:verifier.code 0} true;
    out_$i570 := $eq.i32(out_$i569, 3);
    goto corral_source_split_12761;

  $bb496:
    assume {:verifier.code 0} true;
    out_$i569 := $M.92;
    goto corral_source_split_12760;

  $bb495:
    assume !(out_$i566 == 1);
    assume {:verifier.code 0} true;
    goto $bb496;

  corral_source_split_12758:
    assume {:verifier.code 0} true;
    goto $bb496;

  corral_source_split_12757:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2219} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12758;

  corral_source_split_12756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2218} out_vslice_dummy_var_503 := write_room(out_$p567);
    goto corral_source_split_12757;

  corral_source_split_12755:
    assume {:verifier.code 0} true;
    out_$p567 := $M.82;
    goto corral_source_split_12756;

  $bb494:
    assume out_$i566 == 1;
    goto corral_source_split_12755;

  corral_source_split_12753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb494, $bb495;

  corral_source_split_12752:
    assume {:verifier.code 0} true;
    out_$i566 := $eq.i32(out_$i565, 1);
    goto corral_source_split_12753;

  $bb493:
    assume {:verifier.code 0} true;
    out_$i565 := $M.92;
    goto corral_source_split_12752;

  $bb492:
    assume !(out_$i562 == 1);
    assume {:verifier.code 0} true;
    goto $bb493;

  corral_source_split_12750:
    assume {:verifier.code 0} true;
    goto $bb493;

  corral_source_split_12749:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2217} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12750;

  corral_source_split_12748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2216} out_vslice_dummy_var_502 := write_room(out_$p563);
    goto corral_source_split_12749;

  corral_source_split_12747:
    assume {:verifier.code 0} true;
    out_$p563 := $M.82;
    goto corral_source_split_12748;

  $bb491:
    assume out_$i562 == 1;
    goto corral_source_split_12747;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb491, $bb492;

  corral_source_split_12190:
    assume {:verifier.code 0} true;
    out_$i562 := $eq.i32(out_$i561, 4);
    goto corral_source_split_12191;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    out_$i561 := $M.92;
    goto corral_source_split_12190;

  $bb277:
    assume out_$i284 == 1;
    goto corral_source_split_12189;

  $bb276:
    assume !(out_$i283 == 1);
    assume {:verifier.code 0} true;
    out_$i284 := $slt.i32(out_$i272, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  $bb519:
    assume !(out_$i602 == 1);
    assume {:verifier.code 0} true;
    goto $bb520;

  corral_source_split_12824:
    assume {:verifier.code 0} true;
    goto $bb520;

  corral_source_split_12823:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2235} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12824;

  corral_source_split_12822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2234} out_vslice_dummy_var_511 := set_break(out_$p603, out_$i604);
    goto corral_source_split_12823;

  corral_source_split_12821:
    assume {:verifier.code 0} true;
    out_$i604 := $load.i32($M.66, in_$p12);
    goto corral_source_split_12822;

  corral_source_split_12820:
    assume {:verifier.code 0} true;
    out_$p603 := $M.82;
    goto corral_source_split_12821;

  $bb518:
    assume out_$i602 == 1;
    goto corral_source_split_12820;

  corral_source_split_12818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb518, $bb519;

  corral_source_split_12817:
    assume {:verifier.code 0} true;
    out_$i602 := $eq.i32(out_$i601, 5);
    goto corral_source_split_12818;

  $bb517:
    assume {:verifier.code 0} true;
    out_$i601 := $M.92;
    goto corral_source_split_12817;

  $bb516:
    assume !(out_$i597 == 1);
    assume {:verifier.code 0} true;
    goto $bb517;

  corral_source_split_12815:
    assume {:verifier.code 0} true;
    goto $bb517;

  corral_source_split_12814:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2233} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12815;

  corral_source_split_12813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2232} out_vslice_dummy_var_510 := set_break(out_$p598, out_$i599);
    goto corral_source_split_12814;

  corral_source_split_12812:
    assume {:verifier.code 0} true;
    out_$i599 := $load.i32($M.66, in_$p12);
    goto corral_source_split_12813;

  corral_source_split_12811:
    assume {:verifier.code 0} true;
    out_$p598 := $M.82;
    goto corral_source_split_12812;

  $bb515:
    assume out_$i597 == 1;
    goto corral_source_split_12811;

  corral_source_split_12809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb515, $bb516;

  corral_source_split_12808:
    assume {:verifier.code 0} true;
    out_$i597 := $eq.i32(out_$i596, 2);
    goto corral_source_split_12809;

  $bb514:
    assume {:verifier.code 0} true;
    out_$i596 := $M.92;
    goto corral_source_split_12808;

  $bb513:
    assume !(out_$i592 == 1);
    assume {:verifier.code 0} true;
    goto $bb514;

  corral_source_split_12806:
    assume {:verifier.code 0} true;
    goto $bb514;

  corral_source_split_12805:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2231} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12806;

  corral_source_split_12804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2230} out_vslice_dummy_var_509 := set_break(out_$p593, out_$i594);
    goto corral_source_split_12805;

  corral_source_split_12803:
    assume {:verifier.code 0} true;
    out_$i594 := $load.i32($M.66, in_$p12);
    goto corral_source_split_12804;

  corral_source_split_12802:
    assume {:verifier.code 0} true;
    out_$p593 := $M.82;
    goto corral_source_split_12803;

  $bb512:
    assume out_$i592 == 1;
    goto corral_source_split_12802;

  corral_source_split_12800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb512, $bb513;

  corral_source_split_12799:
    assume {:verifier.code 0} true;
    out_$i592 := $eq.i32(out_$i591, 3);
    goto corral_source_split_12800;

  $bb511:
    assume {:verifier.code 0} true;
    out_$i591 := $M.92;
    goto corral_source_split_12799;

  $bb510:
    assume !(out_$i587 == 1);
    assume {:verifier.code 0} true;
    goto $bb511;

  corral_source_split_12797:
    assume {:verifier.code 0} true;
    goto $bb511;

  corral_source_split_12796:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2229} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12797;

  corral_source_split_12795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2228} out_vslice_dummy_var_508 := set_break(out_$p588, out_$i589);
    goto corral_source_split_12796;

  corral_source_split_12794:
    assume {:verifier.code 0} true;
    out_$i589 := $load.i32($M.66, in_$p12);
    goto corral_source_split_12795;

  corral_source_split_12793:
    assume {:verifier.code 0} true;
    out_$p588 := $M.82;
    goto corral_source_split_12794;

  $bb509:
    assume out_$i587 == 1;
    goto corral_source_split_12793;

  corral_source_split_12791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb509, $bb510;

  corral_source_split_12790:
    assume {:verifier.code 0} true;
    out_$i587 := $eq.i32(out_$i586, 1);
    goto corral_source_split_12791;

  $bb508:
    assume {:verifier.code 0} true;
    out_$i586 := $M.92;
    goto corral_source_split_12790;

  $bb507:
    assume !(out_$i582 == 1);
    assume {:verifier.code 0} true;
    goto $bb508;

  corral_source_split_12788:
    assume {:verifier.code 0} true;
    goto $bb508;

  corral_source_split_12787:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2227} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12788;

  corral_source_split_12786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2226} out_vslice_dummy_var_507 := set_break(out_$p583, out_$i584);
    goto corral_source_split_12787;

  corral_source_split_12785:
    assume {:verifier.code 0} true;
    out_$i584 := $load.i32($M.66, in_$p12);
    goto corral_source_split_12786;

  corral_source_split_12784:
    assume {:verifier.code 0} true;
    out_$p583 := $M.82;
    goto corral_source_split_12785;

  $bb506:
    assume out_$i582 == 1;
    goto corral_source_split_12784;

  corral_source_split_12195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb506, $bb507;

  corral_source_split_12194:
    assume {:verifier.code 0} true;
    out_$i582 := $eq.i32(out_$i581, 4);
    goto corral_source_split_12195;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    out_$i581 := $M.92;
    goto corral_source_split_12194;

  $bb278:
    assume !(out_$i284 == 1);
    goto corral_source_split_12193;

  $bb534:
    assume !(out_$i623 == 1);
    assume {:verifier.code 0} true;
    goto $bb535;

  corral_source_split_12861:
    assume {:verifier.code 0} true;
    goto $bb535;

  corral_source_split_12860:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2245} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12861;

  corral_source_split_12859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2244} out_vslice_dummy_var_516 := chars_in_buffer(out_$p624);
    goto corral_source_split_12860;

  corral_source_split_12858:
    assume {:verifier.code 0} true;
    out_$p624 := $M.82;
    goto corral_source_split_12859;

  $bb533:
    assume out_$i623 == 1;
    goto corral_source_split_12858;

  corral_source_split_12856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb533, $bb534;

  corral_source_split_12855:
    assume {:verifier.code 0} true;
    out_$i623 := $eq.i32(out_$i622, 5);
    goto corral_source_split_12856;

  $bb532:
    assume {:verifier.code 0} true;
    out_$i622 := $M.92;
    goto corral_source_split_12855;

  $bb531:
    assume !(out_$i619 == 1);
    assume {:verifier.code 0} true;
    goto $bb532;

  corral_source_split_12853:
    assume {:verifier.code 0} true;
    goto $bb532;

  corral_source_split_12852:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2243} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12853;

  corral_source_split_12851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2242} out_vslice_dummy_var_515 := chars_in_buffer(out_$p620);
    goto corral_source_split_12852;

  corral_source_split_12850:
    assume {:verifier.code 0} true;
    out_$p620 := $M.82;
    goto corral_source_split_12851;

  $bb530:
    assume out_$i619 == 1;
    goto corral_source_split_12850;

  corral_source_split_12848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb530, $bb531;

  corral_source_split_12847:
    assume {:verifier.code 0} true;
    out_$i619 := $eq.i32(out_$i618, 2);
    goto corral_source_split_12848;

  $bb529:
    assume {:verifier.code 0} true;
    out_$i618 := $M.92;
    goto corral_source_split_12847;

  $bb528:
    assume !(out_$i615 == 1);
    assume {:verifier.code 0} true;
    goto $bb529;

  corral_source_split_12845:
    assume {:verifier.code 0} true;
    goto $bb529;

  corral_source_split_12844:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2241} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12845;

  corral_source_split_12843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2240} out_vslice_dummy_var_514 := chars_in_buffer(out_$p616);
    goto corral_source_split_12844;

  corral_source_split_12842:
    assume {:verifier.code 0} true;
    out_$p616 := $M.82;
    goto corral_source_split_12843;

  $bb527:
    assume out_$i615 == 1;
    goto corral_source_split_12842;

  corral_source_split_12840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb527, $bb528;

  corral_source_split_12839:
    assume {:verifier.code 0} true;
    out_$i615 := $eq.i32(out_$i614, 3);
    goto corral_source_split_12840;

  $bb526:
    assume {:verifier.code 0} true;
    out_$i614 := $M.92;
    goto corral_source_split_12839;

  $bb525:
    assume !(out_$i611 == 1);
    assume {:verifier.code 0} true;
    goto $bb526;

  corral_source_split_12837:
    assume {:verifier.code 0} true;
    goto $bb526;

  corral_source_split_12836:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2239} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12837;

  corral_source_split_12835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2238} out_vslice_dummy_var_513 := chars_in_buffer(out_$p612);
    goto corral_source_split_12836;

  corral_source_split_12834:
    assume {:verifier.code 0} true;
    out_$p612 := $M.82;
    goto corral_source_split_12835;

  $bb524:
    assume out_$i611 == 1;
    goto corral_source_split_12834;

  corral_source_split_12832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb524, $bb525;

  corral_source_split_12831:
    assume {:verifier.code 0} true;
    out_$i611 := $eq.i32(out_$i610, 1);
    goto corral_source_split_12832;

  $bb523:
    assume {:verifier.code 0} true;
    out_$i610 := $M.92;
    goto corral_source_split_12831;

  $bb522:
    assume !(out_$i607 == 1);
    assume {:verifier.code 0} true;
    goto $bb523;

  corral_source_split_12829:
    assume {:verifier.code 0} true;
    goto $bb523;

  corral_source_split_12828:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2237} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12829;

  corral_source_split_12827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2236} out_vslice_dummy_var_512 := chars_in_buffer(out_$p608);
    goto corral_source_split_12828;

  corral_source_split_12826:
    assume {:verifier.code 0} true;
    out_$p608 := $M.82;
    goto corral_source_split_12827;

  $bb521:
    assume out_$i607 == 1;
    goto corral_source_split_12826;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb521, $bb522;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    out_$i607 := $eq.i32(out_$i606, 4);
    goto corral_source_split_12175;

  corral_source_split_12173:
    assume {:verifier.code 0} true;
    out_$i606 := $M.92;
    goto corral_source_split_12174;

  $bb269:
    assume out_$i280 == 1;
    goto corral_source_split_12173;

  $bb258:
    assume out_$i275 == 1;
    assume {:verifier.code 0} true;
    out_$i280 := $slt.i32(out_$i272, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb257:
    assume !(out_$i274 == 1);
    assume {:verifier.code 0} true;
    out_$i275 := $slt.i32(out_$i272, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  $bb549:
    assume !(out_$i643 == 1);
    assume {:verifier.code 0} true;
    goto $bb550;

  corral_source_split_12898:
    assume {:verifier.code 0} true;
    goto $bb550;

  corral_source_split_12897:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2255} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12898;

  corral_source_split_12896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} out_vslice_dummy_var_521 := tiocmget(out_$p644);
    goto corral_source_split_12897;

  corral_source_split_12895:
    assume {:verifier.code 0} true;
    out_$p644 := $M.82;
    goto corral_source_split_12896;

  $bb548:
    assume out_$i643 == 1;
    goto corral_source_split_12895;

  corral_source_split_12893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb548, $bb549;

  corral_source_split_12892:
    assume {:verifier.code 0} true;
    out_$i643 := $eq.i32(out_$i642, 5);
    goto corral_source_split_12893;

  $bb547:
    assume {:verifier.code 0} true;
    out_$i642 := $M.92;
    goto corral_source_split_12892;

  $bb546:
    assume !(out_$i639 == 1);
    assume {:verifier.code 0} true;
    goto $bb547;

  corral_source_split_12890:
    assume {:verifier.code 0} true;
    goto $bb547;

  corral_source_split_12889:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2253} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12890;

  corral_source_split_12888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2252} out_vslice_dummy_var_520 := tiocmget(out_$p640);
    goto corral_source_split_12889;

  corral_source_split_12887:
    assume {:verifier.code 0} true;
    out_$p640 := $M.82;
    goto corral_source_split_12888;

  $bb545:
    assume out_$i639 == 1;
    goto corral_source_split_12887;

  corral_source_split_12885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb545, $bb546;

  corral_source_split_12884:
    assume {:verifier.code 0} true;
    out_$i639 := $eq.i32(out_$i638, 2);
    goto corral_source_split_12885;

  $bb544:
    assume {:verifier.code 0} true;
    out_$i638 := $M.92;
    goto corral_source_split_12884;

  $bb543:
    assume !(out_$i635 == 1);
    assume {:verifier.code 0} true;
    goto $bb544;

  corral_source_split_12882:
    assume {:verifier.code 0} true;
    goto $bb544;

  corral_source_split_12881:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2251} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12882;

  corral_source_split_12880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2250} out_vslice_dummy_var_519 := tiocmget(out_$p636);
    goto corral_source_split_12881;

  corral_source_split_12879:
    assume {:verifier.code 0} true;
    out_$p636 := $M.82;
    goto corral_source_split_12880;

  $bb542:
    assume out_$i635 == 1;
    goto corral_source_split_12879;

  corral_source_split_12877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb542, $bb543;

  corral_source_split_12876:
    assume {:verifier.code 0} true;
    out_$i635 := $eq.i32(out_$i634, 3);
    goto corral_source_split_12877;

  $bb541:
    assume {:verifier.code 0} true;
    out_$i634 := $M.92;
    goto corral_source_split_12876;

  $bb540:
    assume !(out_$i631 == 1);
    assume {:verifier.code 0} true;
    goto $bb541;

  corral_source_split_12874:
    assume {:verifier.code 0} true;
    goto $bb541;

  corral_source_split_12873:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2249} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12874;

  corral_source_split_12872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} out_vslice_dummy_var_518 := tiocmget(out_$p632);
    goto corral_source_split_12873;

  corral_source_split_12871:
    assume {:verifier.code 0} true;
    out_$p632 := $M.82;
    goto corral_source_split_12872;

  $bb539:
    assume out_$i631 == 1;
    goto corral_source_split_12871;

  corral_source_split_12869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb539, $bb540;

  corral_source_split_12868:
    assume {:verifier.code 0} true;
    out_$i631 := $eq.i32(out_$i630, 1);
    goto corral_source_split_12869;

  $bb538:
    assume {:verifier.code 0} true;
    out_$i630 := $M.92;
    goto corral_source_split_12868;

  $bb537:
    assume !(out_$i627 == 1);
    assume {:verifier.code 0} true;
    goto $bb538;

  corral_source_split_12866:
    assume {:verifier.code 0} true;
    goto $bb538;

  corral_source_split_12865:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2247} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12866;

  corral_source_split_12864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2246} out_vslice_dummy_var_517 := tiocmget(out_$p628);
    goto corral_source_split_12865;

  corral_source_split_12863:
    assume {:verifier.code 0} true;
    out_$p628 := $M.82;
    goto corral_source_split_12864;

  $bb536:
    assume out_$i627 == 1;
    goto corral_source_split_12863;

  corral_source_split_12179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb536, $bb537;

  corral_source_split_12178:
    assume {:verifier.code 0} true;
    out_$i627 := $eq.i32(out_$i626, 4);
    goto corral_source_split_12179;

  corral_source_split_12177:
    assume {:verifier.code 0} true;
    out_$i626 := $M.92;
    goto corral_source_split_12178;

  $bb271:
    assume out_$i281 == 1;
    goto corral_source_split_12177;

  $bb270:
    assume !(out_$i280 == 1);
    assume {:verifier.code 0} true;
    out_$i281 := $slt.i32(out_$i272, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  $bb564:
    assume !(out_$i659 == 1);
    assume {:verifier.code 0} true;
    goto $bb565;

  corral_source_split_12935:
    assume {:verifier.code 0} true;
    goto $bb565;

  corral_source_split_12934:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2265} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12935;

  corral_source_split_12933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} flush_chars(out_$p660);
    goto corral_source_split_12934;

  corral_source_split_12932:
    assume {:verifier.code 0} true;
    out_$p660 := $M.82;
    goto corral_source_split_12933;

  $bb563:
    assume out_$i659 == 1;
    goto corral_source_split_12932;

  corral_source_split_12930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb563, $bb564;

  corral_source_split_12929:
    assume {:verifier.code 0} true;
    out_$i659 := $eq.i32(out_$i658, 5);
    goto corral_source_split_12930;

  $bb562:
    assume {:verifier.code 0} true;
    out_$i658 := $M.92;
    goto corral_source_split_12929;

  $bb561:
    assume !(out_$i656 == 1);
    assume {:verifier.code 0} true;
    goto $bb562;

  corral_source_split_12927:
    assume {:verifier.code 0} true;
    goto $bb562;

  corral_source_split_12926:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2263} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12927;

  corral_source_split_12925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2262} flush_chars(out_$p657);
    goto corral_source_split_12926;

  corral_source_split_12924:
    assume {:verifier.code 0} true;
    out_$p657 := $M.82;
    goto corral_source_split_12925;

  $bb560:
    assume out_$i656 == 1;
    goto corral_source_split_12924;

  corral_source_split_12922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb560, $bb561;

  corral_source_split_12921:
    assume {:verifier.code 0} true;
    out_$i656 := $eq.i32(out_$i655, 2);
    goto corral_source_split_12922;

  $bb559:
    assume {:verifier.code 0} true;
    out_$i655 := $M.92;
    goto corral_source_split_12921;

  $bb558:
    assume !(out_$i653 == 1);
    assume {:verifier.code 0} true;
    goto $bb559;

  corral_source_split_12919:
    assume {:verifier.code 0} true;
    goto $bb559;

  corral_source_split_12918:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2261} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12919;

  corral_source_split_12917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2260} flush_chars(out_$p654);
    goto corral_source_split_12918;

  corral_source_split_12916:
    assume {:verifier.code 0} true;
    out_$p654 := $M.82;
    goto corral_source_split_12917;

  $bb557:
    assume out_$i653 == 1;
    goto corral_source_split_12916;

  corral_source_split_12914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb557, $bb558;

  corral_source_split_12913:
    assume {:verifier.code 0} true;
    out_$i653 := $eq.i32(out_$i652, 3);
    goto corral_source_split_12914;

  $bb556:
    assume {:verifier.code 0} true;
    out_$i652 := $M.92;
    goto corral_source_split_12913;

  $bb555:
    assume !(out_$i650 == 1);
    assume {:verifier.code 0} true;
    goto $bb556;

  corral_source_split_12911:
    assume {:verifier.code 0} true;
    goto $bb556;

  corral_source_split_12910:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2259} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12911;

  corral_source_split_12909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2258} flush_chars(out_$p651);
    goto corral_source_split_12910;

  corral_source_split_12908:
    assume {:verifier.code 0} true;
    out_$p651 := $M.82;
    goto corral_source_split_12909;

  $bb554:
    assume out_$i650 == 1;
    goto corral_source_split_12908;

  corral_source_split_12906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb554, $bb555;

  corral_source_split_12905:
    assume {:verifier.code 0} true;
    out_$i650 := $eq.i32(out_$i649, 1);
    goto corral_source_split_12906;

  $bb553:
    assume {:verifier.code 0} true;
    out_$i649 := $M.92;
    goto corral_source_split_12905;

  $bb552:
    assume !(out_$i647 == 1);
    assume {:verifier.code 0} true;
    goto $bb553;

  corral_source_split_12903:
    assume {:verifier.code 0} true;
    goto $bb553;

  corral_source_split_12902:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2257} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12903;

  corral_source_split_12901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2256} flush_chars(out_$p648);
    goto corral_source_split_12902;

  corral_source_split_12900:
    assume {:verifier.code 0} true;
    out_$p648 := $M.82;
    goto corral_source_split_12901;

  $bb551:
    assume out_$i647 == 1;
    goto corral_source_split_12900;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb551, $bb552;

  corral_source_split_12182:
    assume {:verifier.code 0} true;
    out_$i647 := $eq.i32(out_$i646, 4);
    goto corral_source_split_12183;

  corral_source_split_12181:
    assume {:verifier.code 0} true;
    out_$i646 := $M.92;
    goto corral_source_split_12182;

  $bb272:
    assume !(out_$i281 == 1);
    goto corral_source_split_12181;

  $bb579:
    assume !(out_$i678 == 1);
    assume {:verifier.code 0} true;
    goto $bb580;

  corral_source_split_12977:
    assume {:verifier.code 0} true;
    goto $bb580;

  corral_source_split_12976:
    assume {:verifier.code 0} true;
    $M.92 := 5;
    call {:si_unique_call 2275} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_12977;

  corral_source_split_12975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} wait_until_sent(out_$p679, out_$i680);
    goto corral_source_split_12976;

  corral_source_split_12974:
    assume {:verifier.code 0} true;
    out_$i680 := $load.i32($M.66, in_$p14);
    goto corral_source_split_12975;

  corral_source_split_12973:
    assume {:verifier.code 0} true;
    out_$p679 := $M.82;
    goto corral_source_split_12974;

  $bb578:
    assume out_$i678 == 1;
    goto corral_source_split_12973;

  corral_source_split_12971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb578, $bb579;

  corral_source_split_12970:
    assume {:verifier.code 0} true;
    out_$i678 := $eq.i32(out_$i677, 5);
    goto corral_source_split_12971;

  $bb577:
    assume {:verifier.code 0} true;
    out_$i677 := $M.92;
    goto corral_source_split_12970;

  $bb576:
    assume !(out_$i674 == 1);
    assume {:verifier.code 0} true;
    goto $bb577;

  corral_source_split_12968:
    assume {:verifier.code 0} true;
    goto $bb577;

  corral_source_split_12967:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2273} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12968;

  corral_source_split_12966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} wait_until_sent(out_$p675, out_$i676);
    goto corral_source_split_12967;

  corral_source_split_12965:
    assume {:verifier.code 0} true;
    out_$i676 := $load.i32($M.66, in_$p14);
    goto corral_source_split_12966;

  corral_source_split_12964:
    assume {:verifier.code 0} true;
    out_$p675 := $M.82;
    goto corral_source_split_12965;

  $bb575:
    assume out_$i674 == 1;
    goto corral_source_split_12964;

  corral_source_split_12962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb575, $bb576;

  corral_source_split_12961:
    assume {:verifier.code 0} true;
    out_$i674 := $eq.i32(out_$i673, 2);
    goto corral_source_split_12962;

  $bb574:
    assume {:verifier.code 0} true;
    out_$i673 := $M.92;
    goto corral_source_split_12961;

  $bb573:
    assume !(out_$i670 == 1);
    assume {:verifier.code 0} true;
    goto $bb574;

  corral_source_split_12959:
    assume {:verifier.code 0} true;
    goto $bb574;

  corral_source_split_12958:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2271} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_12959;

  corral_source_split_12957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2270} wait_until_sent(out_$p671, out_$i672);
    goto corral_source_split_12958;

  corral_source_split_12956:
    assume {:verifier.code 0} true;
    out_$i672 := $load.i32($M.66, in_$p14);
    goto corral_source_split_12957;

  corral_source_split_12955:
    assume {:verifier.code 0} true;
    out_$p671 := $M.82;
    goto corral_source_split_12956;

  $bb572:
    assume out_$i670 == 1;
    goto corral_source_split_12955;

  corral_source_split_12953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb572, $bb573;

  corral_source_split_12952:
    assume {:verifier.code 0} true;
    out_$i670 := $eq.i32(out_$i669, 3);
    goto corral_source_split_12953;

  $bb571:
    assume {:verifier.code 0} true;
    out_$i669 := $M.92;
    goto corral_source_split_12952;

  $bb570:
    assume !(out_$i666 == 1);
    assume {:verifier.code 0} true;
    goto $bb571;

  corral_source_split_12950:
    assume {:verifier.code 0} true;
    goto $bb571;

  corral_source_split_12949:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2269} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12950;

  corral_source_split_12948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2268} wait_until_sent(out_$p667, out_$i668);
    goto corral_source_split_12949;

  corral_source_split_12947:
    assume {:verifier.code 0} true;
    out_$i668 := $load.i32($M.66, in_$p14);
    goto corral_source_split_12948;

  corral_source_split_12946:
    assume {:verifier.code 0} true;
    out_$p667 := $M.82;
    goto corral_source_split_12947;

  $bb569:
    assume out_$i666 == 1;
    goto corral_source_split_12946;

  corral_source_split_12944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb569, $bb570;

  corral_source_split_12943:
    assume {:verifier.code 0} true;
    out_$i666 := $eq.i32(out_$i665, 1);
    goto corral_source_split_12944;

  $bb568:
    assume {:verifier.code 0} true;
    out_$i665 := $M.92;
    goto corral_source_split_12943;

  $bb567:
    assume !(out_$i662 == 1);
    assume {:verifier.code 0} true;
    goto $bb568;

  corral_source_split_12941:
    assume {:verifier.code 0} true;
    goto $bb568;

  corral_source_split_12940:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2267} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12941;

  corral_source_split_12939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} wait_until_sent(out_$p663, out_$i664);
    goto corral_source_split_12940;

  corral_source_split_12938:
    assume {:verifier.code 0} true;
    out_$i664 := $load.i32($M.66, in_$p14);
    goto corral_source_split_12939;

  corral_source_split_12937:
    assume {:verifier.code 0} true;
    out_$p663 := $M.82;
    goto corral_source_split_12938;

  $bb566:
    assume out_$i662 == 1;
    goto corral_source_split_12937;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb566, $bb567;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    out_$i662 := $eq.i32(out_$i661, 4);
    goto corral_source_split_12167;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    out_$i661 := $M.92;
    goto corral_source_split_12166;

  $bb267:
    assume out_$i279 == 1;
    goto corral_source_split_12165;

  $bb260:
    assume out_$i276 == 1;
    assume {:verifier.code 0} true;
    out_$i279 := $slt.i32(out_$i272, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  $bb259:
    assume !(out_$i275 == 1);
    assume {:verifier.code 0} true;
    out_$i276 := $slt.i32(out_$i272, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb588:
    assume !(out_$i688 == 1);
    assume {:verifier.code 0} true;
    goto $bb589;

  corral_source_split_12995:
    assume {:verifier.code 0} true;
    goto $bb589;

  corral_source_split_12994:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2281} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12995;

  corral_source_split_12993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2280} out_vslice_dummy_var_524 := ldv_disconnect_5();
    goto corral_source_split_12994;

  $bb587:
    assume out_$i688 == 1;
    goto corral_source_split_12993;

  corral_source_split_12991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb587, $bb588;

  corral_source_split_12990:
    assume {:verifier.code 0} true;
    out_$i688 := $eq.i32(out_$i687, 5);
    goto corral_source_split_12991;

  $bb586:
    assume {:verifier.code 0} true;
    out_$i687 := $M.92;
    goto corral_source_split_12990;

  $bb585:
    assume !(out_$i685 == 1);
    assume {:verifier.code 0} true;
    goto $bb586;

  corral_source_split_12988:
    assume {:verifier.code 0} true;
    goto $bb586;

  corral_source_split_12987:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2279} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12988;

  corral_source_split_12986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2278} out_vslice_dummy_var_523 := ldv_disconnect_5();
    goto corral_source_split_12987;

  $bb584:
    assume out_$i685 == 1;
    goto corral_source_split_12986;

  corral_source_split_12984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb584, $bb585;

  corral_source_split_12983:
    assume {:verifier.code 0} true;
    out_$i685 := $eq.i32(out_$i684, 2);
    goto corral_source_split_12984;

  $bb583:
    assume {:verifier.code 0} true;
    out_$i684 := $M.92;
    goto corral_source_split_12983;

  $bb582:
    assume !(out_$i682 == 1);
    assume {:verifier.code 0} true;
    goto $bb583;

  corral_source_split_12981:
    assume {:verifier.code 0} true;
    goto $bb583;

  corral_source_split_12980:
    assume {:verifier.code 0} true;
    $M.92 := 4;
    call {:si_unique_call 2277} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_12981;

  corral_source_split_12979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2276} out_vslice_dummy_var_522 := ldv_disconnect_5();
    goto corral_source_split_12980;

  $bb581:
    assume out_$i682 == 1;
    goto corral_source_split_12979;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb581, $bb582;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    out_$i682 := $eq.i32(out_$i681, 3);
    goto corral_source_split_12171;

  corral_source_split_12169:
    assume {:verifier.code 0} true;
    out_$i681 := $M.92;
    goto corral_source_split_12170;

  $bb268:
    assume !(out_$i279 == 1);
    goto corral_source_split_12169;

  $bb591:
    assume !(out_$i691 == 1);
    assume {:verifier.code 0} true;
    goto $bb592;

  corral_source_split_13002:
    assume {:verifier.code 0} true;
    goto $bb592;

  corral_source_split_13001:
    assume {:verifier.code 0} true;
    $M.90 := out_$i694;
    call {:si_unique_call 2284} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i694);
    goto corral_source_split_13002;

  corral_source_split_13000:
    assume {:verifier.code 0} true;
    out_$i694 := $sub.i32(out_$i693, 1);
    goto corral_source_split_13001;

  corral_source_split_12999:
    assume {:verifier.code 0} true;
    out_$i693 := $M.90;
    goto corral_source_split_13000;

  corral_source_split_12998:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2283} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12999;

  corral_source_split_12997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2282} out_vslice_dummy_var_525 := ldv_release_5();
    goto corral_source_split_12998;

  $bb590:
    assume out_$i691 == 1;
    goto corral_source_split_12997;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb590, $bb591;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    out_$i691 := $eq.i32(out_$i690, 4);
    goto corral_source_split_12159;

  corral_source_split_12157:
    assume {:verifier.code 0} true;
    out_$i690 := $M.92;
    goto corral_source_split_12158;

  $bb262:
    assume out_$i277 == 1;
    goto corral_source_split_12157;

  $bb261:
    assume !(out_$i276 == 1);
    assume {:verifier.code 0} true;
    out_$i277 := $slt.i32(out_$i272, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  $bb594:
    assume !(out_$i696 == 1);
    assume {:verifier.code 0} true;
    goto $bb595;

  corral_source_split_13009:
    assume {:verifier.code 0} true;
    goto $bb595;

  corral_source_split_13008:
    assume {:verifier.code 0} true;
    $M.90 := out_$i699;
    call {:si_unique_call 2287} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i699);
    goto corral_source_split_13009;

  corral_source_split_13007:
    assume {:verifier.code 0} true;
    out_$i699 := $add.i32(out_$i698, 1);
    goto corral_source_split_13008;

  corral_source_split_13006:
    assume {:verifier.code 0} true;
    out_$i698 := $M.90;
    goto corral_source_split_13007;

  corral_source_split_13005:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2286} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_13006;

  corral_source_split_13004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2285} out_vslice_dummy_var_526 := ldv_setup_5();
    goto corral_source_split_13005;

  $bb593:
    assume out_$i696 == 1;
    goto corral_source_split_13004;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb593, $bb594;

  corral_source_split_12162:
    assume {:verifier.code 0} true;
    out_$i696 := $eq.i32(out_$i695, 1);
    goto corral_source_split_12163;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    out_$i695 := $M.92;
    goto corral_source_split_12162;

  $bb264:
    assume out_$i278 == 1;
    goto corral_source_split_12161;

  $bb263:
    assume !(out_$i277 == 1);
    assume {:verifier.code 0} true;
    out_$i278 := $eq.i32(out_$i272, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  corral_source_split_13011:
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2288} ldv_stop();
    goto corral_source_split_13011;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb265:
    assume {:verifier.code 0} true;
    assume !(out_$i278 == 1);
    goto $bb266;

  $bb306:
    assume {:verifier.code 0} true;
    assume !(out_$i298 == 1);
    goto $bb266;

  corral_source_split_13013:
    assume {:verifier.code 0} true;
    goto $bb600;

  $bb599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2289} ldv_stop();
    goto corral_source_split_13013;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i68 == 1);
    goto $bb13;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i74 == 1);
    goto $bb13;

  $bb76_dummy:
    call {:si_unique_call 1} out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i87, out_$i88, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i135, out_$i136, out_$p137, out_$i138, out_$i140, out_$i141, out_$p142, out_$i143, out_$i145, out_$i146, out_$p147, out_$i148, out_$i150, out_$i151, out_$p152, out_$i153, out_$i155, out_$i156, out_$p157, out_$i158, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p168, out_$i170, out_$i171, out_$p172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$p200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$p208, out_$i209, out_$i210, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$p224, out_$p225, out_$i227, out_$i228, out_$i229, out_$i230, out_$p231, out_$i232, out_$i234, out_$i235, out_$p236, out_$i237, out_$i238, out_$i240, out_$i241, out_$p242, out_$p243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$p301, out_$i302, out_$i303, out_$p304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$p310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$p316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$p322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$p328, out_$i329, out_$i330, out_$i331, out_$i332, out_$i333, out_$p334, out_$i335, out_$i336, out_$i337, out_$i339, out_$i340, out_$p341, out_$i342, out_$i343, out_$i344, out_$i346, out_$i347, out_$p348, out_$i349, out_$i350, out_$i351, out_$i353, out_$i354, out_$p355, out_$i356, out_$i357, out_$i358, out_$i360, out_$i361, out_$p362, out_$i363, out_$i364, out_$i365, out_$i367, out_$i368, out_$p369, out_$i370, out_$i371, out_$p372, out_$i373, out_$i374, out_$p375, out_$i376, out_$i377, out_$p378, out_$i379, out_$i380, out_$p381, out_$i382, out_$i383, out_$p384, out_$i386, out_$i387, out_$p388, out_$i390, out_$i391, out_$p392, out_$i394, out_$i395, out_$p396, out_$i398, out_$i399, out_$p400, out_$i402, out_$i403, out_$p404, out_$i405, out_$i406, out_$p407, out_$i408, out_$i409, out_$p410, out_$i411, out_$i412, out_$p413, out_$i414, out_$i415, out_$p416, out_$i417, out_$i418, out_$p419, out_$i420, out_$i421, out_$p422, out_$i423, out_$i424, out_$p425, out_$i426, out_$i427, out_$p428, out_$i429, out_$i430, out_$p431, out_$i432, out_$i433, out_$p434, out_$p435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$p441, out_$i442, out_$i443, out_$p444, out_$i445, out_$i446, out_$p447, out_$i448, out_$i449, out_$p450, out_$i451, out_$i452, out_$p453, out_$i454, out_$i455, out_$p456, out_$i457, out_$i458, out_$p459, out_$i460, out_$i461, out_$p462, out_$i463, out_$i464, out_$p465, out_$i466, out_$i467, out_$p468, out_$i469, out_$i470, out_$p471, out_$i472, out_$i473, out_$i475, out_$i476, out_$p477, out_$i478, out_$i479, out_$i481, out_$i482, out_$p483, out_$i484, out_$i485, out_$i487, out_$i488, out_$p489, out_$i490, out_$i491, out_$i493, out_$i494, out_$p495, out_$i496, out_$i497, out_$i499, out_$i500, out_$p501, out_$i503, out_$i504, out_$p505, out_$i507, out_$i508, out_$p509, out_$i511, out_$i512, out_$p513, out_$i515, out_$i516, out_$p517, out_$i519, out_$i520, out_$p521, out_$i522, out_$i523, out_$p524, out_$i525, out_$i526, out_$i528, out_$i529, out_$p530, out_$i531, out_$i532, out_$i534, out_$i535, out_$p536, out_$i537, out_$i538, out_$i540, out_$i541, out_$p542, out_$i543, out_$i544, out_$i546, out_$i547, out_$p548, out_$i549, out_$i550, out_$i552, out_$i553, out_$p554, out_$i555, out_$i557, out_$i558, out_$p559, out_$p560, out_$i561, out_$i562, out_$p563, out_$i565, out_$i566, out_$p567, out_$i569, out_$i570, out_$p571, out_$i573, out_$i574, out_$p575, out_$i577, out_$i578, out_$p579, out_$i581, out_$i582, out_$p583, out_$i584, out_$i586, out_$i587, out_$p588, out_$i589, out_$i591, out_$i592, out_$p593, out_$i594, out_$i596, out_$i597, out_$p598, out_$i599, out_$i601, out_$i602, out_$p603, out_$i604, out_$i606, out_$i607, out_$p608, out_$i610, out_$i611, out_$p612, out_$i614, out_$i615, out_$p616, out_$i618, out_$i619, out_$p620, out_$i622, out_$i623, out_$p624, out_$i626, out_$i627, out_$p628, out_$i630, out_$i631, out_$p632, out_$i634, out_$i635, out_$p636, out_$i638, out_$i639, out_$p640, out_$i642, out_$i643, out_$p644, out_$i646, out_$i647, out_$p648, out_$i649, out_$i650, out_$p651, out_$i652, out_$i653, out_$p654, out_$i655, out_$i656, out_$p657, out_$i658, out_$i659, out_$p660, out_$i661, out_$i662, out_$p663, out_$i664, out_$i665, out_$i666, out_$p667, out_$i668, out_$i669, out_$i670, out_$p671, out_$i672, out_$i673, out_$i674, out_$p675, out_$i676, out_$i677, out_$i678, out_$p679, out_$i680, out_$i681, out_$i682, out_$i684, out_$i685, out_$i687, out_$i688, out_$i690, out_$i691, out_$i693, out_$i694, out_$i695, out_$i696, out_$i698, out_$i699, out_vslice_dummy_var_459, out_vslice_dummy_var_460, out_vslice_dummy_var_461, out_vslice_dummy_var_462, out_vslice_dummy_var_463, out_vslice_dummy_var_464, out_vslice_dummy_var_465, out_vslice_dummy_var_466, out_vslice_dummy_var_467, out_vslice_dummy_var_468, out_vslice_dummy_var_469, out_vslice_dummy_var_470, out_vslice_dummy_var_471, out_vslice_dummy_var_472, out_vslice_dummy_var_473, out_vslice_dummy_var_474, out_vslice_dummy_var_475, out_vslice_dummy_var_476, out_vslice_dummy_var_477, out_vslice_dummy_var_478, out_vslice_dummy_var_479, out_vslice_dummy_var_480, out_vslice_dummy_var_481, out_vslice_dummy_var_482, out_vslice_dummy_var_483, out_vslice_dummy_var_484, out_vslice_dummy_var_485, out_vslice_dummy_var_486, out_vslice_dummy_var_487, out_vslice_dummy_var_488, out_vslice_dummy_var_489, out_vslice_dummy_var_490, out_vslice_dummy_var_491, out_vslice_dummy_var_492, out_vslice_dummy_var_493, out_vslice_dummy_var_494, out_vslice_dummy_var_495, out_vslice_dummy_var_496, out_vslice_dummy_var_497, out_vslice_dummy_var_498, out_vslice_dummy_var_499, out_vslice_dummy_var_500, out_vslice_dummy_var_501, out_vslice_dummy_var_502, out_vslice_dummy_var_503, out_vslice_dummy_var_504, out_vslice_dummy_var_505, out_vslice_dummy_var_506, out_vslice_dummy_var_507, out_vslice_dummy_var_508, out_vslice_dummy_var_509, out_vslice_dummy_var_510, out_vslice_dummy_var_511, out_vslice_dummy_var_512, out_vslice_dummy_var_513, out_vslice_dummy_var_514, out_vslice_dummy_var_515, out_vslice_dummy_var_516, out_vslice_dummy_var_517, out_vslice_dummy_var_518, out_vslice_dummy_var_519, out_vslice_dummy_var_520, out_vslice_dummy_var_521, out_vslice_dummy_var_522, out_vslice_dummy_var_523, out_vslice_dummy_var_524, out_vslice_dummy_var_525, out_vslice_dummy_var_526 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p16, in_$p18, in_$p20, in_$p22, in_$p24, in_$p26, in_$p27, in_$p29, in_$p30, in_$p32, in_$p34, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i87, out_$i88, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i135, out_$i136, out_$p137, out_$i138, out_$i140, out_$i141, out_$p142, out_$i143, out_$i145, out_$i146, out_$p147, out_$i148, out_$i150, out_$i151, out_$p152, out_$i153, out_$i155, out_$i156, out_$p157, out_$i158, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p168, out_$i170, out_$i171, out_$p172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$p200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$p208, out_$i209, out_$i210, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$p224, out_$p225, out_$i227, out_$i228, out_$i229, out_$i230, out_$p231, out_$i232, out_$i234, out_$i235, out_$p236, out_$i237, out_$i238, out_$i240, out_$i241, out_$p242, out_$p243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$p301, out_$i302, out_$i303, out_$p304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$p310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$p316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$p322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$p328, out_$i329, out_$i330, out_$i331, out_$i332, out_$i333, out_$p334, out_$i335, out_$i336, out_$i337, out_$i339, out_$i340, out_$p341, out_$i342, out_$i343, out_$i344, out_$i346, out_$i347, out_$p348, out_$i349, out_$i350, out_$i351, out_$i353, out_$i354, out_$p355, out_$i356, out_$i357, out_$i358, out_$i360, out_$i361, out_$p362, out_$i363, out_$i364, out_$i365, out_$i367, out_$i368, out_$p369, out_$i370, out_$i371, out_$p372, out_$i373, out_$i374, out_$p375, out_$i376, out_$i377, out_$p378, out_$i379, out_$i380, out_$p381, out_$i382, out_$i383, out_$p384, out_$i386, out_$i387, out_$p388, out_$i390, out_$i391, out_$p392, out_$i394, out_$i395, out_$p396, out_$i398, out_$i399, out_$p400, out_$i402, out_$i403, out_$p404, out_$i405, out_$i406, out_$p407, out_$i408, out_$i409, out_$p410, out_$i411, out_$i412, out_$p413, out_$i414, out_$i415, out_$p416, out_$i417, out_$i418, out_$p419, out_$i420, out_$i421, out_$p422, out_$i423, out_$i424, out_$p425, out_$i426, out_$i427, out_$p428, out_$i429, out_$i430, out_$p431, out_$i432, out_$i433, out_$p434, out_$p435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$p441, out_$i442, out_$i443, out_$p444, out_$i445, out_$i446, out_$p447, out_$i448, out_$i449, out_$p450, out_$i451, out_$i452, out_$p453, out_$i454, out_$i455, out_$p456, out_$i457, out_$i458, out_$p459, out_$i460, out_$i461, out_$p462, out_$i463, out_$i464, out_$p465, out_$i466, out_$i467, out_$p468, out_$i469, out_$i470, out_$p471, out_$i472, out_$i473, out_$i475, out_$i476, out_$p477, out_$i478, out_$i479, out_$i481, out_$i482, out_$p483, out_$i484, out_$i485, out_$i487, out_$i488, out_$p489, out_$i490, out_$i491, out_$i493, out_$i494, out_$p495, out_$i496, out_$i497, out_$i499, out_$i500, out_$p501, out_$i503, out_$i504, out_$p505, out_$i507, out_$i508, out_$p509, out_$i511, out_$i512, out_$p513, out_$i515, out_$i516, out_$p517, out_$i519, out_$i520, out_$p521, out_$i522, out_$i523, out_$p524, out_$i525, out_$i526, out_$i528, out_$i529, out_$p530, out_$i531, out_$i532, out_$i534, out_$i535, out_$p536, out_$i537, out_$i538, out_$i540, out_$i541, out_$p542, out_$i543, out_$i544, out_$i546, out_$i547, out_$p548, out_$i549, out_$i550, out_$i552, out_$i553, out_$p554, out_$i555, out_$i557, out_$i558, out_$p559, out_$p560, out_$i561, out_$i562, out_$p563, out_$i565, out_$i566, out_$p567, out_$i569, out_$i570, out_$p571, out_$i573, out_$i574, out_$p575, out_$i577, out_$i578, out_$p579, out_$i581, out_$i582, out_$p583, out_$i584, out_$i586, out_$i587, out_$p588, out_$i589, out_$i591, out_$i592, out_$p593, out_$i594, out_$i596, out_$i597, out_$p598, out_$i599, out_$i601, out_$i602, out_$p603, out_$i604, out_$i606, out_$i607, out_$p608, out_$i610, out_$i611, out_$p612, out_$i614, out_$i615, out_$p616, out_$i618, out_$i619, out_$p620, out_$i622, out_$i623, out_$p624, out_$i626, out_$i627, out_$p628, out_$i630, out_$i631, out_$p632, out_$i634, out_$i635, out_$p636, out_$i638, out_$i639, out_$p640, out_$i642, out_$i643, out_$p644, out_$i646, out_$i647, out_$p648, out_$i649, out_$i650, out_$p651, out_$i652, out_$i653, out_$p654, out_$i655, out_$i656, out_$p657, out_$i658, out_$i659, out_$p660, out_$i661, out_$i662, out_$p663, out_$i664, out_$i665, out_$i666, out_$p667, out_$i668, out_$i669, out_$i670, out_$p671, out_$i672, out_$i673, out_$i674, out_$p675, out_$i676, out_$i677, out_$i678, out_$p679, out_$i680, out_$i681, out_$i682, out_$i684, out_$i685, out_$i687, out_$i688, out_$i690, out_$i691, out_$i693, out_$i694, out_$i695, out_$i696, out_$i698, out_$i699, out_vslice_dummy_var_459, out_vslice_dummy_var_460, out_vslice_dummy_var_461, out_vslice_dummy_var_462, out_vslice_dummy_var_463, out_vslice_dummy_var_464, out_vslice_dummy_var_465, out_vslice_dummy_var_466, out_vslice_dummy_var_467, out_vslice_dummy_var_468, out_vslice_dummy_var_469, out_vslice_dummy_var_470, out_vslice_dummy_var_471, out_vslice_dummy_var_472, out_vslice_dummy_var_473, out_vslice_dummy_var_474, out_vslice_dummy_var_475, out_vslice_dummy_var_476, out_vslice_dummy_var_477, out_vslice_dummy_var_478, out_vslice_dummy_var_479, out_vslice_dummy_var_480, out_vslice_dummy_var_481, out_vslice_dummy_var_482, out_vslice_dummy_var_483, out_vslice_dummy_var_484, out_vslice_dummy_var_485, out_vslice_dummy_var_486, out_vslice_dummy_var_487, out_vslice_dummy_var_488, out_vslice_dummy_var_489, out_vslice_dummy_var_490, out_vslice_dummy_var_491, out_vslice_dummy_var_492, out_vslice_dummy_var_493, out_vslice_dummy_var_494, out_vslice_dummy_var_495, out_vslice_dummy_var_496, out_vslice_dummy_var_497, out_vslice_dummy_var_498, out_vslice_dummy_var_499, out_vslice_dummy_var_500, out_vslice_dummy_var_501, out_vslice_dummy_var_502, out_vslice_dummy_var_503, out_vslice_dummy_var_504, out_vslice_dummy_var_505, out_vslice_dummy_var_506, out_vslice_dummy_var_507, out_vslice_dummy_var_508, out_vslice_dummy_var_509, out_vslice_dummy_var_510, out_vslice_dummy_var_511, out_vslice_dummy_var_512, out_vslice_dummy_var_513, out_vslice_dummy_var_514, out_vslice_dummy_var_515, out_vslice_dummy_var_516, out_vslice_dummy_var_517, out_vslice_dummy_var_518, out_vslice_dummy_var_519, out_vslice_dummy_var_520, out_vslice_dummy_var_521, out_vslice_dummy_var_522, out_vslice_dummy_var_523, out_vslice_dummy_var_524, out_vslice_dummy_var_525, out_vslice_dummy_var_526);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p32: ref, in_$p34: ref, in_$i63: i32, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i32, in_$i85: i1, in_$i87: i32, in_$i88: i1, in_$i90: i32, in_$i91: i1, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$i96: i32, in_$i97: i1, in_$i98: i32, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i105: i32, in_$i106: i1, in_$i107: i32, in_$i108: i32, in_$i109: i1, in_$i110: i32, in_$i111: i32, in_$i112: i32, in_$i113: i1, in_$i115: i32, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i32, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$i143: i32, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i148: i32, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$i153: i32, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i32, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i164: i32, in_$i165: i1, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$i170: i32, in_$i171: i1, in_$p172: ref, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i179: i32, in_$i180: i1, in_$i181: i32, in_$i182: i32, in_$i183: i1, in_$i184: i32, in_$i185: i32, in_$i186: i32, in_$i187: i1, in_$i189: i32, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$i193: i32, in_$i194: i1, in_$i195: i1, in_$i196: i1, in_$i197: i1, in_$i198: i32, in_$i199: i1, in_$p200: ref, in_$i201: i32, in_$i202: i32, in_$i203: i1, in_$i204: i32, in_$i205: i32, in_$i206: i32, in_$i207: i1, in_$p208: ref, in_$i209: i32, in_$i210: i1, in_$i212: i32, in_$i213: i1, in_$i214: i32, in_$i215: i1, in_$i216: i32, in_$i217: i1, in_$i218: i1, in_$i219: i1, in_$i220: i1, in_$i221: i1, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$p225: ref, in_$i227: i32, in_$i228: i32, in_$i229: i32, in_$i230: i1, in_$p231: ref, in_$i232: i64, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$i237: i64, in_$i238: i32, in_$i240: i32, in_$i241: i1, in_$p242: ref, in_$p243: ref, in_$i244: i32, in_$i245: i32, in_$i246: i1, in_$i247: i32, in_$i248: i32, in_$i249: i32, in_$i250: i1, in_$i251: i32, in_$i252: i1, in_$i253: i32, in_$i254: i1, in_$i255: i32, in_$i256: i1, in_$i257: i1, in_$i258: i1, in_$i259: i32, in_$i260: i1, in_$i261: i32, in_$i262: i1, in_$i263: i32, in_$i264: i1, in_$i265: i32, in_$i266: i32, in_$i267: i1, in_$i268: i32, in_$i269: i1, in_$i270: i32, in_$i271: i1, in_$i272: i32, in_$i273: i1, in_$i274: i1, in_$i275: i1, in_$i276: i1, in_$i277: i1, in_$i278: i1, in_$i279: i1, in_$i280: i1, in_$i281: i1, in_$i282: i1, in_$i283: i1, in_$i284: i1, in_$i285: i1, in_$i286: i1, in_$i287: i1, in_$i288: i1, in_$i289: i1, in_$i290: i1, in_$i291: i1, in_$i292: i1, in_$i293: i1, in_$i294: i1, in_$i295: i1, in_$i296: i1, in_$i297: i1, in_$i298: i1, in_$i299: i32, in_$i300: i1, in_$p301: ref, in_$i302: i32, in_$i303: i1, in_$p304: ref, in_$i305: i8, in_$i306: i32, in_$i307: i8, in_$i308: i32, in_$i309: i1, in_$p310: ref, in_$i311: i8, in_$i312: i32, in_$i313: i8, in_$i314: i32, in_$i315: i1, in_$p316: ref, in_$i317: i8, in_$i318: i32, in_$i319: i8, in_$i320: i32, in_$i321: i1, in_$p322: ref, in_$i323: i8, in_$i324: i32, in_$i325: i8, in_$i326: i32, in_$i327: i1, in_$p328: ref, in_$i329: i8, in_$i330: i32, in_$i331: i8, in_$i332: i32, in_$i333: i1, in_$p334: ref, in_$i335: i8, in_$i336: i32, in_$i337: i8, in_$i339: i32, in_$i340: i1, in_$p341: ref, in_$i342: i8, in_$i343: i32, in_$i344: i8, in_$i346: i32, in_$i347: i1, in_$p348: ref, in_$i349: i8, in_$i350: i32, in_$i351: i8, in_$i353: i32, in_$i354: i1, in_$p355: ref, in_$i356: i8, in_$i357: i32, in_$i358: i8, in_$i360: i32, in_$i361: i1, in_$p362: ref, in_$i363: i8, in_$i364: i32, in_$i365: i8, in_$i367: i32, in_$i368: i1, in_$p369: ref, in_$i370: i32, in_$i371: i1, in_$p372: ref, in_$i373: i32, in_$i374: i1, in_$p375: ref, in_$i376: i32, in_$i377: i1, in_$p378: ref, in_$i379: i32, in_$i380: i1, in_$p381: ref, in_$i382: i32, in_$i383: i1, in_$p384: ref, in_$i386: i32, in_$i387: i1, in_$p388: ref, in_$i390: i32, in_$i391: i1, in_$p392: ref, in_$i394: i32, in_$i395: i1, in_$p396: ref, in_$i398: i32, in_$i399: i1, in_$p400: ref, in_$i402: i32, in_$i403: i1, in_$p404: ref, in_$i405: i32, in_$i406: i1, in_$p407: ref, in_$i408: i32, in_$i409: i1, in_$p410: ref, in_$i411: i32, in_$i412: i1, in_$p413: ref, in_$i414: i32, in_$i415: i1, in_$p416: ref, in_$i417: i32, in_$i418: i1, in_$p419: ref, in_$i420: i32, in_$i421: i1, in_$p422: ref, in_$i423: i32, in_$i424: i1, in_$p425: ref, in_$i426: i32, in_$i427: i1, in_$p428: ref, in_$i429: i32, in_$i430: i1, in_$p431: ref, in_$i432: i32, in_$i433: i1, in_$p434: ref, in_$p435: ref, in_$i436: i32, in_$i437: i32, in_$i438: i1, in_$i439: i32, in_$i440: i1, in_$p441: ref, in_$i442: i32, in_$i443: i1, in_$p444: ref, in_$i445: i32, in_$i446: i1, in_$p447: ref, in_$i448: i32, in_$i449: i1, in_$p450: ref, in_$i451: i32, in_$i452: i1, in_$p453: ref, in_$i454: i32, in_$i455: i1, in_$p456: ref, in_$i457: i32, in_$i458: i1, in_$p459: ref, in_$i460: i32, in_$i461: i1, in_$p462: ref, in_$i463: i32, in_$i464: i1, in_$p465: ref, in_$i466: i32, in_$i467: i1, in_$p468: ref, in_$i469: i32, in_$i470: i1, in_$p471: ref, in_$i472: i32, in_$i473: i64, in_$i475: i32, in_$i476: i1, in_$p477: ref, in_$i478: i32, in_$i479: i64, in_$i481: i32, in_$i482: i1, in_$p483: ref, in_$i484: i32, in_$i485: i64, in_$i487: i32, in_$i488: i1, in_$p489: ref, in_$i490: i32, in_$i491: i64, in_$i493: i32, in_$i494: i1, in_$p495: ref, in_$i496: i32, in_$i497: i64, in_$i499: i32, in_$i500: i1, in_$p501: ref, in_$i503: i32, in_$i504: i1, in_$p505: ref, in_$i507: i32, in_$i508: i1, in_$p509: ref, in_$i511: i32, in_$i512: i1, in_$p513: ref, in_$i515: i32, in_$i516: i1, in_$p517: ref, in_$i519: i32, in_$i520: i1, in_$p521: ref, in_$i522: i32, in_$i523: i1, in_$p524: ref, in_$i525: i32, in_$i526: i32, in_$i528: i32, in_$i529: i1, in_$p530: ref, in_$i531: i32, in_$i532: i32, in_$i534: i32, in_$i535: i1, in_$p536: ref, in_$i537: i32, in_$i538: i32, in_$i540: i32, in_$i541: i1, in_$p542: ref, in_$i543: i32, in_$i544: i32, in_$i546: i32, in_$i547: i1, in_$p548: ref, in_$i549: i32, in_$i550: i32, in_$i552: i32, in_$i553: i1, in_$p554: ref, in_$i555: i32, in_$i557: i32, in_$i558: i1, in_$p559: ref, in_$p560: ref, in_$i561: i32, in_$i562: i1, in_$p563: ref, in_$i565: i32, in_$i566: i1, in_$p567: ref, in_$i569: i32, in_$i570: i1, in_$p571: ref, in_$i573: i32, in_$i574: i1, in_$p575: ref, in_$i577: i32, in_$i578: i1, in_$p579: ref, in_$i581: i32, in_$i582: i1, in_$p583: ref, in_$i584: i32, in_$i586: i32, in_$i587: i1, in_$p588: ref, in_$i589: i32, in_$i591: i32, in_$i592: i1, in_$p593: ref, in_$i594: i32, in_$i596: i32, in_$i597: i1, in_$p598: ref, in_$i599: i32, in_$i601: i32, in_$i602: i1, in_$p603: ref, in_$i604: i32, in_$i606: i32, in_$i607: i1, in_$p608: ref, in_$i610: i32, in_$i611: i1, in_$p612: ref, in_$i614: i32, in_$i615: i1, in_$p616: ref, in_$i618: i32, in_$i619: i1, in_$p620: ref, in_$i622: i32, in_$i623: i1, in_$p624: ref, in_$i626: i32, in_$i627: i1, in_$p628: ref, in_$i630: i32, in_$i631: i1, in_$p632: ref, in_$i634: i32, in_$i635: i1, in_$p636: ref, in_$i638: i32, in_$i639: i1, in_$p640: ref, in_$i642: i32, in_$i643: i1, in_$p644: ref, in_$i646: i32, in_$i647: i1, in_$p648: ref, in_$i649: i32, in_$i650: i1, in_$p651: ref, in_$i652: i32, in_$i653: i1, in_$p654: ref, in_$i655: i32, in_$i656: i1, in_$p657: ref, in_$i658: i32, in_$i659: i1, in_$p660: ref, in_$i661: i32, in_$i662: i1, in_$p663: ref, in_$i664: i32, in_$i665: i32, in_$i666: i1, in_$p667: ref, in_$i668: i32, in_$i669: i32, in_$i670: i1, in_$p671: ref, in_$i672: i32, in_$i673: i32, in_$i674: i1, in_$p675: ref, in_$i676: i32, in_$i677: i32, in_$i678: i1, in_$p679: ref, in_$i680: i32, in_$i681: i32, in_$i682: i1, in_$i684: i32, in_$i685: i1, in_$i687: i32, in_$i688: i1, in_$i690: i32, in_$i691: i1, in_$i693: i32, in_$i694: i32, in_$i695: i32, in_$i696: i1, in_$i698: i32, in_$i699: i32, in_vslice_dummy_var_459: i32, in_vslice_dummy_var_460: i32, in_vslice_dummy_var_461: i32, in_vslice_dummy_var_462: i32, in_vslice_dummy_var_463: i32, in_vslice_dummy_var_464: i32, in_vslice_dummy_var_465: i32, in_vslice_dummy_var_466: i32, in_vslice_dummy_var_467: i32, in_vslice_dummy_var_468: i32, in_vslice_dummy_var_469: i32, in_vslice_dummy_var_470: i32, in_vslice_dummy_var_471: i32, in_vslice_dummy_var_472: i32, in_vslice_dummy_var_473: i32, in_vslice_dummy_var_474: i64, in_vslice_dummy_var_475: i64, in_vslice_dummy_var_476: i32, in_vslice_dummy_var_477: i32, in_vslice_dummy_var_478: i32, in_vslice_dummy_var_479: i32, in_vslice_dummy_var_480: i32, in_vslice_dummy_var_481: i32, in_vslice_dummy_var_482: i32, in_vslice_dummy_var_483: i32, in_vslice_dummy_var_484: i32, in_vslice_dummy_var_485: i32, in_vslice_dummy_var_486: i32, in_vslice_dummy_var_487: i32, in_vslice_dummy_var_488: i32, in_vslice_dummy_var_489: i32, in_vslice_dummy_var_490: i32, in_vslice_dummy_var_491: i32, in_vslice_dummy_var_492: i32, in_vslice_dummy_var_493: i32, in_vslice_dummy_var_494: i32, in_vslice_dummy_var_495: i32, in_vslice_dummy_var_496: i32, in_vslice_dummy_var_497: i32, in_vslice_dummy_var_498: i32, in_vslice_dummy_var_499: i32, in_vslice_dummy_var_500: i32, in_vslice_dummy_var_501: i32, in_vslice_dummy_var_502: i32, in_vslice_dummy_var_503: i32, in_vslice_dummy_var_504: i32, in_vslice_dummy_var_505: i32, in_vslice_dummy_var_506: i32, in_vslice_dummy_var_507: i32, in_vslice_dummy_var_508: i32, in_vslice_dummy_var_509: i32, in_vslice_dummy_var_510: i32, in_vslice_dummy_var_511: i32, in_vslice_dummy_var_512: i32, in_vslice_dummy_var_513: i32, in_vslice_dummy_var_514: i32, in_vslice_dummy_var_515: i32, in_vslice_dummy_var_516: i32, in_vslice_dummy_var_517: i32, in_vslice_dummy_var_518: i32, in_vslice_dummy_var_519: i32, in_vslice_dummy_var_520: i32, in_vslice_dummy_var_521: i32, in_vslice_dummy_var_522: i32, in_vslice_dummy_var_523: i32, in_vslice_dummy_var_524: i32, in_vslice_dummy_var_525: i32, in_vslice_dummy_var_526: i32) returns (out_$i63: i32, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i32, out_$i85: i1, out_$i87: i32, out_$i88: i1, out_$i90: i32, out_$i91: i1, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$i96: i32, out_$i97: i1, out_$i98: i32, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i105: i32, out_$i106: i1, out_$i107: i32, out_$i108: i32, out_$i109: i1, out_$i110: i32, out_$i111: i32, out_$i112: i32, out_$i113: i1, out_$i115: i32, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i32, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$i143: i32, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i148: i32, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$i153: i32, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i32, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i164: i32, out_$i165: i1, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$i170: i32, out_$i171: i1, out_$p172: ref, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i179: i32, out_$i180: i1, out_$i181: i32, out_$i182: i32, out_$i183: i1, out_$i184: i32, out_$i185: i32, out_$i186: i32, out_$i187: i1, out_$i189: i32, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$i193: i32, out_$i194: i1, out_$i195: i1, out_$i196: i1, out_$i197: i1, out_$i198: i32, out_$i199: i1, out_$p200: ref, out_$i201: i32, out_$i202: i32, out_$i203: i1, out_$i204: i32, out_$i205: i32, out_$i206: i32, out_$i207: i1, out_$p208: ref, out_$i209: i32, out_$i210: i1, out_$i212: i32, out_$i213: i1, out_$i214: i32, out_$i215: i1, out_$i216: i32, out_$i217: i1, out_$i218: i1, out_$i219: i1, out_$i220: i1, out_$i221: i1, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$p225: ref, out_$i227: i32, out_$i228: i32, out_$i229: i32, out_$i230: i1, out_$p231: ref, out_$i232: i64, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$i237: i64, out_$i238: i32, out_$i240: i32, out_$i241: i1, out_$p242: ref, out_$p243: ref, out_$i244: i32, out_$i245: i32, out_$i246: i1, out_$i247: i32, out_$i248: i32, out_$i249: i32, out_$i250: i1, out_$i251: i32, out_$i252: i1, out_$i253: i32, out_$i254: i1, out_$i255: i32, out_$i256: i1, out_$i257: i1, out_$i258: i1, out_$i259: i32, out_$i260: i1, out_$i261: i32, out_$i262: i1, out_$i263: i32, out_$i264: i1, out_$i265: i32, out_$i266: i32, out_$i267: i1, out_$i268: i32, out_$i269: i1, out_$i270: i32, out_$i271: i1, out_$i272: i32, out_$i273: i1, out_$i274: i1, out_$i275: i1, out_$i276: i1, out_$i277: i1, out_$i278: i1, out_$i279: i1, out_$i280: i1, out_$i281: i1, out_$i282: i1, out_$i283: i1, out_$i284: i1, out_$i285: i1, out_$i286: i1, out_$i287: i1, out_$i288: i1, out_$i289: i1, out_$i290: i1, out_$i291: i1, out_$i292: i1, out_$i293: i1, out_$i294: i1, out_$i295: i1, out_$i296: i1, out_$i297: i1, out_$i298: i1, out_$i299: i32, out_$i300: i1, out_$p301: ref, out_$i302: i32, out_$i303: i1, out_$p304: ref, out_$i305: i8, out_$i306: i32, out_$i307: i8, out_$i308: i32, out_$i309: i1, out_$p310: ref, out_$i311: i8, out_$i312: i32, out_$i313: i8, out_$i314: i32, out_$i315: i1, out_$p316: ref, out_$i317: i8, out_$i318: i32, out_$i319: i8, out_$i320: i32, out_$i321: i1, out_$p322: ref, out_$i323: i8, out_$i324: i32, out_$i325: i8, out_$i326: i32, out_$i327: i1, out_$p328: ref, out_$i329: i8, out_$i330: i32, out_$i331: i8, out_$i332: i32, out_$i333: i1, out_$p334: ref, out_$i335: i8, out_$i336: i32, out_$i337: i8, out_$i339: i32, out_$i340: i1, out_$p341: ref, out_$i342: i8, out_$i343: i32, out_$i344: i8, out_$i346: i32, out_$i347: i1, out_$p348: ref, out_$i349: i8, out_$i350: i32, out_$i351: i8, out_$i353: i32, out_$i354: i1, out_$p355: ref, out_$i356: i8, out_$i357: i32, out_$i358: i8, out_$i360: i32, out_$i361: i1, out_$p362: ref, out_$i363: i8, out_$i364: i32, out_$i365: i8, out_$i367: i32, out_$i368: i1, out_$p369: ref, out_$i370: i32, out_$i371: i1, out_$p372: ref, out_$i373: i32, out_$i374: i1, out_$p375: ref, out_$i376: i32, out_$i377: i1, out_$p378: ref, out_$i379: i32, out_$i380: i1, out_$p381: ref, out_$i382: i32, out_$i383: i1, out_$p384: ref, out_$i386: i32, out_$i387: i1, out_$p388: ref, out_$i390: i32, out_$i391: i1, out_$p392: ref, out_$i394: i32, out_$i395: i1, out_$p396: ref, out_$i398: i32, out_$i399: i1, out_$p400: ref, out_$i402: i32, out_$i403: i1, out_$p404: ref, out_$i405: i32, out_$i406: i1, out_$p407: ref, out_$i408: i32, out_$i409: i1, out_$p410: ref, out_$i411: i32, out_$i412: i1, out_$p413: ref, out_$i414: i32, out_$i415: i1, out_$p416: ref, out_$i417: i32, out_$i418: i1, out_$p419: ref, out_$i420: i32, out_$i421: i1, out_$p422: ref, out_$i423: i32, out_$i424: i1, out_$p425: ref, out_$i426: i32, out_$i427: i1, out_$p428: ref, out_$i429: i32, out_$i430: i1, out_$p431: ref, out_$i432: i32, out_$i433: i1, out_$p434: ref, out_$p435: ref, out_$i436: i32, out_$i437: i32, out_$i438: i1, out_$i439: i32, out_$i440: i1, out_$p441: ref, out_$i442: i32, out_$i443: i1, out_$p444: ref, out_$i445: i32, out_$i446: i1, out_$p447: ref, out_$i448: i32, out_$i449: i1, out_$p450: ref, out_$i451: i32, out_$i452: i1, out_$p453: ref, out_$i454: i32, out_$i455: i1, out_$p456: ref, out_$i457: i32, out_$i458: i1, out_$p459: ref, out_$i460: i32, out_$i461: i1, out_$p462: ref, out_$i463: i32, out_$i464: i1, out_$p465: ref, out_$i466: i32, out_$i467: i1, out_$p468: ref, out_$i469: i32, out_$i470: i1, out_$p471: ref, out_$i472: i32, out_$i473: i64, out_$i475: i32, out_$i476: i1, out_$p477: ref, out_$i478: i32, out_$i479: i64, out_$i481: i32, out_$i482: i1, out_$p483: ref, out_$i484: i32, out_$i485: i64, out_$i487: i32, out_$i488: i1, out_$p489: ref, out_$i490: i32, out_$i491: i64, out_$i493: i32, out_$i494: i1, out_$p495: ref, out_$i496: i32, out_$i497: i64, out_$i499: i32, out_$i500: i1, out_$p501: ref, out_$i503: i32, out_$i504: i1, out_$p505: ref, out_$i507: i32, out_$i508: i1, out_$p509: ref, out_$i511: i32, out_$i512: i1, out_$p513: ref, out_$i515: i32, out_$i516: i1, out_$p517: ref, out_$i519: i32, out_$i520: i1, out_$p521: ref, out_$i522: i32, out_$i523: i1, out_$p524: ref, out_$i525: i32, out_$i526: i32, out_$i528: i32, out_$i529: i1, out_$p530: ref, out_$i531: i32, out_$i532: i32, out_$i534: i32, out_$i535: i1, out_$p536: ref, out_$i537: i32, out_$i538: i32, out_$i540: i32, out_$i541: i1, out_$p542: ref, out_$i543: i32, out_$i544: i32, out_$i546: i32, out_$i547: i1, out_$p548: ref, out_$i549: i32, out_$i550: i32, out_$i552: i32, out_$i553: i1, out_$p554: ref, out_$i555: i32, out_$i557: i32, out_$i558: i1, out_$p559: ref, out_$p560: ref, out_$i561: i32, out_$i562: i1, out_$p563: ref, out_$i565: i32, out_$i566: i1, out_$p567: ref, out_$i569: i32, out_$i570: i1, out_$p571: ref, out_$i573: i32, out_$i574: i1, out_$p575: ref, out_$i577: i32, out_$i578: i1, out_$p579: ref, out_$i581: i32, out_$i582: i1, out_$p583: ref, out_$i584: i32, out_$i586: i32, out_$i587: i1, out_$p588: ref, out_$i589: i32, out_$i591: i32, out_$i592: i1, out_$p593: ref, out_$i594: i32, out_$i596: i32, out_$i597: i1, out_$p598: ref, out_$i599: i32, out_$i601: i32, out_$i602: i1, out_$p603: ref, out_$i604: i32, out_$i606: i32, out_$i607: i1, out_$p608: ref, out_$i610: i32, out_$i611: i1, out_$p612: ref, out_$i614: i32, out_$i615: i1, out_$p616: ref, out_$i618: i32, out_$i619: i1, out_$p620: ref, out_$i622: i32, out_$i623: i1, out_$p624: ref, out_$i626: i32, out_$i627: i1, out_$p628: ref, out_$i630: i32, out_$i631: i1, out_$p632: ref, out_$i634: i32, out_$i635: i1, out_$p636: ref, out_$i638: i32, out_$i639: i1, out_$p640: ref, out_$i642: i32, out_$i643: i1, out_$p644: ref, out_$i646: i32, out_$i647: i1, out_$p648: ref, out_$i649: i32, out_$i650: i1, out_$p651: ref, out_$i652: i32, out_$i653: i1, out_$p654: ref, out_$i655: i32, out_$i656: i1, out_$p657: ref, out_$i658: i32, out_$i659: i1, out_$p660: ref, out_$i661: i32, out_$i662: i1, out_$p663: ref, out_$i664: i32, out_$i665: i32, out_$i666: i1, out_$p667: ref, out_$i668: i32, out_$i669: i32, out_$i670: i1, out_$p671: ref, out_$i672: i32, out_$i673: i32, out_$i674: i1, out_$p675: ref, out_$i676: i32, out_$i677: i32, out_$i678: i1, out_$p679: ref, out_$i680: i32, out_$i681: i32, out_$i682: i1, out_$i684: i32, out_$i685: i1, out_$i687: i32, out_$i688: i1, out_$i690: i32, out_$i691: i1, out_$i693: i32, out_$i694: i32, out_$i695: i32, out_$i696: i1, out_$i698: i32, out_$i699: i32, out_vslice_dummy_var_459: i32, out_vslice_dummy_var_460: i32, out_vslice_dummy_var_461: i32, out_vslice_dummy_var_462: i32, out_vslice_dummy_var_463: i32, out_vslice_dummy_var_464: i32, out_vslice_dummy_var_465: i32, out_vslice_dummy_var_466: i32, out_vslice_dummy_var_467: i32, out_vslice_dummy_var_468: i32, out_vslice_dummy_var_469: i32, out_vslice_dummy_var_470: i32, out_vslice_dummy_var_471: i32, out_vslice_dummy_var_472: i32, out_vslice_dummy_var_473: i32, out_vslice_dummy_var_474: i64, out_vslice_dummy_var_475: i64, out_vslice_dummy_var_476: i32, out_vslice_dummy_var_477: i32, out_vslice_dummy_var_478: i32, out_vslice_dummy_var_479: i32, out_vslice_dummy_var_480: i32, out_vslice_dummy_var_481: i32, out_vslice_dummy_var_482: i32, out_vslice_dummy_var_483: i32, out_vslice_dummy_var_484: i32, out_vslice_dummy_var_485: i32, out_vslice_dummy_var_486: i32, out_vslice_dummy_var_487: i32, out_vslice_dummy_var_488: i32, out_vslice_dummy_var_489: i32, out_vslice_dummy_var_490: i32, out_vslice_dummy_var_491: i32, out_vslice_dummy_var_492: i32, out_vslice_dummy_var_493: i32, out_vslice_dummy_var_494: i32, out_vslice_dummy_var_495: i32, out_vslice_dummy_var_496: i32, out_vslice_dummy_var_497: i32, out_vslice_dummy_var_498: i32, out_vslice_dummy_var_499: i32, out_vslice_dummy_var_500: i32, out_vslice_dummy_var_501: i32, out_vslice_dummy_var_502: i32, out_vslice_dummy_var_503: i32, out_vslice_dummy_var_504: i32, out_vslice_dummy_var_505: i32, out_vslice_dummy_var_506: i32, out_vslice_dummy_var_507: i32, out_vslice_dummy_var_508: i32, out_vslice_dummy_var_509: i32, out_vslice_dummy_var_510: i32, out_vslice_dummy_var_511: i32, out_vslice_dummy_var_512: i32, out_vslice_dummy_var_513: i32, out_vslice_dummy_var_514: i32, out_vslice_dummy_var_515: i32, out_vslice_dummy_var_516: i32, out_vslice_dummy_var_517: i32, out_vslice_dummy_var_518: i32, out_vslice_dummy_var_519: i32, out_vslice_dummy_var_520: i32, out_vslice_dummy_var_521: i32, out_vslice_dummy_var_522: i32, out_vslice_dummy_var_523: i32, out_vslice_dummy_var_524: i32, out_vslice_dummy_var_525: i32, out_vslice_dummy_var_526: i32);
  modifies $M.83, $M.1, $M.0, $M.90, $M.93, $M.3, $M.5, $M.7, $M.9, $M.48, $CurrAddr, $M.94, $M.4, $M.6, $M.8, $M.10, assertsPassed, $M.95, $M.85, $M.96, $M.14, $M.15, $M.17, $M.47, $M.26, $M.27, $M.25, $M.29, $M.30, $M.28, $M.32, $M.33, $M.31, $M.35, $M.36, $M.34, $M.18, $M.21, $M.49, $M.22, $M.37, $M.39, $M.41, $M.43, $M.87, $M.97, $M.45, $M.46, $M.38, $M.68, $M.69, $M.70, $M.71, $M.78, $M.79, $M.81, $M.82, $M.92, $M.91, $M.98, $M.103, $M.80, $M.99, $M.51, $M.52, $M.53, $M.54, $M.55, $M.50, $M.62, $M.63, $M.59, $M.61, $M.60, $M.56, $M.58, $M.57;



implementation synclinkmp_cleanup_loop_$bb18(in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p22: ref) returns (out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p22: ref)
{

  entry:
    out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p22 := in_$p23, in_$i24, in_$i25, in_$p26, in_$p27, in_$i28, in_$i29, in_$p30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p22;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_13198;

  $bb26:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$p22 := out_$p31;
    goto $bb26_dummy;

  corral_source_split_13225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_13224:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_13225;

  corral_source_split_13223:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p31);
    goto corral_source_split_13224;

  corral_source_split_13222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2345} kfree(out_$p33);
    goto corral_source_split_13223;

  corral_source_split_13221:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_13222;

  corral_source_split_13220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2344} tty_port_destroy(out_$p32);
    goto corral_source_split_13221;

  corral_source_split_13219:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p22, $mul.ref(0, 6384)), $mul.ref(16, 1));
    goto corral_source_split_13220;

  corral_source_split_13218:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_13219;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p22, $mul.ref(0, 6384)), $mul.ref(1504, 1));
    goto corral_source_split_13218;

  $bb21:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_13216:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2343} release_resources(out_$p22);
    goto corral_source_split_13216;

  $bb23:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_13214:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_13213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2342} write_reg(out_$p22, 0, 1);
    goto corral_source_split_13214;

  $bb22:
    assume out_$i29 == 1;
    goto corral_source_split_13213;

  corral_source_split_13211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_13210:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, 0);
    goto corral_source_split_13211;

  corral_source_split_13209:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_13210;

  corral_source_split_13208:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_13209;

  corral_source_split_13207:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p22, $mul.ref(0, 6384)), $mul.ref(6184, 1));
    goto corral_source_split_13208;

  $bb20:
    assume out_$i25 == 1;
    goto corral_source_split_13207;

  corral_source_split_13205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_13204:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 0);
    goto corral_source_split_13205;

  corral_source_split_13203:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, out_$p23);
    goto corral_source_split_13204;

  corral_source_split_13202:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 6384)), $mul.ref(6044, 1));
    goto corral_source_split_13203;

  corral_source_split_13201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2341} free_tmp_rx_buf(out_$p22);
    goto corral_source_split_13202;

  corral_source_split_13200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2340} free_dma_bufs(out_$p22);
    goto corral_source_split_13201;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2339} hdlcdev_exit(out_$p22);
    goto corral_source_split_13200;

  corral_source_split_13198:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p22 := synclinkmp_cleanup_loop_$bb18(out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p22);
    return;

  exit:
    return;
}



procedure synclinkmp_cleanup_loop_$bb18(in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p22: ref) returns (out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p22: ref);
  modifies $M.0, $M.25, $M.28, $M.31, $M.34, $M.48;



implementation synclinkmp_cleanup_loop_$bb10(in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p14: ref) returns (out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p14: ref)
{

  entry:
    out_$p15, out_$p16, out_$i17, out_$i18, out_$p14 := in_$p15, in_$p16, in_$i17, in_$i18, in_$p14;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_13182;

  $bb12:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$p14 := out_$p16;
    goto $bb12_dummy;

  corral_source_split_13188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_13187:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i64(out_$i17, 0);
    goto corral_source_split_13188;

  corral_source_split_13186:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(out_$p16);
    goto corral_source_split_13187;

  corral_source_split_13185:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_13186;

  corral_source_split_13184:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 6384)), $mul.ref(1504, 1));
    goto corral_source_split_13185;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2338} reset_port(out_$p14);
    goto corral_source_split_13184;

  corral_source_split_13182:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$i17, out_$i18, out_$p14 := synclinkmp_cleanup_loop_$bb10(out_$p15, out_$p16, out_$i17, out_$i18, out_$p14);
    return;

  exit:
    return;
}



procedure synclinkmp_cleanup_loop_$bb10(in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p14: ref) returns (out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p14: ref);
  modifies $M.0, $M.3, $M.5, $M.7, $M.9;


