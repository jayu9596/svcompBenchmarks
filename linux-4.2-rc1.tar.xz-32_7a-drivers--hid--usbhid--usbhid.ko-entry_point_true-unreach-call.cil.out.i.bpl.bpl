var $M.0: [ref]i8;

var $M.1: [ref]i32;

var $M.2: i32;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]ref;

var $M.7: [ref]i24;

var $M.8: [ref]i8;

var $M.9: [ref]i8;

var $M.10: ref;

var $M.11: i32;

var $M.12: ref;

var $M.13: i32;

var $M.14: ref;

var $M.15: i32;

var $M.16: ref;

var $M.17: i32;

var $M.18: i32;

var $M.19: ref;

var $M.20: i32;

var $M.21: ref;

var $M.22: i32;

var $M.23: ref;

var $M.24: i32;

var $M.25: ref;

var $M.26: i32;

var $M.27: i32;

var $M.28: [ref]i8;

var $M.29: [ref]ref;

var $M.30: [ref]ref;

var $M.31: [ref]ref;

var $M.32: [ref]ref;

var $M.33: [ref]i24;

var $M.34: [ref]i8;

var $M.35: [ref]i8;

var $M.36: [ref]i8;

var $M.37: [ref]i32;

var $M.38: i32;

var $M.39: [ref]ref;

var $M.40: [ref]i8;

var $M.41: [ref]i32;

var $M.42: [ref]ref;

var $M.44: [ref]i8;

var $M.45: [ref]i64;

var $M.46: i32;

var $M.47: [ref]i8;

var $M.48: ref;

var $M.50: ref;

var $M.51: i32;

var $M.52: i32;

var $M.53: i32;

var $M.54: i32;

var $M.55: i32;

var $M.56: i32;

var $M.57: i32;

var $M.58: i32;

var $M.59: i32;

var $M.60: i32;

var $M.61: i32;

var $M.62: i32;

var $M.63: i32;

var $M.64: i32;

var $M.65: i32;

var $M.66: ref;

var $M.67: ref;

var $M.68: i32;

var $M.69: i32;

var $M.70: i32;

var $M.71: i32;

var $M.72: [ref]ref;

var $M.73: [ref]i8;

var $M.76: [ref]i8;

var $M.109: [ref]i8;

var $M.110: [ref]i8;

var $M.111: [ref]i8;

var $M.112: [ref]i16;

var $M.113: [ref]i16;

var $M.114: [ref]i16;

var $M.115: [ref]i16;

var $M.116: [ref]i16;

var $M.117: [ref]i8;

var $M.118: [ref]i8;

var $M.119: [ref]i8;

var $M.120: [ref]i8;

var $M.121: [ref]i8;

var $M.122: [ref]i8;

var $M.123: [ref]i8;

var $M.124: [ref]i64;

var $M.127: [ref]i8;

var $M.128: [ref]i8;

var $M.129: [ref]i8;

var $M.130: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 650415);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const hid_driver_group1: ref;

axiom hid_driver_group1 == $sub.ref(0, 2060);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 3088);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 4120);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 5148);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 6180);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 7208);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 8240);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 9268);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 10300);

const ldv_timer_2_0: ref;

axiom ldv_timer_2_0 == $sub.ref(0, 11328);

const ldv_timer_list_2_0: ref;

axiom ldv_timer_list_2_0 == $sub.ref(0, 12360);

const ldv_timer_2_1: ref;

axiom ldv_timer_2_1 == $sub.ref(0, 13388);

const ldv_timer_list_2_1: ref;

axiom ldv_timer_list_2_1 == $sub.ref(0, 14420);

const ldv_timer_2_2: ref;

axiom ldv_timer_2_2 == $sub.ref(0, 15448);

const ldv_timer_list_2_2: ref;

axiom ldv_timer_list_2_2 == $sub.ref(0, 16480);

const ldv_timer_2_3: ref;

axiom ldv_timer_2_3 == $sub.ref(0, 17508);

const ldv_timer_list_2_3: ref;

axiom ldv_timer_list_2_3 == $sub.ref(0, 18540);

const usb_hid_driver_group0: ref;

axiom usb_hid_driver_group0 == $sub.ref(0, 19572);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 20600);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 21628);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 22656);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 23684);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 24712);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 25740);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 26768);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 27796);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 28824);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 29852);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 30880);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 31908);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 32936);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 33964);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 34992);

const __ksymtab_usbhid_lookup_quirk: ref;

axiom __ksymtab_usbhid_lookup_quirk == $sub.ref(0, 36032);

const {:count 20} __kstrtab_usbhid_lookup_quirk: ref;

axiom __kstrtab_usbhid_lookup_quirk == $sub.ref(0, 37076);

const ldv_mutex_thread_lock_of_hiddev_list: ref;

axiom ldv_mutex_thread_lock_of_hiddev_list == $sub.ref(0, 38104);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 39132);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 40160);

const ldv_mutex_i_mutex_of_inode: ref;

axiom ldv_mutex_i_mutex_of_inode == $sub.ref(0, 41188);

const ldv_mutex_hid_open_mut: ref;

axiom ldv_mutex_hid_open_mut == $sub.ref(0, 42216);

const ldv_mutex_existancelock_of_hiddev: ref;

axiom ldv_mutex_existancelock_of_hiddev == $sub.ref(0, 43244);

const pidff_device_gain: ref;

axiom pidff_device_gain == $sub.ref(0, 44269);

const {:count 3} pidff_pool: ref;

axiom pidff_pool == $sub.ref(0, 45296);

const {:count 5} pidff_set_periodic: ref;

axiom pidff_set_periodic == $sub.ref(0, 46325);

const {:count 8} pidff_set_condition: ref;

axiom pidff_set_condition == $sub.ref(0, 47357);

const {:count 3} pidff_set_ramp: ref;

axiom pidff_set_ramp == $sub.ref(0, 48384);

const {:count 2} pidff_set_constant: ref;

axiom pidff_set_constant == $sub.ref(0, 49410);

const {:count 2} pidff_effect_operation_status: ref;

axiom pidff_effect_operation_status == $sub.ref(0, 50436);

const {:count 2} pidff_block_load_status: ref;

axiom pidff_block_load_status == $sub.ref(0, 51462);

const {:count 11} pidff_effect_types: ref;

axiom pidff_effect_types == $sub.ref(0, 52497);

const {:count 2} pidff_device_control: ref;

axiom pidff_device_control == $sub.ref(0, 53523);

const {:count 5} pidff_set_envelope: ref;

axiom pidff_set_envelope == $sub.ref(0, 54552);

const pidff_block_free: ref;

axiom pidff_block_free == $sub.ref(0, 55577);

const {:count 2} pidff_effect_operation: ref;

axiom pidff_effect_operation == $sub.ref(0, 56603);

const {:count 2} pidff_block_load: ref;

axiom pidff_block_load == $sub.ref(0, 57629);

const {:count 7} pidff_set_effect: ref;

axiom pidff_set_effect == $sub.ref(0, 58660);

const {:count 13} pidff_reports: ref;

axiom pidff_reports == $sub.ref(0, 59697);

const hiddev_fops: ref;

axiom hiddev_fops == $sub.ref(0, 60945);

const hiddev_class: ref;

axiom hiddev_class == $sub.ref(0, 62001);

const {:count 17} __kstrtab_hiddev_hid_event: ref;

axiom __kstrtab_hiddev_hid_event == $sub.ref(0, 63042);

const {:count 110} hid_blacklist: ref;

axiom hid_blacklist == $sub.ref(0, 64946);

const dquirks_rwsem: ref;

axiom dquirks_rwsem == $sub.ref(0, 66130);

const dquirks_list: ref;

axiom dquirks_list == $sub.ref(0, 67170);

const {:count 4} quirks_param: ref;

axiom quirks_param == $sub.ref(0, 68226);

const hid_mousepoll_interval: ref;

axiom hid_mousepoll_interval == $sub.ref(0, 69254);

const ignoreled: ref;

axiom ignoreled == $sub.ref(0, 70282);

const usb_hid_driver: ref;

axiom usb_hid_driver == $sub.ref(0, 71394);

const {:count 2} hid_usb_ids: ref;

axiom hid_usb_ids == $sub.ref(0, 72482);

const hid_driver: ref;

axiom hid_driver == $sub.ref(0, 73810);

const hid_open_mut: ref;

axiom hid_open_mut == $sub.ref(0, 74994);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 76022);

const {:count 2} __mod_usb__hid_usb_ids_device_table: ref;

axiom __mod_usb__hid_usb_ids_device_table == $sub.ref(0, 77110);

const hiddev_fops_group1: ref;

axiom hiddev_fops_group1 == $sub.ref(0, 78142);

const hiddev_fops_group2: ref;

axiom hiddev_fops_group2 == $sub.ref(0, 79174);

const __ksymtab_hiddev_hid_event: ref;

axiom __ksymtab_hiddev_hid_event == $sub.ref(0, 80214);

const hid_debug: ref;

axiom hid_debug == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 60} .str.79: ref;

axiom .str.79 == $sub.ref(0, 81298);

const {:count 209} .str.74: ref;

axiom .str.74 == $sub.ref(0, 82531);

const {:count 67} .str.78: ref;

axiom .str.78 == $sub.ref(0, 83622);

const {:count 23} .str.18: ref;

axiom .str.18 == $sub.ref(0, 84669);

const {:count 13} .str.19: ref;

axiom .str.19 == $sub.ref(0, 85706);

const {:count 7} .str.7: ref;

axiom .str.7 == $sub.ref(0, 86737);

const {:count 50} .str.36: ref;

axiom .str.36 == $sub.ref(0, 87811);

const {:count 207} .str.25: ref;

axiom .str.25 == $sub.ref(0, 89042);

const {:count 52} .str.37: ref;

axiom .str.37 == $sub.ref(0, 90118);

const {:count 32} .str.38: ref;

axiom .str.38 == $sub.ref(0, 91174);

const {:count 26} .str.29: ref;

axiom .str.29 == $sub.ref(0, 92224);

const {:count 24} .str.26: ref;

axiom .str.26 == $sub.ref(0, 93272);

const {:count 11} .str.31: ref;

axiom .str.31 == $sub.ref(0, 94307);

const {:count 11} .str.32: ref;

axiom .str.32 == $sub.ref(0, 95342);

const {:count 69} .str.30: ref;

axiom .str.30 == $sub.ref(0, 96435);

const {:count 33} .str.33: ref;

axiom .str.33 == $sub.ref(0, 97492);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 20} .str.34: ref;

axiom .str.34 == $sub.ref(0, 98536);

const {:count 25} .str.24: ref;

axiom .str.24 == $sub.ref(0, 99585);

const {:count 25} .str.27: ref;

axiom .str.27 == $sub.ref(0, 100634);

const {:count 32} .str.28: ref;

axiom .str.28 == $sub.ref(0, 101690);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 11} .str.59: ref;

axiom .str.59 == $sub.ref(0, 102725);

const {:count 18} .str.60: ref;

axiom .str.60 == $sub.ref(0, 103767);

const {:count 12} .str.57: ref;

axiom .str.57 == $sub.ref(0, 104803);

const {:count 9} .str.58: ref;

axiom .str.58 == $sub.ref(0, 105836);

const {:count 53} .str.35: ref;

axiom .str.35 == $sub.ref(0, 106913);

const {:count 36} .str.45: ref;

axiom .str.45 == $sub.ref(0, 107973);

const {:count 43} .str.46: ref;

axiom .str.46 == $sub.ref(0, 109040);

const {:count 2} .str.47: ref;

axiom .str.47 == $sub.ref(0, 110066);

const {:count 14} .str.48: ref;

axiom .str.48 == $sub.ref(0, 111104);

const {:count 7} .str.49: ref;

axiom .str.49 == $sub.ref(0, 112135);

const {:count 3} .str.50: ref;

axiom .str.50 == $sub.ref(0, 113162);

const {:count 14} .str.51: ref;

axiom .str.51 == $sub.ref(0, 114200);

const {:count 22} .str.52: ref;

axiom .str.52 == $sub.ref(0, 115246);

const {:count 24} .str.53: ref;

axiom .str.53 == $sub.ref(0, 116294);

const {:count 26} .str.54: ref;

axiom .str.54 == $sub.ref(0, 117344);

const {:count 18} .str.43: ref;

axiom .str.43 == $sub.ref(0, 118386);

const {:count 19} .str.44: ref;

axiom .str.44 == $sub.ref(0, 119429);

const {:count 10} .str.39: ref;

axiom .str.39 == $sub.ref(0, 120463);

const {:count 12} .str.40: ref;

axiom .str.40 == $sub.ref(0, 121499);

const {:count 23} .str.41: ref;

axiom .str.41 == $sub.ref(0, 122546);

const {:count 18} .str.42: ref;

axiom .str.42 == $sub.ref(0, 123588);

const {:count 10} .str.56: ref;

axiom .str.56 == $sub.ref(0, 124622);

const {:count 14} .str.3: ref;

axiom .str.3 == $sub.ref(0, 125660);

const {:count 29} .str.4: ref;

axiom .str.4 == $sub.ref(0, 126713);

const {:count 23} .str.5: ref;

axiom .str.5 == $sub.ref(0, 127760);

const {:count 41} .str.6: ref;

axiom .str.6 == $sub.ref(0, 128825);

const {:count 15} .str.8: ref;

axiom .str.8 == $sub.ref(0, 129864);

const {:count 208} .str.9: ref;

axiom .str.9 == $sub.ref(0, 131096);

const {:count 19} .str.10: ref;

axiom .str.10 == $sub.ref(0, 132139);

const {:count 36} .str.11: ref;

axiom .str.11 == $sub.ref(0, 133199);

const {:count 26} .str.12: ref;

axiom .str.12 == $sub.ref(0, 134249);

const {:count 19} .str.13: ref;

axiom .str.13 == $sub.ref(0, 135292);

const {:count 32} .str.14: ref;

axiom .str.14 == $sub.ref(0, 136348);

const {:count 32} .str.15: ref;

axiom .str.15 == $sub.ref(0, 137404);

const {:count 45} .str.16: ref;

axiom .str.16 == $sub.ref(0, 138473);

const {:count 83} .str.17: ref;

axiom .str.17 == $sub.ref(0, 139580);

const {:count 19} .str.145: ref;

axiom .str.145 == $sub.ref(0, 140623);

const {:count 19} .str.143: ref;

axiom .str.143 == $sub.ref(0, 141666);

const {:count 25} .str.144: ref;

axiom .str.144 == $sub.ref(0, 142715);

const {:count 18} .str.136: ref;

axiom .str.136 == $sub.ref(0, 143757);

const {:count 14} .str.137: ref;

axiom .str.137 == $sub.ref(0, 144795);

const {:count 20} .str.138: ref;

axiom .str.138 == $sub.ref(0, 145839);

const {:count 10} .str.139: ref;

axiom .str.139 == $sub.ref(0, 146873);

const {:count 17} .str.140: ref;

axiom .str.140 == $sub.ref(0, 147914);

const {:count 26} .str.126: ref;

axiom .str.126 == $sub.ref(0, 148964);

const {:count 34} .str.127: ref;

axiom .str.127 == $sub.ref(0, 150022);

const {:count 26} .str.141: ref;

axiom .str.141 == $sub.ref(0, 151072);

const {:count 17} .str.142: ref;

axiom .str.142 == $sub.ref(0, 152113);

const {:count 28} .str.130: ref;

axiom .str.130 == $sub.ref(0, 153165);

const {:count 34} .str.131: ref;

axiom .str.131 == $sub.ref(0, 154223);

const {:count 26} .str.132: ref;

axiom .str.132 == $sub.ref(0, 155273);

const {:count 39} .str.133: ref;

axiom .str.133 == $sub.ref(0, 156336);

const {:count 34} .str.134: ref;

axiom .str.134 == $sub.ref(0, 157394);

const {:count 32} .str.135: ref;

axiom .str.135 == $sub.ref(0, 158450);

const {:count 23} .str.128: ref;

axiom .str.128 == $sub.ref(0, 159497);

const {:count 46} .str.129: ref;

axiom .str.129 == $sub.ref(0, 160567);

const {:count 10} .str.125: ref;

axiom .str.125 == $sub.ref(0, 161601);

const {:count 40} .str.122: ref;

axiom .str.122 == $sub.ref(0, 162665);

const {:count 12} .str.123: ref;

axiom .str.123 == $sub.ref(0, 163701);

const {:count 26} .str.124: ref;

axiom .str.124 == $sub.ref(0, 164751);

const {:count 34} .str.91: ref;

axiom .str.91 == $sub.ref(0, 165809);

const {:count 38} .str.92: ref;

axiom .str.92 == $sub.ref(0, 166871);

const {:count 40} .str.93: ref;

axiom .str.93 == $sub.ref(0, 167935);

const {:count 38} .str.94: ref;

axiom .str.94 == $sub.ref(0, 168997);

const {:count 37} .str.95: ref;

axiom .str.95 == $sub.ref(0, 170058);

const {:count 33} .str.96: ref;

axiom .str.96 == $sub.ref(0, 171115);

const {:count 37} .str.97: ref;

axiom .str.97 == $sub.ref(0, 172176);

const {:count 32} .str.98: ref;

axiom .str.98 == $sub.ref(0, 173232);

const {:count 28} .str.99: ref;

axiom .str.99 == $sub.ref(0, 174284);

const {:count 33} .str.100: ref;

axiom .str.100 == $sub.ref(0, 175341);

const {:count 32} .str.101: ref;

axiom .str.101 == $sub.ref(0, 176397);

const {:count 34} .str.121: ref;

axiom .str.121 == $sub.ref(0, 177455);

const {:count 26} .str.109: ref;

axiom .str.109 == $sub.ref(0, 178505);

const {:count 24} .str.110: ref;

axiom .str.110 == $sub.ref(0, 179553);

const {:count 13} .str.111: ref;

axiom .str.111 == $sub.ref(0, 180590);

const {:count 24} .str.112: ref;

axiom .str.112 == $sub.ref(0, 181638);

const {:count 27} .str.113: ref;

axiom .str.113 == $sub.ref(0, 182689);

const {:count 32} .str.114: ref;

axiom .str.114 == $sub.ref(0, 183745);

const {:count 35} .str.115: ref;

axiom .str.115 == $sub.ref(0, 184804);

const {:count 34} .str.116: ref;

axiom .str.116 == $sub.ref(0, 185862);

const {:count 23} .str.117: ref;

axiom .str.117 == $sub.ref(0, 186909);

const {:count 41} .str.118: ref;

axiom .str.118 == $sub.ref(0, 187974);

const {:count 40} .str.119: ref;

axiom .str.119 == $sub.ref(0, 189038);

const {:count 51} .str.120: ref;

axiom .str.120 == $sub.ref(0, 190113);

const {:count 18} .str.102: ref;

axiom .str.102 == $sub.ref(0, 191155);

const {:count 50} .str.103: ref;

axiom .str.103 == $sub.ref(0, 192229);

const {:count 58} .str.104: ref;

axiom .str.104 == $sub.ref(0, 193311);

const {:count 20} .str.105: ref;

axiom .str.105 == $sub.ref(0, 194355);

const {:count 28} .str.106: ref;

axiom .str.106 == $sub.ref(0, 195407);

const {:count 21} .str.107: ref;

axiom .str.107 == $sub.ref(0, 196452);

const {:count 29} .str.108: ref;

axiom .str.108 == $sub.ref(0, 197505);

const {:count 17} .str.89: ref;

axiom .str.89 == $sub.ref(0, 198546);

const {:count 12} .str.90: ref;

axiom .str.90 == $sub.ref(0, 199582);

const {:count 19} .str.86: ref;

axiom .str.86 == $sub.ref(0, 200625);

const {:count 40} .str.87: ref;

axiom .str.87 == $sub.ref(0, 201689);

const {:count 42} .str.88: ref;

axiom .str.88 == $sub.ref(0, 202755);

const {:count 19} .str.85: ref;

axiom .str.85 == $sub.ref(0, 203798);

const {:count 19} .str.20: ref;

axiom .str.20 == $sub.ref(0, 204841);

const {:count 24} .str.21: ref;

axiom .str.21 == $sub.ref(0, 205889);

const {:count 20} .str.22: ref;

axiom .str.22 == $sub.ref(0, 206933);

const {:count 25} .str.23: ref;

axiom .str.23 == $sub.ref(0, 207982);

const {:count 35} .str.67: ref;

axiom .str.67 == $sub.ref(0, 209041);

const {:count 43} .str.68: ref;

axiom .str.68 == $sub.ref(0, 210108);

const {:count 37} .str.69: ref;

axiom .str.69 == $sub.ref(0, 211169);

const {:count 39} .str.70: ref;

axiom .str.70 == $sub.ref(0, 212232);

const {:count 39} .str.71: ref;

axiom .str.71 == $sub.ref(0, 213295);

const {:count 55} .str.61: ref;

axiom .str.61 == $sub.ref(0, 214374);

const {:count 28} .str.62: ref;

axiom .str.62 == $sub.ref(0, 215426);

const .str: ref;

axiom .str == $sub.ref(0, 216480);

const {:count 29} .str.66: ref;

axiom .str.66 == $sub.ref(0, 217533);

const {:count 31} .str.65: ref;

axiom .str.65 == $sub.ref(0, 218588);

const {:count 30} .str.63: ref;

axiom .str.63 == $sub.ref(0, 219642);

const {:count 47} .str.64: ref;

axiom .str.64 == $sub.ref(0, 220713);

const {:count 24} .str.76: ref;

axiom .str.76 == $sub.ref(0, 221761);

const {:count 14} .str.77: ref;

axiom .str.77 == $sub.ref(0, 222799);

const {:count 9} .str.80: ref;

axiom .str.80 == $sub.ref(0, 223832);

const {:count 7} .str.81: ref;

axiom .str.81 == $sub.ref(0, 224863);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 19} .str.83: ref;

axiom .str.83 == $sub.ref(0, 225906);

const {:count 205} .str.84: ref;

axiom .str.84 == $sub.ref(0, 227135);

const {:count 33} .str.82: ref;

axiom .str.82 == $sub.ref(0, 228192);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 30} .str.72: ref;

axiom .str.72 == $sub.ref(0, 229246);

const {:count 17} .str.1: ref;

axiom .str.1 == $sub.ref(0, 230287);

const {:count 44} .str.2: ref;

axiom .str.2 == $sub.ref(0, 231355);

const {:count 43} .str.73: ref;

axiom .str.73 == $sub.ref(0, 232422);

const {:count 44} .str.75: ref;

axiom .str.75 == $sub.ref(0, 233490);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 234522);

const {:count 3} .str.1.214: ref;

axiom .str.1.214 == $sub.ref(0, 235549);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 236587);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 237615);

const usbhid_lookup_quirk: ref;

axiom usbhid_lookup_quirk == $sub.ref(0, 238647);

procedure usbhid_lookup_quirk($i0: i16, $i1: i16) returns ($r: i32);
  free requires assertsPassed;



implementation usbhid_lookup_quirk($i0: i16, $i1: i16) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i16;
  var $i11: i32;
  var $i12: i16;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i16;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "usbhid_lookup_quirk:arg:idVendor"} boogie_si_record_i16($i0);
    call {:si_unique_call 1} {:cexpr "usbhid_lookup_quirk:arg:idProduct"} boogie_si_record_i16($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1028);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} down_read(dquirks_rwsem);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i0);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i1);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p13 := usbhid_exists_dquirk($i10, $i12);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $p21 := $p13;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} up_read(dquirks_rwsem);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i8 := $i26;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb13:
    assume $i23 == 1;
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p21, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    call {:si_unique_call 5} {:cexpr "quirks"} boogie_si_record_i32($i25);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb15;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i0);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i1);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p20 := usbhid_exists_squirk($i17, $i19);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p21 := $p20;
    goto $bb12;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i1);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i4, 767);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i7 := $ule.i32($i6, 1023);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i8 := 536870912;
    goto $bb8;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 239679);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const down_read: ref;

axiom down_read == $sub.ref(0, 240711);

procedure down_read($p0: ref);
  free requires assertsPassed;



implementation down_read($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    return;
}



const usbhid_exists_dquirk: ref;

axiom usbhid_exists_dquirk == $sub.ref(0, 241743);

procedure usbhid_exists_dquirk($i0: i16, $i1: i16) returns ($r: ref);
  free requires assertsPassed;



implementation usbhid_exists_dquirk($i0: i16, $i1: i16) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p8: ref;
  var $p23: ref;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var vslice_dummy_var_19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} {:cexpr "usbhid_exists_dquirk:arg:idVendor"} boogie_si_record_i16($i0);
    call {:si_unique_call 8} {:cexpr "usbhid_exists_dquirk:arg:idProduct"} boogie_si_record_i16($i1);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, dquirks_list);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 8), 24));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 8), 24)), $mul.ref(8, 1));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, $p2i.ref.i64(dquirks_list));
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p23 := $0.ref;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p23);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $r := $p23;
    return;

  $bb16:
    assume $i33 == 1;
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, hid_debug);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i35 == 1;
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p23, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p23, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.0, $p38);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p23, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} vslice_dummy_var_19 := printk.ref.ref.i32.i32.i32(.str.78, .str.74, $i37, $i40, $i43);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p8 := $p4;
    goto $bb4;

  $bb4:
    call $p10, $i11, $i12, $i13, $i14, $p16, $i17, $i18, $i19, $i20, $p21, $p25, $p26, $p27, $p28, $p29, $i30, $i31, $p8 := usbhid_exists_dquirk_loop_$bb4($i0, $i1, $p10, $i11, $i12, $i13, $i14, $p16, $i17, $i18, $i19, $i20, $p21, $p25, $p26, $p27, $p28, $p29, $i30, $i31, $p8);
    goto $bb4_last;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i0);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i12, $i13);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref($sub.ref(0, 8), 24));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p27, $mul.ref($sub.ref(0, 8), 24)), $mul.ref(8, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, $p2i.ref.i64(dquirks_list));
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i31 == 1);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $p8 := $p28;
    goto $bb13_dummy;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i1);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i18, $i19);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p21 := $p8;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb8;

  $bb9:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p23 := $p21;
    goto $bb11;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_56;
}



const usbhid_exists_squirk: ref;

axiom usbhid_exists_squirk == $sub.ref(0, 242775);

procedure usbhid_exists_squirk($i0: i16, $i1: i16) returns ($r: ref);
  free requires assertsPassed;



implementation usbhid_exists_squirk($i0: i16, $i1: i16) returns ($r: ref)
{
  var $i4: i64;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i64;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i1;
  var $i2: i32;
  var $p3: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var vslice_dummy_var_20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} {:cexpr "usbhid_exists_squirk:arg:idVendor"} boogie_si_record_i16($i0);
    call {:si_unique_call 11} {:cexpr "usbhid_exists_squirk:arg:idProduct"} boogie_si_record_i16($i1);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i2, $p3 := 0, $0.ref;
    goto $bb1;

  $bb1:
    call $i4, $p6, $i7, $i8, $i9, $i10, $i11, $p13, $i14, $i15, $i16, $i17, $i18, $p19, $p20, $i21, $i22, $p24, $i25, $i26, $i27, $i2, $p3, $p28 := usbhid_exists_squirk_loop_$bb1($i0, $i1, $i4, $p6, $i7, $i8, $i9, $i10, $i11, $p13, $i14, $i15, $i16, $i17, $i18, $p19, $p20, $i21, $i22, $p24, $i25, $i26, $i27, $i2, $p3, $p28);
    goto $bb1_last;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i2);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref($i4, 8)), $mul.ref(0, 1));
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i0);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i8, $i9);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p20 := $p3;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i2, 1);
    call {:si_unique_call 12} {:cexpr "n"} boogie_si_record_i32($i21);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref($i22, 8)), $mul.ref(0, 1));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p28 := $p20;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $r := $p28;
    return;

  $bb12:
    assume $i30 == 1;
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, hid_debug);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i32 == 1;
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p28, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p28, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.0, $p35);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p28, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.0, $p38);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} vslice_dummy_var_20 := printk.ref.ref.i32.i32.i32(.str.79, .str.74, $i34, $i37, $i40);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb9:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i2, $p3 := $i21, $p20;
    goto $bb9_dummy;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i2);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref($i11, 8)), $mul.ref(2, 1));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i1);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i15, $i16);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb5;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i2);
    $p19 := $add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref($i18, 8));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p20 := $p19;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_105;
}



const up_read: ref;

axiom up_read == $sub.ref(0, 243807);

procedure up_read($p0: ref);
  free requires assertsPassed;



implementation up_read($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 244839);

procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 1} true;
    call {:si_unique_call 14} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 15} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 1} true;
    call {:si_unique_call 16} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 17} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 1} true;
    call {:si_unique_call 18} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 19} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 1} true;
    call {:si_unique_call 20} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 21} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 1} true;
    call {:si_unique_call 22} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 23} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 1} true;
    call {:si_unique_call 24} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 25} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const hiddev_hid_event: ref;

axiom hiddev_hid_event == $sub.ref(0, 245871);

procedure hiddev_hid_event($p0: ref, $p1: ref, $p2: ref, $i3: i32);



const hiddev_send_event: ref;

axiom hiddev_send_event == $sub.ref(0, 246903);

procedure hiddev_send_event($p0: ref, $p1: ref);



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 247935);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 248967);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 1} true;
    call {:si_unique_call 26} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 27} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 249999);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const kill_fasync: ref;

axiom kill_fasync == $sub.ref(0, 251031);

procedure kill_fasync($p0: ref, $i1: i32, $i2: i32);



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 252063);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 253095);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 31} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 254127);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    return;
}



const usbhid_probe: ref;

axiom usbhid_probe == $sub.ref(0, 255159);

procedure usbhid_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr;



implementation usbhid_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i24: i32;
  var $i25: i32;
  var $i39: i32;
  var $i23: i32;
  var $i40: i1;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i1;
  var $i46: i8;
  var $i47: i1;
  var $p48: ref;
  var $i49: i64;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $i65: i16;
  var $i66: i32;
  var $p67: ref;
  var $p69: ref;
  var $i70: i16;
  var $i71: i32;
  var $p72: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i16;
  var $i78: i32;
  var $i79: i16;
  var $p80: ref;
  var $i81: i32;
  var $i82: i16;
  var $i83: i32;
  var $i84: i16;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;
  var $i99: i8;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i64;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i64;
  var $i131: i1;
  var $p132: ref;
  var $p133: ref;
  var $p135: ref;
  var $i136: i16;
  var $i137: i32;
  var $p139: ref;
  var $i140: i16;
  var $i141: i32;
  var $p143: ref;
  var $p144: ref;
  var $p146: ref;
  var $p147: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i64;
  var $i152: i1;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i64;
  var $p157: ref;
  var $p158: ref;
  var $p160: ref;
  var $i161: i8;
  var $i162: i32;
  var $p165: ref;
  var $i166: i8;
  var $i167: i32;
  var $p168: ref;
  var $p169: ref;
  var $i170: i32;
  var $i171: i1;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i64;
  var $i177: i1;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p184: ref;
  var $i185: i8;
  var $i186: i32;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p196: ref;
  var $p198: ref;
  var $p200: ref;
  var $p201: ref;
  var $i202: i64;
  var $p204: ref;
  var $p207: ref;
  var $p208: ref;
  var $i209: i32;
  var $i210: i1;
  var $i211: i1;
  var $p212: ref;
  var $p213: ref;
  var $i178: i32;
  var $i42: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i64;
  var vslice_dummy_var_23: i64;
  var vslice_dummy_var_24: i64;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i64;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $p8 := interface_to_usbdev($p0);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, hid_debug);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i32($i21, 0);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i23 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i23, 0);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $p43 := hid_allocate_device();
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $i45 := IS_ERR($p44);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i8($i45);
    call {:si_unique_call 46} {:cexpr "tmp___2"} boogie_si_record_i8($i46);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i46);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p43);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} usb_set_intfdata($p0, $p51);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(8000, 1));
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, usb_hid_driver);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(8352, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p54, hid_pidff_init);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(8360, 1));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, hiddev_connect);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(8368, 1));
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, hiddev_disconnect);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(8376, 1));
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, hiddev_hid_event);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(8384, 1));
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p58, hiddev_report_event);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(6568, 1)), $mul.ref(0, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p61, $p59);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(52, 1));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p62, 3);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(8, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i65 := $load.i16($M.0, $p64);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i65);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(56, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i66);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(10, 1));
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.0, $p69);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(60, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(8088, 1)), $mul.ref(0, 1));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, 0);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(56, 1));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i16($i76);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i16($i78);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(60, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i16($i81);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i82);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i16($i83);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $i85 := usbhid_lookup_quirk($i79, $i84);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(8040, 1));
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p86, $i85);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p88, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(7, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 2);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i93 == 1);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p96, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(7, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.0, $p98);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i99);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 0);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p8, $mul.ref(0, 2040)), $mul.ref(1904, 1));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p104);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, 0);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p8, $mul.ref(0, 2040)), $mul.ref(1896, 1));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p113);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i115 := $ne.i64($i114, 0);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(8088, 1));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $i130 := strlen($p129);
    call {:si_unique_call 55} {:cexpr "tmp___3"} boogie_si_record_i64($i130);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i131 := $eq.i64($i130, 0);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(8216, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} vslice_dummy_var_26 := usb_make_path($p8, $p144, 64);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(8216, 1));
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p146);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} vslice_dummy_var_27 := strlcat($p147, .str.49, 64);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(8216, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p149);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $i151 := strlen($p150);
    call {:si_unique_call 60} {:cexpr "len"} boogie_si_record_i64($i151);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i152 := $ule.i64($i151, 62);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(16, 1));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i166 := $load.i8($M.0, $p165);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i167 := $zext.i8.i32($i166);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(8280, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p168);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $i170 := usb_string($p8, $i167, $p169, 64);
    call {:si_unique_call 63} {:cexpr "tmp___4"} boogie_si_record_i32($i170);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i171 := $sle.i32($i170, 0);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $p174 := kzalloc(10768, 208);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p175 := $bitcast.ref.ref($p174);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i176 := $p2i.ref.i64($p175);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i177 := $eq.i64($i176, 0);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p180, $p174);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p175, $mul.ref(0, 10768)), $mul.ref(0, 1));
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p181, $p43);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p175, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p182, $p0);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i185 := $load.i8($M.0, $p184);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i32($i185);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p175, $mul.ref(0, 10768)), $mul.ref(16, 1));
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p187, $i186);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p175, $mul.ref(0, 10768)), $mul.ref(10680, 1));
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} __init_waitqueue_head($p188, .str.51, $p2);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p175, $mul.ref(0, 10768)), $mul.ref(10600, 1));
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} __init_work($p189, 0);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p190, 137438953408);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 10768)), $mul.ref(10600, 1)), $mul.ref(0, 1));
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p192);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p194 := $bitcast.ref.ref($p4);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 68} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p193, $p194, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 10768)), $mul.ref(10600, 1)), $mul.ref(32, 1));
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} lockdep_init_map($p196, .str.52, $p3, 0);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 10768)), $mul.ref(10600, 1)), $mul.ref(8, 1));
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} INIT_LIST_HEAD($p198);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 10768)), $mul.ref(10600, 1)), $mul.ref(24, 1));
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p200, hid_reset);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p175, $mul.ref(0, 10768)), $mul.ref(10456, 1));
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i202 := $p2i.ref.i64($p43);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} vslice_dummy_var_29 := reg_timer_2($p201, hid_retry_timeout, $i202);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p175, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} vslice_dummy_var_30 := spinlock_check($p204);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 10768)), $mul.ref(10376, 1)), $mul.ref(0, 1));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p207);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} __raw_spin_lock_init($p208, .str.53, $p5);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $i209 := hid_add_device($p43);
    call {:si_unique_call 75} {:cexpr "ret"} boogie_si_record_i32($i209);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i210 := $ne.i32($i209, 0);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb50:
    assume $i210 == 1;
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i211 := $ne.i32($i209, $sub.i32(0, 19));
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p213 := $bitcast.ref.ref($p175);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} kfree($p213);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i178 := $i209;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} hid_destroy_device($p43);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i42 := $i178;
    goto $bb17;

  $bb52:
    assume $i211 == 1;
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} dev_err.ref.ref.i32($p212, .str.54, $i209);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb46:
    assume $i177 == 1;
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i178 := $sub.i32(0, 12);
    goto $bb48;

  $bb43:
    assume $i171 == 1;
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(8280, 1)), $mul.ref(0, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p173, 0);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i152 == 1;
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(8216, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p153);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($p154, $mul.ref($i151, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i156 := $sub.i64(64, $i151);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(0, 1));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.0, $p157);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p158, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i161 := $load.i8($M.0, $p160);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i162 := $zext.i8.i32($i161);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} vslice_dummy_var_28 := snprintf.ref.i64.ref.i32($p155, $i156, .str.50, $i162);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i131 == 1;
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(8088, 1));
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(8, 1));
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i136 := $load.i16($M.0, $p135);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i137 := $zext.i16.i32($i136);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(10, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i140 := $load.i16($M.0, $p139);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i141 := $zext.i16.i32($i140);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} vslice_dummy_var_25 := snprintf.ref.i64.ref.i32.i32($p133, 128, .str.48, $i137, $i141);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb31:
    assume $i115 == 1;
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p8, $mul.ref(0, 2040)), $mul.ref(1904, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p117);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i119 := $ne.i64($i118, 0);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(8088, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p8, $mul.ref(0, 2040)), $mul.ref(1896, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} vslice_dummy_var_24 := strlcat($p124, $p126, 128);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i119 == 1;
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(8088, 1));
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} vslice_dummy_var_23 := strlcat($p121, .str.47, 128);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb28:
    assume $i106 == 1;
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(8088, 1));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p8, $mul.ref(0, 2040)), $mul.ref(1904, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} vslice_dummy_var_22 := strlcpy($p108, $p110, 128);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i101 == 1;
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(68, 1));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, 2);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i93 == 1;
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p43, $mul.ref(0, 8600)), $mul.ref(68, 1));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, 1);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i47 == 1;
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p43);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i49 := PTR_ERR($p48);
    call {:si_unique_call 48} {:cexpr "tmp___1"} boogie_si_record_i64($i49);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i64.i32($i49);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i42 := $i50;
    goto $bb17;

  $bb15:
    assume $i40 == 1;
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} dev_err.ref.ref($p41, .str.46);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 19);
    goto $bb17;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i24, $i25 := 0, 0;
    goto $bb7;

  $bb7:
    call $p26, $p27, $i28, $p30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i24, $i25, $i39 := usbhid_probe_loop_$bb7($p7, $p19, $p26, $p27, $i28, $p30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i24, $i25, $i39);
    goto $bb7_last;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i25);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p27, $mul.ref($i28, 72)), $mul.ref(0, 1));
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $i31 := usb_endpoint_is_int_in($p30);
    call {:si_unique_call 40} {:cexpr "tmp___0"} boogie_si_record_i32($i31);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i34 := $i24;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i25, 1);
    call {:si_unique_call 42} {:cexpr "n"} boogie_si_record_i32($i35);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p19);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i38 := $ugt.i32($i37, $i35);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i39 := $i34;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i23 := $i39;
    goto $bb6;

  $bb12:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i24, $i25 := $i34, $i35;
    goto $bb12_dummy;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i24, 1);
    call {:si_unique_call 41} {:cexpr "has_in"} boogie_si_record_i32($i33);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb11;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(0, 1));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} vslice_dummy_var_21 := printk.ref.ref.i32(.str.45, .str.25, $i16);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_209;
}



const usbhid_disconnect: ref;

axiom usbhid_disconnect == $sub.ref(0, 256191);

procedure usbhid_disconnect($p0: ref);
  free requires assertsPassed;



implementation usbhid_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 79} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 81} {:cexpr "tmp___0"} boogie_si_record_i64($i9);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 84} {:cexpr "tmp___1"} boogie_si_record_i64($i14);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} spin_lock_irq($p19);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p18, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} set_bit(7, $p20);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} spin_unlock_irq($p21);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} hid_destroy_device($p2);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p18);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} kfree($p22);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} warn_slowpath_null(.str.25, 1381);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hid_suspend: ref;

axiom hid_suspend == $sub.ref(0, 257223);

procedure hid_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr, $M.37, $M.11, $M.13, $M.15, $M.17, $M.10, $M.12, $M.14, $M.16, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.27, $M.18, $M.20, $M.22, $M.24, $M.19, $M.21, $M.23, $M.25, $M.42, assertsPassed;



implementation hid_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i56: i32;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i64: i32;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i24;
  var $i103: i24;
  var $i104: i24;
  var $p105: ref;
  var $p106: ref;
  var $i107: i8;
  var $i108: i64;
  var $i109: i64;
  var $i110: i64;
  var $i111: i1;
  var $p112: ref;
  var $i54: i32;
  var $i55: i8;
  var $i113: i1;
  var $i58: i32;
  var vslice_dummy_var_31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p4, $i1);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $p5 := usb_get_intfdata($p0);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 1024);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p6, $mul.ref(0, 8600)), $mul.ref(7992, 1));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i82 := 0;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p9, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} spin_lock_irq($p83);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p9, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} set_bit(5, $p84);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p9, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} spin_unlock_irq($p85);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} $i86 := usbhid_wait_io($p6);
    call {:si_unique_call 131} {:cexpr "tmp___5"} boogie_si_record_i32($i86);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i86, 0);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i88 := $i82;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i64 := $i88;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} hid_cancel_delayed_stuff($p9);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} hid_cease_io($p9);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.1, $p89);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i90, 1024);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p96, .str.7);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p97, .str.57);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p98, .str.25);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p99, .str.58);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i102 := $load.i24($M.7, $p101);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i103 := $and.i24($i102, $sub.i24(0, 262144));
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i104 := $or.i24($i103, 1561);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p101, $i104);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p105, 0);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.8, $p106);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i64($i107);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i109 := $and.i64($i108, 1);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $i110 := ldv__builtin_expect($i109, 0);
    call {:si_unique_call 135} {:cexpr "tmp___7"} boogie_si_record_i64($i110);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i111 := $ne.i64($i110, 0);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i58 := $i64;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $r := $i58;
    return;

  $bb51:
    assume $i111 == 1;
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} __dynamic_dev_dbg.ref.ref.ref($p3, $p112, .str.58);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb45:
    assume $i92 == 1;
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p9, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $i94 := constant_test_bit(10, $p93);
    call {:si_unique_call 133} {:cexpr "tmp___6"} boogie_si_record_i32($i94);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb47:
    assume $i95 == 1;
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i54, $i55 := $sub.i32(0, 16), 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i8.i1($i55);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} vslice_dummy_var_31 := hid_resume_common($p6, $i113);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i58 := $i54;
    goto $bb29;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i87 == 1;
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i88 := $sub.i32(0, 5);
    goto $bb44;

  $bb36:
    assume $i68 == 1;
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p6, $mul.ref(0, 8600)), $mul.ref(7992, 1));
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 344)), $mul.ref(200, 1));
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb38;

  $bb39:
    assume $i74 == 1;
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p6, $mul.ref(0, 8600)), $mul.ref(7992, 1));
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 344)), $mul.ref(200, 1));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.1, $p79);
    call {:si_unique_call 125} $i81 := devirtbounce($p78, $p6, $i80);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 126} {:cexpr "status"} boogie_si_record_i32($i81);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i82 := $i81;
    goto $bb41;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i14 := hidinput_count_leds($p6);
    call {:si_unique_call 94} {:cexpr "ledcount"} boogie_si_record_i32($i14);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p9, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} spin_lock_irq($p15);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $i17 := constant_test_bit(4, $p16);
    call {:si_unique_call 97} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i18 == 1);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} usbhid_mark_busy($p9);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p9, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} spin_unlock_irq($p63);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 16);
    goto $bb29;

  $bb3:
    assume $i18 == 1;
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p9, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $i20 := constant_test_bit(6, $p19);
    call {:si_unique_call 99} {:cexpr "tmp___1"} boogie_si_record_i32($i20);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} usbhid_mark_busy($p9);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p9, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} spin_unlock_irq($p62);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 16);
    goto $bb29;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p9, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i23 := constant_test_bit(2, $p22);
    call {:si_unique_call 103} {:cexpr "tmp___2"} boogie_si_record_i32($i23);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} usbhid_mark_busy($p9);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p9, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} spin_unlock_irq($p61);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 16);
    goto $bb29;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p9, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $i26 := constant_test_bit(1, $p25);
    call {:si_unique_call 107} {:cexpr "tmp___3"} boogie_si_record_i32($i26);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} usbhid_mark_busy($p9);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p9, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} spin_unlock_irq($p60);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 16);
    goto $bb29;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p9, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $i29 := constant_test_bit(10, $p28);
    call {:si_unique_call 111} {:cexpr "tmp___4"} boogie_si_record_i32($i29);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} usbhid_mark_busy($p9);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p9, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} spin_unlock_irq($p59);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 16);
    goto $bb29;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i14, 0);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i31 == 1);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i32 := $M.2;
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i33 == 1);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} usbhid_mark_busy($p9);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p9, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} spin_unlock_irq($p57);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 16);
    goto $bb29;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p9, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} set_bit(5, $p34);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p9, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} spin_unlock_irq($p35);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 8600)), $mul.ref(7992, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i56 := 0;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i64 := $i56;
    goto $bb35;

  $bb18:
    assume $i39 == 1;
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 8600)), $mul.ref(7992, 1));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 344)), $mul.ref(200, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb20;

  $bb21:
    assume $i45 == 1;
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 8600)), $mul.ref(7992, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 344)), $mul.ref(200, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.1, $p50);
    call {:si_unique_call 120} $i52 := devirtbounce($p49, $p6, $i51);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 121} {:cexpr "status"} boogie_si_record_i32($i52);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i52, 0);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i56 := $i52;
    goto $bb27;

  $bb23:
    assume $i53 == 1;
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i54, $i55 := $i52, 0;
    goto $bb25;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb14;
}



const hid_resume: ref;

axiom hid_resume == $sub.ref(0, 258255);

procedure hid_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr, $M.37, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.27, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.24, $M.42, assertsPassed;



implementation hid_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} $p2 := usb_get_intfdata($p0);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} $i8 := constant_test_bit(8, $p7);
    call {:si_unique_call 140} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $i10 := hid_resume_common($p3, 1);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 142} {:cexpr "status"} boogie_si_record_i32($i10);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str.7);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.59);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p13, .str.25);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p14, .str.60);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.7, $p16);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 1579);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p16, $i19);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p20, 0);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.8, $p21);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 144} {:cexpr "tmp___1"} boogie_si_record_i64($i25);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} __dynamic_dev_dbg.ref.ref.ref.i32($p1, $p27, .str.60, $i10);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hid_reset_resume: ref;

axiom hid_reset_resume == $sub.ref(0, 259287);

procedure hid_reset_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $M.37, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.27, $CurrAddr, $M.42, assertsPassed, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.24;



implementation hid_reset_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} clear_bit(5, $p6);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $i7 := hid_post_reset($p0);
    call {:si_unique_call 149} {:cexpr "status"} boogie_si_record_i32($i7);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i8 := $sge.i32($i7, 0);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i28 := $i7;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 8600)), $mul.ref(7992, 1));
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 8600)), $mul.ref(7992, 1));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 344)), $mul.ref(216, 1));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 8600)), $mul.ref(7992, 1));
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 344)), $mul.ref(216, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    call {:si_unique_call 150} $i25 := devirtbounce.1($p24, $p2);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 151} {:cexpr "tmp___0"} boogie_si_record_i32($i25);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 0);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $i7;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb11;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i27 := $i25;
    goto $bb10;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const hid_pre_reset: ref;

axiom hid_pre_reset == $sub.ref(0, 260319);

procedure hid_pre_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.13, $M.15, $M.17;



implementation hid_pre_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} spin_lock_irq($p6);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} set_bit(4, $p7);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} spin_unlock_irq($p8);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} hid_cease_io($p5);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const hid_post_reset: ref;

axiom hid_post_reset == $sub.ref(0, 261351);

procedure hid_post_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.24;



implementation hid_post_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i50: i32;
  var $i51: i1;
  var $i18: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $p1 := interface_to_usbdev($p0);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $p2 := usb_get_intfdata($p0);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 8600)), $mul.ref(8, 1));
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i10);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $p12 := kmalloc($i11, 208);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 8600)), $mul.ref(8, 1));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $i25 := hid_get_class_descriptor($p1, $i22, 34, $p12, $i24);
    call {:si_unique_call 162} {:cexpr "status"} boogie_si_record_i32($i25);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 0);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 8600)), $mul.ref(0, 1));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 8600)), $mul.ref(8, 1));
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i33);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $i35 := memcmp($p12, $p31, $i34);
    call {:si_unique_call 166} {:cexpr "status"} boogie_si_record_i32($i35);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} kfree($p12);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} spin_lock_irq($p40);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p6, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} clear_bit(4, $p41);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} spin_unlock_irq($p42);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p44, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} vslice_dummy_var_35 := hid_set_idle($p1, $i48, 0, 0);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $i50 := hid_start_in($p3);
    call {:si_unique_call 174} {:cexpr "status"} boogie_si_record_i32($i50);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i50, 0);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} usbhid_restart_queues($p6);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb20:
    assume $i51 == 1;
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} hid_io_error($p3);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, hid_debug);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  $bb16:
    assume $i38 == 1;
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} vslice_dummy_var_34 := printk.ref.ref(.str.38, .str.25);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, hid_debug);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} kfree($p12);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  $bb10:
    assume $i28 == 1;
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} vslice_dummy_var_33 := printk.ref.ref(.str.37, .str.25);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, hid_debug);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} vslice_dummy_var_32 := printk.ref.ref(.str.36, .str.25);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 262383);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const usb_get_intfdata: ref;

axiom usb_get_intfdata == $sub.ref(0, 263415);

procedure usb_get_intfdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intfdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 264447);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 179} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const hid_get_class_descriptor: ref;

axiom hid_get_class_descriptor == $sub.ref(0, 265479);

procedure hid_get_class_descriptor($p0: ref, $i1: i32, $i2: i8, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation hid_get_class_descriptor($p0: ref, $i1: i32, $i2: i8, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $i5: i64;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i16;
  var $i13: i16;
  var $i14: i32;
  var $i15: i16;
  var $i16: i16;
  var $i17: i32;
  var $i18: i16;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} {:cexpr "hid_get_class_descriptor:arg:ifnum"} boogie_si_record_i32($i1);
    call {:si_unique_call 182} {:cexpr "hid_get_class_descriptor:arg:type"} boogie_si_record_i8($i2);
    call {:si_unique_call 183} {:cexpr "hid_get_class_descriptor:arg:size"} boogie_si_record_i32($i4);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    call {:si_unique_call 184} cmdloc_dummy_var_4 := $memset.i8(cmdloc_dummy_var_3, $p3, 0, $i5, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_4;
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i6 := 4;
    goto $bb1;

  $bb1:
    call $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24 := hid_get_class_descriptor_loop_$bb1($p0, $i1, $i2, $p3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24);
    goto $bb1_last;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $i7 := __create_pipe($p0, 0);
    call {:si_unique_call 186} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, $sub.i32(0, 2147483520));
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i16($i2);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i11 := $shl.i32($i10, 8);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i1);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i4);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $i19 := usb_control_msg($p0, $i8, 6, $sub.i8(0, 127), $i12, $i15, $p3, $i18, 5000);
    call {:si_unique_call 188} {:cexpr "result"} boogie_si_record_i32($i19);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i6, 1);
    call {:si_unique_call 189} {:cexpr "retries"} boogie_si_record_i32($i20);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i19, $i4);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i20, 0);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i23 := $and.i1($i21, $i22);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i24 := $i19;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb2:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i20;
    goto $bb2_dummy;

  $bb2_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_874;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 266511);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} free_($p0);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    return;
}



const memcmp: ref;

axiom memcmp == $sub.ref(0, 267543);

procedure memcmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 268575);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_lock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} _raw_spin_lock_irq($p2);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 269607);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 193} devirtbounce.2(0, $p1, $i0, $p1);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 270639);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} _raw_spin_unlock_irq($p2);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    return;
}



const hid_set_idle: ref;

axiom hid_set_idle == $sub.ref(0, 271671);

procedure hid_set_idle($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation hid_set_idle($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i16;
  var $i13: i32;
  var $i14: i16;
  var $i15: i16;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} {:cexpr "hid_set_idle:arg:ifnum"} boogie_si_record_i32($i1);
    call {:si_unique_call 196} {:cexpr "hid_set_idle:arg:report"} boogie_si_record_i32($i2);
    call {:si_unique_call 197} {:cexpr "hid_set_idle:arg:idle"} boogie_si_record_i32($i3);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $i4 := __create_pipe($p0, 0);
    call {:si_unique_call 199} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, $sub.i32(0, 2147483648));
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i3, 8);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i7);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i2);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i10 := $sext.i16.i32($i9);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i8, $i10);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i1);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $i18 := usb_control_msg($p0, $i5, 10, 33, $i14, $i17, $0.ref, 0, 5000);
    call {:si_unique_call 201} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;
}



const hid_start_in: ref;

axiom hid_start_in == $sub.ref(0, 272703);

procedure hid_start_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation hid_start_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $p5 := spinlock_check($p4);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 204} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8084, 1));
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8040, 1));
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 1024);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} spin_unlock_irqrestore($p35, $i6);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $i15 := constant_test_bit(7, $p14);
    call {:si_unique_call 206} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb21;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $i18 := constant_test_bit(5, $p17);
    call {:si_unique_call 208} {:cexpr "tmp___1"} boogie_si_record_i32($i18);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb20;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $i21 := test_and_set_bit(3, $p20);
    call {:si_unique_call 210} {:cexpr "tmp___2"} boogie_si_record_i32($i21);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb19;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(24, 1));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $i25 := usb_submit_urb($p24, 32);
    call {:si_unique_call 212} {:cexpr "rc"} boogie_si_record_i32($i25);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i26 == 1);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} clear_bit(11, $p30);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i31 := $i25;
    goto $bb18;

  $bb12:
    assume $i26 == 1;
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} clear_bit(3, $p27);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i25, $sub.i32(0, 28));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} set_bit(11, $p29);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;
}



const hid_io_error: ref;

axiom hid_io_error == $sub.ref(0, 273735);

procedure hid_io_error($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.24;



implementation hid_io_error($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $p52: ref;
  var vslice_dummy_var_36: i1;
  var vslice_dummy_var_37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $p5 := spinlock_check($p4);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 219} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $i8 := constant_test_bit(7, $p7);
    call {:si_unique_call 221} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10584, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, jiffies);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64($i11, $i12);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 125);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i15 := $slt.i64($i14, 0);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10592, 1));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10592, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i27 := $ule.i32($i26, 99);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10584, 1));
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, jiffies);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i35 := $sub.i64($i33, $i34);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i36 := $slt.i64($i35, 0);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10592, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i47 := msecs_to_jiffies($i46);
    call {:si_unique_call 231} {:cexpr "tmp___4"} boogie_si_record_i64($i47);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10456, 1));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, jiffies);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i50 := $add.i64($i47, $i49);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} vslice_dummy_var_37 := ldv_mod_timer_17($p48, $i50);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} spin_unlock_irqrestore($p52, $i6);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $i38 := constant_test_bit(11, $p37);
    call {:si_unique_call 226} {:cexpr "tmp___2"} boogie_si_record_i32($i38);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume $i39 == 1;
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i41 := test_and_set_bit(4, $p40);
    call {:si_unique_call 228} {:cexpr "tmp___3"} boogie_si_record_i32($i41);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i42 == 1;
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10600, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} vslice_dummy_var_36 := schedule_work($p43);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10592, 1));
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i30 := $mul.i32($i29, 2);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10592, 1));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10592, 1));
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 13);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $i21 := msecs_to_jiffies(1000);
    call {:si_unique_call 224} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, jiffies);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i21, $i22);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10584, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, $i23);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10592, 1));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 0);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usbhid_restart_queues: ref;

axiom usbhid_restart_queues == $sub.ref(0, 274767);

procedure usbhid_restart_queues($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr;



implementation usbhid_restart_queues($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $i10 := constant_test_bit(1, $p9);
    call {:si_unique_call 237} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} vslice_dummy_var_39 := usbhid_restart_ctrl_queue($p0);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $i6 := constant_test_bit(2, $p5);
    call {:si_unique_call 234} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} vslice_dummy_var_38 := usbhid_restart_out_queue($p0);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 275799);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const usbhid_restart_out_queue: ref;

axiom usbhid_restart_out_queue == $sub.ref(0, 276831);

procedure usbhid_restart_out_queue($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr;



implementation usbhid_restart_out_queue($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i24;
  var $i31: i24;
  var $i32: i24;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $p4 := usb_get_intfdata($p3);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $i10 := constant_test_bit(4, $p9);
    call {:si_unique_call 243} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $i13 := constant_test_bit(5, $p12);
    call {:si_unique_call 245} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(10344, 1));
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(10345, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i17, $i20);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    call {:si_unique_call 246} {:cexpr "kicked"} boogie_si_record_i32($i22);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i8 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p24, .str.7);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p25, .str.24);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p26, .str.25);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p27, .str.26);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i30 := $load.i24($M.7, $p29);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i31 := $and.i24($i30, $sub.i24(0, 262144));
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i32 := $or.i24($i31, 199);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p29, $i32);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p33, 0);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.8, $p34);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i64($i35);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i37 := $and.i64($i36, 1);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $i38 := ldv__builtin_expect($i37, 0);
    call {:si_unique_call 248} {:cexpr "tmp___2"} boogie_si_record_i64($i38);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $i49 := usb_autopm_get_interface_async($p48);
    call {:si_unique_call 251} {:cexpr "r"} boogie_si_record_i32($i49);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i49, 0);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $i52 := constant_test_bit(5, $p51);
    call {:si_unique_call 253} {:cexpr "tmp___3"} boogie_si_record_i32($i52);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} set_bit(2, $p56);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $i57 := hid_submit_out($p5);
    call {:si_unique_call 257} {:cexpr "tmp___4"} boogie_si_record_i32($i57);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(10680, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} __wake_up($p62, 3, 1, $0.ref);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i58 == 1;
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} clear_bit(2, $p59);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} usb_autopm_put_interface_async($p61);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i53 == 1;
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} usb_autopm_put_interface_no_suspend($p55);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i8 := $i49;
    goto $bb3;

  $bb16:
    assume $i50 == 1;
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i8 := $i49;
    goto $bb3;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(10344, 1));
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(10345, 1));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p1, $p40, .str.26, $i43, $i46);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const usbhid_restart_ctrl_queue: ref;

axiom usbhid_restart_ctrl_queue == $sub.ref(0, 277863);

procedure usbhid_restart_ctrl_queue($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr;



implementation usbhid_restart_ctrl_queue($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i24;
  var $i43: i24;
  var $i44: i24;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i20: i32;
  var vslice_dummy_var_40: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $p4 := usb_get_intfdata($p3);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 263} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i8);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 265} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i8, 0);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} vslice_dummy_var_40 := ldv__builtin_expect($i16, 0);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p5);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $i22 := constant_test_bit(4, $p21);
    call {:si_unique_call 269} {:cexpr "tmp___1"} boogie_si_record_i32($i22);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $i25 := constant_test_bit(5, $p24);
    call {:si_unique_call 271} {:cexpr "tmp___2"} boogie_si_record_i32($i25);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(6208, 1));
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(6209, 1));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i29, $i32);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    call {:si_unique_call 272} {:cexpr "kicked"} boogie_si_record_i32($i34);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i20 := $i34;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p36, .str.7);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p37, .str.29);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p38, .str.25);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p39, .str.26);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i42 := $load.i24($M.7, $p41);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i43 := $and.i24($i42, $sub.i24(0, 262144));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i44 := $or.i24($i43, 238);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p41, $i44);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p45, 0);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.8, $p46);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i64($i47);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i49 := $and.i64($i48, 1);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i50 := ldv__builtin_expect($i49, 0);
    call {:si_unique_call 274} {:cexpr "tmp___3"} boogie_si_record_i64($i50);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i61 := usb_autopm_get_interface_async($p60);
    call {:si_unique_call 277} {:cexpr "r"} boogie_si_record_i32($i61);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i61, 0);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i64 := constant_test_bit(5, $p63);
    call {:si_unique_call 279} {:cexpr "tmp___4"} boogie_si_record_i32($i64);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} set_bit(1, $p68);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i69 := hid_submit_ctrl($p5);
    call {:si_unique_call 283} {:cexpr "tmp___5"} boogie_si_record_i32($i69);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(10680, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} __wake_up($p74, 3, 1, $0.ref);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i70 == 1;
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} clear_bit(1, $p71);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} usb_autopm_put_interface_async($p73);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i65 == 1;
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} usb_autopm_put_interface_no_suspend($p67);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i20 := $i61;
    goto $bb6;

  $bb19:
    assume $i62 == 1;
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i20 := $i61;
    goto $bb6;

  $bb16:
    assume $i51 == 1;
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(6208, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(6209, 1));
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p1, $p52, .str.26, $i55, $i58);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb6;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb6;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} warn_slowpath_null(.str.25, 232);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 278895);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 288} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 279927);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 280959);

procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    return;
}



const usb_autopm_get_interface_async: ref;

axiom usb_autopm_get_interface_async == $sub.ref(0, 281991);

procedure usb_autopm_get_interface_async($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_autopm_get_interface_async($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 1} true;
    call {:si_unique_call 290} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 291} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_autopm_put_interface_no_suspend: ref;

axiom usb_autopm_put_interface_no_suspend == $sub.ref(0, 283023);

procedure usb_autopm_put_interface_no_suspend($p0: ref);
  free requires assertsPassed;



implementation usb_autopm_put_interface_no_suspend($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 284055);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 293} devirtbounce.2(0, $p1, $i0, $p1);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    return;
}



const hid_submit_ctrl: ref;

axiom hid_submit_ctrl == $sub.ref(0, 285087);

procedure hid_submit_ctrl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation hid_submit_ctrl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i64;
  var $p26: ref;
  var $i27: i8;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i64;
  var $p66: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i16;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $p97: ref;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $i103: i32;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i32;
  var $i119: i8;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i8;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i32;
  var $i132: i16;
  var $i133: i32;
  var $i134: i32;
  var $i135: i32;
  var $p136: ref;
  var $i137: i32;
  var $i138: i16;
  var $i139: i32;
  var $i140: i32;
  var $i141: i16;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $i147: i16;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i16;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i8;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i16;
  var $i168: i32;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $i172: i16;
  var $i173: i32;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $i177: i16;
  var $i178: i32;
  var $p180: ref;
  var $p181: ref;
  var $i182: i32;
  var $i183: i1;
  var $p184: ref;
  var $i186: i64;
  var $p187: ref;
  var $i185: i32;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var vslice_dummy_var_41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(6209, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(64, 1)), $mul.ref($i7, 24)), $mul.ref(8, 1));
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(6209, 1));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(64, 1)), $mul.ref($i15, 24)), $mul.ref(16, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(6209, 1));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(64, 1)), $mul.ref($i23, 24)), $mul.ref(0, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    call {:si_unique_call 294} {:cexpr "dir"} boogie_si_record_i8($i27);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p11, $mul.ref(0, 2088)), $mul.ref(2076, 1));
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i29, 1);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i31 := $lshr.i32($i30, 3);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p11, $mul.ref(0, 2088)), $mul.ref(16, 1));
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i31, $i35);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 1);
    call {:si_unique_call 295} {:cexpr "len"} boogie_si_record_i32($i37);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i27);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i39 == 1);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1)), $mul.ref(0, 1));
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p72, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $i74 := __create_pipe($p73, 0);
    call {:si_unique_call 299} {:cexpr "tmp___0"} boogie_si_record_i32($i74);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i75 := $or.i32($i74, $sub.i32(0, 2147483520));
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(48, 1));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i75);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1)), $mul.ref(0, 1));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p84, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(48, 1));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i90 := usb_maxpacket($p85, $i89, 0);
    call {:si_unique_call 301} {:cexpr "tmp___1"} boogie_si_record_i16($i90);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i90);
    call {:si_unique_call 302} {:cexpr "maxpacket"} boogie_si_record_i32($i91);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i92 := $sgt.i32($i91, 0);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i103 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(48, 1));
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, $i103);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1)), $mul.ref(0, 1));
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p112, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(48, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p115, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p116, $p113);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i27);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i118 := $or.i32($i117, 33);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i32.i8($i118);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(56, 1));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p122, $i119);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i32($i27);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 0);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i125 := (if $i124 == 1 then 9 else 1);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i32.i8($i125);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(56, 1));
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p128, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p129, $i126);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p11, $mul.ref(0, 2088)), $mul.ref(20, 1));
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i132 := $trunc.i32.i16($i131);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i133 := $zext.i16.i32($i132);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i134 := $add.i32($i133, 1);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i135 := $shl.i32($i134, 8);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p11, $mul.ref(0, 2088)), $mul.ref(16, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i138 := $trunc.i32.i16($i137);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i139 := $zext.i16.i32($i138);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i140 := $or.i32($i135, $i139);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i141 := $trunc.i32.i16($i140);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(56, 1));
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p143, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p144, $i141);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(16, 1));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i32.i16($i146);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(56, 1));
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p149, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p150, $i147);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i151 := $trunc.i32.i16($i37);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(56, 1));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p153, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p154, $i151);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, hid_debug);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i156 := $ne.i32($i155, 0);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(48, 1));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $i182 := usb_submit_urb($p181, 32);
    call {:si_unique_call 310} {:cexpr "r"} boogie_si_record_i32($i182);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i183 := $slt.i32($i182, 0);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i183} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i186 := $load.i64($M.0, jiffies);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(6232, 1));
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p187, $i186);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i185 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $r := $i185;
    return;

  $bb16:
    assume $i183 == 1;
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} dev_err.ref.ref.i32($p184, .str.33, $i182);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i185 := $i182;
    goto $bb18;

  $bb13:
    assume $i156 == 1;
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(56, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.0, $p157);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p158, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i160 := $load.i8($M.0, $p159);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i161 := $zext.i8.i32($i160);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 9);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p163 := (if $i162 == 1 then .str.31 else .str.32);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(56, 1));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.0, $p164);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p165, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i167 := $load.i16($M.0, $p166);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i168 := $zext.i16.i32($i167);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(56, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.0, $p169);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p170, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i172 := $load.i16($M.0, $p171);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i173 := $zext.i16.i32($i172);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(56, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.0, $p174);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p175, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i177 := $load.i16($M.0, $p176);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i178 := $zext.i16.i32($i177);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} vslice_dummy_var_41 := printk.ref.ref.ref.i32.i32.i32(.str.30, .str.25, $p163, $i168, $i173, $i178);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i92 == 1;
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i37, $i91);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i93, $sub.i32(0, 1));
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i95 := $sdiv.i32($i94, $i91);
    call {:si_unique_call 305} {:cexpr "padlen"} boogie_si_record_i32($i95);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i96 := $mul.i32($i95, $i91);
    call {:si_unique_call 306} {:cexpr "padlen"} boogie_si_record_i32($i96);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(20, 1));
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i99 := $ugt.i32($i96, $i98);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i102 := $i96;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i103 := $i102;
    goto $bb12;

  $bb9:
    assume $i99 == 1;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(20, 1));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    call {:si_unique_call 307} {:cexpr "padlen"} boogie_si_record_i32($i101);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i102 := $i101;
    goto $bb11;

  $bb1:
    assume $i39 == 1;
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1)), $mul.ref(0, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p45, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i47 := __create_pipe($p46, 0);
    call {:si_unique_call 297} {:cexpr "tmp"} boogie_si_record_i32($i47);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i47, $sub.i32(0, 2147483648));
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(48, 1));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i48);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(48, 1));
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i37);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p19);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i56 == 1;
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(6216, 1));
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i37);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.0;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 303} cmdloc_dummy_var_7 := $memcpy.i8(cmdloc_dummy_var_5, cmdloc_dummy_var_6, $p58, $p19, $i59, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} kfree($p19);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(6209, 1));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(64, 1)), $mul.ref($i63, 24)), $mul.ref(16, 1));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $0.ref);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const usb_autopm_put_interface_async: ref;

axiom usb_autopm_put_interface_async == $sub.ref(0, 286119);

procedure usb_autopm_put_interface_async($p0: ref);
  free requires assertsPassed;



implementation usb_autopm_put_interface_async($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 287151);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_maxpacket: ref;

axiom usb_maxpacket == $sub.ref(0, 288183);

procedure usb_maxpacket($p0: ref, $i1: i32, $i2: i32) returns ($r: i16);
  free requires assertsPassed;



implementation usb_maxpacket($p0: ref, $i1: i32, $i2: i32) returns ($r: i16)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i18: i64;
  var $p20: ref;
  var $p21: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i35: i64;
  var $p37: ref;
  var $p38: ref;
  var $p22: ref;
  var $i39: i64;
  var $i40: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i16;
  var $i41: i16;
  var vslice_dummy_var_42: i64;
  var vslice_dummy_var_43: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} {:cexpr "usb_maxpacket:arg:pipe"} boogie_si_record_i32($i1);
    call {:si_unique_call 314} {:cexpr "usb_maxpacket:arg:is_out"} boogie_si_record_i32($i2);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i3 := $ashr.i32($i1, 15);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 15);
    call {:si_unique_call 315} {:cexpr "epnum"} boogie_si_record_i32($i4);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 0);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i1, 128);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    call {:si_unique_call 319} {:cexpr "__ret_warn_on___0"} boogie_si_record_i32($i25);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 321} {:cexpr "tmp___0"} boogie_si_record_i64($i29);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i25, 0);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} vslice_dummy_var_43 := ldv__builtin_expect($i33, 0);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i4);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1616, 1)), $mul.ref($i35, 8));
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    assume {:verifier.code 0} true;
    $p22 := $p38;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p22);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p22, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $i43 := usb_endpoint_maxp($p42);
    call {:si_unique_call 327} {:cexpr "tmp___1"} boogie_si_record_i32($i43);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i41 := $i44;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb10:
    assume $i40 == 1;
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb12;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} warn_slowpath_null(.str.34, 1849);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i1, 128);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 316} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i8);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 318} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i8, 0);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} vslice_dummy_var_42 := ldv__builtin_expect($i16, 0);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i4);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1744, 1)), $mul.ref($i18, 8));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p22 := $p21;
    goto $bb6;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} warn_slowpath_null(.str.34, 1846);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const usb_submit_urb: ref;

axiom usb_submit_urb == $sub.ref(0, 289215);

procedure usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 328} {:cexpr "usb_submit_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 1} true;
    call {:si_unique_call 329} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 330} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 290247);

procedure dev_err.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32);



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    return;
}



const usb_endpoint_maxp: ref;

axiom usb_endpoint_maxp == $sub.ref(0, 291279);

procedure usb_endpoint_maxp($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_maxp($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const hid_submit_out: ref;

axiom hid_submit_out == $sub.ref(0, 292311);

procedure hid_submit_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation hid_submit_out($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i64;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i64;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i59: i64;
  var $p60: ref;
  var $i58: i32;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var vslice_dummy_var_44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10345, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(6248, 1)), $mul.ref($i7, 16)), $mul.ref(0, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10345, 1));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(6248, 1)), $mul.ref($i15, 16)), $mul.ref(8, 1));
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $i20 := hid_report_len($p11);
    call {:si_unique_call 332} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i20);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1)), $mul.ref(0, 1));
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p30);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p19);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, hid_debug);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $i55 := usb_submit_urb($p54, 32);
    call {:si_unique_call 337} {:cexpr "r"} boogie_si_record_i32($i55);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.0, jiffies);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10368, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p60, $i59);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $r := $i58;
    return;

  $bb7:
    assume $i56 == 1;
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} dev_err.ref.ref.i32($p57, .str.28, $i55);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i58 := $i55;
    goto $bb9;

  $bb4:
    assume $i51 == 1;
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} vslice_dummy_var_44 := printk.ref.ref(.str.27, .str.25);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i35 == 1;
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10352, 1));
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i42 := $zext.i32.i64($i41);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 333} cmdloc_dummy_var_10 := $memcpy.i8(cmdloc_dummy_var_8, cmdloc_dummy_var_9, $p37, $p19, $i42, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} kfree($p19);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10345, 1));
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i45);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(6248, 1)), $mul.ref($i46, 16)), $mul.ref(8, 1));
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, $0.ref);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hid_report_len: ref;

axiom hid_report_len == $sub.ref(0, 293343);

procedure hid_report_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation hid_report_len($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2088)), $mul.ref(2076, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i32($i3, 3);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2088)), $mul.ref(16, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i4, $i8);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 1);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 294375);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} {:cexpr "msecs_to_jiffies:arg:m"} boogie_si_record_i32($i0);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $i1 := __msecs_to_jiffies($i0);
    call {:si_unique_call 341} {:cexpr "tmp___0"} boogie_si_record_i64($i1);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 295407);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 343} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 344} devirtbounce.3(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.9, $p2);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 296439);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.24;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, system_wq);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $i2 := queue_work($p1, $p0);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 346} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_mod_timer_17: ref;

axiom ldv_mod_timer_17 == $sub.ref(0, 297471);

procedure ldv_mod_timer_17($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17;



implementation ldv_mod_timer_17($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} {:cexpr "ldv_mod_timer_17:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 349} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} activate_pending_timer_2($p0, $i1, 1);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mod_timer: ref;

axiom mod_timer == $sub.ref(0, 298503);

procedure mod_timer($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mod_timer($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 351} {:cexpr "mod_timer:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 1} true;
    call {:si_unique_call 352} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 353} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const activate_pending_timer_2: ref;

axiom activate_pending_timer_2 == $sub.ref(0, 299535);

procedure activate_pending_timer_2($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;
  modifies $M.10, $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17;



implementation activate_pending_timer_2($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} {:cexpr "activate_pending_timer_2:arg:data"} boogie_si_record_i64($i1);
    call {:si_unique_call 355} {:cexpr "activate_pending_timer_2:arg:pending_flag"} boogie_si_record_i32($i2);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p3 := $M.10;
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i4, $i5);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $M.12;
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i13, $i14);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p21 := $M.14;
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p30 := $M.16;
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p0);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i31, $i32);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} activate_suitable_timer_2($p0, $i1);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i33 == 1;
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i34 := $M.17;
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i35 == 1);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i2, 0);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $M.16 := $p0;
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p37 := $M.16;
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p38, $i1);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 359} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb32;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i25 := $M.15;
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i26 == 1);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i2, 0);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $M.14 := $p0;
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p28 := $M.14;
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i1);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 358} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb23;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i16 := $M.13;
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i17 == 1);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i2, 0);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.12 := $p0;
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p19 := $M.12;
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i1);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 357} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb14;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i7 := $M.11;
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 2);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.10 := $p0;
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p10 := $M.10;
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i1);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 356} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb4;
}



const activate_suitable_timer_2: ref;

axiom activate_suitable_timer_2 == $sub.ref(0, 300567);

procedure activate_suitable_timer_2($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.10, $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17;



implementation activate_suitable_timer_2($p0: ref, $i1: i64)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} {:cexpr "activate_suitable_timer_2:arg:data"} boogie_si_record_i64($i1);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i2 := $M.11;
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i4 := $M.11;
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $M.13;
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i9 == 1);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i10 := $M.13;
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $M.15;
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i15 == 1);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i16 := $M.15;
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i20 := $M.17;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i21 == 1);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i22 := $M.17;
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.16 := $p0;
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p24 := $M.16;
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i1);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 365} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $M.14 := $p0;
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p18 := $M.14;
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i1);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 364} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.12 := $p0;
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p12 := $M.12;
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i1);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 363} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $M.10 := $p0;
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p6 := $M.10;
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, $i1);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 362} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 301599);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.24;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $i2 := ldv_queue_work_on_5(8192, $p0, $p1);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 367} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_queue_work_on_5: ref;

axiom ldv_queue_work_on_5 == $sub.ref(0, 302631);

procedure ldv_queue_work_on_5($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.24;



implementation ldv_queue_work_on_5($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} {:cexpr "ldv_queue_work_on_5:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $i3 := queue_work_on($i0, $p1, $p2);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 370} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 371} {:cexpr "ldv_func_res"} boogie_si_record_i8($i6);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} activate_work_1($p2, 2);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 303663);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 373} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 1} true;
    call {:si_unique_call 374} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 375} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const activate_work_1: ref;

axiom activate_work_1 == $sub.ref(0, 304695);

procedure activate_work_1($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.24;



implementation activate_work_1($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} {:cexpr "activate_work_1:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i2 := $M.18;
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.20;
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.22;
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.24;
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $M.25 := $p0;
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $M.24 := $i1;
    call {:si_unique_call 380} {:cexpr "ldv_work_1_3"} boogie_si_record_i32($i1);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $M.23 := $p0;
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $M.22 := $i1;
    call {:si_unique_call 379} {:cexpr "ldv_work_1_2"} boogie_si_record_i32($i1);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $M.21 := $p0;
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $M.20 := $i1;
    call {:si_unique_call 378} {:cexpr "ldv_work_1_1"} boogie_si_record_i32($i1);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $M.19 := $p0;
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $M.18 := $i1;
    call {:si_unique_call 377} {:cexpr "ldv_work_1_0"} boogie_si_record_i32($i1);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __msecs_to_jiffies: ref;

axiom __msecs_to_jiffies == $sub.ref(0, 305727);

procedure __msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation __msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 381} {:cexpr "__msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 1} true;
    call {:si_unique_call 382} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 383} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_control_msg: ref;

axiom usb_control_msg == $sub.ref(0, 306759);

procedure usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 384} {:cexpr "usb_control_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 385} {:cexpr "usb_control_msg:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 386} {:cexpr "usb_control_msg:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 387} {:cexpr "usb_control_msg:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 388} {:cexpr "usb_control_msg:arg:arg5"} boogie_si_record_i16($i5);
    call {:si_unique_call 389} {:cexpr "usb_control_msg:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 390} {:cexpr "usb_control_msg:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 1} true;
    call {:si_unique_call 391} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 392} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 307791);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 308823);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 309855);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 393} $free($p0);
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 310887);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 311919);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 395} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $p2 := ldv_malloc($i0);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 312951);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 397} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 1} true;
    call {:si_unique_call 398} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 399} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 400} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $p4 := malloc($i0);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 1} true;
    call {:si_unique_call 402} __VERIFIER_assume($i7);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 313983);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 403} $r := $malloc($i0);
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 315015);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const hid_cease_io: ref;

axiom hid_cease_io == $sub.ref(0, 316047);

procedure hid_cease_io($p0: ref);
  free requires assertsPassed;
  modifies $M.11, $M.13, $M.15, $M.17;



implementation hid_cease_io($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var vslice_dummy_var_45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(10456, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} vslice_dummy_var_45 := ldv_del_timer_sync_24($p1);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(24, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} usb_kill_urb($p4);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(48, 1));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} usb_kill_urb($p6);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} usb_kill_urb($p8);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_timer_sync_24: ref;

axiom ldv_del_timer_sync_24 == $sub.ref(0, 317079);

procedure ldv_del_timer_sync_24($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.13, $M.15, $M.17;



implementation ldv_del_timer_sync_24($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $i1 := del_timer_sync($p0);
    call {:si_unique_call 409} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} disable_suitable_timer_2($p0);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 318111);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    return;
}



const del_timer_sync: ref;

axiom del_timer_sync == $sub.ref(0, 319143);

procedure del_timer_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 1} true;
    call {:si_unique_call 411} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 412} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_suitable_timer_2: ref;

axiom disable_suitable_timer_2 == $sub.ref(0, 320175);

procedure disable_suitable_timer_2($p0: ref);
  free requires assertsPassed;
  modifies $M.11, $M.13, $M.15, $M.17;



implementation disable_suitable_timer_2($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i1 := $M.11;
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $M.13;
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i13 := $M.15;
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i19 := $M.17;
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p22 := $M.16;
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb22;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $M.17 := 0;
    call {:si_unique_call 416} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p16 := $M.14;
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i15, $i17);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb16;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $M.15 := 0;
    call {:si_unique_call 415} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p10 := $M.12;
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i9, $i11);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $M.13 := 0;
    call {:si_unique_call 414} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p4 := $M.10;
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $M.11 := 0;
    call {:si_unique_call 413} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const hid_resume_common: ref;

axiom hid_resume_common == $sub.ref(0, 321207);

procedure hid_resume_common($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.37, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.27, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.24, $CurrAddr, $M.42, assertsPassed;



implementation hid_resume_common($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var vslice_dummy_var_46: i1;
  var vslice_dummy_var_47: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 417} {:cexpr "hid_resume_common:arg:driver_suspended"} boogie_si_record_i1($i1);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} spin_lock_irq($p6);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} clear_bit(5, $p7);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} usbhid_mark_busy($p5);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $i9 := constant_test_bit(6, $p8);
    call {:si_unique_call 422} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $i14 := constant_test_bit(4, $p13);
    call {:si_unique_call 425} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10592, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 0);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} usbhid_restart_queues($p5);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} spin_unlock_irq($p19);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $i20 := hid_start_in($p0);
    call {:si_unique_call 429} {:cexpr "status"} boogie_si_record_i32($i20);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i2);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i40 := $i20;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(7992, 1));
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb12;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(7992, 1));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 344)), $mul.ref(208, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb12;

  $bb15:
    assume $i33 == 1;
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(7992, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 344)), $mul.ref(208, 1));
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    call {:si_unique_call 432} $i39 := devirtbounce.1($p38, $p0);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 433} {:cexpr "status"} boogie_si_record_i32($i39);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb17;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} hid_io_error($p0);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10600, 1));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} vslice_dummy_var_47 := schedule_work($p16);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10600, 1));
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} vslice_dummy_var_46 := schedule_work($p11);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usbhid_mark_busy: ref;

axiom usbhid_mark_busy == $sub.ref(0, 322239);

procedure usbhid_mark_busy($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usbhid_mark_busy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $p3 := interface_to_usbdev($p2);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} usb_mark_last_busy($p3);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    return;
}



const usb_mark_last_busy: ref;

axiom usb_mark_last_busy == $sub.ref(0, 323271);

procedure usb_mark_last_busy($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_mark_last_busy($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} pm_runtime_mark_last_busy($p1);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_mark_last_busy: ref;

axiom pm_runtime_mark_last_busy == $sub.ref(0, 324303);

procedure pm_runtime_mark_last_busy($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pm_runtime_mark_last_busy($p0: ref)
{
  var $i1: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i1 := $load.i64($M.0, jiffies);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(560, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i1);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    return;
}



const hidinput_count_leds: ref;

axiom hidinput_count_leds == $sub.ref(0, 325335);

procedure hidinput_count_leds($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation hidinput_count_leds($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 1} true;
    call {:si_unique_call 437} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 438} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usbhid_wait_io: ref;

axiom usbhid_wait_io == $sub.ref(0, 326367);

procedure usbhid_wait_io($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation usbhid_wait_io($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $i16: i1;
  var $i17: i64;
  var $i18: i1;
  var $i20: i1;
  var $i19: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $i39: i1;
  var $i40: i64;
  var $i41: i1;
  var $i43: i1;
  var $i42: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i54: i32;
  var vslice_dummy_var_48: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} __might_sleep(.str.25, 646, 0);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $i6 := constant_test_bit(1, $p5);
    call {:si_unique_call 442} {:cexpr "tmp___3"} boogie_si_record_i32($i6);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 445} {:cexpr "__cond___0"} boogie_si_record_i8($i14);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i17 := 2500;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i14);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i19 := 1;
    assume {:branchcond $i18} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i18 == 1);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i17, 0);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i19 := $i20;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i19);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i49 := $i17;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i54 := 0;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $r := $i54;
    return;

  $bb39:
    assume $i50 == 1;
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, hid_debug);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32(0, 1);
    goto $bb44;

  $bb41:
    assume $i52 == 1;
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} vslice_dummy_var_48 := printk.ref.ref(.str.35, .str.25);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb16:
    assume $i22 == 1;
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} INIT_LIST_HEAD($p23);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 0);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i25 := 2500;
    goto $bb18;

  $bb18:
    call $i25, $p26, $i27, $p28, $i29, $i30, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i43, $i42, $i44, $i45, $i46, $i47 := usbhid_wait_io_loop_$bb18($p1, $p4, $i25, $p26, $i27, $p28, $i29, $i30, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i43, $i42, $i44, $i45, $i46, $i47);
    goto $bb18_last;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(10680, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $i27 := prepare_to_wait_event($p26, $p1, 2);
    call {:si_unique_call 448} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} $i29 := constant_test_bit(1, $p28);
    call {:si_unique_call 450} {:cexpr "tmp___0"} boogie_si_record_i32($i29);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    call {:si_unique_call 453} {:cexpr "__cond"} boogie_si_record_i8($i37);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i40 := $i25;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i37);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i42 := 1;
    assume true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i41 == 1);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i40, 0);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i42 := $i43;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i32($i42);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i46 := $i40;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $i47 := schedule_timeout($i40);
    call {:si_unique_call 456} {:cexpr "__ret___0"} boogie_si_record_i64($i47);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i25 := $i47;
    goto corral_source_split_2169_dummy;

  $bb34:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(10680, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} finish_wait($p48, $p1);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i49 := $i46;
    goto $bb38;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb32;

  $bb25:
    assume $i38 == 1;
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i25, 0);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb27;

  $bb28:
    assume $i39 == 1;
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i40 := 1;
    goto $bb30;

  $bb19:
    assume $i30 == 1;
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $i32 := constant_test_bit(2, $p31);
    call {:si_unique_call 452} {:cexpr "tmp___1"} boogie_si_record_i32($i32);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb24;

  $bb21:
    assume $i33 == 1;
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i34 := 1;
    goto $bb23;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb14;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64(2500, 0);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb9;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $i9 := constant_test_bit(2, $p8);
    call {:si_unique_call 444} {:cexpr "tmp___4"} boogie_si_record_i32($i9);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb6;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb5;

  corral_source_split_2169_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2128;
}



const hid_cancel_delayed_stuff: ref;

axiom hid_cancel_delayed_stuff == $sub.ref(0, 327399);

procedure hid_cancel_delayed_stuff($p0: ref);
  free requires assertsPassed;
  modifies $M.11, $M.13, $M.15, $M.17, $M.18, $M.20, $M.22, $M.24;



implementation hid_cancel_delayed_stuff($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(10456, 1));
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} vslice_dummy_var_49 := ldv_del_timer_sync_22($p1);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 10768)), $mul.ref(10600, 1));
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} vslice_dummy_var_50 := ldv_cancel_work_sync_23($p3);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_timer_sync_22: ref;

axiom ldv_del_timer_sync_22 == $sub.ref(0, 328431);

procedure ldv_del_timer_sync_22($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.13, $M.15, $M.17;



implementation ldv_del_timer_sync_22($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $i1 := del_timer_sync($p0);
    call {:si_unique_call 461} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} disable_suitable_timer_2($p0);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_cancel_work_sync_23: ref;

axiom ldv_cancel_work_sync_23 == $sub.ref(0, 329463);

procedure ldv_cancel_work_sync_23($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.18, $M.20, $M.22, $M.24;



implementation ldv_cancel_work_sync_23($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i1 := cancel_work_sync($p0);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 464} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 465} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} disable_work_1($p0);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const cancel_work_sync: ref;

axiom cancel_work_sync == $sub.ref(0, 330495);

procedure cancel_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 1} true;
    call {:si_unique_call 467} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 468} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_work_1: ref;

axiom disable_work_1 == $sub.ref(0, 331527);

procedure disable_work_1($p0: ref);
  free requires assertsPassed;
  modifies $M.18, $M.20, $M.22, $M.24;



implementation disable_work_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i1 := $M.18;
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 3);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i3 := $M.18;
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $M.20;
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 3);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i11 := $M.20;
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i17 := $M.22;
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i18 == 1);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i19 := $M.22;
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i25 := $M.24;
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 3);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i26 == 1);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i27 := $M.24;
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p29 := $M.25;
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i30, $i31);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb33;

  $bb34:
    assume $i32 == 1;
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 472} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb29;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p21 := $M.23;
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb24;

  $bb25:
    assume $i24 == 1;
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 471} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb20;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $M.21;
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i14, $i15);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb16:
    assume $i16 == 1;
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 470} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $M.19;
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i6, $i7);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 469} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 332559);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 474} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 333591);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    return;
}



const prepare_to_wait_event: ref;

axiom prepare_to_wait_event == $sub.ref(0, 334623);

procedure prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 475} {:cexpr "prepare_to_wait_event:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 1} true;
    call {:si_unique_call 476} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 477} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 335655);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 478} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 1} true;
    call {:si_unique_call 479} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 480} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 336687);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    return;
}



const hid_destroy_device: ref;

axiom hid_destroy_device == $sub.ref(0, 337719);

procedure hid_destroy_device($p0: ref);
  free requires assertsPassed;



implementation hid_destroy_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    return;
}



const usb_endpoint_is_int_in: ref;

axiom usb_endpoint_is_int_in == $sub.ref(0, 338751);

procedure usb_endpoint_is_int_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_int_in($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $i1 := usb_endpoint_xfer_int($p0);
    call {:si_unique_call 482} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $i3 := usb_endpoint_dir_in($p0);
    call {:si_unique_call 484} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const hid_allocate_device: ref;

axiom hid_allocate_device == $sub.ref(0, 339783);

procedure hid_allocate_device() returns ($r: ref);
  free requires assertsPassed;



implementation hid_allocate_device() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $p0 := external_alloc();
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 340815);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $i1 := ldv_is_err($p0);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 487} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 341847);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 489} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_set_intfdata: ref;

axiom usb_set_intfdata == $sub.ref(0, 342879);

procedure usb_set_intfdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_set_intfdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} dev_set_drvdata($p2, $p1);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    return;
}



const hid_pidff_init: ref;

axiom hid_pidff_init == $sub.ref(0, 343911);

procedure hid_pidff_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $CurrAddr, $M.37, $M.27, $M.42, assertsPassed, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.24;



implementation hid_pidff_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i24;
  var $i42: i24;
  var $i43: i24;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i24;
  var $i67: i24;
  var $i68: i24;
  var $p69: ref;
  var $p70: ref;
  var $i71: i8;
  var $i72: i64;
  var $i73: i64;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $i104: i32;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i24;
  var $i112: i24;
  var $i113: i24;
  var $p114: ref;
  var $p115: ref;
  var $i116: i8;
  var $i117: i64;
  var $i118: i64;
  var $i119: i64;
  var $i120: i1;
  var $p121: ref;
  var $i122: i1;
  var $i123: i32;
  var $p126: ref;
  var $p127: ref;
  var $i128: i64;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i136: i24;
  var $i137: i24;
  var $i138: i24;
  var $p139: ref;
  var $p140: ref;
  var $i141: i8;
  var $i142: i64;
  var $i143: i64;
  var $i144: i64;
  var $i145: i1;
  var $p146: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i32;
  var $p154: ref;
  var $p155: ref;
  var $i156: i64;
  var $i157: i1;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $i164: i24;
  var $i165: i24;
  var $i166: i24;
  var $p167: ref;
  var $p168: ref;
  var $i169: i8;
  var $i170: i64;
  var $i171: i64;
  var $i172: i64;
  var $i173: i1;
  var $p174: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i32;
  var $p182: ref;
  var $p183: ref;
  var $i184: i64;
  var $i185: i1;
  var $p188: ref;
  var $p189: ref;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $i193: i32;
  var $i194: i1;
  var $p195: ref;
  var $p196: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $i77: i32;
  var $p205: ref;
  var $i52: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8048, 1)), $mul.ref(0, 1));
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p13, .str.7);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p14, .str.8);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p15, .str.9);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p16, .str.10);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.7, $p18);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 1248);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p18, $i21);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p22, 0);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.8, $p23);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 498} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(80, 1)), $mul.ref(1, 2072)), $mul.ref(8, 1));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $i33 := list_empty($p32);
    call {:si_unique_call 501} {:cexpr "tmp___1"} boogie_si_record_i32($i33);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $p53 := kzalloc(1112, 208);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i56 := $eq.i64($i55, 0);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p54, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, $p0);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} hid_device_io_start($p0);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} pidff_find_reports($p0, 1, $p54);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} pidff_find_reports($p0, 2, $p54);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $i58 := pidff_reports_ok($p54);
    call {:si_unique_call 510} {:cexpr "tmp___4"} boogie_si_record_i32($i58);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i78 := pidff_init_fields($p54, $p12);
    call {:si_unique_call 517} {:cexpr "error"} boogie_si_record_i32($i78);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} pidff_reset($p54);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p12, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $i82 := constant_test_bit(96, $p81);
    call {:si_unique_call 520} {:cexpr "tmp___5"} boogie_si_record_i32($i82);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} $i89 := pidff_check_autocenter($p54, $p12);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 524} {:cexpr "error"} boogie_si_record_i32($i89);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($add.ref($p54, $mul.ref(0, 1112)), $mul.ref(608, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 112)), $mul.ref(60, 1));
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($p54, $mul.ref(0, 1112)), $mul.ref(608, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 112)), $mul.ref(56, 1));
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i103 := $sub.i32($i96, $i102);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i103, 1);
    call {:si_unique_call 525} {:cexpr "max_effects"} boogie_si_record_i32($i104);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p105, .str.7);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p106, .str.8);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p107, .str.9);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p108, .str.13);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i111 := $load.i24($M.7, $p110);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i112 := $and.i24($i111, $sub.i24(0, 262144));
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i113 := $or.i24($i112, 1292);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p110, $i113);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p114, 0);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.8, $p115);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i64($i116);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i118 := $and.i64($i117, 1);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $i119 := ldv__builtin_expect($i118, 0);
    call {:si_unique_call 527} {:cexpr "tmp___6"} boogie_si_record_i64($i119);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i120 := $ne.i64($i119, 0);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i122 := $sgt.i32($i104, 64);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    $i123 := $i104;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($add.ref($p54, $mul.ref(0, 1112)), $mul.ref(640, 1)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p127);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i129 := $ne.i64($i128, 0);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($add.ref($p54, $mul.ref(0, 1112)), $mul.ref(640, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i156 := $p2i.ref.i64($p155);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i157 := $ne.i64($i156, 0);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($add.ref($p54, $mul.ref(0, 1112)), $mul.ref(640, 1)), $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i184 := $p2i.ref.i64($p183);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i185 := $ne.i64($i184, 0);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i185 == 1);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $i193 := input_ff_create($p12, $i123);
    call {:si_unique_call 537} {:cexpr "error"} boogie_si_record_i32($i193);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i194 := $ne.i32($i193, 0);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p12, $mul.ref(0, 2296)), $mul.ref(248, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p196 := $load.ref($M.0, $p195);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p196, $mul.ref(0, 248)), $mul.ref(48, 1));
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p198, $p53);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p196, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p199, pidff_upload_effect);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p196, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p200, pidff_erase_effect);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p196, $mul.ref(0, 248)), $mul.ref(24, 1));
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p201, pidff_set_gain);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p196, $mul.ref(0, 248)), $mul.ref(32, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p202, pidff_set_autocenter);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p196, $mul.ref(0, 248)), $mul.ref(16, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p203, pidff_playback);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p12, $mul.ref(0, 2296)), $mul.ref(816, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} _dev_info.ref.ref($p204, .str.17);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} hid_device_io_stop($p0);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i52 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $r := $i52;
    return;

  $bb54:
    assume $i194 == 1;
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i77 := $i193;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} hid_device_io_stop($p0);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p205 := $bitcast.ref.ref($p54);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} kfree($p205);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i52 := $i77;
    goto $bb9;

  $bb48:
    assume $i185 == 1;
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($add.ref($p54, $mul.ref(0, 1112)), $mul.ref(640, 1)), $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p189 := $load.ref($M.0, $p188);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i190 := $load.i32($M.0, $p189);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 0);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i191 == 1);
    goto $bb50;

  $bb51:
    assume $i191 == 1;
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} dev_notice.ref.ref($p192, .str.16);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i77 := $i89;
    goto $bb19;

  $bb42:
    assume $i157 == 1;
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p158, .str.7);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p159, .str.8);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p160, .str.9);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p161, .str.15);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i164 := $load.i24($M.7, $p163);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i165 := $and.i24($i164, $sub.i24(0, 262144));
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i166 := $or.i24($i165, 1303);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p163, $i166);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p167, 0);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i169 := $load.i8($M.8, $p168);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i170 := $zext.i8.i64($i169);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i171 := $and.i64($i170, 1);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $i172 := ldv__builtin_expect($i171, 0);
    call {:si_unique_call 533} {:cexpr "tmp___8"} boogie_si_record_i64($i172);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i173 := $ne.i64($i172, 0);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb44:
    assume $i173 == 1;
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($add.ref($p54, $mul.ref(0, 1112)), $mul.ref(640, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.0, $p177);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} __dynamic_dev_dbg.ref.ref.ref.i32($p6, $p174, .str.15, $i179);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb36:
    assume $i129 == 1;
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p130, .str.7);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p131, .str.8);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p132, .str.9);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p133, .str.14);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p134);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i136 := $load.i24($M.7, $p135);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i137 := $and.i24($i136, $sub.i24(0, 262144));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i138 := $or.i24($i137, 1299);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p135, $i138);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p139, 0);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i141 := $load.i8($M.8, $p140);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i64($i141);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i143 := $and.i64($i142, 1);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $i144 := ldv__builtin_expect($i143, 0);
    call {:si_unique_call 530} {:cexpr "tmp___7"} boogie_si_record_i64($i144);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i145 := $ne.i64($i144, 0);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i145 == 1;
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($add.ref($p54, $mul.ref(0, 1112)), $mul.ref(640, 1)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.0, $p150);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} __dynamic_dev_dbg.ref.ref.ref.i32($p5, $p146, .str.14, $i151);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb33:
    assume $i122 == 1;
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i123 := 64;
    goto $bb35;

  $bb30:
    assume $i120 == 1;
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} __dynamic_dev_dbg.ref.ref.ref.i32($p4, $p121, .str.13, $i104);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i90 == 1;
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i77 := $i89;
    goto $bb19;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i83 == 1;
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p54, $mul.ref(0, 1112)), $mul.ref(592, 1));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} pidff_set($p85, $sub.i16(0, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p54, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(2, 8));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} hid_hw_request($p0, $p88, 9);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i79 == 1;
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i77 := $i78;
    goto $bb19;

  $bb14:
    assume $i59 == 1;
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p60, .str.7);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p61, .str.8);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p62, .str.9);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p63, .str.12);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i66 := $load.i24($M.7, $p65);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i67 := $and.i24($i66, $sub.i24(0, 262144));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i68 := $or.i24($i67, 1267);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p65, $i68);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p69, 0);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.8, $p70);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i64($i71);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i73 := $and.i64($i72, 1);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i74 := ldv__builtin_expect($i73, 0);
    call {:si_unique_call 512} {:cexpr "tmp___3"} boogie_si_record_i64($i74);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i77 := $sub.i32(0, 19);
    goto $bb19;

  $bb16:
    assume $i75 == 1;
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} __dynamic_dev_dbg.ref.ref.ref($p3, $p76, .str.12);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i56 == 1;
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32(0, 12);
    goto $bb9;

  $bb4:
    assume $i34 == 1;
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p35, .str.7);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p36, .str.8);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p37, .str.9);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p38, .str.11);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i41 := $load.i24($M.7, $p40);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i42 := $and.i24($i41, $sub.i24(0, 262144));
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i43 := $or.i24($i42, 1251);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p40, $i43);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p44, 0);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.8, $p45);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i64($i46);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i48 := $and.i64($i47, 1);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $i49 := ldv__builtin_expect($i48, 0);
    call {:si_unique_call 503} {:cexpr "tmp___0"} boogie_si_record_i64($i49);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32(0, 19);
    goto $bb9;

  $bb6:
    assume $i50 == 1;
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} __dynamic_dev_dbg.ref.ref.ref($p2, $p51, .str.11);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} __dynamic_dev_dbg.ref.ref.ref($p1, $p29, .str.10);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hiddev_connect: ref;

axiom hiddev_connect == $sub.ref(0, 344943);

procedure hiddev_connect($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation hiddev_connect($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i57: i32;
  var $i21: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i13: i32;
  var $i69: i32;
  var $i12: i32;
  var $i65: i32;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i73: i32;
  var vslice_dummy_var_51: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 543} {:cexpr "hiddev_connect:arg:force"} boogie_si_record_i32($i1);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 0);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $p74 := kzalloc(352, 208);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p75);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i77 := $eq.i64($i76, 0);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p75, $mul.ref(0, 352)), $mul.ref(168, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} __init_waitqueue_head($p78, .str.3, $p2);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p75, $mul.ref(0, 352)), $mul.ref(264, 1));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} INIT_LIST_HEAD($p79);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p75, $mul.ref(0, 352)), $mul.ref(280, 1));
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} vslice_dummy_var_51 := spinlock_check($p80);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p75, $mul.ref(0, 352)), $mul.ref(280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} __raw_spin_lock_init($p84, .str.4, $p3);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p75, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} __mutex_init($p85, .str.5, $p4);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8064, 1));
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p87, $p74);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p75, $mul.ref(0, 352)), $mul.ref(256, 1));
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p88, $p0);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p75, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, 1);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p7, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $i92 := usb_register_dev($p91, hiddev_class);
    call {:si_unique_call 552} {:cexpr "retval"} boogie_si_record_i32($i92);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i73 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $r := $i73;
    return;

  $bb38:
    assume $i93 == 1;
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} dev_err.ref.ref($p94, .str.6);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8064, 1));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p95, $0.ref);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p75);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} kfree($p96);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32(0, 1);
    goto $bb32;

  $bb35:
    assume $i77 == 1;
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32(0, 1);
    goto $bb32;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(44, 1));
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i32($i10, 0);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i12 := 0;
    assume {:branchcond $i11} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i65 := $i12;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(44, 1));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, $i65);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb30:
    assume $i72 == 1;
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32(0, 1);
    goto $bb32;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb6:
    call $p14, $p15, $i16, $p18, $i19, $i20, $p22, $p23, $i24, $p26, $i27, $i28, $p29, $p30, $i31, $p33, $i34, $i35, $p36, $p37, $i38, $p40, $i41, $i42, $p43, $p44, $i45, $p47, $i48, $i49, $p50, $p51, $i52, $p54, $i55, $i56, $p58, $p59, $i60, $p62, $i63, $i64, $i57, $i21, $i66, $i67, $i68, $i13, $i69 := hiddev_connect_loop_$bb6($p0, $p9, $p14, $p15, $i16, $p18, $i19, $i20, $p22, $p23, $i24, $p26, $i27, $i28, $p29, $p30, $i31, $p33, $i34, $i35, $p36, $p37, $i38, $p40, $i41, $i42, $p43, $p44, $i45, $p47, $i48, $i49, $p50, $p51, $i52, $p54, $i55, $i56, $p58, $p59, $i60, $p62, $i63, $i64, $i57, $i21, $i66, $i67, $i68, $i13, $i69);
    goto $bb6_last;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i13);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref($i16, 12)), $mul.ref(0, 1));
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i21 := $i13;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i21, 1);
    call {:si_unique_call 544} {:cexpr "i"} boogie_si_record_i32($i66);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p9);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i68 := $ugt.i32($i67, $i66);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i69 := $i66;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i12 := $i69;
    goto $bb5;

  $bb27:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i13 := $i66;
    goto $bb27_dummy;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i13);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p23, $mul.ref($i24, 12)), $mul.ref(4, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i28 := $ule.i32($i27, 65535);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i28 == 1);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i13);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p30, $mul.ref($i31, 12)), $mul.ref(4, 1));
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i35 := $ugt.i32($i34, 65544);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i21 := $i13;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb10;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i13);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p37, $mul.ref($i38, 12)), $mul.ref(4, 1));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 65664);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i21 := $i13;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb10;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i13);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p44, $mul.ref($i45, 12)), $mul.ref(4, 1));
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 786433);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i21 := $i13;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb10;

  $bb18:
    assume $i49 == 1;
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i52 := $zext.i32.i64($i13);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p51, $mul.ref($i52, 12)), $mul.ref(4, 1));
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i56 := $ule.i32($i55, 851969);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i57 := $i13;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i56 == 1);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i60 := $zext.i32.i64($i13);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p59, $mul.ref($i60, 12)), $mul.ref(4, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i64 := $ugt.i32($i63, 851974);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i57, $i21 := $i13, $i13;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb10;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i65 := $i57;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb21;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb12;

  $bb27_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2618;
}



const hiddev_disconnect: ref;

axiom hiddev_disconnect == $sub.ref(0, 345975);

procedure hiddev_disconnect($p0: ref);



const hiddev_report_event: ref;

axiom hiddev_report_event == $sub.ref(0, 347007);

procedure hiddev_report_event($p0: ref, $p1: ref);



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 348039);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 555} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 1} true;
    call {:si_unique_call 556} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 557} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const strlcat: ref;

axiom strlcat == $sub.ref(0, 349071);

procedure strlcat($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcat($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 558} {:cexpr "strlcat:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 1} true;
    call {:si_unique_call 559} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 560} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const strlen: ref;

axiom strlen == $sub.ref(0, 350103);

procedure strlen($p0: ref) returns ($r: i64);



const snprintf: ref;

axiom snprintf == $sub.ref(0, 351135);

procedure snprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);



procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



procedure snprintf.ref.i64.ref.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32);



const usb_make_path: ref;

axiom usb_make_path == $sub.ref(0, 352167);

procedure usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} {:cexpr "usb_make_path:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(64, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(4, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $i9 := snprintf.ref.i64.ref.ref.ref($p1, $i2, .str.56, $p6, $p8);
    call {:si_unique_call 563} {:cexpr "actual"} boogie_si_record_i32($i9);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i2);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, $i9);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb3;
}



const usb_string: ref;

axiom usb_string == $sub.ref(0, 353199);

procedure usb_string($p0: ref, $i1: i32, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_string($p0: ref, $i1: i32, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 564} {:cexpr "usb_string:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 565} {:cexpr "usb_string:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 1} true;
    call {:si_unique_call 566} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 567} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 354231);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 569} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 355263);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 356295);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 357327);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    return;
}



const hid_reset: ref;

axiom hid_reset == $sub.ref(0, 358359);

procedure hid_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation hid_reset($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $i43: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i24;
  var $i52: i24;
  var $i53: i24;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i24;
  var $i75: i24;
  var $i76: i24;
  var $p77: ref;
  var $p78: ref;
  var $i79: i8;
  var $i80: i64;
  var $i81: i64;
  var $i82: i64;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var vslice_dummy_var_52: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 10600), 10768)), $mul.ref(0, 1));
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 10600), 10768)), $mul.ref(10448, 1));
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $i9 := constant_test_bit(6, $p8);
    call {:si_unique_call 577} {:cexpr "tmp___1"} boogie_si_record_i32($i9);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 10600), 10768)), $mul.ref(10448, 1));
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i66 := constant_test_bit(4, $p65);
    call {:si_unique_call 590} {:cexpr "tmp___3"} boogie_si_record_i32($i66);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i67 == 1;
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p68, .str.7);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p69, .str.39);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p70, .str.25);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p71, .str.42);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i74 := $load.i24($M.7, $p73);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i75 := $and.i24($i74, $sub.i24(0, 262144));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i76 := $or.i24($i75, 135);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p73, $i76);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p77, 0);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.8, $p78);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i64($i79);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i81 := $and.i64($i80, 1);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $i82 := ldv__builtin_expect($i81, 0);
    call {:si_unique_call 592} {:cexpr "tmp___2"} boogie_si_record_i64($i82);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i83 := $ne.i64($i82, 0);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 10600), 10768)), $mul.ref(8, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} usb_queue_reset_device($p88);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i83 == 1;
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 10600), 10768)), $mul.ref(8, 1));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} __dynamic_dev_dbg.ref.ref.ref($p3, $p86, .str.42);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str.7);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.39);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p13, .str.25);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p14, .str.40);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.7, $p16);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 122);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p16, $i19);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p20, 0);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.8, $p21);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 579} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 8600)), $mul.ref(6568, 1)), $mul.ref(0, 1));
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 10600), 10768)), $mul.ref(24, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $i41 := usb_clear_halt($p36, $i40);
    call {:si_unique_call 582} {:cexpr "rc"} boogie_si_record_i32($i41);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 10600), 10768)), $mul.ref(10448, 1));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} clear_bit(6, $p42);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i41, 0);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i43 == 1);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p45, .str.7);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p46, .str.39);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p47, .str.25);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p48, .str.41);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i51 := $load.i24($M.7, $p50);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i52 := $and.i24($i51, $sub.i24(0, 262144));
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i53 := $or.i24($i52, 129);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p50, $i53);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p54, 0);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.8, $p55);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i64($i56);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i58 := $and.i64($i57, 1);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 586} {:cexpr "tmp___0"} boogie_si_record_i64($i59);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 10600), 10768)), $mul.ref(10448, 1));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} set_bit(4, $p64);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i60 == 1;
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 10600), 10768)), $mul.ref(8, 1));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} __dynamic_dev_dbg.ref.ref.ref.i32($p2, $p63, .str.41, $i41);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i43 == 1;
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} vslice_dummy_var_52 := hid_start_in($p7);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i26 == 1;
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 10600), 10768)), $mul.ref(8, 1));
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} __dynamic_dev_dbg.ref.ref.ref($p1, $p29, .str.40);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const hid_retry_timeout: ref;

axiom hid_retry_timeout == $sub.ref(0, 359391);

procedure hid_retry_timeout($i0: i64);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.24;



implementation hid_retry_timeout($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 596} {:cexpr "hid_retry_timeout:arg:_hid"} boogie_si_record_i64($i0);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i0);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.7);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.43);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p8, .str.25);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, .str.44);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.7, $p11);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 108);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p11, $i14);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p15, 0);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.8, $p16);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 598} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $i25 := hid_start_in($p2);
    call {:si_unique_call 601} {:cexpr "tmp___0"} boogie_si_record_i32($i25);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} hid_io_error($p2);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} __dynamic_dev_dbg.ref.ref.ref($p1, $p24, .str.44);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const reg_timer_2: ref;

axiom reg_timer_2 == $sub.ref(0, 360423);

procedure reg_timer_2($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17;



implementation reg_timer_2($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} {:cexpr "reg_timer_2:arg:data"} boogie_si_record_i64($i2);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(hid_retry_timeout));
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} activate_suitable_timer_2($p0, $i2);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 361455);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    return;
}



const hid_add_device: ref;

axiom hid_add_device == $sub.ref(0, 362487);

procedure hid_add_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation hid_add_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 1} true;
    call {:si_unique_call 605} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 606} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_clear_halt: ref;

axiom usb_clear_halt == $sub.ref(0, 363519);

procedure usb_clear_halt($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_clear_halt($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 607} {:cexpr "usb_clear_halt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 1} true;
    call {:si_unique_call 608} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 609} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_queue_reset_device: ref;

axiom usb_queue_reset_device == $sub.ref(0, 364551);

procedure usb_queue_reset_device($p0: ref);
  free requires assertsPassed;



implementation usb_queue_reset_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister_dev: ref;

axiom usb_deregister_dev == $sub.ref(0, 365583);

procedure usb_deregister_dev($p0: ref, $p1: ref);



const ldv_mutex_lock_108: ref;

axiom ldv_mutex_lock_108 == $sub.ref(0, 366615);

procedure ldv_mutex_lock_108($p0: ref);



const ldv_mutex_unlock_109: ref;

axiom ldv_mutex_unlock_109 == $sub.ref(0, 367647);

procedure ldv_mutex_unlock_109($p0: ref);



const usbhid_close: ref;

axiom usbhid_close == $sub.ref(0, 368679);

procedure usbhid_close($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.13, $M.15, $M.17, $M.27, $M.18, $M.20, $M.22, $M.24, assertsPassed;



implementation usbhid_close($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i8;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} ldv_mutex_lock_20(hid_open_mut);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} spin_lock_irq($p4);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8084, 1));
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i6, 1);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8084, 1));
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8084, 1));
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} spin_unlock_irq($p24);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} ldv_mutex_unlock_21(hid_open_mut);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} spin_unlock_irq($p12);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} hid_cancel_delayed_stuff($p3);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8040, 1));
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 1024);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(24, 1));
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} usb_kill_urb($p18);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 1568)), $mul.ref(40, 1));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i23 := $and.i8($i22, $sub.i8(0, 9));
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $i23);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_110: ref;

axiom ldv_mutex_unlock_110 == $sub.ref(0, 369711);

procedure ldv_mutex_unlock_110($p0: ref);



const ldv_mutex_unlock_existancelock_of_hiddev: ref;

axiom ldv_mutex_unlock_existancelock_of_hiddev == $sub.ref(0, 370743);

procedure ldv_mutex_unlock_existancelock_of_hiddev($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_existancelock_of_hiddev($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i1 := $M.26;
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 2);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 618} {:cexpr "ldv_mutex_existancelock_of_hiddev"} boogie_si_record_i32(1);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} ldv_error();
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 371775);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 372807);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 619} __VERIFIER_error();
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_20: ref;

axiom ldv_mutex_lock_20 == $sub.ref(0, 373839);

procedure ldv_mutex_lock_20($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_lock_20($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} ldv_mutex_lock_hid_open_mut($p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} mutex_lock($p0);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_21: ref;

axiom ldv_mutex_unlock_21 == $sub.ref(0, 374871);

procedure ldv_mutex_unlock_21($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_unlock_21($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} ldv_mutex_unlock_hid_open_mut($p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} mutex_unlock($p0);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_hid_open_mut: ref;

axiom ldv_mutex_unlock_hid_open_mut == $sub.ref(0, 375903);

procedure ldv_mutex_unlock_hid_open_mut($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_unlock_hid_open_mut($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i1 := $M.27;
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 2);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 625} {:cexpr "ldv_mutex_hid_open_mut"} boogie_si_record_i32(1);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} ldv_error();
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_hid_open_mut: ref;

axiom ldv_mutex_lock_hid_open_mut == $sub.ref(0, 376935);

procedure ldv_mutex_lock_hid_open_mut($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_lock_hid_open_mut($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i1 := $M.27;
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 627} {:cexpr "ldv_mutex_hid_open_mut"} boogie_si_record_i32(2);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} ldv_error();
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 377967);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_existancelock_of_hiddev: ref;

axiom ldv_mutex_lock_existancelock_of_hiddev == $sub.ref(0, 378999);

procedure ldv_mutex_lock_existancelock_of_hiddev($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_existancelock_of_hiddev($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i1 := $M.26;
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.26 := 2;
    call {:si_unique_call 629} {:cexpr "ldv_mutex_existancelock_of_hiddev"} boogie_si_record_i32(2);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} ldv_error();
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 380031);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    return;
}



const usb_register_dev: ref;

axiom usb_register_dev == $sub.ref(0, 381063);

procedure usb_register_dev($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_dev($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 1} true;
    call {:si_unique_call 630} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 631} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 382095);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const hid_device_io_start: ref;

axiom hid_device_io_start == $sub.ref(0, 383127);

procedure hid_device_io_start($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation hid_device_io_start($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8044, 1));
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8044, 1));
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 1);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6472, 1));
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} up($p6);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} dev_warn.ref.ref($p4, .str.85);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pidff_find_reports: ref;

axiom pidff_find_reports == $sub.ref(0, 384159);

procedure pidff_find_reports($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr;



implementation pidff_find_reports($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i24;
  var $i39: i24;
  var $i40: i24;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i64;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i64;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i64;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $i81: i64;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i24;
  var $i94: i24;
  var $i95: i24;
  var $p96: ref;
  var $p97: ref;
  var $i98: i8;
  var $i99: i64;
  var $i100: i64;
  var $i101: i64;
  var $i102: i1;
  var $p103: ref;
  var $i104: i64;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i64;
  var $p110: ref;
  var $p111: ref;
  var $p24: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $i118: i1;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 636} {:cexpr "pidff_find_reports:arg:report_type"} boogie_si_record_i32($i1);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i1);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(80, 1)), $mul.ref($i5, 2072)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2088)), $mul.ref(0, 1));
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i1);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(80, 1)), $mul.ref($i14, 2072)), $mul.ref(8, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i13, $i18);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p20 := $p10;
    goto $bb4;

  $bb4:
    call $p21, $i22, $i23, $p26, $p27, $p28, $i29, $i30, $i31, $p32, $p33, $p34, $p35, $p36, $p37, $i38, $i39, $i40, $p41, $p42, $i43, $i44, $i45, $i46, $i47, $p48, $i49, $p50, $i51, $i52, $i53, $p55, $p57, $p58, $p59, $p60, $p61, $i62, $i63, $p64, $p65, $i66, $i67, $p69, $i70, $i71, $p72, $p73, $i74, $i75, $p77, $i78, $i79, $i80, $i81, $p83, $p84, $i85, $i86, $p87, $p88, $p89, $p90, $p91, $p92, $i93, $i94, $i95, $p96, $p97, $i98, $i99, $i100, $i101, $i102, $p103, $i104, $p105, $i106, $i107, $i108, $p110, $p111, $p24, $p113, $p114, $p115, $p116, $i117, $i118, $p20 := pidff_find_reports_loop_$bb4($p0, $p2, $p3, $p4, $i18, $p21, $i22, $i23, $p26, $p27, $p28, $i29, $i30, $i31, $p32, $p33, $p34, $p35, $p36, $p37, $i38, $i39, $i40, $p41, $p42, $i43, $i44, $i45, $i46, $i47, $p48, $i49, $p50, $i51, $i52, $i53, $p55, $p57, $p58, $p59, $p60, $p61, $i62, $i63, $p64, $p65, $i66, $i67, $p69, $i70, $i71, $p72, $p73, $i74, $i75, $p77, $i78, $i79, $i80, $i81, $p83, $p84, $i85, $i86, $p87, $p88, $p89, $p90, $p91, $p92, $i93, $i94, $i95, $p96, $p97, $i98, $i99, $i100, $i101, $i102, $p103, $i104, $p105, $i106, $i107, $i108, $p110, $p111, $p24, $p113, $p114, $p115, $p116, $i117, $i118, $p20);
    goto $bb4_last;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 2088)), $mul.ref(2072, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref(0, 8));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 112)), $mul.ref(4, 1));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $i30 := pidff_check_usage($i29);
    call {:si_unique_call 638} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, $sub.i32(0, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref(0, 8));
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    call {:si_unique_call 642} {:cexpr "i"} boogie_si_record_i32($i62);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i63 := $sle.i32($i62, 0);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i63 == 1);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i62);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i67 := $add.i64($i66, $sub.i64(0, 1));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p65, $mul.ref($i67, 12)), $mul.ref(0, 1));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 2);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i62);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i75 := $add.i64($i74, $sub.i64(0, 1));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p73, $mul.ref($i75, 12)), $mul.ref(4, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $i79 := pidff_check_usage($i78);
    call {:si_unique_call 644} {:cexpr "ret"} boogie_si_record_i32($i79);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, $sub.i32(0, 1));
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p111 := $p20;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p24 := $p111;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 2088)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p115, $mul.ref(0, 2088)), $mul.ref(0, 1));
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($p116);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i118 := $ne.i64($i117, $i18);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i118 == 1);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb31:
    assume $i118 == 1;
    assume {:verifier.code 0} true;
    $p20 := $p114;
    goto $bb31_dummy;

  $bb22:
    assume $i80 == 1;
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i79);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref($i81, 8));
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i86 := $eq.i64($i85, 0);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb24;

  $bb25:
    assume $i86 == 1;
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p87, .str.7);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p88, .str.86);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p89, .str.9);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p90, .str.88);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i93 := $load.i24($M.7, $p92);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i94 := $and.i24($i93, $sub.i24(0, 262144));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i95 := $or.i24($i94, 857);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p92, $i95);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p96, 0);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.8, $p97);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i64($i98);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i100 := $and.i64($i99, 1);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $i101 := ldv__builtin_expect($i100, 0);
    call {:si_unique_call 646} {:cexpr "tmp___0"} boogie_si_record_i64($i101);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i108 := $sext.i32.i64($i79);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref($i108, 8));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p110, $p20);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p111 := $p20;
    goto $bb30;

  $bb27:
    assume $i102 == 1;
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i79);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref(pidff_reports, $mul.ref(0, 13)), $mul.ref($i104, 1));
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.28, $p105);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} __dynamic_dev_dbg.ref.ref.ref.i32($p4, $p103, .str.88, $i107);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i71 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p24 := $p20;
    goto $bb8;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb17;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p32, .str.7);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p33, .str.86);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p34, .str.9);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p35, .str.87);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i38 := $load.i24($M.7, $p37);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i39 := $and.i24($i38, $sub.i24(0, 262144));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i40 := $or.i24($i39, 837);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p37, $i40);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p41, 0);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.8, $p42);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i64($i43);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i45 := $and.i64($i44, 1);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $i46 := ldv__builtin_expect($i45, 0);
    call {:si_unique_call 640} {:cexpr "tmp"} boogie_si_record_i64($i46);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i30);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref($i53, 8));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, $p20);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p24 := $p20;
    goto $bb8;

  $bb12:
    assume $i47 == 1;
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i30);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref(pidff_reports, $mul.ref(0, 13)), $mul.ref($i49, 1));
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.28, $p50);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} __dynamic_dev_dbg.ref.ref.ref.i32($p3, $p48, .str.87, $i52);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p24 := $p20;
    goto $bb8;

  $bb31_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3090;
}



const pidff_reports_ok: ref;

axiom pidff_reports_ok == $sub.ref(0, 385191);

procedure pidff_reports_ok($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation pidff_reports_ok($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(2, 8));
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i7 := 2;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(3, 8));
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i7 := 3;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i7 := 4;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(5, 8));
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i52 := $eq.i64($i51, 0);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i7 := 5;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(6, 8));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i57 := $eq.i64($i56, 0);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i7 := 6;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(7, 8));
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i62 := $eq.i64($i61, 0);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i7 := 7;
    assume {:branchcond $i62} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i27 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.7);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.89);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p10, .str.9);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p11, .str.90);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.7, $p13);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 872);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p13, $i16);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p17, 0);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.8, $p18);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 650} {:cexpr "tmp"} boogie_si_record_i64($i22);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb9;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} __dynamic_dev_dbg.ref.ref.ref.i32($p1, $p26, .str.90, $i7);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb4;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb4;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb4;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb4;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb4;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb4;
}



const pidff_init_fields: ref;

axiom pidff_init_fields == $sub.ref(0, 386223);

procedure pidff_init_fields($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation pidff_init_fields($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $p127: ref;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $p153: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p167: ref;
  var $p168: ref;
  var $p170: ref;
  var $p171: ref;
  var $p173: ref;
  var $p174: ref;
  var $i175: i32;
  var $i176: i1;
  var $p177: ref;
  var $p178: ref;
  var $i12: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(112, 1));
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $i7 := pidff_find_fields($p3, pidff_set_effect, $p6, 7, 1);
    call {:si_unique_call 653} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(608, 1));
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} vslice_dummy_var_53 := pidff_find_fields($p14, pidff_block_load, $p17, 2, 0);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(608, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(688, 1));
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $i33 := pidff_find_fields($p29, pidff_effect_operation, $p32, 2, 1);
    call {:si_unique_call 658} {:cexpr "tmp___0"} boogie_si_record_i32($i33);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(720, 1));
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(5, 8));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $i43 := pidff_find_fields($p39, pidff_block_free, $p42, 1, 1);
    call {:si_unique_call 661} {:cexpr "tmp___1"} boogie_si_record_i32($i43);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(224, 1));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(8, 8));
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $i53 := pidff_find_fields($p49, pidff_set_envelope, $p52, 5, 1);
    call {:si_unique_call 664} {:cexpr "tmp___2"} boogie_si_record_i32($i53);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $i56 := pidff_find_special_fields($p0);
    call {:si_unique_call 666} {:cexpr "tmp___3"} boogie_si_record_i32($i56);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i57 == 1);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $i58 := pidff_find_effects($p0, $p1);
    call {:si_unique_call 668} {:cexpr "tmp___4"} boogie_si_record_i32($i58);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i55, 0);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $i84 := constant_test_bit(82, $p83);
    call {:si_unique_call 679} {:cexpr "tmp___8"} boogie_si_record_i32($i84);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $i100 := constant_test_bit(87, $p99);
    call {:si_unique_call 685} {:cexpr "tmp___10"} boogie_si_record_i32($i100);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $i116 := constant_test_bit(83, $p115);
    call {:si_unique_call 691} {:cexpr "tmp___12"} boogie_si_record_i32($i116);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i117 == 1);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $i120 := constant_test_bit(85, $p119);
    call {:si_unique_call 693} {:cexpr "tmp___13"} boogie_si_record_i32($i120);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i121 == 1);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $i124 := constant_test_bit(84, $p123);
    call {:si_unique_call 697} {:cexpr "tmp___14"} boogie_si_record_i32($i124);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i125 == 1);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $i128 := constant_test_bit(86, $p127);
    call {:si_unique_call 699} {:cexpr "tmp___15"} boogie_si_record_i32($i128);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p148);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $i150 := constant_test_bit(81, $p149);
    call {:si_unique_call 706} {:cexpr "tmp___17"} boogie_si_record_i32($i150);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i151 := $ne.i32($i150, 0);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(640, 1));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p164);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(3, 8));
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.0, $p167);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} vslice_dummy_var_54 := pidff_find_fields($p165, pidff_pool, $p168, 3, 0);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(592, 1));
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p171 := $bitcast.ref.ref($p170);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(2, 8));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.0, $p173);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $i175 := pidff_find_fields($p171, pidff_device_gain, $p174, 1, 1);
    call {:si_unique_call 713} {:cexpr "tmp___19"} boogie_si_record_i32($i175);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i175, 0);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i176} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb69:
    assume $i176 == 1;
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p177);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} set_bit(96, $p178);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb63:
    assume $i151 == 1;
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(432, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p152);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(10, 8));
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $i157 := pidff_find_fields($p153, pidff_set_periodic, $p156, 5, 1);
    call {:si_unique_call 708} {:cexpr "tmp___18"} boogie_si_record_i32($i157);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i157, 0);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb65:
    assume $i158 == 1;
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p159);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p160, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} dev_warn.ref.ref($p161, .str.101);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} clear_bit(81, $p163);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb54:
    assume $i129 == 1;
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(304, 1));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(9, 8));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $i135 := pidff_find_fields($p131, pidff_set_condition, $p134, 8, 1);
    call {:si_unique_call 695} {:cexpr "tmp___16"} boogie_si_record_i32($i135);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i136 := $ne.i32($i135, 0);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb56:
    assume $i136 == 1;
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p138, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} dev_warn.ref.ref($p139, .str.100);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} clear_bit(83, $p141);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p142);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} clear_bit(85, $p143);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} clear_bit(84, $p145);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p146);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} clear_bit(86, $p147);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb52:
    assume $i125 == 1;
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb50:
    assume $i121 == 1;
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb47:
    assume $i117 == 1;
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb41:
    assume $i101 == 1;
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(544, 1));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(12, 8));
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $i107 := pidff_find_fields($p103, pidff_set_ramp, $p106, 3, 1);
    call {:si_unique_call 687} {:cexpr "tmp___11"} boogie_si_record_i32($i107);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb43:
    assume $i108 == 1;
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} dev_warn.ref.ref($p111, .str.99);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} clear_bit(87, $p113);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb35:
    assume $i85 == 1;
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(512, 1));
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(11, 8));
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $i91 := pidff_find_fields($p87, pidff_set_constant, $p90, 2, 1);
    call {:si_unique_call 681} {:cexpr "tmp___9"} boogie_si_record_i32($i91);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i92 == 1;
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} dev_warn.ref.ref($p95, .str.98);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} clear_bit(82, $p97);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb23:
    assume $i60 == 1;
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $i63 := test_and_clear_bit(82, $p62);
    call {:si_unique_call 670} {:cexpr "tmp___5"} boogie_si_record_i32($i63);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $i70 := test_and_clear_bit(87, $p69);
    call {:si_unique_call 673} {:cexpr "tmp___6"} boogie_si_record_i32($i70);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $i77 := test_and_clear_bit(81, $p76);
    call {:si_unique_call 676} {:cexpr "tmp___7"} boogie_si_record_i32($i77);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i78 == 1;
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} dev_warn.ref.ref($p81, .str.97);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i71 == 1;
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} dev_warn.ref.ref($p74, .str.96);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i64 == 1;
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} dev_warn.ref.ref($p67, .str.95);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume $i59 == 1;
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 19);
    goto $bb3;

  $bb17:
    assume $i57 == 1;
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 19);
    goto $bb3;

  $bb14:
    assume $i54 == 1;
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i55 := 1;
    goto $bb16;

  $bb11:
    assume $i44 == 1;
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} dev_err.ref.ref($p47, .str.94);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 19);
    goto $bb3;

  $bb8:
    assume $i34 == 1;
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} dev_err.ref.ref($p37, .str.93);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 19);
    goto $bb3;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} dev_err.ref.ref($p27, .str.92);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} dev_err.ref.ref($p11, .str.91);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 19);
    goto $bb3;
}



const pidff_reset: ref;

axiom pidff_reset == $sub.ref(0, 387255);

procedure pidff_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.37, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.27, $M.42, assertsPassed, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.24;



implementation pidff_reset($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i24;
  var $i60: i24;
  var $i61: i24;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i64;
  var $i66: i64;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $i42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(784, 1)), $mul.ref(1, 4));
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(760, 1));
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i6);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(6, 8));
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} hid_hw_request($p3, $p13, 9);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} hid_hw_wait($p3);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(6, 8));
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} hid_hw_request($p3, $p16, 9);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} hid_hw_wait($p3);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(784, 1)), $mul.ref(0, 4));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(760, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i19);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(6, 8));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} hid_hw_request($p3, $p26, 9);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} hid_hw_wait($p3);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(3, 8));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} hid_hw_request($p3, $p29, 1);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} hid_hw_wait($p3);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(640, 1)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i35 == 1;
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(640, 1)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i41 := $sle.i32($i40, 1);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb3:
    assume $i41 == 1;
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb6;

  $bb6:
    call $i43, $i44, $p53, $p54, $p55, $p56, $p57, $p58, $i59, $i60, $i61, $p62, $p63, $i64, $i65, $i66, $i67, $i68, $p69, $p70, $p71, $p73, $p74, $p75, $i76, $i77, $i42 := pidff_reset_loop_$bb6($p0, $p1, $p3, $p38, $i43, $i44, $p53, $p54, $p55, $p56, $p57, $p58, $i59, $i60, $i61, $p62, $p63, $i64, $i65, $i66, $i67, $i68, $p69, $p70, $p71, $p73, $p74, $p75, $i76, $i77, $i42);
    goto $bb6_last;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, 1);
    call {:si_unique_call 724} {:cexpr "i"} boogie_si_record_i32($i43);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i44 := $sgt.i32($i42, 20);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p53, .str.7);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p54, .str.123);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p55, .str.9);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p56, .str.124);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i59 := $load.i24($M.7, $p58);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i60 := $and.i24($i59, $sub.i24(0, 262144));
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i61 := $or.i24($i60, 1189);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p58, $i61);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p62, 0);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.8, $p63);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i64($i64);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i66 := $and.i64($i65, 1);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i67 := ldv__builtin_expect($i66, 0);
    call {:si_unique_call 727} {:cexpr "tmp___0"} boogie_si_record_i64($i67);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(3, 8));
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} hid_hw_request($p3, $p74, 1);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} hid_hw_wait($p3);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p38);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i77 := $sle.i32($i76, 1);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i77 == 1);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb15:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    $i42 := $i43;
    goto $bb15_dummy;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i68 == 1;
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} __dynamic_dev_dbg.ref.ref.ref($p1, $p71, .str.124);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i44 == 1;
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(640, 1)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} dev_warn.ref.ref.i32($p47, .str.122, $i52);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3598;
}



const pidff_set: ref;

axiom pidff_set == $sub.ref(0, 388287);

procedure pidff_set($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $CurrAddr;



implementation pidff_set($p0: ref, $i1: i16)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 732} {:cexpr "pidff_set:arg:value"} boogie_si_record_i16($i1);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i1);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $i6 := pidff_rescale($i3, 65535, $p5);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i6);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, $p9, .str.7);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, $p10, .str.125);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $M.31 := $store.ref($M.31, $p11, .str.9);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p12, .str.126);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.33, $p14);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 223);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $M.33 := $store.i24($M.33, $p14, $i17);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $M.34 := $store.i8($M.34, $p18, 0);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.34, $p19);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 735} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i1);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} __dynamic_pr_debug.ref.ref.i32.i32($p2, .str.127, $i25, $i28);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hid_hw_request: ref;

axiom hid_hw_request == $sub.ref(0, 389319);

procedure hid_hw_request($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation hid_hw_request($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} {:cexpr "hid_hw_request:arg:reqtype"} boogie_si_record_i32($i2);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8000, 1));
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} __hid_request($p0, $p1, $i2);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pidff_check_autocenter: ref;

axiom pidff_check_autocenter == $sub.ref(0, 390351);

procedure pidff_check_autocenter($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.37, $CurrAddr, $M.27, $M.42, assertsPassed, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.24;



implementation pidff_check_autocenter($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $i2 := pidff_request_effect_upload($p0, 1);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 740} {:cexpr "error"} boogie_si_record_i32($i2);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(608, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(608, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 112)), $mul.ref(56, 1));
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 1);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i12, $i19);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} dev_notice.ref.ref($p25, .str.129);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(608, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} pidff_erase_pid($p0, $i30);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} pidff_autocenter($p0, $sub.i16(0, 1));
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} set_bit(97, $p22);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} dev_err.ref.ref($p6, .str.128);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i7 := $i2;
    goto $bb3;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const dev_notice: ref;

axiom dev_notice == $sub.ref(0, 391383);

procedure dev_notice.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_notice.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    return;
}



const input_ff_create: ref;

axiom input_ff_create == $sub.ref(0, 392415);

procedure input_ff_create($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation input_ff_create($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 746} {:cexpr "input_ff_create:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 1} true;
    call {:si_unique_call 747} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 748} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pidff_upload_effect: ref;

axiom pidff_upload_effect == $sub.ref(0, 393447);

procedure pidff_upload_effect($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const pidff_erase_effect: ref;

axiom pidff_erase_effect == $sub.ref(0, 394479);

procedure pidff_erase_effect($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr, $M.37, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.27, $M.42, assertsPassed, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.24;



implementation pidff_erase_effect($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 750} {:cexpr "pidff_erase_effect:arg:effect_id"} boogie_si_record_i32($i1);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2296)), $mul.ref(248, 1));
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(48, 1));
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i1);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1112)), $mul.ref(852, 1)), $mul.ref($i8, 4));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    call {:si_unique_call 751} {:cexpr "pid_id"} boogie_si_record_i32($i11);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p12, .str.7);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str.143);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p14, .str.9);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p15, .str.144);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.7, $p17);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 551);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p17, $i20);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p21, 0);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.8, $p22);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 753} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} hid_hw_wait($p36);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} pidff_playback_pid($p7, $i11, 0);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} pidff_erase_pid($p7, $i11);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p7, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i1);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1112)), $mul.ref(852, 1)), $mul.ref($i31, 4));
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p2, $p30, .str.144, $i1, $i34);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pidff_set_gain: ref;

axiom pidff_set_gain == $sub.ref(0, 395511);

procedure pidff_set_gain($p0: ref, $i1: i16);



const pidff_set_autocenter: ref;

axiom pidff_set_autocenter == $sub.ref(0, 396543);

procedure pidff_set_autocenter($p0: ref, $i1: i16);



const pidff_playback: ref;

axiom pidff_playback == $sub.ref(0, 397575);

procedure pidff_playback($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 398607);

procedure _dev_info.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    return;
}



const hid_device_io_stop: ref;

axiom hid_device_io_stop == $sub.ref(0, 399639);

procedure hid_device_io_stop($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation hid_device_io_stop($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8044, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} dev_warn.ref.ref($p4, .str.145);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8044, 1));
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 0);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6472, 1));
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} down($p6);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 400671);

procedure dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_warn.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    return;
}



const down: ref;

axiom down == $sub.ref(0, 401703);

procedure down($p0: ref);
  free requires assertsPassed;



implementation down($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    return;
}



const pidff_playback_pid: ref;

axiom pidff_playback_pid == $sub.ref(0, 402735);

procedure pidff_playback_pid($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pidff_playback_pid($p0: ref, $i1: i32, $i2: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} {:cexpr "pidff_playback_pid:arg:pid_id"} boogie_si_record_i32($i1);
    call {:si_unique_call 761} {:cexpr "pidff_playback_pid:arg:n"} boogie_si_record_i32($i2);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(688, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i1);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 0);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(844, 1)), $mul.ref(0, 4));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(776, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i17);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(688, 1)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i2);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} hid_hw_request($p27, $p30, 9);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(844, 1)), $mul.ref(1, 4));
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(776, 1));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i10);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pidff_autocenter: ref;

axiom pidff_autocenter == $sub.ref(0, 403767);

procedure pidff_autocenter($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $CurrAddr;



implementation pidff_autocenter($p0: ref, $i1: i16)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p31: ref;
  var $p32: ref;
  var $p35: ref;
  var $p36: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i16;
  var $p48: ref;
  var $p49: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} {:cexpr "pidff_autocenter:arg:magnitude"} boogie_si_record_i16($i1);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(608, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i1);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(56, 1));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} pidff_playback_pid($p0, $i11, 1);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(608, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 112)), $mul.ref(56, 1));
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(112, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i17);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(792, 1)), $mul.ref(7, 4));
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(744, 1));
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i24);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(112, 1)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 0);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(112, 1)), $mul.ref(3, 16)), $mul.ref(8, 1));
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 0);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(112, 1)), $mul.ref(4, 16)), $mul.ref(8, 1));
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, 0);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(112, 1));
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref(2, 16));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i1);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i44);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} pidff_set($p43, $i45);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(112, 1)), $mul.ref(5, 16)), $mul.ref(8, 1));
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 1);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(112, 1)), $mul.ref(6, 16)), $mul.ref(8, 1));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 0);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} hid_hw_request($p55, $p58, 9);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(56, 1));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} pidff_playback_pid($p0, $i9, 0);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hid_hw_wait: ref;

axiom hid_hw_wait == $sub.ref(0, 404799);

procedure hid_hw_wait($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $M.37, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.27, $CurrAddr, $M.42, assertsPassed, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.24;



implementation hid_hw_wait($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var vslice_dummy_var_55: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8000, 1));
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8000, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    call {:si_unique_call 768} vslice_dummy_var_55 := devirtbounce.1($p12, $p0);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const pidff_erase_pid: ref;

axiom pidff_erase_pid == $sub.ref(0, 405831);

procedure pidff_erase_pid($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pidff_erase_pid($p0: ref, $i1: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} {:cexpr "pidff_erase_pid:arg:pid_id"} boogie_si_record_i32($i1);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(720, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i1);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(5, 8));
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} hid_hw_request($p7, $p10, 9);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    return;
}



const pidff_request_effect_upload: ref;

axiom pidff_request_effect_upload == $sub.ref(0, 406863);

procedure pidff_request_effect_upload($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.37, $CurrAddr, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.27, $M.42, assertsPassed, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.24;



implementation pidff_request_effect_upload($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i24;
  var $i22: i24;
  var $i23: i24;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i24;
  var $i51: i24;
  var $i52: i24;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i24;
  var $i86: i24;
  var $i87: i24;
  var $p88: ref;
  var $p89: ref;
  var $i90: i8;
  var $i91: i64;
  var $i92: i64;
  var $i93: i64;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $i103: i1;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i32;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $p117: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i24;
  var $i127: i24;
  var $i128: i24;
  var $p129: ref;
  var $p130: ref;
  var $i131: i8;
  var $i132: i64;
  var $i133: i64;
  var $i134: i64;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i64;
  var $i144: i1;
  var $p147: ref;
  var $p148: ref;
  var $i149: i32;
  var $i150: i32;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i110: i32;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i24;
  var $i161: i24;
  var $i162: i24;
  var $p163: ref;
  var $p164: ref;
  var $i165: i8;
  var $i166: i64;
  var $i167: i64;
  var $i168: i64;
  var $i169: i1;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $i184: i32;
  var $p186: ref;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $i193: i32;
  var $p195: ref;
  var $i196: i32;
  var $i197: i1;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $i204: i24;
  var $i205: i24;
  var $i206: i24;
  var $p207: ref;
  var $p208: ref;
  var $i209: i8;
  var $i210: i64;
  var $i211: i64;
  var $i212: i64;
  var $i213: i1;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $i228: i32;
  var $p230: ref;
  var $i231: i32;
  var $i232: i1;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $i237: i32;
  var $p239: ref;
  var $i240: i32;
  var $i241: i1;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $i248: i24;
  var $i249: i24;
  var $i250: i24;
  var $p251: ref;
  var $p252: ref;
  var $i253: i8;
  var $i254: i64;
  var $i255: i64;
  var $i256: i64;
  var $i257: i1;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $i272: i32;
  var $p274: ref;
  var $i275: i32;
  var $i276: i1;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $p280: ref;
  var $i281: i32;
  var $p283: ref;
  var $i284: i32;
  var $i285: i1;
  var $p286: ref;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $i292: i24;
  var $i293: i24;
  var $i294: i24;
  var $p295: ref;
  var $p296: ref;
  var $i297: i8;
  var $i298: i64;
  var $i299: i64;
  var $i300: i64;
  var $i301: i1;
  var $p302: ref;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $p308: ref;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $p314: ref;
  var $p315: ref;
  var $i316: i32;
  var $p318: ref;
  var $i319: i32;
  var $i320: i1;
  var $p321: ref;
  var $p322: ref;
  var $p323: ref;
  var $p324: ref;
  var $i325: i32;
  var $p327: ref;
  var $i328: i32;
  var $i329: i1;
  var $p330: ref;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $p334: ref;
  var $p335: ref;
  var $i336: i24;
  var $i337: i24;
  var $i338: i24;
  var $p339: ref;
  var $p340: ref;
  var $i341: i8;
  var $i342: i64;
  var $i343: i64;
  var $i344: i64;
  var $i345: i1;
  var $p346: ref;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $p350: ref;
  var $p352: ref;
  var $p353: ref;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $p359: ref;
  var $i360: i32;
  var $p362: ref;
  var $i363: i32;
  var $i364: i1;
  var $p365: ref;
  var $p366: ref;
  var $p367: ref;
  var $p368: ref;
  var $i369: i32;
  var $p371: ref;
  var $i372: i32;
  var $i373: i1;
  var $p374: ref;
  var $p375: ref;
  var $p376: ref;
  var $p377: ref;
  var $p378: ref;
  var $p379: ref;
  var $i380: i24;
  var $i381: i24;
  var $i382: i24;
  var $p383: ref;
  var $p384: ref;
  var $i385: i8;
  var $i386: i64;
  var $i387: i64;
  var $i388: i64;
  var $i389: i1;
  var $p390: ref;
  var $p391: ref;
  var $p392: ref;
  var $p393: ref;
  var $p394: ref;
  var $p396: ref;
  var $p397: ref;
  var $p398: ref;
  var $p399: ref;
  var $p400: ref;
  var $p401: ref;
  var $p402: ref;
  var $p403: ref;
  var $i404: i32;
  var $p406: ref;
  var $i407: i32;
  var $i408: i1;
  var $p409: ref;
  var $p410: ref;
  var $p411: ref;
  var $p412: ref;
  var $i413: i32;
  var $p415: ref;
  var $i416: i32;
  var $i417: i1;
  var $p418: ref;
  var $p419: ref;
  var $p420: ref;
  var $p421: ref;
  var $p422: ref;
  var $p423: ref;
  var $i424: i24;
  var $i425: i24;
  var $i426: i24;
  var $p427: ref;
  var $p428: ref;
  var $i429: i8;
  var $i430: i64;
  var $i431: i64;
  var $i432: i64;
  var $i433: i1;
  var $p434: ref;
  var $p435: ref;
  var $p436: ref;
  var $p437: ref;
  var $p438: ref;
  var $p440: ref;
  var $p441: ref;
  var $p442: ref;
  var $p443: ref;
  var $p444: ref;
  var $p445: ref;
  var $p446: ref;
  var $p447: ref;
  var $i448: i32;
  var $p450: ref;
  var $i451: i32;
  var $i452: i1;
  var $p453: ref;
  var $p454: ref;
  var $p455: ref;
  var $p456: ref;
  var $i457: i32;
  var $p459: ref;
  var $i460: i32;
  var $i461: i1;
  var $p462: ref;
  var $p463: ref;
  var $p464: ref;
  var $p465: ref;
  var $p466: ref;
  var $p467: ref;
  var $i468: i24;
  var $i469: i24;
  var $i470: i24;
  var $p471: ref;
  var $p472: ref;
  var $i473: i8;
  var $i474: i64;
  var $i475: i64;
  var $i476: i64;
  var $i477: i1;
  var $p478: ref;
  var $p479: ref;
  var $p480: ref;
  var $p481: ref;
  var $p482: ref;
  var $p484: ref;
  var $p485: ref;
  var $p486: ref;
  var $p487: ref;
  var $p488: ref;
  var $p489: ref;
  var $p490: ref;
  var $p491: ref;
  var $i492: i32;
  var $p494: ref;
  var $i495: i32;
  var $i496: i1;
  var $p497: ref;
  var $p498: ref;
  var $p499: ref;
  var $p500: ref;
  var $i501: i32;
  var $p503: ref;
  var $i504: i32;
  var $i505: i1;
  var $p506: ref;
  var $p507: ref;
  var $p508: ref;
  var $p509: ref;
  var $p510: ref;
  var $p511: ref;
  var $i512: i24;
  var $i513: i24;
  var $i514: i24;
  var $p515: ref;
  var $p516: ref;
  var $i517: i8;
  var $i518: i64;
  var $i519: i64;
  var $i520: i64;
  var $i521: i1;
  var $p522: ref;
  var $p523: ref;
  var $p524: ref;
  var $p525: ref;
  var $p526: ref;
  var $p528: ref;
  var $p529: ref;
  var $p530: ref;
  var $p531: ref;
  var $p532: ref;
  var $p533: ref;
  var $p534: ref;
  var $p535: ref;
  var $i536: i32;
  var $p538: ref;
  var $i539: i32;
  var $i540: i1;
  var $p541: ref;
  var $p542: ref;
  var $p543: ref;
  var $p544: ref;
  var $i545: i32;
  var $p547: ref;
  var $i548: i32;
  var $i549: i1;
  var $p550: ref;
  var $p551: ref;
  var $p552: ref;
  var $p553: ref;
  var $p554: ref;
  var $p555: ref;
  var $i556: i24;
  var $i557: i24;
  var $i558: i24;
  var $p559: ref;
  var $p560: ref;
  var $i561: i8;
  var $i562: i64;
  var $i563: i64;
  var $i564: i64;
  var $i565: i1;
  var $p566: ref;
  var $p567: ref;
  var $p568: ref;
  var $p569: ref;
  var $p570: ref;
  var $p572: ref;
  var $p573: ref;
  var $p574: ref;
  var $p575: ref;
  var $p576: ref;
  var $p577: ref;
  var $p578: ref;
  var $p579: ref;
  var $i580: i32;
  var $p582: ref;
  var $i583: i32;
  var $i584: i1;
  var $p585: ref;
  var $p586: ref;
  var $p587: ref;
  var $p588: ref;
  var $i589: i32;
  var $p591: ref;
  var $i592: i32;
  var $i593: i1;
  var $p594: ref;
  var $p595: ref;
  var $p596: ref;
  var $p597: ref;
  var $p598: ref;
  var $p599: ref;
  var $i600: i24;
  var $i601: i24;
  var $i602: i24;
  var $p603: ref;
  var $p604: ref;
  var $i605: i8;
  var $i606: i64;
  var $i607: i64;
  var $i608: i64;
  var $i609: i1;
  var $p610: ref;
  var $p611: ref;
  var $p612: ref;
  var $p613: ref;
  var $p614: ref;
  var $p616: ref;
  var $p617: ref;
  var $p618: ref;
  var $p619: ref;
  var $p620: ref;
  var $p621: ref;
  var $p622: ref;
  var $p623: ref;
  var $i624: i32;
  var $p626: ref;
  var $i627: i32;
  var $i628: i1;
  var $p629: ref;
  var $p630: ref;
  var $p631: ref;
  var $p632: ref;
  var $i633: i32;
  var $p635: ref;
  var $i636: i32;
  var $i637: i1;
  var $p638: ref;
  var $p639: ref;
  var $p640: ref;
  var $p641: ref;
  var $p642: ref;
  var $p643: ref;
  var $i644: i24;
  var $i645: i24;
  var $i646: i24;
  var $p647: ref;
  var $p648: ref;
  var $i649: i8;
  var $i650: i64;
  var $i651: i64;
  var $i652: i64;
  var $i653: i1;
  var $p654: ref;
  var $p655: ref;
  var $p656: ref;
  var $p657: ref;
  var $p658: ref;
  var $p660: ref;
  var $p661: ref;
  var $p662: ref;
  var $p663: ref;
  var $p664: ref;
  var $p665: ref;
  var $p666: ref;
  var $p667: ref;
  var $i668: i32;
  var $p670: ref;
  var $i671: i32;
  var $i672: i1;
  var $p673: ref;
  var $p674: ref;
  var $p675: ref;
  var $p676: ref;
  var $i677: i32;
  var $p679: ref;
  var $i680: i32;
  var $i681: i1;
  var $p682: ref;
  var $p683: ref;
  var $p684: ref;
  var $p685: ref;
  var $p686: ref;
  var $p687: ref;
  var $i688: i24;
  var $i689: i24;
  var $i690: i24;
  var $p691: ref;
  var $p692: ref;
  var $i693: i8;
  var $i694: i64;
  var $i695: i64;
  var $i696: i64;
  var $i697: i1;
  var $p698: ref;
  var $p699: ref;
  var $p700: ref;
  var $p701: ref;
  var $p702: ref;
  var $p704: ref;
  var $p705: ref;
  var $p706: ref;
  var $p707: ref;
  var $p708: ref;
  var $p709: ref;
  var $p710: ref;
  var $p711: ref;
  var $i712: i32;
  var $p714: ref;
  var $i715: i32;
  var $i716: i1;
  var $p717: ref;
  var $p718: ref;
  var $p719: ref;
  var $p720: ref;
  var $i721: i32;
  var $p723: ref;
  var $i724: i32;
  var $i725: i1;
  var $p726: ref;
  var $p727: ref;
  var $p728: ref;
  var $p729: ref;
  var $p730: ref;
  var $p731: ref;
  var $i732: i24;
  var $i733: i24;
  var $i734: i24;
  var $p735: ref;
  var $p736: ref;
  var $i737: i8;
  var $i738: i64;
  var $i739: i64;
  var $i740: i64;
  var $i741: i1;
  var $p742: ref;
  var $p743: ref;
  var $p744: ref;
  var $p745: ref;
  var $p746: ref;
  var $p748: ref;
  var $p749: ref;
  var $p750: ref;
  var $p751: ref;
  var $p752: ref;
  var $p753: ref;
  var $p754: ref;
  var $p755: ref;
  var $i756: i32;
  var $p758: ref;
  var $i759: i32;
  var $i760: i1;
  var $p761: ref;
  var $p762: ref;
  var $p763: ref;
  var $p764: ref;
  var $i765: i32;
  var $p767: ref;
  var $i768: i32;
  var $i769: i1;
  var $p770: ref;
  var $p771: ref;
  var $p772: ref;
  var $p773: ref;
  var $p774: ref;
  var $p775: ref;
  var $i776: i24;
  var $i777: i24;
  var $i778: i24;
  var $p779: ref;
  var $p780: ref;
  var $i781: i8;
  var $i782: i64;
  var $i783: i64;
  var $i784: i64;
  var $i785: i1;
  var $p786: ref;
  var $p787: ref;
  var $p788: ref;
  var $p789: ref;
  var $p790: ref;
  var $p792: ref;
  var $p793: ref;
  var $p794: ref;
  var $p795: ref;
  var $p796: ref;
  var $p797: ref;
  var $p798: ref;
  var $p799: ref;
  var $i800: i32;
  var $p802: ref;
  var $i803: i32;
  var $i804: i1;
  var $p805: ref;
  var $p806: ref;
  var $p807: ref;
  var $p808: ref;
  var $i809: i32;
  var $p811: ref;
  var $i812: i32;
  var $i813: i1;
  var $p814: ref;
  var $p815: ref;
  var $p816: ref;
  var $p817: ref;
  var $p818: ref;
  var $p819: ref;
  var $i820: i24;
  var $i821: i24;
  var $i822: i24;
  var $p823: ref;
  var $p824: ref;
  var $i825: i8;
  var $i826: i64;
  var $i827: i64;
  var $i828: i64;
  var $i829: i1;
  var $p830: ref;
  var $p831: ref;
  var $p832: ref;
  var $p833: ref;
  var $p834: ref;
  var $p836: ref;
  var $p837: ref;
  var $p838: ref;
  var $p839: ref;
  var $p840: ref;
  var $p841: ref;
  var $p842: ref;
  var $p843: ref;
  var $i844: i32;
  var $p846: ref;
  var $i847: i32;
  var $i848: i1;
  var $p849: ref;
  var $p850: ref;
  var $p851: ref;
  var $p852: ref;
  var $i853: i32;
  var $p855: ref;
  var $i856: i32;
  var $i857: i1;
  var $p858: ref;
  var $p859: ref;
  var $p860: ref;
  var $p861: ref;
  var $p862: ref;
  var $p863: ref;
  var $i864: i24;
  var $i865: i24;
  var $i866: i24;
  var $p867: ref;
  var $p868: ref;
  var $i869: i8;
  var $i870: i64;
  var $i871: i64;
  var $i872: i64;
  var $i873: i1;
  var $p874: ref;
  var $p875: ref;
  var $p876: ref;
  var $p877: ref;
  var $p878: ref;
  var $p880: ref;
  var $p881: ref;
  var $p882: ref;
  var $p883: ref;
  var $p884: ref;
  var $p885: ref;
  var $p886: ref;
  var $p887: ref;
  var $i888: i32;
  var $p890: ref;
  var $i891: i32;
  var $i892: i1;
  var $p893: ref;
  var $p894: ref;
  var $p895: ref;
  var $p896: ref;
  var $i897: i32;
  var $p899: ref;
  var $i900: i32;
  var $i901: i1;
  var $p902: ref;
  var $p903: ref;
  var $p904: ref;
  var $p905: ref;
  var $p906: ref;
  var $p907: ref;
  var $i908: i24;
  var $i909: i24;
  var $i910: i24;
  var $p911: ref;
  var $p912: ref;
  var $i913: i8;
  var $i914: i64;
  var $i915: i64;
  var $i916: i64;
  var $i917: i1;
  var $p918: ref;
  var $p919: ref;
  var $p920: ref;
  var $p921: ref;
  var $p922: ref;
  var $p924: ref;
  var $p925: ref;
  var $p926: ref;
  var $p927: ref;
  var $p928: ref;
  var $p929: ref;
  var $p930: ref;
  var $p931: ref;
  var $i932: i32;
  var $p934: ref;
  var $i935: i32;
  var $i936: i1;
  var $p937: ref;
  var $p938: ref;
  var $p939: ref;
  var $p940: ref;
  var $i941: i32;
  var $p943: ref;
  var $i944: i32;
  var $i945: i1;
  var $p946: ref;
  var $p947: ref;
  var $p948: ref;
  var $p949: ref;
  var $p950: ref;
  var $p951: ref;
  var $i952: i24;
  var $i953: i24;
  var $i954: i24;
  var $p955: ref;
  var $p956: ref;
  var $i957: i8;
  var $i958: i64;
  var $i959: i64;
  var $i960: i64;
  var $i961: i1;
  var $p962: ref;
  var $p963: ref;
  var $p964: ref;
  var $p965: ref;
  var $p966: ref;
  var $p968: ref;
  var $p969: ref;
  var $p970: ref;
  var $p971: ref;
  var $p972: ref;
  var $p973: ref;
  var $p974: ref;
  var $p975: ref;
  var $i976: i32;
  var $p978: ref;
  var $i979: i32;
  var $i980: i1;
  var $p981: ref;
  var $p982: ref;
  var $p983: ref;
  var $p984: ref;
  var $i985: i32;
  var $p987: ref;
  var $i988: i32;
  var $i989: i1;
  var $p990: ref;
  var $p991: ref;
  var $p992: ref;
  var $p993: ref;
  var $p994: ref;
  var $p995: ref;
  var $i996: i24;
  var $i997: i24;
  var $i998: i24;
  var $p999: ref;
  var $p1000: ref;
  var $i1001: i8;
  var $i1002: i64;
  var $i1003: i64;
  var $i1004: i64;
  var $i1005: i1;
  var $p1006: ref;
  var $p1007: ref;
  var $p1008: ref;
  var $p1009: ref;
  var $p1010: ref;
  var $p1012: ref;
  var $p1013: ref;
  var $p1014: ref;
  var $p1015: ref;
  var $p1016: ref;
  var $p1017: ref;
  var $p1018: ref;
  var $p1019: ref;
  var $i1020: i32;
  var $p1022: ref;
  var $i1023: i32;
  var $i1024: i1;
  var $p1025: ref;
  var $p1026: ref;
  var $p1027: ref;
  var $p1028: ref;
  var $i1029: i32;
  var $p1031: ref;
  var $i1032: i32;
  var $i1033: i1;
  var $p1034: ref;
  var $p1035: ref;
  var $p1036: ref;
  var $p1037: ref;
  var $p1038: ref;
  var $p1039: ref;
  var $i1040: i24;
  var $i1041: i24;
  var $i1042: i24;
  var $p1043: ref;
  var $p1044: ref;
  var $i1045: i8;
  var $i1046: i64;
  var $i1047: i64;
  var $i1048: i64;
  var $i1049: i1;
  var $p1050: ref;
  var $p1051: ref;
  var $p1052: ref;
  var $p1053: ref;
  var $p1054: ref;
  var $p1056: ref;
  var $p1057: ref;
  var $p1058: ref;
  var $p1059: ref;
  var $p1060: ref;
  var $p1061: ref;
  var $p1062: ref;
  var $p1063: ref;
  var $i1064: i32;
  var $p1066: ref;
  var $i1067: i32;
  var $i1068: i1;
  var $p1069: ref;
  var $p1070: ref;
  var $p1071: ref;
  var $p1072: ref;
  var $i1073: i32;
  var $p1075: ref;
  var $i1076: i32;
  var $i1077: i1;
  var $p1078: ref;
  var $p1079: ref;
  var $p1080: ref;
  var $p1081: ref;
  var $p1082: ref;
  var $p1083: ref;
  var $i1084: i24;
  var $i1085: i24;
  var $i1086: i24;
  var $p1087: ref;
  var $p1088: ref;
  var $i1089: i8;
  var $i1090: i64;
  var $i1091: i64;
  var $i1092: i64;
  var $i1093: i1;
  var $p1094: ref;
  var $p1095: ref;
  var $p1096: ref;
  var $p1097: ref;
  var $p1098: ref;
  var $p1100: ref;
  var $p1101: ref;
  var $p1102: ref;
  var $p1103: ref;
  var $p1104: ref;
  var $p1105: ref;
  var $p1106: ref;
  var $p1107: ref;
  var $i1108: i32;
  var $p1110: ref;
  var $i1111: i32;
  var $i1112: i1;
  var $p1113: ref;
  var $p1114: ref;
  var $p1115: ref;
  var $p1116: ref;
  var $i1117: i32;
  var $p1119: ref;
  var $i1120: i32;
  var $i1121: i1;
  var $p1122: ref;
  var $p1123: ref;
  var $p1124: ref;
  var $p1125: ref;
  var $p1126: ref;
  var $p1127: ref;
  var $i1128: i24;
  var $i1129: i24;
  var $i1130: i24;
  var $p1131: ref;
  var $p1132: ref;
  var $i1133: i8;
  var $i1134: i64;
  var $i1135: i64;
  var $i1136: i64;
  var $i1137: i1;
  var $p1138: ref;
  var $p1139: ref;
  var $p1140: ref;
  var $p1141: ref;
  var $p1142: ref;
  var $p1144: ref;
  var $p1145: ref;
  var $p1146: ref;
  var $p1147: ref;
  var $p1148: ref;
  var $p1149: ref;
  var $p1150: ref;
  var $p1151: ref;
  var $i1152: i32;
  var $p1154: ref;
  var $i1155: i32;
  var $i1156: i1;
  var $p1157: ref;
  var $p1158: ref;
  var $p1159: ref;
  var $p1160: ref;
  var $i1161: i32;
  var $p1163: ref;
  var $i1164: i32;
  var $i1165: i1;
  var $p1166: ref;
  var $p1167: ref;
  var $p1168: ref;
  var $p1169: ref;
  var $p1170: ref;
  var $p1171: ref;
  var $i1172: i24;
  var $i1173: i24;
  var $i1174: i24;
  var $p1175: ref;
  var $p1176: ref;
  var $i1177: i8;
  var $i1178: i64;
  var $i1179: i64;
  var $i1180: i64;
  var $i1181: i1;
  var $p1182: ref;
  var $p1183: ref;
  var $p1184: ref;
  var $p1185: ref;
  var $p1186: ref;
  var $p1188: ref;
  var $p1189: ref;
  var $p1190: ref;
  var $p1191: ref;
  var $p1192: ref;
  var $p1193: ref;
  var $p1194: ref;
  var $p1195: ref;
  var $i1196: i32;
  var $p1198: ref;
  var $i1199: i32;
  var $i1200: i1;
  var $p1201: ref;
  var $p1202: ref;
  var $p1203: ref;
  var $p1204: ref;
  var $i1205: i32;
  var $p1207: ref;
  var $i1208: i32;
  var $i1209: i1;
  var $p1210: ref;
  var $p1211: ref;
  var $p1212: ref;
  var $p1213: ref;
  var $p1214: ref;
  var $p1215: ref;
  var $i1216: i24;
  var $i1217: i24;
  var $i1218: i24;
  var $p1219: ref;
  var $p1220: ref;
  var $i1221: i8;
  var $i1222: i64;
  var $i1223: i64;
  var $i1224: i64;
  var $i1225: i1;
  var $p1226: ref;
  var $p1227: ref;
  var $p1228: ref;
  var $p1229: ref;
  var $p1230: ref;
  var $p1232: ref;
  var $p1233: ref;
  var $p1234: ref;
  var $p1235: ref;
  var $p1236: ref;
  var $p1237: ref;
  var $p1238: ref;
  var $p1239: ref;
  var $i1240: i32;
  var $p1242: ref;
  var $i1243: i32;
  var $i1244: i1;
  var $p1245: ref;
  var $p1246: ref;
  var $p1247: ref;
  var $p1248: ref;
  var $i1249: i32;
  var $p1251: ref;
  var $i1252: i32;
  var $i1253: i1;
  var $p1254: ref;
  var $p1255: ref;
  var $p1256: ref;
  var $p1257: ref;
  var $p1258: ref;
  var $p1259: ref;
  var $i1260: i24;
  var $i1261: i24;
  var $i1262: i24;
  var $p1263: ref;
  var $p1264: ref;
  var $i1265: i8;
  var $i1266: i64;
  var $i1267: i64;
  var $i1268: i64;
  var $i1269: i1;
  var $p1270: ref;
  var $p1271: ref;
  var $p1272: ref;
  var $p1273: ref;
  var $p1274: ref;
  var $p1276: ref;
  var $p1277: ref;
  var $p1278: ref;
  var $p1279: ref;
  var $p1280: ref;
  var $p1281: ref;
  var $p1282: ref;
  var $p1283: ref;
  var $i1284: i32;
  var $p1286: ref;
  var $i1287: i32;
  var $i1288: i1;
  var $p1289: ref;
  var $p1290: ref;
  var $p1291: ref;
  var $p1292: ref;
  var $i1293: i32;
  var $p1295: ref;
  var $i1296: i32;
  var $i1297: i1;
  var $p1298: ref;
  var $p1299: ref;
  var $p1300: ref;
  var $p1301: ref;
  var $p1302: ref;
  var $p1303: ref;
  var $i1304: i24;
  var $i1305: i24;
  var $i1306: i24;
  var $p1307: ref;
  var $p1308: ref;
  var $i1309: i8;
  var $i1310: i64;
  var $i1311: i64;
  var $i1312: i64;
  var $i1313: i1;
  var $p1314: ref;
  var $p1315: ref;
  var $p1316: ref;
  var $p1317: ref;
  var $p1318: ref;
  var $p1320: ref;
  var $p1321: ref;
  var $p1322: ref;
  var $p1323: ref;
  var $p1324: ref;
  var $p1325: ref;
  var $p1326: ref;
  var $p1327: ref;
  var $i1328: i32;
  var $p1330: ref;
  var $i1331: i32;
  var $i1332: i1;
  var $p1333: ref;
  var $p1334: ref;
  var $p1335: ref;
  var $p1336: ref;
  var $i1337: i32;
  var $p1339: ref;
  var $i1340: i32;
  var $i1341: i1;
  var $p1342: ref;
  var $p1343: ref;
  var $p1344: ref;
  var $p1345: ref;
  var $p1346: ref;
  var $p1347: ref;
  var $i1348: i24;
  var $i1349: i24;
  var $i1350: i24;
  var $p1351: ref;
  var $p1352: ref;
  var $i1353: i8;
  var $i1354: i64;
  var $i1355: i64;
  var $i1356: i64;
  var $i1357: i1;
  var $p1358: ref;
  var $p1359: ref;
  var $p1360: ref;
  var $p1361: ref;
  var $p1362: ref;
  var $p1364: ref;
  var $p1365: ref;
  var $p1366: ref;
  var $p1367: ref;
  var $p1368: ref;
  var $p1369: ref;
  var $p1370: ref;
  var $p1371: ref;
  var $i1372: i32;
  var $p1374: ref;
  var $i1375: i32;
  var $i1376: i1;
  var $p1377: ref;
  var $p1378: ref;
  var $p1379: ref;
  var $p1380: ref;
  var $i1381: i32;
  var $p1383: ref;
  var $i1384: i32;
  var $i1385: i1;
  var $p1386: ref;
  var $p1387: ref;
  var $p1388: ref;
  var $p1389: ref;
  var $p1390: ref;
  var $p1391: ref;
  var $i1392: i24;
  var $i1393: i24;
  var $i1394: i24;
  var $p1395: ref;
  var $p1396: ref;
  var $i1397: i8;
  var $i1398: i64;
  var $i1399: i64;
  var $i1400: i64;
  var $i1401: i1;
  var $p1402: ref;
  var $p1403: ref;
  var $p1404: ref;
  var $p1405: ref;
  var $p1406: ref;
  var $p1408: ref;
  var $p1409: ref;
  var $p1410: ref;
  var $p1411: ref;
  var $p1412: ref;
  var $p1413: ref;
  var $p1414: ref;
  var $p1415: ref;
  var $i1416: i32;
  var $p1418: ref;
  var $i1419: i32;
  var $i1420: i1;
  var $p1421: ref;
  var $p1422: ref;
  var $p1423: ref;
  var $p1424: ref;
  var $i1425: i32;
  var $p1427: ref;
  var $i1428: i32;
  var $i1429: i1;
  var $p1430: ref;
  var $p1431: ref;
  var $p1432: ref;
  var $p1433: ref;
  var $p1434: ref;
  var $p1435: ref;
  var $i1436: i24;
  var $i1437: i24;
  var $i1438: i24;
  var $p1439: ref;
  var $p1440: ref;
  var $i1441: i8;
  var $i1442: i64;
  var $i1443: i64;
  var $i1444: i64;
  var $i1445: i1;
  var $p1446: ref;
  var $p1447: ref;
  var $p1448: ref;
  var $p1449: ref;
  var $p1450: ref;
  var $p1452: ref;
  var $p1453: ref;
  var $p1454: ref;
  var $p1455: ref;
  var $p1456: ref;
  var $p1457: ref;
  var $p1458: ref;
  var $p1459: ref;
  var $i1460: i32;
  var $p1462: ref;
  var $i1463: i32;
  var $i1464: i1;
  var $p1465: ref;
  var $p1466: ref;
  var $p1467: ref;
  var $p1468: ref;
  var $i1469: i32;
  var $p1471: ref;
  var $i1472: i32;
  var $i1473: i1;
  var $p1474: ref;
  var $p1475: ref;
  var $p1476: ref;
  var $p1477: ref;
  var $p1478: ref;
  var $p1479: ref;
  var $i1480: i24;
  var $i1481: i24;
  var $i1482: i24;
  var $p1483: ref;
  var $p1484: ref;
  var $i1485: i8;
  var $i1486: i64;
  var $i1487: i64;
  var $i1488: i64;
  var $i1489: i1;
  var $p1490: ref;
  var $p1491: ref;
  var $p1492: ref;
  var $p1493: ref;
  var $p1494: ref;
  var $p1496: ref;
  var $p1497: ref;
  var $p1498: ref;
  var $p1499: ref;
  var $p1500: ref;
  var $p1501: ref;
  var $p1502: ref;
  var $p1503: ref;
  var $i1504: i32;
  var $p1506: ref;
  var $i1507: i32;
  var $i1508: i1;
  var $p1509: ref;
  var $p1510: ref;
  var $p1511: ref;
  var $p1512: ref;
  var $i1513: i32;
  var $p1515: ref;
  var $i1516: i32;
  var $i1517: i1;
  var $p1518: ref;
  var $p1519: ref;
  var $p1520: ref;
  var $p1521: ref;
  var $p1522: ref;
  var $p1523: ref;
  var $i1524: i24;
  var $i1525: i24;
  var $i1526: i24;
  var $p1527: ref;
  var $p1528: ref;
  var $i1529: i8;
  var $i1530: i64;
  var $i1531: i64;
  var $i1532: i64;
  var $i1533: i1;
  var $p1534: ref;
  var $p1535: ref;
  var $p1536: ref;
  var $p1537: ref;
  var $p1538: ref;
  var $p1540: ref;
  var $p1541: ref;
  var $p1542: ref;
  var $p1543: ref;
  var $p1544: ref;
  var $p1545: ref;
  var $p1546: ref;
  var $p1547: ref;
  var $i1548: i32;
  var $p1550: ref;
  var $i1551: i32;
  var $i1552: i1;
  var $p1553: ref;
  var $p1554: ref;
  var $p1555: ref;
  var $p1556: ref;
  var $i1557: i32;
  var $p1559: ref;
  var $i1560: i32;
  var $i1561: i1;
  var $p1562: ref;
  var $p1563: ref;
  var $p1564: ref;
  var $p1565: ref;
  var $p1566: ref;
  var $p1567: ref;
  var $i1568: i24;
  var $i1569: i24;
  var $i1570: i24;
  var $p1571: ref;
  var $p1572: ref;
  var $i1573: i8;
  var $i1574: i64;
  var $i1575: i64;
  var $i1576: i64;
  var $i1577: i1;
  var $p1578: ref;
  var $p1579: ref;
  var $p1580: ref;
  var $p1581: ref;
  var $p1582: ref;
  var $p1584: ref;
  var $p1585: ref;
  var $p1586: ref;
  var $p1587: ref;
  var $p1588: ref;
  var $p1589: ref;
  var $p1590: ref;
  var $p1591: ref;
  var $i1592: i32;
  var $p1594: ref;
  var $i1595: i32;
  var $i1596: i1;
  var $p1597: ref;
  var $p1598: ref;
  var $p1599: ref;
  var $p1600: ref;
  var $i1601: i32;
  var $p1603: ref;
  var $i1604: i32;
  var $i1605: i1;
  var $p1606: ref;
  var $p1607: ref;
  var $p1608: ref;
  var $p1609: ref;
  var $p1610: ref;
  var $p1611: ref;
  var $i1612: i24;
  var $i1613: i24;
  var $i1614: i24;
  var $p1615: ref;
  var $p1616: ref;
  var $i1617: i8;
  var $i1618: i64;
  var $i1619: i64;
  var $i1620: i64;
  var $i1621: i1;
  var $p1622: ref;
  var $p1623: ref;
  var $p1624: ref;
  var $p1625: ref;
  var $p1626: ref;
  var $p1628: ref;
  var $p1629: ref;
  var $p1630: ref;
  var $p1631: ref;
  var $p1632: ref;
  var $p1633: ref;
  var $p1634: ref;
  var $p1635: ref;
  var $i1636: i32;
  var $p1638: ref;
  var $i1639: i32;
  var $i1640: i1;
  var $p1641: ref;
  var $p1642: ref;
  var $p1643: ref;
  var $p1644: ref;
  var $i1645: i32;
  var $p1647: ref;
  var $i1648: i32;
  var $i1649: i1;
  var $p1650: ref;
  var $p1651: ref;
  var $p1652: ref;
  var $p1653: ref;
  var $p1654: ref;
  var $p1655: ref;
  var $i1656: i24;
  var $i1657: i24;
  var $i1658: i24;
  var $p1659: ref;
  var $p1660: ref;
  var $i1661: i8;
  var $i1662: i64;
  var $i1663: i64;
  var $i1664: i64;
  var $i1665: i1;
  var $p1666: ref;
  var $p1667: ref;
  var $p1668: ref;
  var $p1669: ref;
  var $p1670: ref;
  var $p1672: ref;
  var $p1673: ref;
  var $p1674: ref;
  var $p1675: ref;
  var $p1676: ref;
  var $p1677: ref;
  var $p1678: ref;
  var $p1679: ref;
  var $i1680: i32;
  var $p1682: ref;
  var $i1683: i32;
  var $i1684: i1;
  var $p1685: ref;
  var $p1686: ref;
  var $p1687: ref;
  var $p1688: ref;
  var $i1689: i32;
  var $p1691: ref;
  var $i1692: i32;
  var $i1693: i1;
  var $p1694: ref;
  var $p1695: ref;
  var $p1696: ref;
  var $p1697: ref;
  var $p1698: ref;
  var $p1699: ref;
  var $i1700: i24;
  var $i1701: i24;
  var $i1702: i24;
  var $p1703: ref;
  var $p1704: ref;
  var $i1705: i8;
  var $i1706: i64;
  var $i1707: i64;
  var $i1708: i64;
  var $i1709: i1;
  var $p1710: ref;
  var $p1711: ref;
  var $p1712: ref;
  var $p1713: ref;
  var $p1714: ref;
  var $p1716: ref;
  var $p1717: ref;
  var $p1718: ref;
  var $p1719: ref;
  var $p1720: ref;
  var $p1721: ref;
  var $p1722: ref;
  var $p1723: ref;
  var $i1724: i32;
  var $p1726: ref;
  var $i1727: i32;
  var $i1728: i1;
  var $p1729: ref;
  var $p1730: ref;
  var $p1731: ref;
  var $p1732: ref;
  var $i1733: i32;
  var $p1735: ref;
  var $i1736: i32;
  var $i1737: i1;
  var $p1738: ref;
  var $p1739: ref;
  var $p1740: ref;
  var $p1741: ref;
  var $p1742: ref;
  var $p1743: ref;
  var $i1744: i24;
  var $i1745: i24;
  var $i1746: i24;
  var $p1747: ref;
  var $p1748: ref;
  var $i1749: i8;
  var $i1750: i64;
  var $i1751: i64;
  var $i1752: i64;
  var $i1753: i1;
  var $p1754: ref;
  var $p1755: ref;
  var $p1756: ref;
  var $p1757: ref;
  var $p1758: ref;
  var $p1760: ref;
  var $p1761: ref;
  var $p1762: ref;
  var $p1763: ref;
  var $p1764: ref;
  var $p1765: ref;
  var $p1766: ref;
  var $p1767: ref;
  var $i1768: i32;
  var $p1770: ref;
  var $i1771: i32;
  var $i1772: i1;
  var $p1773: ref;
  var $p1774: ref;
  var $p1775: ref;
  var $p1776: ref;
  var $i1777: i32;
  var $p1779: ref;
  var $i1780: i32;
  var $i1781: i1;
  var $p1782: ref;
  var $p1783: ref;
  var $p1784: ref;
  var $p1785: ref;
  var $p1786: ref;
  var $p1787: ref;
  var $i1788: i24;
  var $i1789: i24;
  var $i1790: i24;
  var $p1791: ref;
  var $p1792: ref;
  var $i1793: i8;
  var $i1794: i64;
  var $i1795: i64;
  var $i1796: i64;
  var $i1797: i1;
  var $p1798: ref;
  var $p1799: ref;
  var $p1800: ref;
  var $p1801: ref;
  var $p1802: ref;
  var $p1804: ref;
  var $p1805: ref;
  var $p1806: ref;
  var $p1807: ref;
  var $p1808: ref;
  var $p1809: ref;
  var $p1810: ref;
  var $p1811: ref;
  var $i1812: i32;
  var $p1814: ref;
  var $i1815: i32;
  var $i1816: i1;
  var $p1817: ref;
  var $p1818: ref;
  var $p1819: ref;
  var $p1820: ref;
  var $i1821: i32;
  var $p1823: ref;
  var $i1824: i32;
  var $i1825: i1;
  var $p1826: ref;
  var $p1827: ref;
  var $p1828: ref;
  var $p1829: ref;
  var $p1830: ref;
  var $p1831: ref;
  var $i1832: i24;
  var $i1833: i24;
  var $i1834: i24;
  var $p1835: ref;
  var $p1836: ref;
  var $i1837: i8;
  var $i1838: i64;
  var $i1839: i64;
  var $i1840: i64;
  var $i1841: i1;
  var $p1842: ref;
  var $p1843: ref;
  var $p1844: ref;
  var $p1845: ref;
  var $p1846: ref;
  var $p1848: ref;
  var $p1849: ref;
  var $p1850: ref;
  var $p1851: ref;
  var $p1852: ref;
  var $p1853: ref;
  var $p1854: ref;
  var $p1855: ref;
  var $i1856: i32;
  var $p1858: ref;
  var $i1859: i32;
  var $i1860: i1;
  var $p1861: ref;
  var $p1862: ref;
  var $p1863: ref;
  var $p1864: ref;
  var $i1865: i32;
  var $p1867: ref;
  var $i1868: i32;
  var $i1869: i1;
  var $p1870: ref;
  var $p1871: ref;
  var $p1872: ref;
  var $p1873: ref;
  var $p1874: ref;
  var $p1875: ref;
  var $i1876: i24;
  var $i1877: i24;
  var $i1878: i24;
  var $p1879: ref;
  var $p1880: ref;
  var $i1881: i8;
  var $i1882: i64;
  var $i1883: i64;
  var $i1884: i64;
  var $i1885: i1;
  var $p1886: ref;
  var $p1887: ref;
  var $p1888: ref;
  var $p1889: ref;
  var $p1890: ref;
  var $p1892: ref;
  var $p1893: ref;
  var $p1894: ref;
  var $p1895: ref;
  var $p1896: ref;
  var $p1897: ref;
  var $p1898: ref;
  var $p1899: ref;
  var $i1900: i32;
  var $p1902: ref;
  var $i1903: i32;
  var $i1904: i1;
  var $p1905: ref;
  var $p1906: ref;
  var $p1907: ref;
  var $p1908: ref;
  var $i1909: i32;
  var $p1911: ref;
  var $i1912: i32;
  var $i1913: i1;
  var $p1914: ref;
  var $p1915: ref;
  var $p1916: ref;
  var $p1917: ref;
  var $p1918: ref;
  var $p1919: ref;
  var $i1920: i24;
  var $i1921: i24;
  var $i1922: i24;
  var $p1923: ref;
  var $p1924: ref;
  var $i1925: i8;
  var $i1926: i64;
  var $i1927: i64;
  var $i1928: i64;
  var $i1929: i1;
  var $p1930: ref;
  var $p1931: ref;
  var $p1932: ref;
  var $p1933: ref;
  var $p1934: ref;
  var $p1936: ref;
  var $p1937: ref;
  var $p1938: ref;
  var $p1939: ref;
  var $p1940: ref;
  var $p1941: ref;
  var $p1942: ref;
  var $p1943: ref;
  var $i1944: i32;
  var $p1946: ref;
  var $i1947: i32;
  var $i1948: i1;
  var $p1949: ref;
  var $p1950: ref;
  var $p1951: ref;
  var $p1952: ref;
  var $i1953: i32;
  var $p1955: ref;
  var $i1956: i32;
  var $i1957: i1;
  var $p1958: ref;
  var $p1959: ref;
  var $p1960: ref;
  var $p1961: ref;
  var $p1962: ref;
  var $p1963: ref;
  var $i1964: i24;
  var $i1965: i24;
  var $i1966: i24;
  var $p1967: ref;
  var $p1968: ref;
  var $i1969: i8;
  var $i1970: i64;
  var $i1971: i64;
  var $i1972: i64;
  var $i1973: i1;
  var $p1974: ref;
  var $p1975: ref;
  var $p1976: ref;
  var $p1977: ref;
  var $p1978: ref;
  var $p1980: ref;
  var $p1981: ref;
  var $p1982: ref;
  var $p1983: ref;
  var $p1984: ref;
  var $p1985: ref;
  var $p1986: ref;
  var $p1987: ref;
  var $i1988: i32;
  var $p1990: ref;
  var $i1991: i32;
  var $i1992: i1;
  var $p1993: ref;
  var $p1994: ref;
  var $p1995: ref;
  var $p1996: ref;
  var $i1997: i32;
  var $p1999: ref;
  var $i2000: i32;
  var $i2001: i1;
  var $p2002: ref;
  var $p2003: ref;
  var $p2004: ref;
  var $p2005: ref;
  var $p2006: ref;
  var $p2007: ref;
  var $i2008: i24;
  var $i2009: i24;
  var $i2010: i24;
  var $p2011: ref;
  var $p2012: ref;
  var $i2013: i8;
  var $i2014: i64;
  var $i2015: i64;
  var $i2016: i64;
  var $i2017: i1;
  var $p2018: ref;
  var $p2019: ref;
  var $p2020: ref;
  var $p2021: ref;
  var $p2022: ref;
  var $p2024: ref;
  var $p2025: ref;
  var $p2026: ref;
  var $p2027: ref;
  var $p2028: ref;
  var $p2029: ref;
  var $p2030: ref;
  var $p2031: ref;
  var $i2032: i32;
  var $p2034: ref;
  var $i2035: i32;
  var $i2036: i1;
  var $p2037: ref;
  var $p2038: ref;
  var $p2039: ref;
  var $p2040: ref;
  var $i2041: i32;
  var $p2043: ref;
  var $i2044: i32;
  var $i2045: i1;
  var $p2046: ref;
  var $p2047: ref;
  var $p2048: ref;
  var $p2049: ref;
  var $p2050: ref;
  var $p2051: ref;
  var $i2052: i24;
  var $i2053: i24;
  var $i2054: i24;
  var $p2055: ref;
  var $p2056: ref;
  var $i2057: i8;
  var $i2058: i64;
  var $i2059: i64;
  var $i2060: i64;
  var $i2061: i1;
  var $p2062: ref;
  var $p2063: ref;
  var $p2064: ref;
  var $p2065: ref;
  var $p2066: ref;
  var $p2068: ref;
  var $p2069: ref;
  var $p2070: ref;
  var $p2071: ref;
  var $p2072: ref;
  var $p2073: ref;
  var $p2074: ref;
  var $p2075: ref;
  var $i2076: i32;
  var $p2078: ref;
  var $i2079: i32;
  var $i2080: i1;
  var $p2081: ref;
  var $p2082: ref;
  var $p2083: ref;
  var $p2084: ref;
  var $i2085: i32;
  var $p2087: ref;
  var $i2088: i32;
  var $i2089: i1;
  var $p2090: ref;
  var $p2091: ref;
  var $p2092: ref;
  var $p2093: ref;
  var $p2094: ref;
  var $p2095: ref;
  var $i2096: i24;
  var $i2097: i24;
  var $i2098: i24;
  var $p2099: ref;
  var $p2100: ref;
  var $i2101: i8;
  var $i2102: i64;
  var $i2103: i64;
  var $i2104: i64;
  var $i2105: i1;
  var $p2106: ref;
  var $p2107: ref;
  var $p2108: ref;
  var $p2109: ref;
  var $p2110: ref;
  var $p2112: ref;
  var $p2113: ref;
  var $p2114: ref;
  var $p2115: ref;
  var $p2116: ref;
  var $p2117: ref;
  var $p2118: ref;
  var $p2119: ref;
  var $i2120: i32;
  var $p2122: ref;
  var $i2123: i32;
  var $i2124: i1;
  var $p2125: ref;
  var $p2126: ref;
  var $p2127: ref;
  var $p2128: ref;
  var $i2129: i32;
  var $p2131: ref;
  var $i2132: i32;
  var $i2133: i1;
  var $p2134: ref;
  var $p2135: ref;
  var $p2136: ref;
  var $p2137: ref;
  var $p2138: ref;
  var $p2139: ref;
  var $i2140: i24;
  var $i2141: i24;
  var $i2142: i24;
  var $p2143: ref;
  var $p2144: ref;
  var $i2145: i8;
  var $i2146: i64;
  var $i2147: i64;
  var $i2148: i64;
  var $i2149: i1;
  var $p2150: ref;
  var $p2151: ref;
  var $p2152: ref;
  var $p2153: ref;
  var $p2154: ref;
  var $p2156: ref;
  var $p2157: ref;
  var $p2158: ref;
  var $p2159: ref;
  var $p2160: ref;
  var $p2161: ref;
  var $p2162: ref;
  var $p2163: ref;
  var $i2164: i32;
  var $p2166: ref;
  var $i2167: i32;
  var $i2168: i1;
  var $p2169: ref;
  var $p2170: ref;
  var $p2171: ref;
  var $p2172: ref;
  var $i2173: i32;
  var $p2175: ref;
  var $i2176: i32;
  var $i2177: i1;
  var $p2178: ref;
  var $p2179: ref;
  var $p2180: ref;
  var $p2181: ref;
  var $p2182: ref;
  var $p2183: ref;
  var $i2184: i24;
  var $i2185: i24;
  var $i2186: i24;
  var $p2187: ref;
  var $p2188: ref;
  var $i2189: i8;
  var $i2190: i64;
  var $i2191: i64;
  var $i2192: i64;
  var $i2193: i1;
  var $p2194: ref;
  var $p2195: ref;
  var $p2196: ref;
  var $p2197: ref;
  var $p2198: ref;
  var $p2200: ref;
  var $p2201: ref;
  var $p2202: ref;
  var $p2203: ref;
  var $p2204: ref;
  var $p2205: ref;
  var $p2206: ref;
  var $p2207: ref;
  var $i2208: i32;
  var $p2210: ref;
  var $i2211: i32;
  var $i2212: i1;
  var $p2213: ref;
  var $p2214: ref;
  var $p2215: ref;
  var $p2216: ref;
  var $i2217: i32;
  var $p2219: ref;
  var $i2220: i32;
  var $i2221: i1;
  var $p2222: ref;
  var $p2223: ref;
  var $p2224: ref;
  var $p2225: ref;
  var $p2226: ref;
  var $p2227: ref;
  var $i2228: i24;
  var $i2229: i24;
  var $i2230: i24;
  var $p2231: ref;
  var $p2232: ref;
  var $i2233: i8;
  var $i2234: i64;
  var $i2235: i64;
  var $i2236: i64;
  var $i2237: i1;
  var $p2238: ref;
  var $p2239: ref;
  var $p2240: ref;
  var $p2241: ref;
  var $p2242: ref;
  var $p2244: ref;
  var $p2245: ref;
  var $p2246: ref;
  var $p2247: ref;
  var $p2248: ref;
  var $p2249: ref;
  var $p2250: ref;
  var $p2251: ref;
  var $i2252: i32;
  var $p2254: ref;
  var $i2255: i32;
  var $i2256: i1;
  var $p2257: ref;
  var $p2258: ref;
  var $p2259: ref;
  var $p2260: ref;
  var $i2261: i32;
  var $p2263: ref;
  var $i2264: i32;
  var $i2265: i1;
  var $p2266: ref;
  var $p2267: ref;
  var $p2268: ref;
  var $p2269: ref;
  var $p2270: ref;
  var $p2271: ref;
  var $i2272: i24;
  var $i2273: i24;
  var $i2274: i24;
  var $p2275: ref;
  var $p2276: ref;
  var $i2277: i8;
  var $i2278: i64;
  var $i2279: i64;
  var $i2280: i64;
  var $i2281: i1;
  var $p2282: ref;
  var $p2283: ref;
  var $p2284: ref;
  var $p2285: ref;
  var $p2286: ref;
  var $p2288: ref;
  var $p2289: ref;
  var $p2290: ref;
  var $p2291: ref;
  var $p2292: ref;
  var $p2293: ref;
  var $p2294: ref;
  var $p2295: ref;
  var $i2296: i32;
  var $p2298: ref;
  var $i2299: i32;
  var $i2300: i1;
  var $p2301: ref;
  var $p2302: ref;
  var $p2303: ref;
  var $p2304: ref;
  var $i2305: i32;
  var $p2307: ref;
  var $i2308: i32;
  var $i2309: i1;
  var $p2310: ref;
  var $p2311: ref;
  var $p2312: ref;
  var $p2313: ref;
  var $p2314: ref;
  var $p2315: ref;
  var $i2316: i24;
  var $i2317: i24;
  var $i2318: i24;
  var $p2319: ref;
  var $p2320: ref;
  var $i2321: i8;
  var $i2322: i64;
  var $i2323: i64;
  var $i2324: i64;
  var $i2325: i1;
  var $p2326: ref;
  var $p2327: ref;
  var $p2328: ref;
  var $p2329: ref;
  var $p2330: ref;
  var $p2332: ref;
  var $p2333: ref;
  var $p2334: ref;
  var $p2335: ref;
  var $p2336: ref;
  var $p2337: ref;
  var $p2338: ref;
  var $p2339: ref;
  var $i2340: i32;
  var $p2342: ref;
  var $i2343: i32;
  var $i2344: i1;
  var $p2345: ref;
  var $p2346: ref;
  var $p2347: ref;
  var $p2348: ref;
  var $i2349: i32;
  var $p2351: ref;
  var $i2352: i32;
  var $i2353: i1;
  var $p2354: ref;
  var $p2355: ref;
  var $p2356: ref;
  var $p2357: ref;
  var $p2358: ref;
  var $p2359: ref;
  var $i2360: i24;
  var $i2361: i24;
  var $i2362: i24;
  var $p2363: ref;
  var $p2364: ref;
  var $i2365: i8;
  var $i2366: i64;
  var $i2367: i64;
  var $i2368: i64;
  var $i2369: i1;
  var $p2370: ref;
  var $p2371: ref;
  var $p2372: ref;
  var $p2373: ref;
  var $p2374: ref;
  var $p2376: ref;
  var $p2377: ref;
  var $p2378: ref;
  var $p2379: ref;
  var $p2380: ref;
  var $p2381: ref;
  var $p2382: ref;
  var $p2383: ref;
  var $i2384: i32;
  var $p2386: ref;
  var $i2387: i32;
  var $i2388: i1;
  var $p2389: ref;
  var $p2390: ref;
  var $p2391: ref;
  var $p2392: ref;
  var $i2393: i32;
  var $p2395: ref;
  var $i2396: i32;
  var $i2397: i1;
  var $p2398: ref;
  var $p2399: ref;
  var $p2400: ref;
  var $p2401: ref;
  var $p2402: ref;
  var $p2403: ref;
  var $i2404: i24;
  var $i2405: i24;
  var $i2406: i24;
  var $p2407: ref;
  var $p2408: ref;
  var $i2409: i8;
  var $i2410: i64;
  var $i2411: i64;
  var $i2412: i64;
  var $i2413: i1;
  var $p2414: ref;
  var $p2415: ref;
  var $p2416: ref;
  var $p2417: ref;
  var $p2418: ref;
  var $p2420: ref;
  var $p2421: ref;
  var $p2422: ref;
  var $p2423: ref;
  var $p2424: ref;
  var $p2425: ref;
  var $p2426: ref;
  var $p2427: ref;
  var $i2428: i32;
  var $p2430: ref;
  var $i2431: i32;
  var $i2432: i1;
  var $p2433: ref;
  var $p2434: ref;
  var $p2435: ref;
  var $p2436: ref;
  var $i2437: i32;
  var $p2439: ref;
  var $i2440: i32;
  var $i2441: i1;
  var $p2442: ref;
  var $p2443: ref;
  var $p2444: ref;
  var $p2445: ref;
  var $p2446: ref;
  var $p2447: ref;
  var $i2448: i24;
  var $i2449: i24;
  var $i2450: i24;
  var $p2451: ref;
  var $p2452: ref;
  var $i2453: i8;
  var $i2454: i64;
  var $i2455: i64;
  var $i2456: i64;
  var $i2457: i1;
  var $p2458: ref;
  var $p2459: ref;
  var $p2460: ref;
  var $p2461: ref;
  var $p2462: ref;
  var $p2464: ref;
  var $p2465: ref;
  var $p2466: ref;
  var $p2467: ref;
  var $p2468: ref;
  var $p2469: ref;
  var $p2470: ref;
  var $p2471: ref;
  var $i2472: i32;
  var $p2474: ref;
  var $i2475: i32;
  var $i2476: i1;
  var $p2477: ref;
  var $p2478: ref;
  var $p2479: ref;
  var $p2480: ref;
  var $i2481: i32;
  var $p2483: ref;
  var $i2484: i32;
  var $i2485: i1;
  var $p2486: ref;
  var $p2487: ref;
  var $p2488: ref;
  var $p2489: ref;
  var $p2490: ref;
  var $p2491: ref;
  var $i2492: i24;
  var $i2493: i24;
  var $i2494: i24;
  var $p2495: ref;
  var $p2496: ref;
  var $i2497: i8;
  var $i2498: i64;
  var $i2499: i64;
  var $i2500: i64;
  var $i2501: i1;
  var $p2502: ref;
  var $p2503: ref;
  var $p2504: ref;
  var $p2505: ref;
  var $p2506: ref;
  var $p2508: ref;
  var $p2509: ref;
  var $p2510: ref;
  var $p2511: ref;
  var $p2512: ref;
  var $p2513: ref;
  var $p2514: ref;
  var $p2515: ref;
  var $i2516: i32;
  var $p2518: ref;
  var $i2519: i32;
  var $i2520: i1;
  var $p2521: ref;
  var $p2522: ref;
  var $p2523: ref;
  var $p2524: ref;
  var $i2525: i32;
  var $p2527: ref;
  var $i2528: i32;
  var $i2529: i1;
  var $p2530: ref;
  var $p2531: ref;
  var $p2532: ref;
  var $p2533: ref;
  var $p2534: ref;
  var $p2535: ref;
  var $i2536: i24;
  var $i2537: i24;
  var $i2538: i24;
  var $p2539: ref;
  var $p2540: ref;
  var $i2541: i8;
  var $i2542: i64;
  var $i2543: i64;
  var $i2544: i64;
  var $i2545: i1;
  var $p2546: ref;
  var $p2547: ref;
  var $p2548: ref;
  var $p2549: ref;
  var $p2550: ref;
  var $p2552: ref;
  var $p2553: ref;
  var $p2554: ref;
  var $p2555: ref;
  var $p2556: ref;
  var $p2557: ref;
  var $p2558: ref;
  var $p2559: ref;
  var $i2560: i32;
  var $p2562: ref;
  var $i2563: i32;
  var $i2564: i1;
  var $p2565: ref;
  var $p2566: ref;
  var $p2567: ref;
  var $p2568: ref;
  var $i2569: i32;
  var $p2571: ref;
  var $i2572: i32;
  var $i2573: i1;
  var $p2574: ref;
  var $p2575: ref;
  var $p2576: ref;
  var $p2577: ref;
  var $p2578: ref;
  var $p2579: ref;
  var $i2580: i24;
  var $i2581: i24;
  var $i2582: i24;
  var $p2583: ref;
  var $p2584: ref;
  var $i2585: i8;
  var $i2586: i64;
  var $i2587: i64;
  var $i2588: i64;
  var $i2589: i1;
  var $p2590: ref;
  var $p2591: ref;
  var $p2592: ref;
  var $p2593: ref;
  var $p2594: ref;
  var $p2596: ref;
  var $p2597: ref;
  var $p2598: ref;
  var $p2599: ref;
  var $p2600: ref;
  var $p2601: ref;
  var $p2602: ref;
  var $p2603: ref;
  var $i2604: i32;
  var $p2606: ref;
  var $i2607: i32;
  var $i2608: i1;
  var $p2609: ref;
  var $p2610: ref;
  var $p2611: ref;
  var $p2612: ref;
  var $i2613: i32;
  var $p2615: ref;
  var $i2616: i32;
  var $i2617: i1;
  var $p2618: ref;
  var $p2619: ref;
  var $p2620: ref;
  var $p2621: ref;
  var $p2622: ref;
  var $p2623: ref;
  var $i2624: i24;
  var $i2625: i24;
  var $i2626: i24;
  var $p2627: ref;
  var $p2628: ref;
  var $i2629: i8;
  var $i2630: i64;
  var $i2631: i64;
  var $i2632: i64;
  var $i2633: i1;
  var $p2634: ref;
  var $p2635: ref;
  var $p2636: ref;
  var $p2637: ref;
  var $p2638: ref;
  var $p2640: ref;
  var $p2641: ref;
  var $p2642: ref;
  var $p2643: ref;
  var $p2644: ref;
  var $p2645: ref;
  var $p2646: ref;
  var $p2647: ref;
  var $i2648: i32;
  var $p2650: ref;
  var $i2651: i32;
  var $i2652: i1;
  var $p2653: ref;
  var $p2654: ref;
  var $p2655: ref;
  var $p2656: ref;
  var $i2657: i32;
  var $p2659: ref;
  var $i2660: i32;
  var $i2661: i1;
  var $p2662: ref;
  var $p2663: ref;
  var $p2664: ref;
  var $p2665: ref;
  var $p2666: ref;
  var $p2667: ref;
  var $i2668: i24;
  var $i2669: i24;
  var $i2670: i24;
  var $p2671: ref;
  var $p2672: ref;
  var $i2673: i8;
  var $i2674: i64;
  var $i2675: i64;
  var $i2676: i64;
  var $i2677: i1;
  var $p2678: ref;
  var $p2679: ref;
  var $p2680: ref;
  var $p2681: ref;
  var $p2682: ref;
  var $p2684: ref;
  var $p2685: ref;
  var $p2686: ref;
  var $p2687: ref;
  var $p2688: ref;
  var $p2689: ref;
  var $p2690: ref;
  var $p2691: ref;
  var $i2692: i32;
  var $p2694: ref;
  var $i2695: i32;
  var $i2696: i1;
  var $p2697: ref;
  var $p2698: ref;
  var $p2699: ref;
  var $p2700: ref;
  var $i2701: i32;
  var $p2703: ref;
  var $i2704: i32;
  var $i2705: i1;
  var $p2706: ref;
  var $p2707: ref;
  var $p2708: ref;
  var $p2709: ref;
  var $p2710: ref;
  var $p2711: ref;
  var $i2712: i24;
  var $i2713: i24;
  var $i2714: i24;
  var $p2715: ref;
  var $p2716: ref;
  var $i2717: i8;
  var $i2718: i64;
  var $i2719: i64;
  var $i2720: i64;
  var $i2721: i1;
  var $p2722: ref;
  var $p2723: ref;
  var $p2724: ref;
  var $p2725: ref;
  var $p2726: ref;
  var $p2728: ref;
  var $p2729: ref;
  var $p2730: ref;
  var $p2731: ref;
  var $p2732: ref;
  var $p2733: ref;
  var $p2734: ref;
  var $p2735: ref;
  var $i2736: i32;
  var $p2738: ref;
  var $i2739: i32;
  var $i2740: i1;
  var $p2741: ref;
  var $p2742: ref;
  var $p2743: ref;
  var $p2744: ref;
  var $i2745: i32;
  var $p2747: ref;
  var $i2748: i32;
  var $i2749: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 775} {:cexpr "pidff_request_effect_upload:arg:efnum"} boogie_si_record_i32($i1);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(736, 1));
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i1);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(7, 8));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} hid_hw_request($p11, $p14, 9);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p15, .str.7);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p16, .str.130);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p17, .str.9);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p18, .str.131);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i21 := $load.i24($M.7, $p20);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i22 := $and.i24($i21, $sub.i24(0, 262144));
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i23 := $or.i24($i22, 470);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p20, $i23);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p24, 0);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.8, $p25);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 1);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 778} {:cexpr "tmp"} boogie_si_record_i64($i29);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(608, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 0);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, 0);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} hid_hw_wait($p43);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p44, .str.7);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p45, .str.130);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p46, .str.9);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p47, .str.132);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i50 := $load.i24($M.7, $p49);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i51 := $and.i24($i50, $sub.i24(0, 262144));
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i52 := $or.i24($i51, 477);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p49, $i52);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p53, 0);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.8, $p54);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i64($i55);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i57 := $and.i64($i56, 1);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $i58 := ldv__builtin_expect($i57, 0);
    call {:si_unique_call 782} {:cexpr "tmp___0"} boogie_si_record_i64($i58);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} hid_hw_request($p64, $p67, 1);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} hid_hw_wait($p69);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i74, $i77);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i115, $i118);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p154, .str.7);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p155, .str.130);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p156, .str.9);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p157, .str.132);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p158);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i160 := $load.i24($M.7, $p159);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i161 := $and.i24($i160, $sub.i24(0, 262144));
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i162 := $or.i24($i161, 477);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p159, $i162);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p163, 0);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i165 := $load.i8($M.8, $p164);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $i166 := $zext.i8.i64($i165);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i167 := $and.i64($i166, 1);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $i168 := ldv__builtin_expect($i167, 0);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i169 := $ne.i64($i168, 0);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.0, $p173);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} hid_hw_request($p174, $p177, 1);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.0, $p178);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} hid_hw_wait($p179);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p181, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i184 := $load.i32($M.0, $p183);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.0, $p186);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i184, $i187);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p190, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.0, $p192);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i196 := $load.i32($M.0, $p195);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i193, $i196);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p198, .str.7);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p199, .str.130);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p200, .str.9);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p201, .str.132);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $p203 := $bitcast.ref.ref($p202);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i204 := $load.i24($M.7, $p203);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i205 := $and.i24($i204, $sub.i24(0, 262144));
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i206 := $or.i24($i205, 477);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p203, $i206);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p207, 0);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i209 := $load.i8($M.8, $p208);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i210 := $zext.i8.i64($i209);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i211 := $and.i64($i210, 1);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $i212 := ldv__builtin_expect($i211, 0);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i213 := $ne.i64($i212, 0);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i213} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $p221 := $load.ref($M.0, $p220);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} hid_hw_request($p218, $p221, 1);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $p223 := $load.ref($M.0, $p222);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} hid_hw_wait($p223);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p225 := $load.ref($M.0, $p224);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p225, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p227 := $load.ref($M.0, $p226);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i228 := $load.i32($M.0, $p227);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i231 := $load.i32($M.0, $p230);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i232 := $eq.i32($i228, $i231);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i232} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p234 := $load.ref($M.0, $p233);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p234, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p236 := $load.ref($M.0, $p235);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i237 := $load.i32($M.0, $p236);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i240 := $load.i32($M.0, $p239);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i241 := $eq.i32($i237, $i240);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    assume {:branchcond $i241} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p242, .str.7);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p243, .str.130);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p244, .str.9);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p245, .str.132);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p247 := $bitcast.ref.ref($p246);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i248 := $load.i24($M.7, $p247);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i249 := $and.i24($i248, $sub.i24(0, 262144));
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i250 := $or.i24($i249, 477);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p247, $i250);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p251, 0);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i253 := $load.i8($M.8, $p252);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i254 := $zext.i8.i64($i253);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i255 := $and.i64($i254, 1);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $i256 := ldv__builtin_expect($i255, 0);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i257 := $ne.i64($i256, 0);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i257} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p262 := $load.ref($M.0, $p261);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $p265 := $load.ref($M.0, $p264);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} hid_hw_request($p262, $p265, 1);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $p267 := $load.ref($M.0, $p266);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} hid_hw_wait($p267);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $p269 := $load.ref($M.0, $p268);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p269, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p271 := $load.ref($M.0, $p270);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i272 := $load.i32($M.0, $p271);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i275 := $load.i32($M.0, $p274);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i276 := $eq.i32($i272, $i275);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i276} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $p278 := $load.ref($M.0, $p277);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p278, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.0, $p279);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i281 := $load.i32($M.0, $p280);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i284 := $load.i32($M.0, $p283);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i285 := $eq.i32($i281, $i284);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    assume {:branchcond $i285} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p286, .str.7);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p287, .str.130);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p288, .str.9);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p289, .str.132);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p291 := $bitcast.ref.ref($p290);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i292 := $load.i24($M.7, $p291);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i293 := $and.i24($i292, $sub.i24(0, 262144));
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i294 := $or.i24($i293, 477);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p291, $i294);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p295, 0);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i297 := $load.i8($M.8, $p296);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i298 := $zext.i8.i64($i297);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i299 := $and.i64($i298, 1);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $i300 := ldv__builtin_expect($i299, 0);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i301 := $ne.i64($i300, 0);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i301} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p306 := $load.ref($M.0, $p305);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $p309 := $load.ref($M.0, $p308);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} hid_hw_request($p306, $p309, 1);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $p311 := $load.ref($M.0, $p310);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} hid_hw_wait($p311);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p313 := $load.ref($M.0, $p312);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p313, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p315 := $load.ref($M.0, $p314);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i316 := $load.i32($M.0, $p315);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i319 := $load.i32($M.0, $p318);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i320 := $eq.i32($i316, $i319);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i320} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $p322 := $load.ref($M.0, $p321);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p322, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $p324 := $load.ref($M.0, $p323);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i325 := $load.i32($M.0, $p324);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i328 := $load.i32($M.0, $p327);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i329 := $eq.i32($i325, $i328);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i329} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p330, .str.7);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p331, .str.130);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p332, .str.9);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p333, .str.132);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $p335 := $bitcast.ref.ref($p334);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i336 := $load.i24($M.7, $p335);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i337 := $and.i24($i336, $sub.i24(0, 262144));
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i338 := $or.i24($i337, 477);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p335, $i338);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p339, 0);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i341 := $load.i8($M.8, $p340);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i342 := $zext.i8.i64($i341);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i343 := $and.i64($i342, 1);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $i344 := ldv__builtin_expect($i343, 0);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i345 := $ne.i64($i344, 0);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i345} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i345 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $p350 := $load.ref($M.0, $p349);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $p353 := $load.ref($M.0, $p352);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} hid_hw_request($p350, $p353, 1);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $p355 := $load.ref($M.0, $p354);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} hid_hw_wait($p355);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $p357 := $load.ref($M.0, $p356);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p357, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p359 := $load.ref($M.0, $p358);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i360 := $load.i32($M.0, $p359);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i363 := $load.i32($M.0, $p362);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i364 := $eq.i32($i360, $i363);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i364} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i364 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $p366 := $load.ref($M.0, $p365);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p366, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p368 := $load.ref($M.0, $p367);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i369 := $load.i32($M.0, $p368);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i372 := $load.i32($M.0, $p371);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i373 := $eq.i32($i369, $i372);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i373 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p374, .str.7);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p375, .str.130);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p376, .str.9);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p377, .str.132);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $p379 := $bitcast.ref.ref($p378);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i380 := $load.i24($M.7, $p379);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i381 := $and.i24($i380, $sub.i24(0, 262144));
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i382 := $or.i24($i381, 477);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p379, $i382);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p383, 0);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i385 := $load.i8($M.8, $p384);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i386 := $zext.i8.i64($i385);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i387 := $and.i64($i386, 1);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $i388 := ldv__builtin_expect($i387, 0);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i389 := $ne.i64($i388, 0);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i389} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p394 := $load.ref($M.0, $p393);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $p397 := $load.ref($M.0, $p396);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} hid_hw_request($p394, $p397, 1);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $p399 := $load.ref($M.0, $p398);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} hid_hw_wait($p399);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $p401 := $load.ref($M.0, $p400);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($p401, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p403 := $load.ref($M.0, $p402);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i404 := $load.i32($M.0, $p403);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i407 := $load.i32($M.0, $p406);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i408 := $eq.i32($i404, $i407);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i408} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i408 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p410 := $load.ref($M.0, $p409);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($p410, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p412 := $load.ref($M.0, $p411);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i413 := $load.i32($M.0, $p412);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i416 := $load.i32($M.0, $p415);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i417 := $eq.i32($i413, $i416);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    assume {:branchcond $i417} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i417 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p418, .str.7);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p419, .str.130);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p420, .str.9);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p421, .str.132);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p423 := $bitcast.ref.ref($p422);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i424 := $load.i24($M.7, $p423);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i425 := $and.i24($i424, $sub.i24(0, 262144));
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i426 := $or.i24($i425, 477);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p423, $i426);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p427, 0);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i429 := $load.i8($M.8, $p428);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i430 := $zext.i8.i64($i429);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i431 := $and.i64($i430, 1);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $i432 := ldv__builtin_expect($i431, 0);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i433 := $ne.i64($i432, 0);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i433} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i433 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p438 := $load.ref($M.0, $p437);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $p441 := $load.ref($M.0, $p440);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} hid_hw_request($p438, $p441, 1);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $p443 := $load.ref($M.0, $p442);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} hid_hw_wait($p443);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $p445 := $load.ref($M.0, $p444);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p445, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p447 := $load.ref($M.0, $p446);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i448 := $load.i32($M.0, $p447);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i451 := $load.i32($M.0, $p450);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i452 := $eq.i32($i448, $i451);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    assume {:branchcond $i452} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i452 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p454 := $load.ref($M.0, $p453);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($p454, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p456 := $load.ref($M.0, $p455);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i457 := $load.i32($M.0, $p456);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i460 := $load.i32($M.0, $p459);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i461 := $eq.i32($i457, $i460);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i461} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i461 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p462 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p462, .str.7);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p463, .str.130);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $p464 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p464, .str.9);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p465, .str.132);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p467 := $bitcast.ref.ref($p466);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i468 := $load.i24($M.7, $p467);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i469 := $and.i24($i468, $sub.i24(0, 262144));
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i470 := $or.i24($i469, 477);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p467, $i470);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p471, 0);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i473 := $load.i8($M.8, $p472);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i474 := $zext.i8.i64($i473);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i475 := $and.i64($i474, 1);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $i476 := ldv__builtin_expect($i475, 0);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i477 := $ne.i64($i476, 0);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i477} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i477 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p482 := $load.ref($M.0, $p481);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p485 := $load.ref($M.0, $p484);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} hid_hw_request($p482, $p485, 1);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p487 := $load.ref($M.0, $p486);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} hid_hw_wait($p487);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $p489 := $load.ref($M.0, $p488);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($add.ref($p489, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $p491 := $load.ref($M.0, $p490);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i492 := $load.i32($M.0, $p491);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $p494 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i495 := $load.i32($M.0, $p494);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $i496 := $eq.i32($i492, $i495);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i496} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i496 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $p498 := $load.ref($M.0, $p497);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $p499 := $add.ref($add.ref($p498, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $p500 := $load.ref($M.0, $p499);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i501 := $load.i32($M.0, $p500);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i504 := $load.i32($M.0, $p503);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i505 := $eq.i32($i501, $i504);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    assume {:branchcond $i505} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i505 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p506, .str.7);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p507, .str.130);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p508, .str.9);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p509, .str.132);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p510 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $p511 := $bitcast.ref.ref($p510);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i512 := $load.i24($M.7, $p511);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i513 := $and.i24($i512, $sub.i24(0, 262144));
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i514 := $or.i24($i513, 477);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p511, $i514);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p515, 0);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i517 := $load.i8($M.8, $p516);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i518 := $zext.i8.i64($i517);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i519 := $and.i64($i518, 1);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $i520 := ldv__builtin_expect($i519, 0);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i521 := $ne.i64($i520, 0);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i521} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i521 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p526 := $load.ref($M.0, $p525);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p528 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $p529 := $load.ref($M.0, $p528);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} hid_hw_request($p526, $p529, 1);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $p531 := $load.ref($M.0, $p530);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} hid_hw_wait($p531);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $p532 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p533 := $load.ref($M.0, $p532);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $p534 := $add.ref($add.ref($p533, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p535 := $load.ref($M.0, $p534);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i536 := $load.i32($M.0, $p535);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p538 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i539 := $load.i32($M.0, $p538);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i540 := $eq.i32($i536, $i539);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i540} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i540 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p541 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $p542 := $load.ref($M.0, $p541);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($p542, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $p544 := $load.ref($M.0, $p543);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i545 := $load.i32($M.0, $p544);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i548 := $load.i32($M.0, $p547);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i549 := $eq.i32($i545, $i548);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i549} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i549 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p550 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p550, .str.7);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p551, .str.130);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p552, .str.9);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p553, .str.132);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p555 := $bitcast.ref.ref($p554);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i556 := $load.i24($M.7, $p555);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i557 := $and.i24($i556, $sub.i24(0, 262144));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i558 := $or.i24($i557, 477);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p555, $i558);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $p559 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p559, 0);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i561 := $load.i8($M.8, $p560);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i562 := $zext.i8.i64($i561);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i563 := $and.i64($i562, 1);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $i564 := ldv__builtin_expect($i563, 0);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i565 := $ne.i64($i564, 0);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i565} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i565 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $p570 := $load.ref($M.0, $p569);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p572 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p573 := $load.ref($M.0, $p572);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} hid_hw_request($p570, $p573, 1);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $p574 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p575 := $load.ref($M.0, $p574);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} hid_hw_wait($p575);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p577 := $load.ref($M.0, $p576);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($add.ref($p577, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $p579 := $load.ref($M.0, $p578);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i580 := $load.i32($M.0, $p579);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $p582 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i583 := $load.i32($M.0, $p582);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i584 := $eq.i32($i580, $i583);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    assume {:branchcond $i584} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i584 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $p586 := $load.ref($M.0, $p585);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p587 := $add.ref($add.ref($p586, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $p588 := $load.ref($M.0, $p587);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i589 := $load.i32($M.0, $p588);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i592 := $load.i32($M.0, $p591);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i593 := $eq.i32($i589, $i592);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i593} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i593 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $p594 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p594, .str.7);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $p595 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p595, .str.130);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $p596 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p596, .str.9);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $p597 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p597, .str.132);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p599 := $bitcast.ref.ref($p598);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i600 := $load.i24($M.7, $p599);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i601 := $and.i24($i600, $sub.i24(0, 262144));
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i602 := $or.i24($i601, 477);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p599, $i602);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p603, 0);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $p604 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i605 := $load.i8($M.8, $p604);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i606 := $zext.i8.i64($i605);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i607 := $and.i64($i606, 1);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $i608 := ldv__builtin_expect($i607, 0);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i609 := $ne.i64($i608, 0);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i609} true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i609 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $p614 := $load.ref($M.0, $p613);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $p616 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $p617 := $load.ref($M.0, $p616);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} hid_hw_request($p614, $p617, 1);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p618 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p619 := $load.ref($M.0, $p618);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} hid_hw_wait($p619);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $p620 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p621 := $load.ref($M.0, $p620);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $p622 := $add.ref($add.ref($p621, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p623 := $load.ref($M.0, $p622);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i624 := $load.i32($M.0, $p623);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $p626 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i627 := $load.i32($M.0, $p626);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i628 := $eq.i32($i624, $i627);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    assume {:branchcond $i628} true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i628 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $p629 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p630 := $load.ref($M.0, $p629);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $p631 := $add.ref($add.ref($p630, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $p632 := $load.ref($M.0, $p631);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i633 := $load.i32($M.0, $p632);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p635 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i636 := $load.i32($M.0, $p635);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i637 := $eq.i32($i633, $i636);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i637} true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i637 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $p638 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p638, .str.7);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p639, .str.130);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $p640 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p640, .str.9);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p641, .str.132);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p642 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $p643 := $bitcast.ref.ref($p642);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i644 := $load.i24($M.7, $p643);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i645 := $and.i24($i644, $sub.i24(0, 262144));
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i646 := $or.i24($i645, 477);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p643, $i646);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $p647 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p647, 0);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $p648 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i649 := $load.i8($M.8, $p648);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i650 := $zext.i8.i64($i649);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i651 := $and.i64($i650, 1);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $i652 := ldv__builtin_expect($i651, 0);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i653 := $ne.i64($i652, 0);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i653} true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i653 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $p658 := $load.ref($M.0, $p657);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $p660 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p661 := $load.ref($M.0, $p660);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} hid_hw_request($p658, $p661, 1);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $p662 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $p663 := $load.ref($M.0, $p662);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} hid_hw_wait($p663);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p664 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p665 := $load.ref($M.0, $p664);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p666 := $add.ref($add.ref($p665, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $p667 := $load.ref($M.0, $p666);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i668 := $load.i32($M.0, $p667);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p670 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i671 := $load.i32($M.0, $p670);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i672 := $eq.i32($i668, $i671);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i672} true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i672 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p673 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $p674 := $load.ref($M.0, $p673);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p675 := $add.ref($add.ref($p674, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $p676 := $load.ref($M.0, $p675);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i677 := $load.i32($M.0, $p676);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p679 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i680 := $load.i32($M.0, $p679);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i681 := $eq.i32($i677, $i680);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i681} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i681 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $p682 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p682, .str.7);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $p683 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p683, .str.130);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $p684 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p684, .str.9);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $p685 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p685, .str.132);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $p686 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $p687 := $bitcast.ref.ref($p686);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i688 := $load.i24($M.7, $p687);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i689 := $and.i24($i688, $sub.i24(0, 262144));
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i690 := $or.i24($i689, 477);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p687, $i690);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p691, 0);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $p692 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i693 := $load.i8($M.8, $p692);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i694 := $zext.i8.i64($i693);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i695 := $and.i64($i694, 1);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $i696 := ldv__builtin_expect($i695, 0);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i697 := $ne.i64($i696, 0);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    assume {:branchcond $i697} true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i697 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $p701 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $p702 := $load.ref($M.0, $p701);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $p705 := $load.ref($M.0, $p704);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} hid_hw_request($p702, $p705, 1);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $p706 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p707 := $load.ref($M.0, $p706);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} hid_hw_wait($p707);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p708 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $p709 := $load.ref($M.0, $p708);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $p710 := $add.ref($add.ref($p709, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $p711 := $load.ref($M.0, $p710);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i712 := $load.i32($M.0, $p711);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $p714 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i715 := $load.i32($M.0, $p714);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i716 := $eq.i32($i712, $i715);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i716} true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i716 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $p717 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p718 := $load.ref($M.0, $p717);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p719 := $add.ref($add.ref($p718, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $p720 := $load.ref($M.0, $p719);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i721 := $load.i32($M.0, $p720);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $p723 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i724 := $load.i32($M.0, $p723);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i725 := $eq.i32($i721, $i724);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i725} true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i725 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $p726 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p726, .str.7);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $p727 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p727, .str.130);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $p728 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p728, .str.9);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p729 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p729, .str.132);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p730 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $p731 := $bitcast.ref.ref($p730);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i732 := $load.i24($M.7, $p731);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i733 := $and.i24($i732, $sub.i24(0, 262144));
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i734 := $or.i24($i733, 477);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p731, $i734);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p735 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p735, 0);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $p736 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i737 := $load.i8($M.8, $p736);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i738 := $zext.i8.i64($i737);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i739 := $and.i64($i738, 1);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $i740 := ldv__builtin_expect($i739, 0);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i741 := $ne.i64($i740, 0);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    assume {:branchcond $i741} true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i741 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $p745 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $p746 := $load.ref($M.0, $p745);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p748 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p749 := $load.ref($M.0, $p748);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} hid_hw_request($p746, $p749, 1);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $p750 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $p751 := $load.ref($M.0, $p750);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} hid_hw_wait($p751);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $p752 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $p753 := $load.ref($M.0, $p752);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p754 := $add.ref($add.ref($p753, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p755 := $load.ref($M.0, $p754);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i756 := $load.i32($M.0, $p755);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $p758 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i759 := $load.i32($M.0, $p758);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i760 := $eq.i32($i756, $i759);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    assume {:branchcond $i760} true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i760 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $p761 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $p762 := $load.ref($M.0, $p761);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $p763 := $add.ref($add.ref($p762, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $p764 := $load.ref($M.0, $p763);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i765 := $load.i32($M.0, $p764);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p767 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i768 := $load.i32($M.0, $p767);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i769 := $eq.i32($i765, $i768);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i769} true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i769 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $p770 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p770, .str.7);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $p771 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p771, .str.130);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p772 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p772, .str.9);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $p773 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p773, .str.132);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $p774 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p775 := $bitcast.ref.ref($p774);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i776 := $load.i24($M.7, $p775);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i777 := $and.i24($i776, $sub.i24(0, 262144));
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i778 := $or.i24($i777, 477);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p775, $i778);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $p779 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p779, 0);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p780 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i781 := $load.i8($M.8, $p780);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $i782 := $zext.i8.i64($i781);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i783 := $and.i64($i782, 1);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $i784 := ldv__builtin_expect($i783, 0);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i785 := $ne.i64($i784, 0);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i785} true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i785 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $p789 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p790 := $load.ref($M.0, $p789);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $p792 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $p793 := $load.ref($M.0, $p792);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} hid_hw_request($p790, $p793, 1);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $p794 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $p795 := $load.ref($M.0, $p794);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} hid_hw_wait($p795);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p796 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $p797 := $load.ref($M.0, $p796);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p798 := $add.ref($add.ref($p797, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p799 := $load.ref($M.0, $p798);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i800 := $load.i32($M.0, $p799);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p802 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i803 := $load.i32($M.0, $p802);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i804 := $eq.i32($i800, $i803);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i804} true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i804 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $p805 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $p806 := $load.ref($M.0, $p805);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p807 := $add.ref($add.ref($p806, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $p808 := $load.ref($M.0, $p807);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i809 := $load.i32($M.0, $p808);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $p811 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i812 := $load.i32($M.0, $p811);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i813 := $eq.i32($i809, $i812);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    assume {:branchcond $i813} true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i813 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $p814 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p814, .str.7);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $p815 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p815, .str.130);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $p816 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p816, .str.9);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p817 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p817, .str.132);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p818 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p819 := $bitcast.ref.ref($p818);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i820 := $load.i24($M.7, $p819);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i821 := $and.i24($i820, $sub.i24(0, 262144));
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i822 := $or.i24($i821, 477);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p819, $i822);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p823 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p823, 0);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p824 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i825 := $load.i8($M.8, $p824);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i826 := $zext.i8.i64($i825);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i827 := $and.i64($i826, 1);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $i828 := ldv__builtin_expect($i827, 0);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i829 := $ne.i64($i828, 0);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i829} true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i829 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $p833 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p834 := $load.ref($M.0, $p833);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p836 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p837 := $load.ref($M.0, $p836);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} hid_hw_request($p834, $p837, 1);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p838 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $p839 := $load.ref($M.0, $p838);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} hid_hw_wait($p839);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $p840 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $p841 := $load.ref($M.0, $p840);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $p842 := $add.ref($add.ref($p841, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p843 := $load.ref($M.0, $p842);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i844 := $load.i32($M.0, $p843);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $p846 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i847 := $load.i32($M.0, $p846);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i848 := $eq.i32($i844, $i847);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i848} true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i848 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $p849 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $p850 := $load.ref($M.0, $p849);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $p851 := $add.ref($add.ref($p850, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $p852 := $load.ref($M.0, $p851);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i853 := $load.i32($M.0, $p852);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $p855 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i856 := $load.i32($M.0, $p855);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i857 := $eq.i32($i853, $i856);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i857} true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i857 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $p858 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p858, .str.7);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $p859 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p859, .str.130);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $p860 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p860, .str.9);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $p861 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p861, .str.132);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $p862 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p863 := $bitcast.ref.ref($p862);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i864 := $load.i24($M.7, $p863);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i865 := $and.i24($i864, $sub.i24(0, 262144));
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i866 := $or.i24($i865, 477);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p863, $i866);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $p867 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p867, 0);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $p868 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i869 := $load.i8($M.8, $p868);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i870 := $zext.i8.i64($i869);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i871 := $and.i64($i870, 1);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $i872 := ldv__builtin_expect($i871, 0);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i873 := $ne.i64($i872, 0);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i873} true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i873 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $p877 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $p878 := $load.ref($M.0, $p877);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $p880 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $p881 := $load.ref($M.0, $p880);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} hid_hw_request($p878, $p881, 1);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $p882 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $p883 := $load.ref($M.0, $p882);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} hid_hw_wait($p883);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $p884 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p885 := $load.ref($M.0, $p884);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $p886 := $add.ref($add.ref($p885, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $p887 := $load.ref($M.0, $p886);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i888 := $load.i32($M.0, $p887);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $p890 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i891 := $load.i32($M.0, $p890);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i892 := $eq.i32($i888, $i891);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    assume {:branchcond $i892} true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i892 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $p893 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $p894 := $load.ref($M.0, $p893);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p895 := $add.ref($add.ref($p894, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p896 := $load.ref($M.0, $p895);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i897 := $load.i32($M.0, $p896);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $p899 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i900 := $load.i32($M.0, $p899);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i901 := $eq.i32($i897, $i900);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i901} true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i901 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $p902 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p902, .str.7);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $p903 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p903, .str.130);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $p904 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p904, .str.9);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p905 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p905, .str.132);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p906 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $p907 := $bitcast.ref.ref($p906);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i908 := $load.i24($M.7, $p907);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i909 := $and.i24($i908, $sub.i24(0, 262144));
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i910 := $or.i24($i909, 477);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p907, $i910);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p911 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p911, 0);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $p912 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i913 := $load.i8($M.8, $p912);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i914 := $zext.i8.i64($i913);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i915 := $and.i64($i914, 1);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $i916 := ldv__builtin_expect($i915, 0);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i917 := $ne.i64($i916, 0);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i917} true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i917 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $p921 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p922 := $load.ref($M.0, $p921);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p924 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p925 := $load.ref($M.0, $p924);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} hid_hw_request($p922, $p925, 1);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p926 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $p927 := $load.ref($M.0, $p926);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} hid_hw_wait($p927);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p928 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $p929 := $load.ref($M.0, $p928);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $p930 := $add.ref($add.ref($p929, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p931 := $load.ref($M.0, $p930);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i932 := $load.i32($M.0, $p931);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p934 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i935 := $load.i32($M.0, $p934);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i936 := $eq.i32($i932, $i935);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i936} true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i936 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $p937 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $p938 := $load.ref($M.0, $p937);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $p939 := $add.ref($add.ref($p938, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p940 := $load.ref($M.0, $p939);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i941 := $load.i32($M.0, $p940);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $p943 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i944 := $load.i32($M.0, $p943);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i945 := $eq.i32($i941, $i944);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i945} true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i945 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $p946 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p946, .str.7);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $p947 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p947, .str.130);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $p948 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p948, .str.9);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $p949 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p949, .str.132);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $p950 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $p951 := $bitcast.ref.ref($p950);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i952 := $load.i24($M.7, $p951);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i953 := $and.i24($i952, $sub.i24(0, 262144));
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i954 := $or.i24($i953, 477);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p951, $i954);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $p955 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p955, 0);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $p956 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i957 := $load.i8($M.8, $p956);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i958 := $zext.i8.i64($i957);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i959 := $and.i64($i958, 1);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $i960 := ldv__builtin_expect($i959, 0);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i961 := $ne.i64($i960, 0);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i961} true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i961 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $p965 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p966 := $load.ref($M.0, $p965);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $p968 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $p969 := $load.ref($M.0, $p968);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} hid_hw_request($p966, $p969, 1);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p970 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $p971 := $load.ref($M.0, $p970);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} hid_hw_wait($p971);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $p972 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $p973 := $load.ref($M.0, $p972);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $p974 := $add.ref($add.ref($p973, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $p975 := $load.ref($M.0, $p974);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i976 := $load.i32($M.0, $p975);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $p978 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i979 := $load.i32($M.0, $p978);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i980 := $eq.i32($i976, $i979);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i980} true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i980 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $p981 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $p982 := $load.ref($M.0, $p981);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $p983 := $add.ref($add.ref($p982, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $p984 := $load.ref($M.0, $p983);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i985 := $load.i32($M.0, $p984);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $p987 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i988 := $load.i32($M.0, $p987);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i989 := $eq.i32($i985, $i988);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i989} true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i989 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $p990 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p990, .str.7);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $p991 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p991, .str.130);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $p992 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p992, .str.9);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p993 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p993, .str.132);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $p994 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $p995 := $bitcast.ref.ref($p994);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i996 := $load.i24($M.7, $p995);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i997 := $and.i24($i996, $sub.i24(0, 262144));
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i998 := $or.i24($i997, 477);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p995, $i998);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p999 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p999, 0);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $p1000 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i1001 := $load.i8($M.8, $p1000);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i1002 := $zext.i8.i64($i1001);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i1003 := $and.i64($i1002, 1);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $i1004 := ldv__builtin_expect($i1003, 0);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i1005 := $ne.i64($i1004, 0);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1005} true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i1005 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $p1009 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $p1010 := $load.ref($M.0, $p1009);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $p1012 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p1013 := $load.ref($M.0, $p1012);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} hid_hw_request($p1010, $p1013, 1);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $p1014 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $p1015 := $load.ref($M.0, $p1014);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} hid_hw_wait($p1015);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $p1016 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p1017 := $load.ref($M.0, $p1016);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p1018 := $add.ref($add.ref($p1017, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $p1019 := $load.ref($M.0, $p1018);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i1020 := $load.i32($M.0, $p1019);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $p1022 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i1023 := $load.i32($M.0, $p1022);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i1024 := $eq.i32($i1020, $i1023);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1024} true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i1024 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $p1025 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p1026 := $load.ref($M.0, $p1025);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p1027 := $add.ref($add.ref($p1026, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p1028 := $load.ref($M.0, $p1027);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i1029 := $load.i32($M.0, $p1028);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $p1031 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i1032 := $load.i32($M.0, $p1031);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i1033 := $eq.i32($i1029, $i1032);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1033} true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i1033 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $p1034 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p1034, .str.7);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $p1035 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p1035, .str.130);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $p1036 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p1036, .str.9);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $p1037 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1037, .str.132);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $p1038 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $p1039 := $bitcast.ref.ref($p1038);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i1040 := $load.i24($M.7, $p1039);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i1041 := $and.i24($i1040, $sub.i24(0, 262144));
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i1042 := $or.i24($i1041, 477);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p1039, $i1042);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p1043 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p1043, 0);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $p1044 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i1045 := $load.i8($M.8, $p1044);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i1046 := $zext.i8.i64($i1045);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i1047 := $and.i64($i1046, 1);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $i1048 := ldv__builtin_expect($i1047, 0);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i1049 := $ne.i64($i1048, 0);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1049} true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i1049 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $p1053 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $p1054 := $load.ref($M.0, $p1053);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $p1056 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $p1057 := $load.ref($M.0, $p1056);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} hid_hw_request($p1054, $p1057, 1);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $p1058 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $p1059 := $load.ref($M.0, $p1058);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} hid_hw_wait($p1059);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $p1060 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p1061 := $load.ref($M.0, $p1060);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $p1062 := $add.ref($add.ref($p1061, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $p1063 := $load.ref($M.0, $p1062);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i1064 := $load.i32($M.0, $p1063);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $p1066 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i1067 := $load.i32($M.0, $p1066);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i1068 := $eq.i32($i1064, $i1067);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1068} true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i1068 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $p1069 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $p1070 := $load.ref($M.0, $p1069);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $p1071 := $add.ref($add.ref($p1070, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p1072 := $load.ref($M.0, $p1071);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i1073 := $load.i32($M.0, $p1072);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $p1075 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i1076 := $load.i32($M.0, $p1075);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i1077 := $eq.i32($i1073, $i1076);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1077} true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i1077 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $p1078 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p1078, .str.7);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p1079 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p1079, .str.130);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $p1080 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p1080, .str.9);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $p1081 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1081, .str.132);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p1082 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p1083 := $bitcast.ref.ref($p1082);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i1084 := $load.i24($M.7, $p1083);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i1085 := $and.i24($i1084, $sub.i24(0, 262144));
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i1086 := $or.i24($i1085, 477);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p1083, $i1086);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $p1087 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p1087, 0);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $p1088 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i1089 := $load.i8($M.8, $p1088);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i1090 := $zext.i8.i64($i1089);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i1091 := $and.i64($i1090, 1);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $i1092 := ldv__builtin_expect($i1091, 0);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i1093 := $ne.i64($i1092, 0);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1093} true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i1093 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $p1097 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $p1098 := $load.ref($M.0, $p1097);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $p1100 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $p1101 := $load.ref($M.0, $p1100);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} hid_hw_request($p1098, $p1101, 1);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $p1102 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p1103 := $load.ref($M.0, $p1102);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} hid_hw_wait($p1103);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $p1104 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $p1105 := $load.ref($M.0, $p1104);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $p1106 := $add.ref($add.ref($p1105, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $p1107 := $load.ref($M.0, $p1106);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i1108 := $load.i32($M.0, $p1107);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $p1110 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i1111 := $load.i32($M.0, $p1110);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i1112 := $eq.i32($i1108, $i1111);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1112} true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i1112 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $p1113 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $p1114 := $load.ref($M.0, $p1113);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $p1115 := $add.ref($add.ref($p1114, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p1116 := $load.ref($M.0, $p1115);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i1117 := $load.i32($M.0, $p1116);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $p1119 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i1120 := $load.i32($M.0, $p1119);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i1121 := $eq.i32($i1117, $i1120);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1121} true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i1121 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $p1122 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p1122, .str.7);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p1123 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p1123, .str.130);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $p1124 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p1124, .str.9);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $p1125 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1125, .str.132);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $p1126 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $p1127 := $bitcast.ref.ref($p1126);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i1128 := $load.i24($M.7, $p1127);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i1129 := $and.i24($i1128, $sub.i24(0, 262144));
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i1130 := $or.i24($i1129, 477);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p1127, $i1130);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $p1131 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p1131, 0);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $p1132 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i1133 := $load.i8($M.8, $p1132);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i1134 := $zext.i8.i64($i1133);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i1135 := $and.i64($i1134, 1);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} $i1136 := ldv__builtin_expect($i1135, 0);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i1137 := $ne.i64($i1136, 0);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1137} true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i1137 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    $p1141 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $p1142 := $load.ref($M.0, $p1141);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $p1144 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $p1145 := $load.ref($M.0, $p1144);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} hid_hw_request($p1142, $p1145, 1);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p1146 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $p1147 := $load.ref($M.0, $p1146);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} hid_hw_wait($p1147);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $p1148 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $p1149 := $load.ref($M.0, $p1148);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $p1150 := $add.ref($add.ref($p1149, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $p1151 := $load.ref($M.0, $p1150);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i1152 := $load.i32($M.0, $p1151);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $p1154 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i1155 := $load.i32($M.0, $p1154);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i1156 := $eq.i32($i1152, $i1155);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1156} true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i1156 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $p1157 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $p1158 := $load.ref($M.0, $p1157);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $p1159 := $add.ref($add.ref($p1158, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $p1160 := $load.ref($M.0, $p1159);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i1161 := $load.i32($M.0, $p1160);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $p1163 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i1164 := $load.i32($M.0, $p1163);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i1165 := $eq.i32($i1161, $i1164);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1165} true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i1165 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    $p1166 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p1166, .str.7);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $p1167 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p1167, .str.130);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $p1168 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p1168, .str.9);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $p1169 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1169, .str.132);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $p1170 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $p1171 := $bitcast.ref.ref($p1170);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i1172 := $load.i24($M.7, $p1171);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i1173 := $and.i24($i1172, $sub.i24(0, 262144));
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i1174 := $or.i24($i1173, 477);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p1171, $i1174);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p1175 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p1175, 0);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $p1176 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i1177 := $load.i8($M.8, $p1176);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i1178 := $zext.i8.i64($i1177);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i1179 := $and.i64($i1178, 1);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $i1180 := ldv__builtin_expect($i1179, 0);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i1181 := $ne.i64($i1180, 0);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1181} true;
    goto $bb262, $bb263;

  $bb263:
    assume !($i1181 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $p1185 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $p1186 := $load.ref($M.0, $p1185);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $p1188 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p1189 := $load.ref($M.0, $p1188);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} hid_hw_request($p1186, $p1189, 1);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $p1190 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $p1191 := $load.ref($M.0, $p1190);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} hid_hw_wait($p1191);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $p1192 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $p1193 := $load.ref($M.0, $p1192);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $p1194 := $add.ref($add.ref($p1193, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p1195 := $load.ref($M.0, $p1194);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i1196 := $load.i32($M.0, $p1195);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $p1198 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i1199 := $load.i32($M.0, $p1198);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i1200 := $eq.i32($i1196, $i1199);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1200} true;
    goto $bb265, $bb266;

  $bb266:
    assume !($i1200 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    $p1201 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $p1202 := $load.ref($M.0, $p1201);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $p1203 := $add.ref($add.ref($p1202, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $p1204 := $load.ref($M.0, $p1203);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $i1205 := $load.i32($M.0, $p1204);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p1207 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i1208 := $load.i32($M.0, $p1207);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i1209 := $eq.i32($i1205, $i1208);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1209} true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i1209 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    $p1210 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p1210, .str.7);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $p1211 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p1211, .str.130);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $p1212 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p1212, .str.9);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $p1213 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1213, .str.132);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $p1214 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p1215 := $bitcast.ref.ref($p1214);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i1216 := $load.i24($M.7, $p1215);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i1217 := $and.i24($i1216, $sub.i24(0, 262144));
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i1218 := $or.i24($i1217, 477);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p1215, $i1218);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $p1219 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p1219, 0);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $p1220 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i1221 := $load.i8($M.8, $p1220);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i1222 := $zext.i8.i64($i1221);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i1223 := $and.i64($i1222, 1);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} $i1224 := ldv__builtin_expect($i1223, 0);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i1225 := $ne.i64($i1224, 0);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1225} true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i1225 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    $p1229 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $p1230 := $load.ref($M.0, $p1229);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $p1232 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $p1233 := $load.ref($M.0, $p1232);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} hid_hw_request($p1230, $p1233, 1);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $p1234 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $p1235 := $load.ref($M.0, $p1234);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} hid_hw_wait($p1235);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $p1236 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $p1237 := $load.ref($M.0, $p1236);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $p1238 := $add.ref($add.ref($p1237, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $p1239 := $load.ref($M.0, $p1238);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i1240 := $load.i32($M.0, $p1239);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $p1242 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i1243 := $load.i32($M.0, $p1242);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i1244 := $eq.i32($i1240, $i1243);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1244} true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i1244 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $p1245 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $p1246 := $load.ref($M.0, $p1245);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $p1247 := $add.ref($add.ref($p1246, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $p1248 := $load.ref($M.0, $p1247);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i1249 := $load.i32($M.0, $p1248);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $p1251 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i1252 := $load.i32($M.0, $p1251);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i1253 := $eq.i32($i1249, $i1252);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1253} true;
    goto $bb278, $bb279;

  $bb279:
    assume !($i1253 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    $p1254 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p1254, .str.7);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p1255 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p1255, .str.130);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p1256 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p1256, .str.9);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $p1257 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1257, .str.132);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $p1258 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $p1259 := $bitcast.ref.ref($p1258);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i1260 := $load.i24($M.7, $p1259);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i1261 := $and.i24($i1260, $sub.i24(0, 262144));
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i1262 := $or.i24($i1261, 477);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p1259, $i1262);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p1263 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p1263, 0);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $p1264 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $i1265 := $load.i8($M.8, $p1264);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $i1266 := $zext.i8.i64($i1265);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i1267 := $and.i64($i1266, 1);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $i1268 := ldv__builtin_expect($i1267, 0);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i1269 := $ne.i64($i1268, 0);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1269} true;
    goto $bb282, $bb283;

  $bb283:
    assume !($i1269 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    $p1273 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $p1274 := $load.ref($M.0, $p1273);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p1276 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $p1277 := $load.ref($M.0, $p1276);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} hid_hw_request($p1274, $p1277, 1);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $p1278 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $p1279 := $load.ref($M.0, $p1278);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} hid_hw_wait($p1279);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $p1280 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $p1281 := $load.ref($M.0, $p1280);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $p1282 := $add.ref($add.ref($p1281, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $p1283 := $load.ref($M.0, $p1282);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i1284 := $load.i32($M.0, $p1283);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $p1286 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $i1287 := $load.i32($M.0, $p1286);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i1288 := $eq.i32($i1284, $i1287);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1288} true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i1288 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    $p1289 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p1290 := $load.ref($M.0, $p1289);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p1291 := $add.ref($add.ref($p1290, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $p1292 := $load.ref($M.0, $p1291);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i1293 := $load.i32($M.0, $p1292);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $p1295 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i1296 := $load.i32($M.0, $p1295);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i1297 := $eq.i32($i1293, $i1296);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1297} true;
    goto $bb288, $bb289;

  $bb289:
    assume !($i1297 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    $p1298 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p1298, .str.7);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p1299 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p1299, .str.130);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $p1300 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p1300, .str.9);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $p1301 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1301, .str.132);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $p1302 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $p1303 := $bitcast.ref.ref($p1302);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i1304 := $load.i24($M.7, $p1303);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i1305 := $and.i24($i1304, $sub.i24(0, 262144));
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i1306 := $or.i24($i1305, 477);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p1303, $i1306);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $p1307 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p1307, 0);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $p1308 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i1309 := $load.i8($M.8, $p1308);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $i1310 := $zext.i8.i64($i1309);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i1311 := $and.i64($i1310, 1);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $i1312 := ldv__builtin_expect($i1311, 0);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i1313 := $ne.i64($i1312, 0);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1313} true;
    goto $bb292, $bb293;

  $bb293:
    assume !($i1313 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    $p1317 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p1318 := $load.ref($M.0, $p1317);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p1320 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $p1321 := $load.ref($M.0, $p1320);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} hid_hw_request($p1318, $p1321, 1);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $p1322 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $p1323 := $load.ref($M.0, $p1322);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} hid_hw_wait($p1323);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $p1324 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $p1325 := $load.ref($M.0, $p1324);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $p1326 := $add.ref($add.ref($p1325, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $p1327 := $load.ref($M.0, $p1326);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i1328 := $load.i32($M.0, $p1327);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $p1330 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i1331 := $load.i32($M.0, $p1330);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i1332 := $eq.i32($i1328, $i1331);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1332} true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i1332 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    $p1333 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $p1334 := $load.ref($M.0, $p1333);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p1335 := $add.ref($add.ref($p1334, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $p1336 := $load.ref($M.0, $p1335);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i1337 := $load.i32($M.0, $p1336);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $p1339 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i1340 := $load.i32($M.0, $p1339);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i1341 := $eq.i32($i1337, $i1340);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1341} true;
    goto $bb298, $bb299;

  $bb299:
    assume !($i1341 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    $p1342 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p1342, .str.7);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $p1343 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p1343, .str.130);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $p1344 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p1344, .str.9);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $p1345 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1345, .str.132);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $p1346 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p1347 := $bitcast.ref.ref($p1346);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i1348 := $load.i24($M.7, $p1347);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i1349 := $and.i24($i1348, $sub.i24(0, 262144));
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i1350 := $or.i24($i1349, 477);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p1347, $i1350);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $p1351 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p1351, 0);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $p1352 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i1353 := $load.i8($M.8, $p1352);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i1354 := $zext.i8.i64($i1353);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i1355 := $and.i64($i1354, 1);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $i1356 := ldv__builtin_expect($i1355, 0);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i1357 := $ne.i64($i1356, 0);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1357} true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i1357 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    $p1361 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $p1362 := $load.ref($M.0, $p1361);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p1364 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $p1365 := $load.ref($M.0, $p1364);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} hid_hw_request($p1362, $p1365, 1);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $p1366 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p1367 := $load.ref($M.0, $p1366);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} hid_hw_wait($p1367);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $p1368 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $p1369 := $load.ref($M.0, $p1368);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $p1370 := $add.ref($add.ref($p1369, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p1371 := $load.ref($M.0, $p1370);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i1372 := $load.i32($M.0, $p1371);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $p1374 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i1375 := $load.i32($M.0, $p1374);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i1376 := $eq.i32($i1372, $i1375);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1376} true;
    goto $bb305, $bb306;

  $bb306:
    assume !($i1376 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    $p1377 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p1378 := $load.ref($M.0, $p1377);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $p1379 := $add.ref($add.ref($p1378, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $p1380 := $load.ref($M.0, $p1379);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i1381 := $load.i32($M.0, $p1380);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $p1383 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i1384 := $load.i32($M.0, $p1383);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i1385 := $eq.i32($i1381, $i1384);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1385} true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i1385 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    $p1386 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p1386, .str.7);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $p1387 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p1387, .str.130);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $p1388 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p1388, .str.9);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $p1389 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1389, .str.132);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $p1390 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $p1391 := $bitcast.ref.ref($p1390);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i1392 := $load.i24($M.7, $p1391);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i1393 := $and.i24($i1392, $sub.i24(0, 262144));
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i1394 := $or.i24($i1393, 477);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p1391, $i1394);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $p1395 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p1395, 0);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $p1396 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i1397 := $load.i8($M.8, $p1396);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $i1398 := $zext.i8.i64($i1397);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i1399 := $and.i64($i1398, 1);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} $i1400 := ldv__builtin_expect($i1399, 0);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $i1401 := $ne.i64($i1400, 0);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1401} true;
    goto $bb312, $bb313;

  $bb313:
    assume !($i1401 == 1);
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    $p1405 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $p1406 := $load.ref($M.0, $p1405);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $p1408 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $p1409 := $load.ref($M.0, $p1408);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} hid_hw_request($p1406, $p1409, 1);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $p1410 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $p1411 := $load.ref($M.0, $p1410);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} hid_hw_wait($p1411);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $p1412 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $p1413 := $load.ref($M.0, $p1412);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $p1414 := $add.ref($add.ref($p1413, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $p1415 := $load.ref($M.0, $p1414);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i1416 := $load.i32($M.0, $p1415);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $p1418 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i1419 := $load.i32($M.0, $p1418);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i1420 := $eq.i32($i1416, $i1419);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1420} true;
    goto $bb315, $bb316;

  $bb316:
    assume !($i1420 == 1);
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    $p1421 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $p1422 := $load.ref($M.0, $p1421);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $p1423 := $add.ref($add.ref($p1422, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $p1424 := $load.ref($M.0, $p1423);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i1425 := $load.i32($M.0, $p1424);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $p1427 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i1428 := $load.i32($M.0, $p1427);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i1429 := $eq.i32($i1425, $i1428);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1429} true;
    goto $bb318, $bb319;

  $bb319:
    assume !($i1429 == 1);
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    $p1430 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p1430, .str.7);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $p1431 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p1431, .str.130);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $p1432 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p1432, .str.9);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $p1433 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1433, .str.132);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $p1434 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $p1435 := $bitcast.ref.ref($p1434);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i1436 := $load.i24($M.7, $p1435);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i1437 := $and.i24($i1436, $sub.i24(0, 262144));
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i1438 := $or.i24($i1437, 477);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p1435, $i1438);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p1439 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p1439, 0);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $p1440 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i1441 := $load.i8($M.8, $p1440);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i1442 := $zext.i8.i64($i1441);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i1443 := $and.i64($i1442, 1);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $i1444 := ldv__builtin_expect($i1443, 0);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i1445 := $ne.i64($i1444, 0);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1445} true;
    goto $bb322, $bb323;

  $bb323:
    assume !($i1445 == 1);
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    $p1449 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $p1450 := $load.ref($M.0, $p1449);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $p1452 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p1453 := $load.ref($M.0, $p1452);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} hid_hw_request($p1450, $p1453, 1);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $p1454 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p1455 := $load.ref($M.0, $p1454);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} hid_hw_wait($p1455);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $p1456 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $p1457 := $load.ref($M.0, $p1456);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $p1458 := $add.ref($add.ref($p1457, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $p1459 := $load.ref($M.0, $p1458);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $i1460 := $load.i32($M.0, $p1459);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $p1462 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i1463 := $load.i32($M.0, $p1462);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i1464 := $eq.i32($i1460, $i1463);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1464} true;
    goto $bb325, $bb326;

  $bb326:
    assume !($i1464 == 1);
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    $p1465 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $p1466 := $load.ref($M.0, $p1465);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $p1467 := $add.ref($add.ref($p1466, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $p1468 := $load.ref($M.0, $p1467);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $i1469 := $load.i32($M.0, $p1468);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $p1471 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i1472 := $load.i32($M.0, $p1471);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i1473 := $eq.i32($i1469, $i1472);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1473} true;
    goto $bb328, $bb329;

  $bb329:
    assume !($i1473 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    $p1474 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p1474, .str.7);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $p1475 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p1475, .str.130);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $p1476 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p1476, .str.9);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p1477 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1477, .str.132);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $p1478 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $p1479 := $bitcast.ref.ref($p1478);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i1480 := $load.i24($M.7, $p1479);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i1481 := $and.i24($i1480, $sub.i24(0, 262144));
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i1482 := $or.i24($i1481, 477);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p1479, $i1482);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $p1483 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p1483, 0);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $p1484 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i1485 := $load.i8($M.8, $p1484);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i1486 := $zext.i8.i64($i1485);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i1487 := $and.i64($i1486, 1);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $i1488 := ldv__builtin_expect($i1487, 0);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i1489 := $ne.i64($i1488, 0);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1489} true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i1489 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    $p1493 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $p1494 := $load.ref($M.0, $p1493);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $p1496 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $p1497 := $load.ref($M.0, $p1496);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} hid_hw_request($p1494, $p1497, 1);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $p1498 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $p1499 := $load.ref($M.0, $p1498);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} hid_hw_wait($p1499);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $p1500 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $p1501 := $load.ref($M.0, $p1500);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $p1502 := $add.ref($add.ref($p1501, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $p1503 := $load.ref($M.0, $p1502);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i1504 := $load.i32($M.0, $p1503);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $p1506 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $i1507 := $load.i32($M.0, $p1506);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i1508 := $eq.i32($i1504, $i1507);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1508} true;
    goto $bb335, $bb336;

  $bb336:
    assume !($i1508 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    $p1509 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $p1510 := $load.ref($M.0, $p1509);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $p1511 := $add.ref($add.ref($p1510, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $p1512 := $load.ref($M.0, $p1511);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i1513 := $load.i32($M.0, $p1512);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p1515 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $i1516 := $load.i32($M.0, $p1515);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $i1517 := $eq.i32($i1513, $i1516);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1517} true;
    goto $bb338, $bb339;

  $bb339:
    assume !($i1517 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    $p1518 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p1518, .str.7);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $p1519 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p1519, .str.130);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $p1520 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p1520, .str.9);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $p1521 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1521, .str.132);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p1522 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $p1523 := $bitcast.ref.ref($p1522);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i1524 := $load.i24($M.7, $p1523);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i1525 := $and.i24($i1524, $sub.i24(0, 262144));
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i1526 := $or.i24($i1525, 477);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p1523, $i1526);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $p1527 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p1527, 0);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p1528 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $i1529 := $load.i8($M.8, $p1528);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i1530 := $zext.i8.i64($i1529);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i1531 := $and.i64($i1530, 1);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $i1532 := ldv__builtin_expect($i1531, 0);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i1533 := $ne.i64($i1532, 0);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1533} true;
    goto $bb342, $bb343;

  $bb343:
    assume !($i1533 == 1);
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    $p1537 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $p1538 := $load.ref($M.0, $p1537);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $p1540 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $p1541 := $load.ref($M.0, $p1540);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} hid_hw_request($p1538, $p1541, 1);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $p1542 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $p1543 := $load.ref($M.0, $p1542);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} hid_hw_wait($p1543);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $p1544 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $p1545 := $load.ref($M.0, $p1544);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $p1546 := $add.ref($add.ref($p1545, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $p1547 := $load.ref($M.0, $p1546);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i1548 := $load.i32($M.0, $p1547);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $p1550 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i1551 := $load.i32($M.0, $p1550);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i1552 := $eq.i32($i1548, $i1551);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1552} true;
    goto $bb345, $bb346;

  $bb346:
    assume !($i1552 == 1);
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    $p1553 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $p1554 := $load.ref($M.0, $p1553);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $p1555 := $add.ref($add.ref($p1554, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $p1556 := $load.ref($M.0, $p1555);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i1557 := $load.i32($M.0, $p1556);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $p1559 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i1560 := $load.i32($M.0, $p1559);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $i1561 := $eq.i32($i1557, $i1560);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1561} true;
    goto $bb348, $bb349;

  $bb349:
    assume !($i1561 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    $p1562 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p1562, .str.7);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $p1563 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p1563, .str.130);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $p1564 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p1564, .str.9);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $p1565 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1565, .str.132);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p1566 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p1567 := $bitcast.ref.ref($p1566);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i1568 := $load.i24($M.7, $p1567);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i1569 := $and.i24($i1568, $sub.i24(0, 262144));
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i1570 := $or.i24($i1569, 477);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p1567, $i1570);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $p1571 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p1571, 0);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $p1572 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i1573 := $load.i8($M.8, $p1572);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i1574 := $zext.i8.i64($i1573);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i1575 := $and.i64($i1574, 1);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $i1576 := ldv__builtin_expect($i1575, 0);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $i1577 := $ne.i64($i1576, 0);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1577} true;
    goto $bb352, $bb353;

  $bb353:
    assume !($i1577 == 1);
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    $p1581 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $p1582 := $load.ref($M.0, $p1581);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $p1584 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $p1585 := $load.ref($M.0, $p1584);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} hid_hw_request($p1582, $p1585, 1);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $p1586 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $p1587 := $load.ref($M.0, $p1586);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} hid_hw_wait($p1587);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $p1588 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $p1589 := $load.ref($M.0, $p1588);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $p1590 := $add.ref($add.ref($p1589, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $p1591 := $load.ref($M.0, $p1590);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i1592 := $load.i32($M.0, $p1591);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $p1594 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i1595 := $load.i32($M.0, $p1594);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i1596 := $eq.i32($i1592, $i1595);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1596} true;
    goto $bb355, $bb356;

  $bb356:
    assume !($i1596 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    $p1597 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $p1598 := $load.ref($M.0, $p1597);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $p1599 := $add.ref($add.ref($p1598, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p1600 := $load.ref($M.0, $p1599);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $i1601 := $load.i32($M.0, $p1600);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $p1603 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i1604 := $load.i32($M.0, $p1603);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $i1605 := $eq.i32($i1601, $i1604);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1605} true;
    goto $bb358, $bb359;

  $bb359:
    assume !($i1605 == 1);
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    $p1606 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p1606, .str.7);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $p1607 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p1607, .str.130);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p1608 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p1608, .str.9);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p1609 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1609, .str.132);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $p1610 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $p1611 := $bitcast.ref.ref($p1610);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i1612 := $load.i24($M.7, $p1611);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $i1613 := $and.i24($i1612, $sub.i24(0, 262144));
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i1614 := $or.i24($i1613, 477);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p1611, $i1614);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $p1615 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p1615, 0);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $p1616 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i1617 := $load.i8($M.8, $p1616);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $i1618 := $zext.i8.i64($i1617);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i1619 := $and.i64($i1618, 1);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $i1620 := ldv__builtin_expect($i1619, 0);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $i1621 := $ne.i64($i1620, 0);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1621} true;
    goto $bb362, $bb363;

  $bb363:
    assume !($i1621 == 1);
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    $p1625 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $p1626 := $load.ref($M.0, $p1625);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $p1628 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $p1629 := $load.ref($M.0, $p1628);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} hid_hw_request($p1626, $p1629, 1);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $p1630 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $p1631 := $load.ref($M.0, $p1630);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} hid_hw_wait($p1631);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p1632 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $p1633 := $load.ref($M.0, $p1632);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $p1634 := $add.ref($add.ref($p1633, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $p1635 := $load.ref($M.0, $p1634);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i1636 := $load.i32($M.0, $p1635);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $p1638 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i1639 := $load.i32($M.0, $p1638);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i1640 := $eq.i32($i1636, $i1639);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1640} true;
    goto $bb365, $bb366;

  $bb366:
    assume !($i1640 == 1);
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    $p1641 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $p1642 := $load.ref($M.0, $p1641);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $p1643 := $add.ref($add.ref($p1642, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $p1644 := $load.ref($M.0, $p1643);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $i1645 := $load.i32($M.0, $p1644);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $p1647 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $i1648 := $load.i32($M.0, $p1647);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $i1649 := $eq.i32($i1645, $i1648);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1649} true;
    goto $bb368, $bb369;

  $bb369:
    assume !($i1649 == 1);
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    $p1650 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p1650, .str.7);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $p1651 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p1651, .str.130);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $p1652 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p1652, .str.9);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $p1653 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1653, .str.132);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p1654 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $p1655 := $bitcast.ref.ref($p1654);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i1656 := $load.i24($M.7, $p1655);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i1657 := $and.i24($i1656, $sub.i24(0, 262144));
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i1658 := $or.i24($i1657, 477);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p1655, $i1658);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $p1659 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p1659, 0);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $p1660 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i1661 := $load.i8($M.8, $p1660);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i1662 := $zext.i8.i64($i1661);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i1663 := $and.i64($i1662, 1);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $i1664 := ldv__builtin_expect($i1663, 0);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i1665 := $ne.i64($i1664, 0);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1665} true;
    goto $bb372, $bb373;

  $bb373:
    assume !($i1665 == 1);
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    $p1669 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $p1670 := $load.ref($M.0, $p1669);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $p1672 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $p1673 := $load.ref($M.0, $p1672);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} hid_hw_request($p1670, $p1673, 1);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $p1674 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $p1675 := $load.ref($M.0, $p1674);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} hid_hw_wait($p1675);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $p1676 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $p1677 := $load.ref($M.0, $p1676);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $p1678 := $add.ref($add.ref($p1677, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $p1679 := $load.ref($M.0, $p1678);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i1680 := $load.i32($M.0, $p1679);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $p1682 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i1683 := $load.i32($M.0, $p1682);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i1684 := $eq.i32($i1680, $i1683);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1684} true;
    goto $bb375, $bb376;

  $bb376:
    assume !($i1684 == 1);
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    $p1685 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $p1686 := $load.ref($M.0, $p1685);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $p1687 := $add.ref($add.ref($p1686, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $p1688 := $load.ref($M.0, $p1687);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i1689 := $load.i32($M.0, $p1688);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $p1691 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i1692 := $load.i32($M.0, $p1691);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i1693 := $eq.i32($i1689, $i1692);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1693} true;
    goto $bb378, $bb379;

  $bb379:
    assume !($i1693 == 1);
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    $p1694 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p1694, .str.7);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $p1695 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p1695, .str.130);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $p1696 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p1696, .str.9);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $p1697 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1697, .str.132);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $p1698 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $p1699 := $bitcast.ref.ref($p1698);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i1700 := $load.i24($M.7, $p1699);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i1701 := $and.i24($i1700, $sub.i24(0, 262144));
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $i1702 := $or.i24($i1701, 477);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p1699, $i1702);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $p1703 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p1703, 0);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $p1704 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i1705 := $load.i8($M.8, $p1704);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $i1706 := $zext.i8.i64($i1705);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i1707 := $and.i64($i1706, 1);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $i1708 := ldv__builtin_expect($i1707, 0);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $i1709 := $ne.i64($i1708, 0);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1709} true;
    goto $bb382, $bb383;

  $bb383:
    assume !($i1709 == 1);
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    $p1713 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $p1714 := $load.ref($M.0, $p1713);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $p1716 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p1717 := $load.ref($M.0, $p1716);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} hid_hw_request($p1714, $p1717, 1);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $p1718 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $p1719 := $load.ref($M.0, $p1718);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} hid_hw_wait($p1719);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $p1720 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $p1721 := $load.ref($M.0, $p1720);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $p1722 := $add.ref($add.ref($p1721, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $p1723 := $load.ref($M.0, $p1722);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $i1724 := $load.i32($M.0, $p1723);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $p1726 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i1727 := $load.i32($M.0, $p1726);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $i1728 := $eq.i32($i1724, $i1727);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1728} true;
    goto $bb385, $bb386;

  $bb386:
    assume !($i1728 == 1);
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    $p1729 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $p1730 := $load.ref($M.0, $p1729);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $p1731 := $add.ref($add.ref($p1730, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $p1732 := $load.ref($M.0, $p1731);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i1733 := $load.i32($M.0, $p1732);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $p1735 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i1736 := $load.i32($M.0, $p1735);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $i1737 := $eq.i32($i1733, $i1736);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1737} true;
    goto $bb388, $bb389;

  $bb389:
    assume !($i1737 == 1);
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    $p1738 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p1738, .str.7);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p1739 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p1739, .str.130);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p1740 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p1740, .str.9);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $p1741 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1741, .str.132);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $p1742 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $p1743 := $bitcast.ref.ref($p1742);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i1744 := $load.i24($M.7, $p1743);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $i1745 := $and.i24($i1744, $sub.i24(0, 262144));
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i1746 := $or.i24($i1745, 477);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p1743, $i1746);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $p1747 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p1747, 0);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $p1748 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i1749 := $load.i8($M.8, $p1748);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i1750 := $zext.i8.i64($i1749);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i1751 := $and.i64($i1750, 1);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $i1752 := ldv__builtin_expect($i1751, 0);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $i1753 := $ne.i64($i1752, 0);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1753} true;
    goto $bb392, $bb393;

  $bb393:
    assume !($i1753 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    $p1757 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $p1758 := $load.ref($M.0, $p1757);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $p1760 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $p1761 := $load.ref($M.0, $p1760);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} hid_hw_request($p1758, $p1761, 1);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $p1762 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $p1763 := $load.ref($M.0, $p1762);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} hid_hw_wait($p1763);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p1764 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $p1765 := $load.ref($M.0, $p1764);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $p1766 := $add.ref($add.ref($p1765, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $p1767 := $load.ref($M.0, $p1766);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i1768 := $load.i32($M.0, $p1767);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $p1770 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i1771 := $load.i32($M.0, $p1770);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i1772 := $eq.i32($i1768, $i1771);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1772} true;
    goto $bb395, $bb396;

  $bb396:
    assume !($i1772 == 1);
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    $p1773 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $p1774 := $load.ref($M.0, $p1773);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $p1775 := $add.ref($add.ref($p1774, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $p1776 := $load.ref($M.0, $p1775);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i1777 := $load.i32($M.0, $p1776);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $p1779 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $i1780 := $load.i32($M.0, $p1779);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i1781 := $eq.i32($i1777, $i1780);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1781} true;
    goto $bb398, $bb399;

  $bb399:
    assume !($i1781 == 1);
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    $p1782 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p1782, .str.7);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $p1783 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p1783, .str.130);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $p1784 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p1784, .str.9);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $p1785 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1785, .str.132);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $p1786 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $p1787 := $bitcast.ref.ref($p1786);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i1788 := $load.i24($M.7, $p1787);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $i1789 := $and.i24($i1788, $sub.i24(0, 262144));
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i1790 := $or.i24($i1789, 477);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p1787, $i1790);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $p1791 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p1791, 0);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $p1792 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $i1793 := $load.i8($M.8, $p1792);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $i1794 := $zext.i8.i64($i1793);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $i1795 := $and.i64($i1794, 1);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} $i1796 := ldv__builtin_expect($i1795, 0);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $i1797 := $ne.i64($i1796, 0);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1797} true;
    goto $bb402, $bb403;

  $bb403:
    assume !($i1797 == 1);
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    $p1801 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $p1802 := $load.ref($M.0, $p1801);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p1804 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $p1805 := $load.ref($M.0, $p1804);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} hid_hw_request($p1802, $p1805, 1);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $p1806 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $p1807 := $load.ref($M.0, $p1806);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} hid_hw_wait($p1807);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $p1808 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $p1809 := $load.ref($M.0, $p1808);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $p1810 := $add.ref($add.ref($p1809, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $p1811 := $load.ref($M.0, $p1810);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i1812 := $load.i32($M.0, $p1811);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $p1814 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $i1815 := $load.i32($M.0, $p1814);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i1816 := $eq.i32($i1812, $i1815);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1816} true;
    goto $bb405, $bb406;

  $bb406:
    assume !($i1816 == 1);
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    $p1817 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $p1818 := $load.ref($M.0, $p1817);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $p1819 := $add.ref($add.ref($p1818, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $p1820 := $load.ref($M.0, $p1819);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $i1821 := $load.i32($M.0, $p1820);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $p1823 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $i1824 := $load.i32($M.0, $p1823);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i1825 := $eq.i32($i1821, $i1824);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1825} true;
    goto $bb408, $bb409;

  $bb409:
    assume !($i1825 == 1);
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    $p1826 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p1826, .str.7);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $p1827 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p1827, .str.130);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $p1828 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p1828, .str.9);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $p1829 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1829, .str.132);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $p1830 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $p1831 := $bitcast.ref.ref($p1830);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i1832 := $load.i24($M.7, $p1831);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $i1833 := $and.i24($i1832, $sub.i24(0, 262144));
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i1834 := $or.i24($i1833, 477);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p1831, $i1834);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $p1835 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p1835, 0);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $p1836 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $i1837 := $load.i8($M.8, $p1836);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $i1838 := $zext.i8.i64($i1837);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i1839 := $and.i64($i1838, 1);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $i1840 := ldv__builtin_expect($i1839, 0);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i1841 := $ne.i64($i1840, 0);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1841} true;
    goto $bb412, $bb413;

  $bb413:
    assume !($i1841 == 1);
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    $p1845 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $p1846 := $load.ref($M.0, $p1845);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $p1848 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $p1849 := $load.ref($M.0, $p1848);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} hid_hw_request($p1846, $p1849, 1);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $p1850 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $p1851 := $load.ref($M.0, $p1850);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} hid_hw_wait($p1851);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $p1852 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $p1853 := $load.ref($M.0, $p1852);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $p1854 := $add.ref($add.ref($p1853, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $p1855 := $load.ref($M.0, $p1854);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i1856 := $load.i32($M.0, $p1855);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $p1858 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $i1859 := $load.i32($M.0, $p1858);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $i1860 := $eq.i32($i1856, $i1859);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1860} true;
    goto $bb415, $bb416;

  $bb416:
    assume !($i1860 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    $p1861 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $p1862 := $load.ref($M.0, $p1861);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $p1863 := $add.ref($add.ref($p1862, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $p1864 := $load.ref($M.0, $p1863);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i1865 := $load.i32($M.0, $p1864);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p1867 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i1868 := $load.i32($M.0, $p1867);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i1869 := $eq.i32($i1865, $i1868);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1869} true;
    goto $bb418, $bb419;

  $bb419:
    assume !($i1869 == 1);
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    $p1870 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p1870, .str.7);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $p1871 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p1871, .str.130);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $p1872 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p1872, .str.9);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $p1873 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1873, .str.132);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $p1874 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $p1875 := $bitcast.ref.ref($p1874);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i1876 := $load.i24($M.7, $p1875);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $i1877 := $and.i24($i1876, $sub.i24(0, 262144));
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i1878 := $or.i24($i1877, 477);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p1875, $i1878);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $p1879 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p1879, 0);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $p1880 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $i1881 := $load.i8($M.8, $p1880);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $i1882 := $zext.i8.i64($i1881);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i1883 := $and.i64($i1882, 1);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $i1884 := ldv__builtin_expect($i1883, 0);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i1885 := $ne.i64($i1884, 0);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1885} true;
    goto $bb422, $bb423;

  $bb423:
    assume !($i1885 == 1);
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    $p1889 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $p1890 := $load.ref($M.0, $p1889);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $p1892 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $p1893 := $load.ref($M.0, $p1892);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} hid_hw_request($p1890, $p1893, 1);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $p1894 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $p1895 := $load.ref($M.0, $p1894);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} hid_hw_wait($p1895);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $p1896 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $p1897 := $load.ref($M.0, $p1896);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $p1898 := $add.ref($add.ref($p1897, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $p1899 := $load.ref($M.0, $p1898);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i1900 := $load.i32($M.0, $p1899);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $p1902 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i1903 := $load.i32($M.0, $p1902);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i1904 := $eq.i32($i1900, $i1903);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1904} true;
    goto $bb425, $bb426;

  $bb426:
    assume !($i1904 == 1);
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    $p1905 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $p1906 := $load.ref($M.0, $p1905);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $p1907 := $add.ref($add.ref($p1906, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $p1908 := $load.ref($M.0, $p1907);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i1909 := $load.i32($M.0, $p1908);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $p1911 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $i1912 := $load.i32($M.0, $p1911);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i1913 := $eq.i32($i1909, $i1912);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1913} true;
    goto $bb428, $bb429;

  $bb429:
    assume !($i1913 == 1);
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    $p1914 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p1914, .str.7);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $p1915 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p1915, .str.130);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $p1916 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p1916, .str.9);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $p1917 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1917, .str.132);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $p1918 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $p1919 := $bitcast.ref.ref($p1918);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $i1920 := $load.i24($M.7, $p1919);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $i1921 := $and.i24($i1920, $sub.i24(0, 262144));
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $i1922 := $or.i24($i1921, 477);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p1919, $i1922);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $p1923 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p1923, 0);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $p1924 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $i1925 := $load.i8($M.8, $p1924);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i1926 := $zext.i8.i64($i1925);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i1927 := $and.i64($i1926, 1);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $i1928 := ldv__builtin_expect($i1927, 0);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i1929 := $ne.i64($i1928, 0);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1929} true;
    goto $bb432, $bb433;

  $bb433:
    assume !($i1929 == 1);
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    $p1933 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $p1934 := $load.ref($M.0, $p1933);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $p1936 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $p1937 := $load.ref($M.0, $p1936);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} hid_hw_request($p1934, $p1937, 1);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $p1938 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $p1939 := $load.ref($M.0, $p1938);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} hid_hw_wait($p1939);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $p1940 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $p1941 := $load.ref($M.0, $p1940);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $p1942 := $add.ref($add.ref($p1941, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $p1943 := $load.ref($M.0, $p1942);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $i1944 := $load.i32($M.0, $p1943);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $p1946 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $i1947 := $load.i32($M.0, $p1946);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i1948 := $eq.i32($i1944, $i1947);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1948} true;
    goto $bb435, $bb436;

  $bb436:
    assume !($i1948 == 1);
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    $p1949 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $p1950 := $load.ref($M.0, $p1949);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $p1951 := $add.ref($add.ref($p1950, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $p1952 := $load.ref($M.0, $p1951);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $i1953 := $load.i32($M.0, $p1952);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $p1955 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i1956 := $load.i32($M.0, $p1955);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i1957 := $eq.i32($i1953, $i1956);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1957} true;
    goto $bb438, $bb439;

  $bb439:
    assume !($i1957 == 1);
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    $p1958 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p1958, .str.7);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $p1959 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p1959, .str.130);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $p1960 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p1960, .str.9);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $p1961 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1961, .str.132);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $p1962 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $p1963 := $bitcast.ref.ref($p1962);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i1964 := $load.i24($M.7, $p1963);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $i1965 := $and.i24($i1964, $sub.i24(0, 262144));
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $i1966 := $or.i24($i1965, 477);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p1963, $i1966);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $p1967 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p1967, 0);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $p1968 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $i1969 := $load.i8($M.8, $p1968);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $i1970 := $zext.i8.i64($i1969);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i1971 := $and.i64($i1970, 1);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $i1972 := ldv__builtin_expect($i1971, 0);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $i1973 := $ne.i64($i1972, 0);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1973} true;
    goto $bb442, $bb443;

  $bb443:
    assume !($i1973 == 1);
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    $p1977 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $p1978 := $load.ref($M.0, $p1977);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $p1980 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $p1981 := $load.ref($M.0, $p1980);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} hid_hw_request($p1978, $p1981, 1);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $p1982 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $p1983 := $load.ref($M.0, $p1982);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} hid_hw_wait($p1983);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $p1984 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $p1985 := $load.ref($M.0, $p1984);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $p1986 := $add.ref($add.ref($p1985, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $p1987 := $load.ref($M.0, $p1986);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i1988 := $load.i32($M.0, $p1987);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p1990 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $i1991 := $load.i32($M.0, $p1990);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $i1992 := $eq.i32($i1988, $i1991);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1992} true;
    goto $bb445, $bb446;

  $bb446:
    assume !($i1992 == 1);
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    $p1993 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $p1994 := $load.ref($M.0, $p1993);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $p1995 := $add.ref($add.ref($p1994, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $p1996 := $load.ref($M.0, $p1995);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $i1997 := $load.i32($M.0, $p1996);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $p1999 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $i2000 := $load.i32($M.0, $p1999);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $i2001 := $eq.i32($i1997, $i2000);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2001} true;
    goto $bb448, $bb449;

  $bb449:
    assume !($i2001 == 1);
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    $p2002 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p2002, .str.7);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $p2003 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2003, .str.130);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $p2004 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p2004, .str.9);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $p2005 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2005, .str.132);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $p2006 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $p2007 := $bitcast.ref.ref($p2006);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i2008 := $load.i24($M.7, $p2007);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i2009 := $and.i24($i2008, $sub.i24(0, 262144));
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $i2010 := $or.i24($i2009, 477);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p2007, $i2010);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $p2011 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p2011, 0);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $p2012 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $i2013 := $load.i8($M.8, $p2012);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $i2014 := $zext.i8.i64($i2013);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i2015 := $and.i64($i2014, 1);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $i2016 := ldv__builtin_expect($i2015, 0);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i2017 := $ne.i64($i2016, 0);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2017} true;
    goto $bb452, $bb453;

  $bb453:
    assume !($i2017 == 1);
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    $p2021 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $p2022 := $load.ref($M.0, $p2021);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $p2024 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $p2025 := $load.ref($M.0, $p2024);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} hid_hw_request($p2022, $p2025, 1);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $p2026 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $p2027 := $load.ref($M.0, $p2026);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} hid_hw_wait($p2027);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $p2028 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $p2029 := $load.ref($M.0, $p2028);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $p2030 := $add.ref($add.ref($p2029, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $p2031 := $load.ref($M.0, $p2030);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i2032 := $load.i32($M.0, $p2031);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $p2034 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $i2035 := $load.i32($M.0, $p2034);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $i2036 := $eq.i32($i2032, $i2035);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2036} true;
    goto $bb455, $bb456;

  $bb456:
    assume !($i2036 == 1);
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    $p2037 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $p2038 := $load.ref($M.0, $p2037);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $p2039 := $add.ref($add.ref($p2038, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $p2040 := $load.ref($M.0, $p2039);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $i2041 := $load.i32($M.0, $p2040);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p2043 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i2044 := $load.i32($M.0, $p2043);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $i2045 := $eq.i32($i2041, $i2044);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2045} true;
    goto $bb458, $bb459;

  $bb459:
    assume !($i2045 == 1);
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb461:
    assume {:verifier.code 0} true;
    $p2046 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p2046, .str.7);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $p2047 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2047, .str.130);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $p2048 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p2048, .str.9);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $p2049 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2049, .str.132);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $p2050 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $p2051 := $bitcast.ref.ref($p2050);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i2052 := $load.i24($M.7, $p2051);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i2053 := $and.i24($i2052, $sub.i24(0, 262144));
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i2054 := $or.i24($i2053, 477);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p2051, $i2054);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $p2055 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p2055, 0);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $p2056 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $i2057 := $load.i8($M.8, $p2056);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i2058 := $zext.i8.i64($i2057);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $i2059 := $and.i64($i2058, 1);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} $i2060 := ldv__builtin_expect($i2059, 0);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i2061 := $ne.i64($i2060, 0);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2061} true;
    goto $bb462, $bb463;

  $bb463:
    assume !($i2061 == 1);
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    $p2065 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $p2066 := $load.ref($M.0, $p2065);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $p2068 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $p2069 := $load.ref($M.0, $p2068);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} hid_hw_request($p2066, $p2069, 1);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $p2070 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $p2071 := $load.ref($M.0, $p2070);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} hid_hw_wait($p2071);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $p2072 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $p2073 := $load.ref($M.0, $p2072);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $p2074 := $add.ref($add.ref($p2073, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $p2075 := $load.ref($M.0, $p2074);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i2076 := $load.i32($M.0, $p2075);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $p2078 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $i2079 := $load.i32($M.0, $p2078);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $i2080 := $eq.i32($i2076, $i2079);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2080} true;
    goto $bb465, $bb466;

  $bb466:
    assume !($i2080 == 1);
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    $p2081 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $p2082 := $load.ref($M.0, $p2081);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $p2083 := $add.ref($add.ref($p2082, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $p2084 := $load.ref($M.0, $p2083);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $i2085 := $load.i32($M.0, $p2084);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $p2087 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i2088 := $load.i32($M.0, $p2087);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i2089 := $eq.i32($i2085, $i2088);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2089} true;
    goto $bb468, $bb469;

  $bb469:
    assume !($i2089 == 1);
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    $p2090 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p2090, .str.7);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $p2091 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2091, .str.130);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $p2092 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p2092, .str.9);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $p2093 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2093, .str.132);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $p2094 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $p2095 := $bitcast.ref.ref($p2094);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $i2096 := $load.i24($M.7, $p2095);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i2097 := $and.i24($i2096, $sub.i24(0, 262144));
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i2098 := $or.i24($i2097, 477);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p2095, $i2098);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $p2099 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p2099, 0);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $p2100 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $i2101 := $load.i8($M.8, $p2100);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $i2102 := $zext.i8.i64($i2101);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $i2103 := $and.i64($i2102, 1);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $i2104 := ldv__builtin_expect($i2103, 0);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i2105 := $ne.i64($i2104, 0);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2105} true;
    goto $bb472, $bb473;

  $bb473:
    assume !($i2105 == 1);
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    $p2109 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $p2110 := $load.ref($M.0, $p2109);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $p2112 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $p2113 := $load.ref($M.0, $p2112);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} hid_hw_request($p2110, $p2113, 1);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $p2114 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $p2115 := $load.ref($M.0, $p2114);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} hid_hw_wait($p2115);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $p2116 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $p2117 := $load.ref($M.0, $p2116);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $p2118 := $add.ref($add.ref($p2117, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $p2119 := $load.ref($M.0, $p2118);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $i2120 := $load.i32($M.0, $p2119);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $p2122 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i2123 := $load.i32($M.0, $p2122);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i2124 := $eq.i32($i2120, $i2123);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2124} true;
    goto $bb475, $bb476;

  $bb476:
    assume !($i2124 == 1);
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb477:
    assume {:verifier.code 0} true;
    $p2125 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $p2126 := $load.ref($M.0, $p2125);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $p2127 := $add.ref($add.ref($p2126, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $p2128 := $load.ref($M.0, $p2127);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $i2129 := $load.i32($M.0, $p2128);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $p2131 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i2132 := $load.i32($M.0, $p2131);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i2133 := $eq.i32($i2129, $i2132);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2133} true;
    goto $bb478, $bb479;

  $bb479:
    assume !($i2133 == 1);
    assume {:verifier.code 0} true;
    goto $bb480;

  $bb480:
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    $p2134 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p2134, .str.7);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $p2135 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2135, .str.130);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $p2136 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p2136, .str.9);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $p2137 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2137, .str.132);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $p2138 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $p2139 := $bitcast.ref.ref($p2138);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i2140 := $load.i24($M.7, $p2139);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $i2141 := $and.i24($i2140, $sub.i24(0, 262144));
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i2142 := $or.i24($i2141, 477);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p2139, $i2142);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $p2143 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p2143, 0);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $p2144 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i2145 := $load.i8($M.8, $p2144);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $i2146 := $zext.i8.i64($i2145);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $i2147 := $and.i64($i2146, 1);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $i2148 := ldv__builtin_expect($i2147, 0);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i2149 := $ne.i64($i2148, 0);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2149} true;
    goto $bb482, $bb483;

  $bb483:
    assume !($i2149 == 1);
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    $p2153 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $p2154 := $load.ref($M.0, $p2153);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p2156 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $p2157 := $load.ref($M.0, $p2156);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} hid_hw_request($p2154, $p2157, 1);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $p2158 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $p2159 := $load.ref($M.0, $p2158);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} hid_hw_wait($p2159);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $p2160 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $p2161 := $load.ref($M.0, $p2160);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $p2162 := $add.ref($add.ref($p2161, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $p2163 := $load.ref($M.0, $p2162);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i2164 := $load.i32($M.0, $p2163);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $p2166 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i2167 := $load.i32($M.0, $p2166);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $i2168 := $eq.i32($i2164, $i2167);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2168} true;
    goto $bb485, $bb486;

  $bb486:
    assume !($i2168 == 1);
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    $p2169 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $p2170 := $load.ref($M.0, $p2169);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $p2171 := $add.ref($add.ref($p2170, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $p2172 := $load.ref($M.0, $p2171);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $i2173 := $load.i32($M.0, $p2172);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $p2175 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $i2176 := $load.i32($M.0, $p2175);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i2177 := $eq.i32($i2173, $i2176);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2177} true;
    goto $bb488, $bb489;

  $bb489:
    assume !($i2177 == 1);
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    $p2178 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p2178, .str.7);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $p2179 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2179, .str.130);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $p2180 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p2180, .str.9);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $p2181 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2181, .str.132);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $p2182 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $p2183 := $bitcast.ref.ref($p2182);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $i2184 := $load.i24($M.7, $p2183);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i2185 := $and.i24($i2184, $sub.i24(0, 262144));
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $i2186 := $or.i24($i2185, 477);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p2183, $i2186);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $p2187 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p2187, 0);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $p2188 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i2189 := $load.i8($M.8, $p2188);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $i2190 := $zext.i8.i64($i2189);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $i2191 := $and.i64($i2190, 1);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $i2192 := ldv__builtin_expect($i2191, 0);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $i2193 := $ne.i64($i2192, 0);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2193} true;
    goto $bb492, $bb493;

  $bb493:
    assume !($i2193 == 1);
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    $p2197 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $p2198 := $load.ref($M.0, $p2197);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $p2200 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $p2201 := $load.ref($M.0, $p2200);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} hid_hw_request($p2198, $p2201, 1);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $p2202 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $p2203 := $load.ref($M.0, $p2202);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} hid_hw_wait($p2203);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $p2204 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $p2205 := $load.ref($M.0, $p2204);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $p2206 := $add.ref($add.ref($p2205, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $p2207 := $load.ref($M.0, $p2206);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i2208 := $load.i32($M.0, $p2207);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $p2210 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $i2211 := $load.i32($M.0, $p2210);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i2212 := $eq.i32($i2208, $i2211);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2212} true;
    goto $bb495, $bb496;

  $bb496:
    assume !($i2212 == 1);
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb497:
    assume {:verifier.code 0} true;
    $p2213 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $p2214 := $load.ref($M.0, $p2213);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $p2215 := $add.ref($add.ref($p2214, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $p2216 := $load.ref($M.0, $p2215);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i2217 := $load.i32($M.0, $p2216);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $p2219 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $i2220 := $load.i32($M.0, $p2219);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i2221 := $eq.i32($i2217, $i2220);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2221} true;
    goto $bb498, $bb499;

  $bb499:
    assume !($i2221 == 1);
    assume {:verifier.code 0} true;
    goto $bb500;

  $bb500:
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb501:
    assume {:verifier.code 0} true;
    $p2222 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p2222, .str.7);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $p2223 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2223, .str.130);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $p2224 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p2224, .str.9);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $p2225 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2225, .str.132);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $p2226 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $p2227 := $bitcast.ref.ref($p2226);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $i2228 := $load.i24($M.7, $p2227);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i2229 := $and.i24($i2228, $sub.i24(0, 262144));
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i2230 := $or.i24($i2229, 477);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p2227, $i2230);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $p2231 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p2231, 0);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $p2232 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i2233 := $load.i8($M.8, $p2232);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $i2234 := $zext.i8.i64($i2233);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i2235 := $and.i64($i2234, 1);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $i2236 := ldv__builtin_expect($i2235, 0);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i2237 := $ne.i64($i2236, 0);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2237} true;
    goto $bb502, $bb503;

  $bb503:
    assume !($i2237 == 1);
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb504:
    assume {:verifier.code 0} true;
    $p2241 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $p2242 := $load.ref($M.0, $p2241);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $p2244 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p2245 := $load.ref($M.0, $p2244);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} hid_hw_request($p2242, $p2245, 1);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $p2246 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $p2247 := $load.ref($M.0, $p2246);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} hid_hw_wait($p2247);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $p2248 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $p2249 := $load.ref($M.0, $p2248);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $p2250 := $add.ref($add.ref($p2249, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $p2251 := $load.ref($M.0, $p2250);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i2252 := $load.i32($M.0, $p2251);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $p2254 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i2255 := $load.i32($M.0, $p2254);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i2256 := $eq.i32($i2252, $i2255);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2256} true;
    goto $bb505, $bb506;

  $bb506:
    assume !($i2256 == 1);
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    $p2257 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $p2258 := $load.ref($M.0, $p2257);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $p2259 := $add.ref($add.ref($p2258, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $p2260 := $load.ref($M.0, $p2259);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i2261 := $load.i32($M.0, $p2260);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $p2263 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i2264 := $load.i32($M.0, $p2263);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $i2265 := $eq.i32($i2261, $i2264);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2265} true;
    goto $bb508, $bb509;

  $bb509:
    assume !($i2265 == 1);
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    $p2266 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p2266, .str.7);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $p2267 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2267, .str.130);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $p2268 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p2268, .str.9);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $p2269 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2269, .str.132);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $p2270 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $p2271 := $bitcast.ref.ref($p2270);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $i2272 := $load.i24($M.7, $p2271);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i2273 := $and.i24($i2272, $sub.i24(0, 262144));
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i2274 := $or.i24($i2273, 477);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p2271, $i2274);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $p2275 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p2275, 0);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $p2276 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i2277 := $load.i8($M.8, $p2276);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $i2278 := $zext.i8.i64($i2277);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i2279 := $and.i64($i2278, 1);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $i2280 := ldv__builtin_expect($i2279, 0);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i2281 := $ne.i64($i2280, 0);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2281} true;
    goto $bb512, $bb513;

  $bb513:
    assume !($i2281 == 1);
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    $p2285 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $p2286 := $load.ref($M.0, $p2285);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $p2288 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $p2289 := $load.ref($M.0, $p2288);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} hid_hw_request($p2286, $p2289, 1);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $p2290 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $p2291 := $load.ref($M.0, $p2290);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} hid_hw_wait($p2291);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $p2292 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $p2293 := $load.ref($M.0, $p2292);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $p2294 := $add.ref($add.ref($p2293, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $p2295 := $load.ref($M.0, $p2294);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $i2296 := $load.i32($M.0, $p2295);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $p2298 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $i2299 := $load.i32($M.0, $p2298);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $i2300 := $eq.i32($i2296, $i2299);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2300} true;
    goto $bb515, $bb516;

  $bb516:
    assume !($i2300 == 1);
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    $p2301 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $p2302 := $load.ref($M.0, $p2301);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $p2303 := $add.ref($add.ref($p2302, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $p2304 := $load.ref($M.0, $p2303);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $i2305 := $load.i32($M.0, $p2304);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $p2307 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i2308 := $load.i32($M.0, $p2307);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i2309 := $eq.i32($i2305, $i2308);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2309} true;
    goto $bb518, $bb519;

  $bb519:
    assume !($i2309 == 1);
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb520:
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb521:
    assume {:verifier.code 0} true;
    $p2310 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p2310, .str.7);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $p2311 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2311, .str.130);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $p2312 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p2312, .str.9);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $p2313 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2313, .str.132);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $p2314 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $p2315 := $bitcast.ref.ref($p2314);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $i2316 := $load.i24($M.7, $p2315);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i2317 := $and.i24($i2316, $sub.i24(0, 262144));
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i2318 := $or.i24($i2317, 477);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p2315, $i2318);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $p2319 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p2319, 0);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $p2320 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i2321 := $load.i8($M.8, $p2320);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i2322 := $zext.i8.i64($i2321);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i2323 := $and.i64($i2322, 1);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $i2324 := ldv__builtin_expect($i2323, 0);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i2325 := $ne.i64($i2324, 0);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2325} true;
    goto $bb522, $bb523;

  $bb523:
    assume !($i2325 == 1);
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb524:
    assume {:verifier.code 0} true;
    $p2329 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $p2330 := $load.ref($M.0, $p2329);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $p2332 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $p2333 := $load.ref($M.0, $p2332);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} hid_hw_request($p2330, $p2333, 1);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $p2334 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $p2335 := $load.ref($M.0, $p2334);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} hid_hw_wait($p2335);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $p2336 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $p2337 := $load.ref($M.0, $p2336);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $p2338 := $add.ref($add.ref($p2337, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $p2339 := $load.ref($M.0, $p2338);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i2340 := $load.i32($M.0, $p2339);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $p2342 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $i2343 := $load.i32($M.0, $p2342);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $i2344 := $eq.i32($i2340, $i2343);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2344} true;
    goto $bb525, $bb526;

  $bb526:
    assume !($i2344 == 1);
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb527:
    assume {:verifier.code 0} true;
    $p2345 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $p2346 := $load.ref($M.0, $p2345);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $p2347 := $add.ref($add.ref($p2346, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $p2348 := $load.ref($M.0, $p2347);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $i2349 := $load.i32($M.0, $p2348);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $p2351 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $i2352 := $load.i32($M.0, $p2351);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $i2353 := $eq.i32($i2349, $i2352);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2353} true;
    goto $bb528, $bb529;

  $bb529:
    assume !($i2353 == 1);
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    goto $bb531;

  $bb531:
    assume {:verifier.code 0} true;
    $p2354 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p2354, .str.7);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $p2355 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2355, .str.130);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $p2356 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p2356, .str.9);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $p2357 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2357, .str.132);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $p2358 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $p2359 := $bitcast.ref.ref($p2358);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i2360 := $load.i24($M.7, $p2359);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $i2361 := $and.i24($i2360, $sub.i24(0, 262144));
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i2362 := $or.i24($i2361, 477);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p2359, $i2362);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $p2363 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p2363, 0);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $p2364 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i2365 := $load.i8($M.8, $p2364);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $i2366 := $zext.i8.i64($i2365);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $i2367 := $and.i64($i2366, 1);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $i2368 := ldv__builtin_expect($i2367, 0);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i2369 := $ne.i64($i2368, 0);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2369} true;
    goto $bb532, $bb533;

  $bb533:
    assume !($i2369 == 1);
    assume {:verifier.code 0} true;
    goto $bb534;

  $bb534:
    assume {:verifier.code 0} true;
    $p2373 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $p2374 := $load.ref($M.0, $p2373);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $p2376 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $p2377 := $load.ref($M.0, $p2376);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} hid_hw_request($p2374, $p2377, 1);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $p2378 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $p2379 := $load.ref($M.0, $p2378);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} hid_hw_wait($p2379);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $p2380 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $p2381 := $load.ref($M.0, $p2380);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $p2382 := $add.ref($add.ref($p2381, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $p2383 := $load.ref($M.0, $p2382);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i2384 := $load.i32($M.0, $p2383);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $p2386 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i2387 := $load.i32($M.0, $p2386);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i2388 := $eq.i32($i2384, $i2387);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2388} true;
    goto $bb535, $bb536;

  $bb536:
    assume !($i2388 == 1);
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb537:
    assume {:verifier.code 0} true;
    $p2389 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $p2390 := $load.ref($M.0, $p2389);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $p2391 := $add.ref($add.ref($p2390, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $p2392 := $load.ref($M.0, $p2391);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i2393 := $load.i32($M.0, $p2392);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $p2395 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $i2396 := $load.i32($M.0, $p2395);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i2397 := $eq.i32($i2393, $i2396);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2397} true;
    goto $bb538, $bb539;

  $bb539:
    assume !($i2397 == 1);
    assume {:verifier.code 0} true;
    goto $bb540;

  $bb540:
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb541:
    assume {:verifier.code 0} true;
    $p2398 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p2398, .str.7);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $p2399 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2399, .str.130);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $p2400 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p2400, .str.9);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $p2401 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2401, .str.132);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $p2402 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $p2403 := $bitcast.ref.ref($p2402);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i2404 := $load.i24($M.7, $p2403);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i2405 := $and.i24($i2404, $sub.i24(0, 262144));
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i2406 := $or.i24($i2405, 477);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p2403, $i2406);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $p2407 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p2407, 0);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $p2408 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i2409 := $load.i8($M.8, $p2408);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i2410 := $zext.i8.i64($i2409);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $i2411 := $and.i64($i2410, 1);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $i2412 := ldv__builtin_expect($i2411, 0);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i2413 := $ne.i64($i2412, 0);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2413} true;
    goto $bb542, $bb543;

  $bb543:
    assume !($i2413 == 1);
    assume {:verifier.code 0} true;
    goto $bb544;

  $bb544:
    assume {:verifier.code 0} true;
    $p2417 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $p2418 := $load.ref($M.0, $p2417);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $p2420 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $p2421 := $load.ref($M.0, $p2420);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} hid_hw_request($p2418, $p2421, 1);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $p2422 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $p2423 := $load.ref($M.0, $p2422);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} hid_hw_wait($p2423);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $p2424 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $p2425 := $load.ref($M.0, $p2424);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $p2426 := $add.ref($add.ref($p2425, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $p2427 := $load.ref($M.0, $p2426);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $i2428 := $load.i32($M.0, $p2427);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $p2430 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $i2431 := $load.i32($M.0, $p2430);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i2432 := $eq.i32($i2428, $i2431);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2432} true;
    goto $bb545, $bb546;

  $bb546:
    assume !($i2432 == 1);
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb547:
    assume {:verifier.code 0} true;
    $p2433 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $p2434 := $load.ref($M.0, $p2433);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $p2435 := $add.ref($add.ref($p2434, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $p2436 := $load.ref($M.0, $p2435);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $i2437 := $load.i32($M.0, $p2436);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $p2439 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i2440 := $load.i32($M.0, $p2439);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i2441 := $eq.i32($i2437, $i2440);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2441} true;
    goto $bb548, $bb549;

  $bb549:
    assume !($i2441 == 1);
    assume {:verifier.code 0} true;
    goto $bb550;

  $bb550:
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb551:
    assume {:verifier.code 0} true;
    $p2442 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p2442, .str.7);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $p2443 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2443, .str.130);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $p2444 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p2444, .str.9);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $p2445 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2445, .str.132);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $p2446 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $p2447 := $bitcast.ref.ref($p2446);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $i2448 := $load.i24($M.7, $p2447);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $i2449 := $and.i24($i2448, $sub.i24(0, 262144));
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i2450 := $or.i24($i2449, 477);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p2447, $i2450);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $p2451 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p2451, 0);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $p2452 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $i2453 := $load.i8($M.8, $p2452);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $i2454 := $zext.i8.i64($i2453);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $i2455 := $and.i64($i2454, 1);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} $i2456 := ldv__builtin_expect($i2455, 0);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $i2457 := $ne.i64($i2456, 0);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2457} true;
    goto $bb552, $bb553;

  $bb553:
    assume !($i2457 == 1);
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb554:
    assume {:verifier.code 0} true;
    $p2461 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $p2462 := $load.ref($M.0, $p2461);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $p2464 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $p2465 := $load.ref($M.0, $p2464);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} hid_hw_request($p2462, $p2465, 1);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $p2466 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $p2467 := $load.ref($M.0, $p2466);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} hid_hw_wait($p2467);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $p2468 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $p2469 := $load.ref($M.0, $p2468);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $p2470 := $add.ref($add.ref($p2469, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $p2471 := $load.ref($M.0, $p2470);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $i2472 := $load.i32($M.0, $p2471);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $p2474 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $i2475 := $load.i32($M.0, $p2474);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $i2476 := $eq.i32($i2472, $i2475);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2476} true;
    goto $bb555, $bb556;

  $bb556:
    assume !($i2476 == 1);
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb557:
    assume {:verifier.code 0} true;
    $p2477 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $p2478 := $load.ref($M.0, $p2477);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $p2479 := $add.ref($add.ref($p2478, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $p2480 := $load.ref($M.0, $p2479);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i2481 := $load.i32($M.0, $p2480);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $p2483 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i2484 := $load.i32($M.0, $p2483);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i2485 := $eq.i32($i2481, $i2484);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2485} true;
    goto $bb558, $bb559;

  $bb559:
    assume !($i2485 == 1);
    assume {:verifier.code 0} true;
    goto $bb560;

  $bb560:
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb561:
    assume {:verifier.code 0} true;
    $p2486 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p2486, .str.7);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $p2487 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2487, .str.130);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $p2488 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p2488, .str.9);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $p2489 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2489, .str.132);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $p2490 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $p2491 := $bitcast.ref.ref($p2490);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $i2492 := $load.i24($M.7, $p2491);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i2493 := $and.i24($i2492, $sub.i24(0, 262144));
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $i2494 := $or.i24($i2493, 477);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p2491, $i2494);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $p2495 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p2495, 0);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $p2496 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i2497 := $load.i8($M.8, $p2496);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $i2498 := $zext.i8.i64($i2497);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i2499 := $and.i64($i2498, 1);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} $i2500 := ldv__builtin_expect($i2499, 0);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i2501 := $ne.i64($i2500, 0);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2501} true;
    goto $bb562, $bb563;

  $bb563:
    assume !($i2501 == 1);
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb564:
    assume {:verifier.code 0} true;
    $p2505 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $p2506 := $load.ref($M.0, $p2505);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $p2508 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $p2509 := $load.ref($M.0, $p2508);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} hid_hw_request($p2506, $p2509, 1);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $p2510 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $p2511 := $load.ref($M.0, $p2510);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} hid_hw_wait($p2511);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $p2512 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $p2513 := $load.ref($M.0, $p2512);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $p2514 := $add.ref($add.ref($p2513, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $p2515 := $load.ref($M.0, $p2514);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $i2516 := $load.i32($M.0, $p2515);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $p2518 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i2519 := $load.i32($M.0, $p2518);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $i2520 := $eq.i32($i2516, $i2519);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2520} true;
    goto $bb565, $bb566;

  $bb566:
    assume !($i2520 == 1);
    assume {:verifier.code 0} true;
    goto $bb567;

  $bb567:
    assume {:verifier.code 0} true;
    $p2521 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $p2522 := $load.ref($M.0, $p2521);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $p2523 := $add.ref($add.ref($p2522, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $p2524 := $load.ref($M.0, $p2523);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i2525 := $load.i32($M.0, $p2524);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $p2527 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i2528 := $load.i32($M.0, $p2527);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i2529 := $eq.i32($i2525, $i2528);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2529} true;
    goto $bb568, $bb569;

  $bb569:
    assume !($i2529 == 1);
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb570:
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb571:
    assume {:verifier.code 0} true;
    $p2530 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p2530, .str.7);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $p2531 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2531, .str.130);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $p2532 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p2532, .str.9);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $p2533 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2533, .str.132);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $p2534 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $p2535 := $bitcast.ref.ref($p2534);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $i2536 := $load.i24($M.7, $p2535);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i2537 := $and.i24($i2536, $sub.i24(0, 262144));
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $i2538 := $or.i24($i2537, 477);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p2535, $i2538);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $p2539 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p2539, 0);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $p2540 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $i2541 := $load.i8($M.8, $p2540);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $i2542 := $zext.i8.i64($i2541);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i2543 := $and.i64($i2542, 1);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $i2544 := ldv__builtin_expect($i2543, 0);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $i2545 := $ne.i64($i2544, 0);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2545} true;
    goto $bb572, $bb573;

  $bb573:
    assume !($i2545 == 1);
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb574:
    assume {:verifier.code 0} true;
    $p2549 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $p2550 := $load.ref($M.0, $p2549);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $p2552 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $p2553 := $load.ref($M.0, $p2552);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} hid_hw_request($p2550, $p2553, 1);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $p2554 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $p2555 := $load.ref($M.0, $p2554);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} hid_hw_wait($p2555);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $p2556 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $p2557 := $load.ref($M.0, $p2556);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $p2558 := $add.ref($add.ref($p2557, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $p2559 := $load.ref($M.0, $p2558);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $i2560 := $load.i32($M.0, $p2559);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $p2562 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $i2563 := $load.i32($M.0, $p2562);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $i2564 := $eq.i32($i2560, $i2563);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2564} true;
    goto $bb575, $bb576;

  $bb576:
    assume !($i2564 == 1);
    assume {:verifier.code 0} true;
    goto $bb577;

  $bb577:
    assume {:verifier.code 0} true;
    $p2565 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $p2566 := $load.ref($M.0, $p2565);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $p2567 := $add.ref($add.ref($p2566, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $p2568 := $load.ref($M.0, $p2567);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i2569 := $load.i32($M.0, $p2568);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $p2571 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i2572 := $load.i32($M.0, $p2571);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $i2573 := $eq.i32($i2569, $i2572);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2573} true;
    goto $bb578, $bb579;

  $bb579:
    assume !($i2573 == 1);
    assume {:verifier.code 0} true;
    goto $bb580;

  $bb580:
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb581:
    assume {:verifier.code 0} true;
    $p2574 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p2574, .str.7);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $p2575 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2575, .str.130);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $p2576 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p2576, .str.9);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $p2577 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2577, .str.132);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $p2578 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $p2579 := $bitcast.ref.ref($p2578);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $i2580 := $load.i24($M.7, $p2579);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $i2581 := $and.i24($i2580, $sub.i24(0, 262144));
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i2582 := $or.i24($i2581, 477);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p2579, $i2582);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $p2583 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p2583, 0);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $p2584 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $i2585 := $load.i8($M.8, $p2584);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i2586 := $zext.i8.i64($i2585);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i2587 := $and.i64($i2586, 1);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} $i2588 := ldv__builtin_expect($i2587, 0);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i2589 := $ne.i64($i2588, 0);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2589} true;
    goto $bb582, $bb583;

  $bb583:
    assume !($i2589 == 1);
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb584:
    assume {:verifier.code 0} true;
    $p2593 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $p2594 := $load.ref($M.0, $p2593);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $p2596 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $p2597 := $load.ref($M.0, $p2596);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} hid_hw_request($p2594, $p2597, 1);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $p2598 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $p2599 := $load.ref($M.0, $p2598);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} hid_hw_wait($p2599);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $p2600 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $p2601 := $load.ref($M.0, $p2600);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $p2602 := $add.ref($add.ref($p2601, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $p2603 := $load.ref($M.0, $p2602);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $i2604 := $load.i32($M.0, $p2603);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $p2606 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i2607 := $load.i32($M.0, $p2606);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i2608 := $eq.i32($i2604, $i2607);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2608} true;
    goto $bb585, $bb586;

  $bb586:
    assume !($i2608 == 1);
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    $p2609 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $p2610 := $load.ref($M.0, $p2609);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $p2611 := $add.ref($add.ref($p2610, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $p2612 := $load.ref($M.0, $p2611);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $i2613 := $load.i32($M.0, $p2612);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $p2615 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i2616 := $load.i32($M.0, $p2615);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i2617 := $eq.i32($i2613, $i2616);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2617} true;
    goto $bb588, $bb589;

  $bb589:
    assume !($i2617 == 1);
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb591:
    assume {:verifier.code 0} true;
    $p2618 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p2618, .str.7);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $p2619 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2619, .str.130);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $p2620 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p2620, .str.9);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $p2621 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2621, .str.132);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $p2622 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $p2623 := $bitcast.ref.ref($p2622);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $i2624 := $load.i24($M.7, $p2623);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $i2625 := $and.i24($i2624, $sub.i24(0, 262144));
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $i2626 := $or.i24($i2625, 477);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p2623, $i2626);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $p2627 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p2627, 0);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $p2628 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $i2629 := $load.i8($M.8, $p2628);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $i2630 := $zext.i8.i64($i2629);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $i2631 := $and.i64($i2630, 1);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} $i2632 := ldv__builtin_expect($i2631, 0);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i2633 := $ne.i64($i2632, 0);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2633} true;
    goto $bb592, $bb593;

  $bb593:
    assume !($i2633 == 1);
    assume {:verifier.code 0} true;
    goto $bb594;

  $bb594:
    assume {:verifier.code 0} true;
    $p2637 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $p2638 := $load.ref($M.0, $p2637);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $p2640 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $p2641 := $load.ref($M.0, $p2640);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} hid_hw_request($p2638, $p2641, 1);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $p2642 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $p2643 := $load.ref($M.0, $p2642);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} hid_hw_wait($p2643);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $p2644 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $p2645 := $load.ref($M.0, $p2644);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $p2646 := $add.ref($add.ref($p2645, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $p2647 := $load.ref($M.0, $p2646);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $i2648 := $load.i32($M.0, $p2647);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $p2650 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $i2651 := $load.i32($M.0, $p2650);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i2652 := $eq.i32($i2648, $i2651);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2652} true;
    goto $bb595, $bb596;

  $bb596:
    assume !($i2652 == 1);
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb597:
    assume {:verifier.code 0} true;
    $p2653 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $p2654 := $load.ref($M.0, $p2653);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $p2655 := $add.ref($add.ref($p2654, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $p2656 := $load.ref($M.0, $p2655);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i2657 := $load.i32($M.0, $p2656);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $p2659 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $i2660 := $load.i32($M.0, $p2659);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $i2661 := $eq.i32($i2657, $i2660);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2661} true;
    goto $bb598, $bb599;

  $bb599:
    assume !($i2661 == 1);
    assume {:verifier.code 0} true;
    goto $bb600;

  $bb600:
    assume {:verifier.code 0} true;
    goto $bb601;

  $bb601:
    assume {:verifier.code 0} true;
    $p2662 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p2662, .str.7);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $p2663 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2663, .str.130);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $p2664 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p2664, .str.9);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $p2665 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2665, .str.132);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $p2666 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $p2667 := $bitcast.ref.ref($p2666);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $i2668 := $load.i24($M.7, $p2667);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i2669 := $and.i24($i2668, $sub.i24(0, 262144));
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i2670 := $or.i24($i2669, 477);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p2667, $i2670);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $p2671 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p2671, 0);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $p2672 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i2673 := $load.i8($M.8, $p2672);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $i2674 := $zext.i8.i64($i2673);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i2675 := $and.i64($i2674, 1);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} $i2676 := ldv__builtin_expect($i2675, 0);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i2677 := $ne.i64($i2676, 0);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2677} true;
    goto $bb602, $bb603;

  $bb603:
    assume !($i2677 == 1);
    assume {:verifier.code 0} true;
    goto $bb604;

  $bb604:
    assume {:verifier.code 0} true;
    $p2681 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $p2682 := $load.ref($M.0, $p2681);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $p2684 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $p2685 := $load.ref($M.0, $p2684);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} hid_hw_request($p2682, $p2685, 1);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $p2686 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $p2687 := $load.ref($M.0, $p2686);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} hid_hw_wait($p2687);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $p2688 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $p2689 := $load.ref($M.0, $p2688);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $p2690 := $add.ref($add.ref($p2689, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $p2691 := $load.ref($M.0, $p2690);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i2692 := $load.i32($M.0, $p2691);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $p2694 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $i2695 := $load.i32($M.0, $p2694);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i2696 := $eq.i32($i2692, $i2695);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2696} true;
    goto $bb605, $bb606;

  $bb606:
    assume !($i2696 == 1);
    assume {:verifier.code 0} true;
    goto $bb607;

  $bb607:
    assume {:verifier.code 0} true;
    $p2697 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $p2698 := $load.ref($M.0, $p2697);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $p2699 := $add.ref($add.ref($p2698, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $p2700 := $load.ref($M.0, $p2699);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $i2701 := $load.i32($M.0, $p2700);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $p2703 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i2704 := $load.i32($M.0, $p2703);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i2705 := $eq.i32($i2701, $i2704);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2705} true;
    goto $bb608, $bb609;

  $bb609:
    assume !($i2705 == 1);
    assume {:verifier.code 0} true;
    goto $bb610;

  $bb610:
    assume {:verifier.code 0} true;
    goto $bb611;

  $bb611:
    assume {:verifier.code 0} true;
    $p2706 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p2706, .str.7);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $p2707 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2707, .str.130);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $p2708 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p2708, .str.9);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $p2709 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2709, .str.132);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $p2710 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $p2711 := $bitcast.ref.ref($p2710);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $i2712 := $load.i24($M.7, $p2711);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $i2713 := $and.i24($i2712, $sub.i24(0, 262144));
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i2714 := $or.i24($i2713, 477);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p2711, $i2714);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $p2715 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p2715, 0);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $p2716 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $i2717 := $load.i8($M.8, $p2716);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i2718 := $zext.i8.i64($i2717);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i2719 := $and.i64($i2718, 1);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} $i2720 := ldv__builtin_expect($i2719, 0);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i2721 := $ne.i64($i2720, 0);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2721} true;
    goto $bb612, $bb613;

  $bb613:
    assume !($i2721 == 1);
    assume {:verifier.code 0} true;
    goto $bb614;

  $bb614:
    assume {:verifier.code 0} true;
    $p2725 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $p2726 := $load.ref($M.0, $p2725);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $p2728 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $p2729 := $load.ref($M.0, $p2728);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} hid_hw_request($p2726, $p2729, 1);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $p2730 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $p2731 := $load.ref($M.0, $p2730);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} hid_hw_wait($p2731);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $p2732 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $p2733 := $load.ref($M.0, $p2732);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $p2734 := $add.ref($add.ref($p2733, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $p2735 := $load.ref($M.0, $p2734);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $i2736 := $load.i32($M.0, $p2735);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $p2738 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(0, 4));
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $i2739 := $load.i32($M.0, $p2738);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i2740 := $eq.i32($i2736, $i2739);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2740} true;
    goto $bb615, $bb616;

  $bb616:
    assume !($i2740 == 1);
    assume {:verifier.code 0} true;
    goto $bb617;

  $bb617:
    assume {:verifier.code 0} true;
    $p2741 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $p2742 := $load.ref($M.0, $p2741);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $p2743 := $add.ref($add.ref($p2742, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $p2744 := $load.ref($M.0, $p2743);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $i2745 := $load.i32($M.0, $p2744);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $p2747 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1)), $mul.ref(1, 4));
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $i2748 := $load.i32($M.0, $p2747);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i2749 := $eq.i32($i2745, $i2748);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2749} true;
    goto $bb618, $bb619;

  $bb619:
    assume !($i2749 == 1);
    assume {:verifier.code 0} true;
    goto $bb620;

  $bb620:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.0, $p151);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p152, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} dev_err.ref.ref($p153, .str.135);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i110 := $sub.i32(0, 5);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $r := $i110;
    return;

  $bb618:
    assume {:verifier.code 0} true;
    assume $i2749 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p120, .str.7);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p121, .str.130);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p122, .str.9);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p123, .str.134);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i126 := $load.i24($M.7, $p125);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i127 := $and.i24($i126, $sub.i24(0, 262144));
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i128 := $or.i24($i127, 492);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p125, $i128);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p129, 0);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.8, $p130);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i64($i131);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i133 := $and.i64($i132, 1);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $i134 := ldv__builtin_expect($i133, 0);
    call {:si_unique_call 790} {:cexpr "tmp___2"} boogie_si_record_i64($i134);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i135 := $ne.i64($i134, 0);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i110 := $sub.i32(0, 28);
    goto $bb18;

  $bb23:
    assume $i135 == 1;
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(608, 1)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.0, $p141);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i143 := $p2i.ref.i64($p142);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i144 := $ne.i64($i143, 0);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i144 == 1);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i150 := $sub.i32(0, 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} __dynamic_dev_dbg.ref.ref.ref.i32($p5, $p138, .str.134, $i150);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i144 == 1;
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(608, 1)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.0, $p147);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.0, $p148);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i150 := $i149;
    goto $bb27;

  $bb615:
    assume {:verifier.code 0} true;
    assume $i2740 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p79, .str.7);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p80, .str.130);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p81, .str.9);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p82, .str.133);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i85 := $load.i24($M.7, $p84);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i86 := $and.i24($i85, $sub.i24(0, 262144));
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i87 := $or.i24($i86, 485);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p84, $i87);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p88, 0);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.8, $p89);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i64($i90);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i92 := $and.i64($i91, 1);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $i93 := ldv__builtin_expect($i92, 0);
    call {:si_unique_call 787} {:cexpr "tmp___1"} boogie_si_record_i64($i93);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i110 := 0;
    goto $bb18;

  $bb12:
    assume $i94 == 1;
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(608, 1)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p101);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i103 := $ne.i64($i102, 0);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i103 == 1);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i109 := $sub.i32(0, 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} __dynamic_dev_dbg.ref.ref.ref.i32($p4, $p97, .str.133, $i109);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i103 == 1;
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(608, 1)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i109 := $i108;
    goto $bb16;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb612:
    assume $i2721 == 1;
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $p2722 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $p2723 := $load.ref($M.0, $p2722);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $p2724 := $add.ref($add.ref($p2723, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} __dynamic_dev_dbg.ref.ref.ref($p3, $p2724, .str.132);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    goto $bb614;

  $bb608:
    assume {:verifier.code 0} true;
    assume $i2705 == 1;
    goto $bb21;

  $bb605:
    assume {:verifier.code 0} true;
    assume $i2696 == 1;
    goto $bb10;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb602:
    assume $i2677 == 1;
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $p2678 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $p2679 := $load.ref($M.0, $p2678);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $p2680 := $add.ref($add.ref($p2679, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} __dynamic_dev_dbg.ref.ref.ref($p3, $p2680, .str.132);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    goto $bb604;

  $bb598:
    assume {:verifier.code 0} true;
    assume $i2661 == 1;
    goto $bb21;

  $bb595:
    assume {:verifier.code 0} true;
    assume $i2652 == 1;
    goto $bb10;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb592:
    assume $i2633 == 1;
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $p2634 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $p2635 := $load.ref($M.0, $p2634);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $p2636 := $add.ref($add.ref($p2635, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} __dynamic_dev_dbg.ref.ref.ref($p3, $p2636, .str.132);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    goto $bb594;

  $bb588:
    assume {:verifier.code 0} true;
    assume $i2617 == 1;
    goto $bb21;

  $bb585:
    assume {:verifier.code 0} true;
    assume $i2608 == 1;
    goto $bb10;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb582:
    assume $i2589 == 1;
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $p2590 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $p2591 := $load.ref($M.0, $p2590);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $p2592 := $add.ref($add.ref($p2591, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} __dynamic_dev_dbg.ref.ref.ref($p3, $p2592, .str.132);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb578:
    assume {:verifier.code 0} true;
    assume $i2573 == 1;
    goto $bb21;

  $bb575:
    assume {:verifier.code 0} true;
    assume $i2564 == 1;
    goto $bb10;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb572:
    assume $i2545 == 1;
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $p2546 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $p2547 := $load.ref($M.0, $p2546);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $p2548 := $add.ref($add.ref($p2547, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} __dynamic_dev_dbg.ref.ref.ref($p3, $p2548, .str.132);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb568:
    assume {:verifier.code 0} true;
    assume $i2529 == 1;
    goto $bb21;

  $bb565:
    assume {:verifier.code 0} true;
    assume $i2520 == 1;
    goto $bb10;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb562:
    assume $i2501 == 1;
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $p2502 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $p2503 := $load.ref($M.0, $p2502);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $p2504 := $add.ref($add.ref($p2503, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} __dynamic_dev_dbg.ref.ref.ref($p3, $p2504, .str.132);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb558:
    assume {:verifier.code 0} true;
    assume $i2485 == 1;
    goto $bb21;

  $bb555:
    assume {:verifier.code 0} true;
    assume $i2476 == 1;
    goto $bb10;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb552:
    assume $i2457 == 1;
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $p2458 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $p2459 := $load.ref($M.0, $p2458);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $p2460 := $add.ref($add.ref($p2459, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} __dynamic_dev_dbg.ref.ref.ref($p3, $p2460, .str.132);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb548:
    assume {:verifier.code 0} true;
    assume $i2441 == 1;
    goto $bb21;

  $bb545:
    assume {:verifier.code 0} true;
    assume $i2432 == 1;
    goto $bb10;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb542:
    assume $i2413 == 1;
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $p2414 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $p2415 := $load.ref($M.0, $p2414);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $p2416 := $add.ref($add.ref($p2415, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} __dynamic_dev_dbg.ref.ref.ref($p3, $p2416, .str.132);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    goto $bb544;

  $bb538:
    assume {:verifier.code 0} true;
    assume $i2397 == 1;
    goto $bb21;

  $bb535:
    assume {:verifier.code 0} true;
    assume $i2388 == 1;
    goto $bb10;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb532:
    assume $i2369 == 1;
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $p2370 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $p2371 := $load.ref($M.0, $p2370);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $p2372 := $add.ref($add.ref($p2371, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} __dynamic_dev_dbg.ref.ref.ref($p3, $p2372, .str.132);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    goto $bb534;

  $bb528:
    assume {:verifier.code 0} true;
    assume $i2353 == 1;
    goto $bb21;

  $bb525:
    assume {:verifier.code 0} true;
    assume $i2344 == 1;
    goto $bb10;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb522:
    assume $i2325 == 1;
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $p2326 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $p2327 := $load.ref($M.0, $p2326);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $p2328 := $add.ref($add.ref($p2327, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} __dynamic_dev_dbg.ref.ref.ref($p3, $p2328, .str.132);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb518:
    assume {:verifier.code 0} true;
    assume $i2309 == 1;
    goto $bb21;

  $bb515:
    assume {:verifier.code 0} true;
    assume $i2300 == 1;
    goto $bb10;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb512:
    assume $i2281 == 1;
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $p2282 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $p2283 := $load.ref($M.0, $p2282);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $p2284 := $add.ref($add.ref($p2283, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} __dynamic_dev_dbg.ref.ref.ref($p3, $p2284, .str.132);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb508:
    assume {:verifier.code 0} true;
    assume $i2265 == 1;
    goto $bb21;

  $bb505:
    assume {:verifier.code 0} true;
    assume $i2256 == 1;
    goto $bb10;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb502:
    assume $i2237 == 1;
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $p2238 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $p2239 := $load.ref($M.0, $p2238);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $p2240 := $add.ref($add.ref($p2239, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} __dynamic_dev_dbg.ref.ref.ref($p3, $p2240, .str.132);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb498:
    assume {:verifier.code 0} true;
    assume $i2221 == 1;
    goto $bb21;

  $bb495:
    assume {:verifier.code 0} true;
    assume $i2212 == 1;
    goto $bb10;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb492:
    assume $i2193 == 1;
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $p2194 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $p2195 := $load.ref($M.0, $p2194);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $p2196 := $add.ref($add.ref($p2195, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} __dynamic_dev_dbg.ref.ref.ref($p3, $p2196, .str.132);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb488:
    assume {:verifier.code 0} true;
    assume $i2177 == 1;
    goto $bb21;

  $bb485:
    assume {:verifier.code 0} true;
    assume $i2168 == 1;
    goto $bb10;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb482:
    assume $i2149 == 1;
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $p2150 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $p2151 := $load.ref($M.0, $p2150);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $p2152 := $add.ref($add.ref($p2151, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} __dynamic_dev_dbg.ref.ref.ref($p3, $p2152, .str.132);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb478:
    assume {:verifier.code 0} true;
    assume $i2133 == 1;
    goto $bb21;

  $bb475:
    assume {:verifier.code 0} true;
    assume $i2124 == 1;
    goto $bb10;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb472:
    assume $i2105 == 1;
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $p2106 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $p2107 := $load.ref($M.0, $p2106);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $p2108 := $add.ref($add.ref($p2107, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} __dynamic_dev_dbg.ref.ref.ref($p3, $p2108, .str.132);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb468:
    assume {:verifier.code 0} true;
    assume $i2089 == 1;
    goto $bb21;

  $bb465:
    assume {:verifier.code 0} true;
    assume $i2080 == 1;
    goto $bb10;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb462:
    assume $i2061 == 1;
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $p2062 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $p2063 := $load.ref($M.0, $p2062);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $p2064 := $add.ref($add.ref($p2063, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} __dynamic_dev_dbg.ref.ref.ref($p3, $p2064, .str.132);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb458:
    assume {:verifier.code 0} true;
    assume $i2045 == 1;
    goto $bb21;

  $bb455:
    assume {:verifier.code 0} true;
    assume $i2036 == 1;
    goto $bb10;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb452:
    assume $i2017 == 1;
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $p2018 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $p2019 := $load.ref($M.0, $p2018);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $p2020 := $add.ref($add.ref($p2019, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} __dynamic_dev_dbg.ref.ref.ref($p3, $p2020, .str.132);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb448:
    assume {:verifier.code 0} true;
    assume $i2001 == 1;
    goto $bb21;

  $bb445:
    assume {:verifier.code 0} true;
    assume $i1992 == 1;
    goto $bb10;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb442:
    assume $i1973 == 1;
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $p1974 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $p1975 := $load.ref($M.0, $p1974);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $p1976 := $add.ref($add.ref($p1975, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} __dynamic_dev_dbg.ref.ref.ref($p3, $p1976, .str.132);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb438:
    assume {:verifier.code 0} true;
    assume $i1957 == 1;
    goto $bb21;

  $bb435:
    assume {:verifier.code 0} true;
    assume $i1948 == 1;
    goto $bb10;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb432:
    assume $i1929 == 1;
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $p1930 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $p1931 := $load.ref($M.0, $p1930);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $p1932 := $add.ref($add.ref($p1931, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} __dynamic_dev_dbg.ref.ref.ref($p3, $p1932, .str.132);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb428:
    assume {:verifier.code 0} true;
    assume $i1913 == 1;
    goto $bb21;

  $bb425:
    assume {:verifier.code 0} true;
    assume $i1904 == 1;
    goto $bb10;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb422:
    assume $i1885 == 1;
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $p1886 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $p1887 := $load.ref($M.0, $p1886);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $p1888 := $add.ref($add.ref($p1887, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} __dynamic_dev_dbg.ref.ref.ref($p3, $p1888, .str.132);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb418:
    assume {:verifier.code 0} true;
    assume $i1869 == 1;
    goto $bb21;

  $bb415:
    assume {:verifier.code 0} true;
    assume $i1860 == 1;
    goto $bb10;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb412:
    assume $i1841 == 1;
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $p1842 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $p1843 := $load.ref($M.0, $p1842);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $p1844 := $add.ref($add.ref($p1843, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} __dynamic_dev_dbg.ref.ref.ref($p3, $p1844, .str.132);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb408:
    assume {:verifier.code 0} true;
    assume $i1825 == 1;
    goto $bb21;

  $bb405:
    assume {:verifier.code 0} true;
    assume $i1816 == 1;
    goto $bb10;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb402:
    assume $i1797 == 1;
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $p1798 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $p1799 := $load.ref($M.0, $p1798);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p1800 := $add.ref($add.ref($p1799, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} __dynamic_dev_dbg.ref.ref.ref($p3, $p1800, .str.132);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb398:
    assume {:verifier.code 0} true;
    assume $i1781 == 1;
    goto $bb21;

  $bb395:
    assume {:verifier.code 0} true;
    assume $i1772 == 1;
    goto $bb10;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb392:
    assume $i1753 == 1;
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $p1754 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $p1755 := $load.ref($M.0, $p1754);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $p1756 := $add.ref($add.ref($p1755, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} __dynamic_dev_dbg.ref.ref.ref($p3, $p1756, .str.132);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb388:
    assume {:verifier.code 0} true;
    assume $i1737 == 1;
    goto $bb21;

  $bb385:
    assume {:verifier.code 0} true;
    assume $i1728 == 1;
    goto $bb10;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb382:
    assume $i1709 == 1;
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $p1710 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $p1711 := $load.ref($M.0, $p1710);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $p1712 := $add.ref($add.ref($p1711, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} __dynamic_dev_dbg.ref.ref.ref($p3, $p1712, .str.132);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb378:
    assume {:verifier.code 0} true;
    assume $i1693 == 1;
    goto $bb21;

  $bb375:
    assume {:verifier.code 0} true;
    assume $i1684 == 1;
    goto $bb10;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb372:
    assume $i1665 == 1;
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $p1666 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $p1667 := $load.ref($M.0, $p1666);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $p1668 := $add.ref($add.ref($p1667, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} __dynamic_dev_dbg.ref.ref.ref($p3, $p1668, .str.132);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb368:
    assume {:verifier.code 0} true;
    assume $i1649 == 1;
    goto $bb21;

  $bb365:
    assume {:verifier.code 0} true;
    assume $i1640 == 1;
    goto $bb10;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb362:
    assume $i1621 == 1;
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $p1622 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p1623 := $load.ref($M.0, $p1622);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p1624 := $add.ref($add.ref($p1623, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} __dynamic_dev_dbg.ref.ref.ref($p3, $p1624, .str.132);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb358:
    assume {:verifier.code 0} true;
    assume $i1605 == 1;
    goto $bb21;

  $bb355:
    assume {:verifier.code 0} true;
    assume $i1596 == 1;
    goto $bb10;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb352:
    assume $i1577 == 1;
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $p1578 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $p1579 := $load.ref($M.0, $p1578);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p1580 := $add.ref($add.ref($p1579, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} __dynamic_dev_dbg.ref.ref.ref($p3, $p1580, .str.132);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb348:
    assume {:verifier.code 0} true;
    assume $i1561 == 1;
    goto $bb21;

  $bb345:
    assume {:verifier.code 0} true;
    assume $i1552 == 1;
    goto $bb10;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb342:
    assume $i1533 == 1;
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $p1534 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $p1535 := $load.ref($M.0, $p1534);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $p1536 := $add.ref($add.ref($p1535, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} __dynamic_dev_dbg.ref.ref.ref($p3, $p1536, .str.132);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb338:
    assume {:verifier.code 0} true;
    assume $i1517 == 1;
    goto $bb21;

  $bb335:
    assume {:verifier.code 0} true;
    assume $i1508 == 1;
    goto $bb10;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb332:
    assume $i1489 == 1;
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $p1490 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $p1491 := $load.ref($M.0, $p1490);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $p1492 := $add.ref($add.ref($p1491, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} __dynamic_dev_dbg.ref.ref.ref($p3, $p1492, .str.132);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb328:
    assume {:verifier.code 0} true;
    assume $i1473 == 1;
    goto $bb21;

  $bb325:
    assume {:verifier.code 0} true;
    assume $i1464 == 1;
    goto $bb10;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb322:
    assume $i1445 == 1;
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $p1446 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $p1447 := $load.ref($M.0, $p1446);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $p1448 := $add.ref($add.ref($p1447, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} __dynamic_dev_dbg.ref.ref.ref($p3, $p1448, .str.132);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb318:
    assume {:verifier.code 0} true;
    assume $i1429 == 1;
    goto $bb21;

  $bb315:
    assume {:verifier.code 0} true;
    assume $i1420 == 1;
    goto $bb10;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb312:
    assume $i1401 == 1;
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $p1402 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $p1403 := $load.ref($M.0, $p1402);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $p1404 := $add.ref($add.ref($p1403, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} __dynamic_dev_dbg.ref.ref.ref($p3, $p1404, .str.132);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb308:
    assume {:verifier.code 0} true;
    assume $i1385 == 1;
    goto $bb21;

  $bb305:
    assume {:verifier.code 0} true;
    assume $i1376 == 1;
    goto $bb10;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb302:
    assume $i1357 == 1;
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $p1358 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p1359 := $load.ref($M.0, $p1358);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $p1360 := $add.ref($add.ref($p1359, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} __dynamic_dev_dbg.ref.ref.ref($p3, $p1360, .str.132);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb298:
    assume {:verifier.code 0} true;
    assume $i1341 == 1;
    goto $bb21;

  $bb295:
    assume {:verifier.code 0} true;
    assume $i1332 == 1;
    goto $bb10;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb292:
    assume $i1313 == 1;
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $p1314 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p1315 := $load.ref($M.0, $p1314);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $p1316 := $add.ref($add.ref($p1315, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} __dynamic_dev_dbg.ref.ref.ref($p3, $p1316, .str.132);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb288:
    assume {:verifier.code 0} true;
    assume $i1297 == 1;
    goto $bb21;

  $bb285:
    assume {:verifier.code 0} true;
    assume $i1288 == 1;
    goto $bb10;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb282:
    assume $i1269 == 1;
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $p1270 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $p1271 := $load.ref($M.0, $p1270);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $p1272 := $add.ref($add.ref($p1271, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} __dynamic_dev_dbg.ref.ref.ref($p3, $p1272, .str.132);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb278:
    assume {:verifier.code 0} true;
    assume $i1253 == 1;
    goto $bb21;

  $bb275:
    assume {:verifier.code 0} true;
    assume $i1244 == 1;
    goto $bb10;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb272:
    assume $i1225 == 1;
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $p1226 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $p1227 := $load.ref($M.0, $p1226);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p1228 := $add.ref($add.ref($p1227, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} __dynamic_dev_dbg.ref.ref.ref($p3, $p1228, .str.132);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb268:
    assume {:verifier.code 0} true;
    assume $i1209 == 1;
    goto $bb21;

  $bb265:
    assume {:verifier.code 0} true;
    assume $i1200 == 1;
    goto $bb10;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb262:
    assume $i1181 == 1;
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $p1182 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p1183 := $load.ref($M.0, $p1182);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $p1184 := $add.ref($add.ref($p1183, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} __dynamic_dev_dbg.ref.ref.ref($p3, $p1184, .str.132);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb258:
    assume {:verifier.code 0} true;
    assume $i1165 == 1;
    goto $bb21;

  $bb255:
    assume {:verifier.code 0} true;
    assume $i1156 == 1;
    goto $bb10;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb252:
    assume $i1137 == 1;
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $p1138 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $p1139 := $load.ref($M.0, $p1138);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $p1140 := $add.ref($add.ref($p1139, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} __dynamic_dev_dbg.ref.ref.ref($p3, $p1140, .str.132);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb248:
    assume {:verifier.code 0} true;
    assume $i1121 == 1;
    goto $bb21;

  $bb245:
    assume {:verifier.code 0} true;
    assume $i1112 == 1;
    goto $bb10;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb242:
    assume $i1093 == 1;
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p1094 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $p1095 := $load.ref($M.0, $p1094);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $p1096 := $add.ref($add.ref($p1095, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} __dynamic_dev_dbg.ref.ref.ref($p3, $p1096, .str.132);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb238:
    assume {:verifier.code 0} true;
    assume $i1077 == 1;
    goto $bb21;

  $bb235:
    assume {:verifier.code 0} true;
    assume $i1068 == 1;
    goto $bb10;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb232:
    assume $i1049 == 1;
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p1050 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $p1051 := $load.ref($M.0, $p1050);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $p1052 := $add.ref($add.ref($p1051, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} __dynamic_dev_dbg.ref.ref.ref($p3, $p1052, .str.132);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb228:
    assume {:verifier.code 0} true;
    assume $i1033 == 1;
    goto $bb21;

  $bb225:
    assume {:verifier.code 0} true;
    assume $i1024 == 1;
    goto $bb10;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb222:
    assume $i1005 == 1;
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p1006 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $p1007 := $load.ref($M.0, $p1006);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p1008 := $add.ref($add.ref($p1007, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} __dynamic_dev_dbg.ref.ref.ref($p3, $p1008, .str.132);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb218:
    assume {:verifier.code 0} true;
    assume $i989 == 1;
    goto $bb21;

  $bb215:
    assume {:verifier.code 0} true;
    assume $i980 == 1;
    goto $bb10;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb212:
    assume $i961 == 1;
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $p962 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p963 := $load.ref($M.0, $p962);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $p964 := $add.ref($add.ref($p963, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} __dynamic_dev_dbg.ref.ref.ref($p3, $p964, .str.132);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb208:
    assume {:verifier.code 0} true;
    assume $i945 == 1;
    goto $bb21;

  $bb205:
    assume {:verifier.code 0} true;
    assume $i936 == 1;
    goto $bb10;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb202:
    assume $i917 == 1;
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $p918 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $p919 := $load.ref($M.0, $p918);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $p920 := $add.ref($add.ref($p919, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} __dynamic_dev_dbg.ref.ref.ref($p3, $p920, .str.132);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb198:
    assume {:verifier.code 0} true;
    assume $i901 == 1;
    goto $bb21;

  $bb195:
    assume {:verifier.code 0} true;
    assume $i892 == 1;
    goto $bb10;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb192:
    assume $i873 == 1;
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $p874 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $p875 := $load.ref($M.0, $p874);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $p876 := $add.ref($add.ref($p875, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} __dynamic_dev_dbg.ref.ref.ref($p3, $p876, .str.132);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb188:
    assume {:verifier.code 0} true;
    assume $i857 == 1;
    goto $bb21;

  $bb185:
    assume {:verifier.code 0} true;
    assume $i848 == 1;
    goto $bb10;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb182:
    assume $i829 == 1;
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $p830 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $p831 := $load.ref($M.0, $p830);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p832 := $add.ref($add.ref($p831, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} __dynamic_dev_dbg.ref.ref.ref($p3, $p832, .str.132);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb178:
    assume {:verifier.code 0} true;
    assume $i813 == 1;
    goto $bb21;

  $bb175:
    assume {:verifier.code 0} true;
    assume $i804 == 1;
    goto $bb10;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb172:
    assume $i785 == 1;
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $p786 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p787 := $load.ref($M.0, $p786);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $p788 := $add.ref($add.ref($p787, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} __dynamic_dev_dbg.ref.ref.ref($p3, $p788, .str.132);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb168:
    assume {:verifier.code 0} true;
    assume $i769 == 1;
    goto $bb21;

  $bb165:
    assume {:verifier.code 0} true;
    assume $i760 == 1;
    goto $bb10;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb162:
    assume $i741 == 1;
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p742 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $p743 := $load.ref($M.0, $p742);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p744 := $add.ref($add.ref($p743, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} __dynamic_dev_dbg.ref.ref.ref($p3, $p744, .str.132);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb158:
    assume {:verifier.code 0} true;
    assume $i725 == 1;
    goto $bb21;

  $bb155:
    assume {:verifier.code 0} true;
    assume $i716 == 1;
    goto $bb10;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb152:
    assume $i697 == 1;
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $p698 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $p699 := $load.ref($M.0, $p698);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $p700 := $add.ref($add.ref($p699, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} __dynamic_dev_dbg.ref.ref.ref($p3, $p700, .str.132);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb148:
    assume {:verifier.code 0} true;
    assume $i681 == 1;
    goto $bb21;

  $bb145:
    assume {:verifier.code 0} true;
    assume $i672 == 1;
    goto $bb10;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb142:
    assume $i653 == 1;
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $p654 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p655 := $load.ref($M.0, $p654);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $p656 := $add.ref($add.ref($p655, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} __dynamic_dev_dbg.ref.ref.ref($p3, $p656, .str.132);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb138:
    assume {:verifier.code 0} true;
    assume $i637 == 1;
    goto $bb21;

  $bb135:
    assume {:verifier.code 0} true;
    assume $i628 == 1;
    goto $bb10;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb132:
    assume $i609 == 1;
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $p610 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $p611 := $load.ref($M.0, $p610);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $p612 := $add.ref($add.ref($p611, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} __dynamic_dev_dbg.ref.ref.ref($p3, $p612, .str.132);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb128:
    assume {:verifier.code 0} true;
    assume $i593 == 1;
    goto $bb21;

  $bb125:
    assume {:verifier.code 0} true;
    assume $i584 == 1;
    goto $bb10;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb122:
    assume $i565 == 1;
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $p566 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p567 := $load.ref($M.0, $p566);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p568 := $add.ref($add.ref($p567, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} __dynamic_dev_dbg.ref.ref.ref($p3, $p568, .str.132);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb118:
    assume {:verifier.code 0} true;
    assume $i549 == 1;
    goto $bb21;

  $bb115:
    assume {:verifier.code 0} true;
    assume $i540 == 1;
    goto $bb10;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb112:
    assume $i521 == 1;
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $p523 := $load.ref($M.0, $p522);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p524 := $add.ref($add.ref($p523, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} __dynamic_dev_dbg.ref.ref.ref($p3, $p524, .str.132);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb108:
    assume {:verifier.code 0} true;
    assume $i505 == 1;
    goto $bb21;

  $bb105:
    assume {:verifier.code 0} true;
    assume $i496 == 1;
    goto $bb10;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb102:
    assume $i477 == 1;
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $p478 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p479 := $load.ref($M.0, $p478);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($add.ref($p479, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} __dynamic_dev_dbg.ref.ref.ref($p3, $p480, .str.132);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb98:
    assume {:verifier.code 0} true;
    assume $i461 == 1;
    goto $bb21;

  $bb95:
    assume {:verifier.code 0} true;
    assume $i452 == 1;
    goto $bb10;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb92:
    assume $i433 == 1;
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p435 := $load.ref($M.0, $p434);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($p435, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} __dynamic_dev_dbg.ref.ref.ref($p3, $p436, .str.132);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb88:
    assume {:verifier.code 0} true;
    assume $i417 == 1;
    goto $bb21;

  $bb85:
    assume {:verifier.code 0} true;
    assume $i408 == 1;
    goto $bb10;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb82:
    assume $i389 == 1;
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p391 := $load.ref($M.0, $p390);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p391, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} __dynamic_dev_dbg.ref.ref.ref($p3, $p392, .str.132);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i373 == 1;
    goto $bb21;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i364 == 1;
    goto $bb10;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb72:
    assume $i345 == 1;
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.0, $p346);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p347, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} __dynamic_dev_dbg.ref.ref.ref($p3, $p348, .str.132);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i329 == 1;
    goto $bb21;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i320 == 1;
    goto $bb10;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb62:
    assume $i301 == 1;
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p303 := $load.ref($M.0, $p302);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p303, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} __dynamic_dev_dbg.ref.ref.ref($p3, $p304, .str.132);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i285 == 1;
    goto $bb21;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i276 == 1;
    goto $bb10;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i257 == 1;
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $p259 := $load.ref($M.0, $p258);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p259, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} __dynamic_dev_dbg.ref.ref.ref($p3, $p260, .str.132);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i241 == 1;
    goto $bb21;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i232 == 1;
    goto $bb10;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i213 == 1;
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p215 := $load.ref($M.0, $p214);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p215, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} __dynamic_dev_dbg.ref.ref.ref($p3, $p216, .str.132);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i197 == 1;
    goto $bb21;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i188 == 1;
    goto $bb10;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i169 == 1;
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.0, $p170);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p171, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} __dynamic_dev_dbg.ref.ref.ref($p3, $p172, .str.132);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i119 == 1;
    goto $bb21;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb10;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i59 == 1;
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} __dynamic_dev_dbg.ref.ref.ref($p3, $p62, .str.132);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i30 == 1;
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} __dynamic_dev_dbg.ref.ref.ref.i32($p2, $p33, .str.131, $i1);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pidff_set_effect_report: ref;

axiom pidff_set_effect_report == $sub.ref(0, 407895);

procedure pidff_set_effect_report($p0: ref, $p1: ref);



const pidff_needs_set_effect: ref;

axiom pidff_needs_set_effect == $sub.ref(0, 408927);

procedure pidff_needs_set_effect($p0: ref, $p1: ref) returns ($r: i32);



const pidff_set_constant_force_report: ref;

axiom pidff_set_constant_force_report == $sub.ref(0, 409959);

procedure pidff_set_constant_force_report($p0: ref, $p1: ref);



const pidff_needs_set_constant: ref;

axiom pidff_needs_set_constant == $sub.ref(0, 410991);

procedure pidff_needs_set_constant($p0: ref, $p1: ref) returns ($r: i32);



const pidff_set_envelope_report: ref;

axiom pidff_set_envelope_report == $sub.ref(0, 412023);

procedure pidff_set_envelope_report($p0: ref, $p1: ref);



const pidff_needs_set_envelope: ref;

axiom pidff_needs_set_envelope == $sub.ref(0, 413055);

procedure pidff_needs_set_envelope($p0: ref, $p1: ref) returns ($r: i32);



const pidff_set_periodic_report: ref;

axiom pidff_set_periodic_report == $sub.ref(0, 414087);

procedure pidff_set_periodic_report($p0: ref, $p1: ref);



const pidff_needs_set_periodic: ref;

axiom pidff_needs_set_periodic == $sub.ref(0, 415119);

procedure pidff_needs_set_periodic($p0: ref, $p1: ref) returns ($r: i32);



const pidff_set_ramp_force_report: ref;

axiom pidff_set_ramp_force_report == $sub.ref(0, 416151);

procedure pidff_set_ramp_force_report($p0: ref, $p1: ref);



const pidff_needs_set_ramp: ref;

axiom pidff_needs_set_ramp == $sub.ref(0, 417183);

procedure pidff_needs_set_ramp($p0: ref, $p1: ref) returns ($r: i32);



const pidff_set_condition_report: ref;

axiom pidff_set_condition_report == $sub.ref(0, 418215);

procedure pidff_set_condition_report($p0: ref, $p1: ref);



const pidff_needs_set_condition: ref;

axiom pidff_needs_set_condition == $sub.ref(0, 419247);

procedure pidff_needs_set_condition($p0: ref, $p1: ref) returns ($r: i32);



const pidff_set_signed: ref;

axiom pidff_set_signed == $sub.ref(0, 420279);

procedure pidff_set_signed($p0: ref, $i1: i16);



const pidff_rescale_signed: ref;

axiom pidff_rescale_signed == $sub.ref(0, 421311);

procedure pidff_rescale_signed($i0: i32, $p1: ref) returns ($r: i32);



const pidff_rescale: ref;

axiom pidff_rescale == $sub.ref(0, 422343);

procedure pidff_rescale($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pidff_rescale($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} {:cexpr "pidff_rescale:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 1030} {:cexpr "pidff_rescale:arg:max"} boogie_si_record_i32($i1);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(60, 1));
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(56, 1));
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i4, $i6);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i7, $i0);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $i9 := $sdiv.i32($i8, $i1);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(56, 1));
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i9, $i11);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 423375);

procedure __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    return;
}



const __hid_request: ref;

axiom __hid_request == $sub.ref(0, 424407);

procedure __hid_request($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation __hid_request($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} {:cexpr "__hid_request:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    return;
}



const pidff_find_fields: ref;

axiom pidff_find_fields == $sub.ref(0, 425439);

procedure pidff_find_fields($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.0, $CurrAddr;



implementation pidff_find_fields($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i24;
  var $i36: i24;
  var $i37: i24;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $i47: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i56: i64;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i64;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i24;
  var $i80: i24;
  var $i81: i24;
  var $p82: ref;
  var $p83: ref;
  var $i84: i8;
  var $i85: i64;
  var $i86: i64;
  var $i87: i64;
  var $i88: i1;
  var $i89: i64;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $p95: ref;
  var $i96: i64;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $p103: ref;
  var $i104: i64;
  var $p106: ref;
  var $i109: i32;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $i55: i32;
  var $i54: i32;
  var $i107: i32;
  var $i108: i32;
  var $i114: i1;
  var $i115: i32;
  var $i45: i32;
  var $i46: i32;
  var $i117: i32;
  var $i118: i32;
  var $i119: i1;
  var $i14: i32;
  var $i15: i32;
  var $i120: i32;
  var $i13: i32;
  var $i116: i32;
  var $i121: i1;
  var $i122: i1;
  var $i123: i32;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i24;
  var $i131: i24;
  var $i132: i24;
  var $p133: ref;
  var $p134: ref;
  var $i135: i8;
  var $i136: i64;
  var $i137: i64;
  var $i138: i64;
  var $i139: i1;
  var $i141: i32;
  var $i142: i1;
  var $i9: i32;
  var $i140: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1035} {:cexpr "pidff_find_fields:arg:count"} boogie_si_record_i32($i3);
    call {:si_unique_call 1036} {:cexpr "pidff_find_fields:arg:strict"} boogie_si_record_i32($i4);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32(0, $i3);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i140 := 0;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $r := $i140;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb4;

  $bb4:
    call $p10, $i11, $i12, $i16, $p18, $p19, $p20, $i21, $i22, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $p31, $p32, $p33, $p34, $i35, $i36, $i37, $p38, $p39, $i40, $i41, $i42, $i43, $i44, $i47, $p49, $p50, $p51, $i52, $i53, $i56, $p58, $p59, $p60, $p61, $i62, $p64, $i65, $i66, $p67, $i68, $i69, $i70, $i71, $i72, $p73, $p74, $p75, $p76, $p77, $p78, $i79, $i80, $i81, $p82, $p83, $i84, $i85, $i86, $i87, $i88, $i89, $p91, $p92, $i93, $p95, $i96, $p98, $p99, $p100, $p101, $i102, $p103, $i104, $p106, $i109, $p110, $p111, $i112, $i113, $i55, $i54, $i107, $i108, $i114, $i115, $i45, $i46, $i117, $i118, $i119, $i14, $i15, $i120, $i13, $i116, $i121, $i122, $i123, $i141, $i142, $i9 := pidff_find_fields_loop_$bb4($p0, $p1, $p2, $i3, $i4, $p5, $p6, $p10, $i11, $i12, $i16, $p18, $p19, $p20, $i21, $i22, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $p31, $p32, $p33, $p34, $i35, $i36, $i37, $p38, $p39, $i40, $i41, $i42, $i43, $i44, $i47, $p49, $p50, $p51, $i52, $i53, $i56, $p58, $p59, $p60, $p61, $i62, $p64, $i65, $i66, $p67, $i68, $i69, $i70, $i71, $i72, $p73, $p74, $p75, $p76, $p77, $p78, $i79, $i80, $i81, $p82, $p83, $i84, $i85, $i86, $i87, $i88, $i89, $p91, $p92, $i93, $p95, $i96, $p98, $p99, $p100, $p101, $i102, $p103, $i104, $p106, $i109, $p110, $p111, $i112, $i113, $i55, $i54, $i107, $i108, $i114, $i115, $i45, $i46, $i117, $i118, $i119, $i14, $i15, $i120, $i13, $i116, $i121, $i122, $i123, $i141, $i142, $i9);
    goto $bb4_last;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 2088)), $mul.ref(2072, 1));
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i12 := $ult.i32(0, $i11);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $i13 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i116 := $i13;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i116, 0);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i141 := $add.i32($i9, 1);
    call {:si_unique_call 1048} {:cexpr "k"} boogie_si_record_i32($i141);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $i142 := $slt.i32($i141, $i3);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i142 == 1);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb50:
    assume $i142 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i141;
    goto $bb50_dummy;

  $bb40:
    assume $i121 == 1;
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i4, 0);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $i123 := $i9;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i122 == 1);
    goto $bb42;

  $bb43:
    assume $i122 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, $p124, .str.7);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, $p125, .str.102);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $M.31 := $store.ref($M.31, $p126, .str.9);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p127, .str.107);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $i130 := $load.i24($M.33, $p129);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $i131 := $and.i24($i130, $sub.i24(0, 262144));
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $i132 := $or.i24($i131, 799);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $M.33 := $store.i24($M.33, $p129, $i132);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $M.34 := $store.i8($M.34, $p133, 0);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.34, $p134);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i64($i135);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $i137 := $and.i64($i136, 1);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} $i138 := ldv__builtin_expect($i137, 0);
    call {:si_unique_call 1046} {:cexpr "tmp___1"} boogie_si_record_i64($i138);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $i139 := $ne.i64($i138, 0);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i140 := $sub.i32(0, 1);
    goto $bb48;

  $bb45:
    assume $i139 == 1;
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} __dynamic_pr_debug.ref.ref.i32($p7, .str.108, $i123);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $i14, $i15 := 0, 0;
    goto $bb9;

  $bb9:
    call $i16, $p18, $p19, $p20, $i21, $i22, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $p31, $p32, $p33, $p34, $i35, $i36, $i37, $p38, $p39, $i40, $i41, $i42, $i43, $i44, $i47, $p49, $p50, $p51, $i52, $i53, $i56, $p58, $p59, $p60, $p61, $i62, $p64, $i65, $i66, $p67, $i68, $i69, $i70, $i71, $i72, $p73, $p74, $p75, $p76, $p77, $p78, $i79, $i80, $i81, $p82, $p83, $i84, $i85, $i86, $i87, $i88, $i89, $p91, $p92, $i93, $p95, $i96, $p98, $p99, $p100, $p101, $i102, $p103, $i104, $p106, $i109, $p110, $p111, $i112, $i113, $i55, $i54, $i107, $i108, $i114, $i115, $i45, $i46, $i117, $i118, $i119, $i14, $i15, $i120 := pidff_find_fields_loop_$bb9($p0, $p1, $p2, $p5, $p6, $p10, $i16, $p18, $p19, $p20, $i21, $i22, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $p31, $p32, $p33, $p34, $i35, $i36, $i37, $p38, $p39, $i40, $i41, $i42, $i43, $i44, $i47, $p49, $p50, $p51, $i52, $i53, $i56, $p58, $p59, $p60, $p61, $i62, $p64, $i65, $i66, $p67, $i68, $i69, $i70, $i71, $i72, $p73, $p74, $p75, $p76, $p77, $p78, $i79, $i80, $i81, $p82, $p83, $i84, $i85, $i86, $i87, $i88, $i89, $p91, $p92, $i93, $p95, $i96, $p98, $p99, $p100, $p101, $i102, $p103, $i104, $p106, $i109, $p110, $p111, $i112, $i113, $i55, $i54, $i107, $i108, $i114, $i115, $i45, $i46, $i117, $i118, $i119, $i14, $i15, $i120, $i9);
    goto $bb9_last;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref($i16, 8));
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i15);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref($i22, 8));
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 112)), $mul.ref(40, 1));
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i21, $i27);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i15);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref($i47, 8));
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $i53 := $ult.i32(0, $i52);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $i54 := $i15;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i107, $i108 := $i54, $i14;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $i114 := $ne.i32($i108, 0);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $i115 := $i108;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i45, $i46 := $i107, $i108;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i117 := $add.i32($i45, 1);
    call {:si_unique_call 1040} {:cexpr "i"} boogie_si_record_i32($i117);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p10);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $i119 := $ult.i32($i117, $i118);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $i120 := $i46;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $i13 := $i120;
    goto $bb8;

  $bb37:
    assume $i119 == 1;
    assume {:verifier.code 0} true;
    $i14, $i15 := $i46, $i117;
    goto $bb37_dummy;

  $bb33:
    assume $i114 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $i116 := $i115;
    goto $bb35;

  $bb18:
    assume $i53 == 1;
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb21;

  $bb21:
    call $i56, $p58, $p59, $p60, $p61, $i62, $p64, $i65, $i66, $p67, $i68, $i69, $i70, $i71, $i72, $i109, $p110, $p111, $i112, $i113, $i55 := pidff_find_fields_loop_$bb21($p1, $p2, $p49, $i56, $p58, $p59, $p60, $p61, $i62, $p64, $i65, $i66, $p67, $i68, $i69, $i70, $i71, $i72, $i109, $p110, $p111, $i112, $i113, $i55, $i15, $i9);
    goto $bb21_last;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i15);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref($i56, 8));
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i55);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p61, $mul.ref($i62, 20)), $mul.ref(0, 1));
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i9);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p1, $mul.ref($i66, 1));
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.35, $p67);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $i70 := $or.i32($i69, 983040);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i65, $i70);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i72 := $i55;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i109 := $add.i32($i55, 1);
    call {:si_unique_call 1044} {:cexpr "j"} boogie_si_record_i32($i109);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p49);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $i113 := $ult.i32($i109, $i112);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i113 == 1);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $i54 := $i15;
    goto $bb20;

  $bb30:
    assume $i113 == 1;
    assume {:verifier.code 0} true;
    $i55 := $i109;
    goto $bb30_dummy;

  $bb23:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, $p73, .str.7);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, $p74, .str.102);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $M.31 := $store.ref($M.31, $p75, .str.9);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p76, .str.105);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $i79 := $load.i24($M.33, $p78);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $i80 := $and.i24($i79, $sub.i24(0, 262144));
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $i81 := $or.i24($i80, 787);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $M.33 := $store.i24($M.33, $p78, $i81);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $M.34 := $store.i8($M.34, $p82, 0);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.34, $p83);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i64($i84);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $i86 := $and.i64($i85, 1);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $i87 := ldv__builtin_expect($i86, 0);
    call {:si_unique_call 1042} {:cexpr "tmp___0"} boogie_si_record_i64($i87);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i87, 0);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i15);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref($i89, 8));
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i9);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref($i93, 16)), $mul.ref(0, 1));
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p95, $p92);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $i96 := $sext.i32.i64($i15);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref($i96, 8));
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $i102 := $sext.i32.i64($i72);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p101, $mul.ref($i102, 4));
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i9);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref($i104, 16)), $mul.ref(8, 1));
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p106, $p103);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i107, $i108 := $i15, 1;
    goto $bb28;

  $bb25:
    assume $i88 == 1;
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} __dynamic_pr_debug.ref.ref.i32.i32.i32($p6, .str.106, $i9, $i15, $i72);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, $p29, .str.7);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, $p30, .str.102);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $M.31 := $store.ref($M.31, $p31, .str.9);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p32, .str.103);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $i35 := $load.i24($M.33, $p34);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $i36 := $and.i24($i35, $sub.i24(0, 262144));
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $i37 := $or.i24($i36, 780);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $M.33 := $store.i24($M.33, $p34, $i37);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $M.34 := $store.i8($M.34, $p38, 0);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.34, $p39);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i64($i40);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $i42 := $and.i64($i41, 1);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} $i43 := ldv__builtin_expect($i42, 0);
    call {:si_unique_call 1038} {:cexpr "tmp"} boogie_si_record_i64($i43);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i45, $i46 := $i15, $i14;
    goto $bb16;

  $bb13:
    assume $i44 == 1;
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} __dynamic_pr_debug.ref.ref($p5, .str.104);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb30_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7459;

  $bb37_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7404;

  $bb50_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7396;
}



const pidff_find_special_fields: ref;

axiom pidff_find_special_fields == $sub.ref(0, 426471);

procedure pidff_find_special_fields($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr;



implementation pidff_find_special_fields($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i24;
  var $i59: i24;
  var $i60: i24;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i64;
  var $i65: i64;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $i82: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p3, .str.7);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p4, .str.109);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p5, .str.9);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, .str.110);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.7, $p8);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 934);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p8, $i11);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p12, 0);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.8, $p13);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1052} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(7, 8));
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $p25 := pidff_find_special_field($p24, 37, 1);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(736, 1));
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p25);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} $p30 := pidff_find_special_field($p29, 37, 1);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(744, 1));
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p30);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $p35 := pidff_find_special_field($p34, 87, 0);
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(752, 1));
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p35);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(6, 8));
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} $p40 := pidff_find_special_field($p39, 150, 1);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(760, 1));
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, $p40);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $p45 := pidff_find_special_field($p44, 139, 1);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, $p45);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} $p50 := pidff_find_special_field($p49, 120, 1);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(776, 1));
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, $p50);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p52, .str.7);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p53, .str.109);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p54, .str.9);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p55, .str.111);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $i58 := $load.i24($M.7, $p57);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $i59 := $and.i24($i58, $sub.i24(0, 262144));
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $i60 := $or.i24($i59, 955);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p57, $i60);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p61, 0);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.8, $p62);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i64($i63);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $i65 := $and.i64($i64, 1);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} $i66 := ldv__builtin_expect($i65, 0);
    call {:si_unique_call 1061} {:cexpr "tmp___0"} boogie_si_record_i64($i66);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(736, 1));
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $i74 := $eq.i64($i73, 0);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i74 == 1);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(744, 1));
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i78 := $eq.i64($i77, 0);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(752, 1));
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $i86 := $eq.i64($i85, 0);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(760, 1));
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p91);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $i93 := $eq.i64($i92, 0);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $i100 := $eq.i64($i99, 0);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(776, 1));
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p105);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $i107 := $eq.i64($i106, 0);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(784, 1));
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(760, 1));
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} vslice_dummy_var_56 := pidff_find_special_keys($p112, $p114, pidff_device_control, 2);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(784, 1));
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(760, 1));
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} vslice_dummy_var_57 := pidff_find_special_keys($p117, $p119, pidff_device_control, 2);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(792, 1));
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(736, 1));
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} $i125 := pidff_find_special_keys($p122, $p124, pidff_effect_types, 11);
    call {:si_unique_call 1071} {:cexpr "tmp___1"} boogie_si_record_i32($i125);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, 0);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(836, 1));
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(768, 1));
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} $i134 := pidff_find_special_keys($p131, $p133, pidff_block_load_status, 2);
    call {:si_unique_call 1074} {:cexpr "tmp___2"} boogie_si_record_i32($i134);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 2);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(844, 1));
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(776, 1));
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.0, $p141);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $i143 := pidff_find_special_keys($p140, $p142, pidff_effect_operation_status, 2);
    call {:si_unique_call 1077} {:cexpr "tmp___3"} boogie_si_record_i32($i143);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i143, 2);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i82 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $r := $i82;
    return;

  $bb32:
    assume $i144 == 1;
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p146, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} dev_err.ref.ref($p147, .str.119);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32(0, 1);
    goto $bb12;

  $bb29:
    assume $i135 == 1;
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} dev_err.ref.ref($p138, .str.118);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32(0, 1);
    goto $bb12;

  $bb26:
    assume $i126 == 1;
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p128, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} dev_err.ref.ref($p129, .str.117);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32(0, 1);
    goto $bb12;

  $bb23:
    assume $i107 == 1;
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} dev_err.ref.ref($p110, .str.116);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32(0, 1);
    goto $bb12;

  $bb20:
    assume $i100 == 1;
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} dev_err.ref.ref($p103, .str.115);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32(0, 1);
    goto $bb12;

  $bb17:
    assume $i93 == 1;
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} dev_err.ref.ref($p96, .str.114);
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32(0, 1);
    goto $bb12;

  $bb14:
    assume $i86 == 1;
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} dev_err.ref.ref($p89, .str.113);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32(0, 1);
    goto $bb12;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} dev_err.ref.ref($p81, .str.112);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32(0, 1);
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb8;

  $bb4:
    assume $i67 == 1;
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} __dynamic_dev_dbg.ref.ref.ref($p2, $p70, .str.111);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} __dynamic_dev_dbg.ref.ref.ref($p1, $p21, .str.110);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pidff_find_effects: ref;

axiom pidff_find_effects == $sub.ref(0, 427503);

procedure pidff_find_effects($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pidff_find_effects($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $i26: i32;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $p112: ref;
  var $i113: i32;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $p120: ref;
  var $i121: i32;
  var $i122: i1;
  var $p124: ref;
  var $i125: i32;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i64;
  var $p132: ref;
  var $i133: i32;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i64;
  var $p140: ref;
  var $i141: i32;
  var $i142: i1;
  var $p144: ref;
  var $i145: i32;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i64;
  var $p152: ref;
  var $i153: i32;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $i158: i64;
  var $p160: ref;
  var $i161: i32;
  var $i162: i1;
  var $p164: ref;
  var $i165: i32;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i64;
  var $p172: ref;
  var $i173: i32;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $i178: i64;
  var $p180: ref;
  var $i181: i32;
  var $i182: i1;
  var $p184: ref;
  var $i185: i32;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $i190: i64;
  var $p192: ref;
  var $i193: i32;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $i198: i64;
  var $p200: ref;
  var $i201: i32;
  var $i202: i1;
  var $p204: ref;
  var $i205: i32;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $i210: i64;
  var $p212: ref;
  var $i213: i32;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $i218: i64;
  var $p220: ref;
  var $i221: i32;
  var $i222: i1;
  var $p224: ref;
  var $i225: i32;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $i230: i64;
  var $p232: ref;
  var $i233: i32;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $i238: i64;
  var $p240: ref;
  var $i241: i32;
  var $i242: i1;
  var $p244: ref;
  var $i245: i32;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $i250: i64;
  var $p252: ref;
  var $i253: i32;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $i258: i64;
  var $p260: ref;
  var $i261: i32;
  var $i262: i1;
  var $p264: ref;
  var $i265: i32;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $i270: i64;
  var $p272: ref;
  var $i273: i32;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $i278: i64;
  var $p280: ref;
  var $i281: i32;
  var $i282: i1;
  var $p284: ref;
  var $i285: i32;
  var $p286: ref;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $i290: i64;
  var $p292: ref;
  var $i293: i32;
  var $p294: ref;
  var $p295: ref;
  var $p296: ref;
  var $p297: ref;
  var $i298: i64;
  var $p300: ref;
  var $i301: i32;
  var $i302: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(792, 1)), $mul.ref(0, 4));
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 1079} {:cexpr "pidff_type"} boogie_si_record_i32($i4);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(744, 1));
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i4);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref($i9, 20)), $mul.ref(0, 1));
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(736, 1));
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i4);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref($i17, 20)), $mul.ref(0, 1));
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i12, $i20);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $i22 := 0;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(792, 1)), $mul.ref(1, 4));
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(744, 1));
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i105);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p109, $mul.ref($i110, 20)), $mul.ref(0, 1));
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(736, 1));
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p115, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $i118 := $sext.i32.i64($i105);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p117, $mul.ref($i118, 20)), $mul.ref(0, 1));
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i113, $i121);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $i22 := 1;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(792, 1)), $mul.ref(2, 4));
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(744, 1));
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p127, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $i130 := $sext.i32.i64($i125);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p129, $mul.ref($i130, 20)), $mul.ref(0, 1));
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(736, 1));
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p135, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $i138 := $sext.i32.i64($i125);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p137, $mul.ref($i138, 20)), $mul.ref(0, 1));
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.0, $p140);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $i142 := $ne.i32($i133, $i141);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $i22 := 2;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(792, 1)), $mul.ref(3, 4));
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p144);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(744, 1));
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p147, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $i150 := $sext.i32.i64($i145);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p149, $mul.ref($i150, 20)), $mul.ref(0, 1));
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.0, $p152);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(736, 1));
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p155, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $i158 := $sext.i32.i64($i145);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p157, $mul.ref($i158, 20)), $mul.ref(0, 1));
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.0, $p160);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $i162 := $ne.i32($i153, $i161);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i22 := 3;
    assume {:branchcond $i162} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(792, 1)), $mul.ref(4, 4));
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.0, $p164);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(744, 1));
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.0, $p166);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p167, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.0, $p168);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $i170 := $sext.i32.i64($i165);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p169, $mul.ref($i170, 20)), $mul.ref(0, 1));
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $i173 := $load.i32($M.0, $p172);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(736, 1));
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.0, $p174);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p175, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $i178 := $sext.i32.i64($i165);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p177, $mul.ref($i178, 20)), $mul.ref(0, 1));
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.0, $p180);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $i182 := $ne.i32($i173, $i181);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $i22 := 4;
    assume {:branchcond $i182} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(792, 1)), $mul.ref(5, 4));
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $i185 := $load.i32($M.0, $p184);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(744, 1));
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $p187 := $load.ref($M.0, $p186);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p187, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $p189 := $load.ref($M.0, $p188);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $i190 := $sext.i32.i64($i185);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p189, $mul.ref($i190, 20)), $mul.ref(0, 1));
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.0, $p192);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(736, 1));
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.0, $p194);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p195, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $p197 := $load.ref($M.0, $p196);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $i198 := $sext.i32.i64($i185);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p197, $mul.ref($i198, 20)), $mul.ref(0, 1));
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.0, $p200);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $i202 := $ne.i32($i193, $i201);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $i22 := 5;
    assume {:branchcond $i202} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(792, 1)), $mul.ref(6, 4));
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $i205 := $load.i32($M.0, $p204);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(744, 1));
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p207, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $p209 := $load.ref($M.0, $p208);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $i210 := $sext.i32.i64($i205);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p209, $mul.ref($i210, 20)), $mul.ref(0, 1));
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.0, $p212);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(736, 1));
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $p215 := $load.ref($M.0, $p214);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p215, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.0, $p216);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $i218 := $sext.i32.i64($i205);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p217, $mul.ref($i218, 20)), $mul.ref(0, 1));
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $i221 := $load.i32($M.0, $p220);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $i222 := $ne.i32($i213, $i221);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $i22 := 6;
    assume {:branchcond $i222} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(792, 1)), $mul.ref(7, 4));
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $i225 := $load.i32($M.0, $p224);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(744, 1));
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $p227 := $load.ref($M.0, $p226);
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p227, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $p229 := $load.ref($M.0, $p228);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $i230 := $sext.i32.i64($i225);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p229, $mul.ref($i230, 20)), $mul.ref(0, 1));
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $i233 := $load.i32($M.0, $p232);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(736, 1));
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $p235 := $load.ref($M.0, $p234);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p235, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $p237 := $load.ref($M.0, $p236);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $i238 := $sext.i32.i64($i225);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p237, $mul.ref($i238, 20)), $mul.ref(0, 1));
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.0, $p240);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $i242 := $ne.i32($i233, $i241);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $i22 := 7;
    assume {:branchcond $i242} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(792, 1)), $mul.ref(8, 4));
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    $i245 := $load.i32($M.0, $p244);
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(744, 1));
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $p247 := $load.ref($M.0, $p246);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p247, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $p249 := $load.ref($M.0, $p248);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $i250 := $sext.i32.i64($i245);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p249, $mul.ref($i250, 20)), $mul.ref(0, 1));
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $i253 := $load.i32($M.0, $p252);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(736, 1));
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $p255 := $load.ref($M.0, $p254);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p255, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $p257 := $load.ref($M.0, $p256);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $i258 := $sext.i32.i64($i245);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p257, $mul.ref($i258, 20)), $mul.ref(0, 1));
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $i261 := $load.i32($M.0, $p260);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $i262 := $ne.i32($i253, $i261);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $i22 := 8;
    assume {:branchcond $i262} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(792, 1)), $mul.ref(9, 4));
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $i265 := $load.i32($M.0, $p264);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(744, 1));
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $p267 := $load.ref($M.0, $p266);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p267, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $p269 := $load.ref($M.0, $p268);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $i270 := $sext.i32.i64($i265);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p269, $mul.ref($i270, 20)), $mul.ref(0, 1));
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $i273 := $load.i32($M.0, $p272);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(736, 1));
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $p275 := $load.ref($M.0, $p274);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p275, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $p277 := $load.ref($M.0, $p276);
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $i278 := $sext.i32.i64($i265);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p277, $mul.ref($i278, 20)), $mul.ref(0, 1));
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $i281 := $load.i32($M.0, $p280);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $i282 := $ne.i32($i273, $i281);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $i22 := 9;
    assume {:branchcond $i282} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(792, 1)), $mul.ref(10, 4));
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $i285 := $load.i32($M.0, $p284);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(744, 1));
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $p287 := $load.ref($M.0, $p286);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p287, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $p289 := $load.ref($M.0, $p288);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $i290 := $sext.i32.i64($i285);
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p289, $mul.ref($i290, 20)), $mul.ref(0, 1));
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $i293 := $load.i32($M.0, $p292);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(736, 1));
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $p295 := $load.ref($M.0, $p294);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p295, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $p297 := $load.ref($M.0, $p296);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $i298 := $sext.i32.i64($i285);
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p297, $mul.ref($i298, 20)), $mul.ref(0, 1));
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $i301 := $load.i32($M.0, $p300);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $i302 := $ne.i32($i293, $i301);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $i22 := 10;
    assume {:branchcond $i302} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(792, 1)), $mul.ref(0, 4));
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(792, 1)), $mul.ref(1, 4));
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(792, 1)), $mul.ref(2, 4));
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(792, 1)), $mul.ref(3, 4));
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(792, 1)), $mul.ref(4, 4));
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(792, 1)), $mul.ref(5, 4));
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(792, 1)), $mul.ref(6, 4));
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(792, 1)), $mul.ref(7, 4));
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(792, 1)), $mul.ref(8, 4));
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(792, 1)), $mul.ref(9, 4));
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(792, 1)), $mul.ref(10, 4));
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb40:
    assume $i100 == 1;
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} set_bit(84, $p102);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i94 == 1;
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} set_bit(86, $p96);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i88 == 1;
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} set_bit(85, $p90);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i82 == 1;
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} set_bit(83, $p84);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i74 == 1;
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} set_bit(92, $p76);
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} set_bit(81, $p78);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i66 == 1;
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} set_bit(91, $p68);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} set_bit(81, $p70);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i58 == 1;
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} set_bit(89, $p60);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} set_bit(81, $p62);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i50 == 1;
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} set_bit(90, $p52);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} set_bit(81, $p54);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} set_bit(88, $p44);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} set_bit(81, $p46);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i36 == 1;
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} set_bit(87, $p38);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 2296)), $mul.ref(184, 1));
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} set_bit(82, $p32);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i302 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} dev_err.ref.ref.i32($p25, .str.121, $i22);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 1);
    goto $bb6;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i282 == 1;
    goto $bb4;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i262 == 1;
    goto $bb4;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i242 == 1;
    goto $bb4;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i222 == 1;
    goto $bb4;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i202 == 1;
    goto $bb4;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i182 == 1;
    goto $bb4;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i162 == 1;
    goto $bb4;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i142 == 1;
    goto $bb4;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i122 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb4;
}



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 428535);

procedure test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 1098} {:cexpr "test_and_clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1099} devirtbounce.3(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.9, $p2);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const pidff_find_special_field: ref;

axiom pidff_find_special_field == $sub.ref(0, 429567);

procedure pidff_find_special_field($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation pidff_find_special_field($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i64;
  var $p33: ref;
  var $p34: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i6: i32;
  var $p35: ref;
  var vslice_dummy_var_58: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} {:cexpr "pidff_find_special_field:arg:usage"} boogie_si_record_i32($i1);
    call {:si_unique_call 1101} {:cexpr "pidff_find_special_field:arg:enforce_min"} boogie_si_record_i32($i2);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2088)), $mul.ref(2072, 1));
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $i5 := $ult.i32(0, $i4);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p35 := $0.ref;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $r := $p35;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $i7, $p9, $p10, $p11, $i12, $i13, $i14, $i15, $p17, $p18, $p19, $i20, $i21, $i22, $i37, $i38, $i39, $i6 := pidff_find_special_field_loop_$bb4($p0, $i1, $p3, $i7, $p9, $p10, $p11, $i12, $i13, $i14, $i15, $p17, $p18, $p19, $i20, $i21, $i22, $i37, $i38, $i39, $i6);
    goto $bb4_last;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref($i7, 8));
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 112)), $mul.ref(4, 1));
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i1, 983040);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i12, $i13);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i6, 1);
    call {:si_unique_call 1103} {:cexpr "i"} boogie_si_record_i32($i37);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p3);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $i39 := $ult.i32($i37, $i38);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i39 == 1);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb18:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i37;
    goto $bb18_dummy;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i6);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref($i15, 8));
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 112)), $mul.ref(40, 1));
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $i22 := $i6;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb8;

  $bb9:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i2, 0);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i23 == 1);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i22);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref($i24, 8));
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 112)), $mul.ref(56, 1));
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 1);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} vslice_dummy_var_58 := printk.ref(.str.120);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $p35 := $0.ref;
    goto $bb16;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i22);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref($i31, 8));
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $p35 := $p34;
    goto $bb16;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb12;

  $bb18_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8135;
}



const pidff_find_special_keys: ref;

axiom pidff_find_special_keys == $sub.ref(0, 430599);

procedure pidff_find_special_keys($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pidff_find_special_keys($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i11: i32;
  var $i29: i32;
  var $i33: i32;
  var $i34: i1;
  var $i6: i32;
  var $i7: i32;
  var $i35: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} {:cexpr "pidff_find_special_keys:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32(0, $i3);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $i6, $i7 := 0, 0;
    goto $bb4;

  $bb4:
    call $p8, $i9, $i10, $p12, $p13, $i14, $p16, $i17, $i18, $p19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $p27, $i28, $i30, $i31, $i32, $i11, $i29, $i33, $i34, $i6, $i7, $i35 := pidff_find_special_keys_loop_$bb4($p0, $p1, $p2, $i3, $p8, $i9, $i10, $p12, $p13, $i14, $p16, $i17, $i18, $p19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $p27, $i28, $i30, $i31, $i32, $i11, $i29, $i33, $i34, $i6, $i7, $i35);
    goto $bb4_last;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $i10 := $ult.i32(0, $i9);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i29 := $i6;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i7, 1);
    call {:si_unique_call 1106} {:cexpr "i"} boogie_si_record_i32($i33);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, $i3);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $i35 := $i29;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $i5 := $i35;
    goto $bb3;

  $bb18:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i6, $i7 := $i29, $i33;
    goto $bb18_dummy;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb9;

  $bb9:
    call $p12, $p13, $i14, $p16, $i17, $i18, $p19, $i20, $i21, $i22, $i23, $i24, $i30, $i31, $i32, $i11 := pidff_find_special_keys_loop_$bb9($p1, $p2, $p8, $p12, $p13, $i14, $p16, $i17, $i18, $p19, $i20, $i21, $i22, $i23, $i24, $i30, $i31, $i32, $i11, $i7);
    goto $bb9_last;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i11);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p13, $mul.ref($i14, 20)), $mul.ref(0, 1));
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i7);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p2, $mul.ref($i18, 1));
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.36, $p19);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i21, 983040);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i17, $i22);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $i24 := $i11;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i11, 1);
    call {:si_unique_call 1107} {:cexpr "j"} boogie_si_record_i32($i30);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p8);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $i32 := $ult.i32($i30, $i31);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i32 == 1);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb15:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i30;
    goto $bb15_dummy;

  $bb11:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 1);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i7);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p0, $mul.ref($i26, 4));
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i25);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i6, 1);
    call {:si_unique_call 1105} {:cexpr "found"} boogie_si_record_i32($i28);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb13;

  $bb15_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8192;

  $bb18_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8184;
}



const pidff_check_usage: ref;

axiom pidff_check_usage == $sub.ref(0, 431631);

procedure pidff_check_usage($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pidff_check_usage($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} {:cexpr "pidff_check_usage:arg:usage"} boogie_si_record_i32($i0);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(983073, $i0);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32(983159, $i0);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i4} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32(983165, $i0);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $i2 := 2;
    assume {:branchcond $i5} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32(983167, $i0);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $i2 := 3;
    assume {:branchcond $i6} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32(983177, $i0);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $i2 := 4;
    assume {:branchcond $i7} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32(983184, $i0);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $i2 := 5;
    assume {:branchcond $i8} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32(983190, $i0);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $i2 := 6;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32(983211, $i0);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $i2 := 7;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32(983130, $i0);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $i2 := 8;
    assume {:branchcond $i11} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32(983135, $i0);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $i2 := 9;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32(983150, $i0);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $i2 := 10;
    assume {:branchcond $i13} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32(983155, $i0);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $i2 := 11;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32(983156, $i0);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $i2 := 12;
    assume {:branchcond $i15} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $i3 := $i2;
    goto $bb6;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb4;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb4;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb4;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb4;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb4;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb4;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb4;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb4;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb4;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb4;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb4;
}



const up: ref;

axiom up == $sub.ref(0, 432663);

procedure up($p0: ref);
  free requires assertsPassed;



implementation up($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 433695);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 434727);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 435759);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 436791);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1109} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 1110} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const usb_endpoint_xfer_int: ref;

axiom usb_endpoint_xfer_int == $sub.ref(0, 437823);

procedure usb_endpoint_xfer_int($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_int($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 3);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_endpoint_dir_in: ref;

axiom usb_endpoint_dir_in == $sub.ref(0, 438855);

procedure usb_endpoint_dir_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const usbhid_start: ref;

axiom usbhid_start == $sub.ref(0, 439887);

procedure usbhid_start($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.37, $M.0, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.42;



implementation usbhid_start($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $i111: i64;
  var $i112: i1;
  var $p113: ref;
  var $i114: i8;
  var $i115: i32;
  var $i116: i32;
  var $i117: i32;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i64;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i32;
  var $i132: i32;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i136: i32;
  var $i137: i8;
  var $i138: i32;
  var $i139: i1;
  var $i32: i32;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $i145: i1;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $i155: i64;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i32;
  var $i163: i32;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $i168: i32;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $p172: ref;
  var $i173: i32;
  var $i174: i32;
  var $i175: i1;
  var $p176: ref;
  var $p177: ref;
  var $i178: i32;
  var $i179: i1;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $i183: i8;
  var $i184: i8;
  var $i185: i8;
  var $i186: i32;
  var $i187: i1;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p192: ref;
  var $i193: i8;
  var $i194: i32;
  var $i195: i1;
  var $p197: ref;
  var $i198: i8;
  var $i199: i32;
  var $i200: i1;
  var $p201: ref;
  var $i26: i32;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $i203: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1)), $mul.ref(0, 1));
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 48), 1568));
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 48), 1568)), $mul.ref(8, 1));
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} $p9 := interface_to_usbdev($p6);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $M.37 := $store.i32($M.37, $p1, 0);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} clear_bit(7, $p13);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(20, 1));
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 64);
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(20, 1));
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} hid_find_max_report($p0, 0, $p15);
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(20, 1));
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} hid_find_max_report($p0, 1, $p16);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(20, 1));
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} hid_find_max_report($p0, 2, $p17);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(20, 1));
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i20 := $ugt.i32($i19, 4096);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} hid_find_max_report($p0, 0, $p1);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.37, $p1);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i32($i22, 4096);
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} $i24 := hid_alloc_buffers($p9, $p0);
    call {:si_unique_call 1119} {:cexpr "tmp___0"} boogie_si_record_i32($i24);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $i31 := $ugt.i32($i30, 0);
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $p140 := usb_alloc_urb(0, 208);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(48, 1));
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p141, $p140);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(48, 1));
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $i144 := $p2i.ref.i64($p143);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $i145 := $eq.i64($i144, 0);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(48, 1));
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(56, 1));
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p149);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(6216, 1));
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.0, $p151);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p0);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} usb_fill_control_urb($p147, $p9, 0, $p150, $p152, 1, hid_ctrl, $p153);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(6224, 1));
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $i155 := $load.i64($M.0, $p154);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(48, 1));
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p157, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p158, $i155);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(48, 1));
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p159);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p160, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $i162 := $load.i32($M.0, $p161);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $i163 := $or.i32($i162, 4);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(48, 1));
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.0, $p164);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p166, $i163);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8040, 1));
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $i168 := $load.i32($M.0, $p167);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $i169 := $and.i32($i168, 536870912);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i169, 0);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} set_bit(8, $p171);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8040, 1));
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $i173 := $load.i32($M.0, $p172);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $i174 := $and.i32($i173, 1024);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $i175 := $ne.i32($i174, 0);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $i193 := $load.i8($M.0, $p192);
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $i194 := $zext.i8.i32($i193);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 1);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i195} true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i195 == 1);
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i203 := 0;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $r := $i203;
    return;

  $bb65:
    assume $i195 == 1;
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(7, 1));
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $i198 := $load.i8($M.0, $p197);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $i199 := $zext.i8.i32($i198);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i199, 1);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i200 == 1);
    goto $bb67;

  $bb68:
    assume $i200 == 1;
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} usbhid_set_leds($p0);
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p9, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} vslice_dummy_var_60 := device_set_wakeup_enable($p201, 1);
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb56:
    assume $i175 == 1;
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} $i178 := usb_autopm_get_interface($p177);
    call {:si_unique_call 1149} {:cexpr "ret"} boogie_si_record_i32($i178);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $i179 := $ne.i32($i178, 0);
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p181, $mul.ref(0, 1568)), $mul.ref(40, 1));
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $i183 := $load.i8($M.0, $p182);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $i184 := $and.i8($i183, $sub.i8(0, 9));
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $i185 := $or.i8($i184, 8);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p182, $i185);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} $i186 := hid_start_in($p0);
    call {:si_unique_call 1151} {:cexpr "ret"} boogie_si_record_i32($i186);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i187 := $ne.i32($i186, 0);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i187} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} usb_autopm_put_interface($p190);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb61:
    assume $i187 == 1;
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} dev_err.ref.ref.i32($p188, .str.62, $i186);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb58:
    assume $i179 == 1;
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $i26 := $i178;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(24, 1));
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.0, $p204);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} usb_free_urb($p205);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} usb_free_urb($p207);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(48, 1));
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $p209 := $load.ref($M.0, $p208);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} usb_free_urb($p209);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(24, 1));
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p210, $0.ref);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p211, $0.ref);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(48, 1));
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p212, $0.ref);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} hid_free_buffers($p9, $p0);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $i203 := $i26;
    goto $bb71;

  $bb53:
    assume $i170 == 1;
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} usbhid_init_reports($p0);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb50:
    assume $i145 == 1;
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 12);
    goto $bb9;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb14;

  $bb14:
    call $p33, $p34, $i35, $p37, $i38, $i39, $p40, $i41, $i42, $p43, $i44, $i45, $i46, $p47, $i48, $i49, $p50, $i51, $i52, $i53, $i54, $p55, $p56, $p57, $i58, $i59, $i61, $p62, $p63, $p64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $p73, $p74, $i75, $i76, $p77, $p78, $i79, $i80, $p81, $i82, $i83, $i84, $i85, $p86, $p87, $p88, $p89, $i90, $p91, $p92, $i93, $p94, $p95, $p96, $p97, $p98, $p99, $i100, $i101, $p102, $p103, $p104, $p105, $p106, $i107, $i108, $p109, $p110, $i111, $i112, $p113, $i114, $i115, $i116, $i117, $p118, $p119, $p120, $p121, $p122, $p123, $i124, $p125, $p126, $p127, $p128, $p129, $p130, $i131, $i132, $p133, $p134, $p135, $i136, $i137, $i138, $i139, $i32, vslice_dummy_var_59 := usbhid_start_loop_$bb14($p0, $p1, $p8, $p9, $p12, $p28, $p33, $p34, $i35, $p37, $i38, $i39, $p40, $i41, $i42, $p43, $i44, $i45, $i46, $p47, $i48, $i49, $p50, $i51, $i52, $i53, $i54, $p55, $p56, $p57, $i58, $i59, $i61, $p62, $p63, $p64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $p73, $p74, $i75, $i76, $p77, $p78, $i79, $i80, $p81, $i82, $i83, $i84, $i85, $p86, $p87, $p88, $p89, $i90, $p91, $p92, $i93, $p94, $p95, $p96, $p97, $p98, $p99, $i100, $i101, $p102, $p103, $p104, $p105, $p106, $i107, $i108, $p109, $p110, $i111, $i112, $p113, $i114, $i115, $i116, $i117, $p118, $p119, $p120, $p121, $p122, $p123, $i124, $p125, $p126, $p127, $p128, $p129, $p130, $i131, $i132, $p133, $p134, $p135, $i136, $i137, $i138, $i139, $i32, vslice_dummy_var_59);
    goto $bb14_last;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i32);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p34, $mul.ref($i35, 72)), $mul.ref(0, 1));
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} $i38 := usb_endpoint_xfer_int($p37);
    call {:si_unique_call 1125} {:cexpr "tmp___1"} boogie_si_record_i32($i38);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    $p40 := $add.ref($add.ref($add.ref($p34, $mul.ref($i35, 72)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    call {:si_unique_call 1127} {:cexpr "interval"} boogie_si_record_i32($i42);
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8040, 1));
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 268435456);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i61 := $i42;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 65538);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i70 := $i61;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} $i71 := usb_endpoint_dir_in($p37);
    call {:si_unique_call 1133} {:cexpr "tmp___6"} boogie_si_record_i32($i71);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i72 == 1);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} $p109 := usb_alloc_urb(0, 208);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p110, $p109);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p109);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $i112 := $eq.i64($i111, 0);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    $p113 := $add.ref($add.ref($add.ref($p34, $mul.ref($i35, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.0, $p113);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i114);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} $i116 := __create_pipe($p9, $i115);
    call {:si_unique_call 1141} {:cexpr "tmp___5"} boogie_si_record_i32($i116);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $i117 := $or.i32($i116, 1073741824);
    call {:si_unique_call 1142} {:cexpr "pipe"} boogie_si_record_i32($i117);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(10352, 1));
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p0);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} usb_fill_int_urb($p119, $p9, $i117, $p121, 0, hid_irq_out, $p122, $i70);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(10360, 1));
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $i124 := $load.i64($M.0, $p123);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p126, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p127, $i124);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p129, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $i132 := $or.i32($i131, 4);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p134, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p135, $i132);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i136 := $add.i32($i32, 1);
    call {:si_unique_call 1126} {:cexpr "n"} boogie_si_record_i32($i136);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.0, $p28);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i137);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $i139 := $ugt.i32($i138, $i136);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i139 == 1);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb47:
    assume $i139 == 1;
    assume {:verifier.code 0} true;
    $i32 := $i136;
    goto $bb47_dummy;

  $bb44:
    assume $i112 == 1;
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 12);
    goto $bb9;

  $bb41:
    assume $i108 == 1;
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb32:
    assume $i72 == 1;
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(24, 1));
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} $p77 := usb_alloc_urb(0, 208);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(24, 1));
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p78, $p77);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p77);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $i80 := $eq.i64($i79, 0);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    $p81 := $add.ref($add.ref($add.ref($p34, $mul.ref($i35, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.0, $p81);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $i84 := __create_pipe($p9, $i83);
    call {:si_unique_call 1136} {:cexpr "tmp___3"} boogie_si_record_i32($i84);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $i85 := $or.i32($i84, 1073741952);
    call {:si_unique_call 1137} {:cexpr "pipe"} boogie_si_record_i32($i85);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(24, 1));
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(32, 1));
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.37, $p1);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p0);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} usb_fill_int_urb($p87, $p9, $i85, $p89, $i90, hid_irq_in, $p91, $i70);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(40, 1));
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $i93 := $load.i64($M.0, $p92);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(24, 1));
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p96, $i93);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(24, 1));
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p98, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $i101 := $or.i32($i100, 4);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(24, 1));
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p104, $i101);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i80 == 1;
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 12);
    goto $bb9;

  $bb34:
    assume $i76 == 1;
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb26:
    assume $i66 == 1;
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $i67 := $M.38;
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb28;

  $bb29:
    assume $i68 == 1;
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $i69 := $M.38;
    call {:si_unique_call 1131} {:cexpr "interval"} boogie_si_record_i32($i69);
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $i70 := $i69;
    goto $bb31;

  $bb20:
    assume $i46 == 1;
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p9, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 3);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb22;

  $bb23:
    assume $i49 == 1;
    $p50 := $add.ref($add.ref($add.ref($p34, $mul.ref($i35, 72)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $i53 := $mul.i32($i52, 8);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} $i54 := fls($i53);
    call {:si_unique_call 1129} {:cexpr "interval"} boogie_si_record_i32($i54);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8088, 1));
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    $p57 := $add.ref($add.ref($add.ref($p34, $mul.ref($i35, 72)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} vslice_dummy_var_59 := printk.ref.ref.i32.i32(.str.61, $p56, $i59, $i54);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $i61 := $i54;
    goto $bb25;

  $bb16:
    assume $i39 == 1;
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 12);
    goto $bb9;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $M.37 := $store.i32($M.37, $p1, 4096);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p12, $mul.ref(0, 10768)), $mul.ref(20, 1));
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 4096);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb47_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8357;
}



const usbhid_stop: ref;

axiom usbhid_stop == $sub.ref(0, 440919);

procedure usbhid_stop($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.13, $M.15, $M.17, $M.18, $M.20, $M.22, $M.24;



implementation usbhid_stop($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i8;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 1156} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i6);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 1158} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i6, 0);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 1161} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8040, 1));
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 1024);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} clear_bit(8, $p26);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} spin_lock_irq($p27);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} set_bit(7, $p28);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} spin_unlock_irq($p29);
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(24, 1));
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} usb_kill_urb($p31);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} usb_kill_urb($p33);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(48, 1));
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} usb_kill_urb($p35);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} hid_cancel_delayed_stuff($p3);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8036, 1));
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 0);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(24, 1));
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} usb_free_urb($p38);
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(48, 1));
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} usb_free_urb($p40);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} usb_free_urb($p42);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(24, 1));
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $0.ref);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(48, 1));
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $0.ref);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $0.ref);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1)), $mul.ref(0, 1));
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} hid_free_buffers($p52, $p0);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1568)), $mul.ref(40, 1));
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $i25 := $and.i8($i24, $sub.i8(0, 9));
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i25);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} warn_slowpath_null(.str.25, 1178);
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usbhid_open: ref;

axiom usbhid_open == $sub.ref(0, 441951);

procedure usbhid_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.27, assertsPassed, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.24;



implementation usbhid_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i8;
  var $i25: i8;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i8;
  var $i30: i32;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} ldv_mutex_lock_18(hid_open_mut);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8084, 1));
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 1175} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8084, 1));
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 1);
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8084, 1));
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i5, 0);
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $i19 := $i44;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} ldv_mutex_unlock_19(hid_open_mut);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} $i13 := usb_autopm_get_interface($p12);
    call {:si_unique_call 1177} {:cexpr "res"} boogie_si_record_i32($i13);
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 1568)), $mul.ref(40, 1));
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $i24 := $and.i8($i23, $sub.i8(0, 9));
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $i25 := $or.i8($i24, 8);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i25);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} set_bit(12, $p26);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $i27 := hid_start_in($p0);
    call {:si_unique_call 1181} {:cexpr "res"} boogie_si_record_i32($i27);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i40 := $i27;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} usb_autopm_put_interface($p42);
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} msleep(50);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} clear_bit(12, $p43);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $i44 := $i40;
    goto $bb13;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i27, $sub.i32(0, 28));
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i29 == 1);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8084, 1));
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32($i32, 1);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8084, 1));
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 1568)), $mul.ref(40, 1));
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $i39 := $and.i8($i38, $sub.i8(0, 9));
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, $i39);
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 16);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $i40 := $i30;
    goto $bb12;

  $bb9:
    assume $i29 == 1;
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} hid_io_error($p0);
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb11;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8084, 1));
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i16, 1);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8084, 1));
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 5);
    goto $bb5;

  SeqInstr_259:
    assume !assertsPassed;
    return;
}



const usbhid_power: ref;

axiom usbhid_power == $sub.ref(0, 442983);

procedure usbhid_power($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usbhid_power($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    call {:si_unique_call 1186} {:cexpr "usbhid_power:arg:lvl"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} $i5 := usbhid_get_power($p0);
    call {:si_unique_call 1188} {:cexpr "r"} boogie_si_record_i32($i5);
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb9;

  $bb2:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb7:
    assume $i4 == 1;
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} usbhid_put_power($p0);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb9;
}



const usbhid_parse: ref;

axiom usbhid_parse == $sub.ref(0, 444015);

procedure usbhid_parse($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation usbhid_parse($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i16;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i1;
  var $p68: ref;
  var $p69: ref;
  var $i70: i16;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i1;
  var $i86: i64;
  var $p87: ref;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i1;
  var $i94: i64;
  var $p95: ref;
  var $p98: ref;
  var $i99: i16;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $p103: ref;
  var $p104: ref;
  var $i105: i8;
  var $i106: i32;
  var $i107: i1;
  var $i84: i32;
  var $i85: i32;
  var $i108: i32;
  var $i83: i32;
  var $i109: i1;
  var $i110: i1;
  var $i111: i32;
  var $i112: i1;
  var $i114: i64;
  var $p115: ref;
  var $i116: i64;
  var $i117: i1;
  var $i118: i32;
  var $i119: i1;
  var $p122: ref;
  var $i123: i8;
  var $i124: i32;
  var $p127: ref;
  var $i128: i8;
  var $i129: i32;
  var $i130: i32;
  var $i131: i1;
  var $i132: i32;
  var $i133: i1;
  var $i136: i32;
  var $i137: i1;
  var $i138: i32;
  var $i139: i1;
  var $p141: ref;
  var $i142: i32;
  var $i143: i32;
  var $p144: ref;
  var $i135: i32;
  var $i23: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1)), $mul.ref(0, 1));
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 48), 1568));
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 48), 1568)), $mul.ref(8, 1));
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} $p9 := interface_to_usbdev($p6);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(8, 1));
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(10, 1));
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} $i20 := usbhid_lookup_quirk($i14, $i19);
    call {:si_unique_call 1193} {:cexpr "quirks"} boogie_si_record_i32($i20);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 4);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 1);
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i41 := $i20;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p1);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} $i47 := __usb_get_extra_descriptor($p43, $i45, 33, $p46);
    call {:si_unique_call 1196} {:cexpr "tmp___0"} boogie_si_record_i32($i47);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.39, $p1);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.40, $p69);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(64, 1));
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.39, $p1);
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.40, $p74);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(72, 1));
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, $i76);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.39, $p1);
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 10)), $mul.ref(5, 1));
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.40, $p79);
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $i82 := $sgt.i32($i81, 0);
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $i83 := 0;
    assume {:branchcond $i82} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i83, 0);
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb40;

  $bb40:
    assume !($i109 == 1);
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $i110 := $ugt.i32($i83, 4096);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i114 := $zext.i32.i64($i83);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} $p115 := kmalloc($i114, 208);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $i116 := $p2i.ref.i64($p115);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $i117 := $eq.i64($i116, 0);
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.0, $p122);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i123);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} vslice_dummy_var_64 := hid_set_idle($p9, $i124, 0, 0);
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.0, $p127);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i32($i128);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} $i130 := hid_get_class_descriptor($p9, $i129, 34, $p115, $i83);
    call {:si_unique_call 1207} {:cexpr "ret"} boogie_si_record_i32($i130);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    $i131 := $slt.i32($i130, 0);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} $i136 := hid_parse_report($p0, $p115, $i83);
    call {:si_unique_call 1211} {:cexpr "ret"} boogie_si_record_i32($i136);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} kfree($p115);
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $i137 := $ne.i32($i136, 0);
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8040, 1));
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $i143 := $or.i32($i142, $i41);
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8040, 1));
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p144, $i143);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb60:
    assume $i137 == 1;
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.0, hid_debug);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i135 := $i136;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $i23 := $i135;
    goto $bb3;

  $bb62:
    assume $i139 == 1;
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} vslice_dummy_var_66 := printk.ref.ref(.str.71, .str.25);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb53:
    assume $i131 == 1;
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, hid_debug);
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} kfree($p115);
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $i135 := $i130;
    goto $bb58;

  $bb55:
    assume $i133 == 1;
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} vslice_dummy_var_65 := printk.ref.ref(.str.70, .str.25);
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb47:
    assume $i117 == 1;
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, hid_debug);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 12);
    goto $bb3;

  $bb49:
    assume $i119 == 1;
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} vslice_dummy_var_63 := printk.ref.ref(.str.69, .str.25);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i110 == 1;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, hid_debug);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 22);
    goto $bb3;

  $bb43:
    assume $i112 == 1;
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} vslice_dummy_var_62 := printk.ref.ref.i32(.str.68, .str.25, $i83);
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i109 == 1;
    goto $bb39;

  $bb27:
    assume $i82 == 1;
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $i84, $i85 := 0, 0;
    goto $bb30;

  $bb30:
    call $i86, $p87, $p90, $i91, $i92, $i93, $i94, $p95, $p98, $i99, $i100, $i101, $i102, $p103, $p104, $i105, $i106, $i107, $i84, $i85, $i108 := usbhid_parse_loop_$bb30($p1, $i86, $p87, $p90, $i91, $i92, $i93, $i94, $p95, $p98, $i99, $i100, $i101, $i102, $p103, $p104, $i105, $i106, $i107, $i84, $i85, $i108);
    goto $bb30_last;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i84);
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.39, $p1);
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($add.ref($p87, $mul.ref(0, 10)), $mul.ref(6, 1)), $mul.ref($i86, 4)), $mul.ref(0, 1));
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.40, $p90);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 34);
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i101 := $i85;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $i102 := $add.i32($i84, 1);
    call {:si_unique_call 1201} {:cexpr "n"} boogie_si_record_i32($i102);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.39, $p1);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 10)), $mul.ref(5, 1));
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.40, $p104);
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $i107 := $sgt.i32($i106, $i102);
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $i108 := $i101;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $i83 := $i108;
    goto $bb29;

  $bb35:
    assume $i107 == 1;
    assume {:verifier.code 0} true;
    $i84, $i85 := $i102, $i101;
    goto $bb35_dummy;

  $bb32:
    assume $i93 == 1;
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $i94 := $sext.i32.i64($i84);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.39, $p1);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($add.ref($p95, $mul.ref(0, 10)), $mul.ref(6, 1)), $mul.ref($i94, 4)), $mul.ref(2, 1));
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $i99 := $load.i16($M.40, $p98);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $i100 := $zext.i16.i32($i99);
    call {:si_unique_call 1200} {:cexpr "rsize"} boogie_si_record_i32($i100);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $i101 := $i100;
    goto $bb34;

  $bb14:
    assume $i48 == 1;
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i53 == 1);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p1);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} $i63 := __usb_get_extra_descriptor($p57, $i61, 33, $p62);
    call {:si_unique_call 1198} {:cexpr "tmp___1"} boogie_si_record_i32($i63);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb19:
    assume $i64 == 1;
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, hid_debug);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 19);
    goto $bb3;

  $bb21:
    assume $i66 == 1;
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} vslice_dummy_var_61 := printk.ref.ref(.str.67, .str.25);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb16:
    assume $i53 == 1;
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(7, 1));
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 1);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i33 == 1);
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(7, 1));
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 2);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i40 := $i20;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb13;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i20, 8);
    call {:si_unique_call 1194} {:cexpr "quirks"} boogie_si_record_i32($i39);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb8;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 19);
    goto $bb3;

  $bb35_dummy:
    assume false;
    return;

  $bb30_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8860;
}



const usbhid_request: ref;

axiom usbhid_request == $sub.ref(0, 445047);

procedure usbhid_request($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation usbhid_request($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    call {:si_unique_call 1214} {:cexpr "usbhid_request:arg:reqtype"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i2, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} usbhid_submit_report($p0, $p1, 0);
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb6;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} usbhid_submit_report($p0, $p1, $sub.i8(0, 128));
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const usbhid_raw_request: ref;

axiom usbhid_raw_request == $sub.ref(0, 446079);

procedure usbhid_raw_request($p0: ref, $i1: i8, $p2: ref, $i3: i64, $i4: i8, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usbhid_raw_request($p0: ref, $i1: i8, $p2: ref, $i3: i64, $i4: i8, $i5: i32) returns ($r: i32)
{
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $i18: i32;
  var $i14: i32;

  $bb0:
    call {:si_unique_call 1217} {:cexpr "usbhid_raw_request:arg:reportnum"} boogie_si_record_i8($i1);
    call {:si_unique_call 1218} {:cexpr "usbhid_raw_request:arg:len"} boogie_si_record_i64($i3);
    call {:si_unique_call 1219} {:cexpr "usbhid_raw_request:arg:rtype"} boogie_si_record_i8($i4);
    call {:si_unique_call 1220} {:cexpr "usbhid_raw_request:arg:reqtype"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i5, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 5);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i1);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i4);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} $i18 := usbhid_set_raw_report($p0, $i15, $p2, $i3, $i17);
    call {:si_unique_call 1222} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $i14 := $i18;
    goto $bb9;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i1);
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i4);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} $i13 := usbhid_get_raw_report($p0, $i10, $p2, $i3, $i12);
    call {:si_unique_call 1224} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb9;
}



const usbhid_output_report: ref;

axiom usbhid_output_report == $sub.ref(0, 447111);

procedure usbhid_output_report($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation usbhid_output_report($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1226} {:cexpr "usbhid_output_report:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1)), $mul.ref(0, 1));
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p1);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i24, $i25, $p26 := 0, $i2, $p1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i64.i32($i25);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} $i32 := usb_interrupt_msg($p13, $i30, $p26, $i31, $p3, 5000);
    call {:si_unique_call 1229} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i38 := $i32;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $i18 := $i38;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb8:
    assume $i33 == 1;
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.41, $p3);
    call {:si_unique_call 1230} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i24, 0);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i37 := $i34;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb13;

  $bb10:
    assume $i35 == 1;
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i34, 1);
    call {:si_unique_call 1231} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb12;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $i23 := $sub.i64($i2, 1);
    call {:si_unique_call 1227} {:cexpr "count"} boogie_si_record_i64($i23);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $i24, $i25, $p26 := 1, $i23, $p22;
    goto $bb7;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 38);
    goto $bb3;
}



const usbhid_idle: ref;

axiom usbhid_idle == $sub.ref(0, 448143);

procedure usbhid_idle($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usbhid_idle($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $i24: i32;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} {:cexpr "usbhid_idle:arg:report"} boogie_si_record_i32($i1);
    call {:si_unique_call 1233} {:cexpr "usbhid_idle:arg:idle"} boogie_si_record_i32($i2);
    call {:si_unique_call 1234} {:cexpr "usbhid_idle:arg:reqtype"} boogie_si_record_i32($i3);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1)), $mul.ref(0, 1));
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1)), $mul.ref(0, 1));
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p14, $mul.ref($sub.ref(0, 48), 1568)), $mul.ref(8, 1));
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    call {:si_unique_call 1235} {:cexpr "ifnum"} boogie_si_record_i32($i21);
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i3, 10);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} $i24 := hid_set_idle($p10, $i21, $i1, $i2);
    call {:si_unique_call 1237} {:cexpr "tmp"} boogie_si_record_i32($i24);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    $i23 := $i24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 22);
    goto $bb3;
}



const usb_interrupt_msg: ref;

axiom usb_interrupt_msg == $sub.ref(0, 449175);

procedure usb_interrupt_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_interrupt_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1238} {:cexpr "usb_interrupt_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1239} {:cexpr "usb_interrupt_msg:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1240} {:cexpr "usb_interrupt_msg:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1241} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1242} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usbhid_get_raw_report: ref;

axiom usbhid_get_raw_report == $sub.ref(0, 450207);

procedure usbhid_get_raw_report($p0: ref, $i1: i8, $p2: ref, $i3: i64, $i4: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usbhid_get_raw_report($p0: ref, $i1: i8, $p2: ref, $i3: i64, $i4: i8) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i16;
  var $i32: i32;
  var $i33: i16;
  var $i34: i32;
  var $i35: i32;
  var $i36: i16;
  var $i37: i32;
  var $i38: i16;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i16;
  var $i44: i16;
  var $i45: i32;
  var $i46: i16;
  var $i47: i32;
  var $i48: i1;
  var $i49: i1;
  var $i50: i32;
  var $i51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} {:cexpr "usbhid_get_raw_report:arg:report_number"} boogie_si_record_i8($i1);
    call {:si_unique_call 1244} {:cexpr "usbhid_get_raw_report:arg:count"} boogie_si_record_i64($i3);
    call {:si_unique_call 1245} {:cexpr "usbhid_get_raw_report:arg:report_type"} boogie_si_record_i8($i4);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1)), $mul.ref(0, 1));
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, $i1);
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i1);
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i23, $p24, $i25 := $i3, $p2, 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} $i26 := __create_pipe($p14, 0);
    call {:si_unique_call 1248} {:cexpr "tmp"} boogie_si_record_i32($i26);
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, $sub.i32(0, 2147483520));
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i4);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, 1);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    $i30 := $shl.i32($i29, 8);
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $i32 := $sext.i16.i32($i31);
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i16($i1);
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $i34 := $sext.i16.i32($i33);
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i32, $i34);
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i16($i42);
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i64.i16($i23);
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i16($i45);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $i47 := usb_control_msg($p14, $i27, 1, $sub.i8(0, 95), $i38, $i43, $p24, $i46, 5000);
    call {:si_unique_call 1250} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $i48 := $sgt.i32($i47, 0);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i51 := $i47;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $r := $i51;
    return;

  $bb4:
    assume $i48 == 1;
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i25, 0);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb6;

  $bb7:
    assume $i49 == 1;
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i47, 1);
    call {:si_unique_call 1251} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $i51 := $i50;
    goto $bb9;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64($i3, 1);
    call {:si_unique_call 1246} {:cexpr "count"} boogie_si_record_i64($i22);
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $i23, $p24, $i25 := $i22, $p21, 1;
    goto $bb3;
}



const usbhid_set_raw_report: ref;

axiom usbhid_set_raw_report == $sub.ref(0, 451239);

procedure usbhid_set_raw_report($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usbhid_set_raw_report($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i8) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i8;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i16;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i16;
  var $i41: i32;
  var $i42: i32;
  var $i43: i16;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i16;
  var $i49: i16;
  var $i50: i32;
  var $i51: i16;
  var $i52: i32;
  var $i53: i1;
  var $i54: i1;
  var $i55: i32;
  var $i56: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} {:cexpr "usbhid_set_raw_report:arg:reportnum"} boogie_si_record_i32($i1);
    call {:si_unique_call 1253} {:cexpr "usbhid_set_raw_report:arg:count"} boogie_si_record_i64($i3);
    call {:si_unique_call 1254} {:cexpr "usbhid_set_raw_report:arg:rtype"} boogie_si_record_i8($i4);
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1)), $mul.ref(0, 1));
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i4);
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i1);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, $i25);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p2);
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i31, $p32, $i33 := $i3, $p2, 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} $i34 := __create_pipe($p14, 0);
    call {:si_unique_call 1257} {:cexpr "tmp"} boogie_si_record_i32($i34);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i34, $sub.i32(0, 2147483648));
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i16($i4);
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, 1);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $i39 := $shl.i32($i38, 8);
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i1);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i39, $i41);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i16($i42);
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i64.i16($i31);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i50);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} $i52 := usb_control_msg($p14, $i35, 9, 33, $i43, $i48, $p32, $i51, 5000);
    call {:si_unique_call 1259} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    $i53 := $sgt.i32($i52, 0);
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i56 := $i52;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $r := $i56;
    return;

  $bb10:
    assume $i53 == 1;
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i33, 0);
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb12;

  $bb13:
    assume $i54 == 1;
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i52, 1);
    call {:si_unique_call 1260} {:cexpr "ret"} boogie_si_record_i32($i55);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    $i56 := $i55;
    goto $bb15;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $i30 := $sub.i64($i3, 1);
    call {:si_unique_call 1255} {:cexpr "count"} boogie_si_record_i64($i30);
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    $i31, $p32, $i33 := $i30, $p29, 1;
    goto $bb9;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8040, 1));
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 131072);
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb3;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 0);
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const usbhid_submit_report: ref;

axiom usbhid_submit_report == $sub.ref(0, 452271);

procedure usbhid_submit_report($p0: ref, $p1: ref, $i2: i8);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation usbhid_submit_report($p0: ref, $p1: ref, $i2: i8)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} {:cexpr "usbhid_submit_report:arg:dir"} boogie_si_record_i8($i2);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} $p7 := spinlock_check($p6);
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} $i8 := _raw_spin_lock_irqsave($p7);
    call {:si_unique_call 1264} {:cexpr "flags"} boogie_si_record_i64($i8);
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i2);
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} __usbhid_submit_report($p0, $p1, $i10);
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} spin_unlock_irqrestore($p11, $i8);
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    return;
}



const __usbhid_submit_report: ref;

axiom __usbhid_submit_report == $sub.ref(0, 453303);

procedure __usbhid_submit_report($p0: ref, $p1: ref, $i2: i8);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation __usbhid_submit_report($p0: ref, $p1: ref, $i2: i8)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i64;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i64;
  var $p67: ref;
  var $i68: i8;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $p74: ref;
  var $i75: i64;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $p102: ref;
  var $i103: i8;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i64;
  var $p116: ref;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i120: i64;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $i126: i1;
  var $p127: ref;
  var $p128: ref;
  var $i129: i8;
  var $i130: i32;
  var $i131: i64;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i8;
  var $i138: i32;
  var $i139: i64;
  var $p142: ref;
  var $p143: ref;
  var $i144: i8;
  var $i145: i32;
  var $i146: i64;
  var $p149: ref;
  var $i150: i8;
  var $p151: ref;
  var $p152: ref;
  var $i153: i32;
  var $i154: i1;
  var $p156: ref;
  var $i157: i64;
  var $i158: i64;
  var $i159: i64;
  var $i160: i64;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $i174: i32;
  var $i175: i1;
  var $p177: ref;
  var $p178: ref;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} {:cexpr "__usbhid_submit_report:arg:dir"} boogie_si_record_i8($i2);
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8040, 1));
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 8);
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} $i13 := constant_test_bit(7, $p12);
    call {:si_unique_call 1269} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(6208, 1));
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.0, $p97);
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i99, 1);
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $i101 := $and.i32($i100, 255);
    call {:si_unique_call 1288} {:cexpr "head"} boogie_si_record_i32($i101);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(6209, 1));
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.0, $p102);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i101, $i104);
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i2);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 0);
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(6208, 1));
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.0, $p136);
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i137);
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $i139 := $sext.i32.i64($i138);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(64, 1)), $mul.ref($i139, 24)), $mul.ref(8, 1));
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p142, $p1);
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(6208, 1));
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.0, $p143);
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i32($i144);
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $i146 := $sext.i32.i64($i145);
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(64, 1)), $mul.ref($i146, 24)), $mul.ref(0, 1));
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p149, $i2);
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    $i150 := $trunc.i32.i8($i101);
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(6208, 1));
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p151, $i150);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} $i153 := constant_test_bit(1, $p152);
    call {:si_unique_call 1294} {:cexpr "tmp___5"} boogie_si_record_i32($i153);
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, 0);
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i154 == 1);
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(6232, 1));
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $i157 := $load.i64($M.0, $p156);
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $i158 := $load.i64($M.0, jiffies);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $i159 := $sub.i64($i157, $i158);
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    $i160 := $add.i64($i159, 1250);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $i161 := $slt.i64($i160, 0);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb46:
    assume $i161 == 1;
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.0, $p162);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} usb_autopm_get_interface_no_resume($p163);
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(48, 1));
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.0, $p164);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} usb_block_urb($p165);
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} spin_unlock($p166);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(48, 1));
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.0, $p167);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} vslice_dummy_var_71 := usb_unlink_urb($p168);
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} spin_lock($p170);
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(48, 1));
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.0, $p171);
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} usb_unpoison_urb($p172);
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} $i174 := constant_test_bit(1, $p173);
    call {:si_unique_call 1303} {:cexpr "tmp___4"} boogie_si_record_i32($i174);
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i174, 0);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.0, $p177);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} usb_autopm_put_interface_async($p178);
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb48:
    assume $i175 == 1;
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} vslice_dummy_var_72 := usbhid_restart_ctrl_queue($p5);
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb43:
    assume $i154 == 1;
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} vslice_dummy_var_70 := usbhid_restart_ctrl_queue($p5);
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb37:
    assume $i108 == 1;
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} $p109 := hid_alloc_report_buf($p1, 32);
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(6208, 1));
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    $i113 := $sext.i32.i64($i112);
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(64, 1)), $mul.ref($i113, 24)), $mul.ref(16, 1));
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p116, $p109);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(6208, 1));
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.0, $p117);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    $i120 := $sext.i32.i64($i119);
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(64, 1)), $mul.ref($i120, 24)), $mul.ref(16, 1));
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    $i126 := $eq.i64($i125, 0);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(6208, 1));
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.0, $p128);
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $i131 := $sext.i32.i64($i130);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(64, 1)), $mul.ref($i131, 24)), $mul.ref(16, 1));
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} hid_output_report($p1, $p135);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb39:
    assume $i126 == 1;
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} dev_warn.ref.ref($p127, .str.23);
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb34:
    assume $i105 == 1;
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} dev_warn.ref.ref($p106, .str.22);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i2);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb13;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 2088)), $mul.ref(20, 1));
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 1);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb13;

  $bb16:
    assume $i23 == 1;
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10344, 1));
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 1);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 63);
    call {:si_unique_call 1270} {:cexpr "head"} boogie_si_record_i32($i28);
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10345, 1));
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i28, $i31);
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} $p34 := hid_alloc_report_buf($p1, 32);
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10344, 1));
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(6248, 1)), $mul.ref($i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, $p34);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10344, 1));
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i44);
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(6248, 1)), $mul.ref($i45, 16)), $mul.ref(8, 1));
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, 0);
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10344, 1));
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i55);
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(6248, 1)), $mul.ref($i56, 16)), $mul.ref(8, 1));
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} hid_output_report($p1, $p60);
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10344, 1));
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i63);
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(6248, 1)), $mul.ref($i64, 16)), $mul.ref(0, 1));
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, $p1);
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i28);
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10344, 1));
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, $i68);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $i71 := constant_test_bit(2, $p70);
    call {:si_unique_call 1276} {:cexpr "tmp___2"} boogie_si_record_i32($i71);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 0);
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i72 == 1);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10368, 1));
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, $p74);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.0, jiffies);
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    $i77 := $sub.i64($i75, $i76);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    $i78 := $add.i64($i77, 1250);
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $i79 := $slt.i64($i78, 0);
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb27:
    assume $i79 == 1;
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} usb_autopm_get_interface_no_resume($p81);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} usb_block_urb($p83);
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} spin_unlock($p84);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} vslice_dummy_var_68 := usb_unlink_urb($p86);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10376, 1));
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} spin_lock($p88);
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} usb_unpoison_urb($p90);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $i92 := constant_test_bit(2, $p91);
    call {:si_unique_call 1285} {:cexpr "tmp___1"} boogie_si_record_i32($i92);
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 0);
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p5, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} usb_autopm_put_interface_async($p96);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb29:
    assume $i93 == 1;
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} vslice_dummy_var_69 := usbhid_restart_out_queue($p5);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb24:
    assume $i72 == 1;
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} vslice_dummy_var_67 := usbhid_restart_out_queue($p5);
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i51 == 1;
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} dev_warn.ref.ref($p52, .str.21);
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb18:
    assume $i32 == 1;
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} dev_warn.ref.ref($p33, .str.20);
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i2);
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 128);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const hid_alloc_report_buf: ref;

axiom hid_alloc_report_buf == $sub.ref(0, 454335);

procedure hid_alloc_report_buf($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation hid_alloc_report_buf($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} {:cexpr "hid_alloc_report_buf:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $p2 := external_alloc();
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const hid_output_report: ref;

axiom hid_output_report == $sub.ref(0, 455367);

procedure hid_output_report($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation hid_output_report($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    return;
}



const usb_autopm_get_interface_no_resume: ref;

axiom usb_autopm_get_interface_no_resume == $sub.ref(0, 456399);

procedure usb_autopm_get_interface_no_resume($p0: ref);
  free requires assertsPassed;



implementation usb_autopm_get_interface_no_resume($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    return;
}



const usb_block_urb: ref;

axiom usb_block_urb == $sub.ref(0, 457431);

procedure usb_block_urb($p0: ref);
  free requires assertsPassed;



implementation usb_block_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 458463);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} _raw_spin_unlock($p2);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    return;
}



const usb_unlink_urb: ref;

axiom usb_unlink_urb == $sub.ref(0, 459495);

procedure usb_unlink_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_unlink_urb($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1309} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1310} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 460527);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} _raw_spin_lock($p2);
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    return;
}



const usb_unpoison_urb: ref;

axiom usb_unpoison_urb == $sub.ref(0, 461559);

procedure usb_unpoison_urb($p0: ref);
  free requires assertsPassed;



implementation usb_unpoison_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 462591);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 463623);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    return;
}



const __usb_get_extra_descriptor: ref;

axiom __usb_get_extra_descriptor == $sub.ref(0, 464655);

procedure __usb_get_extra_descriptor($p0: ref, $i1: i32, $i2: i8, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __usb_get_extra_descriptor($p0: ref, $i1: i32, $i2: i8, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1312} {:cexpr "__usb_get_extra_descriptor:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1313} {:cexpr "__usb_get_extra_descriptor:arg:arg2"} boogie_si_record_i8($i2);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1314} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1315} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const hid_parse_report: ref;

axiom hid_parse_report == $sub.ref(0, 465687);

procedure hid_parse_report($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation hid_parse_report($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1316} {:cexpr "hid_parse_report:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1317} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1318} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usbhid_get_power: ref;

axiom usbhid_get_power == $sub.ref(0, 466719);

procedure usbhid_get_power($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usbhid_get_power($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} $i6 := usb_autopm_get_interface($p5);
    call {:si_unique_call 1320} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usbhid_put_power: ref;

axiom usbhid_put_power == $sub.ref(0, 467751);

procedure usbhid_put_power($p0: ref);
  free requires assertsPassed;



implementation usbhid_put_power($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(8, 1));
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} usb_autopm_put_interface($p5);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    return;
}



const usb_autopm_put_interface: ref;

axiom usb_autopm_put_interface == $sub.ref(0, 468783);

procedure usb_autopm_put_interface($p0: ref);
  free requires assertsPassed;



implementation usb_autopm_put_interface($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    return;
}



const usb_autopm_get_interface: ref;

axiom usb_autopm_get_interface == $sub.ref(0, 469815);

procedure usb_autopm_get_interface($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_autopm_get_interface($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1322} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1323} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_18: ref;

axiom ldv_mutex_lock_18 == $sub.ref(0, 470847);

procedure ldv_mutex_lock_18($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_lock_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} ldv_mutex_lock_hid_open_mut($p0);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} mutex_lock($p0);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 471879);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_19: ref;

axiom ldv_mutex_unlock_19 == $sub.ref(0, 472911);

procedure ldv_mutex_unlock_19($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_unlock_19($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} ldv_mutex_unlock_hid_open_mut($p0);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} mutex_unlock($p0);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;
}



const usb_free_urb: ref;

axiom usb_free_urb == $sub.ref(0, 473943);

procedure usb_free_urb($p0: ref);
  free requires assertsPassed;



implementation usb_free_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    return;
}



const hid_free_buffers: ref;

axiom hid_free_buffers == $sub.ref(0, 474975);

procedure hid_free_buffers($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation hid_free_buffers($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(20, 1));
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(32, 1));
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(40, 1));
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} usb_free_coherent($p0, $i7, $p9, $i11);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(20, 1));
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(10352, 1));
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(10360, 1));
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} usb_free_coherent($p0, $i14, $p16, $i18);
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(56, 1));
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} kfree($p21);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(20, 1));
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(6216, 1));
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(6224, 1));
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} usb_free_coherent($p0, $i24, $p26, $i28);
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_coherent: ref;

axiom usb_free_coherent == $sub.ref(0, 476007);

procedure usb_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation usb_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} {:cexpr "usb_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1334} {:cexpr "usb_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    return;
}



const hid_find_max_report: ref;

axiom hid_find_max_report == $sub.ref(0, 477039);

procedure hid_find_max_report($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation hid_find_max_report($p0: ref, $i1: i32, $p2: ref)
{
  var $i3: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} {:cexpr "hid_find_max_report:arg:type"} boogie_si_record_i32($i1);
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i1);
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(80, 1)), $mul.ref($i3, 2072)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2088)), $mul.ref(0, 1));
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i1);
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(80, 1)), $mul.ref($i12, 2072)), $mul.ref(8, 1));
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i11, $i16);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    $p18 := $p8;
    goto $bb4;

  $bb4:
    call $p19, $i20, $i21, $i22, $i23, $p26, $i27, $i28, $i29, $i30, $i31, $p33, $p34, $p35, $p36, $i37, $i38, $p18 := hid_find_max_report_loop_$bb4($p0, $i1, $p2, $i16, $p19, $i20, $i21, $i22, $i23, $p26, $i27, $i28, $i29, $i30, $i31, $p33, $p34, $p35, $p36, $i37, $i38, $p18);
    goto $bb4_last;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 2088)), $mul.ref(2076, 1));
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i20, 1);
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    $i22 := $lshr.i32($i21, 3);
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i1);
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(80, 1)), $mul.ref($i23, 2072)), $mul.ref(0, 1));
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i22, $i27);
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, 1);
    call {:si_unique_call 1336} {:cexpr "size"} boogie_si_record_i32($i29);
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p2);
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    $i31 := $ult.i32($i30, $i29);
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 2088)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 2088)), $mul.ref(0, 1));
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, $i16);
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i38 == 1);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $p18 := $p34;
    goto $bb9_dummy;

  $bb6:
    assume $i31 == 1;
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i29);
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9523;
}



const hid_alloc_buffers: ref;

axiom hid_alloc_buffers == $sub.ref(0, 478071);

procedure hid_alloc_buffers($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation hid_alloc_buffers($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $i42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(20, 1));
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(40, 1));
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} $p9 := usb_alloc_coherent($p0, $i7, 208, $p8);
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(32, 1));
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p9);
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(20, 1));
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(10360, 1));
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $p15 := usb_alloc_coherent($p0, $i13, 208, $p14);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(10352, 1));
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p15);
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $p17 := kmalloc(8, 208);
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(56, 1));
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p17);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(20, 1));
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(6224, 1));
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} $p24 := usb_alloc_coherent($p0, $i22, 208, $p23);
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(6216, 1));
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p24);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(32, 1));
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i29 == 1);
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(10352, 1));
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i33 == 1);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(56, 1));
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i37 == 1);
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 10768)), $mul.ref(6216, 1));
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 1);
    goto $bb10;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb2;
}



const fls: ref;

axiom fls == $sub.ref(0, 479103);

procedure fls($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fls($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} {:cexpr "fls:arg:x"} boogie_si_record_i32($i0);
    call {:si_unique_call 1342} $i1 := devirtbounce.4(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 1343} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_alloc_urb: ref;

axiom usb_alloc_urb == $sub.ref(0, 480135);

procedure usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} {:cexpr "usb_alloc_urb:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1345} {:cexpr "usb_alloc_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} $p2 := external_alloc();
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const hid_irq_in: ref;

axiom hid_irq_in == $sub.ref(0, 481167);

procedure hid_irq_in($p0: ref);



const usb_fill_int_urb: ref;

axiom usb_fill_int_urb == $sub.ref(0, 482199);

procedure usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} {:cexpr "usb_fill_int_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 1348} {:cexpr "usb_fill_int_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    call {:si_unique_call 1349} {:cexpr "usb_fill_int_urb:arg:interval"} boogie_si_record_i32($i7);
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i2);
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p3);
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i4);
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p5);
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p6);
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 3);
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i16 == 1);
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 5);
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i7);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $sub.i32(0, 1));
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  $bb2:
    call {:si_unique_call 1350} {:cexpr "usb_fill_int_urb:arg:_max1"} boogie_si_record_i32($i7);
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i7, 1);
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 16);
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    $i23 := 16;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, $sub.i32(0, 1));
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32(1, $i24);
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    goto $bb11;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    $i21 := $i7;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;
}



const hid_irq_out: ref;

axiom hid_irq_out == $sub.ref(0, 483231);

procedure hid_irq_out($p0: ref);



const hid_ctrl: ref;

axiom hid_ctrl == $sub.ref(0, 484263);

procedure hid_ctrl($p0: ref);



const usb_fill_control_urb: ref;

axiom usb_fill_control_urb == $sub.ref(0, 485295);

procedure usb_fill_control_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $i5: i32, $p6: ref, $p7: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_control_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $i5: i32, $p6: ref, $p7: ref)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} {:cexpr "usb_fill_control_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 1352} {:cexpr "usb_fill_control_urb:arg:buffer_length"} boogie_si_record_i32($i5);
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i2);
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p3);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p4);
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i5);
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p6);
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p7);
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    return;
}



const usbhid_init_reports: ref;

axiom usbhid_init_reports == $sub.ref(0, 486327);

procedure usbhid_init_reports($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation usbhid_init_reports($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p19: ref;
  var $p27: ref;
  var $p28: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p39: ref;
  var $i47: i32;
  var $i48: i1;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i50: i32;
  var $i51: i32;
  var $i65: i32;
  var $i49: i32;
  var $i66: i1;
  var $p67: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(8040, 1));
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 512);
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(80, 1));
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p28, $mul.ref(2, 2072)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 2088)), $mul.ref(0, 1));
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p28, $mul.ref(2, 2072)), $mul.ref(8, 1));
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i35, $i37);
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} $i47 := usbhid_wait_io($p0);
    call {:si_unique_call 1356} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $i49 := 0;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i49, 0);
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb34:
    assume $i66 == 1;
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} dev_warn.ref.ref($p67, .str);
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb20:
    assume $i48 == 1;
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    $i50, $i51 := $i47, 0;
    goto $bb23;

  $bb23:
    call $i52, $p53, $i54, $i55, $p56, $p57, $p58, $i59, $i60, $p61, $p62, $i63, $i64, $i50, $i51, $i65 := usbhid_init_reports_loop_$bb23($p0, $p3, $i52, $p53, $i54, $i55, $p56, $p57, $p58, $i59, $i60, $p61, $p62, $i63, $i64, $i50, $i51, $i65);
    goto $bb23_last;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i51, $i50);
    call {:si_unique_call 1357} {:cexpr "err"} boogie_si_record_i32($i52);
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} $i54 := constant_test_bit(1, $p53);
    call {:si_unique_call 1359} {:cexpr "tmp"} boogie_si_record_i32($i54);
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} $i59 := constant_test_bit(2, $p58);
    call {:si_unique_call 1362} {:cexpr "tmp___0"} boogie_si_record_i32($i59);
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} $i63 := usbhid_wait_io($p0);
    call {:si_unique_call 1365} {:cexpr "ret"} boogie_si_record_i32($i63);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    $i65 := $i52;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $i49 := $i65;
    goto $bb22;

  $bb31:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i50, $i51 := $i63, $i52;
    goto $bb31_dummy;

  $bb28:
    assume $i60 == 1;
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} usb_kill_urb($p62);
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i55 == 1;
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 10768)), $mul.ref(48, 1));
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} usb_kill_urb($p57);
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb12:
    assume $i38 == 1;
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    $p39 := $p32;
    goto $bb15;

  $bb15:
    call $p41, $p42, $p43, $p44, $i45, $i46, $p39 := usbhid_init_reports_loop_$bb15($p0, $i37, $p41, $p42, $p43, $p44, $i45, $i46, $p39);
    goto $bb15_last;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} usbhid_submit_report($p0, $p39, $sub.i8(0, 128));
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 2088)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 2088)), $mul.ref(0, 1));
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, $i37);
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i46 == 1);
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb17:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $p39 := $p42;
    goto $bb17_dummy;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(80, 1));
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 2072)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2088)), $mul.ref(0, 1));
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 2072)), $mul.ref(8, 1));
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i15, $i17);
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i18 == 1;
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    $p19 := $p12;
    goto $bb6;

  $bb6:
    call $p21, $p22, $p23, $p24, $i25, $i26, $p19 := usbhid_init_reports_loop_$bb6($p0, $i17, $p21, $p22, $p23, $p24, $i25, $i26, $p19);
    goto $bb6_last;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} usbhid_submit_report($p0, $p19, $sub.i8(0, 128));
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 2088)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 2088)), $mul.ref(0, 1));
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, $i17);
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $p19 := $p22;
    goto $bb8_dummy;

  $bb31_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9740;

  $bb17_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9723;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9697;
}



const usbhid_set_leds: ref;

axiom usbhid_set_leds == $sub.ref(0, 487359);

procedure usbhid_set_leds($p0: ref);
  free requires assertsPassed;
  modifies $M.42, $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation usbhid_set_leds($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $i2 := hid_find_field_early($p0, 524288, 1, $p1);
    call {:si_unique_call 1369} {:cexpr "offset"} boogie_si_record_i32($i2);
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.42, $p1);
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} vslice_dummy_var_73 := hid_set_field($p4, $i2, 0);
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.42, $p1);
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} usbhid_submit_report($p0, $p8, 0);
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const device_set_wakeup_enable: ref;

axiom device_set_wakeup_enable == $sub.ref(0, 488391);

procedure device_set_wakeup_enable($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;



implementation device_set_wakeup_enable($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1372} {:cexpr "device_set_wakeup_enable:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1373} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1374} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const hid_find_field_early: ref;

axiom hid_find_field_early == $sub.ref(0, 489423);

procedure hid_find_field_early($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42;



implementation hid_find_field_early($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i22: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i29: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i21: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p17: ref;
  var $i44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} {:cexpr "hid_find_field_early:arg:page"} boogie_si_record_i32($i1);
    call {:si_unique_call 1376} {:cexpr "hid_find_field_early:arg:hid_code"} boogie_si_record_i32($i2);
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(80, 1)), $mul.ref(1, 2072)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2088)), $mul.ref(0, 1));
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(80, 1)), $mul.ref(1, 2072)), $mul.ref(8, 1));
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i11, $i15);
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    $r := $i44;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    $p17 := $p8;
    goto $bb4;

  $bb4:
    call $p18, $i19, $i20, $i22, $p24, $p25, $p26, $i27, $i28, $p30, $p31, $i32, $p34, $i35, $i36, $i37, $p38, $i39, $i40, $i41, $p42, $i43, $i45, $i46, $i47, $i29, $i48, $i49, $i50, $i21, $p52, $p53, $p54, $p55, $i56, $i57, $p17 := hid_find_field_early_loop_$bb4($i1, $i2, $i15, $p18, $i19, $i20, $i22, $p24, $p25, $p26, $i27, $i28, $p30, $p31, $i32, $p34, $i35, $i36, $i37, $p38, $i39, $i40, $i41, $p42, $i43, $i45, $i46, $i47, $i29, $i48, $i49, $i50, $i21, $p52, $p53, $p54, $p55, $i56, $i57, $p17);
    goto $bb4_last;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 2088)), $mul.ref(2072, 1));
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    $i20 := $ult.i32(0, $i19);
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 2088)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 2088)), $mul.ref(0, 1));
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, $i15);
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i57 == 1);
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb29:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $p17 := $p53;
    goto $bb29_dummy;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb9;

  $bb9:
    call $i22, $p24, $p25, $p26, $i27, $i28, $p30, $p31, $i32, $p34, $i35, $i36, $i37, $p38, $i39, $i40, $i41, $p42, $i43, $i45, $i46, $i47, $i29, $i48, $i49, $i50, $i21 := hid_find_field_early_loop_$bb9($i1, $i2, $p18, $i22, $p24, $p25, $p26, $i27, $i28, $p30, $p31, $i32, $p34, $i35, $i36, $i37, $p38, $i39, $i40, $i41, $p42, $i43, $i45, $i46, $i47, $i29, $i48, $i49, $i50, $i21, $p17);
    goto $bb9_last;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref($i22, 8));
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    $i28 := $ult.i32(0, $i27);
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i21, 1);
    call {:si_unique_call 1378} {:cexpr "i"} boogie_si_record_i32($i48);
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p18);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $i50 := $ult.i32($i48, $i49);
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i50 == 1);
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb26:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i21 := $i48;
    goto $bb26_dummy;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb14;

  $bb14:
    call $p30, $p31, $i32, $p34, $i35, $i36, $i37, $p38, $i39, $i40, $i41, $p42, $i43, $i45, $i46, $i47, $i29 := hid_find_field_early_loop_$bb14($i1, $i2, $p25, $p26, $p30, $p31, $i32, $p34, $i35, $i36, $i37, $p38, $i39, $i40, $i41, $p42, $i43, $i45, $i46, $i47, $i29);
    goto $bb14_last;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p25, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i29);
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p31, $mul.ref($i32, 20)), $mul.ref(0, 1));
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, $sub.i32(0, 65536));
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, $i1);
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i29, 1);
    call {:si_unique_call 1377} {:cexpr "j"} boogie_si_record_i32($i45);
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p26);
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    $i47 := $ult.i32($i45, $i46);
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i47 == 1);
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb23:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i29 := $i45;
    goto $bb23_dummy;

  $bb16:
    assume $i37 == 1;
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p31, $mul.ref($i32, 20)), $mul.ref(0, 1));
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 65535);
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, $i2);
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $p42, $i43 := $p25, $i29;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb18;

  $bb19:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p3, $p42);
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb21;

  $bb23_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9818;

  $bb26_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9807;

  $bb29_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9799;
}



const hid_set_field: ref;

axiom hid_set_field == $sub.ref(0, 490455);

procedure hid_set_field($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation hid_set_field($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1379} {:cexpr "hid_set_field:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1380} {:cexpr "hid_set_field:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1381} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1382} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const hid_input_report: ref;

axiom hid_input_report == $sub.ref(0, 491487);

procedure hid_input_report($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32);



const hid_check_keys_pressed: ref;

axiom hid_check_keys_pressed == $sub.ref(0, 492519);

procedure hid_check_keys_pressed($p0: ref) returns ($r: i32);



const usb_alloc_coherent: ref;

axiom usb_alloc_coherent == $sub.ref(0, 493551);

procedure usb_alloc_coherent($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_alloc_coherent($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} {:cexpr "usb_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1384} {:cexpr "usb_alloc_coherent:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $p4 := external_alloc();
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const hiddev_devnode: ref;

axiom hiddev_devnode == $sub.ref(0, 494583);

procedure hiddev_devnode($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation hiddev_devnode($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} $p2 := dev_name($p0);
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} $p3 := kasprintf.i32.ref.ref(208, .str.81, $p2);
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 495615);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1));
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} $p9 := kobject_name($p8);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kasprintf: ref;

axiom kasprintf == $sub.ref(0, 496647);

procedure kasprintf.i32.ref.ref($i0: i32, $p1: ref, p.2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kasprintf.i32.ref.ref($i0: i32, $p1: ref, p.2: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} {:cexpr "kasprintf:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} $p2 := external_alloc();
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 497679);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const noop_llseek: ref;

axiom noop_llseek == $sub.ref(0, 498711);

procedure noop_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation noop_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1391} {:cexpr "noop_llseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1392} {:cexpr "noop_llseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1393} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 1394} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const hiddev_read: ref;

axiom hiddev_read == $sub.ref(0, 499743);

procedure hiddev_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.44, $M.45, $CurrAddr, $M.46, assertsPassed;



implementation hiddev_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p72: ref;
  var $i73: i64;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $i51: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $p83: ref;
  var $i84: i64;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $i88: i32;
  var $i89: i1;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i64;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $i105: i32;
  var $i106: i64;
  var $p109: ref;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i64;
  var $p117: ref;
  var $i118: i32;
  var $p119: ref;
  var $i120: i64;
  var $p121: ref;
  var $p122: ref;
  var $i123: i64;
  var $i124: i1;
  var $p125: ref;
  var $i126: i32;
  var $i127: i32;
  var $p129: ref;
  var $i130: i32;
  var $i131: i64;
  var $p134: ref;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $i138: i32;
  var $i139: i32;
  var $i140: i1;
  var $i141: i64;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $i147: i64;
  var $p148: ref;
  var $i149: i64;
  var $i150: i1;
  var $p151: ref;
  var $i152: i32;
  var $i153: i32;
  var $i128: i32;
  var $p154: ref;
  var $i155: i32;
  var $i156: i32;
  var $i157: i32;
  var $p158: ref;
  var $i159: i32;
  var $i160: i32;
  var $i161: i1;
  var $i91: i32;
  var $i163: i32;
  var $i164: i64;
  var $i165: i1;
  var $i166: i32;
  var $i162: i32;
  var $i90: i32;
  var $i167: i1;
  var $i34: i32;
  var $i168: i32;
  var $i33: i32;
  var $p169: ref;
  var $i170: i64;
  var $i28: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1398} {:cexpr "hiddev_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} $p7 := get_current();
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p7);
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, autoremove_wake_function);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p12);
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p15);
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49160, 1));
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 1);
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    $i25 := (if $i24 == 1 then 24 else 8);
    call {:si_unique_call 1400} {:cexpr "event_size"} boogie_si_record_i32($i25);
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    $i27 := $ugt.i64($i26, $i2);
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49200, 1));
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} $i30 := ldv_mutex_lock_interruptible_99($p29);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    call {:si_unique_call 1402} {:cexpr "retval"} boogie_si_record_i32($i30);
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i30, 0);
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    $i33 := $i30;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49200, 1));
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} ldv_mutex_unlock_105($p169);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    $i170 := $sext.i32.i64($i33);
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    $i28 := $i170;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    $i34 := $i30;
    goto $bb11;

  $bb11:
    call $p35, $i36, $p37, $i38, $i39, $p40, $p41, $p42, $p43, $i44, $p45, $i46, $i47, $p48, $i49, $i50, $p52, $p53, $p54, $i55, $i56, $p57, $i58, $i59, $i60, $p61, $p62, $i63, $i64, $p68, $p69, $p70, $i71, $p72, $i73, $i74, $i75, $i76, $i51, $p77, $p78, $p79, $i80, $i81, $i82, $p85, $i86, $p87, $i88, $i89, $p92, $i93, $i94, $i95, $p96, $i97, $i98, $p101, $i102, $i103, $p104, $i105, $i106, $p109, $i110, $p111, $p112, $i113, $i114, $p117, $i118, $p119, $i120, $p121, $p122, $i123, $i124, $i126, $i127, $p129, $i130, $i131, $p134, $i135, $i136, $p137, $i138, $i139, $i140, $i141, $p142, $p143, $p144, $p145, $i146, $i147, $p148, $i149, $i150, $i152, $i153, $i128, $p154, $i155, $i156, $i157, $p158, $i159, $i160, $i161, $i91, $i163, $i164, $i165, $i166, $i162, $i90, $i167, $i34, $i168 := hiddev_read_loop_$bb11($p0, $p1, $i2, $p4, $p5, $p6, $p20, $i25, $p35, $i36, $p37, $i38, $i39, $p40, $p41, $p42, $p43, $i44, $p45, $i46, $i47, $p48, $i49, $i50, $p52, $p53, $p54, $i55, $i56, $p57, $i58, $i59, $i60, $p61, $p62, $i63, $i64, $p68, $p69, $p70, $i71, $p72, $i73, $i74, $i75, $i76, $i51, $p77, $p78, $p79, $i80, $i81, $i82, $p85, $i86, $p87, $i88, $i89, $p92, $i93, $i94, $i95, $p96, $i97, $i98, $p101, $i102, $i103, $p104, $i105, $i106, $p109, $i110, $p111, $p112, $i113, $i114, $p117, $i118, $p119, $i120, $p121, $p122, $i123, $i124, $i126, $i127, $p129, $i130, $i131, $p134, $i135, $i136, $p137, $i138, $i139, $i140, $i141, $p142, $p143, $p144, $p145, $i146, $i147, $p148, $i149, $i150, $i152, $i153, $i128, $p154, $i155, $i156, $i157, $p158, $i159, $i160, $i161, $i91, $i163, $i164, $i165, $i166, $i162, $i90, $i167, $i34, $i168);
    goto $bb11_last;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49152, 1));
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i36, $i38);
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i80 := $i34;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $i82 := $i80;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49152, 1));
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i86, $i88);
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $i90 := $i80;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i90, 0);
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    $i168 := $i90;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    $i33 := $i168;
    goto $bb10;

  $bb69:
    assume $i167 == 1;
    assume {:verifier.code 0} true;
    $i34 := $i90;
    goto $bb69_dummy;

  $bb41:
    assume $i89 == 1;
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    $i91 := $i80;
    goto $bb44;

  $bb44:
    call $p92, $i93, $i94, $i95, $p96, $i97, $i98, $p101, $i102, $i103, $p104, $i105, $i106, $p109, $i110, $p111, $p112, $i113, $i114, $p117, $i118, $p119, $i120, $p121, $p122, $i123, $i124, $i126, $i127, $p129, $i130, $i131, $p134, $i135, $i136, $p137, $i138, $i139, $i140, $i141, $p142, $p143, $p144, $p145, $i146, $i147, $p148, $i149, $i150, $i152, $i153, $i128, $p154, $i155, $i156, $i157, $p158, $i159, $i160, $i161, $i91, $i163, $i164, $i165, $i166, $i162 := hiddev_read_loop_$bb44($p1, $i2, $p6, $p20, $i25, $p85, $p87, $p92, $i93, $i94, $i95, $p96, $i97, $i98, $p101, $i102, $i103, $p104, $i105, $i106, $p109, $i110, $p111, $p112, $i113, $i114, $p117, $i118, $p119, $i120, $p121, $p122, $i123, $i124, $i126, $i127, $p129, $i130, $i131, $p134, $i135, $i136, $p137, $i138, $i139, $i140, $i141, $p142, $p143, $p144, $p145, $i146, $i147, $p148, $i149, $i150, $i152, $i153, $i128, $p154, $i155, $i156, $i157, $p158, $i159, $i160, $i161, $i91, $i163, $i164, $i165, $i166, $i162);
    goto $bb44_last;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    $i163 := $add.i32($i91, $i25);
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    $i164 := $sext.i32.i64($i163);
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    $i165 := $ule.i64($i164, $i2);
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    $i166 := $i91;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    $i90 := $i166;
    goto $bb43;

  $bb66:
    assume $i165 == 1;
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49160, 1));
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    $i94 := $and.i32($i93, 1);
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 0);
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i95 == 1);
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    $i131 := $sext.i32.i64($i130);
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(0, 1)), $mul.ref($i131, 24)), $mul.ref(8, 1));
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    $i136 := $ne.i32($i135, $sub.i32(0, 1));
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb57;

  $bb57:
    assume !($i136 == 1);
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49160, 1));
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.0, $p137);
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $i139 := $and.i32($i138, 2);
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    $i140 := $ne.i32($i139, 0);
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    $i153 := $i91;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i128 := $i153;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $i156 := $add.i32($i155, 1);
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    $i157 := $and.i32($i156, 2047);
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p158, $i157);
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.0, $p85);
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.0, $p87);
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    $i161 := $ne.i32($i159, $i160);
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    $i162 := $i128;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    $i90 := $i162;
    goto $bb43;

  $bb64:
    assume $i161 == 1;
    assume {:verifier.code 0} true;
    $i91 := $i128;
    goto $bb64_dummy;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i140 == 1;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i141 := $sext.i32.i64($i91);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($p1, $mul.ref($i141, 1));
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(0, 1));
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_10099;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    $i147 := $sext.i32.i64($i146);
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($p144, $mul.ref($i147, 1));
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $i149 := copy_to_user($p142, $p148, 24);
    call {:si_unique_call 1422} {:cexpr "tmp___9"} boogie_si_record_i64($i149);
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    $i150 := $ne.i64($i149, 0);
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i152 := $add.i32($i91, 24);
    call {:si_unique_call 1424} {:cexpr "retval"} boogie_si_record_i32($i152);
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $i153 := $i152;
    goto $bb63;

  $bb60:
    assume $i150 == 1;
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49200, 1));
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} ldv_mutex_unlock_104($p151);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    $i28 := $sub.i64(0, 14);
    goto $bb3;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i136 == 1;
    goto $bb56;

  $bb46:
    assume $i95 == 1;
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    $i98 := $sext.i32.i64($i97);
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(0, 1)), $mul.ref($i98, 24)), $mul.ref(8, 1));
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, $sub.i32(0, 1));
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i127 := $i91;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    $i128 := $i127;
    goto $bb54;

  $bb48:
    assume $i103 == 1;
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    $i106 := $sext.i32.i64($i105);
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(0, 1)), $mul.ref($i106, 24)), $mul.ref(16, 1));
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, $i110);
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    $i114 := $sext.i32.i64($i113);
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(0, 1)), $mul.ref($i114, 24)), $mul.ref(20, 1));
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p119, $i118);
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    $i120 := $sext.i32.i64($i91);
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p1, $mul.ref($i120, 1));
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p6);
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} $i123 := copy_to_user($p121, $p122, 8);
    call {:si_unique_call 1418} {:cexpr "tmp___8"} boogie_si_record_i64($i123);
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    $i124 := $ne.i64($i123, 0);
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i126 := $add.i32($i91, 8);
    call {:si_unique_call 1420} {:cexpr "retval"} boogie_si_record_i32($i126);
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    $i127 := $i126;
    goto $bb53;

  $bb50:
    assume $i124 == 1;
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49200, 1));
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} ldv_mutex_unlock_103($p125);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    $i28 := $sub.i64(0, 14);
    goto $bb3;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49200, 1));
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} ldv_mutex_unlock_102($p83);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i82);
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    $i28 := $i84;
    goto $bb3;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 352)), $mul.ref(168, 1));
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} prepare_to_wait($p42, $p4, 1);
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49152, 1));
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i44, $i46);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i51 := $i34;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 352)), $mul.ref(168, 1));
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} finish_wait($p79, $p4);
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    $i80 := $i51;
    goto $bb37;

  $bb15:
    assume $i47 == 1;
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call $p48, $i49, $i50, $p52, $p53, $p54, $i55, $i56, $p57, $i58, $i59, $i60, $p61, $p62, $i63, $i64, $p68, $p69, $p70, $i71, $p72, $i73, $i74, $i75, $i76 := hiddev_read_loop_$bb18($p0, $p5, $p20, $p43, $p45, $p48, $i49, $i50, $p52, $p53, $p54, $i55, $i56, $p57, $i58, $i59, $i60, $p61, $p62, $i63, $i64, $p68, $p69, $p70, $i71, $p72, $i73, $i74, $i75, $i76);
    goto $bb18_last;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} $p48 := get_current();
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} $i49 := signal_pending($p48);
    call {:si_unique_call 1406} {:cexpr "tmp___1"} boogie_si_record_i32($i49);
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(128, 1));
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 2048);
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49200, 1));
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} ldv_mutex_unlock_100($p61);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} schedule();
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49200, 1));
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} $i63 := ldv_mutex_lock_interruptible_101($p62);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    call {:si_unique_call 1411} {:cexpr "tmp___2"} boogie_si_record_i32($i63);
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} $p68 := get_current();
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 11712)), $mul.ref(11696, 1));
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    $M.44 := $store.i64($M.44, $p69, 0);
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    $M.45 := $store.i64($M.45, $p5, 1);
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} $p70 := get_current();
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.45, $p5);
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p70, $mul.ref(0, 11712)), $mul.ref(0, 1));
    call {:si_unique_call 1415} $i73 := devirtbounce.5(0, $p72, $i71, $p72);
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    $M.45 := $store.i64($M.45, $p5, $i73);
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p43);
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p45);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i74, $i75);
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i76 == 1);
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb34_dummy;

  $bb30:
    assume $i64 == 1;
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p20, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 352)), $mul.ref(168, 1));
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} finish_wait($p67, $p4);
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    $i28 := $sub.i64(0, 4);
    goto $bb3;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i60 == 1;
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(0, 11);
    goto $bb22;

  $bb24:
    assume $i56 == 1;
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(0, 5);
    goto $bb22;

  $bb20:
    assume $i50 == 1;
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(0, 512);
    goto $bb22;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    $i28 := $sub.i64(0, 512);
    goto $bb3;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb3;

  $bb64_dummy:
    assume false;
    return;

  $bb44_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10028;

  $bb34_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb69_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9936;
}



const hiddev_write: ref;

axiom hiddev_write == $sub.ref(0, 500775);

procedure hiddev_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation hiddev_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} {:cexpr "hiddev_write:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    $r := $sub.i64(0, 22);
    return;
}



const hiddev_poll: ref;

axiom hiddev_poll == $sub.ref(0, 501807);

procedure hiddev_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation hiddev_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 352)), $mul.ref(168, 1));
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} poll_wait($p0, $p7, $p1);
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 49360)), $mul.ref(49152, 1));
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i9, $i11);
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    $i13 := 24;
    goto $bb3;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    $i13 := 65;
    goto $bb3;
}



const hiddev_ioctl: ref;

axiom hiddev_ioctl == $sub.ref(0, 502839);

procedure hiddev_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.26, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.37, $CurrAddr, assertsPassed, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.27, $M.42, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.24;



implementation hiddev_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $i76: i64;
  var $i77: i1;
  var $i78: i32;
  var $i80: i64;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i67: i64;
  var $i68: i32;
  var $i84: i32;
  var $i66: i32;
  var $i79: i32;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $p117: ref;
  var $p119: ref;
  var $i120: i16;
  var $p121: ref;
  var $p123: ref;
  var $i124: i16;
  var $p125: ref;
  var $p127: ref;
  var $i128: i16;
  var $p129: ref;
  var $p130: ref;
  var $i131: i32;
  var $p132: ref;
  var $p133: ref;
  var $i134: i64;
  var $i135: i1;
  var $i136: i32;
  var $p137: ref;
  var $i138: i32;
  var $p139: ref;
  var $i140: i32;
  var $i141: i1;
  var $i142: i32;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i64;
  var $i147: i64;
  var $i148: i32;
  var $i149: i32;
  var $i150: i1;
  var $i151: i32;
  var $i152: i1;
  var $i153: i32;
  var $i154: i1;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $i158: i32;
  var $p159: ref;
  var $i160: i64;
  var $i161: i1;
  var $p162: ref;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $i166: i64;
  var $i167: i1;
  var $p168: ref;
  var $i169: i64;
  var $i170: i1;
  var $p171: ref;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $i175: i64;
  var $i176: i1;
  var $p177: ref;
  var $i178: i64;
  var $i179: i1;
  var $p180: ref;
  var $i181: i64;
  var $i182: i1;
  var $p183: ref;
  var $i184: i32;
  var $p185: ref;
  var $p186: ref;
  var $i187: i64;
  var $i188: i1;
  var $i189: i32;
  var $p190: ref;
  var $i191: i64;
  var $i192: i1;
  var $p193: ref;
  var $i194: i32;
  var $p195: ref;
  var $p196: ref;
  var $i197: i32;
  var $p198: ref;
  var $p199: ref;
  var $i200: i64;
  var $i201: i1;
  var $p202: ref;
  var $i203: i32;
  var $p204: ref;
  var $i205: i32;
  var $i206: i1;
  var $p207: ref;
  var $i208: i32;
  var $i209: i64;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $i215: i32;
  var $p216: ref;
  var $p217: ref;
  var $i218: i32;
  var $p219: ref;
  var $p220: ref;
  var $i221: i32;
  var $i222: i32;
  var $p223: ref;
  var $p224: ref;
  var $i225: i32;
  var $p226: ref;
  var $p227: ref;
  var $i228: i32;
  var $p229: ref;
  var $p230: ref;
  var $i231: i32;
  var $p232: ref;
  var $p233: ref;
  var $i234: i32;
  var $p235: ref;
  var $p236: ref;
  var $i237: i32;
  var $p238: ref;
  var $p239: ref;
  var $i240: i32;
  var $p241: ref;
  var $p242: ref;
  var $i243: i32;
  var $p244: ref;
  var $p245: ref;
  var $i246: i32;
  var $p247: ref;
  var $p248: ref;
  var $i249: i32;
  var $p250: ref;
  var $p251: ref;
  var $i252: i32;
  var $p253: ref;
  var $p254: ref;
  var $i255: i32;
  var $p256: ref;
  var $p257: ref;
  var $i258: i64;
  var $i259: i1;
  var $i260: i32;
  var $i261: i32;
  var $p262: ref;
  var $i263: i64;
  var $i264: i1;
  var $p265: ref;
  var $i266: i32;
  var $p267: ref;
  var $i268: i32;
  var $i269: i1;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $i273: i32;
  var $i274: i64;
  var $p276: ref;
  var $i277: i32;
  var $p278: ref;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $i282: i32;
  var $i283: i64;
  var $p285: ref;
  var $i286: i32;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $i291: i32;
  var $i292: i64;
  var $p294: ref;
  var $i295: i32;
  var $p296: ref;
  var $p297: ref;
  var $i298: i64;
  var $i299: i1;
  var $i300: i32;
  var $i301: i32;
  var $i302: i32;
  var $i303: i1;
  var $i304: i32;
  var $i305: i1;
  var $i306: i32;
  var $i307: i1;
  var $p308: ref;
  var $p309: ref;
  var $i310: i64;
  var $i311: i32;
  var $i312: i32;
  var $i313: i32;
  var $i314: i32;
  var $i315: i1;
  var $i316: i32;
  var $i317: i32;
  var $i318: i32;
  var $p319: ref;
  var $p320: ref;
  var $i321: i64;
  var $i322: i64;
  var $i323: i1;
  var $i324: i32;
  var $i325: i32;
  var $i326: i1;
  var $p327: ref;
  var $p328: ref;
  var $i329: i64;
  var $i330: i32;
  var $i331: i32;
  var $i332: i32;
  var $i333: i32;
  var $i334: i1;
  var $i335: i32;
  var $i336: i32;
  var $i337: i32;
  var $p338: ref;
  var $p339: ref;
  var $i340: i64;
  var $i341: i64;
  var $i342: i1;
  var $i343: i32;
  var $i58: i32;
  var $i17: i32;
  var $p344: ref;
  var $i345: i64;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} $p4 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} $p5 := $alloc($mul.ref(56, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} $p6 := $alloc($mul.ref(28, $zext.i32.i64(1)));
    call {:si_unique_call 1432} {:cexpr "hiddev_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 1433} {:cexpr "hiddev_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i2);
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p11, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} ldv_mutex_lock_106($p13);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 352)), $mul.ref(256, 1));
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i1, $sub.i32(0, 803452909));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i1, 1074546695);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i1, 1075333132);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i1, 1075333136);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i1, 1344030740);
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i1, 1344030740);
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $i301 := $lshr.i32($i1, 8);
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    $i302 := $and.i32($i301, 255);
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    $i303 := $ne.i32($i302, 72);
    goto corral_source_split_10552;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb158;

  $bb158:
    assume !($i303 == 1);
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    $i304 := $lshr.i32($i1, 30);
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    $i305 := $ne.i32($i304, 2);
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i305} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $i306 := $and.i32($i1, 255);
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    $i307 := $eq.i32($i306, 6);
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    $i325 := $and.i32($i1, 255);
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i325, 18);
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 22);
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    $i17 := $i58;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p11, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} ldv_mutex_unlock_107($p344);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    $i345 := $sext.i32.i64($i17);
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    $r := $i345;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb171:
    assume $i326 == 1;
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p19, $mul.ref(0, 8600)), $mul.ref(8216, 1));
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    $p328 := $bitcast.ref.ref($p327);
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} $i329 := strlen($p328);
    call {:si_unique_call 1496} {:cexpr "tmp___11"} boogie_si_record_i64($i329);
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    $i330 := $trunc.i64.i32($i329);
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    $i331 := $add.i32($i330, 1);
    call {:si_unique_call 1497} {:cexpr "len___0"} boogie_si_record_i32($i331);
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    $i332 := $lshr.i32($i1, 16);
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    $i333 := $and.i32($i332, 16383);
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    $i334 := $ugt.i32($i331, $i333);
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    $i337 := $i331;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p19, $mul.ref(0, 8600)), $mul.ref(8216, 1));
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    $p339 := $bitcast.ref.ref($p338);
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    $i340 := $sext.i32.i64($i337);
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} $i341 := copy_to_user($p12, $p339, $i340);
    call {:si_unique_call 1500} {:cexpr "tmp___12"} boogie_si_record_i64($i341);
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    $i342 := $eq.i64($i341, 0);
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i342} true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i342 == 1);
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    $i343 := $sub.i32(0, 14);
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    $i58 := $i343;
    goto $bb81;

  $bb176:
    assume $i342 == 1;
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    $i343 := $i337;
    goto $bb178;

  $bb173:
    assume $i334 == 1;
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    $i335 := $lshr.i32($i1, 16);
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    $i336 := $and.i32($i335, 16383);
    call {:si_unique_call 1498} {:cexpr "len___0"} boogie_si_record_i32($i336);
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    $i337 := $i336;
    goto $bb175;

  $bb162:
    assume $i307 == 1;
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p19, $mul.ref(0, 8600)), $mul.ref(8088, 1));
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $p309 := $bitcast.ref.ref($p308);
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $i310 := strlen($p309);
    call {:si_unique_call 1490} {:cexpr "tmp___9"} boogie_si_record_i64($i310);
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    $i311 := $trunc.i64.i32($i310);
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    $i312 := $add.i32($i311, 1);
    call {:si_unique_call 1491} {:cexpr "len"} boogie_si_record_i32($i312);
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    $i313 := $lshr.i32($i1, 16);
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    $i314 := $and.i32($i313, 16383);
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    $i315 := $ugt.i32($i312, $i314);
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    $i318 := $i312;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto corral_source_split_10575;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p19, $mul.ref(0, 8600)), $mul.ref(8088, 1));
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $p320 := $bitcast.ref.ref($p319);
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    $i321 := $sext.i32.i64($i318);
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} $i322 := copy_to_user($p12, $p320, $i321);
    call {:si_unique_call 1494} {:cexpr "tmp___10"} boogie_si_record_i64($i322);
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    $i323 := $eq.i64($i322, 0);
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i323} true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i323 == 1);
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    $i324 := $sub.i32(0, 14);
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    $i58 := $i324;
    goto $bb81;

  $bb167:
    assume $i323 == 1;
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    $i324 := $i318;
    goto $bb169;

  $bb164:
    assume $i315 == 1;
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    $i316 := $lshr.i32($i1, 16);
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    $i317 := $and.i32($i316, 16383);
    call {:si_unique_call 1492} {:cexpr "len"} boogie_si_record_i32($i317);
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $i318 := $i317;
    goto $bb166;

  $bb159:
    assume {:verifier.code 0} true;
    assume $i305 == 1;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 22);
    goto $bb81;

  $bb156:
    assume {:verifier.code 0} true;
    assume $i303 == 1;
    goto $bb157;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} $i261 := hiddev_ioctl_usage($p11, $i1, $p12);
    call {:si_unique_call 1437} {:cexpr "r"} boogie_si_record_i32($i261);
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    $i58 := $i261;
    goto $bb81;

  $bb14:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i1, 1075333136);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb19;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb21;

  $bb12:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i1, 1075333132);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i1, 1074546696);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i1, 1074546696);
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb19;

  $bb28:
    assume $i29 == 1;
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p4);
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} $i169 := copy_from_user($p168, $p12, 12);
    call {:si_unique_call 1441} {:cexpr "tmp___2"} boogie_si_record_i64($i169);
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    $i170 := $ne.i64($i169, 0);
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.0, $p171);
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 1);
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} $p174 := hiddev_lookup_report($p19, $p4);
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    $i175 := $p2i.ref.i64($p174);
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    $i176 := $eq.i64($i175, 0);
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i176} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} hid_hw_request($p19, $p174, 9);
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} hid_hw_wait($p19);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb81;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb131:
    assume $i176 == 1;
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 22);
    goto $bb81;

  $bb128:
    assume $i173 == 1;
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 22);
    goto $bb81;

  $bb125:
    assume $i170 == 1;
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 14);
    goto $bb81;

  $bb26:
    assume $i28 == 1;
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p4);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} $i160 := copy_from_user($p159, $p12, 12);
    call {:si_unique_call 1439} {:cexpr "tmp___1"} boogie_si_record_i64($i160);
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    $i161 := $ne.i64($i160, 0);
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, $p162);
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i163, 2);
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} $p165 := hiddev_lookup_report($p19, $p4);
    goto corral_source_split_10369;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    $i166 := $p2i.ref.i64($p165);
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $i167 := $eq.i64($i166, 0);
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} hid_hw_request($p19, $p165, 1);
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} hid_hw_wait($p19);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb81;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb122:
    assume $i167 == 1;
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 22);
    goto $bb81;

  $bb119:
    assume $i164 == 1;
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 22);
    goto $bb81;

  $bb116:
    assume $i161 == 1;
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 14);
    goto $bb81;

  $bb8:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i1, 18437);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i1, 1074022415);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i1, 1074022415);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb19;

  $bb34:
    assume $i32 == 1;
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} __might_fault(.str.84, 670);
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    $p143 := $i2p.i64.ref($i2);
    call {:si_unique_call 1443} $p144 := devirtbounce.7(0, $p143, 4);
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    $p145 := $extractvalue($p144, 0);
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    $i146 := $extractvalue($p144, 1);
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    $i147 := $p2i.ref.i64($p145);
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    $i148 := $trunc.i64.i32($i147);
    call {:si_unique_call 1444} {:cexpr "__ret_gu"} boogie_si_record_i32($i148);
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i64.i32($i146);
    call {:si_unique_call 1445} {:cexpr "newflags"} boogie_si_record_i32($i149);
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    $i150 := $ne.i32($i148, 0);
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $i151 := $and.i32($i149, $sub.i32(0, 4));
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    $i152 := $ne.i32($i151, 0);
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb107, $bb109;

  $bb109:
    assume !($i152 == 1);
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    $i153 := $and.i32($i149, 2);
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 0);
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb110, $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume !($i154 == 1);
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p9, $mul.ref(0, 49360)), $mul.ref(49160, 1));
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p157, $i149);
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb81;

  $bb110:
    assume $i154 == 1;
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    $i155 := $and.i32($i149, 1);
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 0);
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i156 == 1);
    goto $bb112;

  $bb113:
    assume {:verifier.code 0} true;
    assume $i156 == 1;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 22);
    goto $bb81;

  $bb107:
    assume {:verifier.code 0} true;
    assume $i152 == 1;
    goto $bb108;

  $bb104:
    assume $i150 == 1;
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 14);
    goto $bb81;

  $bb32:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i1, 18437);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb19;

  $bb36:
    assume $i33 == 1;
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} usbhid_init_reports($p19);
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb81;

  $bb30:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i1, 18434);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i1, 18434);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb19;

  $bb40:
    assume $i35 == 1;
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p19, $mul.ref(0, 8600)), $mul.ref(48, 1));
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    $i61 := $zext.i32.i64($i60);
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    $i62 := $ule.i64($i61, $i2);
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p19, $mul.ref(0, 8600)), $mul.ref(44, 1));
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    $i65 := $ult.i32(0, $i64);
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    $i66 := 0;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i79 := $i66;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p19, $mul.ref(0, 8600)), $mul.ref(44, 1));
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    $i87 := $ult.i32($i79, $i86);
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i94 := $sub.i32(0, 22);
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    $i58 := $i94;
    goto $bb81;

  $bb100:
    assume $i87 == 1;
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p19, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i79);
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p89, $mul.ref($i90, 12)), $mul.ref(4, 1));
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    call {:si_unique_call 1469} {:cexpr "r"} boogie_si_record_i32($i93);
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    $i94 := $i93;
    goto $bb102;

  $bb85:
    assume $i65 == 1;
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    $i67, $i68 := $i2, 0;
    goto $bb88;

  $bb88:
    call $p69, $p70, $i71, $p73, $i74, $i75, $i76, $i77, $i78, $i80, $i81, $i82, $i83, $i67, $i68, $i84 := hiddev_ioctl_loop_$bb88($p19, $p63, $p69, $p70, $i71, $p73, $i74, $i75, $i76, $i77, $i78, $i80, $i81, $i82, $i83, $i67, $i68, $i84);
    goto $bb88_last;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p19, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_10306;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i68);
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p70, $mul.ref($i71, 12)), $mul.ref(0, 1));
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 1);
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i80 := $i67;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i68, 1);
    call {:si_unique_call 1468} {:cexpr "i"} boogie_si_record_i32($i81);
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p63);
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    $i83 := $ult.i32($i81, $i82);
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    $i84 := $i81;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $i66 := $i84;
    goto $bb87;

  $bb97:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    $i67, $i68 := $i80, $i81;
    goto $bb97_dummy;

  $bb90:
    assume $i75 == 1;
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    $i76 := $sub.i64($i67, 1);
    call {:si_unique_call 1467} {:cexpr "arg"} boogie_si_record_i64($i76);
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    $i77 := $eq.i64($i67, 0);
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    $i78 := $i68;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i80 := $i76;
    goto $bb96;

  $bb92:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    $i79 := $i78;
    goto $bb94;

  $bb82:
    assume $i62 == 1;
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 22);
    goto $bb81;

  $bb38:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i1, $sub.i32(0, 803452909));
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb42, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb19;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb43;

  $bb6:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i1, $sub.i32(0, 1072936951));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i1, $sub.i32(0, 1072150517));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i1, $sub.i32(0, 1072150515));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i1, $sub.i32(0, 1070053366));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i1, $sub.i32(0, 1070053366));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb19;

  $bb53:
    assume $i41 == 1;
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    $p190 := $bitcast.ref.ref($p5);
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} $i191 := copy_from_user($p190, $p12, 56);
    call {:si_unique_call 1448} {:cexpr "tmp___5"} boogie_si_record_i64($i191);
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    $i192 := $ne.i64($i191, 0);
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    $i194 := $load.i32($M.0, $p193);
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p195, $i194);
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    $i197 := $load.i32($M.0, $p196);
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_10420;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p198, $i197);
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} $p199 := hiddev_lookup_report($p19, $p4);
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    $i200 := $p2i.ref.i64($p199);
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    $i201 := $eq.i64($i200, 0);
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.0, $p202);
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p199, $mul.ref(0, 2088)), $mul.ref(2072, 1));
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    $i205 := $load.i32($M.0, $p204);
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    $i206 := $uge.i32($i203, $i205);
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    $i208 := $load.i32($M.0, $p207);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    $i209 := $zext.i32.i64($i208);
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($p199, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref($i209, 8));
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    $p213 := $bitcast.ref.ref($p5);
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 1482} cmdloc_dummy_var_14 := $memset.i8(cmdloc_dummy_var_13, $p213, 0, 56, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.0, $p214);
    goto corral_source_split_10444;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p216, $i215);
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    $i218 := $load.i32($M.0, $p217);
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p219, $i218);
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p212, $mul.ref(0, 112)), $mul.ref(40, 1));
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    $i221 := $load.i32($M.0, $p220);
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    $i222 := $sub.i32($i221, 1);
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p223, $i222);
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p212, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    $i225 := $load.i32($M.0, $p224);
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(12, 1));
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p226, $i225);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p212, $mul.ref(0, 112)), $mul.ref(28, 1));
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    $i228 := $load.i32($M.0, $p227);
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p229, $i228);
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p212, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    $i231 := $load.i32($M.0, $p230);
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(20, 1));
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p232, $i231);
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p212, $mul.ref(0, 112)), $mul.ref(4, 1));
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    $i234 := $load.i32($M.0, $p233);
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p235, $i234);
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p212, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    $i237 := $load.i32($M.0, $p236);
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(28, 1));
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p238, $i237);
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p212, $mul.ref(0, 112)), $mul.ref(56, 1));
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    $i240 := $load.i32($M.0, $p239);
    goto corral_source_split_10477;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p241, $i240);
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p212, $mul.ref(0, 112)), $mul.ref(60, 1));
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $i243 := $load.i32($M.0, $p242);
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p244, $i243);
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p212, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    $i246 := $load.i32($M.0, $p245);
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p247, $i246);
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p212, $mul.ref(0, 112)), $mul.ref(68, 1));
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    $i249 := $load.i32($M.0, $p248);
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(44, 1));
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p250, $i249);
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p212, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $i252 := $load.i32($M.0, $p251);
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p253, $i252);
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p212, $mul.ref(0, 112)), $mul.ref(76, 1));
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    $i255 := $load.i32($M.0, $p254);
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(52, 1));
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p256, $i255);
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    $p257 := $bitcast.ref.ref($p5);
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} $i258 := copy_to_user($p12, $p257, 56);
    call {:si_unique_call 1484} {:cexpr "tmp___6"} boogie_si_record_i64($i258);
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    $i259 := $ne.i64($i258, 0);
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    $i260 := (if $i259 == 1 then $sub.i32(0, 14) else 0);
    call {:si_unique_call 1485} {:cexpr "r"} boogie_si_record_i32($i260);
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    $i58 := $i260;
    goto $bb81;

  $bb146:
    assume $i206 == 1;
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 22);
    goto $bb81;

  $bb143:
    assume $i201 == 1;
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 22);
    goto $bb81;

  $bb140:
    assume $i192 == 1;
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 14);
    goto $bb81;

  $bb51:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i1, $sub.i32(0, 1072150515));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb19;

  $bb55:
    assume $i42 == 1;
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb49:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i1, $sub.i32(0, 1072150517));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb19;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb58;

  $bb47:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i1, $sub.i32(0, 1072674799));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i1, $sub.i32(0, 1072674799));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb19;

  $bb62:
    assume $i45 == 1;
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    $p262 := $bitcast.ref.ref($p3);
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} $i263 := copy_from_user($p262, $p12, 16);
    call {:si_unique_call 1450} {:cexpr "tmp___7"} boogie_si_record_i64($i263);
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    $i264 := $ne.i64($i263, 0);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i264} true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    $i266 := $load.i32($M.0, $p265);
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p19, $mul.ref(0, 8600)), $mul.ref(44, 1));
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    $i268 := $load.i32($M.0, $p267);
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    $i269 := $uge.i32($i266, $i268);
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i269} true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p19, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    $p271 := $load.ref($M.0, $p270);
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    $i273 := $load.i32($M.0, $p272);
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    $i274 := $zext.i32.i64($i273);
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p271, $mul.ref($i274, 12)), $mul.ref(0, 1));
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    $i277 := $load.i32($M.0, $p276);
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p278, $i277);
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p19, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.0, $p279);
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    $i282 := $load.i32($M.0, $p281);
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    $i283 := $zext.i32.i64($i282);
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p280, $mul.ref($i283, 12)), $mul.ref(4, 1));
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    $i286 := $load.i32($M.0, $p285);
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p287, $i286);
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p19, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    $p289 := $load.ref($M.0, $p288);
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    $i291 := $load.i32($M.0, $p290);
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    $i292 := $zext.i32.i64($i291);
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p289, $mul.ref($i292, 12)), $mul.ref(8, 1));
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    $i295 := $load.i32($M.0, $p294);
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p296, $i295);
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    $p297 := $bitcast.ref.ref($p3);
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} $i298 := copy_to_user($p12, $p297, 16);
    call {:si_unique_call 1487} {:cexpr "tmp___8"} boogie_si_record_i64($i298);
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    $i299 := $ne.i64($i298, 0);
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    $i300 := (if $i299 == 1 then $sub.i32(0, 14) else 0);
    call {:si_unique_call 1488} {:cexpr "r"} boogie_si_record_i32($i300);
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    $i58 := $i300;
    goto $bb81;

  $bb152:
    assume $i269 == 1;
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 22);
    goto $bb81;

  $bb149:
    assume $i264 == 1;
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 14);
    goto $bb81;

  $bb60:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i1, $sub.i32(0, 1072936951));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb19;

  $bb64:
    assume $i46 == 1;
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p4);
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} $i178 := copy_from_user($p177, $p12, 12);
    call {:si_unique_call 1452} {:cexpr "tmp___3"} boogie_si_record_i64($i178);
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    $i179 := $ne.i64($i178, 0);
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} $p180 := hiddev_lookup_report($p19, $p4);
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    $i181 := $p2i.ref.i64($p180);
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    $i182 := $eq.i64($i181, 0);
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p180, $mul.ref(0, 2088)), $mul.ref(2072, 1));
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    $i184 := $load.i32($M.0, $p183);
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p185, $i184);
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    $p186 := $bitcast.ref.ref($p4);
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} $i187 := copy_to_user($p12, $p186, 12);
    call {:si_unique_call 1479} {:cexpr "tmp___4"} boogie_si_record_i64($i187);
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    $i188 := $ne.i64($i187, 0);
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    $i189 := (if $i188 == 1 then $sub.i32(0, 14) else 0);
    call {:si_unique_call 1480} {:cexpr "r"} boogie_si_record_i32($i189);
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    $i58 := $i189;
    goto $bb81;

  $bb137:
    assume $i182 == 1;
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 22);
    goto $bb81;

  $bb134:
    assume $i179 == 1;
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 14);
    goto $bb81;

  $bb45:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i1, $sub.i32(0, 2145630205));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i1, $sub.i32(0, 2130425852));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i1, $sub.i32(0, 2130425852));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb19;

  $bb70:
    assume $i49 == 1;
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} $i158 := hiddev_ioctl_string($p11, $i1, $p12);
    call {:si_unique_call 1454} {:cexpr "r"} boogie_si_record_i32($i158);
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $i58 := $i158;
    goto $bb81;

  $bb68:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i1, $sub.i32(0, 2145630205));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb19;

  $bb72:
    assume $i50 == 1;
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 8600)), $mul.ref(6568, 1)), $mul.ref(0, 1));
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_10235;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p19, $mul.ref(0, 8600)), $mul.ref(8344, 1));
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p6);
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    call {:si_unique_call 1455} cmdloc_dummy_var_12 := $memset.i8(cmdloc_dummy_var_11, $p105, 0, 28, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_12;
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(0, 1));
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, 3);
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p100, $mul.ref($sub.ref(0, 144), 2040)), $mul.ref(64, 1));
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(4, 1));
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, $i110);
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p100, $mul.ref($sub.ref(0, 144), 2040)), $mul.ref(0, 1));
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(8, 1));
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p114, $i113);
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p104, $mul.ref(0, 10768)), $mul.ref(16, 1));
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p115);
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(12, 1));
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p117, $i116);
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p100, $mul.ref($sub.ref(0, 144), 2040)), $mul.ref(1568, 1)), $mul.ref(8, 1));
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    $i120 := $load.i16($M.0, $p119);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(16, 1));
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p121, $i120);
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p100, $mul.ref($sub.ref(0, 144), 2040)), $mul.ref(1568, 1)), $mul.ref(10, 1));
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $i124 := $load.i16($M.0, $p123);
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(18, 1));
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p125, $i124);
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p100, $mul.ref($sub.ref(0, 144), 2040)), $mul.ref(1568, 1)), $mul.ref(12, 1));
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    $i128 := $load.i16($M.0, $p127);
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(20, 1));
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p129, $i128);
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p19, $mul.ref(0, 8600)), $mul.ref(48, 1));
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(24, 1));
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p132, $i131);
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p6);
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} $i134 := copy_to_user($p12, $p133, 28);
    call {:si_unique_call 1457} {:cexpr "tmp___0"} boogie_si_record_i64($i134);
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    $i135 := $ne.i64($i134, 0);
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    $i136 := (if $i135 == 1 then $sub.i32(0, 14) else 0);
    call {:si_unique_call 1458} {:cexpr "r"} boogie_si_record_i32($i136);
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    $i58 := $i136;
    goto $bb81;

  $bb66:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i1, $sub.i32(0, 2147203058));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i1, $sub.i32(0, 2147203058));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb19;

  $bb76:
    assume $i52 == 1;
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} __might_fault(.str.84, 662);
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p9, $mul.ref(0, 49360)), $mul.ref(49160, 1));
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.0, $p137);
    call {:si_unique_call 1460} {:cexpr "__pu_val___0"} boogie_si_record_i32($i138);
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    $p139 := $i2p.i64.ref($i2);
    call {:si_unique_call 1461} $i140 := devirtbounce.6(0, $i138, $p139);
    call {:si_unique_call 1462} {:cexpr "__ret_pu___0"} boogie_si_record_i32($i140);
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i141 := $ne.i32($i140, 0);
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    $i142 := (if $i141 == 1 then $sub.i32(0, 14) else 0);
    call {:si_unique_call 1470} {:cexpr "r"} boogie_si_record_i32($i142);
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    $i58 := $i142;
    goto $bb81;

  $bb74:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i1, $sub.i32(0, 2147203071));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb19;

  $bb78:
    assume $i53 == 1;
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} __might_fault(.str.84, 623);
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    $p54 := $i2p.i64.ref($i2);
    call {:si_unique_call 1464} $i55 := devirtbounce.6(0, 65540, $p54);
    call {:si_unique_call 1465} {:cexpr "__ret_pu"} boogie_si_record_i32($i55);
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    $i57 := (if $i56 == 1 then $sub.i32(0, 14) else 0);
    call {:si_unique_call 1466} {:cexpr "r"} boogie_si_record_i32($i57);
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb81;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 19);
    goto $bb3;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb97_dummy:
    assume false;
    return;

  $bb88_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10304;
}



const hiddev_compat_ioctl: ref;

axiom hiddev_compat_ioctl == $sub.ref(0, 503871);

procedure hiddev_compat_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.26, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.37, $CurrAddr, assertsPassed, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.27, $M.42, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.24;



implementation hiddev_compat_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} {:cexpr "hiddev_compat_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 1502} {:cexpr "hiddev_compat_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i2);
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} $p4 := compat_ptr($i3);
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} $i6 := hiddev_ioctl($p0, $i1, $i5);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    call {:si_unique_call 1505} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;
}



const hiddev_open: ref;

axiom hiddev_open == $sub.ref(0, 504903);

procedure hiddev_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.26, $CurrAddr, assertsPassed, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.24;



implementation hiddev_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p76: ref;
  var $p77: ref;
  var $i43: i32;
  var $p78: ref;
  var $p79: ref;
  var $i7: i32;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} $i3 := iminor($p0);
    call {:si_unique_call 1508} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} $p4 := usbhid_find_interface($i3);
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} $p8 := usb_get_intfdata($p4);
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 8600)), $mul.ref(8064, 1));
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} $p13 := vzalloc(49360);
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref(0, 49360)), $mul.ref(49200, 1));
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} __mutex_init($p17, .str.83, $p2);
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p14, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p11);
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p13);
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p14, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 19);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p78, $0.ref);
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p14);
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} vfree($p79);
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    $i7 := $i43;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p14, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 352)), $mul.ref(4, 1));
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    call {:si_unique_call 1513} {:cexpr "tmp___2"} boogie_si_record_i32($i29);
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p14, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 352)), $mul.ref(4, 1));
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, 1);
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p14, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 352)), $mul.ref(4, 1));
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i34);
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i29, 0);
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p14, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 352)), $mul.ref(280, 1));
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} spin_lock_irq($p46);
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p14, $mul.ref(0, 49360)), $mul.ref(49184, 1));
    goto corral_source_split_10695;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p12, $mul.ref(0, 352)), $mul.ref(264, 1));
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} list_add_tail($p47, $p48);
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p14, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 352)), $mul.ref(280, 1));
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} spin_unlock_irq($p51);
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p12, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} ldv_mutex_lock_96($p52);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p14, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 352)), $mul.ref(4, 1));
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    call {:si_unique_call 1521} {:cexpr "tmp___3"} boogie_si_record_i32($i56);
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p14, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 352)), $mul.ref(4, 1));
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_10711;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, 1);
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p14, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 352)), $mul.ref(4, 1));
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i61);
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i56, 0);
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p12, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} ldv_mutex_unlock_97($p76);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i65 == 1;
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p14, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_10722;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb20:
    assume $i70 == 1;
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p12, $mul.ref(0, 352)), $mul.ref(256, 1));
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} $i73 := usbhid_get_power($p72);
    call {:si_unique_call 1523} {:cexpr "res"} boogie_si_record_i32($i73);
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i73, 0);
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} vslice_dummy_var_74 := usbhid_open($p72);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i74 == 1;
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p12, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} ldv_mutex_unlock_98($p77);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 5);
    goto $bb14;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i38 == 1;
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p12, $mul.ref(0, 352)), $mul.ref(256, 1));
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $i41 := usbhid_open($p40);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    call {:si_unique_call 1515} {:cexpr "res"} boogie_si_record_i32($i41);
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 0);
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb12:
    assume $i42 == 1;
    goto corral_source_split_10683;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 5);
    goto $bb14;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;
}



const hiddev_release: ref;

axiom hiddev_release == $sub.ref(0, 505935);

procedure hiddev_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, $M.11, $M.13, $M.15, $M.17, assertsPassed, $M.27, $M.18, $M.20, $M.22, $M.24;



implementation hiddev_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_10743;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 352)), $mul.ref(280, 1));
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} $p8 := spinlock_check($p7);
    goto corral_source_split_10749;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} $i9 := _raw_spin_lock_irqsave($p8);
    call {:si_unique_call 1529} {:cexpr "flags"} boogie_si_record_i64($i9);
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 49360)), $mul.ref(49184, 1));
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} list_del($p10);
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 352)), $mul.ref(280, 1));
    goto corral_source_split_10755;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} spin_unlock_irqrestore($p13, $i9);
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} ldv_mutex_lock_93($p16);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_10760;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 352)), $mul.ref(4, 1));
    goto corral_source_split_10763;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i20, 1);
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_10767;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 352)), $mul.ref(4, 1));
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i21);
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 352)), $mul.ref(4, 1));
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10807;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_10809;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} ldv_mutex_unlock_95($p52);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p4);
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} vfree($p53);
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i34 == 1);
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} ldv_mutex_unlock_94($p45);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10800;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_10802;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} kfree($p48);
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p4);
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} vfree($p49);
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i34 == 1;
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 352)), $mul.ref(256, 1));
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} usbhid_close($p38);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_10789;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 352)), $mul.ref(256, 1));
    goto corral_source_split_10791;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} usbhid_put_power($p42);
    goto corral_source_split_10793;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;
}



const hiddev_fasync: ref;

axiom hiddev_fasync == $sub.ref(0, 506967);

procedure hiddev_fasync($i0: i32, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation hiddev_fasync($i0: i32, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} {:cexpr "hiddev_fasync:arg:fd"} boogie_si_record_i32($i0);
    call {:si_unique_call 1541} {:cexpr "hiddev_fasync:arg:on"} boogie_si_record_i32($i2);
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 49360)), $mul.ref(49168, 1));
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} $i7 := fasync_helper($i0, $p1, $i2, $p6);
    call {:si_unique_call 1543} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const fasync_helper: ref;

axiom fasync_helper == $sub.ref(0, 507999);

procedure fasync_helper($i0: i32, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fasync_helper($i0: i32, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1544} {:cexpr "fasync_helper:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1545} {:cexpr "fasync_helper:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1546} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1547} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 509031);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_93: ref;

axiom ldv_mutex_lock_93 == $sub.ref(0, 510063);

procedure ldv_mutex_lock_93($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_93($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} ldv_mutex_lock_existancelock_of_hiddev($p0);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} mutex_lock($p0);
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_94: ref;

axiom ldv_mutex_unlock_94 == $sub.ref(0, 511095);

procedure ldv_mutex_unlock_94($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_94($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} ldv_mutex_unlock_existancelock_of_hiddev($p0);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} mutex_unlock($p0);
    goto corral_source_split_10832;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;
}



const vfree: ref;

axiom vfree == $sub.ref(0, 512127);

procedure vfree($p0: ref);
  free requires assertsPassed;



implementation vfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_95: ref;

axiom ldv_mutex_unlock_95 == $sub.ref(0, 513159);

procedure ldv_mutex_unlock_95($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_95($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} ldv_mutex_unlock_existancelock_of_hiddev($p0);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} mutex_unlock($p0);
    goto corral_source_split_10838;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;
}



const iminor: ref;

axiom iminor == $sub.ref(0, 514191);

procedure iminor($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iminor($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1000)), $mul.ref(76, 1));
    goto corral_source_split_10841;

  corral_source_split_10841:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1048575);
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usbhid_find_interface: ref;

axiom usbhid_find_interface == $sub.ref(0, 515223);

procedure usbhid_find_interface($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usbhid_find_interface($i0: i32) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} {:cexpr "usbhid_find_interface:arg:minor"} boogie_si_record_i32($i0);
    goto corral_source_split_10845;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} $p1 := usb_find_interface(hid_driver, $i0);
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const vzalloc: ref;

axiom vzalloc == $sub.ref(0, 516255);

procedure vzalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation vzalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} {:cexpr "vzalloc:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} $p1 := external_alloc();
    goto corral_source_split_10849;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 517287);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} __list_add($p0, $p3, $p1);
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_96: ref;

axiom ldv_mutex_lock_96 == $sub.ref(0, 518319);

procedure ldv_mutex_lock_96($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_96($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} ldv_mutex_lock_existancelock_of_hiddev($p0);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} mutex_lock($p0);
    goto corral_source_split_10858;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_97: ref;

axiom ldv_mutex_unlock_97 == $sub.ref(0, 519351);

procedure ldv_mutex_unlock_97($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_97($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} ldv_mutex_unlock_existancelock_of_hiddev($p0);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} mutex_unlock($p0);
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_98: ref;

axiom ldv_mutex_unlock_98 == $sub.ref(0, 520383);

procedure ldv_mutex_unlock_98($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_98($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} ldv_mutex_unlock_existancelock_of_hiddev($p0);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} mutex_unlock($p0);
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 521415);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    return;
}



const usb_find_interface: ref;

axiom usb_find_interface == $sub.ref(0, 522447);

procedure usb_find_interface($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_find_interface($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} {:cexpr "usb_find_interface:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} $p2 := external_alloc();
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const compat_ptr: ref;

axiom compat_ptr == $sub.ref(0, 523479);

procedure compat_ptr($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation compat_ptr($i0: i32) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} {:cexpr "compat_ptr:arg:uptr"} boogie_si_record_i32($i0);
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    $i1 := $zext.i32.i64($i0);
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_mutex_lock_106: ref;

axiom ldv_mutex_lock_106 == $sub.ref(0, 524511);

procedure ldv_mutex_lock_106($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_106($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} ldv_mutex_lock_existancelock_of_hiddev($p0);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_10879;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} mutex_lock($p0);
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;
}



const __might_fault: ref;

axiom __might_fault == $sub.ref(0, 525543);

procedure __might_fault($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __might_fault($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} {:cexpr "__might_fault:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    return;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 526575);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} $i3 := __builtinx_object_size.ref.i32($p1, 0);
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 1573} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_10886;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1574} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} __might_fault(.str.82, 732);
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_10893;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 1577} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} $i15 := _copy_to_user($p0, $p1, $i14);
    call {:si_unique_call 1579} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const hiddev_ioctl_string: ref;

axiom hiddev_ioctl_string == $sub.ref(0, 527607);

procedure hiddev_ioctl_string($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation hiddev_ioctl_string($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} {:cexpr "hiddev_ioctl_string:arg:cmd"} boogie_si_record_i32($i1);
    goto corral_source_split_10909;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(256, 1));
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8600)), $mul.ref(6568, 1)), $mul.ref(0, 1));
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1424)), $mul.ref(0, 1));
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_10916;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} __might_fault(.str.84, 575);
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    call {:si_unique_call 1583} $p13 := devirtbounce.7(0, $p12, 4);
    goto corral_source_split_10919;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    $p14 := $extractvalue($p13, 0);
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    $i15 := $extractvalue($p13, 1);
    goto corral_source_split_10921;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p14);
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    call {:si_unique_call 1584} {:cexpr "__ret_gu"} boogie_si_record_i32($i17);
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i32($i15);
    call {:si_unique_call 1585} {:cexpr "idx"} boogie_si_record_i32($i18);
    goto corral_source_split_10924;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i17, 0);
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} $p21 := kmalloc(256, 208);
    goto corral_source_split_10931;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} $i24 := usb_string($p11, $i18, $p21, 255);
    call {:si_unique_call 1588} {:cexpr "len"} boogie_si_record_i32($i24);
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p2, $mul.ref(4, 1));
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i24, 1);
    goto corral_source_split_10944;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} $i29 := copy_to_user($p26, $p21, $i28);
    call {:si_unique_call 1591} {:cexpr "tmp___0"} boogie_si_record_i64($i29);
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} kfree($p21);
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    $i20 := $i24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} kfree($p21);
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 14);
    goto $bb3;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} kfree($p21);
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 14);
    goto $bb3;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 528639);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_10954;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 1596} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1597} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} __might_fault(.str.82, 697);
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_10959;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_10967;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_10969;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_10962;

  corral_source_split_10962:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 1600} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10977;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_10971;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} $i15 := _copy_from_user($p0, $p1, $i14);
    call {:si_unique_call 1602} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_10973;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const hiddev_lookup_report: ref;

axiom hiddev_lookup_report == $sub.ref(0, 529671);

procedure hiddev_lookup_report($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation hiddev_lookup_report($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i64;
  var $p58: ref;
  var $p59: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10979;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, $sub.i32(0, 256));
    call {:si_unique_call 1604} {:cexpr "flags"} boogie_si_record_i32($i4);
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 255);
    call {:si_unique_call 1605} {:cexpr "rid"} boogie_si_record_i32($i7);
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i10 == 1);
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, 3);
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(80, 1));
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32($i18, 1);
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i19);
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i4, 256);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i4, 512);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i4, 512);
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10995;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i7);
    goto corral_source_split_11005;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p16, $mul.ref($i20, 2072)), $mul.ref(24, 1)), $mul.ref($i37, 8));
    goto corral_source_split_11006;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p40, $mul.ref(0, 2088)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p16, $mul.ref($i20, 2072)), $mul.ref(8, 1));
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_11039;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p45);
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i47, $i48);
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p45);
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 2088)), $mul.ref(16, 1));
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_11047;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_11049;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_11019;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    $i56 := $zext.i32.i64($i55);
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p16, $mul.ref($i20, 2072)), $mul.ref(24, 1)), $mul.ref($i56, 8));
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    $p14 := $p59;
    goto $bb6;

  $bb27:
    assume $i49 == 1;
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb6;

  $bb24:
    assume $i42 == 1;
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb6;

  $bb11:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i4, 256);
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb15;

  $bb16:
    assume $i25 == 1;
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p16, $mul.ref($i20, 2072)), $mul.ref(8, 1));
    goto corral_source_split_11012;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} $i28 := list_empty($p27);
    call {:si_unique_call 1607} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p16, $mul.ref($i20, 2072)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 2088)), $mul.ref(16, 1));
    goto corral_source_split_11029;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_11032;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21:
    assume $i29 == 1;
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb6;

  $bb9:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb15;

  $bb18:
    assume $i26 == 1;
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;
}



const hiddev_ioctl_usage: ref;

axiom hiddev_ioctl_usage == $sub.ref(0, 530703);

procedure hiddev_ioctl_usage($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation hiddev_ioctl_usage($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i1;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i64;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i64;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i32;
  var $i86: i64;
  var $p88: ref;
  var $p89: ref;
  var $i90: i1;
  var $p91: ref;
  var $i92: i32;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $p103: ref;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i32;
  var $p108: ref;
  var $i109: i32;
  var $i110: i32;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $p69: ref;
  var $i114: i1;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $i118: i1;
  var $i119: i1;
  var $i120: i1;
  var $i121: i1;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var $i127: i64;
  var $p128: ref;
  var $i129: i32;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $i133: i1;
  var $p134: ref;
  var $i135: i32;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i32;
  var $i140: i64;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $i146: i64;
  var $p148: ref;
  var $i149: i32;
  var $p150: ref;
  var $p151: ref;
  var $i152: i32;
  var $i153: i1;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $i158: i32;
  var $i159: i32;
  var $i160: i64;
  var $p161: ref;
  var $i162: i32;
  var $i163: i64;
  var $p165: ref;
  var $i166: i32;
  var $i167: i32;
  var $i168: i1;
  var $i154: i32;
  var $p169: ref;
  var $i170: i64;
  var $i171: i1;
  var $p172: ref;
  var $i173: i32;
  var $i174: i1;
  var $i176: i64;
  var $p178: ref;
  var $i179: i32;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $i183: i32;
  var $i184: i32;
  var $i185: i64;
  var $p186: ref;
  var $i187: i32;
  var $i188: i32;
  var $i189: i1;
  var $i175: i32;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} $p3 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    call {:si_unique_call 1609} {:cexpr "hiddev_ioctl_usage:arg:cmd"} boogie_si_record_i32($i1);
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(256, 1));
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} $p6 := kmalloc(4124, 208);
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_11056;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(0, 1));
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i1, $sub.i32(0, 803452909));
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i1, 1344030740);
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p11);
    goto corral_source_split_11074;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} $i18 := copy_from_user($p17, $p2, 24);
    call {:si_unique_call 1614} {:cexpr "tmp___1"} boogie_si_record_i64($i18);
    goto corral_source_split_11075;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i1, $sub.i32(0, 1072150515));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i1, $sub.i32(0, 1072150517));
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    $p63 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, $sub.i32(0, 1));
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i65 == 1);
    $p70 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_11158;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    $p73 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_11162;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_11164;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} $p76 := hiddev_lookup_report($p5, $p3);
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    $i78 := $eq.i64($i77, 0);
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    $p79 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_11174;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p76, $mul.ref(0, 2088)), $mul.ref(2072, 1));
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_11176;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    $i83 := $uge.i32($i80, $i82);
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    $p84 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_11181;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    $i86 := $zext.i32.i64($i85);
    goto corral_source_split_11183;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p76, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref($i86, 8));
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_11185;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i1, 1075333136);
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i90 == 1);
    $p96 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p89, $mul.ref(0, 112)), $mul.ref(40, 1));
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_11197;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    $i100 := $uge.i32($i97, $i99);
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i100 == 1);
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i1, $sub.i32(0, 803452909));
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb66;

  $bb66:
    assume !($i101 == 1);
    goto corral_source_split_11211;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i1, 1344030740);
    goto corral_source_split_11212;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p69 := $p89;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i114 := $slt.i32($i1, 1075333132);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i1, 1075333136);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    $i116 := $slt.i32($i1, 1344030740);
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i1, 1344030740);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i117 == 1);
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p190 := $bitcast.ref.ref($p7);
    goto corral_source_split_11135;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} kfree($p190);
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb84:
    assume $i117 == 1;
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(24, 1));
    goto corral_source_split_11224;

  corral_source_split_11224:
    assume {:verifier.code 0} true;
    $i173 := $load.i32($M.0, $p172);
    goto corral_source_split_11225;

  corral_source_split_11225:
    assume {:verifier.code 0} true;
    $i174 := $ult.i32(0, $i173);
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i174} true;
    goto $bb111, $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume !($i174 == 1);
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb111:
    assume $i174 == 1;
    goto corral_source_split_11293;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    $i175 := 0;
    goto $bb114;

  $bb114:
    call $i176, $p178, $i179, $p180, $p181, $p182, $i183, $i184, $i185, $p186, $i187, $i188, $i189, $i175 := hiddev_ioctl_usage_loop_$bb114($p7, $p69, $p172, $i176, $p178, $i179, $p180, $p181, $p182, $i183, $i184, $i185, $p186, $i187, $i188, $i189, $i175);
    goto $bb114_last;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i176 := $sext.i32.i64($i175);
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(28, 1)), $mul.ref($i176, 4));
    goto corral_source_split_11298;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    goto corral_source_split_11299;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p69, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    $p182 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_11301;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    $i183 := $load.i32($M.0, $p182);
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    $i184 := $add.i32($i183, $i175);
    goto corral_source_split_11303;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    $i185 := $zext.i32.i64($i184);
    goto corral_source_split_11304;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($p181, $mul.ref($i185, 4));
    goto corral_source_split_11305;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p186, $i179);
    goto corral_source_split_11306;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    $i187 := $add.i32($i175, 1);
    call {:si_unique_call 1630} {:cexpr "i"} boogie_si_record_i32($i187);
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    $i188 := $load.i32($M.0, $p172);
    goto corral_source_split_11308;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    $i189 := $ult.i32($i187, $i188);
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i189 == 1);
    goto corral_source_split_11311;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb116:
    assume $i189 == 1;
    assume {:verifier.code 0} true;
    $i175 := $i187;
    goto $bb116_dummy;

  $bb82:
    assume $i116 == 1;
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i1, 1075333136);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb86;

  $bb87:
    assume $i118 == 1;
    goto corral_source_split_11228;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p69, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    $p144 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p144);
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    $i146 := $zext.i32.i64($i145);
    goto corral_source_split_11232;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p143, $mul.ref($i146, 20)), $mul.ref(4, 1));
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.0, $p148);
    call {:si_unique_call 1623} {:cexpr "i"} boogie_si_record_i32($i149);
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p7);
    goto corral_source_split_11236;

  corral_source_split_11236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} kfree($p150);
    goto corral_source_split_11237;

  corral_source_split_11237:
    assume {:verifier.code 0} true;
    $i10 := $i149;
    goto $bb3;

  $bb80:
    assume $i115 == 1;
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i1, 1075333132);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume !($i119 == 1);
    goto $bb86;

  $bb89:
    assume $i119 == 1;
    $p134 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(20, 1));
    goto corral_source_split_11239;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p69, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_11241;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    $p138 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_11242;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.0, $p138);
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    $i140 := $zext.i32.i64($i139);
    goto corral_source_split_11244;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p137, $mul.ref($i140, 4));
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p141, $i135);
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb78:
    assume $i114 == 1;
    assume {:verifier.code 0} true;
    $i120 := $slt.i32($i1, $sub.i32(0, 803452909));
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i1, $sub.i32(0, 803452909));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb86;

  $bb93:
    assume $i121 == 1;
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(24, 1));
    goto corral_source_split_11249;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.0, $p151);
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    $i153 := $ult.i32(0, $i152);
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb100, $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    assume !($i153 == 1);
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p7);
    goto corral_source_split_11287;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} $i170 := copy_to_user($p2, $p169, 4124);
    call {:si_unique_call 1629} {:cexpr "tmp___4"} boogie_si_record_i64($i170);
    goto corral_source_split_11288;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    $i171 := $ne.i64($i170, 0);
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb108:
    assume $i171 == 1;
    goto corral_source_split_11291;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p191 := $bitcast.ref.ref($p7);
    goto corral_source_split_11080;

  corral_source_split_11080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} kfree($p191);
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 14);
    goto $bb3;

  $bb100:
    assume $i153 == 1;
    goto corral_source_split_11267;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    $i154 := 0;
    goto $bb103;

  $bb103:
    call $p155, $p156, $p157, $i158, $i159, $i160, $p161, $i162, $i163, $p165, $i166, $i167, $i168, $i154 := hiddev_ioctl_usage_loop_$bb103($p7, $p69, $p151, $p155, $p156, $p157, $i158, $i159, $i160, $p161, $i162, $i163, $p165, $i166, $i167, $i168, $i154);
    goto $bb103_last;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p69, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_11271;

  corral_source_split_11271:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    $p157 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.0, $p157);
    goto corral_source_split_11273;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    $i159 := $add.i32($i158, $i154);
    goto corral_source_split_11274;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    $i160 := $zext.i32.i64($i159);
    goto corral_source_split_11275;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($p156, $mul.ref($i160, 4));
    goto corral_source_split_11276;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    $i162 := $load.i32($M.0, $p161);
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    $i163 := $sext.i32.i64($i154);
    goto corral_source_split_11278;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(28, 1)), $mul.ref($i163, 4));
    goto corral_source_split_11279;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p165, $i162);
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    $i166 := $add.i32($i154, 1);
    call {:si_unique_call 1627} {:cexpr "i"} boogie_si_record_i32($i166);
    goto corral_source_split_11281;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.0, $p151);
    goto corral_source_split_11282;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    $i168 := $ult.i32($i166, $i167);
    goto corral_source_split_11283;

  corral_source_split_11283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i168 == 1);
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb105:
    assume $i168 == 1;
    assume {:verifier.code 0} true;
    $i154 := $i166;
    goto $bb105_dummy;

  $bb91:
    assume $i120 == 1;
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i1, $sub.i32(0, 1072150517));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i122 == 1);
    goto $bb86;

  $bb95:
    assume $i122 == 1;
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p69, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_11254;

  corral_source_split_11254:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    $p125 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_11255;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.0, $p125);
    goto corral_source_split_11256;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    $i127 := $zext.i32.i64($i126);
    goto corral_source_split_11257;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p124, $mul.ref($i127, 4));
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    $p130 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(20, 1));
    goto corral_source_split_11259;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p130, $i129);
    goto corral_source_split_11260;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p11);
    goto corral_source_split_11261;

  corral_source_split_11261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} $i132 := copy_to_user($p2, $p131, 24);
    call {:si_unique_call 1626} {:cexpr "tmp___3"} boogie_si_record_i64($i132);
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    $i133 := $ne.i64($i132, 0);
    goto corral_source_split_11263;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb97:
    assume $i133 == 1;
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(24, 1));
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_11208;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    $i105 := $ugt.i32($i104, 1024);
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb72;

  $bb72:
    assume !($i105 == 1);
    $p106 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(24, 1));
    goto corral_source_split_11216;

  corral_source_split_11216:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p108);
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i107, $i109);
    goto corral_source_split_11218;

  corral_source_split_11218:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p89, $mul.ref(0, 112)), $mul.ref(40, 1));
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    goto corral_source_split_11220;

  corral_source_split_11220:
    assume {:verifier.code 0} true;
    $i113 := $ugt.i32($i110, $i112);
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i113 == 1);
    goto $bb69;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i113 == 1;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p192 := $bitcast.ref.ref($p7);
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} kfree($p192);
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i105 == 1;
    goto $bb71;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i101 == 1;
    goto $bb65;

  $bb62:
    assume $i100 == 1;
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb56:
    assume $i90 == 1;
    $p91 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_11188;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p89, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_11191;

  corral_source_split_11191:
    assume {:verifier.code 0} true;
    $i95 := $uge.i32($i92, $i94);
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb58:
    assume $i95 == 1;
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb53:
    assume $i83 == 1;
    goto corral_source_split_11179;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb50:
    assume $i78 == 1;
    goto corral_source_split_11171;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb44:
    assume $i65 == 1;
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} $p66 := hiddev_lookup_usage($p5, $p11);
    goto corral_source_split_11154;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    $i68 := $eq.i64($i67, 0);
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p69 := $p66;
    goto $bb49;

  $bb46:
    assume $i68 == 1;
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb36:
    assume $i58 == 1;
    goto corral_source_split_11140;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i1, $sub.i32(0, 803452909));
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb38;

  $bb39:
    assume $i59 == 1;
    $p60 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_11144;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 1);
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb38;

  $bb41:
    assume $i62 == 1;
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb19:
    assume $i20 == 1;
    $p21 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_11085;

  corral_source_split_11085:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_11087;

  corral_source_split_11087:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    $p24 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_11090;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} $p27 := hiddev_lookup_report($p5, $p3);
    goto corral_source_split_11092;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    $p30 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p27, $mul.ref(0, 2088)), $mul.ref(2072, 1));
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    $i34 := $uge.i32($i31, $i33);
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    $p35 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i36);
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref($i37, 8));
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    $p41 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_11113;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p40, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    $i45 := $uge.i32($i42, $i44);
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p40, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    $p48 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_11122;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    $i50 := $zext.i32.i64($i49);
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p47, $mul.ref($i50, 20)), $mul.ref(0, 1));
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    $p54 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p11);
    goto corral_source_split_11129;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} $i56 := copy_to_user($p2, $p55, 24);
    call {:si_unique_call 1619} {:cexpr "tmp___2"} boogie_si_record_i64($i56);
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_11131;

  corral_source_split_11131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i57 == 1;
    goto corral_source_split_11133;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb28:
    assume $i45 == 1;
    goto corral_source_split_11119;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb25:
    assume $i34 == 1;
    goto corral_source_split_11107;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume $i29 == 1;
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb15:
    assume $i19 == 1;
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p7);
    goto corral_source_split_11066;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} $i15 := copy_from_user($p14, $p2, 4124);
    call {:si_unique_call 1612} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_11068;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  $bb116_dummy:
    assume false;
    return;

  $bb114_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_11295;

  $bb105_dummy:
    assume false;
    return;

  $bb103_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_11269;
}



const ldv_mutex_unlock_107: ref;

axiom ldv_mutex_unlock_107 == $sub.ref(0, 531735);

procedure ldv_mutex_unlock_107($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_107($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11313;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} ldv_mutex_unlock_existancelock_of_hiddev($p0);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_11314;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} mutex_unlock($p0);
    goto corral_source_split_11315;

  corral_source_split_11315:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;
}



const hiddev_lookup_usage: ref;

axiom hiddev_lookup_usage == $sub.ref(0, 532767);

procedure hiddev_lookup_usage($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation hiddev_lookup_usage($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i31: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i39: i32;
  var $i38: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i30: i32;
  var $p29: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p25: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11317;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_11318;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_11319;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_11323;

  corral_source_split_11323:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i6, 3);
    goto corral_source_split_11325;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 8600)), $mul.ref(80, 1));
    goto corral_source_split_11329;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_11332;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32($i12, 1);
    goto corral_source_split_11333;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    goto corral_source_split_11335;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p10, $mul.ref($i14, 2072)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_11336;

  corral_source_split_11336:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_11337;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_11338;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 2088)), $mul.ref(0, 1));
    goto corral_source_split_11339;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p10, $mul.ref($i14, 2072)), $mul.ref(8, 1));
    goto corral_source_split_11341;

  corral_source_split_11341:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i21, $i23);
    goto corral_source_split_11343;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_11327;

  corral_source_split_11327:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    $p25 := $p18;
    goto $bb11;

  $bb11:
    call $p26, $i27, $i28, $i31, $p33, $p34, $p35, $i36, $i37, $p40, $p41, $i42, $p44, $i45, $p46, $i47, $i48, $p49, $i50, $p51, $i52, $i58, $i59, $i60, $i39, $i38, $i61, $i62, $i63, $i30, $p29, $p65, $p66, $p67, $p68, $i69, $i70, $p25 := hiddev_lookup_usage_loop_$bb11($p1, $i23, $p26, $i27, $i28, $i31, $p33, $p34, $p35, $i36, $i37, $p40, $p41, $i42, $p44, $i45, $p46, $i47, $i48, $p49, $i50, $p51, $i52, $i58, $i59, $i60, $i39, $i38, $i61, $i62, $i63, $i30, $p29, $p65, $p66, $p67, $p68, $i69, $i70, $p25);
    goto $bb11_last;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 2088)), $mul.ref(2072, 1));
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    $i28 := $ult.i32(0, $i27);
    goto corral_source_split_11351;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    $p29 := $p25;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 2088)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_11401;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 2088)), $mul.ref(0, 1));
    goto corral_source_split_11403;

  corral_source_split_11403:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_11404;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, $i23);
    goto corral_source_split_11405;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i70 == 1);
    goto corral_source_split_11407;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb32:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $p25 := $p66;
    goto $bb32_dummy;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_11353;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb16;

  $bb16:
    call $i31, $p33, $p34, $p35, $i36, $i37, $p40, $p41, $i42, $p44, $i45, $p46, $i47, $i48, $p49, $i50, $p51, $i52, $i58, $i59, $i60, $i39, $i38, $i61, $i62, $i63, $i30 := hiddev_lookup_usage_loop_$bb16($p1, $p26, $i31, $p33, $p34, $p35, $i36, $i37, $p40, $p41, $i42, $p44, $i45, $p46, $i47, $i48, $p49, $i50, $p51, $i52, $i58, $i59, $i60, $i39, $i38, $i61, $i62, $i63, $i30, $p25);
    goto $bb16_last;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref($i31, 8));
    goto corral_source_split_11358;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_11359;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_11360;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_11361;

  corral_source_split_11361:
    assume {:verifier.code 0} true;
    $i37 := $ult.i32(0, $i36);
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    $i38 := $i30;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i38, 1);
    call {:si_unique_call 1634} {:cexpr "i"} boogie_si_record_i32($i61);
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p26);
    goto corral_source_split_11395;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    $i63 := $ult.i32($i61, $i62);
    goto corral_source_split_11396;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i63 == 1);
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    $p29 := $p25;
    goto $bb15;

  $bb29:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $i30 := $i61;
    goto $bb29_dummy;

  $bb18:
    assume $i37 == 1;
    goto corral_source_split_11364;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb21;

  $bb21:
    call $p40, $p41, $i42, $p44, $i45, $p46, $i47, $i48, $p49, $i50, $p51, $i52, $i58, $i59, $i60, $i39 := hiddev_lookup_usage_loop_$bb21($p1, $p34, $p35, $p40, $p41, $i42, $p44, $i45, $p46, $i47, $i48, $p49, $i50, $p51, $i52, $i58, $i59, $i60, $i39, $i30, $p25);
    goto $bb21_last;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p34, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_11369;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i39);
    goto corral_source_split_11370;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    goto corral_source_split_11371;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p41, $mul.ref($i42, 20)), $mul.ref(0, 1));
    goto corral_source_split_11372;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_11373;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_11375;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i45, $i47);
    goto corral_source_split_11376;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    $p49, $i50, $p51, $i52 := $p25, $i30, $p34, $i39;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i39, 1);
    call {:si_unique_call 1633} {:cexpr "j"} boogie_si_record_i32($i58);
    goto corral_source_split_11388;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p35);
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    $i60 := $ult.i32($i58, $i59);
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i60 == 1);
    goto corral_source_split_11392;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    $i38 := $i30;
    goto $bb20;

  $bb26:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i39 := $i58;
    goto $bb26_dummy;

  $bb23:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11378;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p49, $mul.ref(0, 2088)), $mul.ref(16, 1));
    goto corral_source_split_11379;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_11380;

  corral_source_split_11380:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_11381;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i54);
    goto corral_source_split_11382;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_11383;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i50);
    goto corral_source_split_11384;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_11385;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i52);
    goto corral_source_split_11386;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    $p8 := $p51;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb26_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_11366;

  $bb29_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_11355;

  $bb32_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_11347;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 533799);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 534831);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1635} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1636} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1637} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_11410;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 535863);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11412;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 536895);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1638} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11414;

  corral_source_split_11414:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1639} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1640} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_11415;

  corral_source_split_11415:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 537927);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11417;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    return;
}



const poll_wait: ref;

axiom poll_wait == $sub.ref(0, 538959);

procedure poll_wait($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation poll_wait($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11419;

  corral_source_split_11419:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_11421;

  corral_source_split_11421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_11423;

  corral_source_split_11423:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_11425;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_11426;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_11427;

  corral_source_split_11427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_11429;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_11430;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_11431;

  corral_source_split_11431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_11433;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11434;

  corral_source_split_11434:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    call {:si_unique_call 1641} devirtbounce.8($p12, $p0, $p1, $p2);
    goto corral_source_split_11435;

  corral_source_split_11435:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 539991);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} $p0 := devirtbounce.9(0, current_task);
    goto corral_source_split_11437;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const autoremove_wake_function: ref;

axiom autoremove_wake_function == $sub.ref(0, 541023);

procedure autoremove_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const ldv_mutex_lock_interruptible_99: ref;

axiom ldv_mutex_lock_interruptible_99 == $sub.ref(0, 542055);

procedure ldv_mutex_lock_interruptible_99($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.46, assertsPassed;



implementation ldv_mutex_lock_interruptible_99($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11439;

  corral_source_split_11439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 1644} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11440;

  corral_source_split_11440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} $i2 := ldv_mutex_lock_interruptible_thread_lock_of_hiddev_list($p0);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    call {:si_unique_call 1646} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_11441;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;
}



const prepare_to_wait: ref;

axiom prepare_to_wait == $sub.ref(0, 543087);

procedure prepare_to_wait($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation prepare_to_wait($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} {:cexpr "prepare_to_wait:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11443;

  corral_source_split_11443:
    assume {:verifier.code 0} true;
    return;
}



const signal_pending: ref;

axiom signal_pending == $sub.ref(0, 544119);

procedure signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11445;

  corral_source_split_11445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} $i1 := test_tsk_thread_flag($p0, 2);
    call {:si_unique_call 1649} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11446;

  corral_source_split_11446:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11447;

  corral_source_split_11447:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_11448;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_11449;

  corral_source_split_11449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1651} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_11450;

  corral_source_split_11450:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_11451;

  corral_source_split_11451:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_mutex_unlock_100: ref;

axiom ldv_mutex_unlock_100 == $sub.ref(0, 545151);

procedure ldv_mutex_unlock_100($p0: ref);
  free requires assertsPassed;
  modifies $M.46, assertsPassed;



implementation ldv_mutex_unlock_100($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11453;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} ldv_mutex_unlock_thread_lock_of_hiddev_list($p0);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_11454;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} mutex_unlock($p0);
    goto corral_source_split_11455;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 546183);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11457;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_interruptible_101: ref;

axiom ldv_mutex_lock_interruptible_101 == $sub.ref(0, 547215);

procedure ldv_mutex_lock_interruptible_101($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.46, assertsPassed;



implementation ldv_mutex_lock_interruptible_101($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11459;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 1655} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11460;

  corral_source_split_11460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} $i2 := ldv_mutex_lock_interruptible_thread_lock_of_hiddev_list($p0);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    call {:si_unique_call 1657} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_11461;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_102: ref;

axiom ldv_mutex_unlock_102 == $sub.ref(0, 548247);

procedure ldv_mutex_unlock_102($p0: ref);
  free requires assertsPassed;
  modifies $M.46, assertsPassed;



implementation ldv_mutex_unlock_102($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11463;

  corral_source_split_11463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} ldv_mutex_unlock_thread_lock_of_hiddev_list($p0);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_11464;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} mutex_unlock($p0);
    goto corral_source_split_11465;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_103: ref;

axiom ldv_mutex_unlock_103 == $sub.ref(0, 549279);

procedure ldv_mutex_unlock_103($p0: ref);
  free requires assertsPassed;
  modifies $M.46, assertsPassed;



implementation ldv_mutex_unlock_103($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11467;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} ldv_mutex_unlock_thread_lock_of_hiddev_list($p0);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_11468;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} mutex_unlock($p0);
    goto corral_source_split_11469;

  corral_source_split_11469:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_104: ref;

axiom ldv_mutex_unlock_104 == $sub.ref(0, 550311);

procedure ldv_mutex_unlock_104($p0: ref);
  free requires assertsPassed;
  modifies $M.46, assertsPassed;



implementation ldv_mutex_unlock_104($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} ldv_mutex_unlock_thread_lock_of_hiddev_list($p0);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_11472;

  corral_source_split_11472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} mutex_unlock($p0);
    goto corral_source_split_11473;

  corral_source_split_11473:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_105: ref;

axiom ldv_mutex_unlock_105 == $sub.ref(0, 551343);

procedure ldv_mutex_unlock_105($p0: ref);
  free requires assertsPassed;
  modifies $M.46, assertsPassed;



implementation ldv_mutex_unlock_105($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11475;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} ldv_mutex_unlock_thread_lock_of_hiddev_list($p0);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_11476;

  corral_source_split_11476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} mutex_unlock($p0);
    goto corral_source_split_11477;

  corral_source_split_11477:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_thread_lock_of_hiddev_list: ref;

axiom ldv_mutex_unlock_thread_lock_of_hiddev_list == $sub.ref(0, 552375);

procedure ldv_mutex_unlock_thread_lock_of_hiddev_list($p0: ref);
  free requires assertsPassed;
  modifies $M.46, assertsPassed;



implementation ldv_mutex_unlock_thread_lock_of_hiddev_list($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11479;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    $i1 := $M.46;
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 2);
    goto corral_source_split_11481;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1667} {:cexpr "ldv_mutex_thread_lock_of_hiddev_list"} boogie_si_record_i32(1);
    goto corral_source_split_11486;

  corral_source_split_11486:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11483;

  corral_source_split_11483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} ldv_error();
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_11484;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_379:
    assume !assertsPassed;
    return;
}



const mutex_lock_interruptible: ref;

axiom mutex_lock_interruptible == $sub.ref(0, 553407);

procedure mutex_lock_interruptible($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_lock_interruptible($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11488;

  corral_source_split_11488:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1668} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1669} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_11489;

  corral_source_split_11489:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_interruptible_thread_lock_of_hiddev_list: ref;

axiom ldv_mutex_lock_interruptible_thread_lock_of_hiddev_list == $sub.ref(0, 554439);

procedure ldv_mutex_lock_interruptible_thread_lock_of_hiddev_list($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.46, assertsPassed;



implementation ldv_mutex_lock_interruptible_thread_lock_of_hiddev_list($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11491;

  corral_source_split_11491:
    assume {:verifier.code 0} true;
    $i1 := $M.46;
    goto corral_source_split_11492;

  corral_source_split_11492:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_11493;

  corral_source_split_11493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} $i3 := ldv_undef_int();
    call {:si_unique_call 1672} {:cexpr "nondetermined"} boogie_si_record_i32($i3);
    goto corral_source_split_11498;

  corral_source_split_11498:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_11499;

  corral_source_split_11499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_11504;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 4);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_11506;

  corral_source_split_11506:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_11501;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1673} {:cexpr "ldv_mutex_thread_lock_of_hiddev_list"} boogie_si_record_i32(2);
    goto corral_source_split_11502;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11495;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} ldv_error();
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_11496;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_382:
    assume !assertsPassed;
    return;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 555471);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11508;

  corral_source_split_11508:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1674} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1675} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1676} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_11509;

  corral_source_split_11509:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0, 556503);

procedure test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} {:cexpr "test_tsk_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_11511;

  corral_source_split_11511:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11712)), $mul.ref(8, 1));
    goto corral_source_split_11512;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.44, $p2);
    goto corral_source_split_11513;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11514;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} $i5 := test_ti_thread_flag($p4, $i1);
    call {:si_unique_call 1679} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_11515;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 557535);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} {:cexpr "test_ti_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_11517;

  corral_source_split_11517:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_11518;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_11519;

  corral_source_split_11519:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11520;

  corral_source_split_11520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} $i5 := variable_test_bit($i2, $p4);
    call {:si_unique_call 1682} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_11521;

  corral_source_split_11521:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 558567);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1684} $i2 := devirtbounce.10(0, $p1, $i0);
    call {:si_unique_call 1685} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_11523;

  corral_source_split_11523:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 559599);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_11525;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} $p1 := calloc(1, $i0);
    goto corral_source_split_11526;

  corral_source_split_11526:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_11527;

  corral_source_split_11527:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_11528;

  corral_source_split_11528:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_11529;

  corral_source_split_11529:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1688} __VERIFIER_assume($i4);
    goto corral_source_split_11530;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 560631);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.47;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1690} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_11532;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_11533;

  corral_source_split_11533:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.47;
    call {:si_unique_call 1691} cmdloc_dummy_var_16 := $memset.i8(cmdloc_dummy_var_15, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.47 := cmdloc_dummy_var_16;
    goto corral_source_split_11534;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_usb_driver_6: ref;

axiom ldv_usb_driver_6 == $sub.ref(0, 561663);

procedure ldv_usb_driver_6();
  free requires assertsPassed;
  modifies $M.48, $M.0, $CurrAddr;



implementation ldv_usb_driver_6()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11536;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} $p0 := ldv_init_zalloc(1560);
    goto corral_source_split_11537;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    goto corral_source_split_11538;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    $M.48 := $p0;
    goto corral_source_split_11539;

  corral_source_split_11539:
    assume {:verifier.code 0} true;
    return;
}



const choose_timer_2: ref;

axiom choose_timer_2 == $sub.ref(0, 562695);

procedure choose_timer_2();
  free requires assertsPassed;
  modifies $M.11, $M.13, $M.15, $M.17, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr, $M.10, $M.12, $M.14, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.24;



implementation choose_timer_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11541;

  corral_source_split_11541:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1693} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1694} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1695} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} ldv_stop();
    goto corral_source_split_11583;

  corral_source_split_11583:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_11547;

  corral_source_split_11547:
    assume {:verifier.code 0} true;
    $i18 := $M.17;
    goto corral_source_split_11548;

  corral_source_split_11548:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_11549;

  corral_source_split_11549:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i19 == 1;
    goto corral_source_split_11577;

  corral_source_split_11577:
    assume {:verifier.code 0} true;
    $M.17 := 2;
    call {:si_unique_call 1702} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(2);
    goto corral_source_split_11578;

  corral_source_split_11578:
    assume {:verifier.code 0} true;
    $i20 := $M.17;
    goto corral_source_split_11579;

  corral_source_split_11579:
    assume {:verifier.code 0} true;
    $p21 := $M.16;
    goto corral_source_split_11580;

  corral_source_split_11580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} ldv_timer_2($i20, $p21);
    goto corral_source_split_11581;

  corral_source_split_11581:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_11543;

  corral_source_split_11543:
    assume {:verifier.code 0} true;
    $i14 := $M.15;
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_11545;

  corral_source_split_11545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_11571;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    $M.15 := 2;
    call {:si_unique_call 1700} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(2);
    goto corral_source_split_11572;

  corral_source_split_11572:
    assume {:verifier.code 0} true;
    $i16 := $M.15;
    goto corral_source_split_11573;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    $p17 := $M.14;
    goto corral_source_split_11574;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} ldv_timer_2($i16, $p17);
    goto corral_source_split_11575;

  corral_source_split_11575:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_11551;

  corral_source_split_11551:
    assume {:verifier.code 0} true;
    $i10 := $M.13;
    goto corral_source_split_11552;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_11553;

  corral_source_split_11553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_11565;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    $M.13 := 2;
    call {:si_unique_call 1698} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(2);
    goto corral_source_split_11566;

  corral_source_split_11566:
    assume {:verifier.code 0} true;
    $i12 := $M.13;
    goto corral_source_split_11567;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    $p13 := $M.12;
    goto corral_source_split_11568;

  corral_source_split_11568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} ldv_timer_2($i12, $p13);
    goto corral_source_split_11569;

  corral_source_split_11569:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_11555;

  corral_source_split_11555:
    assume {:verifier.code 0} true;
    $i6 := $M.11;
    goto corral_source_split_11556;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_11557;

  corral_source_split_11557:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_11559;

  corral_source_split_11559:
    assume {:verifier.code 0} true;
    $M.11 := 2;
    call {:si_unique_call 1696} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(2);
    goto corral_source_split_11560;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    $i8 := $M.11;
    goto corral_source_split_11561;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    $p9 := $M.10;
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} ldv_timer_2($i8, $p9);
    goto corral_source_split_11563;

  corral_source_split_11563:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const ldv_timer_2: ref;

axiom ldv_timer_2 == $sub.ref(0, 563727);

procedure ldv_timer_2($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.24;



implementation ldv_timer_2($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} {:cexpr "ldv_timer_2:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_11585;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_11586;

  corral_source_split_11586:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_11587;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_11588;

  corral_source_split_11588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} hid_retry_timeout($i3);
    goto corral_source_split_11589;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_11590;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 564759);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11592;

  corral_source_split_11592:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 565791);

procedure work_init_1();
  free requires assertsPassed;
  modifies $M.18, $M.20, $M.22, $M.24;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11594;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 1709} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_11595;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    $M.20 := 0;
    call {:si_unique_call 1710} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_11596;

  corral_source_split_11596:
    assume {:verifier.code 0} true;
    $M.22 := 0;
    call {:si_unique_call 1711} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_11597;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    $M.24 := 0;
    call {:si_unique_call 1712} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_11598;

  corral_source_split_11598:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_1: ref;

axiom invoke_work_1 == $sub.ref(0, 566823);

procedure invoke_work_1();
  free requires assertsPassed;
  modifies $M.18, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.20, $M.22, $M.24, $CurrAddr;



implementation invoke_work_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11600;

  corral_source_split_11600:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1713} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1714} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1715} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} ldv_stop();
    goto corral_source_split_11654;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_11606;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    $i21 := $M.24;
    goto corral_source_split_11607;

  corral_source_split_11607:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_11608;

  corral_source_split_11608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_11650;

  corral_source_split_11650:
    assume {:verifier.code 0} true;
    $i23 := $M.24;
    goto corral_source_split_11651;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_11652;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.24 := 4;
    call {:si_unique_call 1725} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(4);
    goto corral_source_split_11645;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    $p25 := $M.19;
    goto corral_source_split_11646;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} hid_reset($p25);
    goto corral_source_split_11647;

  corral_source_split_11647:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 1727} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_11648;

  corral_source_split_11648:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_11602;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    $i16 := $M.22;
    goto corral_source_split_11603;

  corral_source_split_11603:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_11604;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_11641;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    $i18 := $M.22;
    goto corral_source_split_11642;

  corral_source_split_11642:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_11643;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 1722} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(4);
    goto corral_source_split_11636;

  corral_source_split_11636:
    assume {:verifier.code 0} true;
    $p20 := $M.19;
    goto corral_source_split_11637;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} hid_reset($p20);
    goto corral_source_split_11638;

  corral_source_split_11638:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 1724} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_11639;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_11610;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    $i11 := $M.20;
    goto corral_source_split_11611;

  corral_source_split_11611:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_11612;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_11632;

  corral_source_split_11632:
    assume {:verifier.code 0} true;
    $i13 := $M.20;
    goto corral_source_split_11633;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_11634;

  corral_source_split_11634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.20 := 4;
    call {:si_unique_call 1719} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(4);
    goto corral_source_split_11627;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    $p15 := $M.19;
    goto corral_source_split_11628;

  corral_source_split_11628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} hid_reset($p15);
    goto corral_source_split_11629;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 1721} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_11630;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_11614;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    $i6 := $M.18;
    goto corral_source_split_11615;

  corral_source_split_11615:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_11616;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_11623;

  corral_source_split_11623:
    assume {:verifier.code 0} true;
    $i8 := $M.18;
    goto corral_source_split_11624;

  corral_source_split_11624:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_11625;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.18 := 4;
    call {:si_unique_call 1716} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(4);
    goto corral_source_split_11618;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    $p10 := $M.19;
    goto corral_source_split_11619;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} hid_reset($p10);
    goto corral_source_split_11620;

  corral_source_split_11620:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1718} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_11621;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const timer_init_2: ref;

axiom timer_init_2 == $sub.ref(0, 567855);

procedure timer_init_2();
  free requires assertsPassed;
  modifies $M.11, $M.13, $M.15, $M.17;



implementation timer_init_2()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11656;

  corral_source_split_11656:
    assume {:verifier.code 0} true;
    $M.11 := 0;
    call {:si_unique_call 1729} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_11657;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    $M.13 := 0;
    call {:si_unique_call 1730} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_11658;

  corral_source_split_11658:
    assume {:verifier.code 0} true;
    $M.15 := 0;
    call {:si_unique_call 1731} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_11659;

  corral_source_split_11659:
    assume {:verifier.code 0} true;
    $M.17 := 0;
    call {:si_unique_call 1732} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_11660;

  corral_source_split_11660:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_hid_ll_driver_7: ref;

axiom ldv_initialize_hid_ll_driver_7 == $sub.ref(0, 568887);

procedure ldv_initialize_hid_ll_driver_7();
  free requires assertsPassed;
  modifies $M.50, $M.0, $CurrAddr;



implementation ldv_initialize_hid_ll_driver_7()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11662;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} $p0 := ldv_init_zalloc(8592);
    goto corral_source_split_11663;

  corral_source_split_11663:
    assume {:verifier.code 0} true;
    goto corral_source_split_11664;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    $M.50 := $p0;
    goto corral_source_split_11665;

  corral_source_split_11665:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 569919);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.47, $M.51, $M.52, $M.53, $M.11, $M.13, $M.15, $M.17, $M.54, $M.18, $M.20, $M.22, $M.24, $M.55, $M.56, $M.57, $M.58, $M.59, $M.0, $M.60, $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.61, $M.63, $M.37, $M.64, $M.65, $M.50, $M.48, $M.19, $M.21, $M.23, $M.25, $M.10, $M.12, $M.14, $M.16, $M.62, $M.76, $M.46, $M.71, $M.70, $M.69, $M.27, $M.26, $M.35, $M.36, $M.28, $M.109, $M.72, $M.38, $M.2, $M.110, $M.111, $M.68, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.66, $M.67, $M.127, $M.128, $M.129, $M.130, $CurrAddr, $M.44, $M.45, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.42, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i1;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $i123: i8;
  var $i124: i32;
  var $i125: i8;
  var $i126: i64;
  var $i127: i8;
  var $i128: i32;
  var $i129: i8;
  var $i130: i32;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $i135: i8;
  var $i136: i32;
  var $i137: i8;
  var $i138: i64;
  var $i139: i8;
  var $i140: i32;
  var $i141: i8;
  var $i142: i32;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $i147: i8;
  var $i148: i32;
  var $i149: i8;
  var $i150: i64;
  var $i151: i8;
  var $i152: i32;
  var $i153: i8;
  var $i154: i32;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $i159: i8;
  var $i160: i32;
  var $i161: i8;
  var $i162: i64;
  var $i163: i8;
  var $i164: i32;
  var $i165: i8;
  var $i166: i32;
  var $i168: i32;
  var $i169: i1;
  var $p170: ref;
  var $i171: i8;
  var $i172: i32;
  var $i173: i8;
  var $i174: i64;
  var $i175: i8;
  var $i176: i32;
  var $i177: i8;
  var $i178: i32;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $i183: i64;
  var $i185: i32;
  var $i186: i1;
  var $p187: ref;
  var $i188: i64;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $i193: i64;
  var $i195: i32;
  var $i196: i1;
  var $p197: ref;
  var $i198: i64;
  var $i200: i32;
  var $i201: i1;
  var $p202: ref;
  var $i203: i64;
  var $i205: i32;
  var $i206: i1;
  var $p207: ref;
  var $i208: i32;
  var $i210: i32;
  var $i211: i1;
  var $p212: ref;
  var $i213: i32;
  var $i215: i32;
  var $i216: i1;
  var $p217: ref;
  var $i218: i32;
  var $i220: i32;
  var $i221: i1;
  var $p222: ref;
  var $i223: i32;
  var $i225: i32;
  var $i226: i1;
  var $p227: ref;
  var $i228: i32;
  var $i230: i32;
  var $i231: i1;
  var $p232: ref;
  var $i234: i32;
  var $i235: i1;
  var $p236: ref;
  var $i238: i32;
  var $i239: i1;
  var $p240: ref;
  var $i242: i32;
  var $i243: i1;
  var $p244: ref;
  var $i246: i32;
  var $i247: i1;
  var $p248: ref;
  var $i250: i32;
  var $i251: i1;
  var $p252: ref;
  var $i253: i32;
  var $i254: i1;
  var $p255: ref;
  var $i256: i32;
  var $i257: i32;
  var $i258: i1;
  var $i259: i32;
  var $i260: i1;
  var $p261: ref;
  var $i262: i32;
  var $i263: i32;
  var $i264: i32;
  var $i266: i32;
  var $i267: i1;
  var $p268: ref;
  var $i269: i32;
  var $i270: i32;
  var $i271: i32;
  var $i273: i32;
  var $i274: i1;
  var $p275: ref;
  var $i276: i32;
  var $i277: i32;
  var $i278: i32;
  var $i280: i32;
  var $i281: i1;
  var $p282: ref;
  var $i283: i32;
  var $i284: i32;
  var $i285: i32;
  var $i287: i32;
  var $i288: i1;
  var $p289: ref;
  var $i290: i32;
  var $i291: i32;
  var $i292: i32;
  var $i294: i32;
  var $i295: i1;
  var $p296: ref;
  var $i298: i32;
  var $i299: i1;
  var $p300: ref;
  var $i302: i32;
  var $i303: i1;
  var $p304: ref;
  var $i306: i32;
  var $i307: i1;
  var $p308: ref;
  var $i310: i32;
  var $i311: i1;
  var $p312: ref;
  var $i314: i32;
  var $i315: i1;
  var $p316: ref;
  var $i317: i32;
  var $i318: i1;
  var $p319: ref;
  var $i320: i32;
  var $i321: i32;
  var $i322: i1;
  var $p323: ref;
  var $i324: i32;
  var $i325: i32;
  var $i326: i1;
  var $p327: ref;
  var $i328: i32;
  var $i329: i32;
  var $i330: i1;
  var $p331: ref;
  var $i332: i32;
  var $i333: i32;
  var $i334: i1;
  var $p335: ref;
  var $i336: i32;
  var $i337: i32;
  var $i338: i1;
  var $i340: i32;
  var $i341: i1;
  var $i343: i32;
  var $i344: i1;
  var $i346: i32;
  var $i347: i1;
  var $i349: i32;
  var $i350: i32;
  var $i351: i32;
  var $i352: i1;
  var $i354: i32;
  var $i355: i32;
  var $i356: i32;
  var $i357: i1;
  var $i358: i32;
  var $i359: i1;
  var $i360: i32;
  var $i361: i1;
  var $i362: i32;
  var $i363: i1;
  var $i364: i32;
  var $i365: i1;
  var $i366: i1;
  var $i367: i1;
  var $i368: i32;
  var $i369: i1;
  var $i370: i32;
  var $i371: i1;
  var $i372: i32;
  var $i373: i1;
  var $i374: i32;
  var $i375: i32;
  var $i376: i1;
  var $i377: i32;
  var $i378: i1;
  var $i379: i32;
  var $i380: i1;
  var vslice_dummy_var_75: ref;
  var vslice_dummy_var_76: ref;
  var vslice_dummy_var_77: ref;
  var vslice_dummy_var_78: ref;
  var vslice_dummy_var_79: ref;
  var vslice_dummy_var_80: ref;
  var vslice_dummy_var_81: ref;
  var vslice_dummy_var_82: ref;
  var vslice_dummy_var_83: ref;
  var vslice_dummy_var_84: ref;
  var vslice_dummy_var_85: ref;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;

  $bb0:
    call {:si_unique_call 1734} $initialize();
    goto corral_source_split_11667;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} $p10 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_11668;

  corral_source_split_11668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} $p11 := ldv_init_zalloc(32);
    goto corral_source_split_11669;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_11670;

  corral_source_split_11670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} $p13 := ldv_init_zalloc(1);
    goto corral_source_split_11671;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} $p14 := ldv_init_zalloc(2088);
    goto corral_source_split_11672;

  corral_source_split_11672:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_11673;

  corral_source_split_11673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} $p16 := ldv_init_zalloc(1);
    goto corral_source_split_11674;

  corral_source_split_11674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} ldv_initialize();
    goto corral_source_split_11675;

  corral_source_split_11675:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p0);
    goto corral_source_split_11676;

  corral_source_split_11676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} vslice_dummy_var_75 := ldv_memset($p17, 0, 4);
    goto corral_source_split_11677;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_11678;

  corral_source_split_11678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} vslice_dummy_var_76 := ldv_memset($p19, 0, 4);
    goto corral_source_split_11679;

  corral_source_split_11679:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p2);
    goto corral_source_split_11680;

  corral_source_split_11680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} vslice_dummy_var_77 := ldv_memset($p21, 0, 4);
    goto corral_source_split_11681;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} vslice_dummy_var_78 := ldv_memset($p3, 0, 1);
    goto corral_source_split_11682;

  corral_source_split_11682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} vslice_dummy_var_79 := ldv_memset($p4, 0, 1);
    goto corral_source_split_11683;

  corral_source_split_11683:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p5);
    goto corral_source_split_11684;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} vslice_dummy_var_80 := ldv_memset($p25, 0, 4);
    goto corral_source_split_11685;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p6);
    goto corral_source_split_11686;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} vslice_dummy_var_81 := ldv_memset($p27, 0, 4);
    goto corral_source_split_11687;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p7);
    goto corral_source_split_11688;

  corral_source_split_11688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} vslice_dummy_var_82 := ldv_memset($p29, 0, 4);
    goto corral_source_split_11689;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p8);
    goto corral_source_split_11690;

  corral_source_split_11690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} vslice_dummy_var_83 := ldv_memset($p31, 0, 8);
    goto corral_source_split_11691;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p9);
    goto corral_source_split_11692;

  corral_source_split_11692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} vslice_dummy_var_84 := ldv_memset($p33, 0, 8);
    goto corral_source_split_11693;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p10);
    goto corral_source_split_11694;

  corral_source_split_11694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} vslice_dummy_var_85 := ldv_memset($p35, 0, 4);
    goto corral_source_split_11695;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    $M.51 := 0;
    call {:si_unique_call 1763} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_11696;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    $M.52 := 0;
    call {:si_unique_call 1764} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_11697;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    $M.53 := 0;
    call {:si_unique_call 1765} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_11698;

  corral_source_split_11698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} timer_init_2();
    goto corral_source_split_11699;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1767} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_11700;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} work_init_1();
    goto corral_source_split_11701;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1769} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    $M.56 := 0;
    call {:si_unique_call 1770} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_11703;

  corral_source_split_11703:
    assume {:verifier.code 0} true;
    $M.57 := 0;
    call {:si_unique_call 1771} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_11704;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 1772} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_11705;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    $M.59 := 0;
    call {:si_unique_call 1773} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_11706;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $p58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $p66, $p67, $i68, $i70, $i71, $p72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $p80, $i81, $i82, $i83, $i84, $i85, $i86, $p87, $i88, $i89, $i90, $i91, $p92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $p118, $i120, $i121, $p122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i132, $i133, $p134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i144, $i145, $p146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i156, $i157, $p158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i168, $i169, $p170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i180, $i181, $p182, $i183, $i185, $i186, $p187, $i188, $i190, $i191, $p192, $i193, $i195, $i196, $p197, $i198, $i200, $i201, $p202, $i203, $i205, $i206, $p207, $i208, $i210, $i211, $p212, $i213, $i215, $i216, $p217, $i218, $i220, $i221, $p222, $i223, $i225, $i226, $p227, $i228, $i230, $i231, $p232, $i234, $i235, $p236, $i238, $i239, $p240, $i242, $i243, $p244, $i246, $i247, $p248, $i250, $i251, $p252, $i253, $i254, $p255, $i256, $i257, $i258, $i259, $i260, $p261, $i262, $i263, $i264, $i266, $i267, $p268, $i269, $i270, $i271, $i273, $i274, $p275, $i276, $i277, $i278, $i280, $i281, $p282, $i283, $i284, $i285, $i287, $i288, $p289, $i290, $i291, $i292, $i294, $i295, $p296, $i298, $i299, $p300, $i302, $i303, $p304, $i306, $i307, $p308, $i310, $i311, $p312, $i314, $i315, $p316, $i317, $i318, $p319, $i320, $i321, $i322, $p323, $i324, $i325, $i326, $p327, $i328, $i329, $i330, $p331, $i332, $i333, $i334, $p335, $i336, $i337, $i338, $i340, $i341, $i343, $i344, $i346, $i347, $i349, $i350, $i351, $i352, $i354, $i355, $i356, $i357, $i358, $i359, $i360, $i361, $i362, $i363, $i364, $i365, $i366, $i367, $i368, $i369, $i370, $i371, $i372, $i373, $i374, $i375, $i376, $i377, $i378, $i379, $i380, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p12, $p13, $p15, $p16, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $p58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $p66, $p67, $i68, $i70, $i71, $p72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $p80, $i81, $i82, $i83, $i84, $i85, $i86, $p87, $i88, $i89, $i90, $i91, $p92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $p118, $i120, $i121, $p122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i132, $i133, $p134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i144, $i145, $p146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i156, $i157, $p158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i168, $i169, $p170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i180, $i181, $p182, $i183, $i185, $i186, $p187, $i188, $i190, $i191, $p192, $i193, $i195, $i196, $p197, $i198, $i200, $i201, $p202, $i203, $i205, $i206, $p207, $i208, $i210, $i211, $p212, $i213, $i215, $i216, $p217, $i218, $i220, $i221, $p222, $i223, $i225, $i226, $p227, $i228, $i230, $i231, $p232, $i234, $i235, $p236, $i238, $i239, $p240, $i242, $i243, $p244, $i246, $i247, $p248, $i250, $i251, $p252, $i253, $i254, $p255, $i256, $i257, $i258, $i259, $i260, $p261, $i262, $i263, $i264, $i266, $i267, $p268, $i269, $i270, $i271, $i273, $i274, $p275, $i276, $i277, $i278, $i280, $i281, $p282, $i283, $i284, $i285, $i287, $i288, $p289, $i290, $i291, $i292, $i294, $i295, $p296, $i298, $i299, $p300, $i302, $i303, $p304, $i306, $i307, $p308, $i310, $i311, $p312, $i314, $i315, $p316, $i317, $i318, $p319, $i320, $i321, $i322, $p323, $i324, $i325, $i326, $p327, $i328, $i329, $i330, $p331, $i332, $i333, $i334, $p335, $i336, $i337, $i338, $i340, $i341, $i343, $i344, $i346, $i347, $i349, $i350, $i351, $i352, $i354, $i355, $i356, $i357, $i358, $i359, $i360, $i361, $i362, $i363, $i364, $i365, $i366, $i367, $i368, $i369, $i370, $i371, $i372, $i373, $i374, $i375, $i376, $i377, $i378, $i379, $i380, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i37, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i37, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i37, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} ldv_stop();
    goto corral_source_split_12335;

  corral_source_split_12335:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb75_dummy;

  $bb9:
    assume $i41 == 1;
    goto corral_source_split_11712;

  corral_source_split_11712:
    assume {:verifier.code 0} true;
    $i379 := $M.59;
    goto corral_source_split_11713;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    $i380 := $ne.i32($i379, 0);
    goto corral_source_split_11714;

  corral_source_split_11714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  $bb292:
    assume !($i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb291:
    assume $i380 == 1;
    goto corral_source_split_12332;

  corral_source_split_12332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} ldv_main_exported_5();
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_12333;

  corral_source_split_12333:
    assume {:verifier.code 0} true;
    goto $bb293;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i40 == 1;
    goto corral_source_split_11708;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    $i362 := $M.58;
    goto corral_source_split_11709;

  corral_source_split_11709:
    assume {:verifier.code 0} true;
    $i363 := $ne.i32($i362, 0);
    goto corral_source_split_11710;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb261:
    assume $i363 == 1;
    goto corral_source_split_12289;

  corral_source_split_12289:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1898} $i364 := __VERIFIER_nondet_int();
    call {:si_unique_call 1899} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i364);
    call {:si_unique_call 1900} {:cexpr "tmp___6"} boogie_si_record_i32($i364);
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $i365 := $slt.i32($i364, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  $bb265:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    $i366 := $eq.i32($i364, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    assume !($i366 == 1);
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} ldv_stop();
    goto corral_source_split_12330;

  corral_source_split_12330:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb266:
    assume $i366 == 1;
    goto corral_source_split_12291;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    $i372 := $M.58;
    goto corral_source_split_12292;

  corral_source_split_12292:
    assume {:verifier.code 0} true;
    $i373 := $eq.i32($i372, 1);
    goto corral_source_split_12293;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i373 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb279:
    assume $i373 == 1;
    goto corral_source_split_12309;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} $i374 := hid_init();
    goto corral_source_split_12310;

  corral_source_split_12310:
    assume {:verifier.code 0} true;
    $M.65 := $i374;
    call {:si_unique_call 1905} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i374);
    goto corral_source_split_12311;

  corral_source_split_12311:
    assume {:verifier.code 0} true;
    $i375 := $M.65;
    goto corral_source_split_12312;

  corral_source_split_12312:
    assume {:verifier.code 0} true;
    $i376 := $eq.i32($i375, 0);
    goto corral_source_split_12313;

  corral_source_split_12313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb282:
    assume !($i376 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    $i377 := $M.65;
    goto corral_source_split_12324;

  corral_source_split_12324:
    assume {:verifier.code 0} true;
    $i378 := $ne.i32($i377, 0);
    goto corral_source_split_12325;

  corral_source_split_12325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb284:
    assume $i378 == 1;
    goto corral_source_split_12327;

  corral_source_split_12327:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 1913} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_12328;

  corral_source_split_12328:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} ldv_check_final_state();
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_12307;

  corral_source_split_12307:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb281:
    assume $i376 == 1;
    goto corral_source_split_12315;

  corral_source_split_12315:
    assume {:verifier.code 0} true;
    $M.58 := 3;
    call {:si_unique_call 1906} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_12316;

  corral_source_split_12316:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1907} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12317;

  corral_source_split_12317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} ldv_file_operations_5();
    goto corral_source_split_12318;

  corral_source_split_12318:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1909} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_12319;

  corral_source_split_12319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} ldv_initialize_hid_ll_driver_7();
    goto corral_source_split_12320;

  corral_source_split_12320:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1911} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_12321;

  corral_source_split_12321:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1912} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_12322;

  corral_source_split_12322:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb264:
    assume $i365 == 1;
    assume {:verifier.code 0} true;
    $i367 := $eq.i32($i364, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    assume !($i367 == 1);
    goto $bb268;

  $bb269:
    assume $i367 == 1;
    goto corral_source_split_12295;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    $i368 := $M.58;
    goto corral_source_split_12296;

  corral_source_split_12296:
    assume {:verifier.code 0} true;
    $i369 := $eq.i32($i368, 3);
    goto corral_source_split_12297;

  corral_source_split_12297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    assume !($i369 == 1);
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb271:
    assume $i369 == 1;
    goto corral_source_split_12299;

  corral_source_split_12299:
    assume {:verifier.code 0} true;
    $i370 := $M.57;
    goto corral_source_split_12300;

  corral_source_split_12300:
    assume {:verifier.code 0} true;
    $i371 := $eq.i32($i370, 0);
    goto corral_source_split_12301;

  corral_source_split_12301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    assume !($i371 == 1);
    goto $bb273;

  $bb274:
    assume $i371 == 1;
    goto corral_source_split_12303;

  corral_source_split_12303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} hid_exit();
    goto corral_source_split_12304;

  corral_source_split_12304:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 1902} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_12305;

  corral_source_split_12305:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb5:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i37, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i42 == 1);
    goto corral_source_split_11720;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    $i360 := $M.56;
    goto corral_source_split_11721;

  corral_source_split_11721:
    assume {:verifier.code 0} true;
    $i361 := $ne.i32($i360, 0);
    goto corral_source_split_11722;

  corral_source_split_11722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb258:
    assume $i361 == 1;
    goto corral_source_split_12286;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} ldv_main_exported_4();
    goto corral_source_split_12287;

  corral_source_split_12287:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb12:
    assume $i42 == 1;
    goto corral_source_split_11716;

  corral_source_split_11716:
    assume {:verifier.code 0} true;
    $i358 := $M.55;
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    $i359 := $ne.i32($i358, 0);
    goto corral_source_split_11718;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i359 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb255:
    assume $i359 == 1;
    goto corral_source_split_12283;

  corral_source_split_12283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} invoke_work_1();
    goto corral_source_split_12284;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb3:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i37, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i37, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i44 == 1);
    goto corral_source_split_11728;

  corral_source_split_11728:
    assume {:verifier.code 0} true;
    $i356 := $M.54;
    goto corral_source_split_11729;

  corral_source_split_11729:
    assume {:verifier.code 0} true;
    $i357 := $ne.i32($i356, 0);
    goto corral_source_split_11730;

  corral_source_split_11730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb252:
    assume $i357 == 1;
    goto corral_source_split_12280;

  corral_source_split_12280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} choose_timer_2();
    goto corral_source_split_12281;

  corral_source_split_12281:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb16:
    assume $i44 == 1;
    goto corral_source_split_11724;

  corral_source_split_11724:
    assume {:verifier.code 0} true;
    $i98 := $M.53;
    goto corral_source_split_11725;

  corral_source_split_11725:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_11726;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb79:
    assume $i99 == 1;
    goto corral_source_split_11834;

  corral_source_split_11834:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1800} $i100 := __VERIFIER_nondet_int();
    call {:si_unique_call 1801} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i100);
    call {:si_unique_call 1802} {:cexpr "tmp___5"} boogie_si_record_i32($i100);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i100, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i100, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i100, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i100, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i100, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    assume !($i105 == 1);
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} ldv_stop();
    goto corral_source_split_12278;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb90:
    assume $i105 == 1;
    goto corral_source_split_11840;

  corral_source_split_11840:
    assume {:verifier.code 0} true;
    $i351 := $M.53;
    goto corral_source_split_11841;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    $i352 := $eq.i32($i351, 1);
    goto corral_source_split_11842;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  $bb247:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb246:
    assume $i352 == 1;
    goto corral_source_split_12271;

  corral_source_split_12271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} vslice_dummy_var_122 := ldv_setup_7();
    goto corral_source_split_12272;

  corral_source_split_12272:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1892} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_12273;

  corral_source_split_12273:
    assume {:verifier.code 0} true;
    $i354 := $M.57;
    goto corral_source_split_12274;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    $i355 := $add.i32($i354, 1);
    goto corral_source_split_12275;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    $M.57 := $i355;
    call {:si_unique_call 1893} {:cexpr "ref_cnt"} boogie_si_record_i32($i355);
    goto corral_source_split_12276;

  corral_source_split_12276:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb88:
    assume $i104 == 1;
    goto corral_source_split_11836;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    $i346 := $M.53;
    goto corral_source_split_11837;

  corral_source_split_11837:
    assume {:verifier.code 0} true;
    $i347 := $eq.i32($i346, 4);
    goto corral_source_split_11838;

  corral_source_split_11838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb243:
    assume $i347 == 1;
    goto corral_source_split_12264;

  corral_source_split_12264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} vslice_dummy_var_121 := ldv_release_7();
    goto corral_source_split_12265;

  corral_source_split_12265:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1889} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_12266;

  corral_source_split_12266:
    assume {:verifier.code 0} true;
    $i349 := $M.57;
    goto corral_source_split_12267;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    $i350 := $sub.i32($i349, 1);
    goto corral_source_split_12268;

  corral_source_split_12268:
    assume {:verifier.code 0} true;
    $M.57 := $i350;
    call {:si_unique_call 1890} {:cexpr "ref_cnt"} boogie_si_record_i32($i350);
    goto corral_source_split_12269;

  corral_source_split_12269:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb86:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i100, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i106 == 1);
    goto corral_source_split_11848;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    $i337 := $M.53;
    goto corral_source_split_11849;

  corral_source_split_11849:
    assume {:verifier.code 0} true;
    $i338 := $eq.i32($i337, 3);
    goto corral_source_split_11850;

  corral_source_split_11850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $i340 := $M.53;
    goto corral_source_split_12250;

  corral_source_split_12250:
    assume {:verifier.code 0} true;
    $i341 := $eq.i32($i340, 2);
    goto corral_source_split_12251;

  corral_source_split_12251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $i343 := $M.53;
    goto corral_source_split_12257;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    $i344 := $eq.i32($i343, 5);
    goto corral_source_split_12258;

  corral_source_split_12258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb240:
    assume $i344 == 1;
    goto corral_source_split_12260;

  corral_source_split_12260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} vslice_dummy_var_120 := ldv_disconnect_7();
    goto corral_source_split_12261;

  corral_source_split_12261:
    assume {:verifier.code 0} true;
    $M.53 := 4;
    call {:si_unique_call 1887} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_12262;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb237:
    assume $i341 == 1;
    goto corral_source_split_12253;

  corral_source_split_12253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} vslice_dummy_var_119 := ldv_disconnect_7();
    goto corral_source_split_12254;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    $M.53 := 4;
    call {:si_unique_call 1885} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_12255;

  corral_source_split_12255:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb234:
    assume $i338 == 1;
    goto corral_source_split_12246;

  corral_source_split_12246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} vslice_dummy_var_118 := ldv_disconnect_7();
    goto corral_source_split_12247;

  corral_source_split_12247:
    assume {:verifier.code 0} true;
    $M.53 := 4;
    call {:si_unique_call 1883} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_12248;

  corral_source_split_12248:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb93:
    assume $i106 == 1;
    goto corral_source_split_11844;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    $i317 := $M.53;
    goto corral_source_split_11845;

  corral_source_split_11845:
    assume {:verifier.code 0} true;
    $i318 := $eq.i32($i317, 4);
    goto corral_source_split_11846;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $i321 := $M.53;
    goto corral_source_split_12210;

  corral_source_split_12210:
    assume {:verifier.code 0} true;
    $i322 := $eq.i32($i321, 1);
    goto corral_source_split_12211;

  corral_source_split_12211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $i325 := $M.53;
    goto corral_source_split_12219;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i325, 3);
    goto corral_source_split_12220;

  corral_source_split_12220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $i329 := $M.53;
    goto corral_source_split_12228;

  corral_source_split_12228:
    assume {:verifier.code 0} true;
    $i330 := $eq.i32($i329, 2);
    goto corral_source_split_12229;

  corral_source_split_12229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    $i333 := $M.53;
    goto corral_source_split_12237;

  corral_source_split_12237:
    assume {:verifier.code 0} true;
    $i334 := $eq.i32($i333, 5);
    goto corral_source_split_12238;

  corral_source_split_12238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb231:
    assume $i334 == 1;
    goto corral_source_split_12240;

  corral_source_split_12240:
    assume {:verifier.code 0} true;
    $p335 := $M.50;
    goto corral_source_split_12241;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    $i336 := $load.i32($M.47, $p7);
    goto corral_source_split_12242;

  corral_source_split_12242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} usbhid_request($p335, $p15, $i336);
    goto corral_source_split_12243;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    $M.53 := 5;
    call {:si_unique_call 1881} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_12244;

  corral_source_split_12244:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb228:
    assume $i330 == 1;
    goto corral_source_split_12231;

  corral_source_split_12231:
    assume {:verifier.code 0} true;
    $p331 := $M.50;
    goto corral_source_split_12232;

  corral_source_split_12232:
    assume {:verifier.code 0} true;
    $i332 := $load.i32($M.47, $p7);
    goto corral_source_split_12233;

  corral_source_split_12233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} usbhid_request($p331, $p15, $i332);
    goto corral_source_split_12234;

  corral_source_split_12234:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1879} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_12235;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb225:
    assume $i326 == 1;
    goto corral_source_split_12222;

  corral_source_split_12222:
    assume {:verifier.code 0} true;
    $p327 := $M.50;
    goto corral_source_split_12223;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    $i328 := $load.i32($M.47, $p7);
    goto corral_source_split_12224;

  corral_source_split_12224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} usbhid_request($p327, $p15, $i328);
    goto corral_source_split_12225;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    $M.53 := 3;
    call {:si_unique_call 1877} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_12226;

  corral_source_split_12226:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb222:
    assume $i322 == 1;
    goto corral_source_split_12213;

  corral_source_split_12213:
    assume {:verifier.code 0} true;
    $p323 := $M.50;
    goto corral_source_split_12214;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    $i324 := $load.i32($M.47, $p7);
    goto corral_source_split_12215;

  corral_source_split_12215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} usbhid_request($p323, $p15, $i324);
    goto corral_source_split_12216;

  corral_source_split_12216:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1875} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_12217;

  corral_source_split_12217:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb219:
    assume $i318 == 1;
    goto corral_source_split_12204;

  corral_source_split_12204:
    assume {:verifier.code 0} true;
    $p319 := $M.50;
    goto corral_source_split_12205;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    $i320 := $load.i32($M.47, $p7);
    goto corral_source_split_12206;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} usbhid_request($p319, $p15, $i320);
    goto corral_source_split_12207;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    $M.53 := 4;
    call {:si_unique_call 1873} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_12208;

  corral_source_split_12208:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb84:
    assume $i102 == 1;
    assume {:verifier.code 0} true;
    $i107 := $slt.i32($i100, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i100, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i108 == 1);
    goto corral_source_split_11860;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    $i314 := $M.53;
    goto corral_source_split_11861;

  corral_source_split_11861:
    assume {:verifier.code 0} true;
    $i315 := $eq.i32($i314, 5);
    goto corral_source_split_11862;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb216:
    assume $i315 == 1;
    goto corral_source_split_12199;

  corral_source_split_12199:
    assume {:verifier.code 0} true;
    $p316 := $M.50;
    goto corral_source_split_12200;

  corral_source_split_12200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} usbhid_stop($p316);
    goto corral_source_split_12201;

  corral_source_split_12201:
    assume {:verifier.code 0} true;
    $M.53 := 3;
    call {:si_unique_call 1871} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_12202;

  corral_source_split_12202:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb97:
    assume $i108 == 1;
    goto corral_source_split_11856;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    $i294 := $M.53;
    goto corral_source_split_11857;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    $i295 := $eq.i32($i294, 4);
    goto corral_source_split_11858;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $i298 := $M.53;
    goto corral_source_split_12167;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    $i299 := $eq.i32($i298, 1);
    goto corral_source_split_12168;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $i302 := $M.53;
    goto corral_source_split_12175;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    $i303 := $eq.i32($i302, 3);
    goto corral_source_split_12176;

  corral_source_split_12176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $i306 := $M.53;
    goto corral_source_split_12183;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    $i307 := $eq.i32($i306, 2);
    goto corral_source_split_12184;

  corral_source_split_12184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $i310 := $M.53;
    goto corral_source_split_12191;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    $i311 := $eq.i32($i310, 5);
    goto corral_source_split_12192;

  corral_source_split_12192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb213:
    assume $i311 == 1;
    goto corral_source_split_12194;

  corral_source_split_12194:
    assume {:verifier.code 0} true;
    $p312 := $M.50;
    goto corral_source_split_12195;

  corral_source_split_12195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} vslice_dummy_var_117 := usbhid_parse($p312);
    goto corral_source_split_12196;

  corral_source_split_12196:
    assume {:verifier.code 0} true;
    $M.53 := 5;
    call {:si_unique_call 1869} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_12197;

  corral_source_split_12197:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb210:
    assume $i307 == 1;
    goto corral_source_split_12186;

  corral_source_split_12186:
    assume {:verifier.code 0} true;
    $p308 := $M.50;
    goto corral_source_split_12187;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} vslice_dummy_var_116 := usbhid_parse($p308);
    goto corral_source_split_12188;

  corral_source_split_12188:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1867} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_12189;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb207:
    assume $i303 == 1;
    goto corral_source_split_12178;

  corral_source_split_12178:
    assume {:verifier.code 0} true;
    $p304 := $M.50;
    goto corral_source_split_12179;

  corral_source_split_12179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} vslice_dummy_var_115 := usbhid_parse($p304);
    goto corral_source_split_12180;

  corral_source_split_12180:
    assume {:verifier.code 0} true;
    $M.53 := 3;
    call {:si_unique_call 1865} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_12181;

  corral_source_split_12181:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb204:
    assume $i299 == 1;
    goto corral_source_split_12170;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    $p300 := $M.50;
    goto corral_source_split_12171;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} vslice_dummy_var_114 := usbhid_parse($p300);
    goto corral_source_split_12172;

  corral_source_split_12172:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1863} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_12173;

  corral_source_split_12173:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb201:
    assume $i295 == 1;
    goto corral_source_split_12162;

  corral_source_split_12162:
    assume {:verifier.code 0} true;
    $p296 := $M.50;
    goto corral_source_split_12163;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} vslice_dummy_var_113 := usbhid_parse($p296);
    goto corral_source_split_12164;

  corral_source_split_12164:
    assume {:verifier.code 0} true;
    $M.53 := 4;
    call {:si_unique_call 1861} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_12165;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb95:
    assume $i107 == 1;
    goto corral_source_split_11852;

  corral_source_split_11852:
    assume {:verifier.code 0} true;
    $i259 := $M.53;
    goto corral_source_split_11853;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i259, 4);
    goto corral_source_split_11854;

  corral_source_split_11854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $i266 := $M.53;
    goto corral_source_split_12118;

  corral_source_split_12118:
    assume {:verifier.code 0} true;
    $i267 := $eq.i32($i266, 1);
    goto corral_source_split_12119;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $i273 := $M.53;
    goto corral_source_split_12129;

  corral_source_split_12129:
    assume {:verifier.code 0} true;
    $i274 := $eq.i32($i273, 3);
    goto corral_source_split_12130;

  corral_source_split_12130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $i280 := $M.53;
    goto corral_source_split_12140;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i280, 2);
    goto corral_source_split_12141;

  corral_source_split_12141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $i287 := $M.53;
    goto corral_source_split_12151;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    $i288 := $eq.i32($i287, 5);
    goto corral_source_split_12152;

  corral_source_split_12152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb198:
    assume $i288 == 1;
    goto corral_source_split_12154;

  corral_source_split_12154:
    assume {:verifier.code 0} true;
    $p289 := $M.50;
    goto corral_source_split_12155;

  corral_source_split_12155:
    assume {:verifier.code 0} true;
    $i290 := $load.i32($M.47, $p6);
    goto corral_source_split_12156;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    $i291 := $load.i32($M.47, $p1);
    goto corral_source_split_12157;

  corral_source_split_12157:
    assume {:verifier.code 0} true;
    $i292 := $load.i32($M.47, $p5);
    goto corral_source_split_12158;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} vslice_dummy_var_112 := usbhid_idle($p289, $i290, $i291, $i292);
    goto corral_source_split_12159;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    $M.53 := 5;
    call {:si_unique_call 1859} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_12160;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb195:
    assume $i281 == 1;
    goto corral_source_split_12143;

  corral_source_split_12143:
    assume {:verifier.code 0} true;
    $p282 := $M.50;
    goto corral_source_split_12144;

  corral_source_split_12144:
    assume {:verifier.code 0} true;
    $i283 := $load.i32($M.47, $p6);
    goto corral_source_split_12145;

  corral_source_split_12145:
    assume {:verifier.code 0} true;
    $i284 := $load.i32($M.47, $p1);
    goto corral_source_split_12146;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    $i285 := $load.i32($M.47, $p5);
    goto corral_source_split_12147;

  corral_source_split_12147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} vslice_dummy_var_111 := usbhid_idle($p282, $i283, $i284, $i285);
    goto corral_source_split_12148;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1857} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_12149;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb192:
    assume $i274 == 1;
    goto corral_source_split_12132;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    $p275 := $M.50;
    goto corral_source_split_12133;

  corral_source_split_12133:
    assume {:verifier.code 0} true;
    $i276 := $load.i32($M.47, $p6);
    goto corral_source_split_12134;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    $i277 := $load.i32($M.47, $p1);
    goto corral_source_split_12135;

  corral_source_split_12135:
    assume {:verifier.code 0} true;
    $i278 := $load.i32($M.47, $p5);
    goto corral_source_split_12136;

  corral_source_split_12136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} vslice_dummy_var_110 := usbhid_idle($p275, $i276, $i277, $i278);
    goto corral_source_split_12137;

  corral_source_split_12137:
    assume {:verifier.code 0} true;
    $M.53 := 3;
    call {:si_unique_call 1855} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_12138;

  corral_source_split_12138:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb189:
    assume $i267 == 1;
    goto corral_source_split_12121;

  corral_source_split_12121:
    assume {:verifier.code 0} true;
    $p268 := $M.50;
    goto corral_source_split_12122;

  corral_source_split_12122:
    assume {:verifier.code 0} true;
    $i269 := $load.i32($M.47, $p6);
    goto corral_source_split_12123;

  corral_source_split_12123:
    assume {:verifier.code 0} true;
    $i270 := $load.i32($M.47, $p1);
    goto corral_source_split_12124;

  corral_source_split_12124:
    assume {:verifier.code 0} true;
    $i271 := $load.i32($M.47, $p5);
    goto corral_source_split_12125;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} vslice_dummy_var_109 := usbhid_idle($p268, $i269, $i270, $i271);
    goto corral_source_split_12126;

  corral_source_split_12126:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1853} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_12127;

  corral_source_split_12127:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb186:
    assume $i260 == 1;
    goto corral_source_split_12110;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    $p261 := $M.50;
    goto corral_source_split_12111;

  corral_source_split_12111:
    assume {:verifier.code 0} true;
    $i262 := $load.i32($M.47, $p6);
    goto corral_source_split_12112;

  corral_source_split_12112:
    assume {:verifier.code 0} true;
    $i263 := $load.i32($M.47, $p1);
    goto corral_source_split_12113;

  corral_source_split_12113:
    assume {:verifier.code 0} true;
    $i264 := $load.i32($M.47, $p5);
    goto corral_source_split_12114;

  corral_source_split_12114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} vslice_dummy_var_108 := usbhid_idle($p261, $i262, $i263, $i264);
    goto corral_source_split_12115;

  corral_source_split_12115:
    assume {:verifier.code 0} true;
    $M.53 := 4;
    call {:si_unique_call 1851} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_12116;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb82:
    assume $i101 == 1;
    assume {:verifier.code 0} true;
    $i109 := $slt.i32($i100, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i100, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    $i111 := $slt.i32($i100, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i111 == 1);
    goto corral_source_split_11868;

  corral_source_split_11868:
    assume {:verifier.code 0} true;
    $i253 := $M.53;
    goto corral_source_split_11869;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    $i254 := $eq.i32($i253, 2);
    goto corral_source_split_11870;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb180:
    assume $i254 == 1;
    goto corral_source_split_12100;

  corral_source_split_12100:
    assume {:verifier.code 0} true;
    $p255 := $M.50;
    goto corral_source_split_12101;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} $i256 := usbhid_open($p255);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_12102;

  corral_source_split_12102:
    assume {:verifier.code 0} true;
    $M.64 := $i256;
    call {:si_unique_call 1848} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i256);
    goto corral_source_split_12103;

  corral_source_split_12103:
    assume {:verifier.code 0} true;
    $i257 := $M.64;
    goto corral_source_split_12104;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    $i258 := $eq.i32($i257, 0);
    goto corral_source_split_12105;

  corral_source_split_12105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb182:
    assume $i258 == 1;
    goto corral_source_split_12107;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    $M.53 := 3;
    call {:si_unique_call 1849} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_12108;

  corral_source_split_12108:
    assume {:verifier.code 0} true;
    goto $bb184;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb103:
    assume $i111 == 1;
    goto corral_source_split_11864;

  corral_source_split_11864:
    assume {:verifier.code 0} true;
    $i250 := $M.53;
    goto corral_source_split_11865;

  corral_source_split_11865:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i250, 3);
    goto corral_source_split_11866;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb177:
    assume $i251 == 1;
    goto corral_source_split_12095;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    $p252 := $M.50;
    goto corral_source_split_12096;

  corral_source_split_12096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} usbhid_close($p252);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_12097;

  corral_source_split_12097:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1846} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_12098;

  corral_source_split_12098:
    assume {:verifier.code 0} true;
    goto $bb179;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb101:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    $i112 := $slt.i32($i100, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i112 == 1);
    goto corral_source_split_11876;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    $i230 := $M.53;
    goto corral_source_split_11877;

  corral_source_split_11877:
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i230, 4);
    goto corral_source_split_11878;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $i234 := $M.53;
    goto corral_source_split_12063;

  corral_source_split_12063:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 1);
    goto corral_source_split_12064;

  corral_source_split_12064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $i238 := $M.53;
    goto corral_source_split_12071;

  corral_source_split_12071:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i238, 3);
    goto corral_source_split_12072;

  corral_source_split_12072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    $i242 := $M.53;
    goto corral_source_split_12079;

  corral_source_split_12079:
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i242, 2);
    goto corral_source_split_12080;

  corral_source_split_12080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $i246 := $M.53;
    goto corral_source_split_12087;

  corral_source_split_12087:
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i246, 5);
    goto corral_source_split_12088;

  corral_source_split_12088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb174:
    assume $i247 == 1;
    goto corral_source_split_12090;

  corral_source_split_12090:
    assume {:verifier.code 0} true;
    $p248 := $M.50;
    goto corral_source_split_12091;

  corral_source_split_12091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} vslice_dummy_var_107 := usbhid_wait_io($p248);
    goto corral_source_split_12092;

  corral_source_split_12092:
    assume {:verifier.code 0} true;
    $M.53 := 5;
    call {:si_unique_call 1844} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_12093;

  corral_source_split_12093:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb171:
    assume $i243 == 1;
    goto corral_source_split_12082;

  corral_source_split_12082:
    assume {:verifier.code 0} true;
    $p244 := $M.50;
    goto corral_source_split_12083;

  corral_source_split_12083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} vslice_dummy_var_106 := usbhid_wait_io($p244);
    goto corral_source_split_12084;

  corral_source_split_12084:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1842} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_12085;

  corral_source_split_12085:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb168:
    assume $i239 == 1;
    goto corral_source_split_12074;

  corral_source_split_12074:
    assume {:verifier.code 0} true;
    $p240 := $M.50;
    goto corral_source_split_12075;

  corral_source_split_12075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} vslice_dummy_var_105 := usbhid_wait_io($p240);
    goto corral_source_split_12076;

  corral_source_split_12076:
    assume {:verifier.code 0} true;
    $M.53 := 3;
    call {:si_unique_call 1840} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_12077;

  corral_source_split_12077:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb165:
    assume $i235 == 1;
    goto corral_source_split_12066;

  corral_source_split_12066:
    assume {:verifier.code 0} true;
    $p236 := $M.50;
    goto corral_source_split_12067;

  corral_source_split_12067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} vslice_dummy_var_104 := usbhid_wait_io($p236);
    goto corral_source_split_12068;

  corral_source_split_12068:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1838} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_12069;

  corral_source_split_12069:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb162:
    assume $i231 == 1;
    goto corral_source_split_12058;

  corral_source_split_12058:
    assume {:verifier.code 0} true;
    $p232 := $M.50;
    goto corral_source_split_12059;

  corral_source_split_12059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} vslice_dummy_var_103 := usbhid_wait_io($p232);
    goto corral_source_split_12060;

  corral_source_split_12060:
    assume {:verifier.code 0} true;
    $M.53 := 4;
    call {:si_unique_call 1836} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_12061;

  corral_source_split_12061:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb105:
    assume $i112 == 1;
    goto corral_source_split_11872;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    $i205 := $M.53;
    goto corral_source_split_11873;

  corral_source_split_11873:
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i205, 4);
    goto corral_source_split_11874;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $i210 := $M.53;
    goto corral_source_split_12022;

  corral_source_split_12022:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 1);
    goto corral_source_split_12023;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $i215 := $M.53;
    goto corral_source_split_12031;

  corral_source_split_12031:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i215, 3);
    goto corral_source_split_12032;

  corral_source_split_12032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $i220 := $M.53;
    goto corral_source_split_12040;

  corral_source_split_12040:
    assume {:verifier.code 0} true;
    $i221 := $eq.i32($i220, 2);
    goto corral_source_split_12041;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $i225 := $M.53;
    goto corral_source_split_12049;

  corral_source_split_12049:
    assume {:verifier.code 0} true;
    $i226 := $eq.i32($i225, 5);
    goto corral_source_split_12050;

  corral_source_split_12050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb159:
    assume $i226 == 1;
    goto corral_source_split_12052;

  corral_source_split_12052:
    assume {:verifier.code 0} true;
    $p227 := $M.50;
    goto corral_source_split_12053;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    $i228 := $load.i32($M.47, $p10);
    goto corral_source_split_12054;

  corral_source_split_12054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} vslice_dummy_var_102 := usbhid_power($p227, $i228);
    goto corral_source_split_12055;

  corral_source_split_12055:
    assume {:verifier.code 0} true;
    $M.53 := 5;
    call {:si_unique_call 1834} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_12056;

  corral_source_split_12056:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb156:
    assume $i221 == 1;
    goto corral_source_split_12043;

  corral_source_split_12043:
    assume {:verifier.code 0} true;
    $p222 := $M.50;
    goto corral_source_split_12044;

  corral_source_split_12044:
    assume {:verifier.code 0} true;
    $i223 := $load.i32($M.47, $p10);
    goto corral_source_split_12045;

  corral_source_split_12045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} vslice_dummy_var_101 := usbhid_power($p222, $i223);
    goto corral_source_split_12046;

  corral_source_split_12046:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1832} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_12047;

  corral_source_split_12047:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb153:
    assume $i216 == 1;
    goto corral_source_split_12034;

  corral_source_split_12034:
    assume {:verifier.code 0} true;
    $p217 := $M.50;
    goto corral_source_split_12035;

  corral_source_split_12035:
    assume {:verifier.code 0} true;
    $i218 := $load.i32($M.47, $p10);
    goto corral_source_split_12036;

  corral_source_split_12036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} vslice_dummy_var_100 := usbhid_power($p217, $i218);
    goto corral_source_split_12037;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    $M.53 := 3;
    call {:si_unique_call 1830} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_12038;

  corral_source_split_12038:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb150:
    assume $i211 == 1;
    goto corral_source_split_12025;

  corral_source_split_12025:
    assume {:verifier.code 0} true;
    $p212 := $M.50;
    goto corral_source_split_12026;

  corral_source_split_12026:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.47, $p10);
    goto corral_source_split_12027;

  corral_source_split_12027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} vslice_dummy_var_99 := usbhid_power($p212, $i213);
    goto corral_source_split_12028;

  corral_source_split_12028:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1828} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_12029;

  corral_source_split_12029:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb147:
    assume $i206 == 1;
    goto corral_source_split_12016;

  corral_source_split_12016:
    assume {:verifier.code 0} true;
    $p207 := $M.50;
    goto corral_source_split_12017;

  corral_source_split_12017:
    assume {:verifier.code 0} true;
    $i208 := $load.i32($M.47, $p10);
    goto corral_source_split_12018;

  corral_source_split_12018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} vslice_dummy_var_98 := usbhid_power($p207, $i208);
    goto corral_source_split_12019;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    $M.53 := 4;
    call {:si_unique_call 1826} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_12020;

  corral_source_split_12020:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb99:
    assume $i109 == 1;
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i100, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    $i114 := $slt.i32($i100, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i114 == 1);
    goto corral_source_split_11884;

  corral_source_split_11884:
    assume {:verifier.code 0} true;
    $i180 := $M.53;
    goto corral_source_split_11885;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, 4);
    goto corral_source_split_11886;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $i185 := $M.53;
    goto corral_source_split_11980;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, 1);
    goto corral_source_split_11981;

  corral_source_split_11981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $i190 := $M.53;
    goto corral_source_split_11989;

  corral_source_split_11989:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 3);
    goto corral_source_split_11990;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $i195 := $M.53;
    goto corral_source_split_11998;

  corral_source_split_11998:
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i195, 2);
    goto corral_source_split_11999;

  corral_source_split_11999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $i200 := $M.53;
    goto corral_source_split_12007;

  corral_source_split_12007:
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i200, 5);
    goto corral_source_split_12008;

  corral_source_split_12008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb144:
    assume $i201 == 1;
    goto corral_source_split_12010;

  corral_source_split_12010:
    assume {:verifier.code 0} true;
    $p202 := $M.50;
    goto corral_source_split_12011;

  corral_source_split_12011:
    assume {:verifier.code 0} true;
    $i203 := $load.i64($M.47, $p9);
    goto corral_source_split_12012;

  corral_source_split_12012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} vslice_dummy_var_97 := usbhid_output_report($p202, $p13, $i203);
    goto corral_source_split_12013;

  corral_source_split_12013:
    assume {:verifier.code 0} true;
    $M.53 := 5;
    call {:si_unique_call 1824} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_12014;

  corral_source_split_12014:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb141:
    assume $i196 == 1;
    goto corral_source_split_12001;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    $p197 := $M.50;
    goto corral_source_split_12002;

  corral_source_split_12002:
    assume {:verifier.code 0} true;
    $i198 := $load.i64($M.47, $p9);
    goto corral_source_split_12003;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} vslice_dummy_var_96 := usbhid_output_report($p197, $p13, $i198);
    goto corral_source_split_12004;

  corral_source_split_12004:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1822} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_12005;

  corral_source_split_12005:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb138:
    assume $i191 == 1;
    goto corral_source_split_11992;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    $p192 := $M.50;
    goto corral_source_split_11993;

  corral_source_split_11993:
    assume {:verifier.code 0} true;
    $i193 := $load.i64($M.47, $p9);
    goto corral_source_split_11994;

  corral_source_split_11994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} vslice_dummy_var_95 := usbhid_output_report($p192, $p13, $i193);
    goto corral_source_split_11995;

  corral_source_split_11995:
    assume {:verifier.code 0} true;
    $M.53 := 3;
    call {:si_unique_call 1820} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_11996;

  corral_source_split_11996:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb135:
    assume $i186 == 1;
    goto corral_source_split_11983;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    $p187 := $M.50;
    goto corral_source_split_11984;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    $i188 := $load.i64($M.47, $p9);
    goto corral_source_split_11985;

  corral_source_split_11985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} vslice_dummy_var_94 := usbhid_output_report($p187, $p13, $i188);
    goto corral_source_split_11986;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1818} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_11987;

  corral_source_split_11987:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb132:
    assume $i181 == 1;
    goto corral_source_split_11974;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    $p182 := $M.50;
    goto corral_source_split_11975;

  corral_source_split_11975:
    assume {:verifier.code 0} true;
    $i183 := $load.i64($M.47, $p9);
    goto corral_source_split_11976;

  corral_source_split_11976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} vslice_dummy_var_93 := usbhid_output_report($p182, $p13, $i183);
    goto corral_source_split_11977;

  corral_source_split_11977:
    assume {:verifier.code 0} true;
    $M.53 := 4;
    call {:si_unique_call 1816} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_11978;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb109:
    assume $i114 == 1;
    goto corral_source_split_11880;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    $i120 := $M.53;
    goto corral_source_split_11881;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 4);
    goto corral_source_split_11882;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $i132 := $M.53;
    goto corral_source_split_11910;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 1);
    goto corral_source_split_11911;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $i144 := $M.53;
    goto corral_source_split_11926;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 3);
    goto corral_source_split_11927;

  corral_source_split_11927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $i156 := $M.53;
    goto corral_source_split_11942;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, 2);
    goto corral_source_split_11943;

  corral_source_split_11943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i168 := $M.53;
    goto corral_source_split_11958;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i168, 5);
    goto corral_source_split_11959;

  corral_source_split_11959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb129:
    assume $i169 == 1;
    goto corral_source_split_11961;

  corral_source_split_11961:
    assume {:verifier.code 0} true;
    $p170 := $M.50;
    goto corral_source_split_11962;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    $i171 := $load.i8($M.47, $p4);
    goto corral_source_split_11963;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    $i172 := $zext.i8.i32($i171);
    goto corral_source_split_11964;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    $i173 := $trunc.i32.i8($i172);
    goto corral_source_split_11965;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    $i174 := $load.i64($M.47, $p8);
    goto corral_source_split_11966;

  corral_source_split_11966:
    assume {:verifier.code 0} true;
    $i175 := $load.i8($M.47, $p3);
    goto corral_source_split_11967;

  corral_source_split_11967:
    assume {:verifier.code 0} true;
    $i176 := $zext.i8.i32($i175);
    goto corral_source_split_11968;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    $i177 := $trunc.i32.i8($i176);
    goto corral_source_split_11969;

  corral_source_split_11969:
    assume {:verifier.code 0} true;
    $i178 := $load.i32($M.47, $p2);
    goto corral_source_split_11970;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} vslice_dummy_var_92 := usbhid_raw_request($p170, $i173, $p16, $i174, $i177, $i178);
    goto corral_source_split_11971;

  corral_source_split_11971:
    assume {:verifier.code 0} true;
    $M.53 := 5;
    call {:si_unique_call 1814} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_11972;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb126:
    assume $i157 == 1;
    goto corral_source_split_11945;

  corral_source_split_11945:
    assume {:verifier.code 0} true;
    $p158 := $M.50;
    goto corral_source_split_11946;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    $i159 := $load.i8($M.47, $p4);
    goto corral_source_split_11947;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    $i160 := $zext.i8.i32($i159);
    goto corral_source_split_11948;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    $i161 := $trunc.i32.i8($i160);
    goto corral_source_split_11949;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    $i162 := $load.i64($M.47, $p8);
    goto corral_source_split_11950;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    $i163 := $load.i8($M.47, $p3);
    goto corral_source_split_11951;

  corral_source_split_11951:
    assume {:verifier.code 0} true;
    $i164 := $zext.i8.i32($i163);
    goto corral_source_split_11952;

  corral_source_split_11952:
    assume {:verifier.code 0} true;
    $i165 := $trunc.i32.i8($i164);
    goto corral_source_split_11953;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.47, $p2);
    goto corral_source_split_11954;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} vslice_dummy_var_91 := usbhid_raw_request($p158, $i161, $p16, $i162, $i165, $i166);
    goto corral_source_split_11955;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1812} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_11956;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb123:
    assume $i145 == 1;
    goto corral_source_split_11929;

  corral_source_split_11929:
    assume {:verifier.code 0} true;
    $p146 := $M.50;
    goto corral_source_split_11930;

  corral_source_split_11930:
    assume {:verifier.code 0} true;
    $i147 := $load.i8($M.47, $p4);
    goto corral_source_split_11931;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    $i148 := $zext.i8.i32($i147);
    goto corral_source_split_11932;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i32.i8($i148);
    goto corral_source_split_11933;

  corral_source_split_11933:
    assume {:verifier.code 0} true;
    $i150 := $load.i64($M.47, $p8);
    goto corral_source_split_11934;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    $i151 := $load.i8($M.47, $p3);
    goto corral_source_split_11935;

  corral_source_split_11935:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i32($i151);
    goto corral_source_split_11936;

  corral_source_split_11936:
    assume {:verifier.code 0} true;
    $i153 := $trunc.i32.i8($i152);
    goto corral_source_split_11937;

  corral_source_split_11937:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.47, $p2);
    goto corral_source_split_11938;

  corral_source_split_11938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} vslice_dummy_var_90 := usbhid_raw_request($p146, $i149, $p16, $i150, $i153, $i154);
    goto corral_source_split_11939;

  corral_source_split_11939:
    assume {:verifier.code 0} true;
    $M.53 := 3;
    call {:si_unique_call 1810} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_11940;

  corral_source_split_11940:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb120:
    assume $i133 == 1;
    goto corral_source_split_11913;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    $p134 := $M.50;
    goto corral_source_split_11914;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.47, $p4);
    goto corral_source_split_11915;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i32($i135);
    goto corral_source_split_11916;

  corral_source_split_11916:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i32.i8($i136);
    goto corral_source_split_11917;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    $i138 := $load.i64($M.47, $p8);
    goto corral_source_split_11918;

  corral_source_split_11918:
    assume {:verifier.code 0} true;
    $i139 := $load.i8($M.47, $p3);
    goto corral_source_split_11919;

  corral_source_split_11919:
    assume {:verifier.code 0} true;
    $i140 := $zext.i8.i32($i139);
    goto corral_source_split_11920;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    $i141 := $trunc.i32.i8($i140);
    goto corral_source_split_11921;

  corral_source_split_11921:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.47, $p2);
    goto corral_source_split_11922;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} vslice_dummy_var_89 := usbhid_raw_request($p134, $i137, $p16, $i138, $i141, $i142);
    goto corral_source_split_11923;

  corral_source_split_11923:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1808} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_11924;

  corral_source_split_11924:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb117:
    assume $i121 == 1;
    goto corral_source_split_11897;

  corral_source_split_11897:
    assume {:verifier.code 0} true;
    $p122 := $M.50;
    goto corral_source_split_11898;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.47, $p4);
    goto corral_source_split_11899;

  corral_source_split_11899:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i123);
    goto corral_source_split_11900;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i32.i8($i124);
    goto corral_source_split_11901;

  corral_source_split_11901:
    assume {:verifier.code 0} true;
    $i126 := $load.i64($M.47, $p8);
    goto corral_source_split_11902;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.47, $p3);
    goto corral_source_split_11903;

  corral_source_split_11903:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_11904;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i32.i8($i128);
    goto corral_source_split_11905;

  corral_source_split_11905:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.47, $p2);
    goto corral_source_split_11906;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} vslice_dummy_var_88 := usbhid_raw_request($p122, $i125, $p16, $i126, $i129, $i130);
    goto corral_source_split_11907;

  corral_source_split_11907:
    assume {:verifier.code 0} true;
    $M.53 := 4;
    call {:si_unique_call 1806} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_11908;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb107:
    assume $i113 == 1;
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i100, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume !($i115 == 1);
    goto $bb92;

  $bb111:
    assume $i115 == 1;
    goto corral_source_split_11888;

  corral_source_split_11888:
    assume {:verifier.code 0} true;
    $i116 := $M.53;
    goto corral_source_split_11889;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 3);
    goto corral_source_split_11890;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb113:
    assume $i117 == 1;
    goto corral_source_split_11892;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    $p118 := $M.50;
    goto corral_source_split_11893;

  corral_source_split_11893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} vslice_dummy_var_87 := usbhid_start($p118);
    goto corral_source_split_11894;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    $M.53 := 5;
    call {:si_unique_call 1804} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_11895;

  corral_source_split_11895:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb14:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i37, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i45 == 1);
    goto corral_source_split_11732;

  corral_source_split_11732:
    assume {:verifier.code 0} true;
    $i96 := $M.52;
    goto corral_source_split_11733;

  corral_source_split_11733:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_11734;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb76:
    assume $i97 == 1;
    goto corral_source_split_11831;

  corral_source_split_11831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} ldv_main_exported_3();
    goto corral_source_split_11832;

  corral_source_split_11832:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb18:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i37, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb11;

  $bb20:
    assume $i46 == 1;
    goto corral_source_split_11736;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    $i47 := $M.51;
    goto corral_source_split_11737;

  corral_source_split_11737:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_11738;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb22:
    assume $i48 == 1;
    goto corral_source_split_11740;

  corral_source_split_11740:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1777} $i49 := __VERIFIER_nondet_int();
    call {:si_unique_call 1778} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i49);
    call {:si_unique_call 1779} {:cexpr "tmp___4"} boogie_si_record_i32($i49);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i49, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i49, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i49, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i49, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} ldv_stop();
    goto corral_source_split_11829;

  corral_source_split_11829:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb31:
    assume $i53 == 1;
    goto corral_source_split_11750;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    $i90 := $M.51;
    goto corral_source_split_11751;

  corral_source_split_11751:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 3);
    goto corral_source_split_11752;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb66:
    assume $i91 == 1;
    goto corral_source_split_11819;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    $p92 := $M.48;
    goto corral_source_split_11820;

  corral_source_split_11820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} $i93 := hid_resume($p92);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_11821;

  corral_source_split_11821:
    assume {:verifier.code 0} true;
    $M.63 := $i93;
    call {:si_unique_call 1796} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i93);
    goto corral_source_split_11822;

  corral_source_split_11822:
    assume {:verifier.code 0} true;
    $i94 := $M.63;
    goto corral_source_split_11823;

  corral_source_split_11823:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 0);
    goto corral_source_split_11824;

  corral_source_split_11824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb68:
    assume $i95 == 1;
    goto corral_source_split_11826;

  corral_source_split_11826:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1797} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_11827;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    goto $bb70;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i52 == 1;
    goto corral_source_split_11746;

  corral_source_split_11746:
    assume {:verifier.code 0} true;
    $i76 := $M.51;
    goto corral_source_split_11747;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 3);
    goto corral_source_split_11748;

  corral_source_split_11748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i83 := $M.51;
    goto corral_source_split_11804;

  corral_source_split_11804:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 2);
    goto corral_source_split_11805;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb60:
    assume $i84 == 1;
    goto corral_source_split_11807;

  corral_source_split_11807:
    assume {:verifier.code 0} true;
    $i85 := $M.62;
    goto corral_source_split_11808;

  corral_source_split_11808:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 0);
    goto corral_source_split_11809;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb62;

  $bb63:
    assume $i86 == 1;
    goto corral_source_split_11811;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    $p87 := $M.48;
    goto corral_source_split_11812;

  corral_source_split_11812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} usbhid_disconnect($p87);
    goto corral_source_split_11813;

  corral_source_split_11813:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1793} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11814;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    $i88 := $M.57;
    goto corral_source_split_11815;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    $i89 := $sub.i32($i88, 1);
    goto corral_source_split_11816;

  corral_source_split_11816:
    assume {:verifier.code 0} true;
    $M.57 := $i89;
    call {:si_unique_call 1794} {:cexpr "ref_cnt"} boogie_si_record_i32($i89);
    goto corral_source_split_11817;

  corral_source_split_11817:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb54:
    assume $i77 == 1;
    goto corral_source_split_11792;

  corral_source_split_11792:
    assume {:verifier.code 0} true;
    $i78 := $M.62;
    goto corral_source_split_11793;

  corral_source_split_11793:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 0);
    goto corral_source_split_11794;

  corral_source_split_11794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb56;

  $bb57:
    assume $i79 == 1;
    goto corral_source_split_11796;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    $p80 := $M.48;
    goto corral_source_split_11797;

  corral_source_split_11797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} usbhid_disconnect($p80);
    goto corral_source_split_11798;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1790} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11799;

  corral_source_split_11799:
    assume {:verifier.code 0} true;
    $i81 := $M.57;
    goto corral_source_split_11800;

  corral_source_split_11800:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32($i81, 1);
    goto corral_source_split_11801;

  corral_source_split_11801:
    assume {:verifier.code 0} true;
    $M.57 := $i82;
    call {:si_unique_call 1791} {:cexpr "ref_cnt"} boogie_si_record_i32($i82);
    goto corral_source_split_11802;

  corral_source_split_11802:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb27:
    assume $i51 == 1;
    goto corral_source_split_11742;

  corral_source_split_11742:
    assume {:verifier.code 0} true;
    $i70 := $M.51;
    goto corral_source_split_11743;

  corral_source_split_11743:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 3);
    goto corral_source_split_11744;

  corral_source_split_11744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb48:
    assume $i71 == 1;
    goto corral_source_split_11782;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    $p72 := $M.48;
    goto corral_source_split_11783;

  corral_source_split_11783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} $i73 := hid_reset_resume($p72);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_11784;

  corral_source_split_11784:
    assume {:verifier.code 0} true;
    $M.61 := $i73;
    call {:si_unique_call 1787} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i73);
    goto corral_source_split_11785;

  corral_source_split_11785:
    assume {:verifier.code 0} true;
    $i74 := $M.61;
    goto corral_source_split_11786;

  corral_source_split_11786:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 0);
    goto corral_source_split_11787;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb50:
    assume $i75 == 1;
    goto corral_source_split_11789;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1788} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_11790;

  corral_source_split_11790:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i49, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i54 == 1);
    goto corral_source_split_11754;

  corral_source_split_11754:
    assume {:verifier.code 0} true;
    $i64 := $M.51;
    goto corral_source_split_11755;

  corral_source_split_11755:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 2);
    goto corral_source_split_11756;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb45:
    assume $i65 == 1;
    goto corral_source_split_11775;

  corral_source_split_11775:
    assume {:verifier.code 0} true;
    $p66 := $M.48;
    goto corral_source_split_11776;

  corral_source_split_11776:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11777;

  corral_source_split_11777:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.47, $p67);
    goto corral_source_split_11778;

  corral_source_split_11778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} vslice_dummy_var_86 := hid_suspend($p66, $i68);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_11779;

  corral_source_split_11779:
    assume {:verifier.code 0} true;
    $M.51 := 3;
    call {:si_unique_call 1785} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_11780;

  corral_source_split_11780:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i49, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb33;

  $bb36:
    assume $i55 == 1;
    goto corral_source_split_11758;

  corral_source_split_11758:
    assume {:verifier.code 0} true;
    $i56 := $M.51;
    goto corral_source_split_11759;

  corral_source_split_11759:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 1);
    goto corral_source_split_11760;

  corral_source_split_11760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb38:
    assume $i57 == 1;
    goto corral_source_split_11762;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    $p58 := $M.48;
    goto corral_source_split_11763;

  corral_source_split_11763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} $i59 := usbhid_probe($p58, $p12);
    goto corral_source_split_11764;

  corral_source_split_11764:
    assume {:verifier.code 0} true;
    $M.60 := $i59;
    call {:si_unique_call 1781} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i59);
    goto corral_source_split_11765;

  corral_source_split_11765:
    assume {:verifier.code 0} true;
    $i60 := $M.60;
    goto corral_source_split_11766;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 0);
    goto corral_source_split_11767;

  corral_source_split_11767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume $i61 == 1;
    goto corral_source_split_11769;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1782} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_11770;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    $i62 := $M.57;
    goto corral_source_split_11771;

  corral_source_split_11771:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, 1);
    goto corral_source_split_11772;

  corral_source_split_11772:
    assume {:verifier.code 0} true;
    $M.57 := $i63;
    call {:si_unique_call 1783} {:cexpr "ref_cnt"} boogie_si_record_i32($i63);
    goto corral_source_split_11773;

  corral_source_split_11773:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb75_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1774} $i37 := __VERIFIER_nondet_int();
    call {:si_unique_call 1775} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i37);
    call {:si_unique_call 1776} {:cexpr "tmp___3"} boogie_si_record_i32($i37);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 570951);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12337;

  corral_source_split_12337:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_3: ref;

axiom ldv_main_exported_3 == $sub.ref(0, 571983);

procedure ldv_main_exported_3();
  free requires assertsPassed;
  modifies $M.52, $M.0, $CurrAddr;



implementation ldv_main_exported_3()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var vslice_dummy_var_123: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12339;

  corral_source_split_12339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_12340;

  corral_source_split_12340:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_12341;

  corral_source_split_12341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} $p2 := ldv_init_zalloc(2);
    goto corral_source_split_12342;

  corral_source_split_12342:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_12343;

  corral_source_split_12343:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1919} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1920} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 1921} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} ldv_stop();
    goto corral_source_split_12353;

  corral_source_split_12353:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i5 == 1;
    goto corral_source_split_12345;

  corral_source_split_12345:
    assume {:verifier.code 0} true;
    $i6 := $M.52;
    goto corral_source_split_12346;

  corral_source_split_12346:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_12347;

  corral_source_split_12347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_12349;

  corral_source_split_12349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} vslice_dummy_var_123 := hiddev_devnode($p1, $p3);
    goto corral_source_split_12350;

  corral_source_split_12350:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1923} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_12351;

  corral_source_split_12351:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_disconnect_7: ref;

axiom ldv_disconnect_7 == $sub.ref(0, 573015);

procedure ldv_disconnect_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_disconnect_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12355;

  corral_source_split_12355:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1925} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1926} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12356;

  corral_source_split_12356:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_7: ref;

axiom ldv_release_7 == $sub.ref(0, 574047);

procedure ldv_release_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12358;

  corral_source_split_12358:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1927} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1928} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12359;

  corral_source_split_12359:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_setup_7: ref;

axiom ldv_setup_7 == $sub.ref(0, 575079);

procedure ldv_setup_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_setup_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12361;

  corral_source_split_12361:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1929} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1930} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12362;

  corral_source_split_12362:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_main_exported_4: ref;

axiom ldv_main_exported_4 == $sub.ref(0, 576111);

procedure ldv_main_exported_4();
  free requires assertsPassed;
  modifies $M.56, $M.0, $CurrAddr;



implementation ldv_main_exported_4()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var vslice_dummy_var_124: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12364;

  corral_source_split_12364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_12365;

  corral_source_split_12365:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_12366;

  corral_source_split_12366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} $p2 := ldv_init_zalloc(2);
    goto corral_source_split_12367;

  corral_source_split_12367:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_12368;

  corral_source_split_12368:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1933} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1934} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 1935} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1938} ldv_stop();
    goto corral_source_split_12378;

  corral_source_split_12378:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i5 == 1;
    goto corral_source_split_12370;

  corral_source_split_12370:
    assume {:verifier.code 0} true;
    $i6 := $M.56;
    goto corral_source_split_12371;

  corral_source_split_12371:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_12372;

  corral_source_split_12372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_12374;

  corral_source_split_12374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} vslice_dummy_var_124 := hiddev_devnode($p1, $p3);
    goto corral_source_split_12375;

  corral_source_split_12375:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1937} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_12376;

  corral_source_split_12376:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const hid_exit: ref;

axiom hid_exit == $sub.ref(0, 577143);

procedure hid_exit();
  free requires assertsPassed;
  modifies $M.51;



implementation hid_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12380;

  corral_source_split_12380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} ldv_usb_deregister_26(hid_driver);
    goto corral_source_split_12381;

  corral_source_split_12381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} usbhid_quirks_exit();
    goto corral_source_split_12382;

  corral_source_split_12382:
    assume {:verifier.code 0} true;
    return;
}



const hid_init: ref;

axiom hid_init == $sub.ref(0, 578175);

procedure hid_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.51, $M.62, $M.48, $M.0, $CurrAddr;



implementation hid_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i32;
  var $i6: i32;
  var vslice_dummy_var_125: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12384;

  corral_source_split_12384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} $i0 := usbhid_quirks_init(quirks_param);
    call {:si_unique_call 1942} {:cexpr "retval"} boogie_si_record_i32($i0);
    goto corral_source_split_12385;

  corral_source_split_12385:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12386;

  corral_source_split_12386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} $i3 := ldv_usb_register_driver_25(hid_driver, __this_module, .str.7);
    call {:si_unique_call 1944} {:cexpr "retval"} boogie_si_record_i32($i3);
    goto corral_source_split_12392;

  corral_source_split_12392:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_12393;

  corral_source_split_12393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} vslice_dummy_var_125 := printk.ref(.str.72);
    goto corral_source_split_12399;

  corral_source_split_12399:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_12401;

  corral_source_split_12401:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_12395;

  corral_source_split_12395:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} usbhid_quirks_exit();
    goto corral_source_split_12397;

  corral_source_split_12397:
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12390;

  corral_source_split_12390:
    assume {:verifier.code 0} true;
    $i6 := $i2;
    goto $bb9;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_12388;

  corral_source_split_12388:
    assume {:verifier.code 0} true;
    $i2 := $i0;
    goto $bb3;
}



const ldv_file_operations_5: ref;

axiom ldv_file_operations_5 == $sub.ref(0, 579207);

procedure ldv_file_operations_5();
  free requires assertsPassed;
  modifies $M.66, $M.67, $M.0, $CurrAddr;



implementation ldv_file_operations_5()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12403;

  corral_source_split_12403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_12404;

  corral_source_split_12404:
    assume {:verifier.code 0} true;
    goto corral_source_split_12405;

  corral_source_split_12405:
    assume {:verifier.code 0} true;
    $M.66 := $p0;
    goto corral_source_split_12406;

  corral_source_split_12406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_12407;

  corral_source_split_12407:
    assume {:verifier.code 0} true;
    goto corral_source_split_12408;

  corral_source_split_12408:
    assume {:verifier.code 0} true;
    $M.67 := $p2;
    goto corral_source_split_12409;

  corral_source_split_12409:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_5: ref;

axiom ldv_main_exported_5 == $sub.ref(0, 580239);

procedure ldv_main_exported_5();
  free requires assertsPassed;
  modifies $M.47, $M.59, $M.0, $M.44, $M.45, $M.68, $M.57, $M.26, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.37, $M.27, $M.11, $M.13, $M.15, $M.17, $CurrAddr, $M.46, assertsPassed, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.10, $M.12, $M.14, $M.16, $M.18, $M.20, $M.22, $M.24, $M.42, $M.19, $M.21, $M.23, $M.25;



implementation ldv_main_exported_5()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i64;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i64;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i64;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i64;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $p81: ref;
  var $i82: i32;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $p87: ref;
  var $i88: i32;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $i109: i64;
  var $i110: i32;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $i115: i32;
  var $i116: i64;
  var vslice_dummy_var_126: ref;
  var vslice_dummy_var_127: ref;
  var vslice_dummy_var_128: ref;
  var vslice_dummy_var_129: ref;
  var vslice_dummy_var_130: ref;
  var vslice_dummy_var_131: ref;
  var vslice_dummy_var_132: ref;
  var vslice_dummy_var_133: ref;
  var vslice_dummy_var_134: ref;
  var vslice_dummy_var_135: ref;
  var vslice_dummy_var_136: i64;
  var vslice_dummy_var_137: i64;
  var vslice_dummy_var_138: i64;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i64;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i64;
  var vslice_dummy_var_146: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1950} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1953} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1954} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} $p8 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} $p9 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_12411;

  corral_source_split_12411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} $p10 := ldv_init_zalloc(8);
    goto corral_source_split_12412;

  corral_source_split_12412:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_12413;

  corral_source_split_12413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1960} $p12 := ldv_init_zalloc(1);
    goto corral_source_split_12414;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} $p13 := ldv_init_zalloc(1);
    goto corral_source_split_12415;

  corral_source_split_12415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} $p14 := ldv_init_zalloc(8);
    goto corral_source_split_12416;

  corral_source_split_12416:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_12417;

  corral_source_split_12417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} $p16 := ldv_init_zalloc(16);
    goto corral_source_split_12418;

  corral_source_split_12418:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_12419;

  corral_source_split_12419:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p0);
    goto corral_source_split_12420;

  corral_source_split_12420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} vslice_dummy_var_126 := ldv_memset($p18, 0, 8);
    goto corral_source_split_12421;

  corral_source_split_12421:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p1);
    goto corral_source_split_12422;

  corral_source_split_12422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} vslice_dummy_var_127 := ldv_memset($p20, 0, 8);
    goto corral_source_split_12423;

  corral_source_split_12423:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p2);
    goto corral_source_split_12424;

  corral_source_split_12424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} vslice_dummy_var_128 := ldv_memset($p22, 0, 8);
    goto corral_source_split_12425;

  corral_source_split_12425:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_12426;

  corral_source_split_12426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} vslice_dummy_var_129 := ldv_memset($p24, 0, 8);
    goto corral_source_split_12427;

  corral_source_split_12427:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p4);
    goto corral_source_split_12428;

  corral_source_split_12428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} vslice_dummy_var_130 := ldv_memset($p26, 0, 4);
    goto corral_source_split_12429;

  corral_source_split_12429:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p5);
    goto corral_source_split_12430;

  corral_source_split_12430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} vslice_dummy_var_131 := ldv_memset($p28, 0, 4);
    goto corral_source_split_12431;

  corral_source_split_12431:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p6);
    goto corral_source_split_12432;

  corral_source_split_12432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} vslice_dummy_var_132 := ldv_memset($p30, 0, 4);
    goto corral_source_split_12433;

  corral_source_split_12433:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p7);
    goto corral_source_split_12434;

  corral_source_split_12434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} vslice_dummy_var_133 := ldv_memset($p32, 0, 8);
    goto corral_source_split_12435;

  corral_source_split_12435:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p8);
    goto corral_source_split_12436;

  corral_source_split_12436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} vslice_dummy_var_134 := ldv_memset($p34, 0, 4);
    goto corral_source_split_12437;

  corral_source_split_12437:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p9);
    goto corral_source_split_12438;

  corral_source_split_12438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} vslice_dummy_var_135 := ldv_memset($p36, 0, 4);
    goto corral_source_split_12439;

  corral_source_split_12439:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1974} $i38 := __VERIFIER_nondet_int();
    call {:si_unique_call 1975} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i38);
    call {:si_unique_call 1976} {:cexpr "tmp___4"} boogie_si_record_i32($i38);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i38, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i38, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i38, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i38, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i38, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2004} ldv_stop();
    goto corral_source_split_12572;

  corral_source_split_12572:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i43 == 1;
    goto corral_source_split_12449;

  corral_source_split_12449:
    assume {:verifier.code 0} true;
    $i112 := $M.59;
    goto corral_source_split_12450;

  corral_source_split_12450:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 2);
    goto corral_source_split_12451;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb60:
    assume $i113 == 1;
    goto corral_source_split_12565;

  corral_source_split_12565:
    assume {:verifier.code 0} true;
    $p114 := $M.67;
    goto corral_source_split_12566;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.47, $p6);
    goto corral_source_split_12567;

  corral_source_split_12567:
    assume {:verifier.code 0} true;
    $i116 := $load.i64($M.47, $p0);
    goto corral_source_split_12568;

  corral_source_split_12568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2002} vslice_dummy_var_146 := hiddev_ioctl($p114, $i115, $i116);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_12569;

  corral_source_split_12569:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 2003} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12570;

  corral_source_split_12570:
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i42 == 1;
    goto corral_source_split_12445;

  corral_source_split_12445:
    assume {:verifier.code 0} true;
    $i106 := $M.59;
    goto corral_source_split_12446;

  corral_source_split_12446:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 2);
    goto corral_source_split_12447;

  corral_source_split_12447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb57:
    assume $i107 == 1;
    goto corral_source_split_12558;

  corral_source_split_12558:
    assume {:verifier.code 0} true;
    $p108 := $M.67;
    goto corral_source_split_12559;

  corral_source_split_12559:
    assume {:verifier.code 0} true;
    $i109 := $load.i64($M.47, $p1);
    goto corral_source_split_12560;

  corral_source_split_12560:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.47, $p4);
    goto corral_source_split_12561;

  corral_source_split_12561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2000} vslice_dummy_var_145 := noop_llseek($p108, $i109, $i110);
    goto corral_source_split_12562;

  corral_source_split_12562:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 2001} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12563;

  corral_source_split_12563:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb6:
    assume $i41 == 1;
    goto corral_source_split_12441;

  corral_source_split_12441:
    assume {:verifier.code 0} true;
    $i99 := $M.59;
    goto corral_source_split_12442;

  corral_source_split_12442:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 2);
    goto corral_source_split_12443;

  corral_source_split_12443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb54:
    assume $i100 == 1;
    goto corral_source_split_12549;

  corral_source_split_12549:
    assume {:verifier.code 0} true;
    $p101 := $M.66;
    goto corral_source_split_12550;

  corral_source_split_12550:
    assume {:verifier.code 0} true;
    $p102 := $M.67;
    goto corral_source_split_12551;

  corral_source_split_12551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} vslice_dummy_var_144 := hiddev_release($p101, $p102);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_12552;

  corral_source_split_12552:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1998} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12553;

  corral_source_split_12553:
    assume {:verifier.code 0} true;
    $i104 := $M.57;
    goto corral_source_split_12554;

  corral_source_split_12554:
    assume {:verifier.code 0} true;
    $i105 := $sub.i32($i104, 1);
    goto corral_source_split_12555;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    $M.57 := $i105;
    call {:si_unique_call 1999} {:cexpr "ref_cnt"} boogie_si_record_i32($i105);
    goto corral_source_split_12556;

  corral_source_split_12556:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i38, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i44 == 1);
    goto corral_source_split_12457;

  corral_source_split_12457:
    assume {:verifier.code 0} true;
    $i90 := $M.59;
    goto corral_source_split_12458;

  corral_source_split_12458:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 1);
    goto corral_source_split_12459;

  corral_source_split_12459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb48:
    assume $i91 == 1;
    goto corral_source_split_12535;

  corral_source_split_12535:
    assume {:verifier.code 0} true;
    $p92 := $M.66;
    goto corral_source_split_12536;

  corral_source_split_12536:
    assume {:verifier.code 0} true;
    $p93 := $M.67;
    goto corral_source_split_12537;

  corral_source_split_12537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} $i94 := hiddev_open($p92, $p93);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_12538;

  corral_source_split_12538:
    assume {:verifier.code 0} true;
    $M.68 := $i94;
    call {:si_unique_call 1994} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i94);
    goto corral_source_split_12539;

  corral_source_split_12539:
    assume {:verifier.code 0} true;
    $i95 := $M.68;
    goto corral_source_split_12540;

  corral_source_split_12540:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 0);
    goto corral_source_split_12541;

  corral_source_split_12541:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb50:
    assume $i96 == 1;
    goto corral_source_split_12543;

  corral_source_split_12543:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 1995} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12544;

  corral_source_split_12544:
    assume {:verifier.code 0} true;
    $i97 := $M.57;
    goto corral_source_split_12545;

  corral_source_split_12545:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i97, 1);
    goto corral_source_split_12546;

  corral_source_split_12546:
    assume {:verifier.code 0} true;
    $M.57 := $i98;
    call {:si_unique_call 1996} {:cexpr "ref_cnt"} boogie_si_record_i32($i98);
    goto corral_source_split_12547;

  corral_source_split_12547:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i44 == 1;
    goto corral_source_split_12453;

  corral_source_split_12453:
    assume {:verifier.code 0} true;
    $i78 := $M.59;
    goto corral_source_split_12454;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 1);
    goto corral_source_split_12455;

  corral_source_split_12455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i84 := $M.59;
    goto corral_source_split_12525;

  corral_source_split_12525:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 2);
    goto corral_source_split_12526;

  corral_source_split_12526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb45:
    assume $i85 == 1;
    goto corral_source_split_12528;

  corral_source_split_12528:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.47, $p5);
    goto corral_source_split_12529;

  corral_source_split_12529:
    assume {:verifier.code 0} true;
    $p87 := $M.67;
    goto corral_source_split_12530;

  corral_source_split_12530:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.47, $p9);
    goto corral_source_split_12531;

  corral_source_split_12531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} vslice_dummy_var_143 := hiddev_fasync($i86, $p87, $i88);
    goto corral_source_split_12532;

  corral_source_split_12532:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 1992} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12533;

  corral_source_split_12533:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume $i79 == 1;
    goto corral_source_split_12518;

  corral_source_split_12518:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.47, $p5);
    goto corral_source_split_12519;

  corral_source_split_12519:
    assume {:verifier.code 0} true;
    $p81 := $M.67;
    goto corral_source_split_12520;

  corral_source_split_12520:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.47, $p9);
    goto corral_source_split_12521;

  corral_source_split_12521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} vslice_dummy_var_142 := hiddev_fasync($i80, $p81, $i82);
    goto corral_source_split_12522;

  corral_source_split_12522:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1990} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12523;

  corral_source_split_12523:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb2:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i38, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i38, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i46 == 1);
    goto corral_source_split_12465;

  corral_source_split_12465:
    assume {:verifier.code 0} true;
    $i72 := $M.59;
    goto corral_source_split_12466;

  corral_source_split_12466:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 2);
    goto corral_source_split_12467;

  corral_source_split_12467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb39:
    assume $i73 == 1;
    goto corral_source_split_12511;

  corral_source_split_12511:
    assume {:verifier.code 0} true;
    $p74 := $M.67;
    goto corral_source_split_12512;

  corral_source_split_12512:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.47, $p8);
    goto corral_source_split_12513;

  corral_source_split_12513:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.47, $p3);
    goto corral_source_split_12514;

  corral_source_split_12514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} vslice_dummy_var_141 := hiddev_compat_ioctl($p74, $i75, $i76);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_12515;

  corral_source_split_12515:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 1988} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12516;

  corral_source_split_12516:
    assume {:verifier.code 0} true;
    goto $bb41;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i46 == 1;
    goto corral_source_split_12461;

  corral_source_split_12461:
    assume {:verifier.code 0} true;
    $i64 := $M.59;
    goto corral_source_split_12462;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 1);
    goto corral_source_split_12463;

  corral_source_split_12463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i68 := $M.59;
    goto corral_source_split_12503;

  corral_source_split_12503:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 2);
    goto corral_source_split_12504;

  corral_source_split_12504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb36:
    assume $i69 == 1;
    goto corral_source_split_12506;

  corral_source_split_12506:
    assume {:verifier.code 0} true;
    $p70 := $M.67;
    goto corral_source_split_12507;

  corral_source_split_12507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} vslice_dummy_var_140 := hiddev_poll($p70, $p17);
    goto corral_source_split_12508;

  corral_source_split_12508:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 1986} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12509;

  corral_source_split_12509:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i65 == 1;
    goto corral_source_split_12498;

  corral_source_split_12498:
    assume {:verifier.code 0} true;
    $p66 := $M.67;
    goto corral_source_split_12499;

  corral_source_split_12499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} vslice_dummy_var_139 := hiddev_poll($p66, $p17);
    goto corral_source_split_12500;

  corral_source_split_12500:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1984} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12501;

  corral_source_split_12501:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb15:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i38, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i47 == 1);
    goto corral_source_split_12469;

  corral_source_split_12469:
    assume {:verifier.code 0} true;
    $i59 := $M.59;
    goto corral_source_split_12470;

  corral_source_split_12470:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 2);
    goto corral_source_split_12471;

  corral_source_split_12471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb30:
    assume $i60 == 1;
    goto corral_source_split_12492;

  corral_source_split_12492:
    assume {:verifier.code 0} true;
    $p61 := $M.67;
    goto corral_source_split_12493;

  corral_source_split_12493:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.47, $p2);
    goto corral_source_split_12494;

  corral_source_split_12494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} vslice_dummy_var_138 := hiddev_read($p61, $p12, $i62, $p11);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_12495;

  corral_source_split_12495:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 1982} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12496;

  corral_source_split_12496:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i38, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb12;

  $bb21:
    assume $i48 == 1;
    goto corral_source_split_12473;

  corral_source_split_12473:
    assume {:verifier.code 0} true;
    $i49 := $M.59;
    goto corral_source_split_12474;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 1);
    goto corral_source_split_12475;

  corral_source_split_12475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i54 := $M.59;
    goto corral_source_split_12483;

  corral_source_split_12483:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 2);
    goto corral_source_split_12484;

  corral_source_split_12484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i55 == 1;
    goto corral_source_split_12486;

  corral_source_split_12486:
    assume {:verifier.code 0} true;
    $p56 := $M.67;
    goto corral_source_split_12487;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.47, $p7);
    goto corral_source_split_12488;

  corral_source_split_12488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} vslice_dummy_var_137 := hiddev_write($p56, $p13, $i57, $p15);
    goto corral_source_split_12489;

  corral_source_split_12489:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 1980} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_12490;

  corral_source_split_12490:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i50 == 1;
    goto corral_source_split_12477;

  corral_source_split_12477:
    assume {:verifier.code 0} true;
    $p51 := $M.67;
    goto corral_source_split_12478;

  corral_source_split_12478:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.47, $p7);
    goto corral_source_split_12479;

  corral_source_split_12479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} vslice_dummy_var_136 := hiddev_write($p51, $p13, $i52, $p15);
    goto corral_source_split_12480;

  corral_source_split_12480:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1978} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12481;

  corral_source_split_12481:
    assume {:verifier.code 0} true;
    goto $bb25;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 581271);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12574;

  corral_source_split_12574:
    assume {:verifier.code 0} true;
    $i0 := $M.26;
    goto corral_source_split_12575;

  corral_source_split_12575:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_12576;

  corral_source_split_12576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.27;
    goto corral_source_split_12581;

  corral_source_split_12581:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 1);
    goto corral_source_split_12582;

  corral_source_split_12582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.69;
    goto corral_source_split_12587;

  corral_source_split_12587:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 1);
    goto corral_source_split_12588;

  corral_source_split_12588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.70;
    goto corral_source_split_12593;

  corral_source_split_12593:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 1);
    goto corral_source_split_12594;

  corral_source_split_12594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $M.71;
    goto corral_source_split_12599;

  corral_source_split_12599:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 1);
    goto corral_source_split_12600;

  corral_source_split_12600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i10 := $M.46;
    goto corral_source_split_12605;

  corral_source_split_12605:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 1);
    goto corral_source_split_12606;

  corral_source_split_12606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i11 == 1;
    goto corral_source_split_12608;

  corral_source_split_12608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2010} ldv_error();
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_12609;

  corral_source_split_12609:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_12602;

  corral_source_split_12602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} ldv_error();
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_12603;

  corral_source_split_12603:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_12596;

  corral_source_split_12596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2008} ldv_error();
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_12597;

  corral_source_split_12597:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_12590;

  corral_source_split_12590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2007} ldv_error();
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_12591;

  corral_source_split_12591:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_12584;

  corral_source_split_12584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} ldv_error();
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_12585;

  corral_source_split_12585:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_12578;

  corral_source_split_12578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} ldv_error();
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_12579;

  corral_source_split_12579:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_421:
    assume !assertsPassed;
    return;
}



const usbhid_quirks_init: ref;

axiom usbhid_quirks_init == $sub.ref(0, 582303);

procedure usbhid_quirks_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation usbhid_quirks_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i16;
  var $i17: i16;
  var $i18: i32;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i27: i32;
  var $i28: i1;
  var $i4: i32;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2011} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2013} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_12611;

  corral_source_split_12611:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb1;

  $bb1:
    call $i5, $p6, $p7, $i8, $i9, $i10, $p11, $p12, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $p24, $p25, $i27, $i28, $i4, $i29, $p30, $p31, $i32, $i33, vslice_dummy_var_147, vslice_dummy_var_148 := usbhid_quirks_init_loop_$bb1($p0, $p1, $p2, $p3, $i5, $p6, $p7, $i8, $i9, $i10, $p11, $p12, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $p24, $p25, $i27, $i28, $i4, $i29, $p30, $p31, $i32, $i33, vslice_dummy_var_147, vslice_dummy_var_148);
    goto $bb1_last;

  corral_source_split_12613:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i4);
    goto corral_source_split_12614;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p0, $mul.ref($i29, 8));
    goto corral_source_split_12615;

  corral_source_split_12615:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.72, $p30);
    goto corral_source_split_12616;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_12617;

  corral_source_split_12617:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_12618;

  corral_source_split_12618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb12:
    assume $i33 == 1;
    goto corral_source_split_12652;

  corral_source_split_12652:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_12620;

  corral_source_split_12620:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p0, $mul.ref($i5, 8));
    goto corral_source_split_12621;

  corral_source_split_12621:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.72, $p6);
    goto corral_source_split_12622;

  corral_source_split_12622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2014} $i8 := sscanf.ref.ref.ref.ref.ref($p7, .str.1, $p1, $p2, $p3);
    call {:si_unique_call 2015} {:cexpr "m"} boogie_si_record_i32($i8);
    goto corral_source_split_12623;

  corral_source_split_12623:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 3);
    goto corral_source_split_12624;

  corral_source_split_12624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    goto corral_source_split_12632;

  corral_source_split_12632:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.73, $p1);
    goto corral_source_split_12633;

  corral_source_split_12633:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_12634;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    goto corral_source_split_12635;

  corral_source_split_12635:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.73, $p2);
    goto corral_source_split_12636;

  corral_source_split_12636:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_12637;

  corral_source_split_12637:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_12638;

  corral_source_split_12638:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.73, $p3);
    goto corral_source_split_12639;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2017} $i21 := usbhid_modify_dquirk($i16, $i19, $i20);
    call {:si_unique_call 2018} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_12640;

  corral_source_split_12640:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_12641;

  corral_source_split_12641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i4, 1);
    call {:si_unique_call 2019} {:cexpr "n"} boogie_si_record_i32($i27);
    goto corral_source_split_12643;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    $i28 := $sle.i32($i27, 3);
    goto corral_source_split_12644;

  corral_source_split_12644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb11;

  $bb9:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i27;
    goto $bb9_dummy;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_12646;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i4);
    goto corral_source_split_12647;

  corral_source_split_12647:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p0, $mul.ref($i23, 8));
    goto corral_source_split_12648;

  corral_source_split_12648:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.72, $p24);
    goto corral_source_split_12649;

  corral_source_split_12649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} vslice_dummy_var_148 := printk.ref.ref(.str.2, $p25);
    goto corral_source_split_12650;

  corral_source_split_12650:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_12626;

  corral_source_split_12626:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i4);
    goto corral_source_split_12627;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p0, $mul.ref($i10, 8));
    goto corral_source_split_12628;

  corral_source_split_12628:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.72, $p11);
    goto corral_source_split_12629;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} vslice_dummy_var_147 := printk.ref.ref(.str.2, $p12);
    goto corral_source_split_12630;

  corral_source_split_12630:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_12613;
}



const ldv_usb_register_driver_25: ref;

axiom ldv_usb_register_driver_25 == $sub.ref(0, 583335);

procedure ldv_usb_register_driver_25($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.51, $M.62, $M.48, $M.0, $CurrAddr;



implementation ldv_usb_register_driver_25($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12654;

  corral_source_split_12654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 2022} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_12655;

  corral_source_split_12655:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 2023} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_12656;

  corral_source_split_12656:
    assume {:verifier.code 0} true;
    $M.62 := 0;
    call {:si_unique_call 2024} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_12657;

  corral_source_split_12657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} ldv_usb_driver_6();
    goto corral_source_split_12658;

  corral_source_split_12658:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usbhid_quirks_exit: ref;

axiom usbhid_quirks_exit == $sub.ref(0, 584367);

procedure usbhid_quirks_exit();
  free requires assertsPassed;



implementation usbhid_quirks_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12660;

  corral_source_split_12660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2026} usbhid_remove_all_dquirks();
    goto corral_source_split_12661;

  corral_source_split_12661:
    assume {:verifier.code 0} true;
    return;
}



const usbhid_remove_all_dquirks: ref;

axiom usbhid_remove_all_dquirks == $sub.ref(0, 585399);

procedure usbhid_remove_all_dquirks();
  free requires assertsPassed;



implementation usbhid_remove_all_dquirks()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12663;

  corral_source_split_12663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} down_write(dquirks_rwsem);
    goto corral_source_split_12664;

  corral_source_split_12664:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, dquirks_list);
    goto corral_source_split_12665;

  corral_source_split_12665:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_12666;

  corral_source_split_12666:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 8), 24));
    goto corral_source_split_12667;

  corral_source_split_12667:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_12668;

  corral_source_split_12668:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_12669;

  corral_source_split_12669:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_12670;

  corral_source_split_12670:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref($sub.ref(0, 8), 24));
    goto corral_source_split_12671;

  corral_source_split_12671:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 24)), $mul.ref(8, 1));
    goto corral_source_split_12672;

  corral_source_split_12672:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_12673;

  corral_source_split_12673:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, $p2i.ref.i64(dquirks_list));
    goto corral_source_split_12674;

  corral_source_split_12674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} up_write(dquirks_rwsem);
    goto corral_source_split_12694;

  corral_source_split_12694:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_12676;

  corral_source_split_12676:
    assume {:verifier.code 0} true;
    $p11, $p12 := $p2, $p7;
    goto $bb4;

  $bb4:
    call $p13, $p14, $p16, $p17, $p18, $p19, $p20, $i21, $i22, $p11, $p12 := usbhid_remove_all_dquirks_loop_$bb4($p13, $p14, $p16, $p17, $p18, $p19, $p20, $i21, $i22, $p11, $p12);
    goto $bb4_last;

  corral_source_split_12678:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12680;

  corral_source_split_12680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2028} list_del($p13);
    goto corral_source_split_12681;

  corral_source_split_12681:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p11);
    goto corral_source_split_12682;

  corral_source_split_12682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} kfree($p14);
    goto corral_source_split_12683;

  corral_source_split_12683:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_12684;

  corral_source_split_12684:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_12685;

  corral_source_split_12685:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_12686;

  corral_source_split_12686:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref($sub.ref(0, 8), 24));
    goto corral_source_split_12687;

  corral_source_split_12687:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12688;

  corral_source_split_12688:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_12689;

  corral_source_split_12689:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, $p2i.ref.i64(dquirks_list));
    goto corral_source_split_12690;

  corral_source_split_12690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    goto corral_source_split_12692;

  corral_source_split_12692:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $p11, $p12 := $p12, $p19;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12678;
}



const down_write: ref;

axiom down_write == $sub.ref(0, 586431);

procedure down_write($p0: ref);
  free requires assertsPassed;



implementation down_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12696;

  corral_source_split_12696:
    assume {:verifier.code 0} true;
    return;
}



const up_write: ref;

axiom up_write == $sub.ref(0, 587463);

procedure up_write($p0: ref);
  free requires assertsPassed;



implementation up_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12698;

  corral_source_split_12698:
    assume {:verifier.code 0} true;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 588495);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12700;

  corral_source_split_12700:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2031} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2032} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_12701;

  corral_source_split_12701:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const sscanf: ref;

axiom sscanf == $sub.ref(0, 589527);

procedure sscanf.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32);



const usbhid_modify_dquirk: ref;

axiom usbhid_modify_dquirk == $sub.ref(0, 590559);

procedure usbhid_modify_dquirk($i0: i16, $i1: i16, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation usbhid_modify_dquirk($i0: i16, $i1: i16, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p28: ref;
  var $i45: i32;
  var $i54: i1;
  var $p55: ref;
  var $i8: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} {:cexpr "usbhid_modify_dquirk:arg:idVendor"} boogie_si_record_i16($i0);
    call {:si_unique_call 2034} {:cexpr "usbhid_modify_dquirk:arg:idProduct"} boogie_si_record_i16($i1);
    call {:si_unique_call 2035} {:cexpr "usbhid_modify_dquirk:arg:quirks"} boogie_si_record_i32($i2);
    goto corral_source_split_12703;

  corral_source_split_12703:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i0);
    goto corral_source_split_12704;

  corral_source_split_12704:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_12705;

  corral_source_split_12705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} $p9 := kmalloc(24, 208);
    goto corral_source_split_12716;

  corral_source_split_12716:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_12717;

  corral_source_split_12717:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_12718;

  corral_source_split_12718:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_12719;

  corral_source_split_12719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_12728;

  corral_source_split_12728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p17, $i0);
    goto corral_source_split_12729;

  corral_source_split_12729:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_12730;

  corral_source_split_12730:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p19, $i1);
    goto corral_source_split_12731;

  corral_source_split_12731:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_12732;

  corral_source_split_12732:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i2);
    goto corral_source_split_12733;

  corral_source_split_12733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} down_write(dquirks_rwsem);
    goto corral_source_split_12734;

  corral_source_split_12734:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, dquirks_list);
    goto corral_source_split_12735;

  corral_source_split_12735:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_12736;

  corral_source_split_12736:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref($sub.ref(0, 8), 24));
    goto corral_source_split_12737;

  corral_source_split_12737:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p23, $mul.ref($sub.ref(0, 8), 24)), $mul.ref(8, 1));
    goto corral_source_split_12738;

  corral_source_split_12738:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_12739;

  corral_source_split_12739:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, $p2i.ref.i64(dquirks_list));
    goto corral_source_split_12740;

  corral_source_split_12740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_12766;

  corral_source_split_12766:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i45, 0);
    goto corral_source_split_12767;

  corral_source_split_12767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} up_write(dquirks_rwsem);
    goto corral_source_split_12783;

  corral_source_split_12783:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_12714;

  corral_source_split_12714:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb29:
    assume $i54 == 1;
    goto corral_source_split_12779;

  corral_source_split_12779:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p10, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12780;

  corral_source_split_12780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} list_add_tail($p55, dquirks_list);
    goto corral_source_split_12781;

  corral_source_split_12781:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb14:
    assume $i27 == 1;
    goto corral_source_split_12742;

  corral_source_split_12742:
    assume {:verifier.code 0} true;
    $p28 := $p24;
    goto $bb17;

  $bb17:
    call $p30, $i31, $i32, $i33, $i34, $p36, $i37, $i38, $i39, $i40, $p41, $p47, $p48, $p49, $p50, $p51, $i52, $i53, $p28 := usbhid_modify_dquirk_loop_$bb17($i0, $i1, $p30, $i31, $i32, $i33, $i34, $p36, $i37, $i38, $i39, $i40, $p41, $p47, $p48, $p49, $p50, $p51, $i52, $i53, $p28);
    goto $bb17_last;

  corral_source_split_12744:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_12746;

  corral_source_split_12746:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.0, $p30);
    goto corral_source_split_12747;

  corral_source_split_12747:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_12748;

  corral_source_split_12748:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i0);
    goto corral_source_split_12749;

  corral_source_split_12749:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i32, $i33);
    goto corral_source_split_12750;

  corral_source_split_12750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_12769;

  corral_source_split_12769:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_12770;

  corral_source_split_12770:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_12771;

  corral_source_split_12771:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p49, $mul.ref($sub.ref(0, 8), 24));
    goto corral_source_split_12772;

  corral_source_split_12772:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p49, $mul.ref($sub.ref(0, 8), 24)), $mul.ref(8, 1));
    goto corral_source_split_12773;

  corral_source_split_12773:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_12774;

  corral_source_split_12774:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, $p2i.ref.i64(dquirks_list));
    goto corral_source_split_12775;

  corral_source_split_12775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i53 == 1);
    goto corral_source_split_12777;

  corral_source_split_12777:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb26:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $p28 := $p50;
    goto $bb26_dummy;

  $bb19:
    assume $i34 == 1;
    goto corral_source_split_12752;

  corral_source_split_12752:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_12753;

  corral_source_split_12753:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_12754;

  corral_source_split_12754:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_12755;

  corral_source_split_12755:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i1);
    goto corral_source_split_12756;

  corral_source_split_12756:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i38, $i39);
    goto corral_source_split_12757;

  corral_source_split_12757:
    assume {:verifier.code 0} true;
    $p41 := $p28;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb21;

  $bb22:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_12759;

  corral_source_split_12759:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12760;

  corral_source_split_12760:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p10, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12761;

  corral_source_split_12761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} list_replace($p42, $p43);
    goto corral_source_split_12762;

  corral_source_split_12762:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p41);
    goto corral_source_split_12763;

  corral_source_split_12763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} kfree($p44);
    goto corral_source_split_12764;

  corral_source_split_12764:
    assume {:verifier.code 0} true;
    $i45 := 1;
    goto $bb24;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_12721;

  corral_source_split_12721:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, hid_debug);
    goto corral_source_split_12722;

  corral_source_split_12722:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_12723;

  corral_source_split_12723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb6;

  $bb10:
    assume $i14 == 1;
    goto corral_source_split_12725;

  corral_source_split_12725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2038} vslice_dummy_var_150 := printk.ref.ref(.str.75, .str.74);
    goto corral_source_split_12726;

  corral_source_split_12726:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_12707;

  corral_source_split_12707:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, hid_debug);
    goto corral_source_split_12708;

  corral_source_split_12708:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_12709;

  corral_source_split_12709:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb6;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_12711;

  corral_source_split_12711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} vslice_dummy_var_149 := printk.ref.ref(.str.73, .str.74);
    goto corral_source_split_12712;

  corral_source_split_12712:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb26_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_12744;
}



const list_replace: ref;

axiom list_replace == $sub.ref(0, 591591);

procedure list_replace($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_replace($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12785;

  corral_source_split_12785:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12786;

  corral_source_split_12786:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_12787;

  corral_source_split_12787:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12788;

  corral_source_split_12788:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p3);
    goto corral_source_split_12789;

  corral_source_split_12789:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12790;

  corral_source_split_12790:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_12791;

  corral_source_split_12791:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12792;

  corral_source_split_12792:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_12793;

  corral_source_split_12793:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12794;

  corral_source_split_12794:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_12795;

  corral_source_split_12795:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12796;

  corral_source_split_12796:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p9);
    goto corral_source_split_12797;

  corral_source_split_12797:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12798;

  corral_source_split_12798:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_12799;

  corral_source_split_12799:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12800;

  corral_source_split_12800:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p1);
    goto corral_source_split_12801;

  corral_source_split_12801:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_deregister_26: ref;

axiom ldv_usb_deregister_26 == $sub.ref(0, 592623);

procedure ldv_usb_deregister_26($p0: ref);
  free requires assertsPassed;
  modifies $M.51;



implementation ldv_usb_deregister_26($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12803;

  corral_source_split_12803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} usb_deregister($p0);
    goto corral_source_split_12804;

  corral_source_split_12804:
    assume {:verifier.code 0} true;
    $M.51 := 0;
    call {:si_unique_call 2045} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_12805;

  corral_source_split_12805:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 593655);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12807;

  corral_source_split_12807:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 594687);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2046} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_12809;

  corral_source_split_12809:
    assume {:verifier.code 1} true;
    goto corral_source_split_12810;

  corral_source_split_12810:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_12811;

  corral_source_split_12811:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 595719);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 596751);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 597783);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12813;

  corral_source_split_12813:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_12814;

  corral_source_split_12814:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_439:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 598815);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 599847);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 600879);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 601911);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 602943);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 603975);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 605007);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 606039);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 607071);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 608103);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12816;

  corral_source_split_12816:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2047} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 2048} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2049} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_12817;

  corral_source_split_12817:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_12818;

  corral_source_split_12818:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_12822;

  corral_source_split_12822:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_12823;

  corral_source_split_12823:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2050} __VERIFIER_assume($i4);
    goto corral_source_split_12824;

  corral_source_split_12824:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_12820;

  corral_source_split_12820:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 609135);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 610167);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 611199);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 612231);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12826;

  corral_source_split_12826:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2051} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2052} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2053} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_12827;

  corral_source_split_12827:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2054} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2055} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 2056} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_12828;

  corral_source_split_12828:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2057} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2058} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 2059} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_12829;

  corral_source_split_12829:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_12830;

  corral_source_split_12830:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_12835;

  corral_source_split_12835:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_12836;

  corral_source_split_12836:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2060} __VERIFIER_assume($i7);
    goto corral_source_split_12837;

  corral_source_split_12837:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_12838;

  corral_source_split_12838:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_12844;

  corral_source_split_12844:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_12845;

  corral_source_split_12845:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2061} __VERIFIER_assume($i11);
    goto corral_source_split_12846;

  corral_source_split_12846:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_12842;

  corral_source_split_12842:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_12832;

  corral_source_split_12832:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_12833;

  corral_source_split_12833:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_12840;

  corral_source_split_12840:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 613263);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 614295);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12848;

  corral_source_split_12848:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2062} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 2063} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2064} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_12849;

  corral_source_split_12849:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_12850;

  corral_source_split_12850:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_12854;

  corral_source_split_12854:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_12855;

  corral_source_split_12855:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2065} __VERIFIER_assume($i4);
    goto corral_source_split_12856;

  corral_source_split_12856:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_12852;

  corral_source_split_12852:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 615327);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 616359);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 617391);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 618423);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 619455);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12858;

  corral_source_split_12858:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2066} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2067} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2068} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_12859;

  corral_source_split_12859:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2069} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2070} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 2071} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_12860;

  corral_source_split_12860:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2072} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2073} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 2074} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_12861;

  corral_source_split_12861:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_12862;

  corral_source_split_12862:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_12867;

  corral_source_split_12867:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_12868;

  corral_source_split_12868:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2075} __VERIFIER_assume($i7);
    goto corral_source_split_12869;

  corral_source_split_12869:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_12870;

  corral_source_split_12870:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_12876;

  corral_source_split_12876:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_12877;

  corral_source_split_12877:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2076} __VERIFIER_assume($i11);
    goto corral_source_split_12878;

  corral_source_split_12878:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_12874;

  corral_source_split_12874:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_12864;

  corral_source_split_12864:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_12865;

  corral_source_split_12865:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_12872;

  corral_source_split_12872:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 620487);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 621519);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 622551);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 623583);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 624615);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 625647);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 626679);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 627711);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 628743);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12880;

  corral_source_split_12880:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2077} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2078} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12881;

  corral_source_split_12881:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12882;

  corral_source_split_12882:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2079} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_12883;

  corral_source_split_12883:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_12884;

  corral_source_split_12884:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_12885;

  corral_source_split_12885:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_12886;

  corral_source_split_12886:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_12893;

  corral_source_split_12893:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_12894;

  corral_source_split_12894:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_12895;

  corral_source_split_12895:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_12896;

  corral_source_split_12896:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_12888;

  corral_source_split_12888:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_12889;

  corral_source_split_12889:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2080} __VERIFIER_assume($i10);
    goto corral_source_split_12890;

  corral_source_split_12890:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_12891;

  corral_source_split_12891:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 629775);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12898;

  corral_source_split_12898:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2081} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 2082} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2083} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_12899;

  corral_source_split_12899:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 630807);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12901;

  corral_source_split_12901:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2084} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 2085} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2086} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_12902;

  corral_source_split_12902:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 631839);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12904;

  corral_source_split_12904:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2087} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 2088} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_12905;

  corral_source_split_12905:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 632871);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 633903);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2089} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2090} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 634935);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 635967);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12907;

  corral_source_split_12907:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_12908;

  corral_source_split_12908:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 636999);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2091} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 2092} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_12910;

  corral_source_split_12910:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2093} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2094} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_12911;

  corral_source_split_12911:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_12912;

  corral_source_split_12912:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_12916;

  corral_source_split_12916:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_12917;

  corral_source_split_12917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} $p6 := malloc($i5);
    goto corral_source_split_12918;

  corral_source_split_12918:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_12919;

  corral_source_split_12919:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.0;
    call {:si_unique_call 2096} cmdloc_dummy_var_18 := $memset.i8(cmdloc_dummy_var_17, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_18;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12921;

  corral_source_split_12921:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_12914;

  corral_source_split_12914:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 638031);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 639063);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.48, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.76, $M.46, $M.71, $M.70, $M.69, $M.27, $M.26, $M.35, $M.36, $M.28, $M.109, $M.0, $M.72, $M.38, $M.2, $M.110, $M.111, $M.68, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.66, $M.67, $M.127, $M.128, $M.129, $M.130;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 2097} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.48 := $0.ref;
    $M.18 := 0;
    call {:si_unique_call 2098} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    $M.19 := $0.ref;
    $M.20 := 0;
    call {:si_unique_call 2099} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    $M.21 := $0.ref;
    $M.22 := 0;
    call {:si_unique_call 2100} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    $M.23 := $0.ref;
    $M.24 := 0;
    call {:si_unique_call 2101} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    $M.25 := $0.ref;
    $M.11 := 0;
    call {:si_unique_call 2102} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(0);
    $M.10 := $0.ref;
    $M.13 := 0;
    call {:si_unique_call 2103} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(0);
    $M.12 := $0.ref;
    $M.15 := 0;
    call {:si_unique_call 2104} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(0);
    $M.14 := $0.ref;
    $M.17 := 0;
    call {:si_unique_call 2105} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(0);
    $M.16 := $0.ref;
    $M.50 := $0.ref;
    $M.51 := 0;
    call {:si_unique_call 2106} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 2107} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 2108} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.54 := 0;
    call {:si_unique_call 2109} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 2110} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 2111} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.57 := 0;
    call {:si_unique_call 2112} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.58 := 0;
    call {:si_unique_call 2113} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.59 := 0;
    call {:si_unique_call 2114} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.60 := 0;
    call {:si_unique_call 2115} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 2116} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.62 := 0;
    call {:si_unique_call 2117} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.63 := 0;
    call {:si_unique_call 2118} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.64 := 0;
    call {:si_unique_call 2119} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.65 := 0;
    call {:si_unique_call 2120} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.76 := $store.i8($M.76, __kstrtab_usbhid_lookup_quirk, 117);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usbhid_lookup_quirk, $mul.ref(0, 20)), $mul.ref(1, 1)), 115);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usbhid_lookup_quirk, $mul.ref(0, 20)), $mul.ref(2, 1)), 98);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usbhid_lookup_quirk, $mul.ref(0, 20)), $mul.ref(3, 1)), 104);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usbhid_lookup_quirk, $mul.ref(0, 20)), $mul.ref(4, 1)), 105);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usbhid_lookup_quirk, $mul.ref(0, 20)), $mul.ref(5, 1)), 100);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usbhid_lookup_quirk, $mul.ref(0, 20)), $mul.ref(6, 1)), 95);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usbhid_lookup_quirk, $mul.ref(0, 20)), $mul.ref(7, 1)), 108);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usbhid_lookup_quirk, $mul.ref(0, 20)), $mul.ref(8, 1)), 111);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usbhid_lookup_quirk, $mul.ref(0, 20)), $mul.ref(9, 1)), 111);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usbhid_lookup_quirk, $mul.ref(0, 20)), $mul.ref(10, 1)), 107);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usbhid_lookup_quirk, $mul.ref(0, 20)), $mul.ref(11, 1)), 117);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usbhid_lookup_quirk, $mul.ref(0, 20)), $mul.ref(12, 1)), 112);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usbhid_lookup_quirk, $mul.ref(0, 20)), $mul.ref(13, 1)), 95);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usbhid_lookup_quirk, $mul.ref(0, 20)), $mul.ref(14, 1)), 113);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usbhid_lookup_quirk, $mul.ref(0, 20)), $mul.ref(15, 1)), 117);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usbhid_lookup_quirk, $mul.ref(0, 20)), $mul.ref(16, 1)), 105);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usbhid_lookup_quirk, $mul.ref(0, 20)), $mul.ref(17, 1)), 114);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usbhid_lookup_quirk, $mul.ref(0, 20)), $mul.ref(18, 1)), 107);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_usbhid_lookup_quirk, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.46 := 1;
    call {:si_unique_call 2121} {:cexpr "ldv_mutex_thread_lock_of_hiddev_list"} boogie_si_record_i32(1);
    $M.71 := 1;
    call {:si_unique_call 2122} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    $M.70 := 1;
    call {:si_unique_call 2123} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    $M.69 := 1;
    call {:si_unique_call 2124} {:cexpr "ldv_mutex_i_mutex_of_inode"} boogie_si_record_i32(1);
    $M.27 := 1;
    call {:si_unique_call 2125} {:cexpr "ldv_mutex_hid_open_mut"} boogie_si_record_i32(1);
    $M.26 := 1;
    call {:si_unique_call 2126} {:cexpr "ldv_mutex_existancelock_of_hiddev"} boogie_si_record_i32(1);
    $M.35 := $store.i8($M.35, pidff_device_gain, 126);
    $M.35 := $store.i8($M.35, pidff_pool, $sub.i8(0, 128));
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_pool, $mul.ref(0, 3)), $mul.ref(1, 1)), $sub.i8(0, 125));
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_pool, $mul.ref(0, 3)), $mul.ref(2, 1)), $sub.i8(0, 87));
    $M.35 := $store.i8($M.35, pidff_set_periodic, 34);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_set_periodic, $mul.ref(0, 5)), $mul.ref(1, 1)), 112);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_set_periodic, $mul.ref(0, 5)), $mul.ref(2, 1)), 111);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_set_periodic, $mul.ref(0, 5)), $mul.ref(3, 1)), 113);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_set_periodic, $mul.ref(0, 5)), $mul.ref(4, 1)), 114);
    $M.35 := $store.i8($M.35, pidff_set_condition, 34);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_set_condition, $mul.ref(0, 8)), $mul.ref(1, 1)), 35);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_set_condition, $mul.ref(0, 8)), $mul.ref(2, 1)), 96);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_set_condition, $mul.ref(0, 8)), $mul.ref(3, 1)), 97);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_set_condition, $mul.ref(0, 8)), $mul.ref(4, 1)), 98);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_set_condition, $mul.ref(0, 8)), $mul.ref(5, 1)), 99);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_set_condition, $mul.ref(0, 8)), $mul.ref(6, 1)), 100);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_set_condition, $mul.ref(0, 8)), $mul.ref(7, 1)), 101);
    $M.35 := $store.i8($M.35, pidff_set_ramp, 34);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_set_ramp, $mul.ref(0, 3)), $mul.ref(1, 1)), 117);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_set_ramp, $mul.ref(0, 3)), $mul.ref(2, 1)), 118);
    $M.35 := $store.i8($M.35, pidff_set_constant, 34);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_set_constant, $mul.ref(0, 2)), $mul.ref(1, 1)), 112);
    $M.36 := $store.i8($M.36, pidff_effect_operation_status, 121);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(pidff_effect_operation_status, $mul.ref(0, 2)), $mul.ref(1, 1)), 123);
    $M.36 := $store.i8($M.36, pidff_block_load_status, $sub.i8(0, 116));
    $M.36 := $store.i8($M.36, $add.ref($add.ref(pidff_block_load_status, $mul.ref(0, 2)), $mul.ref(1, 1)), $sub.i8(0, 115));
    $M.36 := $store.i8($M.36, pidff_effect_types, 38);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(pidff_effect_types, $mul.ref(0, 11)), $mul.ref(1, 1)), 39);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(pidff_effect_types, $mul.ref(0, 11)), $mul.ref(2, 1)), 48);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(pidff_effect_types, $mul.ref(0, 11)), $mul.ref(3, 1)), 49);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(pidff_effect_types, $mul.ref(0, 11)), $mul.ref(4, 1)), 50);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(pidff_effect_types, $mul.ref(0, 11)), $mul.ref(5, 1)), 51);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(pidff_effect_types, $mul.ref(0, 11)), $mul.ref(6, 1)), 52);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(pidff_effect_types, $mul.ref(0, 11)), $mul.ref(7, 1)), 64);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(pidff_effect_types, $mul.ref(0, 11)), $mul.ref(8, 1)), 65);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(pidff_effect_types, $mul.ref(0, 11)), $mul.ref(9, 1)), 66);
    $M.36 := $store.i8($M.36, $add.ref($add.ref(pidff_effect_types, $mul.ref(0, 11)), $mul.ref(10, 1)), 67);
    $M.36 := $store.i8($M.36, pidff_device_control, $sub.i8(0, 105));
    $M.36 := $store.i8($M.36, $add.ref($add.ref(pidff_device_control, $mul.ref(0, 2)), $mul.ref(1, 1)), $sub.i8(0, 102));
    $M.35 := $store.i8($M.35, pidff_set_envelope, 34);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_set_envelope, $mul.ref(0, 5)), $mul.ref(1, 1)), 91);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_set_envelope, $mul.ref(0, 5)), $mul.ref(2, 1)), 92);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_set_envelope, $mul.ref(0, 5)), $mul.ref(3, 1)), 93);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_set_envelope, $mul.ref(0, 5)), $mul.ref(4, 1)), 94);
    $M.35 := $store.i8($M.35, pidff_block_free, 34);
    $M.35 := $store.i8($M.35, pidff_effect_operation, 34);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_effect_operation, $mul.ref(0, 2)), $mul.ref(1, 1)), 124);
    $M.35 := $store.i8($M.35, pidff_block_load, 34);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_block_load, $mul.ref(0, 2)), $mul.ref(1, 1)), $sub.i8(0, 84));
    $M.35 := $store.i8($M.35, pidff_set_effect, 34);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_set_effect, $mul.ref(0, 7)), $mul.ref(1, 1)), 80);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_set_effect, $mul.ref(0, 7)), $mul.ref(2, 1)), 82);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_set_effect, $mul.ref(0, 7)), $mul.ref(3, 1)), 83);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_set_effect, $mul.ref(0, 7)), $mul.ref(4, 1)), 84);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_set_effect, $mul.ref(0, 7)), $mul.ref(5, 1)), 86);
    $M.35 := $store.i8($M.35, $add.ref($add.ref(pidff_set_effect, $mul.ref(0, 7)), $mul.ref(6, 1)), $sub.i8(0, 89));
    $M.28 := $store.i8($M.28, pidff_reports, 33);
    $M.28 := $store.i8($M.28, $add.ref($add.ref(pidff_reports, $mul.ref(0, 13)), $mul.ref(1, 1)), 119);
    $M.28 := $store.i8($M.28, $add.ref($add.ref(pidff_reports, $mul.ref(0, 13)), $mul.ref(2, 1)), 125);
    $M.28 := $store.i8($M.28, $add.ref($add.ref(pidff_reports, $mul.ref(0, 13)), $mul.ref(3, 1)), 127);
    $M.28 := $store.i8($M.28, $add.ref($add.ref(pidff_reports, $mul.ref(0, 13)), $mul.ref(4, 1)), $sub.i8(0, 119));
    $M.28 := $store.i8($M.28, $add.ref($add.ref(pidff_reports, $mul.ref(0, 13)), $mul.ref(5, 1)), $sub.i8(0, 112));
    $M.28 := $store.i8($M.28, $add.ref($add.ref(pidff_reports, $mul.ref(0, 13)), $mul.ref(6, 1)), $sub.i8(0, 106));
    $M.28 := $store.i8($M.28, $add.ref($add.ref(pidff_reports, $mul.ref(0, 13)), $mul.ref(7, 1)), $sub.i8(0, 85));
    $M.28 := $store.i8($M.28, $add.ref($add.ref(pidff_reports, $mul.ref(0, 13)), $mul.ref(8, 1)), 90);
    $M.28 := $store.i8($M.28, $add.ref($add.ref(pidff_reports, $mul.ref(0, 13)), $mul.ref(9, 1)), 95);
    $M.28 := $store.i8($M.28, $add.ref($add.ref(pidff_reports, $mul.ref(0, 13)), $mul.ref(10, 1)), 110);
    $M.28 := $store.i8($M.28, $add.ref($add.ref(pidff_reports, $mul.ref(0, 13)), $mul.ref(11, 1)), 115);
    $M.28 := $store.i8($M.28, $add.ref($add.ref(pidff_reports, $mul.ref(0, 13)), $mul.ref(12, 1)), 116);
    $M.109 := $store.i8($M.109, __kstrtab_hiddev_hid_event, 104);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_hiddev_hid_event, $mul.ref(0, 17)), $mul.ref(1, 1)), 105);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_hiddev_hid_event, $mul.ref(0, 17)), $mul.ref(2, 1)), 100);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_hiddev_hid_event, $mul.ref(0, 17)), $mul.ref(3, 1)), 100);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_hiddev_hid_event, $mul.ref(0, 17)), $mul.ref(4, 1)), 101);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_hiddev_hid_event, $mul.ref(0, 17)), $mul.ref(5, 1)), 118);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_hiddev_hid_event, $mul.ref(0, 17)), $mul.ref(6, 1)), 95);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_hiddev_hid_event, $mul.ref(0, 17)), $mul.ref(7, 1)), 104);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_hiddev_hid_event, $mul.ref(0, 17)), $mul.ref(8, 1)), 105);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_hiddev_hid_event, $mul.ref(0, 17)), $mul.ref(9, 1)), 100);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_hiddev_hid_event, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_hiddev_hid_event, $mul.ref(0, 17)), $mul.ref(11, 1)), 101);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_hiddev_hid_event, $mul.ref(0, 17)), $mul.ref(12, 1)), 118);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_hiddev_hid_event, $mul.ref(0, 17)), $mul.ref(13, 1)), 101);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_hiddev_hid_event, $mul.ref(0, 17)), $mul.ref(14, 1)), 110);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_hiddev_hid_event, $mul.ref(0, 17)), $mul.ref(15, 1)), 116);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(__kstrtab_hiddev_hid_event, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i16($M.0, hid_blacklist, 1750);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(0, 8)), $mul.ref(2, 1)), 37);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(0, 8)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(1, 8)), $mul.ref(0, 1)), 1750);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(1, 8)), $mul.ref(2, 1)), 38);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(1, 8)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(2, 8)), $mul.ref(0, 1)), 1075);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(2, 8)), $mul.ref(2, 1)), 4353);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(2, 8)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(3, 8)), $mul.ref(0, 1)), 1534);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(3, 8)), $mul.ref(2, 1)), 20);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(3, 8)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(4, 8)), $mul.ref(0, 1)), 3823);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(4, 8)), $mul.ref(2, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(4, 8)), $mul.ref(4, 1)), 72);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(5, 8)), $mul.ref(0, 1)), $sub.i16(0, 32126));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(5, 8)), $mul.ref(2, 1)), 12801);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(5, 8)), $mul.ref(4, 1)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(6, 8)), $mul.ref(0, 1)), 1931);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(6, 8)), $mul.ref(2, 1)), 16);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(6, 8)), $mul.ref(4, 1)), 96);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(7, 8)), $mul.ref(0, 1)), 1931);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(7, 8)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(7, 8)), $mul.ref(4, 1)), 96);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(8, 8)), $mul.ref(0, 1)), 1931);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(8, 8)), $mul.ref(2, 1)), 48);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(8, 8)), $mul.ref(4, 1)), 96);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(9, 8)), $mul.ref(0, 1)), 2231);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(9, 8)), $mul.ref(2, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(9, 8)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(10, 8)), $mul.ref(0, 1)), 1854);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(10, 8)), $mul.ref(2, 1)), 769);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(10, 8)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(11, 8)), $mul.ref(0, 1)), 6438);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(11, 8)), $mul.ref(2, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(11, 8)), $mul.ref(4, 1)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(12, 8)), $mul.ref(0, 1)), 1699);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(12, 8)), $mul.ref(2, 1)), $sub.i16(0, 233));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(12, 8)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(13, 8)), $mul.ref(0, 1)), 1635);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(13, 8)), $mul.ref(2, 1)), 259);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(13, 8)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(14, 8)), $mul.ref(0, 1)), 5540);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(14, 8)), $mul.ref(2, 1)), $sub.i16(0, 28650));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(14, 8)), $mul.ref(4, 1)), 268435456);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(15, 8)), $mul.ref(0, 1)), 8198);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(15, 8)), $mul.ref(2, 1)), 280);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(15, 8)), $mul.ref(4, 1)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(16, 8)), $mul.ref(0, 1)), 8889);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(16, 8)), $mul.ref(2, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(16, 8)), $mul.ref(4, 1)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(17, 8)), $mul.ref(0, 1)), 8889);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(17, 8)), $mul.ref(2, 1)), 10600);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(17, 8)), $mul.ref(4, 1)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(18, 8)), $mul.ref(0, 1)), 3727);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(18, 8)), $mul.ref(2, 1)), 12307);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(18, 8)), $mul.ref(4, 1)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(19, 8)), $mul.ref(0, 1)), 2064);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(19, 8)), $mul.ref(2, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(19, 8)), $mul.ref(4, 1)), 65600);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(20, 8)), $mul.ref(0, 1)), 7165);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(20, 8)), $mul.ref(2, 1)), 5768);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(20, 8)), $mul.ref(4, 1)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(21, 8)), $mul.ref(0, 1)), 6700);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(21, 8)), $mul.ref(2, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(21, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(22, 8)), $mul.ref(0, 1)), 1367);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(22, 8)), $mul.ref(2, 1)), 8196);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(22, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(23, 8)), $mul.ref(0, 1)), 1367);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(23, 8)), $mul.ref(2, 1)), 8706);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(23, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(24, 8)), $mul.ref(0, 1)), 1367);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(24, 8)), $mul.ref(2, 1)), 8708);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(24, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(25, 8)), $mul.ref(0, 1)), 1367);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(25, 8)), $mul.ref(2, 1)), 8709);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(25, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(26, 8)), $mul.ref(0, 1)), 1367);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(26, 8)), $mul.ref(2, 1)), 8712);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(26, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(27, 8)), $mul.ref(0, 1)), 1367);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(27, 8)), $mul.ref(2, 1)), 8723);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(27, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(28, 8)), $mul.ref(0, 1)), 1678);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(28, 8)), $mul.ref(2, 1)), 243);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(28, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(29, 8)), $mul.ref(0, 1)), 1678);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(29, 8)), $mul.ref(2, 1)), 244);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(29, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(30, 8)), $mul.ref(0, 1)), 1678);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(30, 8)), $mul.ref(2, 1)), 81);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(30, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(31, 8)), $mul.ref(0, 1)), 1678);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(31, 8)), $mul.ref(2, 1)), 255);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(31, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(32, 8)), $mul.ref(0, 1)), 1678);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(32, 8)), $mul.ref(2, 1)), 241);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(32, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(33, 8)), $mul.ref(0, 1)), 1678);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(33, 8)), $mul.ref(2, 1)), 242);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(33, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(34, 8)), $mul.ref(0, 1)), 1678);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(34, 8)), $mul.ref(2, 1)), 211);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(34, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(35, 8)), $mul.ref(0, 1)), 1678);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(35, 8)), $mul.ref(2, 1)), 28);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(35, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(36, 8)), $mul.ref(0, 1)), 1266);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(36, 8)), $mul.ref(2, 1)), 4179);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(36, 8)), $mul.ref(4, 1)), 1024);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(37, 8)), $mul.ref(0, 1)), 3083);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(37, 8)), $mul.ref(2, 1)), 24491);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(37, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(38, 8)), $mul.ref(0, 1)), 1267);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(38, 8)), $mul.ref(2, 1)), 137);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(38, 8)), $mul.ref(4, 1)), 1024);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(39, 8)), $mul.ref(0, 1)), 1267);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(39, 8)), $mul.ref(2, 1)), 155);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(39, 8)), $mul.ref(4, 1)), 1024);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(40, 8)), $mul.ref(0, 1)), 1267);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(40, 8)), $mul.ref(2, 1)), 259);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(40, 8)), $mul.ref(4, 1)), 1024);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(41, 8)), $mul.ref(0, 1)), 1267);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(41, 8)), $mul.ref(2, 1)), 268);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(41, 8)), $mul.ref(4, 1)), 1024);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(42, 8)), $mul.ref(0, 1)), 1267);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(42, 8)), $mul.ref(2, 1)), 367);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(42, 8)), $mul.ref(4, 1)), 1024);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(43, 8)), $mul.ref(0, 1)), 1255);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(43, 8)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(43, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(44, 8)), $mul.ref(0, 1)), 5242);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(44, 8)), $mul.ref(2, 1)), $sub.i16(0, 8130));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(44, 8)), $mul.ref(4, 1)), 536870912);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(45, 8)), $mul.ref(0, 1)), 5538);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(45, 8)), $mul.ref(2, 1)), 79);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(45, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(46, 8)), $mul.ref(0, 1)), 1008);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(46, 8)), $mul.ref(2, 1)), 2634);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(46, 8)), $mul.ref(4, 1)), 1024);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(47, 8)), $mul.ref(0, 1)), 1008);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(47, 8)), $mul.ref(2, 1)), 2890);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(47, 8)), $mul.ref(4, 1)), 1024);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(48, 8)), $mul.ref(0, 1)), 1008);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(48, 8)), $mul.ref(2, 1)), 4938);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(48, 8)), $mul.ref(4, 1)), 1024);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(49, 8)), $mul.ref(0, 1)), 1133);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(49, 8)), $mul.ref(2, 1)), $sub.i16(0, 16377));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(49, 8)), $mul.ref(4, 1)), 1024);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(50, 8)), $mul.ref(0, 1)), 1133);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(50, 8)), $mul.ref(2, 1)), $sub.i16(0, 16358));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(50, 8)), $mul.ref(4, 1)), 1024);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(51, 8)), $mul.ref(0, 1)), 1133);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(51, 8)), $mul.ref(2, 1)), $sub.i16(0, 16294));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(51, 8)), $mul.ref(4, 1)), 1024);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(52, 8)), $mul.ref(0, 1)), 1133);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(52, 8)), $mul.ref(2, 1)), $sub.i16(0, 16278));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(52, 8)), $mul.ref(4, 1)), 1024);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(53, 8)), $mul.ref(0, 1)), 1123);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(53, 8)), $mul.ref(2, 1)), $sub.i16(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(53, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(54, 8)), $mul.ref(0, 1)), 1118);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(54, 8)), $mul.ref(2, 1)), 2012);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(54, 8)), $mul.ref(4, 1)), 536870912);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(55, 8)), $mul.ref(0, 1)), 1118);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(55, 8)), $mul.ref(2, 1)), 2013);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(55, 8)), $mul.ref(4, 1)), 536870912);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(56, 8)), $mul.ref(0, 1)), 1118);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(56, 8)), $mul.ref(2, 1)), 2010);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(56, 8)), $mul.ref(4, 1)), 536870912);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(57, 8)), $mul.ref(0, 1)), 6000);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(57, 8)), $mul.ref(2, 1)), $sub.i16(0, 256));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(57, 8)), $mul.ref(4, 1)), 536870912);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(58, 8)), $mul.ref(0, 1)), 6256);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(58, 8)), $mul.ref(2, 1)), 272);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(58, 8)), $mul.ref(4, 1)), 536870912);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(59, 8)), $mul.ref(0, 1)), 1539);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(59, 8)), $mul.ref(2, 1)), 5634);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(59, 8)), $mul.ref(4, 1)), 536870912);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(60, 8)), $mul.ref(0, 1)), 5345);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(60, 8)), $mul.ref(2, 1)), 5648);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(60, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(61, 8)), $mul.ref(0, 1)), 5345);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(61, 8)), $mul.ref(2, 1)), 5696);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(61, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(62, 8)), $mul.ref(0, 1)), 2362);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(62, 8)), $mul.ref(2, 1)), 9488);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(62, 8)), $mul.ref(4, 1)), 1024);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(63, 8)), $mul.ref(0, 1)), 1112);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(63, 8)), $mul.ref(2, 1)), 311);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(63, 8)), $mul.ref(4, 1)), 1024);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(64, 8)), $mul.ref(0, 1)), 2362);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(64, 8)), $mul.ref(2, 1)), $sub.i16(0, 32767));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(64, 8)), $mul.ref(4, 1)), 536870912);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(65, 8)), $mul.ref(0, 1)), 2362);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(65, 8)), $mul.ref(2, 1)), $sub.i16(0, 32766));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(65, 8)), $mul.ref(4, 1)), 536870912);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(66, 8)), $mul.ref(0, 1)), 2362);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(66, 8)), $mul.ref(2, 1)), $sub.i16(0, 32765));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(66, 8)), $mul.ref(4, 1)), 536870912);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(67, 8)), $mul.ref(0, 1)), 1121);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(67, 8)), $mul.ref(2, 1)), 19746);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(67, 8)), $mul.ref(4, 1)), 1024);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(68, 8)), $mul.ref(0, 1)), 1455);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(68, 8)), $mul.ref(2, 1)), 12386);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(68, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(69, 8)), $mul.ref(0, 1)), 1032);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(69, 8)), $mul.ref(2, 1)), 12289);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(69, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(70, 8)), $mul.ref(0, 1)), 1032);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(70, 8)), $mul.ref(2, 1)), 12296);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(70, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(71, 8)), $mul.ref(0, 1)), 3034);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(71, 8)), $mul.ref(2, 1)), 338);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(71, 8)), $mul.ref(4, 1)), 536870912);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(72, 8)), $mul.ref(0, 1)), 5013);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(72, 8)), $mul.ref(2, 1)), 44);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(72, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(73, 8)), $mul.ref(0, 1)), 1647);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(73, 8)), $mul.ref(2, 1)), 14208);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(73, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(74, 8)), $mul.ref(0, 1)), 1111);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(74, 8)), $mul.ref(2, 1)), $sub.i16(0, 28160));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(74, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(75, 8)), $mul.ref(0, 1)), 1111);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(75, 8)), $mul.ref(2, 1)), 2071);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(75, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(76, 8)), $mul.ref(0, 1)), 1111);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(76, 8)), $mul.ref(2, 1)), 4115);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(76, 8)), $mul.ref(4, 1)), 536870912);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(77, 8)), $mul.ref(0, 1)), 1111);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(77, 8)), $mul.ref(2, 1)), 4144);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(77, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(78, 8)), $mul.ref(0, 1)), 1072);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(78, 8)), $mul.ref(2, 1)), $sub.i16(0, 12885));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(78, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(79, 8)), $mul.ref(0, 1)), 1504);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(79, 8)), $mul.ref(2, 1)), 2048);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(79, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(80, 8)), $mul.ref(0, 1)), 1504);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(80, 8)), $mul.ref(2, 1)), 4864);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(80, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(81, 8)), $mul.ref(0, 1)), 9642);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(81, 8)), $mul.ref(2, 1)), $sub.i16(0, 30589));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(81, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(82, 8)), $mul.ref(0, 1)), 1578);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(82, 8)), $mul.ref(2, 1)), 513);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(82, 8)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(83, 8)), $mul.ref(0, 1)), 21827);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(83, 8)), $mul.ref(2, 1)), 24577);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(83, 8)), $mul.ref(4, 1)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(84, 8)), $mul.ref(0, 1)), 21827);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(84, 8)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(84, 8)), $mul.ref(4, 1)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(85, 8)), $mul.ref(0, 1)), 5935);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(85, 8)), $mul.ref(2, 1)), 1281);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(85, 8)), $mul.ref(4, 1)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(86, 8)), $mul.ref(0, 1)), 5935);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(86, 8)), $mul.ref(2, 1)), 1280);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(86, 8)), $mul.ref(4, 1)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(87, 8)), $mul.ref(0, 1)), 5935);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(87, 8)), $mul.ref(2, 1)), 1282);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(87, 8)), $mul.ref(4, 1)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(88, 8)), $mul.ref(0, 1)), 2341);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(88, 8)), $mul.ref(2, 1)), $sub.i16(0, 30720));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(88, 8)), $mul.ref(4, 1)), 72);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(89, 8)), $mul.ref(0, 1)), 26231);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(89, 8)), $mul.ref(2, 1)), $sub.i16(0, 30718));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(89, 8)), $mul.ref(4, 1)), 72);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(90, 8)), $mul.ref(0, 1)), 1523);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(90, 8)), $mul.ref(2, 1)), 255);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(90, 8)), $mul.ref(4, 1)), 128);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(91, 8)), $mul.ref(0, 1)), 1266);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(91, 8)), $mul.ref(2, 1)), $sub.i16(0, 20067));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(91, 8)), $mul.ref(4, 1)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(92, 8)), $mul.ref(0, 1)), 1266);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(92, 8)), $mul.ref(2, 1)), 1560);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(92, 8)), $mul.ref(4, 1)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(93, 8)), $mul.ref(0, 1)), 7247);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(93, 8)), $mul.ref(2, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(93, 8)), $mul.ref(4, 1)), 536870912);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(94, 8)), $mul.ref(0, 1)), 1112);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(94, 8)), $mul.ref(2, 1)), 20497);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(94, 8)), $mul.ref(4, 1)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(95, 8)), $mul.ref(0, 1)), 1112);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(95, 8)), $mul.ref(2, 1)), 20506);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(95, 8)), $mul.ref(4, 1)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(96, 8)), $mul.ref(0, 1)), 1112);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(96, 8)), $mul.ref(2, 1)), 20499);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(96, 8)), $mul.ref(4, 1)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(97, 8)), $mul.ref(0, 1)), 1112);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(97, 8)), $mul.ref(2, 1)), 20501);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(97, 8)), $mul.ref(4, 1)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(98, 8)), $mul.ref(0, 1)), 7062);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(98, 8)), $mul.ref(2, 1)), 5376);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(98, 8)), $mul.ref(4, 1)), 536870912);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(99, 8)), $mul.ref(0, 1)), 6700);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(99, 8)), $mul.ref(2, 1)), 35);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(99, 8)), $mul.ref(4, 1)), 536870912);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(100, 8)), $mul.ref(0, 1)), 1739);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(100, 8)), $mul.ref(2, 1)), 2808);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(100, 8)), $mul.ref(4, 1)), 536870912);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(101, 8)), $mul.ref(0, 1)), 1739);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(101, 8)), $mul.ref(2, 1)), 7440);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(101, 8)), $mul.ref(4, 1)), 536870912);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(102, 8)), $mul.ref(0, 1)), 1739);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(102, 8)), $mul.ref(2, 1)), 2755);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(102, 8)), $mul.ref(4, 1)), 536870912);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(103, 8)), $mul.ref(0, 1)), 1739);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(103, 8)), $mul.ref(2, 1)), 6851);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(103, 8)), $mul.ref(4, 1)), 536870912);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(104, 8)), $mul.ref(0, 1)), 1739);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(104, 8)), $mul.ref(2, 1)), 22288);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(104, 8)), $mul.ref(4, 1)), 536870912);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(105, 8)), $mul.ref(0, 1)), 1241);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(105, 8)), $mul.ref(2, 1)), $sub.i16(0, 24426));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(105, 8)), $mul.ref(4, 1)), 512);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(106, 8)), $mul.ref(0, 1)), 6017);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(106, 8)), $mul.ref(2, 1)), 2701);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(106, 8)), $mul.ref(4, 1)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(107, 8)), $mul.ref(0, 1)), 10395);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(107, 8)), $mul.ref(2, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(107, 8)), $mul.ref(4, 1)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(108, 8)), $mul.ref(0, 1)), 10395);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(108, 8)), $mul.ref(2, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(108, 8)), $mul.ref(4, 1)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(109, 8)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(109, 8)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(109, 8)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i64($M.0, dquirks_rwsem, 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dquirks_rwsem, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $add.ref(dquirks_rwsem, $mul.ref(8, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dquirks_rwsem, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(8, 1)), $add.ref(dquirks_rwsem, $mul.ref(8, 1)));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(dquirks_rwsem, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(dquirks_rwsem, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(dquirks_rwsem, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dquirks_rwsem, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(dquirks_rwsem, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(dquirks_rwsem, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(dquirks_rwsem, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(dquirks_rwsem, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.76);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(dquirks_rwsem, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(dquirks_rwsem, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(dquirks_rwsem, $mul.ref(0, 160)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dquirks_rwsem, $mul.ref(0, 160)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dquirks_rwsem, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(dquirks_rwsem, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(dquirks_rwsem, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dquirks_rwsem, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.77);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(dquirks_rwsem, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(dquirks_rwsem, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, dquirks_list, dquirks_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dquirks_list, $mul.ref(0, 16)), $mul.ref(8, 1)), dquirks_list);
    $M.72 := $store.ref($M.72, quirks_param, $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(quirks_param, $mul.ref(0, 32)), $mul.ref(1, 8)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(quirks_param, $mul.ref(0, 32)), $mul.ref(2, 8)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(quirks_param, $mul.ref(0, 32)), $mul.ref(3, 8)), $0.ref);
    $M.38 := 0;
    call {:si_unique_call 2127} {:cexpr "hid_mousepoll_interval"} boogie_si_record_i32(0);
    $M.2 := 0;
    call {:si_unique_call 2128} {:cexpr "ignoreled"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, usb_hid_driver, usbhid_start);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_hid_driver, $mul.ref(0, 88)), $mul.ref(8, 1)), usbhid_stop);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_hid_driver, $mul.ref(0, 88)), $mul.ref(16, 1)), usbhid_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_hid_driver, $mul.ref(0, 88)), $mul.ref(24, 1)), usbhid_close);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_hid_driver, $mul.ref(0, 88)), $mul.ref(32, 1)), usbhid_power);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_hid_driver, $mul.ref(0, 88)), $mul.ref(40, 1)), usbhid_parse);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_hid_driver, $mul.ref(0, 88)), $mul.ref(48, 1)), usbhid_request);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_hid_driver, $mul.ref(0, 88)), $mul.ref(56, 1)), usbhid_wait_io);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_hid_driver, $mul.ref(0, 88)), $mul.ref(64, 1)), usbhid_raw_request);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_hid_driver, $mul.ref(0, 88)), $mul.ref(72, 1)), usbhid_output_report);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(usb_hid_driver, $mul.ref(0, 88)), $mul.ref(80, 1)), usbhid_idle);
    $M.110 := $store.i16($M.110, hid_usb_ids, 128);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(2, 1)), 0);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(13, 1)), 3);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.110 := $store.i64($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(2, 1)), 0);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.110 := $store.i64($M.110, $add.ref($add.ref($add.ref(hid_usb_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.111 := $store.ref($M.111, hid_driver, .str.7);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), usbhid_probe);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), usbhid_disconnect);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), hid_suspend);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), hid_resume);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), hid_reset_resume);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), hid_pre_reset);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), hid_post_reset);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), hid_usb_ids);
    $M.111 := $store.i32($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.111 := $store.i32($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.111 := $store.i32($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.111 := $store.i32($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.111 := $store.i64($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.111 := $store.i32($M.111, $add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(36, 1)), 0);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.111 := $store.i32($M.111, $add.ref($add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(hid_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 2);
    $M.0 := $store.i32($M.0, hid_open_mut, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hid_open_mut, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(hid_open_mut, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(hid_open_mut, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(hid_open_mut, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hid_open_mut, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hid_open_mut, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hid_open_mut, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hid_open_mut, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.18);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hid_open_mut, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hid_open_mut, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(hid_open_mut, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(hid_open_mut, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(hid_open_mut, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(hid_open_mut, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hid_open_mut, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(hid_open_mut, $mul.ref(0, 160)), $mul.ref(104, 1)), hid_open_mut);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(hid_open_mut, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(hid_open_mut, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(hid_open_mut, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(hid_open_mut, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.19);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(hid_open_mut, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(hid_open_mut, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.68 := 0;
    call {:si_unique_call 2129} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.112 := $store.i16($M.112, __mod_usb__hid_usb_ids_device_table, 0);
    $M.113 := $store.i16($M.113, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(2, 1)), 0);
    $M.114 := $store.i16($M.114, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.115 := $store.i16($M.115, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.120 := $store.i8($M.120, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.121 := $store.i8($M.121, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.122 := $store.i8($M.122, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.124 := $store.i64($M.124, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.112 := $store.i16($M.112, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.113 := $store.i16($M.113, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(2, 1)), 0);
    $M.114 := $store.i16($M.114, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.115 := $store.i16($M.115, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.120 := $store.i8($M.120, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.121 := $store.i8($M.121, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.122 := $store.i8($M.122, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.123 := $store.i8($M.123, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.124 := $store.i64($M.124, $add.ref($add.ref($add.ref(__mod_usb__hid_usb_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.66 := $0.ref;
    $M.67 := $0.ref;
    $M.0 := $store.i8($M.0, .str.18, 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 23)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 23)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 23)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 23)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 23)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 23)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 23)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 23)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 23)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 23)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 23)), $mul.ref(12, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 23)), $mul.ref(13, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 23)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 23)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 23)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 23)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 23)), $mul.ref(19, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 23)), $mul.ref(20, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 23)), $mul.ref(21, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.19, 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 13)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 13)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 13)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 13)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 13)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 13)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 13)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 13)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 13)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 13)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.47, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.127 := $store.i8($M.127, .str.48, 72);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(1, 1)), 73);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(2, 1)), 68);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(3, 1)), 32);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(4, 1)), 37);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(5, 1)), 48);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(6, 1)), 52);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(7, 1)), 120);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(8, 1)), 58);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(9, 1)), 37);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(10, 1)), 48);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(11, 1)), 52);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(12, 1)), 120);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.49, 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 7)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 7)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 7)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.128 := $store.i8($M.128, .str.50, 37);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(.str.50, $mul.ref(0, 3)), $mul.ref(1, 1)), 100);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(.str.50, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.129 := $store.i8($M.129, .str.56, 117);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.56, $mul.ref(0, 10)), $mul.ref(1, 1)), 115);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.56, $mul.ref(0, 10)), $mul.ref(2, 1)), 98);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.56, $mul.ref(0, 10)), $mul.ref(3, 1)), 45);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.56, $mul.ref(0, 10)), $mul.ref(4, 1)), 37);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.56, $mul.ref(0, 10)), $mul.ref(5, 1)), 115);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.56, $mul.ref(0, 10)), $mul.ref(6, 1)), 45);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.56, $mul.ref(0, 10)), $mul.ref(7, 1)), 37);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.56, $mul.ref(0, 10)), $mul.ref(8, 1)), 115);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(.str.56, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.130 := $store.i8($M.130, .str.1, 48);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(1, 1)), 120);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(2, 1)), 37);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(3, 1)), 104);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(4, 1)), 120);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(5, 1)), 58);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(6, 1)), 48);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(7, 1)), 120);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(8, 1)), 37);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(9, 1)), 104);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(10, 1)), 120);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(11, 1)), 58);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(12, 1)), 48);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(13, 1)), 120);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(14, 1)), 37);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(15, 1)), 120);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    call {:si_unique_call 2130} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 640095);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr, $M.37, $M.11, $M.13, $M.15, $M.17, $M.10, $M.12, $M.14, $M.16, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.27, $M.18, $M.20, $M.22, $M.24, $M.19, $M.21, $M.23, $M.25, $M.42, assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i12 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i12 == 1);
    $i11 := $eq.ref(usbhid_power, $p0);
    assume {:branchcond $i11} true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i11 == 1);
    $i10 := $eq.ref(pidff_erase_effect, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i10 == 1);
    $i9 := $eq.ref(hiddev_connect, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i9 == 1);
    $i8 := $eq.ref(hid_suspend, $p0);
    assume {:branchcond $i8} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume false;
    return;

  $bb2:
    assume $i8 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2131} $i2 := hid_suspend($p1, arg1);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    $r := $i2;
    return;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i9 == 1;
    call {:si_unique_call 2132} $i3 := hiddev_connect(arg, arg1);
    $r := $i3;
    return;

  $bb4:
    assume $i10 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2133} $i5 := pidff_erase_effect($p4, arg1);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    $r := $i5;
    return;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i11 == 1;
    call {:si_unique_call 2134} $i6 := usbhid_power(arg, arg1);
    $r := $i6;
    return;

  $bb6:
    assume $i12 == 1;
    call {:si_unique_call 2135} $i7 := __builtinx_object_size();
    $r := $i7;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 641127);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $M.37, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.27, $CurrAddr, $M.42, assertsPassed, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.24;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i24 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i24} true;
    goto $bb11, $bb21;

  $bb21:
    assume !($i24 == 1);
    $i23 := $eq.ref(usbhid_parse, $p0);
    assume true;
    goto $bb10, $bb20;

  $bb20:
    assume !($i23 == 1);
    $i22 := $eq.ref(usbhid_open, $p0);
    assume true;
    goto $bb9, $bb19;

  $bb19:
    assume !($i22 == 1);
    $i21 := $eq.ref(usbhid_start, $p0);
    assume true;
    goto $bb8, $bb18;

  $bb18:
    assume !($i21 == 1);
    $i20 := $eq.ref(hid_pidff_init, $p0);
    assume true;
    goto $bb7, $bb17;

  $bb17:
    assume !($i20 == 1);
    $i19 := $eq.ref(usbhid_wait_io, $p0);
    assume {:branchcond $i19} true;
    goto $bb6, $bb16;

  $bb16:
    assume !($i19 == 1);
    $i18 := $eq.ref(hid_post_reset, $p0);
    assume {:branchcond $i18} true;
    goto $bb5, $bb15;

  $bb15:
    assume !($i18 == 1);
    $i17 := $eq.ref(hid_pre_reset, $p0);
    assume true;
    goto $bb4, $bb14;

  $bb14:
    assume !($i17 == 1);
    $i16 := $eq.ref(hid_reset_resume, $p0);
    assume {:branchcond $i16} true;
    goto $bb3, $bb13;

  $bb13:
    assume !($i16 == 1);
    $i15 := $eq.ref(hid_resume, $p0);
    assume {:branchcond $i15} true;
    goto $bb2, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume false;
    return;

  $bb2:
    assume $i15 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2136} $i2 := hid_resume($p1);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    $r := $i2;
    return;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i16 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2137} $i4 := hid_reset_resume($p3);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    $r := $i4;
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i17 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2138} $i6 := hid_pre_reset($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i18 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2139} $i8 := hid_post_reset($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i19 == 1;
    call {:si_unique_call 2140} $i9 := usbhid_wait_io(arg);
    $r := $i9;
    return;

  $bb7:
    assume $i20 == 1;
    call {:si_unique_call 2141} $i10 := hid_pidff_init(arg);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    $r := $i10;
    return;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i21 == 1;
    call {:si_unique_call 2142} $i11 := usbhid_start(arg);
    $r := $i11;
    return;

  $bb9:
    assume $i22 == 1;
    call {:si_unique_call 2143} $i12 := usbhid_open(arg);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    $r := $i12;
    return;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i23 == 1;
    call {:si_unique_call 2144} $i13 := usbhid_parse(arg);
    $r := $i13;
    return;

  $bb11:
    assume $i24 == 1;
    call {:si_unique_call 2145} $i14 := __builtinx_object_size();
    $r := $i14;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 642159);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 643191);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 644223);

procedure devirtbounce.4(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2146} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 645255);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 646287);

procedure devirtbounce.6(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2147} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 647319);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 648351);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 649383);

procedure devirtbounce.9(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 650415);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2148} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.48, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.76, $M.46, $M.71, $M.70, $M.69, $M.27, $M.26, $M.35, $M.36, $M.28, $M.109, $M.0, $M.72, $M.38, $M.2, $M.110, $M.111, $M.68, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.66, $M.67, $M.127, $M.128, $M.129, $M.130, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2149} __SMACK_static_init();
    call {:si_unique_call 2150} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.47, $M.51, $M.52, $M.53, $M.11, $M.13, $M.15, $M.17, $M.54, $M.18, $M.20, $M.22, $M.24, $M.55, $M.56, $M.57, $M.58, $M.59, $M.0, $M.60, $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.61, $M.63, $M.37, $M.64, $M.65, $M.50, $M.48, $M.19, $M.21, $M.23, $M.25, $M.10, $M.12, $M.14, $M.16, $M.62, $M.76, $M.46, $M.71, $M.70, $M.69, $M.27, $M.26, $M.35, $M.36, $M.28, $M.109, $M.72, $M.38, $M.2, $M.110, $M.111, $M.68, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.66, $M.67, $M.127, $M.128, $M.129, $M.130, $CurrAddr, $M.44, $M.45, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.42;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation usbhid_exists_dquirk_loop_$bb4(in_$i0: i16, in_$i1: i16, in_$p10: ref, in_$i11: i16, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$p16: ref, in_$i17: i16, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p8: ref) returns (out_$p10: ref, out_$i11: i16, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$p16: ref, out_$i17: i16, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p8: ref)
{

  entry:
    out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p8 := in_$p10, in_$i11, in_$i12, in_$i13, in_$i14, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$p21, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_56;

  $bb13:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$p8 := out_$p28;
    goto $bb13_dummy;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, $p2i.ref.i64(dquirks_list));
    goto corral_source_split_84;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_83;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p27, $mul.ref($sub.ref(0, 8), 24)), $mul.ref(8, 1));
    goto corral_source_split_82;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref(out_$p27, $mul.ref($sub.ref(0, 8), 24));
    goto corral_source_split_81;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_80;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_79;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p8, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_78;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i14 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i20 == 1);
    goto $bb8;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    out_$p21 := out_$p8;
    assume true;
    goto $bb10;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i18, out_$i19);
    goto corral_source_split_69;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i16.i32(in_$i1);
    goto corral_source_split_68;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i16.i32(out_$i17);
    goto corral_source_split_67;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i16($M.0, out_$p16);
    goto corral_source_split_66;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(out_$p8, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_65;

  $bb6:
    assume out_$i14 == 1;
    goto corral_source_split_64;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i12, out_$i13);
    goto corral_source_split_62;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i16.i32(in_$i0);
    goto corral_source_split_61;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i16.i32(out_$i11);
    goto corral_source_split_60;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i16($M.0, out_$p10);
    goto corral_source_split_59;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref(out_$p8, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_58;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p8 := usbhid_exists_dquirk_loop_$bb4(in_$i0, in_$i1, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p8);
    return;

  exit:
    return;
}



procedure usbhid_exists_dquirk_loop_$bb4(in_$i0: i16, in_$i1: i16, in_$p10: ref, in_$i11: i16, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$p16: ref, in_$i17: i16, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p8: ref) returns (out_$p10: ref, out_$i11: i16, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$p16: ref, out_$i17: i16, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p8: ref);



implementation usbhid_exists_squirk_loop_$bb1(in_$i0: i16, in_$i1: i16, in_$i4: i64, in_$p6: ref, in_$i7: i16, in_$i8: i32, in_$i9: i32, in_$i10: i1, in_$i11: i64, in_$p13: ref, in_$i14: i16, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i64, in_$p24: ref, in_$i25: i16, in_$i26: i32, in_$i27: i1, in_$i2: i32, in_$p3: ref, in_$p28: ref) returns (out_$i4: i64, out_$p6: ref, out_$i7: i16, out_$i8: i32, out_$i9: i32, out_$i10: i1, out_$i11: i64, out_$p13: ref, out_$i14: i16, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i64, out_$p24: ref, out_$i25: i16, out_$i26: i32, out_$i27: i1, out_$i2: i32, out_$p3: ref, out_$p28: ref)
{

  entry:
    out_$i4, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$i2, out_$p3, out_$p28 := in_$i4, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$p13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p24, in_$i25, in_$i26, in_$i27, in_$i2, in_$p3, in_$p28;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_105;

  $bb9:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i2, out_$p3 := out_$i21, out_$p20;
    goto $bb9_dummy;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    out_$p28 := out_$p20;
    assume true;
    goto $bb9;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_131;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i16.i32(out_$i25);
    goto corral_source_split_130;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i16($M.0, out_$p24);
    goto corral_source_split_129;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(out_$i22, 8)), $mul.ref(0, 1));
    goto corral_source_split_128;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i21);
    goto corral_source_split_127;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i2, 1);
    call {:si_unique_call 12} {:cexpr "n"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_126;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_125;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p20 := out_$p3;
    goto $bb8;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    out_$p20 := out_$p19;
    goto $bb8;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i2);
    out_$p19 := $add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(out_$i18, 8));
    goto corral_source_split_123;

  $bb6:
    assume out_$i17 == 1;
    goto corral_source_split_122;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i15, out_$i16);
    goto corral_source_split_120;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i16.i32(in_$i1);
    goto corral_source_split_119;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i16.i32(out_$i14);
    goto corral_source_split_118;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i16($M.0, out_$p13);
    goto corral_source_split_117;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(out_$i11, 8)), $mul.ref(2, 1));
    goto corral_source_split_116;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i2);
    goto corral_source_split_115;

  $bb3:
    assume out_$i10 == 1;
    goto corral_source_split_114;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i8, out_$i9);
    goto corral_source_split_112;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    out_$i9 := $zext.i16.i32(in_$i0);
    goto corral_source_split_111;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    out_$i8 := $zext.i16.i32(out_$i7);
    goto corral_source_split_110;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i16($M.0, out_$p6);
    goto corral_source_split_109;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref($add.ref(hid_blacklist, $mul.ref(0, 880)), $mul.ref(out_$i4, 8)), $mul.ref(0, 1));
    goto corral_source_split_108;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i4 := $sext.i32.i64(out_$i2);
    goto corral_source_split_107;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume !(out_$i10 == 1);
    goto $bb5;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i17 == 1);
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i4, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$i2, out_$p3, out_$p28 := usbhid_exists_squirk_loop_$bb1(in_$i0, in_$i1, out_$i4, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$i2, out_$p3, out_$p28);
    return;

  exit:
    return;
}



procedure usbhid_exists_squirk_loop_$bb1(in_$i0: i16, in_$i1: i16, in_$i4: i64, in_$p6: ref, in_$i7: i16, in_$i8: i32, in_$i9: i32, in_$i10: i1, in_$i11: i64, in_$p13: ref, in_$i14: i16, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i64, in_$p24: ref, in_$i25: i16, in_$i26: i32, in_$i27: i1, in_$i2: i32, in_$p3: ref, in_$p28: ref) returns (out_$i4: i64, out_$p6: ref, out_$i7: i16, out_$i8: i32, out_$i9: i32, out_$i10: i1, out_$i11: i64, out_$p13: ref, out_$i14: i16, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i64, out_$p24: ref, out_$i25: i16, out_$i26: i32, out_$i27: i1, out_$i2: i32, out_$p3: ref, out_$p28: ref);



implementation usbhid_probe_loop_$bb7(in_$p7: ref, in_$p19: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i8, in_$i37: i32, in_$i38: i1, in_$i24: i32, in_$i25: i32, in_$i39: i32) returns (out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i8, out_$i37: i32, out_$i38: i1, out_$i24: i32, out_$i25: i32, out_$i39: i32)
{

  entry:
    out_$p26, out_$p27, out_$i28, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i24, out_$i25, out_$i39 := in_$p26, in_$p27, in_$i28, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i24, in_$i25, in_$i39;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_209;

  $bb12:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i24, out_$i25 := out_$i34, out_$i35;
    goto $bb12_dummy;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i34;
    assume true;
    goto $bb12;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    out_$i38 := $ugt.i32(out_$i37, out_$i35);
    goto corral_source_split_226;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i8.i32(out_$i36);
    goto corral_source_split_225;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i8($M.0, in_$p19);
    goto corral_source_split_224;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i25, 1);
    call {:si_unique_call 42} {:cexpr "n"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_223;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_222;

  $bb10:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i34 := out_$i24;
    goto $bb11;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i33;
    goto $bb11;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i24, 1);
    call {:si_unique_call 41} {:cexpr "has_in"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_220;

  $bb9:
    assume out_$i32 == 1;
    goto corral_source_split_219;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, 0);
    goto corral_source_split_217;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} out_$i31 := usb_endpoint_is_int_in(out_$p30);
    call {:si_unique_call 40} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_216;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p27, $mul.ref(out_$i28, 72)), $mul.ref(0, 1));
    goto corral_source_split_215;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    goto corral_source_split_214;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i32.i64(out_$i25);
    goto corral_source_split_213;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_212;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_211;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p26, out_$p27, out_$i28, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i24, out_$i25, out_$i39 := usbhid_probe_loop_$bb7(in_$p7, in_$p19, out_$p26, out_$p27, out_$i28, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i24, out_$i25, out_$i39);
    return;

  exit:
    return;
}



procedure usbhid_probe_loop_$bb7(in_$p7: ref, in_$p19: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i8, in_$i37: i32, in_$i38: i1, in_$i24: i32, in_$i25: i32, in_$i39: i32) returns (out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i8, out_$i37: i32, out_$i38: i1, out_$i24: i32, out_$i25: i32, out_$i39: i32);



implementation hid_get_class_descriptor_loop_$bb1(in_$p0: ref, in_$i1: i32, in_$i2: i8, in_$p3: ref, in_$i4: i32, in_$i6: i32, in_$i7: i32, in_$i8: i32, in_$i9: i16, in_$i10: i32, in_$i11: i32, in_$i12: i16, in_$i13: i16, in_$i14: i32, in_$i15: i16, in_$i16: i16, in_$i17: i32, in_$i18: i16, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i32) returns (out_$i6: i32, out_$i7: i32, out_$i8: i32, out_$i9: i16, out_$i10: i32, out_$i11: i32, out_$i12: i16, out_$i13: i16, out_$i14: i32, out_$i15: i16, out_$i16: i16, out_$i17: i32, out_$i18: i16, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i32)
{

  entry:
    out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24 := in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_874;

  $bb2:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i20;
    goto $bb2_dummy;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i19;
    assume true;
    goto $bb2;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    out_$i23 := $and.i1(out_$i21, out_$i22);
    goto corral_source_split_891;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i20, 0);
    goto corral_source_split_890;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i19, in_$i4);
    goto corral_source_split_889;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    out_$i20 := $sub.i32(out_$i6, 1);
    call {:si_unique_call 189} {:cexpr "retries"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_888;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} out_$i19 := usb_control_msg(in_$p0, out_$i8, 6, $sub.i8(0, 127), out_$i12, out_$i15, in_$p3, out_$i18, 5000);
    call {:si_unique_call 188} {:cexpr "result"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_887;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    out_$i18 := $trunc.i32.i16(out_$i17);
    goto corral_source_split_886;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i16.i32(out_$i16);
    goto corral_source_split_885;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    out_$i16 := $trunc.i32.i16(in_$i4);
    goto corral_source_split_884;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    out_$i15 := $trunc.i32.i16(out_$i14);
    goto corral_source_split_883;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i16.i32(out_$i13);
    goto corral_source_split_882;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    out_$i13 := $trunc.i32.i16(in_$i1);
    goto corral_source_split_881;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    out_$i12 := $trunc.i32.i16(out_$i11);
    goto corral_source_split_880;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    out_$i11 := $shl.i32(out_$i10, 8);
    goto corral_source_split_879;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i16.i32(out_$i9);
    goto corral_source_split_878;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    out_$i9 := $zext.i8.i16(in_$i2);
    goto corral_source_split_877;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    out_$i8 := $or.i32(out_$i7, $sub.i32(0, 2147483520));
    goto corral_source_split_876;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} out_$i7 := __create_pipe(in_$p0, 0);
    call {:si_unique_call 186} {:cexpr "tmp"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_875;

  $bb2_dummy:
    call {:si_unique_call 1} out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24 := hid_get_class_descriptor_loop_$bb1(in_$p0, in_$i1, in_$i2, in_$p3, in_$i4, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24);
    return;

  exit:
    return;
}



procedure hid_get_class_descriptor_loop_$bb1(in_$p0: ref, in_$i1: i32, in_$i2: i8, in_$p3: ref, in_$i4: i32, in_$i6: i32, in_$i7: i32, in_$i8: i32, in_$i9: i16, in_$i10: i32, in_$i11: i32, in_$i12: i16, in_$i13: i16, in_$i14: i32, in_$i15: i16, in_$i16: i16, in_$i17: i32, in_$i18: i16, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i32) returns (out_$i6: i32, out_$i7: i32, out_$i8: i32, out_$i9: i16, out_$i10: i32, out_$i11: i32, out_$i12: i16, out_$i13: i16, out_$i14: i32, out_$i15: i16, out_$i16: i16, out_$i17: i32, out_$i18: i16, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i32);



implementation usbhid_wait_io_loop_$bb18(in_$p1: ref, in_$p4: ref, in_$i25: i64, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i37: i8, in_$i38: i1, in_$i39: i1, in_$i40: i64, in_$i41: i1, in_$i43: i1, in_$i42: i1, in_$i44: i32, in_$i45: i1, in_$i46: i64, in_$i47: i64) returns (out_$i25: i64, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i37: i8, out_$i38: i1, out_$i39: i1, out_$i40: i64, out_$i41: i1, out_$i43: i1, out_$i42: i1, out_$i44: i32, out_$i45: i1, out_$i46: i64, out_$i47: i64)
{

  entry:
    out_$i25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i43, out_$i42, out_$i44, out_$i45, out_$i46, out_$i47 := in_$i25, in_$p26, in_$i27, in_$p28, in_$i29, in_$i30, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i43, in_$i42, in_$i44, in_$i45, in_$i46, in_$i47;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_2128;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i47;
    goto corral_source_split_2169_dummy;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} out_$i47 := schedule_timeout(out_$i40);
    call {:si_unique_call 456} {:cexpr "__ret___0"} boogie_si_record_i64(out_$i47);
    goto corral_source_split_2169;

  $bb35:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i40;
    assume true;
    goto $bb35;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i44, 0);
    goto corral_source_split_2159;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i1.i32(out_$i42);
    goto corral_source_split_2158;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_2157;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i43;
    goto $bb32;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i41 == 1;
    goto $bb32;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    out_$i42 := 1;
    assume true;
    goto $bb31, $bb33;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    out_$i41 := $trunc.i8.i1(out_$i37);
    goto corral_source_split_2155;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_2154;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i25;
    goto $bb30;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    out_$i40 := 1;
    goto $bb30;

  $bb28:
    assume out_$i39 == 1;
    goto corral_source_split_2152;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i64(out_$i25, 0);
    goto corral_source_split_2150;

  $bb25:
    assume out_$i38 == 1;
    goto corral_source_split_2149;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i8.i1(out_$i37);
    goto corral_source_split_2147;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i1.i8(out_$i36);
    call {:si_unique_call 453} {:cexpr "__cond"} boogie_si_record_i8(out_$i37);
    goto corral_source_split_2146;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_2145;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2144;

  $bb20:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    out_$i35 := 0;
    goto $bb24;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i34;
    goto $bb24;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_2142;

  $bb22:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    out_$i34 := 0;
    goto $bb23;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    out_$i34 := 1;
    goto $bb23;

  $bb21:
    assume out_$i33 == 1;
    goto corral_source_split_2140;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i32, 0);
    goto corral_source_split_2138;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} out_$i32 := constant_test_bit(2, out_$p31);
    call {:si_unique_call 452} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_2137;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p4, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_2136;

  $bb19:
    assume out_$i30 == 1;
    goto corral_source_split_2135;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 0);
    goto corral_source_split_2133;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} out_$i29 := constant_test_bit(1, out_$p28);
    call {:si_unique_call 450} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_2132;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p4, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_2131;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} out_$i27 := prepare_to_wait_event(out_$p26, in_$p1, 2);
    call {:si_unique_call 448} {:cexpr "tmp"} boogie_si_record_i64(out_$i27);
    goto corral_source_split_2130;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p4, $mul.ref(0, 10768)), $mul.ref(10680, 1));
    goto corral_source_split_2129;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb27;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i39 == 1);
    goto $bb27;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i64(out_$i40, 0);
    goto corral_source_split_2162;

  $bb33:
    assume !(out_$i41 == 1);
    goto corral_source_split_2161;

  corral_source_split_2169_dummy:
    call {:si_unique_call 1} out_$i25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i43, out_$i42, out_$i44, out_$i45, out_$i46, out_$i47 := usbhid_wait_io_loop_$bb18(in_$p1, in_$p4, out_$i25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i43, out_$i42, out_$i44, out_$i45, out_$i46, out_$i47);
    return;

  exit:
    return;
}



procedure usbhid_wait_io_loop_$bb18(in_$p1: ref, in_$p4: ref, in_$i25: i64, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i37: i8, in_$i38: i1, in_$i39: i1, in_$i40: i64, in_$i41: i1, in_$i43: i1, in_$i42: i1, in_$i44: i32, in_$i45: i1, in_$i46: i64, in_$i47: i64) returns (out_$i25: i64, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i37: i8, out_$i38: i1, out_$i39: i1, out_$i40: i64, out_$i41: i1, out_$i43: i1, out_$i42: i1, out_$i44: i32, out_$i45: i1, out_$i46: i64, out_$i47: i64);



implementation hiddev_connect_loop_$bb6(in_$p0: ref, in_$p9: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i57: i32, in_$i21: i32, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i13: i32, in_$i69: i32) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i57: i32, out_$i21: i32, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i13: i32, out_$i69: i32)
{

  entry:
    out_$p14, out_$p15, out_$i16, out_$p18, out_$i19, out_$i20, out_$p22, out_$p23, out_$i24, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$i38, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p58, out_$p59, out_$i60, out_$p62, out_$i63, out_$i64, out_$i57, out_$i21, out_$i66, out_$i67, out_$i68, out_$i13, out_$i69 := in_$p14, in_$p15, in_$i16, in_$p18, in_$i19, in_$i20, in_$p22, in_$p23, in_$i24, in_$p26, in_$i27, in_$i28, in_$p29, in_$p30, in_$i31, in_$p33, in_$i34, in_$i35, in_$p36, in_$p37, in_$i38, in_$p40, in_$i41, in_$i42, in_$p43, in_$p44, in_$i45, in_$p47, in_$i48, in_$i49, in_$p50, in_$p51, in_$i52, in_$p54, in_$i55, in_$i56, in_$p58, in_$p59, in_$i60, in_$p62, in_$i63, in_$i64, in_$i57, in_$i21, in_$i66, in_$i67, in_$i68, in_$i13, in_$i69;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2618;

  $bb27:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := out_$i66;
    goto $bb27_dummy;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    out_$i69 := out_$i66;
    assume true;
    goto $bb27;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    out_$i68 := $ugt.i32(out_$i67, out_$i66);
    goto corral_source_split_2690;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i32($M.0, in_$p9);
    goto corral_source_split_2689;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i66 := $add.i32(out_$i21, 1);
    call {:si_unique_call 544} {:cexpr "i"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_2688;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb9:
    assume {:verifier.code 0} true;
    assume !(out_$i20 == 1);
    goto $bb10;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i35 == 1);
    goto $bb10;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb10;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i49 == 1);
    goto $bb10;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1);
    goto $bb10;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    out_$i57, out_$i21 := out_$i13, out_$i13;
    assume true;
    goto $bb24;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    out_$i64 := $ugt.i32(out_$i63, 851974);
    goto corral_source_split_2681;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.0, out_$p62);
    goto corral_source_split_2680;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p59, $mul.ref(out_$i60, 12)), $mul.ref(4, 1));
    goto corral_source_split_2679;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    goto corral_source_split_2678;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i32.i64(out_$i13);
    goto corral_source_split_2677;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_2676;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_2675;

  $bb22:
    assume !(out_$i56 == 1);
    goto corral_source_split_2674;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i13;
    assume true;
    goto $bb22;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    out_$i56 := $ule.i32(out_$i55, 851969);
    goto corral_source_split_2670;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.0, out_$p54);
    goto corral_source_split_2669;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p51, $mul.ref(out_$i52, 12)), $mul.ref(4, 1));
    goto corral_source_split_2668;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    goto corral_source_split_2667;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i32.i64(out_$i13);
    goto corral_source_split_2666;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    goto corral_source_split_2665;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_2664;

  $bb18:
    assume out_$i49 == 1;
    goto corral_source_split_2663;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i13;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i32(out_$i48, 786433);
    goto corral_source_split_2661;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, out_$p47);
    goto corral_source_split_2660;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p44, $mul.ref(out_$i45, 12)), $mul.ref(4, 1));
    goto corral_source_split_2659;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    goto corral_source_split_2658;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i32.i64(out_$i13);
    goto corral_source_split_2657;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_2656;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_2655;

  $bb16:
    assume out_$i42 == 1;
    goto corral_source_split_2654;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i13;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 65664);
    goto corral_source_split_2643;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.0, out_$p40);
    goto corral_source_split_2642;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p37, $mul.ref(out_$i38, 12)), $mul.ref(4, 1));
    goto corral_source_split_2641;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    goto corral_source_split_2640;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i32.i64(out_$i13);
    goto corral_source_split_2639;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_2638;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_2637;

  $bb14:
    assume {:verifier.code 0} true;
    assume out_$i35 == 1;
    goto $bb12;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i28 == 1;
    goto $bb12;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    out_$i28 := $ule.i32(out_$i27, 65535);
    goto corral_source_split_2635;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_2634;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p23, $mul.ref(out_$i24, 12)), $mul.ref(4, 1));
    goto corral_source_split_2633;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    goto corral_source_split_2632;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i32.i64(out_$i13);
    goto corral_source_split_2631;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_2630;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_2629;

  $bb8:
    assume out_$i20 == 1;
    goto corral_source_split_2628;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i13;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i19, 1);
    goto corral_source_split_2626;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    goto corral_source_split_2625;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 12)), $mul.ref(0, 1));
    goto corral_source_split_2624;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    goto corral_source_split_2623;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i32.i64(out_$i13);
    goto corral_source_split_2622;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_2621;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_2620;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i13;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    out_$i35 := $ugt.i32(out_$i34, 65544);
    goto corral_source_split_2652;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, out_$p33);
    goto corral_source_split_2651;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p30, $mul.ref(out_$i31, 12)), $mul.ref(4, 1));
    goto corral_source_split_2650;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    goto corral_source_split_2649;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i32.i64(out_$i13);
    goto corral_source_split_2648;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_2647;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_2646;

  $bb13:
    assume !(out_$i28 == 1);
    goto corral_source_split_2645;

  $bb27_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$i16, out_$p18, out_$i19, out_$i20, out_$p22, out_$p23, out_$i24, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$i38, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p58, out_$p59, out_$i60, out_$p62, out_$i63, out_$i64, out_$i57, out_$i21, out_$i66, out_$i67, out_$i68, out_$i13, out_$i69 := hiddev_connect_loop_$bb6(in_$p0, in_$p9, out_$p14, out_$p15, out_$i16, out_$p18, out_$i19, out_$i20, out_$p22, out_$p23, out_$i24, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$i38, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p58, out_$p59, out_$i60, out_$p62, out_$i63, out_$i64, out_$i57, out_$i21, out_$i66, out_$i67, out_$i68, out_$i13, out_$i69);
    return;

  exit:
    return;
}



procedure hiddev_connect_loop_$bb6(in_$p0: ref, in_$p9: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i57: i32, in_$i21: i32, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i13: i32, in_$i69: i32) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i57: i32, out_$i21: i32, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i13: i32, out_$i69: i32);



implementation pidff_find_reports_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$i18: i64, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i24, in_$i39: i24, in_$i40: i24, in_$p41: ref, in_$p42: ref, in_$i43: i8, in_$i44: i64, in_$i45: i64, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$i51: i8, in_$i52: i32, in_$i53: i64, in_$p55: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$i67: i64, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$i75: i64, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$i80: i1, in_$i81: i64, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$i86: i1, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i24, in_$i94: i24, in_$i95: i24, in_$p96: ref, in_$p97: ref, in_$i98: i8, in_$i99: i64, in_$i100: i64, in_$i101: i64, in_$i102: i1, in_$p103: ref, in_$i104: i64, in_$p105: ref, in_$i106: i8, in_$i107: i32, in_$i108: i64, in_$p110: ref, in_$p111: ref, in_$p24: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$i117: i64, in_$i118: i1, in_$p20: ref) returns (out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i24, out_$i39: i24, out_$i40: i24, out_$p41: ref, out_$p42: ref, out_$i43: i8, out_$i44: i64, out_$i45: i64, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$i51: i8, out_$i52: i32, out_$i53: i64, out_$p55: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$i67: i64, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$i75: i64, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$i80: i1, out_$i81: i64, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$i86: i1, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i24, out_$i94: i24, out_$i95: i24, out_$p96: ref, out_$p97: ref, out_$i98: i8, out_$i99: i64, out_$i100: i64, out_$i101: i64, out_$i102: i1, out_$p103: ref, out_$i104: i64, out_$p105: ref, out_$i106: i8, out_$i107: i32, out_$i108: i64, out_$p110: ref, out_$p111: ref, out_$p24: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$i117: i64, out_$i118: i1, out_$p20: ref)
{

  entry:
    out_$p21, out_$i22, out_$i23, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p55, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$i74, out_$i75, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p110, out_$p111, out_$p24, out_$p113, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p20 := in_$p21, in_$i22, in_$i23, in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$i31, in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$i40, in_$p41, in_$p42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$p48, in_$i49, in_$p50, in_$i51, in_$i52, in_$i53, in_$p55, in_$p57, in_$p58, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$p64, in_$p65, in_$i66, in_$i67, in_$p69, in_$i70, in_$i71, in_$p72, in_$p73, in_$i74, in_$i75, in_$p77, in_$i78, in_$i79, in_$i80, in_$i81, in_$p83, in_$p84, in_$i85, in_$i86, in_$p87, in_$p88, in_$p89, in_$p90, in_$p91, in_$p92, in_$i93, in_$i94, in_$i95, in_$p96, in_$p97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$p103, in_$i104, in_$p105, in_$i106, in_$i107, in_$i108, in_$p110, in_$p111, in_$p24, in_$p113, in_$p114, in_$p115, in_$p116, in_$i117, in_$i118, in_$p20;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3090;

  $bb31:
    assume out_$i118 == 1;
    assume {:verifier.code 0} true;
    out_$p20 := out_$p114;
    goto $bb31_dummy;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i64(out_$i117, in_$i18);
    goto corral_source_split_3104;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    out_$i117 := $p2i.ref.i64(out_$p116);
    goto corral_source_split_3103;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(out_$p115, $mul.ref(0, 2088)), $mul.ref(0, 1));
    goto corral_source_split_3102;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    out_$p115 := $bitcast.ref.ref(out_$p114);
    goto corral_source_split_3101;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    out_$p114 := $load.ref($M.0, out_$p113);
    goto corral_source_split_3100;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref($add.ref(out_$p24, $mul.ref(0, 2088)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3099;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3098;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    out_$p24 := out_$p111;
    goto $bb8;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p24 := out_$p20;
    goto $bb8;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    out_$p24 := out_$p20;
    goto $bb8;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    out_$p24 := out_$p20;
    goto $bb8;

  $bb6:
    assume out_$i23 == 1;
    goto corral_source_split_3096;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i22, 0);
    goto corral_source_split_3094;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.0, out_$p21);
    goto corral_source_split_3093;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 2088)), $mul.ref(2072, 1));
    goto corral_source_split_3092;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p55, out_$p20);
    goto corral_source_split_3147;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(out_$i53, 8));
    goto corral_source_split_3146;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i53 := $sext.i32.i64(out_$i30);
    goto corral_source_split_3145;

  $bb13:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} __dynamic_dev_dbg.ref.ref.ref.i32(in_$p3, out_$p48, .str.87, out_$i52);
    goto corral_source_split_3143;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i8.i32(out_$i51);
    goto corral_source_split_3142;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i8($M.28, out_$p50);
    goto corral_source_split_3141;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(pidff_reports, $mul.ref(0, 13)), $mul.ref(out_$i49, 1));
    goto corral_source_split_3140;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(out_$i30);
    goto corral_source_split_3139;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3138;

  $bb12:
    assume out_$i47 == 1;
    goto corral_source_split_3137;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, 0);
    goto corral_source_split_3135;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} out_$i46 := ldv__builtin_expect(out_$i45, 0);
    call {:si_unique_call 640} {:cexpr "tmp"} boogie_si_record_i64(out_$i46);
    goto corral_source_split_3134;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    out_$i45 := $and.i64(out_$i44, 1);
    goto corral_source_split_3133;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i8.i64(out_$i43);
    goto corral_source_split_3132;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i8($M.8, out_$p42);
    goto corral_source_split_3131;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3130;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p41, 0);
    goto corral_source_split_3129;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3128;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, out_$p37, out_$i40);
    goto corral_source_split_3127;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    out_$i40 := $or.i24(out_$i39, 837);
    goto corral_source_split_3126;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    out_$i39 := $and.i24(out_$i38, $sub.i24(0, 262144));
    goto corral_source_split_3125;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i24($M.7, out_$p37);
    goto corral_source_split_3124;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_3123;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3122;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p35, .str.87);
    goto corral_source_split_3121;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3120;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p34, .str.9);
    goto corral_source_split_3119;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3118;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p33, .str.86);
    goto corral_source_split_3117;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3116;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p32, .str.7);
    goto corral_source_split_3115;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3114;

  $bb10:
    assume out_$i31 == 1;
    goto corral_source_split_3113;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, $sub.i32(0, 1));
    goto corral_source_split_3111;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} out_$i30 := pidff_check_usage(out_$i29);
    call {:si_unique_call 638} {:cexpr "ret"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_3110;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, out_$p28);
    goto corral_source_split_3109;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p27, $mul.ref(0, 112)), $mul.ref(4, 1));
    goto corral_source_split_3108;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_3107;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(out_$p20, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref(0, 8));
    goto corral_source_split_3106;

  $bb7:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb19:
    assume {:verifier.code 0} true;
    assume out_$i71 == 1;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i63 == 1;
    goto $bb17;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    out_$i63 := $sle.i32(out_$i62, 0);
    goto corral_source_split_3155;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.0, out_$p61);
    call {:si_unique_call 642} {:cexpr "i"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_3154;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p60, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_3153;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_3152;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p58, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_3151;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_3150;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref($add.ref(out_$p20, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref(0, 8));
    goto corral_source_split_3149;

  $bb11:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i32(out_$i70, 2);
    goto corral_source_split_3165;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.0, out_$p69);
    goto corral_source_split_3164;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p65, $mul.ref(out_$i67, 12)), $mul.ref(0, 1));
    goto corral_source_split_3163;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    goto corral_source_split_3162;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i64(out_$i66, $sub.i64(0, 1));
    goto corral_source_split_3161;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(out_$i62);
    goto corral_source_split_3160;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p64);
    goto corral_source_split_3159;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_3158;

  $bb18:
    assume !(out_$i63 == 1);
    goto corral_source_split_3157;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_3220;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p111 := out_$p20;
    goto $bb30;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    out_$p111 := out_$p20;
    goto $bb30;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p110, out_$p20);
    goto corral_source_split_3218;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(out_$i108, 8));
    goto corral_source_split_3217;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i108 := $sext.i32.i64(out_$i79);
    goto corral_source_split_3216;

  $bb28:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} __dynamic_dev_dbg.ref.ref.ref.i32(in_$p4, out_$p103, .str.88, out_$i107);
    goto corral_source_split_3214;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    out_$i107 := $zext.i8.i32(out_$i106);
    goto corral_source_split_3213;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i8($M.28, out_$p105);
    goto corral_source_split_3212;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(pidff_reports, $mul.ref(0, 13)), $mul.ref(out_$i104, 1));
    goto corral_source_split_3211;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    out_$i104 := $sext.i32.i64(out_$i79);
    goto corral_source_split_3210;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3209;

  $bb27:
    assume out_$i102 == 1;
    goto corral_source_split_3208;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i64(out_$i101, 0);
    goto corral_source_split_3206;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} out_$i101 := ldv__builtin_expect(out_$i100, 0);
    call {:si_unique_call 646} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i101);
    goto corral_source_split_3205;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    out_$i100 := $and.i64(out_$i99, 1);
    goto corral_source_split_3204;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i8.i64(out_$i98);
    goto corral_source_split_3203;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i8($M.8, out_$p97);
    goto corral_source_split_3202;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3201;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p96, 0);
    goto corral_source_split_3200;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3199;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, out_$p92, out_$i95);
    goto corral_source_split_3198;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    out_$i95 := $or.i24(out_$i94, 857);
    goto corral_source_split_3197;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    out_$i94 := $and.i24(out_$i93, $sub.i24(0, 262144));
    goto corral_source_split_3196;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i24($M.7, out_$p92);
    goto corral_source_split_3195;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    out_$p92 := $bitcast.ref.ref(out_$p91);
    goto corral_source_split_3194;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3193;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p90, .str.88);
    goto corral_source_split_3192;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3191;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p89, .str.9);
    goto corral_source_split_3190;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3189;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p88, .str.86);
    goto corral_source_split_3188;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3187;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p87, .str.7);
    goto corral_source_split_3186;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3185;

  $bb25:
    assume out_$i86 == 1;
    goto corral_source_split_3184;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i64(out_$i85, 0);
    goto corral_source_split_3182;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    out_$i85 := $p2i.ref.i64(out_$p84);
    goto corral_source_split_3181;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.0, out_$p83);
    goto corral_source_split_3180;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(out_$i81, 8));
    goto corral_source_split_3179;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    out_$i81 := $sext.i32.i64(out_$i79);
    goto corral_source_split_3178;

  $bb22:
    assume out_$i80 == 1;
    goto corral_source_split_3177;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i79, $sub.i32(0, 1));
    goto corral_source_split_3175;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} out_$i79 := pidff_check_usage(out_$i78);
    call {:si_unique_call 644} {:cexpr "ret"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_3174;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.0, out_$p77);
    goto corral_source_split_3173;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p73, $mul.ref(out_$i75, 12)), $mul.ref(4, 1));
    goto corral_source_split_3172;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    goto corral_source_split_3171;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i64(out_$i74, $sub.i64(0, 1));
    goto corral_source_split_3170;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    out_$i74 := $sext.i32.i64(out_$i62);
    goto corral_source_split_3169;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.0, out_$p72);
    goto corral_source_split_3168;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_3167;

  $bb20:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i80 == 1);
    goto $bb24;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i86 == 1);
    goto $bb24;

  $bb31_dummy:
    call {:si_unique_call 1} out_$p21, out_$i22, out_$i23, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p55, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$i74, out_$i75, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p110, out_$p111, out_$p24, out_$p113, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p20 := pidff_find_reports_loop_$bb4(in_$p0, in_$p2, in_$p3, in_$p4, in_$i18, out_$p21, out_$i22, out_$i23, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p55, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$i74, out_$i75, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p110, out_$p111, out_$p24, out_$p113, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p20);
    return;

  exit:
    return;
}



procedure pidff_find_reports_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$i18: i64, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i24, in_$i39: i24, in_$i40: i24, in_$p41: ref, in_$p42: ref, in_$i43: i8, in_$i44: i64, in_$i45: i64, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$i51: i8, in_$i52: i32, in_$i53: i64, in_$p55: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$i67: i64, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$i75: i64, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$i80: i1, in_$i81: i64, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$i86: i1, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i24, in_$i94: i24, in_$i95: i24, in_$p96: ref, in_$p97: ref, in_$i98: i8, in_$i99: i64, in_$i100: i64, in_$i101: i64, in_$i102: i1, in_$p103: ref, in_$i104: i64, in_$p105: ref, in_$i106: i8, in_$i107: i32, in_$i108: i64, in_$p110: ref, in_$p111: ref, in_$p24: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$i117: i64, in_$i118: i1, in_$p20: ref) returns (out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i24, out_$i39: i24, out_$i40: i24, out_$p41: ref, out_$p42: ref, out_$i43: i8, out_$i44: i64, out_$i45: i64, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$i51: i8, out_$i52: i32, out_$i53: i64, out_$p55: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$i67: i64, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$i75: i64, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$i80: i1, out_$i81: i64, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$i86: i1, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i24, out_$i94: i24, out_$i95: i24, out_$p96: ref, out_$p97: ref, out_$i98: i8, out_$i99: i64, out_$i100: i64, out_$i101: i64, out_$i102: i1, out_$p103: ref, out_$i104: i64, out_$p105: ref, out_$i106: i8, out_$i107: i32, out_$i108: i64, out_$p110: ref, out_$p111: ref, out_$p24: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$i117: i64, out_$i118: i1, out_$p20: ref);
  modifies $M.0, $M.8, $M.7, $M.6, $M.5, $M.4, $M.3;



implementation pidff_reset_loop_$bb6(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p38: ref, in_$i43: i32, in_$i44: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i24, in_$i60: i24, in_$i61: i24, in_$p62: ref, in_$p63: ref, in_$i64: i8, in_$i65: i64, in_$i66: i64, in_$i67: i64, in_$i68: i1, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$i42: i32) returns (out_$i43: i32, out_$i44: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i24, out_$i60: i24, out_$i61: i24, out_$p62: ref, out_$p63: ref, out_$i64: i8, out_$i65: i64, out_$i66: i64, out_$i67: i64, out_$i68: i1, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$i42: i32)
{

  entry:
    out_$i43, out_$i44, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$p70, out_$p71, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i42 := in_$i43, in_$i44, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$i59, in_$i60, in_$i61, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$p69, in_$p70, in_$p71, in_$p73, in_$p74, in_$p75, in_$i76, in_$i77, in_$i42;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3598;

  $bb15:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    out_$i42 := out_$i43;
    goto $bb15_dummy;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    out_$i77 := $sle.i32(out_$i76, 1);
    goto corral_source_split_3647;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i32($M.0, out_$p75);
    goto corral_source_split_3646;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.0, in_$p38);
    goto corral_source_split_3645;

  SeqInstr_66:
    goto corral_source_split_3644;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} hid_hw_wait(in_$p3);
    goto SeqInstr_65;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} hid_hw_request(in_$p3, out_$p74, 1);
    goto corral_source_split_3643;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_3642;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1112)), $mul.ref(8, 1)), $mul.ref(3, 8));
    goto corral_source_split_3641;

  $bb13:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} __dynamic_dev_dbg.ref.ref.ref(in_$p1, out_$p71, .str.124);
    goto corral_source_split_3639;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p70, $mul.ref(0, 8600)), $mul.ref(6568, 1));
    goto corral_source_split_3638;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.0, out_$p69);
    goto corral_source_split_3637;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1112)), $mul.ref(0, 1));
    goto corral_source_split_3636;

  $bb12:
    assume out_$i68 == 1;
    goto corral_source_split_3635;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i64(out_$i67, 0);
    goto corral_source_split_3633;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} out_$i67 := ldv__builtin_expect(out_$i66, 0);
    call {:si_unique_call 727} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i67);
    goto corral_source_split_3632;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    out_$i66 := $and.i64(out_$i65, 1);
    goto corral_source_split_3631;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i8.i64(out_$i64);
    goto corral_source_split_3630;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i8($M.8, out_$p63);
    goto corral_source_split_3629;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3628;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p62, 0);
    goto corral_source_split_3627;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3626;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, out_$p58, out_$i61);
    goto corral_source_split_3625;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    out_$i61 := $or.i24(out_$i60, 1189);
    goto corral_source_split_3624;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    out_$i60 := $and.i24(out_$i59, $sub.i24(0, 262144));
    goto corral_source_split_3623;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i24($M.7, out_$p58);
    goto corral_source_split_3622;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(out_$p57);
    goto corral_source_split_3621;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3620;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p56, .str.124);
    goto corral_source_split_3619;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3618;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p55, .str.9);
    goto corral_source_split_3617;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3616;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p54, .str.123);
    goto corral_source_split_3615;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3614;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p53, .str.7);
    goto corral_source_split_3613;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3612;

  $bb9:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    out_$i44 := $sgt.i32(out_$i42, 20);
    goto corral_source_split_3601;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i32(out_$i42, 1);
    call {:si_unique_call 724} {:cexpr "i"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_3600;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i43, out_$i44, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$p70, out_$p71, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i42 := pidff_reset_loop_$bb6(in_$p0, in_$p1, in_$p3, in_$p38, out_$i43, out_$i44, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$p70, out_$p71, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i42);
    return;

  exit:
    return;
}



procedure pidff_reset_loop_$bb6(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p38: ref, in_$i43: i32, in_$i44: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i24, in_$i60: i24, in_$i61: i24, in_$p62: ref, in_$p63: ref, in_$i64: i8, in_$i65: i64, in_$i66: i64, in_$i67: i64, in_$i68: i1, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$i42: i32) returns (out_$i43: i32, out_$i44: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i24, out_$i60: i24, out_$i61: i24, out_$p62: ref, out_$p63: ref, out_$i64: i8, out_$i65: i64, out_$i66: i64, out_$i67: i64, out_$i68: i1, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$i42: i32);
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $M.37, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.27, $CurrAddr, $M.42, assertsPassed, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.25, $M.24;



implementation pidff_find_fields_loop_$bb21(in_$p1: ref, in_$p2: ref, in_$p49: ref, in_$i56: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p64: ref, in_$i65: i32, in_$i66: i64, in_$p67: ref, in_$i68: i8, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i109: i32, in_$p110: ref, in_$p111: ref, in_$i112: i32, in_$i113: i1, in_$i55: i32, in_$i15: i32, in_$i9: i32) returns (out_$i56: i64, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p64: ref, out_$i65: i32, out_$i66: i64, out_$p67: ref, out_$i68: i8, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i109: i32, out_$p110: ref, out_$p111: ref, out_$i112: i32, out_$i113: i1, out_$i55: i32)
{

  entry:
    out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i55 := in_$i56, in_$p58, in_$p59, in_$p60, in_$p61, in_$i62, in_$p64, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i109, in_$p110, in_$p111, in_$i112, in_$i113, in_$i55;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_7459;

  $bb30:
    assume out_$i113 == 1;
    assume {:verifier.code 0} true;
    out_$i55 := out_$i109;
    goto $bb30_dummy;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    out_$i113 := $ult.i32(out_$i109, out_$i112);
    goto corral_source_split_7530;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i32($M.0, out_$p111);
    goto corral_source_split_7529;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(out_$p110, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_7528;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    out_$p110 := $load.ref($M.0, in_$p49);
    goto corral_source_split_7527;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i109 := $add.i32(out_$i55, 1);
    call {:si_unique_call 1044} {:cexpr "j"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_7526;

  $bb24:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    out_$i72 := out_$i55;
    assume true;
    goto $bb24;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i65, out_$i70);
    goto corral_source_split_7475;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    out_$i70 := $or.i32(out_$i69, 983040);
    goto corral_source_split_7474;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i8.i32(out_$i68);
    goto corral_source_split_7473;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i8($M.35, out_$p67);
    goto corral_source_split_7472;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref(in_$p1, $mul.ref(out_$i66, 1));
    goto corral_source_split_7471;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(in_$i9);
    goto corral_source_split_7470;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, out_$p64);
    goto corral_source_split_7469;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p61, $mul.ref(out_$i62, 20)), $mul.ref(0, 1));
    goto corral_source_split_7468;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    goto corral_source_split_7467;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i55);
    goto corral_source_split_7466;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_7465;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p59, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_7464;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_7463;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref(out_$i56, 8));
    goto corral_source_split_7462;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(in_$i15);
    goto corral_source_split_7461;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb30_dummy:
    call {:si_unique_call 1} out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i55 := pidff_find_fields_loop_$bb21(in_$p1, in_$p2, in_$p49, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i55, in_$i15, in_$i9);
    return;

  exit:
    return;
}



procedure pidff_find_fields_loop_$bb21(in_$p1: ref, in_$p2: ref, in_$p49: ref, in_$i56: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p64: ref, in_$i65: i32, in_$i66: i64, in_$p67: ref, in_$i68: i8, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i109: i32, in_$p110: ref, in_$p111: ref, in_$i112: i32, in_$i113: i1, in_$i55: i32, in_$i15: i32, in_$i9: i32) returns (out_$i56: i64, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p64: ref, out_$i65: i32, out_$i66: i64, out_$p67: ref, out_$i68: i8, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i109: i32, out_$p110: ref, out_$p111: ref, out_$i112: i32, out_$i113: i1, out_$i55: i32);



implementation pidff_find_fields_loop_$bb9(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p5: ref, in_$p6: ref, in_$p10: ref, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i64, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i24, in_$i36: i24, in_$i37: i24, in_$p38: ref, in_$p39: ref, in_$i40: i8, in_$i41: i64, in_$i42: i64, in_$i43: i64, in_$i44: i1, in_$i47: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i56: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p64: ref, in_$i65: i32, in_$i66: i64, in_$p67: ref, in_$i68: i8, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i24, in_$i80: i24, in_$i81: i24, in_$p82: ref, in_$p83: ref, in_$i84: i8, in_$i85: i64, in_$i86: i64, in_$i87: i64, in_$i88: i1, in_$i89: i64, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$p95: ref, in_$i96: i64, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$p103: ref, in_$i104: i64, in_$p106: ref, in_$i109: i32, in_$p110: ref, in_$p111: ref, in_$i112: i32, in_$i113: i1, in_$i55: i32, in_$i54: i32, in_$i107: i32, in_$i108: i32, in_$i114: i1, in_$i115: i32, in_$i45: i32, in_$i46: i32, in_$i117: i32, in_$i118: i32, in_$i119: i1, in_$i14: i32, in_$i15: i32, in_$i120: i32, in_$i9: i32) returns (out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i64, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i24, out_$i36: i24, out_$i37: i24, out_$p38: ref, out_$p39: ref, out_$i40: i8, out_$i41: i64, out_$i42: i64, out_$i43: i64, out_$i44: i1, out_$i47: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i56: i64, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p64: ref, out_$i65: i32, out_$i66: i64, out_$p67: ref, out_$i68: i8, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i24, out_$i80: i24, out_$i81: i24, out_$p82: ref, out_$p83: ref, out_$i84: i8, out_$i85: i64, out_$i86: i64, out_$i87: i64, out_$i88: i1, out_$i89: i64, out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$p95: ref, out_$i96: i64, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$p103: ref, out_$i104: i64, out_$p106: ref, out_$i109: i32, out_$p110: ref, out_$p111: ref, out_$i112: i32, out_$i113: i1, out_$i55: i32, out_$i54: i32, out_$i107: i32, out_$i108: i32, out_$i114: i1, out_$i115: i32, out_$i45: i32, out_$i46: i32, out_$i117: i32, out_$i118: i32, out_$i119: i1, out_$i14: i32, out_$i15: i32, out_$i120: i32)
{

  entry:
    out_$i16, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p91, out_$p92, out_$i93, out_$p95, out_$i96, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$p103, out_$i104, out_$p106, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i55, out_$i54, out_$i107, out_$i108, out_$i114, out_$i115, out_$i45, out_$i46, out_$i117, out_$i118, out_$i119, out_$i14, out_$i15, out_$i120 := in_$i16, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$p34, in_$i35, in_$i36, in_$i37, in_$p38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i47, in_$p49, in_$p50, in_$p51, in_$i52, in_$i53, in_$i56, in_$p58, in_$p59, in_$p60, in_$p61, in_$i62, in_$p64, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$p73, in_$p74, in_$p75, in_$p76, in_$p77, in_$p78, in_$i79, in_$i80, in_$i81, in_$p82, in_$p83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$p91, in_$p92, in_$i93, in_$p95, in_$i96, in_$p98, in_$p99, in_$p100, in_$p101, in_$i102, in_$p103, in_$i104, in_$p106, in_$i109, in_$p110, in_$p111, in_$i112, in_$i113, in_$i55, in_$i54, in_$i107, in_$i108, in_$i114, in_$i115, in_$i45, in_$i46, in_$i117, in_$i118, in_$i119, in_$i14, in_$i15, in_$i120;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7404;

  $bb37:
    assume out_$i119 == 1;
    assume {:verifier.code 0} true;
    out_$i14, out_$i15 := out_$i46, out_$i117;
    goto $bb37_dummy;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    out_$i120 := out_$i46;
    assume true;
    goto $bb37;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    out_$i119 := $ult.i32(out_$i117, out_$i118);
    goto corral_source_split_7448;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i32($M.0, in_$p10);
    goto corral_source_split_7447;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    out_$i117 := $add.i32(out_$i45, 1);
    call {:si_unique_call 1040} {:cexpr "i"} boogie_si_record_i32(out_$i117);
    goto corral_source_split_7446;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7445;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i45, out_$i46 := out_$i107, out_$i108;
    goto $bb16;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i45, out_$i46 := out_$i15, out_$i14;
    goto $bb16;

  $bb14:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} __dynamic_pr_debug.ref.ref(in_$p5, .str.104);
    goto corral_source_split_7443;

  $bb13:
    assume out_$i44 == 1;
    goto corral_source_split_7442;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i64(out_$i43, 0);
    goto corral_source_split_7440;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} out_$i43 := ldv__builtin_expect(out_$i42, 0);
    call {:si_unique_call 1038} {:cexpr "tmp"} boogie_si_record_i64(out_$i43);
    goto corral_source_split_7439;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i64(out_$i41, 1);
    goto corral_source_split_7438;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i8.i64(out_$i40);
    goto corral_source_split_7437;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i8($M.34, out_$p39);
    goto corral_source_split_7436;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7435;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $M.34 := $store.i8($M.34, out_$p38, 0);
    goto corral_source_split_7434;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7433;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $M.33 := $store.i24($M.33, out_$p34, out_$i37);
    goto corral_source_split_7432;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    out_$i37 := $or.i24(out_$i36, 780);
    goto corral_source_split_7431;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    out_$i36 := $and.i24(out_$i35, $sub.i24(0, 262144));
    goto corral_source_split_7430;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i24($M.33, out_$p34);
    goto corral_source_split_7429;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_7428;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7427;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, out_$p32, .str.103);
    goto corral_source_split_7426;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7425;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $M.31 := $store.ref($M.31, out_$p31, .str.9);
    goto corral_source_split_7424;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7423;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, out_$p30, .str.102);
    goto corral_source_split_7422;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7421;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, out_$p29, .str.7);
    goto corral_source_split_7420;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7419;

  $bb11:
    assume out_$i28 == 1;
    goto corral_source_split_7418;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i21, out_$i27);
    goto corral_source_split_7416;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_7415;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p25, $mul.ref(0, 112)), $mul.ref(40, 1));
    goto corral_source_split_7414;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_7413;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref(out_$i22, 8));
    goto corral_source_split_7412;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i15);
    goto corral_source_split_7411;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_7410;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_7409;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_7408;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref(out_$i16, 8));
    goto corral_source_split_7407;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i15);
    goto corral_source_split_7406;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb34:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    out_$i115 := out_$i108;
    assume true;
    goto $bb34;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    out_$i114 := $ne.i32(out_$i108, 0);
    goto corral_source_split_7524;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7523;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i107, out_$i108 := out_$i54, out_$i14;
    goto $bb28;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    out_$i107, out_$i108 := out_$i15, 1;
    goto $bb28;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p106, out_$p103);
    goto corral_source_split_7521;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(in_$p0, $mul.ref(out_$i104, 16)), $mul.ref(8, 1));
    goto corral_source_split_7520;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    goto corral_source_split_7519;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    out_$i104 := $sext.i32.i64(in_$i9);
    goto corral_source_split_7518;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref(out_$p101, $mul.ref(out_$i102, 4));
    goto corral_source_split_7517;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    out_$i102 := $sext.i32.i64(out_$i72);
    goto corral_source_split_7516;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    out_$p101 := $load.ref($M.0, out_$p100);
    goto corral_source_split_7515;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p99, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_7514;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    out_$p99 := $load.ref($M.0, out_$p98);
    goto corral_source_split_7513;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref(out_$i96, 8));
    goto corral_source_split_7512;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    out_$i96 := $sext.i32.i64(out_$i15);
    goto corral_source_split_7511;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p95, out_$p92);
    goto corral_source_split_7510;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(in_$p0, $mul.ref(out_$i93, 16)), $mul.ref(0, 1));
    goto corral_source_split_7509;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    goto corral_source_split_7508;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    out_$i93 := $sext.i32.i64(in_$i9);
    goto corral_source_split_7507;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.0, out_$p91);
    goto corral_source_split_7506;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref(out_$i89, 8));
    goto corral_source_split_7505;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i89 := $sext.i32.i64(out_$i15);
    goto corral_source_split_7504;

  $bb26:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} __dynamic_pr_debug.ref.ref.i32.i32.i32(in_$p6, .str.106, in_$i9, out_$i15, out_$i72);
    goto corral_source_split_7502;

  $bb25:
    assume out_$i88 == 1;
    goto corral_source_split_7501;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i64(out_$i87, 0);
    goto corral_source_split_7499;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} out_$i87 := ldv__builtin_expect(out_$i86, 0);
    call {:si_unique_call 1042} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i87);
    goto corral_source_split_7498;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    out_$i86 := $and.i64(out_$i85, 1);
    goto corral_source_split_7497;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i8.i64(out_$i84);
    goto corral_source_split_7496;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i8($M.34, out_$p83);
    goto corral_source_split_7495;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7494;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $M.34 := $store.i8($M.34, out_$p82, 0);
    goto corral_source_split_7493;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7492;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $M.33 := $store.i24($M.33, out_$p78, out_$i81);
    goto corral_source_split_7491;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    out_$i81 := $or.i24(out_$i80, 787);
    goto corral_source_split_7490;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    out_$i80 := $and.i24(out_$i79, $sub.i24(0, 262144));
    goto corral_source_split_7489;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i24($M.33, out_$p78);
    goto corral_source_split_7488;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    out_$p78 := $bitcast.ref.ref(out_$p77);
    goto corral_source_split_7487;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7486;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, out_$p76, .str.105);
    goto corral_source_split_7485;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7484;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $M.31 := $store.ref($M.31, out_$p75, .str.9);
    goto corral_source_split_7483;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7482;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, out_$p74, .str.102);
    goto corral_source_split_7481;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7480;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, out_$p73, .str.7);
    goto corral_source_split_7479;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7478;

  $bb23:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7477;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    out_$i72 := out_$i55;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i65, out_$i70);
    goto corral_source_split_7475;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    out_$i70 := $or.i32(out_$i69, 983040);
    goto corral_source_split_7474;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i8.i32(out_$i68);
    goto corral_source_split_7473;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i8($M.35, out_$p67);
    goto corral_source_split_7472;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref(in_$p1, $mul.ref(out_$i66, 1));
    goto corral_source_split_7471;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(in_$i9);
    goto corral_source_split_7470;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, out_$p64);
    goto corral_source_split_7469;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p61, $mul.ref(out_$i62, 20)), $mul.ref(0, 1));
    goto corral_source_split_7468;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    goto corral_source_split_7467;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i55);
    goto corral_source_split_7466;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_7465;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p59, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_7464;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_7463;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref(out_$i56, 8));
    goto corral_source_split_7462;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(out_$i15);
    goto corral_source_split_7461;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb21:
    call out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i55 := pidff_find_fields_loop_$bb21(in_$p1, in_$p2, out_$p49, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i55, out_$i15, in_$i9);
    goto $bb21_last;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7459;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    out_$i55 := 0;
    goto $bb21;

  $bb30:
    assume out_$i113 == 1;
    assume {:verifier.code 0} true;
    out_$i55 := out_$i109;
    assume false;
    return;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    out_$i113 := $ult.i32(out_$i109, out_$i112);
    goto corral_source_split_7530;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i32($M.0, out_$p111);
    goto corral_source_split_7529;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(out_$p110, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_7528;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    out_$p110 := $load.ref($M.0, out_$p49);
    goto corral_source_split_7527;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i109 := $add.i32(out_$i55, 1);
    call {:si_unique_call 1044} {:cexpr "j"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_7526;

  $bb24:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb18:
    assume out_$i53 == 1;
    goto corral_source_split_7457;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i15;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    out_$i53 := $ult.i32(0, out_$i52);
    goto corral_source_split_7455;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.0, out_$p51);
    goto corral_source_split_7454;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p50, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_7453;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_7452;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref(out_$i47, 8));
    goto corral_source_split_7451;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i15);
    goto corral_source_split_7450;

  $bb12:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i53 == 1);
    goto $bb20;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i15;
    goto $bb20;

  $bb31:
    assume !(out_$i113 == 1);
    goto corral_source_split_7532;

  $bb37_dummy:
    call {:si_unique_call 1} out_$i16, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p91, out_$p92, out_$i93, out_$p95, out_$i96, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$p103, out_$i104, out_$p106, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i55, out_$i54, out_$i107, out_$i108, out_$i114, out_$i115, out_$i45, out_$i46, out_$i117, out_$i118, out_$i119, out_$i14, out_$i15, out_$i120 := pidff_find_fields_loop_$bb9(in_$p0, in_$p1, in_$p2, in_$p5, in_$p6, in_$p10, out_$i16, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p91, out_$p92, out_$i93, out_$p95, out_$i96, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$p103, out_$i104, out_$p106, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i55, out_$i54, out_$i107, out_$i108, out_$i114, out_$i115, out_$i45, out_$i46, out_$i117, out_$i118, out_$i119, out_$i14, out_$i15, out_$i120, in_$i9);
    return;

  exit:
    return;
}



procedure pidff_find_fields_loop_$bb9(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p5: ref, in_$p6: ref, in_$p10: ref, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i64, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i24, in_$i36: i24, in_$i37: i24, in_$p38: ref, in_$p39: ref, in_$i40: i8, in_$i41: i64, in_$i42: i64, in_$i43: i64, in_$i44: i1, in_$i47: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i56: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p64: ref, in_$i65: i32, in_$i66: i64, in_$p67: ref, in_$i68: i8, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i24, in_$i80: i24, in_$i81: i24, in_$p82: ref, in_$p83: ref, in_$i84: i8, in_$i85: i64, in_$i86: i64, in_$i87: i64, in_$i88: i1, in_$i89: i64, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$p95: ref, in_$i96: i64, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$p103: ref, in_$i104: i64, in_$p106: ref, in_$i109: i32, in_$p110: ref, in_$p111: ref, in_$i112: i32, in_$i113: i1, in_$i55: i32, in_$i54: i32, in_$i107: i32, in_$i108: i32, in_$i114: i1, in_$i115: i32, in_$i45: i32, in_$i46: i32, in_$i117: i32, in_$i118: i32, in_$i119: i1, in_$i14: i32, in_$i15: i32, in_$i120: i32, in_$i9: i32) returns (out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i64, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i24, out_$i36: i24, out_$i37: i24, out_$p38: ref, out_$p39: ref, out_$i40: i8, out_$i41: i64, out_$i42: i64, out_$i43: i64, out_$i44: i1, out_$i47: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i56: i64, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p64: ref, out_$i65: i32, out_$i66: i64, out_$p67: ref, out_$i68: i8, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i24, out_$i80: i24, out_$i81: i24, out_$p82: ref, out_$p83: ref, out_$i84: i8, out_$i85: i64, out_$i86: i64, out_$i87: i64, out_$i88: i1, out_$i89: i64, out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$p95: ref, out_$i96: i64, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$p103: ref, out_$i104: i64, out_$p106: ref, out_$i109: i32, out_$p110: ref, out_$p111: ref, out_$i112: i32, out_$i113: i1, out_$i55: i32, out_$i54: i32, out_$i107: i32, out_$i108: i32, out_$i114: i1, out_$i115: i32, out_$i45: i32, out_$i46: i32, out_$i117: i32, out_$i118: i32, out_$i119: i1, out_$i14: i32, out_$i15: i32, out_$i120: i32);
  modifies $M.34, $M.33, $M.32, $M.31, $M.30, $M.29, $M.0;



implementation pidff_find_fields_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$i4: i32, in_$p5: ref, in_$p6: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i64, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i24, in_$i36: i24, in_$i37: i24, in_$p38: ref, in_$p39: ref, in_$i40: i8, in_$i41: i64, in_$i42: i64, in_$i43: i64, in_$i44: i1, in_$i47: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i56: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p64: ref, in_$i65: i32, in_$i66: i64, in_$p67: ref, in_$i68: i8, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i24, in_$i80: i24, in_$i81: i24, in_$p82: ref, in_$p83: ref, in_$i84: i8, in_$i85: i64, in_$i86: i64, in_$i87: i64, in_$i88: i1, in_$i89: i64, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$p95: ref, in_$i96: i64, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$p103: ref, in_$i104: i64, in_$p106: ref, in_$i109: i32, in_$p110: ref, in_$p111: ref, in_$i112: i32, in_$i113: i1, in_$i55: i32, in_$i54: i32, in_$i107: i32, in_$i108: i32, in_$i114: i1, in_$i115: i32, in_$i45: i32, in_$i46: i32, in_$i117: i32, in_$i118: i32, in_$i119: i1, in_$i14: i32, in_$i15: i32, in_$i120: i32, in_$i13: i32, in_$i116: i32, in_$i121: i1, in_$i122: i1, in_$i123: i32, in_$i141: i32, in_$i142: i1, in_$i9: i32) returns (out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i64, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i24, out_$i36: i24, out_$i37: i24, out_$p38: ref, out_$p39: ref, out_$i40: i8, out_$i41: i64, out_$i42: i64, out_$i43: i64, out_$i44: i1, out_$i47: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i56: i64, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p64: ref, out_$i65: i32, out_$i66: i64, out_$p67: ref, out_$i68: i8, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i24, out_$i80: i24, out_$i81: i24, out_$p82: ref, out_$p83: ref, out_$i84: i8, out_$i85: i64, out_$i86: i64, out_$i87: i64, out_$i88: i1, out_$i89: i64, out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$p95: ref, out_$i96: i64, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$p103: ref, out_$i104: i64, out_$p106: ref, out_$i109: i32, out_$p110: ref, out_$p111: ref, out_$i112: i32, out_$i113: i1, out_$i55: i32, out_$i54: i32, out_$i107: i32, out_$i108: i32, out_$i114: i1, out_$i115: i32, out_$i45: i32, out_$i46: i32, out_$i117: i32, out_$i118: i32, out_$i119: i1, out_$i14: i32, out_$i15: i32, out_$i120: i32, out_$i13: i32, out_$i116: i32, out_$i121: i1, out_$i122: i1, out_$i123: i32, out_$i141: i32, out_$i142: i1, out_$i9: i32)
{

  entry:
    out_$p10, out_$i11, out_$i12, out_$i16, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p91, out_$p92, out_$i93, out_$p95, out_$i96, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$p103, out_$i104, out_$p106, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i55, out_$i54, out_$i107, out_$i108, out_$i114, out_$i115, out_$i45, out_$i46, out_$i117, out_$i118, out_$i119, out_$i14, out_$i15, out_$i120, out_$i13, out_$i116, out_$i121, out_$i122, out_$i123, out_$i141, out_$i142, out_$i9 := in_$p10, in_$i11, in_$i12, in_$i16, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$p34, in_$i35, in_$i36, in_$i37, in_$p38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i47, in_$p49, in_$p50, in_$p51, in_$i52, in_$i53, in_$i56, in_$p58, in_$p59, in_$p60, in_$p61, in_$i62, in_$p64, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$p73, in_$p74, in_$p75, in_$p76, in_$p77, in_$p78, in_$i79, in_$i80, in_$i81, in_$p82, in_$p83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$p91, in_$p92, in_$i93, in_$p95, in_$i96, in_$p98, in_$p99, in_$p100, in_$p101, in_$i102, in_$p103, in_$i104, in_$p106, in_$i109, in_$p110, in_$p111, in_$i112, in_$i113, in_$i55, in_$i54, in_$i107, in_$i108, in_$i114, in_$i115, in_$i45, in_$i46, in_$i117, in_$i118, in_$i119, in_$i14, in_$i15, in_$i120, in_$i13, in_$i116, in_$i121, in_$i122, in_$i123, in_$i141, in_$i142, in_$i9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7396;

  $bb50:
    assume out_$i142 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i141;
    goto $bb50_dummy;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    out_$i142 := $slt.i32(out_$i141, in_$i3);
    goto corral_source_split_7574;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i141 := $add.i32(out_$i9, 1);
    call {:si_unique_call 1048} {:cexpr "k"} boogie_si_record_i32(out_$i141);
    goto corral_source_split_7573;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb41:
    assume {:verifier.code 0} true;
    assume !(out_$i121 == 1);
    goto $bb42;

  $bb44:
    assume {:verifier.code 0} true;
    assume !(out_$i122 == 1);
    goto $bb42;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    out_$i123 := out_$i9;
    assume true;
    goto $bb44;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i32(in_$i4, 0);
    goto corral_source_split_7542;

  $bb40:
    assume out_$i121 == 1;
    goto corral_source_split_7541;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i32(out_$i116, 0);
    goto corral_source_split_7537;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_7536;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i116 := out_$i13;
    goto $bb35;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    out_$i116 := out_$i115;
    goto $bb35;

  $bb33:
    assume out_$i114 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7534;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    out_$i115 := out_$i108;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    out_$i114 := $ne.i32(out_$i108, 0);
    goto corral_source_split_7524;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7523;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i107, out_$i108 := out_$i54, out_$i14;
    goto $bb28;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    out_$i107, out_$i108 := out_$i15, 1;
    goto $bb28;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p106, out_$p103);
    goto corral_source_split_7521;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(in_$p0, $mul.ref(out_$i104, 16)), $mul.ref(8, 1));
    goto corral_source_split_7520;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    goto corral_source_split_7519;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    out_$i104 := $sext.i32.i64(out_$i9);
    goto corral_source_split_7518;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref(out_$p101, $mul.ref(out_$i102, 4));
    goto corral_source_split_7517;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    out_$i102 := $sext.i32.i64(out_$i72);
    goto corral_source_split_7516;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    out_$p101 := $load.ref($M.0, out_$p100);
    goto corral_source_split_7515;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p99, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_7514;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    out_$p99 := $load.ref($M.0, out_$p98);
    goto corral_source_split_7513;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref(out_$i96, 8));
    goto corral_source_split_7512;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    out_$i96 := $sext.i32.i64(out_$i15);
    goto corral_source_split_7511;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p95, out_$p92);
    goto corral_source_split_7510;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(in_$p0, $mul.ref(out_$i93, 16)), $mul.ref(0, 1));
    goto corral_source_split_7509;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    goto corral_source_split_7508;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    out_$i93 := $sext.i32.i64(out_$i9);
    goto corral_source_split_7507;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.0, out_$p91);
    goto corral_source_split_7506;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref(out_$i89, 8));
    goto corral_source_split_7505;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i89 := $sext.i32.i64(out_$i15);
    goto corral_source_split_7504;

  $bb26:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} __dynamic_pr_debug.ref.ref.i32.i32.i32(in_$p6, .str.106, out_$i9, out_$i15, out_$i72);
    goto corral_source_split_7502;

  $bb25:
    assume out_$i88 == 1;
    goto corral_source_split_7501;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i64(out_$i87, 0);
    goto corral_source_split_7499;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} out_$i87 := ldv__builtin_expect(out_$i86, 0);
    call {:si_unique_call 1042} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i87);
    goto corral_source_split_7498;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    out_$i86 := $and.i64(out_$i85, 1);
    goto corral_source_split_7497;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i8.i64(out_$i84);
    goto corral_source_split_7496;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i8($M.34, out_$p83);
    goto corral_source_split_7495;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7494;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $M.34 := $store.i8($M.34, out_$p82, 0);
    goto corral_source_split_7493;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7492;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $M.33 := $store.i24($M.33, out_$p78, out_$i81);
    goto corral_source_split_7491;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    out_$i81 := $or.i24(out_$i80, 787);
    goto corral_source_split_7490;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    out_$i80 := $and.i24(out_$i79, $sub.i24(0, 262144));
    goto corral_source_split_7489;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i24($M.33, out_$p78);
    goto corral_source_split_7488;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    out_$p78 := $bitcast.ref.ref(out_$p77);
    goto corral_source_split_7487;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7486;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, out_$p76, .str.105);
    goto corral_source_split_7485;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7484;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $M.31 := $store.ref($M.31, out_$p75, .str.9);
    goto corral_source_split_7483;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7482;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, out_$p74, .str.102);
    goto corral_source_split_7481;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7480;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, out_$p73, .str.7);
    goto corral_source_split_7479;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7478;

  $bb23:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7477;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    out_$i72 := out_$i55;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i65, out_$i70);
    goto corral_source_split_7475;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    out_$i70 := $or.i32(out_$i69, 983040);
    goto corral_source_split_7474;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i8.i32(out_$i68);
    goto corral_source_split_7473;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i8($M.35, out_$p67);
    goto corral_source_split_7472;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref(in_$p1, $mul.ref(out_$i66, 1));
    goto corral_source_split_7471;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(out_$i9);
    goto corral_source_split_7470;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, out_$p64);
    goto corral_source_split_7469;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p61, $mul.ref(out_$i62, 20)), $mul.ref(0, 1));
    goto corral_source_split_7468;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    goto corral_source_split_7467;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i55);
    goto corral_source_split_7466;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_7465;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p59, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_7464;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_7463;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref(out_$i56, 8));
    goto corral_source_split_7462;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(out_$i15);
    goto corral_source_split_7461;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb21:
    call out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i55 := pidff_find_fields_loop_$bb21(in_$p1, in_$p2, out_$p49, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i55, out_$i15, out_$i9);
    goto $bb21_last;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7459;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    out_$i55 := 0;
    goto $bb21;

  $bb30:
    assume out_$i113 == 1;
    assume {:verifier.code 0} true;
    out_$i55 := out_$i109;
    assume false;
    return;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    out_$i113 := $ult.i32(out_$i109, out_$i112);
    goto corral_source_split_7530;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i32($M.0, out_$p111);
    goto corral_source_split_7529;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(out_$p110, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_7528;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    out_$p110 := $load.ref($M.0, out_$p49);
    goto corral_source_split_7527;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i109 := $add.i32(out_$i55, 1);
    call {:si_unique_call 1044} {:cexpr "j"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_7526;

  $bb24:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb18:
    assume out_$i53 == 1;
    goto corral_source_split_7457;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i15;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    out_$i53 := $ult.i32(0, out_$i52);
    goto corral_source_split_7455;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.0, out_$p51);
    goto corral_source_split_7454;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p50, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_7453;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_7452;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref(out_$i47, 8));
    goto corral_source_split_7451;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i15);
    goto corral_source_split_7450;

  $bb12:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i21, out_$i27);
    goto corral_source_split_7416;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_7415;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p25, $mul.ref(0, 112)), $mul.ref(40, 1));
    goto corral_source_split_7414;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_7413;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref(out_$i22, 8));
    goto corral_source_split_7412;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i15);
    goto corral_source_split_7411;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_7410;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_7409;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_7408;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref(out_$i16, 8));
    goto corral_source_split_7407;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i15);
    goto corral_source_split_7406;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$i16, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p91, out_$p92, out_$i93, out_$p95, out_$i96, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$p103, out_$i104, out_$p106, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i55, out_$i54, out_$i107, out_$i108, out_$i114, out_$i115, out_$i45, out_$i46, out_$i117, out_$i118, out_$i119, out_$i14, out_$i15, out_$i120 := pidff_find_fields_loop_$bb9(in_$p0, in_$p1, in_$p2, in_$p5, in_$p6, out_$p10, out_$i16, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p91, out_$p92, out_$i93, out_$p95, out_$i96, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$p103, out_$i104, out_$p106, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i55, out_$i54, out_$i107, out_$i108, out_$i114, out_$i115, out_$i45, out_$i46, out_$i117, out_$i118, out_$i119, out_$i14, out_$i15, out_$i120, out_$i9);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7404;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    out_$i14, out_$i15 := 0, 0;
    goto $bb9;

  $bb37:
    assume out_$i119 == 1;
    assume {:verifier.code 0} true;
    out_$i14, out_$i15 := out_$i46, out_$i117;
    assume false;
    return;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    out_$i120 := out_$i46;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    out_$i119 := $ult.i32(out_$i117, out_$i118);
    goto corral_source_split_7448;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i32($M.0, out_$p10);
    goto corral_source_split_7447;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    out_$i117 := $add.i32(out_$i45, 1);
    call {:si_unique_call 1040} {:cexpr "i"} boogie_si_record_i32(out_$i117);
    goto corral_source_split_7446;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7445;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i45, out_$i46 := out_$i107, out_$i108;
    goto $bb16;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i45, out_$i46 := out_$i15, out_$i14;
    goto $bb16;

  $bb14:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} __dynamic_pr_debug.ref.ref(in_$p5, .str.104);
    goto corral_source_split_7443;

  $bb13:
    assume out_$i44 == 1;
    goto corral_source_split_7442;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i64(out_$i43, 0);
    goto corral_source_split_7440;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} out_$i43 := ldv__builtin_expect(out_$i42, 0);
    call {:si_unique_call 1038} {:cexpr "tmp"} boogie_si_record_i64(out_$i43);
    goto corral_source_split_7439;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i64(out_$i41, 1);
    goto corral_source_split_7438;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i8.i64(out_$i40);
    goto corral_source_split_7437;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i8($M.34, out_$p39);
    goto corral_source_split_7436;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7435;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $M.34 := $store.i8($M.34, out_$p38, 0);
    goto corral_source_split_7434;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7433;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $M.33 := $store.i24($M.33, out_$p34, out_$i37);
    goto corral_source_split_7432;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    out_$i37 := $or.i24(out_$i36, 780);
    goto corral_source_split_7431;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    out_$i36 := $and.i24(out_$i35, $sub.i24(0, 262144));
    goto corral_source_split_7430;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i24($M.33, out_$p34);
    goto corral_source_split_7429;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_7428;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7427;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, out_$p32, .str.103);
    goto corral_source_split_7426;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7425;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $M.31 := $store.ref($M.31, out_$p31, .str.9);
    goto corral_source_split_7424;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7423;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, out_$p30, .str.102);
    goto corral_source_split_7422;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7421;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, out_$p29, .str.7);
    goto corral_source_split_7420;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7419;

  $bb11:
    assume out_$i28 == 1;
    goto corral_source_split_7418;

  $bb34:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb6:
    assume out_$i12 == 1;
    goto corral_source_split_7402;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    out_$i13 := 0;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    out_$i12 := $ult.i32(0, out_$i11);
    goto corral_source_split_7400;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i32($M.0, out_$p10);
    goto corral_source_split_7399;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2088)), $mul.ref(2072, 1));
    goto corral_source_split_7398;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i53 == 1);
    goto $bb20;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i15;
    goto $bb20;

  $bb31:
    assume !(out_$i113 == 1);
    goto corral_source_split_7532;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i12 == 1);
    goto $bb8;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i120;
    goto $bb8;

  $bb38:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7539;

  $bb50_dummy:
    call {:si_unique_call 1} out_$p10, out_$i11, out_$i12, out_$i16, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p91, out_$p92, out_$i93, out_$p95, out_$i96, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$p103, out_$i104, out_$p106, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i55, out_$i54, out_$i107, out_$i108, out_$i114, out_$i115, out_$i45, out_$i46, out_$i117, out_$i118, out_$i119, out_$i14, out_$i15, out_$i120, out_$i13, out_$i116, out_$i121, out_$i122, out_$i123, out_$i141, out_$i142, out_$i9 := pidff_find_fields_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$i3, in_$i4, in_$p5, in_$p6, out_$p10, out_$i11, out_$i12, out_$i16, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p91, out_$p92, out_$i93, out_$p95, out_$i96, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$p103, out_$i104, out_$p106, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i55, out_$i54, out_$i107, out_$i108, out_$i114, out_$i115, out_$i45, out_$i46, out_$i117, out_$i118, out_$i119, out_$i14, out_$i15, out_$i120, out_$i13, out_$i116, out_$i121, out_$i122, out_$i123, out_$i141, out_$i142, out_$i9);
    return;

  exit:
    return;
}



procedure pidff_find_fields_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$i4: i32, in_$p5: ref, in_$p6: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i64, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i24, in_$i36: i24, in_$i37: i24, in_$p38: ref, in_$p39: ref, in_$i40: i8, in_$i41: i64, in_$i42: i64, in_$i43: i64, in_$i44: i1, in_$i47: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i56: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p64: ref, in_$i65: i32, in_$i66: i64, in_$p67: ref, in_$i68: i8, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i24, in_$i80: i24, in_$i81: i24, in_$p82: ref, in_$p83: ref, in_$i84: i8, in_$i85: i64, in_$i86: i64, in_$i87: i64, in_$i88: i1, in_$i89: i64, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$p95: ref, in_$i96: i64, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$p103: ref, in_$i104: i64, in_$p106: ref, in_$i109: i32, in_$p110: ref, in_$p111: ref, in_$i112: i32, in_$i113: i1, in_$i55: i32, in_$i54: i32, in_$i107: i32, in_$i108: i32, in_$i114: i1, in_$i115: i32, in_$i45: i32, in_$i46: i32, in_$i117: i32, in_$i118: i32, in_$i119: i1, in_$i14: i32, in_$i15: i32, in_$i120: i32, in_$i13: i32, in_$i116: i32, in_$i121: i1, in_$i122: i1, in_$i123: i32, in_$i141: i32, in_$i142: i1, in_$i9: i32) returns (out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i64, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i24, out_$i36: i24, out_$i37: i24, out_$p38: ref, out_$p39: ref, out_$i40: i8, out_$i41: i64, out_$i42: i64, out_$i43: i64, out_$i44: i1, out_$i47: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i56: i64, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p64: ref, out_$i65: i32, out_$i66: i64, out_$p67: ref, out_$i68: i8, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i24, out_$i80: i24, out_$i81: i24, out_$p82: ref, out_$p83: ref, out_$i84: i8, out_$i85: i64, out_$i86: i64, out_$i87: i64, out_$i88: i1, out_$i89: i64, out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$p95: ref, out_$i96: i64, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$p103: ref, out_$i104: i64, out_$p106: ref, out_$i109: i32, out_$p110: ref, out_$p111: ref, out_$i112: i32, out_$i113: i1, out_$i55: i32, out_$i54: i32, out_$i107: i32, out_$i108: i32, out_$i114: i1, out_$i115: i32, out_$i45: i32, out_$i46: i32, out_$i117: i32, out_$i118: i32, out_$i119: i1, out_$i14: i32, out_$i15: i32, out_$i120: i32, out_$i13: i32, out_$i116: i32, out_$i121: i1, out_$i122: i1, out_$i123: i32, out_$i141: i32, out_$i142: i1, out_$i9: i32);
  modifies $M.0, $M.34, $M.33, $M.32, $M.31, $M.30, $M.29;



implementation pidff_find_special_field_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$i7: i64, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i6: i32) returns (out_$i7: i64, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i6: i32)
{

  entry:
    out_$i7, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i37, out_$i38, out_$i39, out_$i6 := in_$i7, in_$p9, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$i15, in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i37, in_$i38, in_$i39, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_8135;

  $bb18:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i37;
    goto $bb18_dummy;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    out_$i39 := $ult.i32(out_$i37, out_$i38);
    goto corral_source_split_8175;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, in_$p3);
    goto corral_source_split_8174;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i6, 1);
    call {:si_unique_call 1103} {:cexpr "i"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_8173;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i14 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i21 == 1);
    goto $bb8;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i6;
    assume true;
    goto $bb10;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i20, 0);
    goto corral_source_split_8151;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_8150;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 112)), $mul.ref(40, 1));
    goto corral_source_split_8149;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_8148;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref(out_$i15, 8));
    goto corral_source_split_8147;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i6);
    goto corral_source_split_8146;

  $bb6:
    assume out_$i14 == 1;
    goto corral_source_split_8145;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i12, out_$i13);
    goto corral_source_split_8143;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    out_$i13 := $or.i32(in_$i1, 983040);
    goto corral_source_split_8142;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, out_$p11);
    goto corral_source_split_8141;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p10, $mul.ref(0, 112)), $mul.ref(4, 1));
    goto corral_source_split_8140;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_8139;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref(out_$i7, 8));
    goto corral_source_split_8138;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i6);
    goto corral_source_split_8137;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i7, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i37, out_$i38, out_$i39, out_$i6 := pidff_find_special_field_loop_$bb4(in_$p0, in_$i1, in_$p3, out_$i7, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i37, out_$i38, out_$i39, out_$i6);
    return;

  exit:
    return;
}



procedure pidff_find_special_field_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$i7: i64, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i6: i32) returns (out_$i7: i64, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i6: i32);



implementation pidff_find_special_keys_loop_$bb9(in_$p1: ref, in_$p2: ref, in_$p8: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p16: ref, in_$i17: i32, in_$i18: i64, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i11: i32, in_$i7: i32) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p16: ref, out_$i17: i32, out_$i18: i64, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i11: i32)
{

  entry:
    out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i30, out_$i31, out_$i32, out_$i11 := in_$p12, in_$p13, in_$i14, in_$p16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i30, in_$i31, in_$i32, in_$i11;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8192;

  $bb15:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i30;
    goto $bb15_dummy;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    out_$i32 := $ult.i32(out_$i30, out_$i31);
    goto corral_source_split_8220;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, in_$p8);
    goto corral_source_split_8219;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i11, 1);
    call {:si_unique_call 1107} {:cexpr "j"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_8218;

  $bb12:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i11;
    assume true;
    goto $bb12;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i17, out_$i22);
    goto corral_source_split_8205;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    out_$i22 := $or.i32(out_$i21, 983040);
    goto corral_source_split_8204;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(out_$i20);
    goto corral_source_split_8203;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i8($M.36, out_$p19);
    goto corral_source_split_8202;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(in_$p2, $mul.ref(out_$i18, 1));
    goto corral_source_split_8201;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(in_$i7);
    goto corral_source_split_8200;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, out_$p16);
    goto corral_source_split_8199;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p13, $mul.ref(out_$i14, 20)), $mul.ref(0, 1));
    goto corral_source_split_8198;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    goto corral_source_split_8197;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i11);
    goto corral_source_split_8196;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_8195;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p1, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_8194;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i30, out_$i31, out_$i32, out_$i11 := pidff_find_special_keys_loop_$bb9(in_$p1, in_$p2, in_$p8, out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i30, out_$i31, out_$i32, out_$i11, in_$i7);
    return;

  exit:
    return;
}



procedure pidff_find_special_keys_loop_$bb9(in_$p1: ref, in_$p2: ref, in_$p8: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p16: ref, in_$i17: i32, in_$i18: i64, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i11: i32, in_$i7: i32) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p16: ref, out_$i17: i32, out_$i18: i64, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i11: i32);



implementation pidff_find_special_keys_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$p8: ref, in_$i9: i32, in_$i10: i1, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p16: ref, in_$i17: i32, in_$i18: i64, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i64, in_$p27: ref, in_$i28: i32, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i11: i32, in_$i29: i32, in_$i33: i32, in_$i34: i1, in_$i6: i32, in_$i7: i32, in_$i35: i32) returns (out_$p8: ref, out_$i9: i32, out_$i10: i1, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p16: ref, out_$i17: i32, out_$i18: i64, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i64, out_$p27: ref, out_$i28: i32, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i11: i32, out_$i29: i32, out_$i33: i32, out_$i34: i1, out_$i6: i32, out_$i7: i32, out_$i35: i32)
{

  entry:
    out_$p8, out_$i9, out_$i10, out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i30, out_$i31, out_$i32, out_$i11, out_$i29, out_$i33, out_$i34, out_$i6, out_$i7, out_$i35 := in_$p8, in_$i9, in_$i10, in_$p12, in_$p13, in_$i14, in_$p16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$p27, in_$i28, in_$i30, in_$i31, in_$i32, in_$i11, in_$i29, in_$i33, in_$i34, in_$i6, in_$i7, in_$i35;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8184;

  $bb18:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i6, out_$i7 := out_$i29, out_$i33;
    goto $bb18_dummy;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i29;
    assume true;
    goto $bb18;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i33, in_$i3);
    goto corral_source_split_8216;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i7, 1);
    call {:si_unique_call 1106} {:cexpr "i"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_8215;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_8214;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i6;
    goto $bb13;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i28;
    goto $bb13;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i6, 1);
    call {:si_unique_call 1105} {:cexpr "found"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_8212;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p27, out_$i25);
    goto corral_source_split_8211;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref(in_$p0, $mul.ref(out_$i26, 4));
    goto corral_source_split_8210;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i7);
    goto corral_source_split_8209;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i24, 1);
    goto corral_source_split_8208;

  $bb11:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_8207;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i11;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i17, out_$i22);
    goto corral_source_split_8205;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    out_$i22 := $or.i32(out_$i21, 983040);
    goto corral_source_split_8204;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(out_$i20);
    goto corral_source_split_8203;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i8($M.36, out_$p19);
    goto corral_source_split_8202;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(in_$p2, $mul.ref(out_$i18, 1));
    goto corral_source_split_8201;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i7);
    goto corral_source_split_8200;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, out_$p16);
    goto corral_source_split_8199;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p13, $mul.ref(out_$i14, 20)), $mul.ref(0, 1));
    goto corral_source_split_8198;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    goto corral_source_split_8197;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i11);
    goto corral_source_split_8196;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_8195;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p1, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_8194;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i30, out_$i31, out_$i32, out_$i11 := pidff_find_special_keys_loop_$bb9(in_$p1, in_$p2, out_$p8, out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i30, out_$i31, out_$i32, out_$i11, out_$i7);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8192;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    out_$i11 := 0;
    goto $bb9;

  $bb15:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i30;
    assume false;
    return;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    out_$i32 := $ult.i32(out_$i30, out_$i31);
    goto corral_source_split_8220;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, out_$p8);
    goto corral_source_split_8219;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i11, 1);
    call {:si_unique_call 1107} {:cexpr "j"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_8218;

  $bb12:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb6:
    assume out_$i10 == 1;
    goto corral_source_split_8190;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    out_$i10 := $ult.i32(0, out_$i9);
    goto corral_source_split_8188;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i32($M.0, out_$p8);
    goto corral_source_split_8187;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p1, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_8186;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i10 == 1);
    goto $bb8;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb16:
    assume !(out_$i32 == 1);
    goto corral_source_split_8222;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p8, out_$i9, out_$i10, out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i30, out_$i31, out_$i32, out_$i11, out_$i29, out_$i33, out_$i34, out_$i6, out_$i7, out_$i35 := pidff_find_special_keys_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$i3, out_$p8, out_$i9, out_$i10, out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i30, out_$i31, out_$i32, out_$i11, out_$i29, out_$i33, out_$i34, out_$i6, out_$i7, out_$i35);
    return;

  exit:
    return;
}



procedure pidff_find_special_keys_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$p8: ref, in_$i9: i32, in_$i10: i1, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p16: ref, in_$i17: i32, in_$i18: i64, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i64, in_$p27: ref, in_$i28: i32, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i11: i32, in_$i29: i32, in_$i33: i32, in_$i34: i1, in_$i6: i32, in_$i7: i32, in_$i35: i32) returns (out_$p8: ref, out_$i9: i32, out_$i10: i1, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p16: ref, out_$i17: i32, out_$i18: i64, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i64, out_$p27: ref, out_$i28: i32, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i11: i32, out_$i29: i32, out_$i33: i32, out_$i34: i1, out_$i6: i32, out_$i7: i32, out_$i35: i32);
  modifies $M.0;



implementation usbhid_start_loop_$bb14(in_$p0: ref, in_$p1: ref, in_$p8: ref, in_$p9: ref, in_$p12: ref, in_$p28: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$i51: i8, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i8, in_$i59: i32, in_$i61: i32, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i71: i32, in_$i72: i1, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$i80: i1, in_$p81: ref, in_$i82: i8, in_$i83: i32, in_$i84: i32, in_$i85: i32, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$i90: i32, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$i111: i64, in_$i112: i1, in_$p113: ref, in_$i114: i8, in_$i115: i32, in_$i116: i32, in_$i117: i32, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$i124: i64, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$i131: i32, in_$i132: i32, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$i136: i32, in_$i137: i8, in_$i138: i32, in_$i139: i1, in_$i32: i32, in_vslice_dummy_var_59: i32) returns (out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$i51: i8, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i8, out_$i59: i32, out_$i61: i32, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i71: i32, out_$i72: i1, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$i80: i1, out_$p81: ref, out_$i82: i8, out_$i83: i32, out_$i84: i32, out_$i85: i32, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$i90: i32, out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$i111: i64, out_$i112: i1, out_$p113: ref, out_$i114: i8, out_$i115: i32, out_$i116: i32, out_$i117: i32, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$i124: i64, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$i131: i32, out_$i132: i32, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$i136: i32, out_$i137: i8, out_$i138: i32, out_$i139: i1, out_$i32: i32, out_vslice_dummy_var_59: i32)
{

  entry:
    out_$p33, out_$p34, out_$i35, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$p91, out_$p92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$i124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$i131, out_$i132, out_$p133, out_$p134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i32, out_vslice_dummy_var_59 := in_$p33, in_$p34, in_$i35, in_$p37, in_$i38, in_$i39, in_$p40, in_$i41, in_$i42, in_$p43, in_$i44, in_$i45, in_$i46, in_$p47, in_$i48, in_$i49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$p55, in_$p56, in_$p57, in_$i58, in_$i59, in_$i61, in_$p62, in_$p63, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$p73, in_$p74, in_$i75, in_$i76, in_$p77, in_$p78, in_$i79, in_$i80, in_$p81, in_$i82, in_$i83, in_$i84, in_$i85, in_$p86, in_$p87, in_$p88, in_$p89, in_$i90, in_$p91, in_$p92, in_$i93, in_$p94, in_$p95, in_$p96, in_$p97, in_$p98, in_$p99, in_$i100, in_$i101, in_$p102, in_$p103, in_$p104, in_$p105, in_$p106, in_$i107, in_$i108, in_$p109, in_$p110, in_$i111, in_$i112, in_$p113, in_$i114, in_$i115, in_$i116, in_$i117, in_$p118, in_$p119, in_$p120, in_$p121, in_$p122, in_$p123, in_$i124, in_$p125, in_$p126, in_$p127, in_$p128, in_$p129, in_$p130, in_$i131, in_$i132, in_$p133, in_$p134, in_$p135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i32, in_vslice_dummy_var_59;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_8357;

  $bb47:
    assume out_$i139 == 1;
    assume {:verifier.code 0} true;
    out_$i32 := out_$i136;
    goto $bb47_dummy;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    out_$i139 := $ugt.i32(out_$i138, out_$i136);
    goto corral_source_split_8372;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    out_$i138 := $zext.i8.i32(out_$i137);
    goto corral_source_split_8371;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    out_$i137 := $load.i8($M.0, in_$p28);
    goto corral_source_split_8370;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i136 := $add.i32(out_$i32, 1);
    call {:si_unique_call 1126} {:cexpr "n"} boogie_si_record_i32(out_$i136);
    goto corral_source_split_8369;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i39 == 1;
    goto corral_source_split_8367;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i38, 0);
    goto corral_source_split_8365;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} out_$i38 := usb_endpoint_xfer_int(out_$p37);
    call {:si_unique_call 1125} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_8364;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p34, $mul.ref(out_$i35, 72)), $mul.ref(0, 1));
    goto corral_source_split_8363;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    goto corral_source_split_8362;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i32.i64(out_$i32);
    goto corral_source_split_8361;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_8360;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8359;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb34:
    assume out_$i76 == 1;
    goto corral_source_split_8428;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i64(out_$i75, 0);
    goto corral_source_split_8420;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    out_$i75 := $p2i.ref.i64(out_$p74);
    goto corral_source_split_8419;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_8418;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p12, $mul.ref(0, 10768)), $mul.ref(24, 1));
    goto corral_source_split_8417;

  $bb32:
    assume out_$i72 == 1;
    goto corral_source_split_8416;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i32(out_$i71, 0);
    goto corral_source_split_8414;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} out_$i71 := usb_endpoint_dir_in(out_$p37);
    call {:si_unique_call 1133} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_8413;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_8412;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i70 := out_$i61;
    goto $bb31;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    out_$i70 := out_$i69;
    goto $bb31;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    out_$i69 := $M.38;
    call {:si_unique_call 1131} {:cexpr "interval"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_8410;

  $bb29:
    assume out_$i68 == 1;
    goto corral_source_split_8409;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i32(out_$i67, 0);
    goto corral_source_split_8407;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    out_$i67 := $M.38;
    goto corral_source_split_8406;

  $bb26:
    assume out_$i66 == 1;
    goto corral_source_split_8405;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i32(out_$i65, 65538);
    goto corral_source_split_8403;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, out_$p64);
    goto corral_source_split_8402;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p63, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_8401;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.0, out_$p62);
    goto corral_source_split_8400;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_8399;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_8398;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i42;
    goto $bb25;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i54;
    goto $bb25;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} out_vslice_dummy_var_59 := printk.ref.ref.i32.i32(.str.61, out_$p56, out_$i59, out_$i54);
    goto corral_source_split_8396;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i8.i32(out_$i58);
    goto corral_source_split_8395;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i8($M.0, out_$p57);
    goto corral_source_split_8394;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    out_$p56 := $bitcast.ref.ref(out_$p55);
    out_$p57 := $add.ref($add.ref($add.ref(out_$p34, $mul.ref(out_$i35, 72)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_8393;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8600)), $mul.ref(8088, 1));
    goto corral_source_split_8392;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} out_$i54 := fls(out_$i53);
    call {:si_unique_call 1129} {:cexpr "interval"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_8391;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    out_$i53 := $mul.i32(out_$i52, 8);
    goto corral_source_split_8390;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i8.i32(out_$i51);
    goto corral_source_split_8389;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i8($M.0, out_$p50);
    goto corral_source_split_8388;

  $bb23:
    assume out_$i49 == 1;
    out_$p50 := $add.ref($add.ref($add.ref(out_$p34, $mul.ref(out_$i35, 72)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_8387;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i48, 3);
    goto corral_source_split_8385;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, out_$p47);
    goto corral_source_split_8384;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p9, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_8383;

  $bb20:
    assume out_$i46 == 1;
    goto corral_source_split_8382;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i45, 0);
    goto corral_source_split_8380;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    out_$i45 := $and.i32(out_$i44, 268435456);
    goto corral_source_split_8379;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, out_$p43);
    goto corral_source_split_8378;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8600)), $mul.ref(8040, 1));
    goto corral_source_split_8377;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i8.i32(out_$i41);
    call {:si_unique_call 1127} {:cexpr "interval"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_8376;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i8($M.0, out_$p40);
    goto corral_source_split_8375;

  $bb19:
    out_$p40 := $add.ref($add.ref($add.ref(out_$p34, $mul.ref(out_$i35, 72)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_8374;

  $bb17:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i46 == 1);
    goto $bb22;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i49 == 1);
    goto $bb22;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i66 == 1);
    goto $bb28;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i68 == 1);
    goto $bb28;

  $bb41:
    assume out_$i108 == 1;
    goto corral_source_split_8466;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i64(out_$i107, 0);
    goto corral_source_split_8426;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    out_$i107 := $p2i.ref.i64(out_$p106);
    goto corral_source_split_8425;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.0, out_$p105);
    goto corral_source_split_8424;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(in_$p12, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_8423;

  $bb33:
    assume !(out_$i72 == 1);
    goto corral_source_split_8422;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p135, out_$i132);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p104, out_$i101);
    goto corral_source_split_8464;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(out_$p103, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_8463;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    out_$p103 := $load.ref($M.0, out_$p102);
    goto corral_source_split_8462;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(in_$p12, $mul.ref(0, 10768)), $mul.ref(24, 1));
    goto corral_source_split_8461;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    out_$i101 := $or.i32(out_$i100, 4);
    goto corral_source_split_8460;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i32($M.0, out_$p99);
    goto corral_source_split_8459;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(out_$p98, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_8458;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.0, out_$p97);
    goto corral_source_split_8457;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p12, $mul.ref(0, 10768)), $mul.ref(24, 1));
    goto corral_source_split_8456;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p96, out_$i93);
    goto corral_source_split_8455;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p95, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_8454;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_8453;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p12, $mul.ref(0, 10768)), $mul.ref(24, 1));
    goto corral_source_split_8452;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i64($M.0, out_$p92);
    goto corral_source_split_8451;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p12, $mul.ref(0, 10768)), $mul.ref(40, 1));
    goto corral_source_split_8450;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} usb_fill_int_urb(out_$p87, in_$p9, out_$i85, out_$p89, out_$i90, hid_irq_in, out_$p91, out_$i70);
    goto corral_source_split_8449;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    out_$p91 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_8448;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i32($M.37, in_$p1);
    goto corral_source_split_8447;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    out_$p89 := $load.ref($M.0, out_$p88);
    goto corral_source_split_8446;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p12, $mul.ref(0, 10768)), $mul.ref(32, 1));
    goto corral_source_split_8445;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    out_$p87 := $load.ref($M.0, out_$p86);
    goto corral_source_split_8444;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p12, $mul.ref(0, 10768)), $mul.ref(24, 1));
    goto corral_source_split_8443;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    out_$i85 := $or.i32(out_$i84, 1073741952);
    call {:si_unique_call 1137} {:cexpr "pipe"} boogie_si_record_i32(out_$i85);
    goto corral_source_split_8442;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} out_$i84 := __create_pipe(in_$p9, out_$i83);
    call {:si_unique_call 1136} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_8441;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i8.i32(out_$i82);
    goto corral_source_split_8440;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i8($M.0, out_$p81);
    goto corral_source_split_8439;

  $bb39:
    out_$p81 := $add.ref($add.ref($add.ref(out_$p34, $mul.ref(out_$i35, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_8438;

  $bb38:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i64(out_$i79, 0);
    goto corral_source_split_8434;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    out_$i79 := $p2i.ref.i64(out_$p77);
    goto corral_source_split_8433;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p78, out_$p77);
    goto corral_source_split_8432;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p12, $mul.ref(0, 10768)), $mul.ref(24, 1));
    goto corral_source_split_8431;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} out_$p77 := usb_alloc_urb(0, 208);
    goto corral_source_split_8430;

  $bb35:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(out_$p134, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_8500;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    out_$p134 := $load.ref($M.0, out_$p133);
    goto corral_source_split_8499;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(in_$p12, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_8498;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    out_$i132 := $or.i32(out_$i131, 4);
    goto corral_source_split_8497;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    out_$i131 := $load.i32($M.0, out_$p130);
    goto corral_source_split_8496;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(out_$p129, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_8495;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    out_$p129 := $load.ref($M.0, out_$p128);
    goto corral_source_split_8494;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(in_$p12, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_8493;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p127, out_$i124);
    goto corral_source_split_8492;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(out_$p126, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_8491;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    out_$p126 := $load.ref($M.0, out_$p125);
    goto corral_source_split_8490;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p12, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_8489;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i64($M.0, out_$p123);
    goto corral_source_split_8488;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(in_$p12, $mul.ref(0, 10768)), $mul.ref(10360, 1));
    goto corral_source_split_8487;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} usb_fill_int_urb(out_$p119, in_$p9, out_$i117, out_$p121, 0, hid_irq_out, out_$p122, out_$i70);
    goto corral_source_split_8486;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    out_$p122 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_8485;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    out_$p121 := $load.ref($M.0, out_$p120);
    goto corral_source_split_8484;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p12, $mul.ref(0, 10768)), $mul.ref(10352, 1));
    goto corral_source_split_8483;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    out_$p119 := $load.ref($M.0, out_$p118);
    goto corral_source_split_8482;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(in_$p12, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_8481;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    out_$i117 := $or.i32(out_$i116, 1073741824);
    call {:si_unique_call 1142} {:cexpr "pipe"} boogie_si_record_i32(out_$i117);
    goto corral_source_split_8480;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} out_$i116 := __create_pipe(in_$p9, out_$i115);
    call {:si_unique_call 1141} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_8479;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    out_$i115 := $zext.i8.i32(out_$i114);
    goto corral_source_split_8478;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i8($M.0, out_$p113);
    goto corral_source_split_8477;

  $bb46:
    out_$p113 := $add.ref($add.ref($add.ref(out_$p34, $mul.ref(out_$i35, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_8476;

  $bb45:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    out_$i112 := $eq.i64(out_$i111, 0);
    goto corral_source_split_8472;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    out_$i111 := $p2i.ref.i64(out_$p109);
    goto corral_source_split_8471;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p110, out_$p109);
    goto corral_source_split_8470;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(in_$p12, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_8469;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} out_$p109 := usb_alloc_urb(0, 208);
    goto corral_source_split_8468;

  $bb42:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb47_dummy:
    call {:si_unique_call 1} out_$p33, out_$p34, out_$i35, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$p91, out_$p92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$i124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$i131, out_$i132, out_$p133, out_$p134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i32, out_vslice_dummy_var_59 := usbhid_start_loop_$bb14(in_$p0, in_$p1, in_$p8, in_$p9, in_$p12, in_$p28, out_$p33, out_$p34, out_$i35, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$p91, out_$p92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$i124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$i131, out_$i132, out_$p133, out_$p134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i32, out_vslice_dummy_var_59);
    return;

  exit:
    return;
}



procedure usbhid_start_loop_$bb14(in_$p0: ref, in_$p1: ref, in_$p8: ref, in_$p9: ref, in_$p12: ref, in_$p28: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$i51: i8, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i8, in_$i59: i32, in_$i61: i32, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i71: i32, in_$i72: i1, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$i80: i1, in_$p81: ref, in_$i82: i8, in_$i83: i32, in_$i84: i32, in_$i85: i32, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$i90: i32, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$i111: i64, in_$i112: i1, in_$p113: ref, in_$i114: i8, in_$i115: i32, in_$i116: i32, in_$i117: i32, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$i124: i64, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$i131: i32, in_$i132: i32, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$i136: i32, in_$i137: i8, in_$i138: i32, in_$i139: i1, in_$i32: i32, in_vslice_dummy_var_59: i32) returns (out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$i51: i8, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i8, out_$i59: i32, out_$i61: i32, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i71: i32, out_$i72: i1, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$i80: i1, out_$p81: ref, out_$i82: i8, out_$i83: i32, out_$i84: i32, out_$i85: i32, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$i90: i32, out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$i111: i64, out_$i112: i1, out_$p113: ref, out_$i114: i8, out_$i115: i32, out_$i116: i32, out_$i117: i32, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$i124: i64, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$i131: i32, out_$i132: i32, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$i136: i32, out_$i137: i8, out_$i138: i32, out_$i139: i1, out_$i32: i32, out_vslice_dummy_var_59: i32);
  modifies $M.0;



implementation usbhid_parse_loop_$bb30(in_$p1: ref, in_$i86: i64, in_$p87: ref, in_$p90: ref, in_$i91: i8, in_$i92: i32, in_$i93: i1, in_$i94: i64, in_$p95: ref, in_$p98: ref, in_$i99: i16, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$p103: ref, in_$p104: ref, in_$i105: i8, in_$i106: i32, in_$i107: i1, in_$i84: i32, in_$i85: i32, in_$i108: i32) returns (out_$i86: i64, out_$p87: ref, out_$p90: ref, out_$i91: i8, out_$i92: i32, out_$i93: i1, out_$i94: i64, out_$p95: ref, out_$p98: ref, out_$i99: i16, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$p103: ref, out_$p104: ref, out_$i105: i8, out_$i106: i32, out_$i107: i1, out_$i84: i32, out_$i85: i32, out_$i108: i32)
{

  entry:
    out_$i86, out_$p87, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i84, out_$i85, out_$i108 := in_$i86, in_$p87, in_$p90, in_$i91, in_$i92, in_$i93, in_$i94, in_$p95, in_$p98, in_$i99, in_$i100, in_$i101, in_$i102, in_$p103, in_$p104, in_$i105, in_$i106, in_$i107, in_$i84, in_$i85, in_$i108;
    goto $bb30, exit;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8860;

  $bb35:
    assume out_$i107 == 1;
    assume {:verifier.code 0} true;
    out_$i84, out_$i85 := out_$i102, out_$i101;
    goto $bb35_dummy;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    out_$i108 := out_$i101;
    assume true;
    goto $bb35;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    out_$i107 := $sgt.i32(out_$i106, out_$i102);
    goto corral_source_split_8882;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    out_$i106 := $zext.i8.i32(out_$i105);
    goto corral_source_split_8881;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i8($M.40, out_$p104);
    goto corral_source_split_8880;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(out_$p103, $mul.ref(0, 10)), $mul.ref(5, 1));
    goto corral_source_split_8879;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    out_$p103 := $load.ref($M.39, in_$p1);
    goto corral_source_split_8878;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    out_$i102 := $add.i32(out_$i84, 1);
    call {:si_unique_call 1201} {:cexpr "n"} boogie_si_record_i32(out_$i102);
    goto corral_source_split_8877;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_8876;

  $bb33:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    out_$i101 := out_$i85;
    goto $bb34;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    out_$i101 := out_$i100;
    goto $bb34;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    out_$i100 := $zext.i16.i32(out_$i99);
    call {:si_unique_call 1200} {:cexpr "rsize"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_8874;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    out_$i99 := $load.i16($M.40, out_$p98);
    goto corral_source_split_8873;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref($add.ref($add.ref(out_$p95, $mul.ref(0, 10)), $mul.ref(6, 1)), $mul.ref(out_$i94, 4)), $mul.ref(2, 1));
    goto corral_source_split_8872;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.39, in_$p1);
    goto corral_source_split_8871;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    out_$i94 := $sext.i32.i64(out_$i84);
    goto corral_source_split_8870;

  $bb32:
    assume out_$i93 == 1;
    goto corral_source_split_8869;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i32(out_$i92, 34);
    goto corral_source_split_8867;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    out_$i92 := $zext.i8.i32(out_$i91);
    goto corral_source_split_8866;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i8($M.40, out_$p90);
    goto corral_source_split_8865;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref($add.ref($add.ref(out_$p87, $mul.ref(0, 10)), $mul.ref(6, 1)), $mul.ref(out_$i86, 4)), $mul.ref(0, 1));
    goto corral_source_split_8864;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    out_$p87 := $load.ref($M.39, in_$p1);
    goto corral_source_split_8863;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i86 := $sext.i32.i64(out_$i84);
    goto corral_source_split_8862;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb35_dummy:
    call {:si_unique_call 1} out_$i86, out_$p87, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i84, out_$i85, out_$i108 := usbhid_parse_loop_$bb30(in_$p1, out_$i86, out_$p87, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i84, out_$i85, out_$i108);
    return;

  exit:
    return;
}



procedure usbhid_parse_loop_$bb30(in_$p1: ref, in_$i86: i64, in_$p87: ref, in_$p90: ref, in_$i91: i8, in_$i92: i32, in_$i93: i1, in_$i94: i64, in_$p95: ref, in_$p98: ref, in_$i99: i16, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$p103: ref, in_$p104: ref, in_$i105: i8, in_$i106: i32, in_$i107: i1, in_$i84: i32, in_$i85: i32, in_$i108: i32) returns (out_$i86: i64, out_$p87: ref, out_$p90: ref, out_$i91: i8, out_$i92: i32, out_$i93: i1, out_$i94: i64, out_$p95: ref, out_$p98: ref, out_$i99: i16, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$p103: ref, out_$p104: ref, out_$i105: i8, out_$i106: i32, out_$i107: i1, out_$i84: i32, out_$i85: i32, out_$i108: i32);



implementation hid_find_max_report_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$i16: i64, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i32, in_$i23: i64, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p18: ref) returns (out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i32, out_$i23: i64, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p18: ref)
{

  entry:
    out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p18 := in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p33, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$p18;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_9523;

  $bb9:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$p18 := out_$p34;
    goto $bb9_dummy;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i37, in_$i16);
    goto corral_source_split_9545;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_9544;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p35, $mul.ref(0, 2088)), $mul.ref(0, 1));
    goto corral_source_split_9543;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_9542;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_9541;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 2088)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9540;

  $bb7:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, in_$p2, out_$i29);
    goto corral_source_split_9538;

  $bb6:
    assume out_$i31 == 1;
    goto corral_source_split_9537;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    out_$i31 := $ult.i32(out_$i30, out_$i29);
    goto corral_source_split_9535;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, in_$p2);
    goto corral_source_split_9534;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i28, 1);
    call {:si_unique_call 1336} {:cexpr "size"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_9533;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i22, out_$i27);
    goto corral_source_split_9532;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_9531;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 8600)), $mul.ref(80, 1)), $mul.ref(out_$i23, 2072)), $mul.ref(0, 1));
    goto corral_source_split_9530;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i32.i64(in_$i1);
    goto corral_source_split_9529;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    out_$i22 := $lshr.i32(out_$i21, 3);
    goto corral_source_split_9528;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    out_$i21 := $sub.i32(out_$i20, 1);
    goto corral_source_split_9527;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_9526;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 2088)), $mul.ref(2076, 1));
    goto corral_source_split_9525;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p18 := hid_find_max_report_loop_$bb4(in_$p0, in_$i1, in_$p2, in_$i16, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p18);
    return;

  exit:
    return;
}



procedure hid_find_max_report_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$i16: i64, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i32, in_$i23: i64, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p18: ref) returns (out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i32, out_$i23: i64, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p18: ref);
  modifies $M.0;



implementation usbhid_init_reports_loop_$bb23(in_$p0: ref, in_$p3: ref, in_$i52: i32, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i50: i32, in_$i51: i32, in_$i65: i32) returns (out_$i52: i32, out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i50: i32, out_$i51: i32, out_$i65: i32)
{

  entry:
    out_$i52, out_$p53, out_$i54, out_$i55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i50, out_$i51, out_$i65 := in_$i52, in_$p53, in_$i54, in_$i55, in_$p56, in_$p57, in_$p58, in_$i59, in_$i60, in_$p61, in_$p62, in_$i63, in_$i64, in_$i50, in_$i51, in_$i65;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9740;

  $bb31:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i50, out_$i51 := out_$i63, out_$i52;
    goto $bb31_dummy;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    out_$i65 := out_$i52;
    assume true;
    goto $bb31;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i32(out_$i63, 0);
    goto corral_source_split_9762;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} out_$i63 := usbhid_wait_io(in_$p0);
    call {:si_unique_call 1365} {:cexpr "ret"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_9761;

  $bb29:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} usb_kill_urb(out_$p62);
    goto corral_source_split_9759;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_9758;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p3, $mul.ref(0, 10768)), $mul.ref(6240, 1));
    goto corral_source_split_9757;

  $bb28:
    assume out_$i60 == 1;
    goto corral_source_split_9756;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i32(out_$i59, 0);
    goto corral_source_split_9754;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} out_$i59 := constant_test_bit(2, out_$p58);
    call {:si_unique_call 1362} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_9753;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p3, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_9752;

  $bb26:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} usb_kill_urb(out_$p57);
    goto corral_source_split_9750;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_9749;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p3, $mul.ref(0, 10768)), $mul.ref(48, 1));
    goto corral_source_split_9748;

  $bb25:
    assume out_$i55 == 1;
    goto corral_source_split_9747;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i32(out_$i54, 0);
    goto corral_source_split_9745;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} out_$i54 := constant_test_bit(1, out_$p53);
    call {:si_unique_call 1359} {:cexpr "tmp"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_9744;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p3, $mul.ref(0, 10768)), $mul.ref(10448, 1));
    goto corral_source_split_9743;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i52 := $or.i32(out_$i51, out_$i50);
    call {:si_unique_call 1357} {:cexpr "err"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_9742;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i52, out_$p53, out_$i54, out_$i55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i50, out_$i51, out_$i65 := usbhid_init_reports_loop_$bb23(in_$p0, in_$p3, out_$i52, out_$p53, out_$i54, out_$i55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i50, out_$i51, out_$i65);
    return;

  exit:
    return;
}



procedure usbhid_init_reports_loop_$bb23(in_$p0: ref, in_$p3: ref, in_$i52: i32, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i50: i32, in_$i51: i32, in_$i65: i32) returns (out_$i52: i32, out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i50: i32, out_$i51: i32, out_$i65: i32);
  modifies $M.0, $CurrAddr;



implementation usbhid_init_reports_loop_$bb15(in_$p0: ref, in_$i37: i64, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p39: ref) returns (out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p39: ref)
{

  entry:
    out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p39 := in_$p41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p39;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_9723;

  $bb17:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$p39 := out_$p42;
    goto $bb17_dummy;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, in_$i37);
    goto corral_source_split_9731;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_9730;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 2088)), $mul.ref(0, 1));
    goto corral_source_split_9729;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p42);
    goto corral_source_split_9728;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_9727;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref($add.ref(out_$p39, $mul.ref(0, 2088)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9726;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} usbhid_submit_report(in_$p0, out_$p39, $sub.i8(0, 128));
    goto corral_source_split_9725;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p39 := usbhid_init_reports_loop_$bb15(in_$p0, in_$i37, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p39);
    return;

  exit:
    return;
}



procedure usbhid_init_reports_loop_$bb15(in_$p0: ref, in_$i37: i64, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p39: ref) returns (out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p39: ref);
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation usbhid_init_reports_loop_$bb6(in_$p0: ref, in_$i17: i64, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p19: ref) returns (out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p19: ref)
{

  entry:
    out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p19 := in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p19;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9697;

  $bb8:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$p19 := out_$p22;
    goto $bb8_dummy;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, in_$i17);
    goto corral_source_split_9705;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_9704;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 2088)), $mul.ref(0, 1));
    goto corral_source_split_9703;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_9702;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_9701;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(0, 2088)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9700;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} usbhid_submit_report(in_$p0, out_$p19, $sub.i8(0, 128));
    goto corral_source_split_9699;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p19 := usbhid_init_reports_loop_$bb6(in_$p0, in_$i17, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p19);
    return;

  exit:
    return;
}



procedure usbhid_init_reports_loop_$bb6(in_$p0: ref, in_$i17: i64, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p19: ref) returns (out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p19: ref);
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation hid_find_field_early_loop_$bb14(in_$i1: i32, in_$i2: i32, in_$p25: ref, in_$p26: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$i43: i32, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i29: i32) returns (out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$i43: i32, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i29: i32)
{

  entry:
    out_$p30, out_$p31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i45, out_$i46, out_$i47, out_$i29 := in_$p30, in_$p31, in_$i32, in_$p34, in_$i35, in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$i41, in_$p42, in_$i43, in_$i45, in_$i46, in_$i47, in_$i29;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_9818;

  $bb23:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := out_$i45;
    goto $bb23_dummy;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    out_$i47 := $ult.i32(out_$i45, out_$i46);
    goto corral_source_split_9842;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, in_$p26);
    goto corral_source_split_9841;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i29, 1);
    call {:si_unique_call 1377} {:cexpr "j"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_9840;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb18;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb18;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    out_$p42, out_$i43 := in_$p25, out_$i29;
    assume true;
    goto $bb20;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, in_$i2);
    goto corral_source_split_9833;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    out_$i40 := $and.i32(out_$i39, 65535);
    goto corral_source_split_9832;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    goto corral_source_split_9831;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p31, $mul.ref(out_$i32, 20)), $mul.ref(0, 1));
    goto corral_source_split_9830;

  $bb16:
    assume out_$i37 == 1;
    goto corral_source_split_9829;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, in_$i1);
    goto corral_source_split_9827;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    out_$i36 := $and.i32(out_$i35, $sub.i32(0, 65536));
    goto corral_source_split_9826;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, out_$p34);
    goto corral_source_split_9825;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p31, $mul.ref(out_$i32, 20)), $mul.ref(0, 1));
    goto corral_source_split_9824;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    goto corral_source_split_9823;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i29);
    goto corral_source_split_9822;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_9821;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p25, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_9820;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p30, out_$p31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i45, out_$i46, out_$i47, out_$i29 := hid_find_field_early_loop_$bb14(in_$i1, in_$i2, in_$p25, in_$p26, out_$p30, out_$p31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i45, out_$i46, out_$i47, out_$i29);
    return;

  exit:
    return;
}



procedure hid_find_field_early_loop_$bb14(in_$i1: i32, in_$i2: i32, in_$p25: ref, in_$p26: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$i43: i32, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i29: i32) returns (out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$i43: i32, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i29: i32);



implementation hid_find_field_early_loop_$bb9(in_$i1: i32, in_$i2: i32, in_$p18: ref, in_$i22: i64, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$i43: i32, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i29: i32, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i21: i32, in_$p17: ref) returns (out_$i22: i64, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$i43: i32, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i29: i32, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i21: i32)
{

  entry:
    out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p30, out_$p31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i45, out_$i46, out_$i47, out_$i29, out_$i48, out_$i49, out_$i50, out_$i21 := in_$i22, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p30, in_$p31, in_$i32, in_$p34, in_$i35, in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$i41, in_$p42, in_$i43, in_$i45, in_$i46, in_$i47, in_$i29, in_$i48, in_$i49, in_$i50, in_$i21;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_9807;

  $bb26:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := out_$i48;
    goto $bb26_dummy;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    out_$i50 := $ult.i32(out_$i48, out_$i49);
    goto corral_source_split_9848;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.0, in_$p18);
    goto corral_source_split_9847;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i21, 1);
    call {:si_unique_call 1378} {:cexpr "i"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_9846;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb13;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb24:
    assume !(out_$i47 == 1);
    goto corral_source_split_9844;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    out_$i47 := $ult.i32(out_$i45, out_$i46);
    goto corral_source_split_9842;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, out_$p26);
    goto corral_source_split_9841;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i29, 1);
    call {:si_unique_call 1377} {:cexpr "j"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_9840;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb18;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb18;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    out_$p42, out_$i43 := out_$p25, out_$i29;
    assume true;
    goto $bb20;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, in_$i2);
    goto corral_source_split_9833;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    out_$i40 := $and.i32(out_$i39, 65535);
    goto corral_source_split_9832;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    goto corral_source_split_9831;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p31, $mul.ref(out_$i32, 20)), $mul.ref(0, 1));
    goto corral_source_split_9830;

  $bb16:
    assume out_$i37 == 1;
    goto corral_source_split_9829;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, in_$i1);
    goto corral_source_split_9827;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    out_$i36 := $and.i32(out_$i35, $sub.i32(0, 65536));
    goto corral_source_split_9826;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, out_$p34);
    goto corral_source_split_9825;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p31, $mul.ref(out_$i32, 20)), $mul.ref(0, 1));
    goto corral_source_split_9824;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    goto corral_source_split_9823;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i29);
    goto corral_source_split_9822;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_9821;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p25, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_9820;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb14:
    call out_$p30, out_$p31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i45, out_$i46, out_$i47, out_$i29 := hid_find_field_early_loop_$bb14(in_$i1, in_$i2, out_$p25, out_$p26, out_$p30, out_$p31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i45, out_$i46, out_$i47, out_$i29);
    goto $bb14_last;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9818;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    out_$i29 := 0;
    goto $bb14;

  $bb23:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := out_$i45;
    assume false;
    return;

  $bb11:
    assume out_$i28 == 1;
    goto corral_source_split_9816;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    out_$i28 := $ult.i32(0, out_$i27);
    goto corral_source_split_9814;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_9813;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p25, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_9812;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_9811;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref(out_$i22, 8));
    goto corral_source_split_9810;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i21);
    goto corral_source_split_9809;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p30, out_$p31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i45, out_$i46, out_$i47, out_$i29, out_$i48, out_$i49, out_$i50, out_$i21 := hid_find_field_early_loop_$bb9(in_$i1, in_$i2, in_$p18, out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p30, out_$p31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i45, out_$i46, out_$i47, out_$i29, out_$i48, out_$i49, out_$i50, out_$i21, in_$p17);
    return;

  exit:
    return;
}



procedure hid_find_field_early_loop_$bb9(in_$i1: i32, in_$i2: i32, in_$p18: ref, in_$i22: i64, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$i43: i32, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i29: i32, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i21: i32, in_$p17: ref) returns (out_$i22: i64, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$i43: i32, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i29: i32, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i21: i32);



implementation hid_find_field_early_loop_$bb4(in_$i1: i32, in_$i2: i32, in_$i15: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i22: i64, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$i43: i32, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i29: i32, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i21: i32, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p17: ref) returns (out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i22: i64, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$i43: i32, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i29: i32, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i21: i32, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p17: ref)
{

  entry:
    out_$p18, out_$i19, out_$i20, out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p30, out_$p31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i45, out_$i46, out_$i47, out_$i29, out_$i48, out_$i49, out_$i50, out_$i21, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p17 := in_$p18, in_$i19, in_$i20, in_$i22, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p30, in_$p31, in_$i32, in_$p34, in_$i35, in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$i41, in_$p42, in_$i43, in_$i45, in_$i46, in_$i47, in_$i29, in_$i48, in_$i49, in_$i50, in_$i21, in_$p52, in_$p53, in_$p54, in_$p55, in_$i56, in_$i57, in_$p17;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_9799;

  $bb29:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$p17 := out_$p53;
    goto $bb29_dummy;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i64(out_$i56, in_$i15);
    goto corral_source_split_9857;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(out_$p55);
    goto corral_source_split_9856;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p54, $mul.ref(0, 2088)), $mul.ref(0, 1));
    goto corral_source_split_9855;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(out_$p53);
    goto corral_source_split_9854;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_9853;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 2088)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9852;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i20 == 1);
    goto $bb8;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb27:
    assume !(out_$i50 == 1);
    goto corral_source_split_9850;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    out_$i50 := $ult.i32(out_$i48, out_$i49);
    goto corral_source_split_9848;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.0, out_$p18);
    goto corral_source_split_9847;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i21, 1);
    call {:si_unique_call 1378} {:cexpr "i"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_9846;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb13;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb24:
    assume !(out_$i47 == 1);
    goto corral_source_split_9844;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    out_$i47 := $ult.i32(out_$i45, out_$i46);
    goto corral_source_split_9842;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, out_$p26);
    goto corral_source_split_9841;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i29, 1);
    call {:si_unique_call 1377} {:cexpr "j"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_9840;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb18;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb18;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    out_$p42, out_$i43 := out_$p25, out_$i29;
    assume true;
    goto $bb20;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, in_$i2);
    goto corral_source_split_9833;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    out_$i40 := $and.i32(out_$i39, 65535);
    goto corral_source_split_9832;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    goto corral_source_split_9831;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p31, $mul.ref(out_$i32, 20)), $mul.ref(0, 1));
    goto corral_source_split_9830;

  $bb16:
    assume out_$i37 == 1;
    goto corral_source_split_9829;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, in_$i1);
    goto corral_source_split_9827;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    out_$i36 := $and.i32(out_$i35, $sub.i32(0, 65536));
    goto corral_source_split_9826;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, out_$p34);
    goto corral_source_split_9825;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p31, $mul.ref(out_$i32, 20)), $mul.ref(0, 1));
    goto corral_source_split_9824;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    goto corral_source_split_9823;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i29);
    goto corral_source_split_9822;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_9821;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p25, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_9820;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb14:
    call out_$p30, out_$p31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i45, out_$i46, out_$i47, out_$i29 := hid_find_field_early_loop_$bb14(in_$i1, in_$i2, out_$p25, out_$p26, out_$p30, out_$p31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i45, out_$i46, out_$i47, out_$i29);
    goto $bb14_last;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9818;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    out_$i29 := 0;
    goto $bb14;

  $bb23:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := out_$i45;
    assume false;
    return;

  $bb11:
    assume out_$i28 == 1;
    goto corral_source_split_9816;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    out_$i28 := $ult.i32(0, out_$i27);
    goto corral_source_split_9814;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_9813;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p25, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_9812;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_9811;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref(out_$i22, 8));
    goto corral_source_split_9810;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i21);
    goto corral_source_split_9809;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p30, out_$p31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i45, out_$i46, out_$i47, out_$i29, out_$i48, out_$i49, out_$i50, out_$i21 := hid_find_field_early_loop_$bb9(in_$i1, in_$i2, out_$p18, out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p30, out_$p31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i45, out_$i46, out_$i47, out_$i29, out_$i48, out_$i49, out_$i50, out_$i21, out_$p17);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9807;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    out_$i21 := 0;
    goto $bb9;

  $bb26:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := out_$i48;
    assume false;
    return;

  $bb6:
    assume out_$i20 == 1;
    goto corral_source_split_9805;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    out_$i20 := $ult.i32(0, out_$i19);
    goto corral_source_split_9803;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    goto corral_source_split_9802;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p17, $mul.ref(0, 2088)), $mul.ref(2072, 1));
    goto corral_source_split_9801;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p18, out_$i19, out_$i20, out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p30, out_$p31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i45, out_$i46, out_$i47, out_$i29, out_$i48, out_$i49, out_$i50, out_$i21, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p17 := hid_find_field_early_loop_$bb4(in_$i1, in_$i2, in_$i15, out_$p18, out_$i19, out_$i20, out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p30, out_$p31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i45, out_$i46, out_$i47, out_$i29, out_$i48, out_$i49, out_$i50, out_$i21, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p17);
    return;

  exit:
    return;
}



procedure hid_find_field_early_loop_$bb4(in_$i1: i32, in_$i2: i32, in_$i15: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i22: i64, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$i43: i32, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i29: i32, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i21: i32, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p17: ref) returns (out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i22: i64, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$i43: i32, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i29: i32, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i21: i32, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p17: ref);



implementation hiddev_read_loop_$bb44(in_$p1: ref, in_$i2: i64, in_$p6: ref, in_$p20: ref, in_$i25: i32, in_$p85: ref, in_$p87: ref, in_$p92: ref, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$i98: i64, in_$p101: ref, in_$i102: i32, in_$i103: i1, in_$p104: ref, in_$i105: i32, in_$i106: i64, in_$p109: ref, in_$i110: i32, in_$p111: ref, in_$p112: ref, in_$i113: i32, in_$i114: i64, in_$p117: ref, in_$i118: i32, in_$p119: ref, in_$i120: i64, in_$p121: ref, in_$p122: ref, in_$i123: i64, in_$i124: i1, in_$i126: i32, in_$i127: i32, in_$p129: ref, in_$i130: i32, in_$i131: i64, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i32, in_$i139: i32, in_$i140: i1, in_$i141: i64, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$i146: i32, in_$i147: i64, in_$p148: ref, in_$i149: i64, in_$i150: i1, in_$i152: i32, in_$i153: i32, in_$i128: i32, in_$p154: ref, in_$i155: i32, in_$i156: i32, in_$i157: i32, in_$p158: ref, in_$i159: i32, in_$i160: i32, in_$i161: i1, in_$i91: i32, in_$i163: i32, in_$i164: i64, in_$i165: i1, in_$i166: i32, in_$i162: i32) returns (out_$p92: ref, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$i98: i64, out_$p101: ref, out_$i102: i32, out_$i103: i1, out_$p104: ref, out_$i105: i32, out_$i106: i64, out_$p109: ref, out_$i110: i32, out_$p111: ref, out_$p112: ref, out_$i113: i32, out_$i114: i64, out_$p117: ref, out_$i118: i32, out_$p119: ref, out_$i120: i64, out_$p121: ref, out_$p122: ref, out_$i123: i64, out_$i124: i1, out_$i126: i32, out_$i127: i32, out_$p129: ref, out_$i130: i32, out_$i131: i64, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i32, out_$i139: i32, out_$i140: i1, out_$i141: i64, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$i146: i32, out_$i147: i64, out_$p148: ref, out_$i149: i64, out_$i150: i1, out_$i152: i32, out_$i153: i32, out_$i128: i32, out_$p154: ref, out_$i155: i32, out_$i156: i32, out_$i157: i32, out_$p158: ref, out_$i159: i32, out_$i160: i32, out_$i161: i1, out_$i91: i32, out_$i163: i32, out_$i164: i64, out_$i165: i1, out_$i166: i32, out_$i162: i32)
{

  entry:
    out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p109, out_$i110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p117, out_$i118, out_$p119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i126, out_$i127, out_$p129, out_$i130, out_$i131, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$p143, out_$p144, out_$p145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$i152, out_$i153, out_$i128, out_$p154, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i91, out_$i163, out_$i164, out_$i165, out_$i166, out_$i162 := in_$p92, in_$i93, in_$i94, in_$i95, in_$p96, in_$i97, in_$i98, in_$p101, in_$i102, in_$i103, in_$p104, in_$i105, in_$i106, in_$p109, in_$i110, in_$p111, in_$p112, in_$i113, in_$i114, in_$p117, in_$i118, in_$p119, in_$i120, in_$p121, in_$p122, in_$i123, in_$i124, in_$i126, in_$i127, in_$p129, in_$i130, in_$i131, in_$p134, in_$i135, in_$i136, in_$p137, in_$i138, in_$i139, in_$i140, in_$i141, in_$p142, in_$p143, in_$p144, in_$p145, in_$i146, in_$i147, in_$p148, in_$i149, in_$i150, in_$i152, in_$i153, in_$i128, in_$p154, in_$i155, in_$i156, in_$i157, in_$p158, in_$i159, in_$i160, in_$i161, in_$i91, in_$i163, in_$i164, in_$i165, in_$i166, in_$i162;
    goto $bb44, exit;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_10028;

  $bb64:
    assume out_$i161 == 1;
    assume {:verifier.code 0} true;
    out_$i91 := out_$i128;
    goto $bb64_dummy;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    out_$i162 := out_$i128;
    assume true;
    goto $bb64;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    out_$i161 := $ne.i32(out_$i159, out_$i160);
    goto corral_source_split_10092;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    out_$i160 := $load.i32($M.0, in_$p87);
    goto corral_source_split_10091;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    out_$i159 := $load.i32($M.0, in_$p85);
    goto corral_source_split_10090;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p158, out_$i157);
    goto corral_source_split_10089;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_10088;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    out_$i157 := $and.i32(out_$i156, 2047);
    goto corral_source_split_10087;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    out_$i156 := $add.i32(out_$i155, 1);
    goto corral_source_split_10086;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    out_$i155 := $load.i32($M.0, out_$p154);
    goto corral_source_split_10085;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_10084;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_10083;

  $bb63:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i128 := out_$i153;
    goto $bb54;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    out_$i128 := out_$i127;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_10081;

  $bb49:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    out_$i127 := out_$i91;
    goto $bb53;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    out_$i127 := out_$i126;
    goto $bb53;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i126 := $add.i32(out_$i91, 8);
    call {:si_unique_call 1420} {:cexpr "retval"} boogie_si_record_i32(out_$i126);
    goto corral_source_split_10079;

  $bb51:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    out_$i124 := $ne.i64(out_$i123, 0);
    goto corral_source_split_10073;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} out_$i123 := copy_to_user(out_$p121, out_$p122, 8);
    call {:si_unique_call 1418} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i123);
    goto corral_source_split_10072;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    out_$p122 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_10071;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref(in_$p1, $mul.ref(out_$i120, 1));
    goto corral_source_split_10070;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    out_$i120 := $sext.i32.i64(out_$i91);
    goto corral_source_split_10069;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p119, out_$i118);
    goto corral_source_split_10068;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p6, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_10067;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i32($M.0, out_$p117);
    goto corral_source_split_10066;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref($add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(0, 1)), $mul.ref(out_$i114, 24)), $mul.ref(20, 1));
    goto corral_source_split_10065;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    out_$i114 := $sext.i32.i64(out_$i113);
    goto corral_source_split_10064;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i32($M.0, out_$p112);
    goto corral_source_split_10063;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_10062;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p111, out_$i110);
    goto corral_source_split_10061;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(in_$p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_10060;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.0, out_$p109);
    goto corral_source_split_10059;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref($add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(0, 1)), $mul.ref(out_$i106, 24)), $mul.ref(16, 1));
    goto corral_source_split_10058;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    out_$i106 := $sext.i32.i64(out_$i105);
    goto corral_source_split_10057;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i32($M.0, out_$p104);
    goto corral_source_split_10056;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_10055;

  $bb48:
    assume out_$i103 == 1;
    goto corral_source_split_10054;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    out_$i103 := $ne.i32(out_$i102, $sub.i32(0, 1));
    goto corral_source_split_10044;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i32($M.0, out_$p101);
    goto corral_source_split_10043;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref($add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(0, 1)), $mul.ref(out_$i98, 24)), $mul.ref(8, 1));
    goto corral_source_split_10042;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    out_$i98 := $sext.i32.i64(out_$i97);
    goto corral_source_split_10041;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i32($M.0, out_$p96);
    goto corral_source_split_10040;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_10039;

  $bb46:
    assume out_$i95 == 1;
    goto corral_source_split_10038;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i94, 0);
    goto corral_source_split_10036;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    out_$i94 := $and.i32(out_$i93, 1);
    goto corral_source_split_10035;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i32($M.0, out_$p92);
    goto corral_source_split_10034;

  $bb45:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49160, 1));
    goto corral_source_split_10033;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb66:
    assume out_$i165 == 1;
    goto corral_source_split_10119;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    out_$i166 := out_$i91;
    assume true;
    goto $bb66;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    out_$i165 := $ule.i64(out_$i164, in_$i2);
    goto corral_source_split_10031;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    out_$i164 := $sext.i32.i64(out_$i163);
    goto corral_source_split_10030;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    out_$i163 := $add.i32(out_$i91, in_$i25);
    goto corral_source_split_10029;

  $bb59:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    out_$i153 := out_$i91;
    goto $bb63;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    out_$i153 := out_$i152;
    goto $bb63;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i152 := $add.i32(out_$i91, 24);
    call {:si_unique_call 1424} {:cexpr "retval"} boogie_si_record_i32(out_$i152);
    goto corral_source_split_10115;

  $bb61:
    assume !(out_$i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    out_$i150 := $ne.i64(out_$i149, 0);
    goto corral_source_split_10103;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} out_$i149 := copy_to_user(out_$p142, out_$p148, 24);
    call {:si_unique_call 1422} {:cexpr "tmp___9"} boogie_si_record_i64(out_$i149);
    goto corral_source_split_10102;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref(out_$p144, $mul.ref(out_$i147, 1));
    goto corral_source_split_10101;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    out_$i147 := $sext.i32.i64(out_$i146);
    goto corral_source_split_10100;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    out_$i146 := $load.i32($M.0, out_$p145);
    goto corral_source_split_10099;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_10098;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    out_$p144 := $bitcast.ref.ref(out_$p143);
    goto corral_source_split_10097;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(0, 1));
    goto corral_source_split_10096;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref(in_$p1, $mul.ref(out_$i141, 1));
    goto corral_source_split_10095;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i141 := $sext.i32.i64(out_$i91);
    goto corral_source_split_10094;

  $bb58:
    assume {:verifier.code 0} true;
    assume out_$i140 == 1;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    assume out_$i136 == 1;
    goto $bb56;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb57;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    out_$i136 := $ne.i32(out_$i135, $sub.i32(0, 1));
    goto corral_source_split_10052;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i32($M.0, out_$p134);
    goto corral_source_split_10051;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref($add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(0, 1)), $mul.ref(out_$i131, 24)), $mul.ref(8, 1));
    goto corral_source_split_10050;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    out_$i131 := $sext.i32.i64(out_$i130);
    goto corral_source_split_10049;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i32($M.0, out_$p129);
    goto corral_source_split_10048;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_10047;

  $bb47:
    assume !(out_$i95 == 1);
    goto corral_source_split_10046;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    out_$i140 := $ne.i32(out_$i139, 0);
    goto corral_source_split_10109;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    out_$i139 := $and.i32(out_$i138, 2);
    goto corral_source_split_10108;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i32($M.0, out_$p137);
    goto corral_source_split_10107;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49160, 1));
    goto corral_source_split_10106;

  $bb57:
    assume !(out_$i136 == 1);
    goto corral_source_split_10105;

  $bb64_dummy:
    call {:si_unique_call 1} out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p109, out_$i110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p117, out_$i118, out_$p119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i126, out_$i127, out_$p129, out_$i130, out_$i131, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$p143, out_$p144, out_$p145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$i152, out_$i153, out_$i128, out_$p154, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i91, out_$i163, out_$i164, out_$i165, out_$i166, out_$i162 := hiddev_read_loop_$bb44(in_$p1, in_$i2, in_$p6, in_$p20, in_$i25, in_$p85, in_$p87, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p109, out_$i110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p117, out_$i118, out_$p119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i126, out_$i127, out_$p129, out_$i130, out_$i131, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$p143, out_$p144, out_$p145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$i152, out_$i153, out_$i128, out_$p154, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i91, out_$i163, out_$i164, out_$i165, out_$i166, out_$i162);
    return;

  exit:
    return;
}



procedure hiddev_read_loop_$bb44(in_$p1: ref, in_$i2: i64, in_$p6: ref, in_$p20: ref, in_$i25: i32, in_$p85: ref, in_$p87: ref, in_$p92: ref, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$i98: i64, in_$p101: ref, in_$i102: i32, in_$i103: i1, in_$p104: ref, in_$i105: i32, in_$i106: i64, in_$p109: ref, in_$i110: i32, in_$p111: ref, in_$p112: ref, in_$i113: i32, in_$i114: i64, in_$p117: ref, in_$i118: i32, in_$p119: ref, in_$i120: i64, in_$p121: ref, in_$p122: ref, in_$i123: i64, in_$i124: i1, in_$i126: i32, in_$i127: i32, in_$p129: ref, in_$i130: i32, in_$i131: i64, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i32, in_$i139: i32, in_$i140: i1, in_$i141: i64, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$i146: i32, in_$i147: i64, in_$p148: ref, in_$i149: i64, in_$i150: i1, in_$i152: i32, in_$i153: i32, in_$i128: i32, in_$p154: ref, in_$i155: i32, in_$i156: i32, in_$i157: i32, in_$p158: ref, in_$i159: i32, in_$i160: i32, in_$i161: i1, in_$i91: i32, in_$i163: i32, in_$i164: i64, in_$i165: i1, in_$i166: i32, in_$i162: i32) returns (out_$p92: ref, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$i98: i64, out_$p101: ref, out_$i102: i32, out_$i103: i1, out_$p104: ref, out_$i105: i32, out_$i106: i64, out_$p109: ref, out_$i110: i32, out_$p111: ref, out_$p112: ref, out_$i113: i32, out_$i114: i64, out_$p117: ref, out_$i118: i32, out_$p119: ref, out_$i120: i64, out_$p121: ref, out_$p122: ref, out_$i123: i64, out_$i124: i1, out_$i126: i32, out_$i127: i32, out_$p129: ref, out_$i130: i32, out_$i131: i64, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i32, out_$i139: i32, out_$i140: i1, out_$i141: i64, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$i146: i32, out_$i147: i64, out_$p148: ref, out_$i149: i64, out_$i150: i1, out_$i152: i32, out_$i153: i32, out_$i128: i32, out_$p154: ref, out_$i155: i32, out_$i156: i32, out_$i157: i32, out_$p158: ref, out_$i159: i32, out_$i160: i32, out_$i161: i1, out_$i91: i32, out_$i163: i32, out_$i164: i64, out_$i165: i1, out_$i166: i32, out_$i162: i32);
  modifies $M.0;



implementation hiddev_read_loop_$bb18(in_$p0: ref, in_$p5: ref, in_$p20: ref, in_$p43: ref, in_$p45: ref, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p72: ref, in_$i73: i64, in_$i74: i32, in_$i75: i32, in_$i76: i1) returns (out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p72: ref, out_$i73: i64, out_$i74: i32, out_$i75: i32, out_$i76: i1)
{

  entry:
    out_$p48, out_$i49, out_$i50, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76 := in_$p48, in_$i49, in_$i50, in_$p52, in_$p53, in_$p54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i59, in_$i60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p68, in_$p69, in_$p70, in_$i71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb34:
    assume {:verifier.code 0} true;
    assume out_$i76 == 1;
    goto $bb34_dummy;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i74, out_$i75);
    goto corral_source_split_10008;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.0, in_$p45);
    goto corral_source_split_10007;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.0, in_$p43);
    goto corral_source_split_10006;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    $M.45 := $store.i64($M.45, in_$p5, out_$i73);
    goto corral_source_split_10004;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p70, $mul.ref(0, 11712)), $mul.ref(0, 1));
    call {:si_unique_call 1415} out_$i73 := devirtbounce.5(0, out_$p72, out_$i71, out_$p72);
    goto corral_source_split_10003;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i64($M.45, in_$p5);
    goto corral_source_split_10002;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} out_$p70 := get_current();
    goto corral_source_split_10001;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    $M.45 := $store.i64($M.45, in_$p5, 1);
    goto corral_source_split_10000;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    $M.44 := $store.i64($M.44, out_$p69, 0);
    goto corral_source_split_9999;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p68, $mul.ref(0, 11712)), $mul.ref(11696, 1));
    goto corral_source_split_9998;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} out_$p68 := get_current();
    goto corral_source_split_9997;

  $bb31:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i32(out_$i63, 0);
    goto corral_source_split_9989;

  SeqInstr_279:
    call {:si_unique_call 1411} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_9988;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} out_$i63 := ldv_mutex_lock_interruptible_101(out_$p62);
    goto SeqInstr_278;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49200, 1));
    goto corral_source_split_9987;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} schedule();
    goto corral_source_split_9986;

  SeqInstr_276:
    goto corral_source_split_9985;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} ldv_mutex_unlock_100(out_$p61);
    goto SeqInstr_275;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49200, 1));
    goto corral_source_split_9984;

  $bb28:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i32(out_$i59, 0);
    goto corral_source_split_9980;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    out_$i59 := $and.i32(out_$i58, 2048);
    goto corral_source_split_9979;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.0, out_$p57);
    goto corral_source_split_9978;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(128, 1));
    goto corral_source_split_9977;

  $bb25:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i55, 0);
    goto corral_source_split_9973;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.0, out_$p54);
    goto corral_source_split_9972;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p53, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_9971;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_9970;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_9969;

  $bb21:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_9959;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} out_$i49 := signal_pending(out_$p48);
    call {:si_unique_call 1406} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_9958;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} out_$p48 := get_current();
    goto corral_source_split_9957;

  $bb34_dummy:
    call {:si_unique_call 1} out_$p48, out_$i49, out_$i50, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76 := hiddev_read_loop_$bb18(in_$p0, in_$p5, in_$p20, in_$p43, in_$p45, out_$p48, out_$i49, out_$i50, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76);
    return;

  exit:
    return;
}



procedure hiddev_read_loop_$bb18(in_$p0: ref, in_$p5: ref, in_$p20: ref, in_$p43: ref, in_$p45: ref, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p72: ref, in_$i73: i64, in_$i74: i32, in_$i75: i32, in_$i76: i1) returns (out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p72: ref, out_$i73: i64, out_$i74: i32, out_$i75: i32, out_$i76: i1);
  modifies $M.45, $M.44, $M.46, assertsPassed;



implementation hiddev_read_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$i2: i64, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p20: ref, in_$i25: i32, in_$p35: ref, in_$i36: i32, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p72: ref, in_$i73: i64, in_$i74: i32, in_$i75: i32, in_$i76: i1, in_$i51: i32, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$p85: ref, in_$i86: i32, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$p92: ref, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$i98: i64, in_$p101: ref, in_$i102: i32, in_$i103: i1, in_$p104: ref, in_$i105: i32, in_$i106: i64, in_$p109: ref, in_$i110: i32, in_$p111: ref, in_$p112: ref, in_$i113: i32, in_$i114: i64, in_$p117: ref, in_$i118: i32, in_$p119: ref, in_$i120: i64, in_$p121: ref, in_$p122: ref, in_$i123: i64, in_$i124: i1, in_$i126: i32, in_$i127: i32, in_$p129: ref, in_$i130: i32, in_$i131: i64, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i32, in_$i139: i32, in_$i140: i1, in_$i141: i64, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$i146: i32, in_$i147: i64, in_$p148: ref, in_$i149: i64, in_$i150: i1, in_$i152: i32, in_$i153: i32, in_$i128: i32, in_$p154: ref, in_$i155: i32, in_$i156: i32, in_$i157: i32, in_$p158: ref, in_$i159: i32, in_$i160: i32, in_$i161: i1, in_$i91: i32, in_$i163: i32, in_$i164: i64, in_$i165: i1, in_$i166: i32, in_$i162: i32, in_$i90: i32, in_$i167: i1, in_$i34: i32, in_$i168: i32) returns (out_$p35: ref, out_$i36: i32, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p72: ref, out_$i73: i64, out_$i74: i32, out_$i75: i32, out_$i76: i1, out_$i51: i32, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$p85: ref, out_$i86: i32, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$p92: ref, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$i98: i64, out_$p101: ref, out_$i102: i32, out_$i103: i1, out_$p104: ref, out_$i105: i32, out_$i106: i64, out_$p109: ref, out_$i110: i32, out_$p111: ref, out_$p112: ref, out_$i113: i32, out_$i114: i64, out_$p117: ref, out_$i118: i32, out_$p119: ref, out_$i120: i64, out_$p121: ref, out_$p122: ref, out_$i123: i64, out_$i124: i1, out_$i126: i32, out_$i127: i32, out_$p129: ref, out_$i130: i32, out_$i131: i64, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i32, out_$i139: i32, out_$i140: i1, out_$i141: i64, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$i146: i32, out_$i147: i64, out_$p148: ref, out_$i149: i64, out_$i150: i1, out_$i152: i32, out_$i153: i32, out_$i128: i32, out_$p154: ref, out_$i155: i32, out_$i156: i32, out_$i157: i32, out_$p158: ref, out_$i159: i32, out_$i160: i32, out_$i161: i1, out_$i91: i32, out_$i163: i32, out_$i164: i64, out_$i165: i1, out_$i166: i32, out_$i162: i32, out_$i90: i32, out_$i167: i1, out_$i34: i32, out_$i168: i32)
{

  entry:
    out_$p35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i51, out_$p77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p109, out_$i110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p117, out_$i118, out_$p119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i126, out_$i127, out_$p129, out_$i130, out_$i131, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$p143, out_$p144, out_$p145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$i152, out_$i153, out_$i128, out_$p154, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i91, out_$i163, out_$i164, out_$i165, out_$i166, out_$i162, out_$i90, out_$i167, out_$i34, out_$i168 := in_$p35, in_$i36, in_$p37, in_$i38, in_$i39, in_$p40, in_$p41, in_$p42, in_$p43, in_$i44, in_$p45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$p52, in_$p53, in_$p54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i59, in_$i60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p68, in_$p69, in_$p70, in_$i71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i51, in_$p77, in_$p78, in_$p79, in_$i80, in_$i81, in_$i82, in_$p85, in_$i86, in_$p87, in_$i88, in_$i89, in_$p92, in_$i93, in_$i94, in_$i95, in_$p96, in_$i97, in_$i98, in_$p101, in_$i102, in_$i103, in_$p104, in_$i105, in_$i106, in_$p109, in_$i110, in_$p111, in_$p112, in_$i113, in_$i114, in_$p117, in_$i118, in_$p119, in_$i120, in_$p121, in_$p122, in_$i123, in_$i124, in_$i126, in_$i127, in_$p129, in_$i130, in_$i131, in_$p134, in_$i135, in_$i136, in_$p137, in_$i138, in_$i139, in_$i140, in_$i141, in_$p142, in_$p143, in_$p144, in_$p145, in_$i146, in_$i147, in_$p148, in_$i149, in_$i150, in_$i152, in_$i153, in_$i128, in_$p154, in_$i155, in_$i156, in_$i157, in_$p158, in_$i159, in_$i160, in_$i161, in_$i91, in_$i163, in_$i164, in_$i165, in_$i166, in_$i162, in_$i90, in_$i167, in_$i34, in_$i168;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_9936;

  $bb69:
    assume out_$i167 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := out_$i90;
    goto $bb69_dummy;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    out_$i168 := out_$i90;
    assume true;
    goto $bb69;

  $bb68:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i32(out_$i90, 0);
    goto corral_source_split_10123;

  $bb43:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb42:
    assume {:verifier.code 0} true;
    assume !(out_$i89 == 1);
    goto $bb43;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    out_$i90 := out_$i166;
    goto $bb43;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    out_$i90 := out_$i162;
    goto $bb43;

  $bb65:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10117;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    out_$i162 := out_$i128;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    out_$i161 := $ne.i32(out_$i159, out_$i160);
    goto corral_source_split_10092;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    out_$i160 := $load.i32($M.0, out_$p87);
    goto corral_source_split_10091;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    out_$i159 := $load.i32($M.0, out_$p85);
    goto corral_source_split_10090;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p158, out_$i157);
    goto corral_source_split_10089;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_10088;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    out_$i157 := $and.i32(out_$i156, 2047);
    goto corral_source_split_10087;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    out_$i156 := $add.i32(out_$i155, 1);
    goto corral_source_split_10086;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    out_$i155 := $load.i32($M.0, out_$p154);
    goto corral_source_split_10085;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_10084;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_10083;

  $bb63:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i128 := out_$i153;
    goto $bb54;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    out_$i128 := out_$i127;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_10081;

  $bb49:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    out_$i127 := out_$i91;
    goto $bb53;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    out_$i127 := out_$i126;
    goto $bb53;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i126 := $add.i32(out_$i91, 8);
    call {:si_unique_call 1420} {:cexpr "retval"} boogie_si_record_i32(out_$i126);
    goto corral_source_split_10079;

  $bb51:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    out_$i124 := $ne.i64(out_$i123, 0);
    goto corral_source_split_10073;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} out_$i123 := copy_to_user(out_$p121, out_$p122, 8);
    call {:si_unique_call 1418} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i123);
    goto corral_source_split_10072;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    out_$p122 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_10071;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref(in_$p1, $mul.ref(out_$i120, 1));
    goto corral_source_split_10070;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    out_$i120 := $sext.i32.i64(out_$i91);
    goto corral_source_split_10069;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p119, out_$i118);
    goto corral_source_split_10068;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p6, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_10067;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i32($M.0, out_$p117);
    goto corral_source_split_10066;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref($add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(0, 1)), $mul.ref(out_$i114, 24)), $mul.ref(20, 1));
    goto corral_source_split_10065;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    out_$i114 := $sext.i32.i64(out_$i113);
    goto corral_source_split_10064;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i32($M.0, out_$p112);
    goto corral_source_split_10063;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_10062;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p111, out_$i110);
    goto corral_source_split_10061;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(in_$p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_10060;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.0, out_$p109);
    goto corral_source_split_10059;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref($add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(0, 1)), $mul.ref(out_$i106, 24)), $mul.ref(16, 1));
    goto corral_source_split_10058;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    out_$i106 := $sext.i32.i64(out_$i105);
    goto corral_source_split_10057;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i32($M.0, out_$p104);
    goto corral_source_split_10056;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_10055;

  $bb48:
    assume out_$i103 == 1;
    goto corral_source_split_10054;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    out_$i103 := $ne.i32(out_$i102, $sub.i32(0, 1));
    goto corral_source_split_10044;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i32($M.0, out_$p101);
    goto corral_source_split_10043;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref($add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(0, 1)), $mul.ref(out_$i98, 24)), $mul.ref(8, 1));
    goto corral_source_split_10042;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    out_$i98 := $sext.i32.i64(out_$i97);
    goto corral_source_split_10041;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i32($M.0, out_$p96);
    goto corral_source_split_10040;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_10039;

  $bb46:
    assume out_$i95 == 1;
    goto corral_source_split_10038;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i94, 0);
    goto corral_source_split_10036;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    out_$i94 := $and.i32(out_$i93, 1);
    goto corral_source_split_10035;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i32($M.0, out_$p92);
    goto corral_source_split_10034;

  $bb45:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49160, 1));
    goto corral_source_split_10033;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb66:
    assume out_$i165 == 1;
    goto corral_source_split_10119;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    out_$i166 := out_$i91;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    out_$i165 := $ule.i64(out_$i164, in_$i2);
    goto corral_source_split_10031;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    out_$i164 := $sext.i32.i64(out_$i163);
    goto corral_source_split_10030;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    out_$i163 := $add.i32(out_$i91, in_$i25);
    goto corral_source_split_10029;

  $bb44:
    call out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p109, out_$i110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p117, out_$i118, out_$p119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i126, out_$i127, out_$p129, out_$i130, out_$i131, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$p143, out_$p144, out_$p145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$i152, out_$i153, out_$i128, out_$p154, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i91, out_$i163, out_$i164, out_$i165, out_$i166, out_$i162 := hiddev_read_loop_$bb44(in_$p1, in_$i2, in_$p6, in_$p20, in_$i25, out_$p85, out_$p87, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p109, out_$i110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p117, out_$i118, out_$p119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i126, out_$i127, out_$p129, out_$i130, out_$i131, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$p143, out_$p144, out_$p145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$i152, out_$i153, out_$i128, out_$p154, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i91, out_$i163, out_$i164, out_$i165, out_$i166, out_$i162);
    goto $bb44_last;

  $bb44_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10028;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    out_$i91 := out_$i80;
    goto $bb44;

  $bb64:
    assume out_$i161 == 1;
    assume {:verifier.code 0} true;
    out_$i91 := out_$i128;
    assume false;
    return;

  $bb41:
    assume out_$i89 == 1;
    goto corral_source_split_10026;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    out_$i90 := out_$i80;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i32(out_$i86, out_$i88);
    goto corral_source_split_10024;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.0, out_$p87);
    goto corral_source_split_10023;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_10022;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i32($M.0, out_$p85);
    goto corral_source_split_10021;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49152, 1));
    goto corral_source_split_10020;

  $bb39:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    out_$i82 := out_$i80;
    assume true;
    goto $bb39;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    out_$i81 := $ne.i32(out_$i80, 0);
    goto corral_source_split_10013;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_10012;

  $bb14:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i80 := out_$i34;
    goto $bb37;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    out_$i80 := out_$i51;
    goto $bb37;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} finish_wait(out_$p79, in_$p4);
    goto corral_source_split_9967;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p78, $mul.ref(0, 352)), $mul.ref(168, 1));
    goto corral_source_split_9966;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.0, out_$p77);
    goto corral_source_split_9965;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_9964;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_9963;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i34;
    goto $bb22;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    out_$i51 := $sub.i32(0, 11);
    goto $bb22;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    out_$i51 := $sub.i32(0, 5);
    goto $bb22;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    out_$i51 := $sub.i32(0, 512);
    goto $bb22;

  $bb20:
    assume out_$i50 == 1;
    goto corral_source_split_9961;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_9959;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} out_$i49 := signal_pending(out_$p48);
    call {:si_unique_call 1406} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_9958;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} out_$p48 := get_current();
    goto corral_source_split_9957;

  $bb18:
    call out_$p48, out_$i49, out_$i50, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76 := hiddev_read_loop_$bb18(in_$p0, in_$p5, in_$p20, out_$p43, out_$p45, out_$p48, out_$i49, out_$i50, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76);
    goto $bb18_last;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb34:
    assume {:verifier.code 0} true;
    assume out_$i76 == 1;
    assume false;
    return;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i74, out_$i75);
    goto corral_source_split_10008;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.0, out_$p45);
    goto corral_source_split_10007;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.0, out_$p43);
    goto corral_source_split_10006;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    $M.45 := $store.i64($M.45, in_$p5, out_$i73);
    goto corral_source_split_10004;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p70, $mul.ref(0, 11712)), $mul.ref(0, 1));
    call {:si_unique_call 1415} out_$i73 := devirtbounce.5(0, out_$p72, out_$i71, out_$p72);
    goto corral_source_split_10003;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i64($M.45, in_$p5);
    goto corral_source_split_10002;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} out_$p70 := get_current();
    goto corral_source_split_10001;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    $M.45 := $store.i64($M.45, in_$p5, 1);
    goto corral_source_split_10000;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    $M.44 := $store.i64($M.44, out_$p69, 0);
    goto corral_source_split_9999;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p68, $mul.ref(0, 11712)), $mul.ref(11696, 1));
    goto corral_source_split_9998;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} out_$p68 := get_current();
    goto corral_source_split_9997;

  $bb31:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i32(out_$i63, 0);
    goto corral_source_split_9989;

  SeqInstr_279:
    call {:si_unique_call 1411} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_9988;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} out_$i63 := ldv_mutex_lock_interruptible_101(out_$p62);
    goto SeqInstr_278;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49200, 1));
    goto corral_source_split_9987;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} schedule();
    goto corral_source_split_9986;

  SeqInstr_276:
    goto corral_source_split_9985;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} ldv_mutex_unlock_100(out_$p61);
    goto SeqInstr_275;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49200, 1));
    goto corral_source_split_9984;

  $bb28:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i32(out_$i59, 0);
    goto corral_source_split_9980;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    out_$i59 := $and.i32(out_$i58, 2048);
    goto corral_source_split_9979;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.0, out_$p57);
    goto corral_source_split_9978;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(128, 1));
    goto corral_source_split_9977;

  $bb25:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i55, 0);
    goto corral_source_split_9973;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.0, out_$p54);
    goto corral_source_split_9972;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p53, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_9971;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_9970;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_9969;

  $bb21:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb15:
    assume out_$i47 == 1;
    goto corral_source_split_9955;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i44, out_$i46);
    goto corral_source_split_9953;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, out_$p45);
    goto corral_source_split_9952;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_9951;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, out_$p43);
    goto corral_source_split_9950;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49152, 1));
    goto corral_source_split_9949;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} prepare_to_wait(out_$p42, in_$p4, 1);
    goto corral_source_split_9948;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p41, $mul.ref(0, 352)), $mul.ref(168, 1));
    goto corral_source_split_9947;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_9946;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49176, 1));
    goto corral_source_split_9945;

  $bb13:
    assume out_$i39 == 1;
    goto corral_source_split_9944;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i36, out_$i38);
    goto corral_source_split_9942;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, out_$p37);
    goto corral_source_split_9941;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_9940;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, out_$p35);
    goto corral_source_split_9939;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49152, 1));
    goto corral_source_split_9938;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb24:
    assume out_$i56 == 1;
    goto corral_source_split_9975;

  $bb27:
    assume out_$i60 == 1;
    goto corral_source_split_9982;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i47 == 1);
    goto $bb17;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb35:
    assume !(out_$i76 == 1);
    goto corral_source_split_10010;

  $bb59:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    out_$i153 := out_$i91;
    goto $bb63;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    out_$i153 := out_$i152;
    goto $bb63;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i152 := $add.i32(out_$i91, 24);
    call {:si_unique_call 1424} {:cexpr "retval"} boogie_si_record_i32(out_$i152);
    goto corral_source_split_10115;

  $bb61:
    assume !(out_$i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    out_$i150 := $ne.i64(out_$i149, 0);
    goto corral_source_split_10103;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} out_$i149 := copy_to_user(out_$p142, out_$p148, 24);
    call {:si_unique_call 1422} {:cexpr "tmp___9"} boogie_si_record_i64(out_$i149);
    goto corral_source_split_10102;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref(out_$p144, $mul.ref(out_$i147, 1));
    goto corral_source_split_10101;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    out_$i147 := $sext.i32.i64(out_$i146);
    goto corral_source_split_10100;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    out_$i146 := $load.i32($M.0, out_$p145);
    goto corral_source_split_10099;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_10098;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    out_$p144 := $bitcast.ref.ref(out_$p143);
    goto corral_source_split_10097;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(0, 1));
    goto corral_source_split_10096;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref(in_$p1, $mul.ref(out_$i141, 1));
    goto corral_source_split_10095;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i141 := $sext.i32.i64(out_$i91);
    goto corral_source_split_10094;

  $bb58:
    assume {:verifier.code 0} true;
    assume out_$i140 == 1;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    assume out_$i136 == 1;
    goto $bb56;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb57;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    out_$i136 := $ne.i32(out_$i135, $sub.i32(0, 1));
    goto corral_source_split_10052;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i32($M.0, out_$p134);
    goto corral_source_split_10051;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref($add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(0, 1)), $mul.ref(out_$i131, 24)), $mul.ref(8, 1));
    goto corral_source_split_10050;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    out_$i131 := $sext.i32.i64(out_$i130);
    goto corral_source_split_10049;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i32($M.0, out_$p129);
    goto corral_source_split_10048;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49156, 1));
    goto corral_source_split_10047;

  $bb47:
    assume !(out_$i95 == 1);
    goto corral_source_split_10046;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    out_$i140 := $ne.i32(out_$i139, 0);
    goto corral_source_split_10109;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    out_$i139 := $and.i32(out_$i138, 2);
    goto corral_source_split_10108;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i32($M.0, out_$p137);
    goto corral_source_split_10107;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(in_$p20, $mul.ref(0, 49360)), $mul.ref(49160, 1));
    goto corral_source_split_10106;

  $bb57:
    assume !(out_$i136 == 1);
    goto corral_source_split_10105;

  $bb67:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10121;

  $bb69_dummy:
    call {:si_unique_call 1} out_$p35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i51, out_$p77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p109, out_$i110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p117, out_$i118, out_$p119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i126, out_$i127, out_$p129, out_$i130, out_$i131, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$p143, out_$p144, out_$p145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$i152, out_$i153, out_$i128, out_$p154, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i91, out_$i163, out_$i164, out_$i165, out_$i166, out_$i162, out_$i90, out_$i167, out_$i34, out_$i168 := hiddev_read_loop_$bb11(in_$p0, in_$p1, in_$i2, in_$p4, in_$p5, in_$p6, in_$p20, in_$i25, out_$p35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i51, out_$p77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p109, out_$i110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p117, out_$i118, out_$p119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i126, out_$i127, out_$p129, out_$i130, out_$i131, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$p143, out_$p144, out_$p145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$i152, out_$i153, out_$i128, out_$p154, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i91, out_$i163, out_$i164, out_$i165, out_$i166, out_$i162, out_$i90, out_$i167, out_$i34, out_$i168);
    return;

  exit:
    return;
}



procedure hiddev_read_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$i2: i64, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p20: ref, in_$i25: i32, in_$p35: ref, in_$i36: i32, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p72: ref, in_$i73: i64, in_$i74: i32, in_$i75: i32, in_$i76: i1, in_$i51: i32, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$p85: ref, in_$i86: i32, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$p92: ref, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$i98: i64, in_$p101: ref, in_$i102: i32, in_$i103: i1, in_$p104: ref, in_$i105: i32, in_$i106: i64, in_$p109: ref, in_$i110: i32, in_$p111: ref, in_$p112: ref, in_$i113: i32, in_$i114: i64, in_$p117: ref, in_$i118: i32, in_$p119: ref, in_$i120: i64, in_$p121: ref, in_$p122: ref, in_$i123: i64, in_$i124: i1, in_$i126: i32, in_$i127: i32, in_$p129: ref, in_$i130: i32, in_$i131: i64, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i32, in_$i139: i32, in_$i140: i1, in_$i141: i64, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$i146: i32, in_$i147: i64, in_$p148: ref, in_$i149: i64, in_$i150: i1, in_$i152: i32, in_$i153: i32, in_$i128: i32, in_$p154: ref, in_$i155: i32, in_$i156: i32, in_$i157: i32, in_$p158: ref, in_$i159: i32, in_$i160: i32, in_$i161: i1, in_$i91: i32, in_$i163: i32, in_$i164: i64, in_$i165: i1, in_$i166: i32, in_$i162: i32, in_$i90: i32, in_$i167: i1, in_$i34: i32, in_$i168: i32) returns (out_$p35: ref, out_$i36: i32, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p72: ref, out_$i73: i64, out_$i74: i32, out_$i75: i32, out_$i76: i1, out_$i51: i32, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$p85: ref, out_$i86: i32, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$p92: ref, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$i98: i64, out_$p101: ref, out_$i102: i32, out_$i103: i1, out_$p104: ref, out_$i105: i32, out_$i106: i64, out_$p109: ref, out_$i110: i32, out_$p111: ref, out_$p112: ref, out_$i113: i32, out_$i114: i64, out_$p117: ref, out_$i118: i32, out_$p119: ref, out_$i120: i64, out_$p121: ref, out_$p122: ref, out_$i123: i64, out_$i124: i1, out_$i126: i32, out_$i127: i32, out_$p129: ref, out_$i130: i32, out_$i131: i64, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i32, out_$i139: i32, out_$i140: i1, out_$i141: i64, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$i146: i32, out_$i147: i64, out_$p148: ref, out_$i149: i64, out_$i150: i1, out_$i152: i32, out_$i153: i32, out_$i128: i32, out_$p154: ref, out_$i155: i32, out_$i156: i32, out_$i157: i32, out_$p158: ref, out_$i159: i32, out_$i160: i32, out_$i161: i1, out_$i91: i32, out_$i163: i32, out_$i164: i64, out_$i165: i1, out_$i166: i32, out_$i162: i32, out_$i90: i32, out_$i167: i1, out_$i34: i32, out_$i168: i32);
  modifies $M.0, $M.45, $M.44, $M.46, assertsPassed;



implementation hiddev_ioctl_loop_$bb88(in_$p19: ref, in_$p63: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p73: ref, in_$i74: i32, in_$i75: i1, in_$i76: i64, in_$i77: i1, in_$i78: i32, in_$i80: i64, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$i67: i64, in_$i68: i32, in_$i84: i32) returns (out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p73: ref, out_$i74: i32, out_$i75: i1, out_$i76: i64, out_$i77: i1, out_$i78: i32, out_$i80: i64, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$i67: i64, out_$i68: i32, out_$i84: i32)
{

  entry:
    out_$p69, out_$p70, out_$i71, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i80, out_$i81, out_$i82, out_$i83, out_$i67, out_$i68, out_$i84 := in_$p69, in_$p70, in_$i71, in_$p73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i80, in_$i81, in_$i82, in_$i83, in_$i67, in_$i68, in_$i84;
    goto $bb88, exit;

  $bb88:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10304;

  $bb97:
    assume out_$i83 == 1;
    assume {:verifier.code 0} true;
    out_$i67, out_$i68 := out_$i80, out_$i81;
    goto $bb97_dummy;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    out_$i84 := out_$i81;
    assume true;
    goto $bb97;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    out_$i83 := $ult.i32(out_$i81, out_$i82);
    goto corral_source_split_10328;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.0, in_$p63);
    goto corral_source_split_10327;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i32(out_$i68, 1);
    call {:si_unique_call 1468} {:cexpr "i"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_10326;

  $bb96:
    assume {:verifier.code 0} true;
    goto corral_source_split_10325;

  $bb91:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$i80 := out_$i67;
    goto $bb96;

  $bb95:
    assume {:verifier.code 0} true;
    out_$i80 := out_$i76;
    goto $bb96;

  $bb93:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i68;
    assume true;
    goto $bb93;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i64(out_$i67, 0);
    goto corral_source_split_10316;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    out_$i76 := $sub.i64(out_$i67, 1);
    call {:si_unique_call 1467} {:cexpr "arg"} boogie_si_record_i64(out_$i76);
    goto corral_source_split_10315;

  $bb90:
    assume out_$i75 == 1;
    goto corral_source_split_10314;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i74, 1);
    goto corral_source_split_10312;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.0, out_$p73);
    goto corral_source_split_10311;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p70, $mul.ref(out_$i71, 12)), $mul.ref(0, 1));
    goto corral_source_split_10310;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    goto corral_source_split_10309;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(out_$i68);
    goto corral_source_split_10308;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.0, out_$p69);
    goto corral_source_split_10307;

  $bb89:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p19, $mul.ref(0, 8600)), $mul.ref(32, 1));
    goto corral_source_split_10306;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb97_dummy:
    call {:si_unique_call 1} out_$p69, out_$p70, out_$i71, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i80, out_$i81, out_$i82, out_$i83, out_$i67, out_$i68, out_$i84 := hiddev_ioctl_loop_$bb88(in_$p19, in_$p63, out_$p69, out_$p70, out_$i71, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i80, out_$i81, out_$i82, out_$i83, out_$i67, out_$i68, out_$i84);
    return;

  exit:
    return;
}



procedure hiddev_ioctl_loop_$bb88(in_$p19: ref, in_$p63: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p73: ref, in_$i74: i32, in_$i75: i1, in_$i76: i64, in_$i77: i1, in_$i78: i32, in_$i80: i64, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$i67: i64, in_$i68: i32, in_$i84: i32) returns (out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p73: ref, out_$i74: i32, out_$i75: i1, out_$i76: i64, out_$i77: i1, out_$i78: i32, out_$i80: i64, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$i67: i64, out_$i68: i32, out_$i84: i32);



implementation hiddev_ioctl_usage_loop_$bb114(in_$p7: ref, in_$p69: ref, in_$p172: ref, in_$i176: i64, in_$p178: ref, in_$i179: i32, in_$p180: ref, in_$p181: ref, in_$p182: ref, in_$i183: i32, in_$i184: i32, in_$i185: i64, in_$p186: ref, in_$i187: i32, in_$i188: i32, in_$i189: i1, in_$i175: i32) returns (out_$i176: i64, out_$p178: ref, out_$i179: i32, out_$p180: ref, out_$p181: ref, out_$p182: ref, out_$i183: i32, out_$i184: i32, out_$i185: i64, out_$p186: ref, out_$i187: i32, out_$i188: i32, out_$i189: i1, out_$i175: i32)
{

  entry:
    out_$i176, out_$p178, out_$i179, out_$p180, out_$p181, out_$p182, out_$i183, out_$i184, out_$i185, out_$p186, out_$i187, out_$i188, out_$i189, out_$i175 := in_$i176, in_$p178, in_$i179, in_$p180, in_$p181, in_$p182, in_$i183, in_$i184, in_$i185, in_$p186, in_$i187, in_$i188, in_$i189, in_$i175;
    goto $bb114, exit;

  $bb114:
    assume {:verifier.code 0} true;
    goto corral_source_split_11295;

  $bb116:
    assume out_$i189 == 1;
    assume {:verifier.code 0} true;
    out_$i175 := out_$i187;
    goto $bb116_dummy;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    out_$i189 := $ult.i32(out_$i187, out_$i188);
    goto corral_source_split_11309;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    out_$i188 := $load.i32($M.0, in_$p172);
    goto corral_source_split_11308;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    out_$i187 := $add.i32(out_$i175, 1);
    call {:si_unique_call 1630} {:cexpr "i"} boogie_si_record_i32(out_$i187);
    goto corral_source_split_11307;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p186, out_$i179);
    goto corral_source_split_11306;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    out_$p186 := $add.ref(out_$p181, $mul.ref(out_$i185, 4));
    goto corral_source_split_11305;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    out_$i185 := $zext.i32.i64(out_$i184);
    goto corral_source_split_11304;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    out_$i184 := $add.i32(out_$i183, out_$i175);
    goto corral_source_split_11303;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    out_$i183 := $load.i32($M.0, out_$p182);
    goto corral_source_split_11302;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    out_$p181 := $load.ref($M.0, out_$p180);
    out_$p182 := $add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_11301;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    out_$p180 := $add.ref($add.ref(in_$p69, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_11300;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    out_$i179 := $load.i32($M.0, out_$p178);
    goto corral_source_split_11299;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    out_$p178 := $add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 4124)), $mul.ref(28, 1)), $mul.ref(out_$i176, 4));
    goto corral_source_split_11298;

  $bb115:
    assume {:verifier.code 0} true;
    out_$i176 := $sext.i32.i64(out_$i175);
    goto corral_source_split_11297;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb116_dummy:
    call {:si_unique_call 1} out_$i176, out_$p178, out_$i179, out_$p180, out_$p181, out_$p182, out_$i183, out_$i184, out_$i185, out_$p186, out_$i187, out_$i188, out_$i189, out_$i175 := hiddev_ioctl_usage_loop_$bb114(in_$p7, in_$p69, in_$p172, out_$i176, out_$p178, out_$i179, out_$p180, out_$p181, out_$p182, out_$i183, out_$i184, out_$i185, out_$p186, out_$i187, out_$i188, out_$i189, out_$i175);
    return;

  exit:
    return;
}



procedure hiddev_ioctl_usage_loop_$bb114(in_$p7: ref, in_$p69: ref, in_$p172: ref, in_$i176: i64, in_$p178: ref, in_$i179: i32, in_$p180: ref, in_$p181: ref, in_$p182: ref, in_$i183: i32, in_$i184: i32, in_$i185: i64, in_$p186: ref, in_$i187: i32, in_$i188: i32, in_$i189: i1, in_$i175: i32) returns (out_$i176: i64, out_$p178: ref, out_$i179: i32, out_$p180: ref, out_$p181: ref, out_$p182: ref, out_$i183: i32, out_$i184: i32, out_$i185: i64, out_$p186: ref, out_$i187: i32, out_$i188: i32, out_$i189: i1, out_$i175: i32);
  modifies $M.0;



implementation hiddev_ioctl_usage_loop_$bb103(in_$p7: ref, in_$p69: ref, in_$p151: ref, in_$p155: ref, in_$p156: ref, in_$p157: ref, in_$i158: i32, in_$i159: i32, in_$i160: i64, in_$p161: ref, in_$i162: i32, in_$i163: i64, in_$p165: ref, in_$i166: i32, in_$i167: i32, in_$i168: i1, in_$i154: i32) returns (out_$p155: ref, out_$p156: ref, out_$p157: ref, out_$i158: i32, out_$i159: i32, out_$i160: i64, out_$p161: ref, out_$i162: i32, out_$i163: i64, out_$p165: ref, out_$i166: i32, out_$i167: i32, out_$i168: i1, out_$i154: i32)
{

  entry:
    out_$p155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i160, out_$p161, out_$i162, out_$i163, out_$p165, out_$i166, out_$i167, out_$i168, out_$i154 := in_$p155, in_$p156, in_$p157, in_$i158, in_$i159, in_$i160, in_$p161, in_$i162, in_$i163, in_$p165, in_$i166, in_$i167, in_$i168, in_$i154;
    goto $bb103, exit;

  $bb103:
    assume {:verifier.code 0} true;
    goto corral_source_split_11269;

  $bb105:
    assume out_$i168 == 1;
    assume {:verifier.code 0} true;
    out_$i154 := out_$i166;
    goto $bb105_dummy;

  corral_source_split_11283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    out_$i168 := $ult.i32(out_$i166, out_$i167);
    goto corral_source_split_11283;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    out_$i167 := $load.i32($M.0, in_$p151);
    goto corral_source_split_11282;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    out_$i166 := $add.i32(out_$i154, 1);
    call {:si_unique_call 1627} {:cexpr "i"} boogie_si_record_i32(out_$i166);
    goto corral_source_split_11281;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p165, out_$i162);
    goto corral_source_split_11280;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 4124)), $mul.ref(28, 1)), $mul.ref(out_$i163, 4));
    goto corral_source_split_11279;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    out_$i163 := $sext.i32.i64(out_$i154);
    goto corral_source_split_11278;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    out_$i162 := $load.i32($M.0, out_$p161);
    goto corral_source_split_11277;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref(out_$p156, $mul.ref(out_$i160, 4));
    goto corral_source_split_11276;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    out_$i160 := $zext.i32.i64(out_$i159);
    goto corral_source_split_11275;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    out_$i159 := $add.i32(out_$i158, out_$i154);
    goto corral_source_split_11274;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    out_$i158 := $load.i32($M.0, out_$p157);
    goto corral_source_split_11273;

  corral_source_split_11271:
    assume {:verifier.code 0} true;
    out_$p156 := $load.ref($M.0, out_$p155);
    out_$p157 := $add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 4124)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_11272;

  $bb104:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(in_$p69, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_11271;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb105_dummy:
    call {:si_unique_call 1} out_$p155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i160, out_$p161, out_$i162, out_$i163, out_$p165, out_$i166, out_$i167, out_$i168, out_$i154 := hiddev_ioctl_usage_loop_$bb103(in_$p7, in_$p69, in_$p151, out_$p155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i160, out_$p161, out_$i162, out_$i163, out_$p165, out_$i166, out_$i167, out_$i168, out_$i154);
    return;

  exit:
    return;
}



procedure hiddev_ioctl_usage_loop_$bb103(in_$p7: ref, in_$p69: ref, in_$p151: ref, in_$p155: ref, in_$p156: ref, in_$p157: ref, in_$i158: i32, in_$i159: i32, in_$i160: i64, in_$p161: ref, in_$i162: i32, in_$i163: i64, in_$p165: ref, in_$i166: i32, in_$i167: i32, in_$i168: i1, in_$i154: i32) returns (out_$p155: ref, out_$p156: ref, out_$p157: ref, out_$i158: i32, out_$i159: i32, out_$i160: i64, out_$p161: ref, out_$i162: i32, out_$i163: i64, out_$p165: ref, out_$i166: i32, out_$i167: i32, out_$i168: i1, out_$i154: i32);
  modifies $M.0;



implementation hiddev_lookup_usage_loop_$bb21(in_$p1: ref, in_$p34: ref, in_$p35: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p44: ref, in_$i45: i32, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i39: i32, in_$i30: i32, in_$p25: ref) returns (out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p44: ref, out_$i45: i32, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i39: i32)
{

  entry:
    out_$p40, out_$p41, out_$i42, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i58, out_$i59, out_$i60, out_$i39 := in_$p40, in_$p41, in_$i42, in_$p44, in_$i45, in_$p46, in_$i47, in_$i48, in_$p49, in_$i50, in_$p51, in_$i52, in_$i58, in_$i59, in_$i60, in_$i39;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_11366;

  $bb26:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$i39 := out_$i58;
    goto $bb26_dummy;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    out_$i60 := $ult.i32(out_$i58, out_$i59);
    goto corral_source_split_11390;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, in_$p35);
    goto corral_source_split_11389;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i32(out_$i39, 1);
    call {:si_unique_call 1633} {:cexpr "j"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_11388;

  $bb24:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    out_$p49, out_$i50, out_$p51, out_$i52 := in_$p25, in_$i30, in_$p34, out_$i39;
    assume true;
    goto $bb24;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i45, out_$i47);
    goto corral_source_split_11376;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.0, out_$p46);
    goto corral_source_split_11375;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_11374;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_11373;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p41, $mul.ref(out_$i42, 20)), $mul.ref(0, 1));
    goto corral_source_split_11372;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    goto corral_source_split_11371;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(out_$i39);
    goto corral_source_split_11370;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_11369;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p34, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_11368;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p40, out_$p41, out_$i42, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i58, out_$i59, out_$i60, out_$i39 := hiddev_lookup_usage_loop_$bb21(in_$p1, in_$p34, in_$p35, out_$p40, out_$p41, out_$i42, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i58, out_$i59, out_$i60, out_$i39, in_$i30, in_$p25);
    return;

  exit:
    return;
}



procedure hiddev_lookup_usage_loop_$bb21(in_$p1: ref, in_$p34: ref, in_$p35: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p44: ref, in_$i45: i32, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i39: i32, in_$i30: i32, in_$p25: ref) returns (out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p44: ref, out_$i45: i32, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i39: i32);



implementation hiddev_lookup_usage_loop_$bb16(in_$p1: ref, in_$p26: ref, in_$i31: i64, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p44: ref, in_$i45: i32, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i39: i32, in_$i38: i32, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$i30: i32, in_$p25: ref) returns (out_$i31: i64, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p44: ref, out_$i45: i32, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i39: i32, out_$i38: i32, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$i30: i32)
{

  entry:
    out_$i31, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p40, out_$p41, out_$i42, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i58, out_$i59, out_$i60, out_$i39, out_$i38, out_$i61, out_$i62, out_$i63, out_$i30 := in_$i31, in_$p33, in_$p34, in_$p35, in_$i36, in_$i37, in_$p40, in_$p41, in_$i42, in_$p44, in_$i45, in_$p46, in_$i47, in_$i48, in_$p49, in_$i50, in_$p51, in_$i52, in_$i58, in_$i59, in_$i60, in_$i39, in_$i38, in_$i61, in_$i62, in_$i63, in_$i30;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_11355;

  $bb29:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := out_$i61;
    goto $bb29_dummy;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    out_$i63 := $ult.i32(out_$i61, out_$i62);
    goto corral_source_split_11396;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.0, in_$p26);
    goto corral_source_split_11395;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i38, 1);
    call {:si_unique_call 1634} {:cexpr "i"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_11394;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb20;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i30;
    goto $bb20;

  $bb27:
    assume !(out_$i60 == 1);
    goto corral_source_split_11392;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    out_$i60 := $ult.i32(out_$i58, out_$i59);
    goto corral_source_split_11390;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, out_$p35);
    goto corral_source_split_11389;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i32(out_$i39, 1);
    call {:si_unique_call 1633} {:cexpr "j"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_11388;

  $bb24:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    out_$p49, out_$i50, out_$p51, out_$i52 := in_$p25, out_$i30, out_$p34, out_$i39;
    assume true;
    goto $bb24;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i45, out_$i47);
    goto corral_source_split_11376;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.0, out_$p46);
    goto corral_source_split_11375;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_11374;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_11373;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p41, $mul.ref(out_$i42, 20)), $mul.ref(0, 1));
    goto corral_source_split_11372;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    goto corral_source_split_11371;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(out_$i39);
    goto corral_source_split_11370;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_11369;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p34, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_11368;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb21:
    call out_$p40, out_$p41, out_$i42, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i58, out_$i59, out_$i60, out_$i39 := hiddev_lookup_usage_loop_$bb21(in_$p1, out_$p34, out_$p35, out_$p40, out_$p41, out_$i42, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i58, out_$i59, out_$i60, out_$i39, out_$i30, in_$p25);
    goto $bb21_last;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_11366;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    out_$i39 := 0;
    goto $bb21;

  $bb26:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$i39 := out_$i58;
    assume false;
    return;

  $bb18:
    assume out_$i37 == 1;
    goto corral_source_split_11364;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i30;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_11361:
    assume {:verifier.code 0} true;
    out_$i37 := $ult.i32(0, out_$i36);
    goto corral_source_split_11362;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, out_$p35);
    goto corral_source_split_11361;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p34, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_11360;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_11359;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(in_$p25, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref(out_$i31, 8));
    goto corral_source_split_11358;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i30);
    goto corral_source_split_11357;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb29_dummy:
    call {:si_unique_call 1} out_$i31, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p40, out_$p41, out_$i42, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i58, out_$i59, out_$i60, out_$i39, out_$i38, out_$i61, out_$i62, out_$i63, out_$i30 := hiddev_lookup_usage_loop_$bb16(in_$p1, in_$p26, out_$i31, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p40, out_$p41, out_$i42, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i58, out_$i59, out_$i60, out_$i39, out_$i38, out_$i61, out_$i62, out_$i63, out_$i30, in_$p25);
    return;

  exit:
    return;
}



procedure hiddev_lookup_usage_loop_$bb16(in_$p1: ref, in_$p26: ref, in_$i31: i64, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p44: ref, in_$i45: i32, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i39: i32, in_$i38: i32, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$i30: i32, in_$p25: ref) returns (out_$i31: i64, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p44: ref, out_$i45: i32, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i39: i32, out_$i38: i32, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$i30: i32);



implementation hiddev_lookup_usage_loop_$bb11(in_$p1: ref, in_$i23: i64, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i31: i64, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p44: ref, in_$i45: i32, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i39: i32, in_$i38: i32, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$i30: i32, in_$p29: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p25: ref) returns (out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i31: i64, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p44: ref, out_$i45: i32, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i39: i32, out_$i38: i32, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$i30: i32, out_$p29: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p25: ref)
{

  entry:
    out_$p26, out_$i27, out_$i28, out_$i31, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p40, out_$p41, out_$i42, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i58, out_$i59, out_$i60, out_$i39, out_$i38, out_$i61, out_$i62, out_$i63, out_$i30, out_$p29, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p25 := in_$p26, in_$i27, in_$i28, in_$i31, in_$p33, in_$p34, in_$p35, in_$i36, in_$i37, in_$p40, in_$p41, in_$i42, in_$p44, in_$i45, in_$p46, in_$i47, in_$i48, in_$p49, in_$i50, in_$p51, in_$i52, in_$i58, in_$i59, in_$i60, in_$i39, in_$i38, in_$i61, in_$i62, in_$i63, in_$i30, in_$p29, in_$p65, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$p25;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_11347;

  $bb32:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$p25 := out_$p66;
    goto $bb32_dummy;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, in_$i23);
    goto corral_source_split_11405;

  corral_source_split_11403:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    goto corral_source_split_11404;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p67, $mul.ref(0, 2088)), $mul.ref(0, 1));
    goto corral_source_split_11403;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    out_$p67 := $bitcast.ref.ref(out_$p66);
    goto corral_source_split_11402;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    goto corral_source_split_11401;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($add.ref(out_$p29, $mul.ref(0, 2088)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_11400;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb15;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    out_$p29 := out_$p25;
    goto $bb15;

  $bb30:
    assume !(out_$i63 == 1);
    goto corral_source_split_11398;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    out_$i63 := $ult.i32(out_$i61, out_$i62);
    goto corral_source_split_11396;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.0, out_$p26);
    goto corral_source_split_11395;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i38, 1);
    call {:si_unique_call 1634} {:cexpr "i"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_11394;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb20;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i30;
    goto $bb20;

  $bb27:
    assume !(out_$i60 == 1);
    goto corral_source_split_11392;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    out_$i60 := $ult.i32(out_$i58, out_$i59);
    goto corral_source_split_11390;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, out_$p35);
    goto corral_source_split_11389;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i32(out_$i39, 1);
    call {:si_unique_call 1633} {:cexpr "j"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_11388;

  $bb24:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    out_$p49, out_$i50, out_$p51, out_$i52 := out_$p25, out_$i30, out_$p34, out_$i39;
    assume true;
    goto $bb24;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i45, out_$i47);
    goto corral_source_split_11376;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.0, out_$p46);
    goto corral_source_split_11375;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_11374;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_11373;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p41, $mul.ref(out_$i42, 20)), $mul.ref(0, 1));
    goto corral_source_split_11372;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    goto corral_source_split_11371;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(out_$i39);
    goto corral_source_split_11370;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_11369;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p34, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_11368;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb21:
    call out_$p40, out_$p41, out_$i42, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i58, out_$i59, out_$i60, out_$i39 := hiddev_lookup_usage_loop_$bb21(in_$p1, out_$p34, out_$p35, out_$p40, out_$p41, out_$i42, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i58, out_$i59, out_$i60, out_$i39, out_$i30, out_$p25);
    goto $bb21_last;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_11366;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    out_$i39 := 0;
    goto $bb21;

  $bb26:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$i39 := out_$i58;
    assume false;
    return;

  $bb18:
    assume out_$i37 == 1;
    goto corral_source_split_11364;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i30;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_11361:
    assume {:verifier.code 0} true;
    out_$i37 := $ult.i32(0, out_$i36);
    goto corral_source_split_11362;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, out_$p35);
    goto corral_source_split_11361;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p34, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_11360;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_11359;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 2088)), $mul.ref(24, 1)), $mul.ref(out_$i31, 8));
    goto corral_source_split_11358;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i30);
    goto corral_source_split_11357;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    call out_$i31, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p40, out_$p41, out_$i42, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i58, out_$i59, out_$i60, out_$i39, out_$i38, out_$i61, out_$i62, out_$i63, out_$i30 := hiddev_lookup_usage_loop_$bb16(in_$p1, out_$p26, out_$i31, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p40, out_$p41, out_$i42, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i58, out_$i59, out_$i60, out_$i39, out_$i38, out_$i61, out_$i62, out_$i63, out_$i30, out_$p25);
    goto $bb16_last;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_11355;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    out_$i30 := 0;
    goto $bb16;

  $bb29:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := out_$i61;
    assume false;
    return;

  $bb13:
    assume out_$i28 == 1;
    goto corral_source_split_11353;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    out_$p29 := out_$p25;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    out_$i28 := $ult.i32(0, out_$i27);
    goto corral_source_split_11351;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_11350;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p25, $mul.ref(0, 2088)), $mul.ref(2072, 1));
    goto corral_source_split_11349;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb32_dummy:
    call {:si_unique_call 1} out_$p26, out_$i27, out_$i28, out_$i31, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p40, out_$p41, out_$i42, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i58, out_$i59, out_$i60, out_$i39, out_$i38, out_$i61, out_$i62, out_$i63, out_$i30, out_$p29, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p25 := hiddev_lookup_usage_loop_$bb11(in_$p1, in_$i23, out_$p26, out_$i27, out_$i28, out_$i31, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p40, out_$p41, out_$i42, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i58, out_$i59, out_$i60, out_$i39, out_$i38, out_$i61, out_$i62, out_$i63, out_$i30, out_$p29, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p25);
    return;

  exit:
    return;
}



procedure hiddev_lookup_usage_loop_$bb11(in_$p1: ref, in_$i23: i64, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i31: i64, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p44: ref, in_$i45: i32, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i39: i32, in_$i38: i32, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$i30: i32, in_$p29: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p25: ref) returns (out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i31: i64, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p44: ref, out_$i45: i32, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i39: i32, out_$i38: i32, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$i30: i32, out_$p29: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p25: ref);



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p12: ref, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i81: i32, in_$i82: i32, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i86: i1, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$p92: ref, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$i96: i32, in_$i97: i1, in_$i98: i32, in_$i99: i1, in_$i100: i32, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$p118: ref, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i123: i8, in_$i124: i32, in_$i125: i8, in_$i126: i64, in_$i127: i8, in_$i128: i32, in_$i129: i8, in_$i130: i32, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$i135: i8, in_$i136: i32, in_$i137: i8, in_$i138: i64, in_$i139: i8, in_$i140: i32, in_$i141: i8, in_$i142: i32, in_$i144: i32, in_$i145: i1, in_$p146: ref, in_$i147: i8, in_$i148: i32, in_$i149: i8, in_$i150: i64, in_$i151: i8, in_$i152: i32, in_$i153: i8, in_$i154: i32, in_$i156: i32, in_$i157: i1, in_$p158: ref, in_$i159: i8, in_$i160: i32, in_$i161: i8, in_$i162: i64, in_$i163: i8, in_$i164: i32, in_$i165: i8, in_$i166: i32, in_$i168: i32, in_$i169: i1, in_$p170: ref, in_$i171: i8, in_$i172: i32, in_$i173: i8, in_$i174: i64, in_$i175: i8, in_$i176: i32, in_$i177: i8, in_$i178: i32, in_$i180: i32, in_$i181: i1, in_$p182: ref, in_$i183: i64, in_$i185: i32, in_$i186: i1, in_$p187: ref, in_$i188: i64, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_$i193: i64, in_$i195: i32, in_$i196: i1, in_$p197: ref, in_$i198: i64, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$i203: i64, in_$i205: i32, in_$i206: i1, in_$p207: ref, in_$i208: i32, in_$i210: i32, in_$i211: i1, in_$p212: ref, in_$i213: i32, in_$i215: i32, in_$i216: i1, in_$p217: ref, in_$i218: i32, in_$i220: i32, in_$i221: i1, in_$p222: ref, in_$i223: i32, in_$i225: i32, in_$i226: i1, in_$p227: ref, in_$i228: i32, in_$i230: i32, in_$i231: i1, in_$p232: ref, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$i238: i32, in_$i239: i1, in_$p240: ref, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$i246: i32, in_$i247: i1, in_$p248: ref, in_$i250: i32, in_$i251: i1, in_$p252: ref, in_$i253: i32, in_$i254: i1, in_$p255: ref, in_$i256: i32, in_$i257: i32, in_$i258: i1, in_$i259: i32, in_$i260: i1, in_$p261: ref, in_$i262: i32, in_$i263: i32, in_$i264: i32, in_$i266: i32, in_$i267: i1, in_$p268: ref, in_$i269: i32, in_$i270: i32, in_$i271: i32, in_$i273: i32, in_$i274: i1, in_$p275: ref, in_$i276: i32, in_$i277: i32, in_$i278: i32, in_$i280: i32, in_$i281: i1, in_$p282: ref, in_$i283: i32, in_$i284: i32, in_$i285: i32, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$i290: i32, in_$i291: i32, in_$i292: i32, in_$i294: i32, in_$i295: i1, in_$p296: ref, in_$i298: i32, in_$i299: i1, in_$p300: ref, in_$i302: i32, in_$i303: i1, in_$p304: ref, in_$i306: i32, in_$i307: i1, in_$p308: ref, in_$i310: i32, in_$i311: i1, in_$p312: ref, in_$i314: i32, in_$i315: i1, in_$p316: ref, in_$i317: i32, in_$i318: i1, in_$p319: ref, in_$i320: i32, in_$i321: i32, in_$i322: i1, in_$p323: ref, in_$i324: i32, in_$i325: i32, in_$i326: i1, in_$p327: ref, in_$i328: i32, in_$i329: i32, in_$i330: i1, in_$p331: ref, in_$i332: i32, in_$i333: i32, in_$i334: i1, in_$p335: ref, in_$i336: i32, in_$i337: i32, in_$i338: i1, in_$i340: i32, in_$i341: i1, in_$i343: i32, in_$i344: i1, in_$i346: i32, in_$i347: i1, in_$i349: i32, in_$i350: i32, in_$i351: i32, in_$i352: i1, in_$i354: i32, in_$i355: i32, in_$i356: i32, in_$i357: i1, in_$i358: i32, in_$i359: i1, in_$i360: i32, in_$i361: i1, in_$i362: i32, in_$i363: i1, in_$i364: i32, in_$i365: i1, in_$i366: i1, in_$i367: i1, in_$i368: i32, in_$i369: i1, in_$i370: i32, in_$i371: i1, in_$i372: i32, in_$i373: i1, in_$i374: i32, in_$i375: i32, in_$i376: i1, in_$i377: i32, in_$i378: i1, in_$i379: i32, in_$i380: i1, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: i32, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_122: i32) returns (out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i81: i32, out_$i82: i32, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i86: i1, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$p92: ref, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$i96: i32, out_$i97: i1, out_$i98: i32, out_$i99: i1, out_$i100: i32, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$p118: ref, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i123: i8, out_$i124: i32, out_$i125: i8, out_$i126: i64, out_$i127: i8, out_$i128: i32, out_$i129: i8, out_$i130: i32, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$i135: i8, out_$i136: i32, out_$i137: i8, out_$i138: i64, out_$i139: i8, out_$i140: i32, out_$i141: i8, out_$i142: i32, out_$i144: i32, out_$i145: i1, out_$p146: ref, out_$i147: i8, out_$i148: i32, out_$i149: i8, out_$i150: i64, out_$i151: i8, out_$i152: i32, out_$i153: i8, out_$i154: i32, out_$i156: i32, out_$i157: i1, out_$p158: ref, out_$i159: i8, out_$i160: i32, out_$i161: i8, out_$i162: i64, out_$i163: i8, out_$i164: i32, out_$i165: i8, out_$i166: i32, out_$i168: i32, out_$i169: i1, out_$p170: ref, out_$i171: i8, out_$i172: i32, out_$i173: i8, out_$i174: i64, out_$i175: i8, out_$i176: i32, out_$i177: i8, out_$i178: i32, out_$i180: i32, out_$i181: i1, out_$p182: ref, out_$i183: i64, out_$i185: i32, out_$i186: i1, out_$p187: ref, out_$i188: i64, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_$i193: i64, out_$i195: i32, out_$i196: i1, out_$p197: ref, out_$i198: i64, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$i203: i64, out_$i205: i32, out_$i206: i1, out_$p207: ref, out_$i208: i32, out_$i210: i32, out_$i211: i1, out_$p212: ref, out_$i213: i32, out_$i215: i32, out_$i216: i1, out_$p217: ref, out_$i218: i32, out_$i220: i32, out_$i221: i1, out_$p222: ref, out_$i223: i32, out_$i225: i32, out_$i226: i1, out_$p227: ref, out_$i228: i32, out_$i230: i32, out_$i231: i1, out_$p232: ref, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$i238: i32, out_$i239: i1, out_$p240: ref, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$i246: i32, out_$i247: i1, out_$p248: ref, out_$i250: i32, out_$i251: i1, out_$p252: ref, out_$i253: i32, out_$i254: i1, out_$p255: ref, out_$i256: i32, out_$i257: i32, out_$i258: i1, out_$i259: i32, out_$i260: i1, out_$p261: ref, out_$i262: i32, out_$i263: i32, out_$i264: i32, out_$i266: i32, out_$i267: i1, out_$p268: ref, out_$i269: i32, out_$i270: i32, out_$i271: i32, out_$i273: i32, out_$i274: i1, out_$p275: ref, out_$i276: i32, out_$i277: i32, out_$i278: i32, out_$i280: i32, out_$i281: i1, out_$p282: ref, out_$i283: i32, out_$i284: i32, out_$i285: i32, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$i290: i32, out_$i291: i32, out_$i292: i32, out_$i294: i32, out_$i295: i1, out_$p296: ref, out_$i298: i32, out_$i299: i1, out_$p300: ref, out_$i302: i32, out_$i303: i1, out_$p304: ref, out_$i306: i32, out_$i307: i1, out_$p308: ref, out_$i310: i32, out_$i311: i1, out_$p312: ref, out_$i314: i32, out_$i315: i1, out_$p316: ref, out_$i317: i32, out_$i318: i1, out_$p319: ref, out_$i320: i32, out_$i321: i32, out_$i322: i1, out_$p323: ref, out_$i324: i32, out_$i325: i32, out_$i326: i1, out_$p327: ref, out_$i328: i32, out_$i329: i32, out_$i330: i1, out_$p331: ref, out_$i332: i32, out_$i333: i32, out_$i334: i1, out_$p335: ref, out_$i336: i32, out_$i337: i32, out_$i338: i1, out_$i340: i32, out_$i341: i1, out_$i343: i32, out_$i344: i1, out_$i346: i32, out_$i347: i1, out_$i349: i32, out_$i350: i32, out_$i351: i32, out_$i352: i1, out_$i354: i32, out_$i355: i32, out_$i356: i32, out_$i357: i1, out_$i358: i32, out_$i359: i1, out_$i360: i32, out_$i361: i1, out_$i362: i32, out_$i363: i1, out_$i364: i32, out_$i365: i1, out_$i366: i1, out_$i367: i1, out_$i368: i32, out_$i369: i1, out_$i370: i32, out_$i371: i1, out_$i372: i32, out_$i373: i1, out_$i374: i32, out_$i375: i32, out_$i376: i1, out_$i377: i32, out_$i378: i1, out_$i379: i32, out_$i380: i1, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: i32, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_122: i32)
{

  entry:
    out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i180, out_$i181, out_$p182, out_$i183, out_$i185, out_$i186, out_$p187, out_$i188, out_$i190, out_$i191, out_$p192, out_$i193, out_$i195, out_$i196, out_$p197, out_$i198, out_$i200, out_$i201, out_$p202, out_$i203, out_$i205, out_$i206, out_$p207, out_$i208, out_$i210, out_$i211, out_$p212, out_$i213, out_$i215, out_$i216, out_$p217, out_$i218, out_$i220, out_$i221, out_$p222, out_$i223, out_$i225, out_$i226, out_$p227, out_$i228, out_$i230, out_$i231, out_$p232, out_$i234, out_$i235, out_$p236, out_$i238, out_$i239, out_$p240, out_$i242, out_$i243, out_$p244, out_$i246, out_$i247, out_$p248, out_$i250, out_$i251, out_$p252, out_$i253, out_$i254, out_$p255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$p261, out_$i262, out_$i263, out_$i264, out_$i266, out_$i267, out_$p268, out_$i269, out_$i270, out_$i271, out_$i273, out_$i274, out_$p275, out_$i276, out_$i277, out_$i278, out_$i280, out_$i281, out_$p282, out_$i283, out_$i284, out_$i285, out_$i287, out_$i288, out_$p289, out_$i290, out_$i291, out_$i292, out_$i294, out_$i295, out_$p296, out_$i298, out_$i299, out_$p300, out_$i302, out_$i303, out_$p304, out_$i306, out_$i307, out_$p308, out_$i310, out_$i311, out_$p312, out_$i314, out_$i315, out_$p316, out_$i317, out_$i318, out_$p319, out_$i320, out_$i321, out_$i322, out_$p323, out_$i324, out_$i325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$p331, out_$i332, out_$i333, out_$i334, out_$p335, out_$i336, out_$i337, out_$i338, out_$i340, out_$i341, out_$i343, out_$i344, out_$i346, out_$i347, out_$i349, out_$i350, out_$i351, out_$i352, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i372, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122 := in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$p66, in_$p67, in_$i68, in_$i70, in_$i71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$p80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$p87, in_$i88, in_$i89, in_$i90, in_$i91, in_$p92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$p118, in_$i120, in_$i121, in_$p122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i132, in_$i133, in_$p134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i144, in_$i145, in_$p146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$i156, in_$i157, in_$p158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i168, in_$i169, in_$p170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i180, in_$i181, in_$p182, in_$i183, in_$i185, in_$i186, in_$p187, in_$i188, in_$i190, in_$i191, in_$p192, in_$i193, in_$i195, in_$i196, in_$p197, in_$i198, in_$i200, in_$i201, in_$p202, in_$i203, in_$i205, in_$i206, in_$p207, in_$i208, in_$i210, in_$i211, in_$p212, in_$i213, in_$i215, in_$i216, in_$p217, in_$i218, in_$i220, in_$i221, in_$p222, in_$i223, in_$i225, in_$i226, in_$p227, in_$i228, in_$i230, in_$i231, in_$p232, in_$i234, in_$i235, in_$p236, in_$i238, in_$i239, in_$p240, in_$i242, in_$i243, in_$p244, in_$i246, in_$i247, in_$p248, in_$i250, in_$i251, in_$p252, in_$i253, in_$i254, in_$p255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$p261, in_$i262, in_$i263, in_$i264, in_$i266, in_$i267, in_$p268, in_$i269, in_$i270, in_$i271, in_$i273, in_$i274, in_$p275, in_$i276, in_$i277, in_$i278, in_$i280, in_$i281, in_$p282, in_$i283, in_$i284, in_$i285, in_$i287, in_$i288, in_$p289, in_$i290, in_$i291, in_$i292, in_$i294, in_$i295, in_$p296, in_$i298, in_$i299, in_$p300, in_$i302, in_$i303, in_$p304, in_$i306, in_$i307, in_$p308, in_$i310, in_$i311, in_$p312, in_$i314, in_$i315, in_$p316, in_$i317, in_$i318, in_$p319, in_$i320, in_$i321, in_$i322, in_$p323, in_$i324, in_$i325, in_$i326, in_$p327, in_$i328, in_$i329, in_$i330, in_$p331, in_$i332, in_$i333, in_$i334, in_$p335, in_$i336, in_$i337, in_$i338, in_$i340, in_$i341, in_$i343, in_$i344, in_$i346, in_$i347, in_$i349, in_$i350, in_$i351, in_$i352, in_$i354, in_$i355, in_$i356, in_$i357, in_$i358, in_$i359, in_$i360, in_$i361, in_$i362, in_$i363, in_$i364, in_$i365, in_$i366, in_$i367, in_$i368, in_$i369, in_$i370, in_$i371, in_$i372, in_$i373, in_$i374, in_$i375, in_$i376, in_$i377, in_$i378, in_$i379, in_$i380, in_vslice_dummy_var_86, in_vslice_dummy_var_87, in_vslice_dummy_var_88, in_vslice_dummy_var_89, in_vslice_dummy_var_90, in_vslice_dummy_var_91, in_vslice_dummy_var_92, in_vslice_dummy_var_93, in_vslice_dummy_var_94, in_vslice_dummy_var_95, in_vslice_dummy_var_96, in_vslice_dummy_var_97, in_vslice_dummy_var_98, in_vslice_dummy_var_99, in_vslice_dummy_var_100, in_vslice_dummy_var_101, in_vslice_dummy_var_102, in_vslice_dummy_var_103, in_vslice_dummy_var_104, in_vslice_dummy_var_105, in_vslice_dummy_var_106, in_vslice_dummy_var_107, in_vslice_dummy_var_108, in_vslice_dummy_var_109, in_vslice_dummy_var_110, in_vslice_dummy_var_111, in_vslice_dummy_var_112, in_vslice_dummy_var_113, in_vslice_dummy_var_114, in_vslice_dummy_var_115, in_vslice_dummy_var_116, in_vslice_dummy_var_117, in_vslice_dummy_var_118, in_vslice_dummy_var_119, in_vslice_dummy_var_120, in_vslice_dummy_var_121, in_vslice_dummy_var_122;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1774} out_$i37 := __VERIFIER_nondet_int();
    call {:si_unique_call 1775} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i37);
    call {:si_unique_call 1776} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i37);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb75_dummy;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb23:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb41:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_11773:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_11772:
    assume {:verifier.code 0} true;
    $M.57 := out_$i63;
    call {:si_unique_call 1783} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_11773;

  corral_source_split_11771:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i62, 1);
    goto corral_source_split_11772;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    out_$i62 := $M.57;
    goto corral_source_split_11771;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1782} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_11770;

  $bb40:
    assume out_$i61 == 1;
    goto corral_source_split_11769;

  corral_source_split_11767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i60, 0);
    goto corral_source_split_11767;

  corral_source_split_11765:
    assume {:verifier.code 0} true;
    out_$i60 := $M.60;
    goto corral_source_split_11766;

  corral_source_split_11764:
    assume {:verifier.code 0} true;
    $M.60 := out_$i59;
    call {:si_unique_call 1781} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_11765;

  corral_source_split_11763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} out_$i59 := usbhid_probe(out_$p58, in_$p12);
    goto corral_source_split_11764;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    out_$p58 := $M.48;
    goto corral_source_split_11763;

  $bb38:
    assume out_$i57 == 1;
    goto corral_source_split_11762;

  corral_source_split_11760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_11759:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i56, 1);
    goto corral_source_split_11760;

  corral_source_split_11758:
    assume {:verifier.code 0} true;
    out_$i56 := $M.51;
    goto corral_source_split_11759;

  $bb36:
    assume out_$i55 == 1;
    goto corral_source_split_11758;

  $bb34:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i49, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb25:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i49, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i50 := $slt.i32(out_$i49, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_11740:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1777} out_$i49 := __VERIFIER_nondet_int();
    call {:si_unique_call 1778} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i49);
    call {:si_unique_call 1779} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i49);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i48 == 1;
    goto corral_source_split_11740;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_11737:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_11738;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    out_$i47 := $M.51;
    goto corral_source_split_11737;

  $bb20:
    assume out_$i46 == 1;
    goto corral_source_split_11736;

  $bb18:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i37, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb14:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i37, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i43 := $slt.i32(out_$i37, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i32(out_$i37, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb46:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_11780:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_11779:
    assume {:verifier.code 0} true;
    $M.51 := 3;
    call {:si_unique_call 1785} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_11780;

  SeqInstr_387:
    goto corral_source_split_11779;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  corral_source_split_11778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} out_vslice_dummy_var_86 := hid_suspend(out_$p66, out_$i68);
    goto SeqInstr_386;

  corral_source_split_11777:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.47, out_$p67);
    goto corral_source_split_11778;

  corral_source_split_11776:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11777;

  corral_source_split_11775:
    assume {:verifier.code 0} true;
    out_$p66 := $M.48;
    goto corral_source_split_11776;

  $bb45:
    assume out_$i65 == 1;
    goto corral_source_split_11775;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_11755:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, 2);
    goto corral_source_split_11756;

  corral_source_split_11754:
    assume {:verifier.code 0} true;
    out_$i64 := $M.51;
    goto corral_source_split_11755;

  $bb35:
    assume !(out_$i54 == 1);
    goto corral_source_split_11754;

  $bb49:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_11790:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1788} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_11790;

  $bb50:
    assume out_$i75 == 1;
    goto corral_source_split_11789;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_11786:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i74, 0);
    goto corral_source_split_11787;

  corral_source_split_11785:
    assume {:verifier.code 0} true;
    out_$i74 := $M.61;
    goto corral_source_split_11786;

  corral_source_split_11784:
    assume {:verifier.code 0} true;
    $M.61 := out_$i73;
    call {:si_unique_call 1787} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_11785;

  SeqInstr_390:
    goto corral_source_split_11784;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  corral_source_split_11783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} out_$i73 := hid_reset_resume(out_$p72);
    goto SeqInstr_389;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    out_$p72 := $M.48;
    goto corral_source_split_11783;

  $bb48:
    assume out_$i71 == 1;
    goto corral_source_split_11782;

  corral_source_split_11744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_11743:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i70, 3);
    goto corral_source_split_11744;

  corral_source_split_11742:
    assume {:verifier.code 0} true;
    out_$i70 := $M.51;
    goto corral_source_split_11743;

  $bb27:
    assume out_$i51 == 1;
    goto corral_source_split_11742;

  $bb26:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    out_$i51 := $slt.i32(out_$i49, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_11817:
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_11816:
    assume {:verifier.code 0} true;
    $M.57 := out_$i89;
    call {:si_unique_call 1794} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_11817;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    out_$i89 := $sub.i32(out_$i88, 1);
    goto corral_source_split_11816;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    out_$i88 := $M.57;
    goto corral_source_split_11815;

  corral_source_split_11813:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1793} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11814;

  corral_source_split_11812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} usbhid_disconnect(out_$p87);
    goto corral_source_split_11813;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    out_$p87 := $M.48;
    goto corral_source_split_11812;

  $bb63:
    assume out_$i86 == 1;
    goto corral_source_split_11811;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_11808:
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i85, 0);
    goto corral_source_split_11809;

  corral_source_split_11807:
    assume {:verifier.code 0} true;
    out_$i85 := $M.62;
    goto corral_source_split_11808;

  $bb60:
    assume out_$i84 == 1;
    goto corral_source_split_11807;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_11804:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i83, 2);
    goto corral_source_split_11805;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i83 := $M.51;
    goto corral_source_split_11804;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_11802:
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_11801:
    assume {:verifier.code 0} true;
    $M.57 := out_$i82;
    call {:si_unique_call 1791} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i82);
    goto corral_source_split_11802;

  corral_source_split_11800:
    assume {:verifier.code 0} true;
    out_$i82 := $sub.i32(out_$i81, 1);
    goto corral_source_split_11801;

  corral_source_split_11799:
    assume {:verifier.code 0} true;
    out_$i81 := $M.57;
    goto corral_source_split_11800;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1790} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11799;

  corral_source_split_11797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} usbhid_disconnect(out_$p80);
    goto corral_source_split_11798;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    out_$p80 := $M.48;
    goto corral_source_split_11797;

  $bb57:
    assume out_$i79 == 1;
    goto corral_source_split_11796;

  corral_source_split_11794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_11793:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i78, 0);
    goto corral_source_split_11794;

  corral_source_split_11792:
    assume {:verifier.code 0} true;
    out_$i78 := $M.62;
    goto corral_source_split_11793;

  $bb54:
    assume out_$i77 == 1;
    goto corral_source_split_11792;

  corral_source_split_11748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i76, 3);
    goto corral_source_split_11748;

  corral_source_split_11746:
    assume {:verifier.code 0} true;
    out_$i76 := $M.51;
    goto corral_source_split_11747;

  $bb29:
    assume out_$i52 == 1;
    goto corral_source_split_11746;

  $bb28:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    out_$i52 := $slt.i32(out_$i49, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb55:
    assume {:verifier.code 0} true;
    assume !(out_$i77 == 1);
    goto $bb56;

  $bb58:
    assume {:verifier.code 0} true;
    assume !(out_$i79 == 1);
    goto $bb56;

  $bb61:
    assume {:verifier.code 0} true;
    assume !(out_$i84 == 1);
    goto $bb62;

  $bb64:
    assume {:verifier.code 0} true;
    assume !(out_$i86 == 1);
    goto $bb62;

  $bb67:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb69:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_11826:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1797} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_11827;

  $bb68:
    assume out_$i95 == 1;
    goto corral_source_split_11826;

  corral_source_split_11824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_11823:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i94, 0);
    goto corral_source_split_11824;

  corral_source_split_11822:
    assume {:verifier.code 0} true;
    out_$i94 := $M.63;
    goto corral_source_split_11823;

  corral_source_split_11821:
    assume {:verifier.code 0} true;
    $M.63 := out_$i93;
    call {:si_unique_call 1796} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i93);
    goto corral_source_split_11822;

  SeqInstr_393:
    goto corral_source_split_11821;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  corral_source_split_11820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} out_$i93 := hid_resume(out_$p92);
    goto SeqInstr_392;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    out_$p92 := $M.48;
    goto corral_source_split_11820;

  $bb66:
    assume out_$i91 == 1;
    goto corral_source_split_11819;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_11751:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i90, 3);
    goto corral_source_split_11752;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    out_$i90 := $M.51;
    goto corral_source_split_11751;

  $bb31:
    assume out_$i53 == 1;
    goto corral_source_split_11750;

  $bb30:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i49, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_11829:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} ldv_stop();
    goto corral_source_split_11829;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i53 == 1);
    goto $bb33;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb33;

  $bb77:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_11832:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_11831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} ldv_main_exported_3();
    goto corral_source_split_11832;

  $bb76:
    assume out_$i97 == 1;
    goto corral_source_split_11831;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_11733:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.i32(out_$i96, 0);
    goto corral_source_split_11734;

  corral_source_split_11732:
    assume {:verifier.code 0} true;
    out_$i96 := $M.52;
    goto corral_source_split_11733;

  $bb19:
    assume !(out_$i45 == 1);
    goto corral_source_split_11732;

  $bb80:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb114:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_11895:
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    $M.53 := 5;
    call {:si_unique_call 1804} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_11895;

  corral_source_split_11893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} out_vslice_dummy_var_87 := usbhid_start(out_$p118);
    goto corral_source_split_11894;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    out_$p118 := $M.50;
    goto corral_source_split_11893;

  $bb113:
    assume out_$i117 == 1;
    goto corral_source_split_11892;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    out_$i117 := $eq.i32(out_$i116, 3);
    goto corral_source_split_11890;

  corral_source_split_11888:
    assume {:verifier.code 0} true;
    out_$i116 := $M.53;
    goto corral_source_split_11889;

  $bb111:
    assume out_$i115 == 1;
    goto corral_source_split_11888;

  $bb107:
    assume out_$i113 == 1;
    assume {:verifier.code 0} true;
    out_$i115 := $eq.i32(out_$i100, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb99:
    assume out_$i109 == 1;
    assume {:verifier.code 0} true;
    out_$i113 := $slt.i32(out_$i100, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb82:
    assume out_$i101 == 1;
    assume {:verifier.code 0} true;
    out_$i109 := $slt.i32(out_$i100, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb81:
    assume {:verifier.code 0} true;
    out_$i101 := $slt.i32(out_$i100, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_11834:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1800} out_$i100 := __VERIFIER_nondet_int();
    call {:si_unique_call 1801} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i100);
    call {:si_unique_call 1802} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i100);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb79:
    assume out_$i99 == 1;
    goto corral_source_split_11834;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_11725:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i32(out_$i98, 0);
    goto corral_source_split_11726;

  corral_source_split_11724:
    assume {:verifier.code 0} true;
    out_$i98 := $M.53;
    goto corral_source_split_11725;

  $bb16:
    assume out_$i44 == 1;
    goto corral_source_split_11724;

  $bb15:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i37, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb130:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_11971:
    assume {:verifier.code 0} true;
    $M.53 := 5;
    call {:si_unique_call 1814} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_11972;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} out_vslice_dummy_var_92 := usbhid_raw_request(out_$p170, out_$i173, in_$p16, out_$i174, out_$i177, out_$i178);
    goto corral_source_split_11971;

  corral_source_split_11969:
    assume {:verifier.code 0} true;
    out_$i178 := $load.i32($M.47, in_$p2);
    goto corral_source_split_11970;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    out_$i177 := $trunc.i32.i8(out_$i176);
    goto corral_source_split_11969;

  corral_source_split_11967:
    assume {:verifier.code 0} true;
    out_$i176 := $zext.i8.i32(out_$i175);
    goto corral_source_split_11968;

  corral_source_split_11966:
    assume {:verifier.code 0} true;
    out_$i175 := $load.i8($M.47, in_$p3);
    goto corral_source_split_11967;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    out_$i174 := $load.i64($M.47, in_$p8);
    goto corral_source_split_11966;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    out_$i173 := $trunc.i32.i8(out_$i172);
    goto corral_source_split_11965;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    out_$i172 := $zext.i8.i32(out_$i171);
    goto corral_source_split_11964;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    out_$i171 := $load.i8($M.47, in_$p4);
    goto corral_source_split_11963;

  corral_source_split_11961:
    assume {:verifier.code 0} true;
    out_$p170 := $M.50;
    goto corral_source_split_11962;

  $bb129:
    assume out_$i169 == 1;
    goto corral_source_split_11961;

  corral_source_split_11959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    out_$i169 := $eq.i32(out_$i168, 5);
    goto corral_source_split_11959;

  $bb128:
    assume {:verifier.code 0} true;
    out_$i168 := $M.53;
    goto corral_source_split_11958;

  $bb127:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1812} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_11956;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} out_vslice_dummy_var_91 := usbhid_raw_request(out_$p158, out_$i161, in_$p16, out_$i162, out_$i165, out_$i166);
    goto corral_source_split_11955;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    out_$i166 := $load.i32($M.47, in_$p2);
    goto corral_source_split_11954;

  corral_source_split_11952:
    assume {:verifier.code 0} true;
    out_$i165 := $trunc.i32.i8(out_$i164);
    goto corral_source_split_11953;

  corral_source_split_11951:
    assume {:verifier.code 0} true;
    out_$i164 := $zext.i8.i32(out_$i163);
    goto corral_source_split_11952;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i8($M.47, in_$p3);
    goto corral_source_split_11951;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    out_$i162 := $load.i64($M.47, in_$p8);
    goto corral_source_split_11950;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    out_$i161 := $trunc.i32.i8(out_$i160);
    goto corral_source_split_11949;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    out_$i160 := $zext.i8.i32(out_$i159);
    goto corral_source_split_11948;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    out_$i159 := $load.i8($M.47, in_$p4);
    goto corral_source_split_11947;

  corral_source_split_11945:
    assume {:verifier.code 0} true;
    out_$p158 := $M.50;
    goto corral_source_split_11946;

  $bb126:
    assume out_$i157 == 1;
    goto corral_source_split_11945;

  corral_source_split_11943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    out_$i157 := $eq.i32(out_$i156, 2);
    goto corral_source_split_11943;

  $bb125:
    assume {:verifier.code 0} true;
    out_$i156 := $M.53;
    goto corral_source_split_11942;

  $bb124:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_11940:
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_11939:
    assume {:verifier.code 0} true;
    $M.53 := 3;
    call {:si_unique_call 1810} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_11940;

  corral_source_split_11938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} out_vslice_dummy_var_90 := usbhid_raw_request(out_$p146, out_$i149, in_$p16, out_$i150, out_$i153, out_$i154);
    goto corral_source_split_11939;

  corral_source_split_11937:
    assume {:verifier.code 0} true;
    out_$i154 := $load.i32($M.47, in_$p2);
    goto corral_source_split_11938;

  corral_source_split_11936:
    assume {:verifier.code 0} true;
    out_$i153 := $trunc.i32.i8(out_$i152);
    goto corral_source_split_11937;

  corral_source_split_11935:
    assume {:verifier.code 0} true;
    out_$i152 := $zext.i8.i32(out_$i151);
    goto corral_source_split_11936;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    out_$i151 := $load.i8($M.47, in_$p3);
    goto corral_source_split_11935;

  corral_source_split_11933:
    assume {:verifier.code 0} true;
    out_$i150 := $load.i64($M.47, in_$p8);
    goto corral_source_split_11934;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    out_$i149 := $trunc.i32.i8(out_$i148);
    goto corral_source_split_11933;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    out_$i148 := $zext.i8.i32(out_$i147);
    goto corral_source_split_11932;

  corral_source_split_11930:
    assume {:verifier.code 0} true;
    out_$i147 := $load.i8($M.47, in_$p4);
    goto corral_source_split_11931;

  corral_source_split_11929:
    assume {:verifier.code 0} true;
    out_$p146 := $M.50;
    goto corral_source_split_11930;

  $bb123:
    assume out_$i145 == 1;
    goto corral_source_split_11929;

  corral_source_split_11927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i144, 3);
    goto corral_source_split_11927;

  $bb122:
    assume {:verifier.code 0} true;
    out_$i144 := $M.53;
    goto corral_source_split_11926;

  $bb121:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_11924:
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_11923:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1808} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_11924;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} out_vslice_dummy_var_89 := usbhid_raw_request(out_$p134, out_$i137, in_$p16, out_$i138, out_$i141, out_$i142);
    goto corral_source_split_11923;

  corral_source_split_11921:
    assume {:verifier.code 0} true;
    out_$i142 := $load.i32($M.47, in_$p2);
    goto corral_source_split_11922;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    out_$i141 := $trunc.i32.i8(out_$i140);
    goto corral_source_split_11921;

  corral_source_split_11919:
    assume {:verifier.code 0} true;
    out_$i140 := $zext.i8.i32(out_$i139);
    goto corral_source_split_11920;

  corral_source_split_11918:
    assume {:verifier.code 0} true;
    out_$i139 := $load.i8($M.47, in_$p3);
    goto corral_source_split_11919;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i64($M.47, in_$p8);
    goto corral_source_split_11918;

  corral_source_split_11916:
    assume {:verifier.code 0} true;
    out_$i137 := $trunc.i32.i8(out_$i136);
    goto corral_source_split_11917;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    out_$i136 := $zext.i8.i32(out_$i135);
    goto corral_source_split_11916;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i8($M.47, in_$p4);
    goto corral_source_split_11915;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    out_$p134 := $M.50;
    goto corral_source_split_11914;

  $bb120:
    assume out_$i133 == 1;
    goto corral_source_split_11913;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    out_$i133 := $eq.i32(out_$i132, 1);
    goto corral_source_split_11911;

  $bb119:
    assume {:verifier.code 0} true;
    out_$i132 := $M.53;
    goto corral_source_split_11910;

  $bb118:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_11907:
    assume {:verifier.code 0} true;
    $M.53 := 4;
    call {:si_unique_call 1806} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_11908;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} out_vslice_dummy_var_88 := usbhid_raw_request(out_$p122, out_$i125, in_$p16, out_$i126, out_$i129, out_$i130);
    goto corral_source_split_11907;

  corral_source_split_11905:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i32($M.47, in_$p2);
    goto corral_source_split_11906;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    out_$i129 := $trunc.i32.i8(out_$i128);
    goto corral_source_split_11905;

  corral_source_split_11903:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.i8.i32(out_$i127);
    goto corral_source_split_11904;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    out_$i127 := $load.i8($M.47, in_$p3);
    goto corral_source_split_11903;

  corral_source_split_11901:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i64($M.47, in_$p8);
    goto corral_source_split_11902;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    out_$i125 := $trunc.i32.i8(out_$i124);
    goto corral_source_split_11901;

  corral_source_split_11899:
    assume {:verifier.code 0} true;
    out_$i124 := $zext.i8.i32(out_$i123);
    goto corral_source_split_11900;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    out_$i123 := $load.i8($M.47, in_$p4);
    goto corral_source_split_11899;

  corral_source_split_11897:
    assume {:verifier.code 0} true;
    out_$p122 := $M.50;
    goto corral_source_split_11898;

  $bb117:
    assume out_$i121 == 1;
    goto corral_source_split_11897;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i32(out_$i120, 4);
    goto corral_source_split_11882;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    out_$i120 := $M.53;
    goto corral_source_split_11881;

  $bb109:
    assume out_$i114 == 1;
    goto corral_source_split_11880;

  $bb108:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    out_$i114 := $slt.i32(out_$i100, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb145:
    assume !(out_$i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  corral_source_split_12014:
    assume {:verifier.code 0} true;
    goto $bb146;

  corral_source_split_12013:
    assume {:verifier.code 0} true;
    $M.53 := 5;
    call {:si_unique_call 1824} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_12014;

  corral_source_split_12012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} out_vslice_dummy_var_97 := usbhid_output_report(out_$p202, in_$p13, out_$i203);
    goto corral_source_split_12013;

  corral_source_split_12011:
    assume {:verifier.code 0} true;
    out_$i203 := $load.i64($M.47, in_$p9);
    goto corral_source_split_12012;

  corral_source_split_12010:
    assume {:verifier.code 0} true;
    out_$p202 := $M.50;
    goto corral_source_split_12011;

  $bb144:
    assume out_$i201 == 1;
    goto corral_source_split_12010;

  corral_source_split_12008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  corral_source_split_12007:
    assume {:verifier.code 0} true;
    out_$i201 := $eq.i32(out_$i200, 5);
    goto corral_source_split_12008;

  $bb143:
    assume {:verifier.code 0} true;
    out_$i200 := $M.53;
    goto corral_source_split_12007;

  $bb142:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_12005:
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_12004:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1822} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_12005;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} out_vslice_dummy_var_96 := usbhid_output_report(out_$p197, in_$p13, out_$i198);
    goto corral_source_split_12004;

  corral_source_split_12002:
    assume {:verifier.code 0} true;
    out_$i198 := $load.i64($M.47, in_$p9);
    goto corral_source_split_12003;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    out_$p197 := $M.50;
    goto corral_source_split_12002;

  $bb141:
    assume out_$i196 == 1;
    goto corral_source_split_12001;

  corral_source_split_11999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  corral_source_split_11998:
    assume {:verifier.code 0} true;
    out_$i196 := $eq.i32(out_$i195, 2);
    goto corral_source_split_11999;

  $bb140:
    assume {:verifier.code 0} true;
    out_$i195 := $M.53;
    goto corral_source_split_11998;

  $bb139:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  corral_source_split_11996:
    assume {:verifier.code 0} true;
    goto $bb140;

  corral_source_split_11995:
    assume {:verifier.code 0} true;
    $M.53 := 3;
    call {:si_unique_call 1820} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_11996;

  corral_source_split_11994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} out_vslice_dummy_var_95 := usbhid_output_report(out_$p192, in_$p13, out_$i193);
    goto corral_source_split_11995;

  corral_source_split_11993:
    assume {:verifier.code 0} true;
    out_$i193 := $load.i64($M.47, in_$p9);
    goto corral_source_split_11994;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    out_$p192 := $M.50;
    goto corral_source_split_11993;

  $bb138:
    assume out_$i191 == 1;
    goto corral_source_split_11992;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  corral_source_split_11989:
    assume {:verifier.code 0} true;
    out_$i191 := $eq.i32(out_$i190, 3);
    goto corral_source_split_11990;

  $bb137:
    assume {:verifier.code 0} true;
    out_$i190 := $M.53;
    goto corral_source_split_11989;

  $bb136:
    assume !(out_$i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_11987:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1818} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_11987;

  corral_source_split_11985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} out_vslice_dummy_var_94 := usbhid_output_report(out_$p187, in_$p13, out_$i188);
    goto corral_source_split_11986;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    out_$i188 := $load.i64($M.47, in_$p9);
    goto corral_source_split_11985;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    out_$p187 := $M.50;
    goto corral_source_split_11984;

  $bb135:
    assume out_$i186 == 1;
    goto corral_source_split_11983;

  corral_source_split_11981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    out_$i186 := $eq.i32(out_$i185, 1);
    goto corral_source_split_11981;

  $bb134:
    assume {:verifier.code 0} true;
    out_$i185 := $M.53;
    goto corral_source_split_11980;

  $bb133:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    goto $bb134;

  corral_source_split_11977:
    assume {:verifier.code 0} true;
    $M.53 := 4;
    call {:si_unique_call 1816} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_11978;

  corral_source_split_11976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} out_vslice_dummy_var_93 := usbhid_output_report(out_$p182, in_$p13, out_$i183);
    goto corral_source_split_11977;

  corral_source_split_11975:
    assume {:verifier.code 0} true;
    out_$i183 := $load.i64($M.47, in_$p9);
    goto corral_source_split_11976;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    out_$p182 := $M.50;
    goto corral_source_split_11975;

  $bb132:
    assume out_$i181 == 1;
    goto corral_source_split_11974;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    out_$i181 := $eq.i32(out_$i180, 4);
    goto corral_source_split_11886;

  corral_source_split_11884:
    assume {:verifier.code 0} true;
    out_$i180 := $M.53;
    goto corral_source_split_11885;

  $bb110:
    assume !(out_$i114 == 1);
    goto corral_source_split_11884;

  $bb160:
    assume !(out_$i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  corral_source_split_12056:
    assume {:verifier.code 0} true;
    goto $bb161;

  corral_source_split_12055:
    assume {:verifier.code 0} true;
    $M.53 := 5;
    call {:si_unique_call 1834} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_12056;

  corral_source_split_12054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} out_vslice_dummy_var_102 := usbhid_power(out_$p227, out_$i228);
    goto corral_source_split_12055;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    out_$i228 := $load.i32($M.47, in_$p10);
    goto corral_source_split_12054;

  corral_source_split_12052:
    assume {:verifier.code 0} true;
    out_$p227 := $M.50;
    goto corral_source_split_12053;

  $bb159:
    assume out_$i226 == 1;
    goto corral_source_split_12052;

  corral_source_split_12050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  corral_source_split_12049:
    assume {:verifier.code 0} true;
    out_$i226 := $eq.i32(out_$i225, 5);
    goto corral_source_split_12050;

  $bb158:
    assume {:verifier.code 0} true;
    out_$i225 := $M.53;
    goto corral_source_split_12049;

  $bb157:
    assume !(out_$i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  corral_source_split_12047:
    assume {:verifier.code 0} true;
    goto $bb158;

  corral_source_split_12046:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1832} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_12047;

  corral_source_split_12045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} out_vslice_dummy_var_101 := usbhid_power(out_$p222, out_$i223);
    goto corral_source_split_12046;

  corral_source_split_12044:
    assume {:verifier.code 0} true;
    out_$i223 := $load.i32($M.47, in_$p10);
    goto corral_source_split_12045;

  corral_source_split_12043:
    assume {:verifier.code 0} true;
    out_$p222 := $M.50;
    goto corral_source_split_12044;

  $bb156:
    assume out_$i221 == 1;
    goto corral_source_split_12043;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  corral_source_split_12040:
    assume {:verifier.code 0} true;
    out_$i221 := $eq.i32(out_$i220, 2);
    goto corral_source_split_12041;

  $bb155:
    assume {:verifier.code 0} true;
    out_$i220 := $M.53;
    goto corral_source_split_12040;

  $bb154:
    assume !(out_$i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  corral_source_split_12038:
    assume {:verifier.code 0} true;
    goto $bb155;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    $M.53 := 3;
    call {:si_unique_call 1830} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_12038;

  corral_source_split_12036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} out_vslice_dummy_var_100 := usbhid_power(out_$p217, out_$i218);
    goto corral_source_split_12037;

  corral_source_split_12035:
    assume {:verifier.code 0} true;
    out_$i218 := $load.i32($M.47, in_$p10);
    goto corral_source_split_12036;

  corral_source_split_12034:
    assume {:verifier.code 0} true;
    out_$p217 := $M.50;
    goto corral_source_split_12035;

  $bb153:
    assume out_$i216 == 1;
    goto corral_source_split_12034;

  corral_source_split_12032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  corral_source_split_12031:
    assume {:verifier.code 0} true;
    out_$i216 := $eq.i32(out_$i215, 3);
    goto corral_source_split_12032;

  $bb152:
    assume {:verifier.code 0} true;
    out_$i215 := $M.53;
    goto corral_source_split_12031;

  $bb151:
    assume !(out_$i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  corral_source_split_12029:
    assume {:verifier.code 0} true;
    goto $bb152;

  corral_source_split_12028:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1828} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_12029;

  corral_source_split_12027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} out_vslice_dummy_var_99 := usbhid_power(out_$p212, out_$i213);
    goto corral_source_split_12028;

  corral_source_split_12026:
    assume {:verifier.code 0} true;
    out_$i213 := $load.i32($M.47, in_$p10);
    goto corral_source_split_12027;

  corral_source_split_12025:
    assume {:verifier.code 0} true;
    out_$p212 := $M.50;
    goto corral_source_split_12026;

  $bb150:
    assume out_$i211 == 1;
    goto corral_source_split_12025;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  corral_source_split_12022:
    assume {:verifier.code 0} true;
    out_$i211 := $eq.i32(out_$i210, 1);
    goto corral_source_split_12023;

  $bb149:
    assume {:verifier.code 0} true;
    out_$i210 := $M.53;
    goto corral_source_split_12022;

  $bb148:
    assume !(out_$i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_12020:
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    $M.53 := 4;
    call {:si_unique_call 1826} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_12020;

  corral_source_split_12018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} out_vslice_dummy_var_98 := usbhid_power(out_$p207, out_$i208);
    goto corral_source_split_12019;

  corral_source_split_12017:
    assume {:verifier.code 0} true;
    out_$i208 := $load.i32($M.47, in_$p10);
    goto corral_source_split_12018;

  corral_source_split_12016:
    assume {:verifier.code 0} true;
    out_$p207 := $M.50;
    goto corral_source_split_12017;

  $bb147:
    assume out_$i206 == 1;
    goto corral_source_split_12016;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  corral_source_split_11873:
    assume {:verifier.code 0} true;
    out_$i206 := $eq.i32(out_$i205, 4);
    goto corral_source_split_11874;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    out_$i205 := $M.53;
    goto corral_source_split_11873;

  $bb105:
    assume out_$i112 == 1;
    goto corral_source_split_11872;

  $bb101:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$i112 := $slt.i32(out_$i100, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb100:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    out_$i110 := $slt.i32(out_$i100, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb175:
    assume !(out_$i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_12093:
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_12092:
    assume {:verifier.code 0} true;
    $M.53 := 5;
    call {:si_unique_call 1844} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_12093;

  corral_source_split_12091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} out_vslice_dummy_var_107 := usbhid_wait_io(out_$p248);
    goto corral_source_split_12092;

  corral_source_split_12090:
    assume {:verifier.code 0} true;
    out_$p248 := $M.50;
    goto corral_source_split_12091;

  $bb174:
    assume out_$i247 == 1;
    goto corral_source_split_12090;

  corral_source_split_12088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  corral_source_split_12087:
    assume {:verifier.code 0} true;
    out_$i247 := $eq.i32(out_$i246, 5);
    goto corral_source_split_12088;

  $bb173:
    assume {:verifier.code 0} true;
    out_$i246 := $M.53;
    goto corral_source_split_12087;

  $bb172:
    assume !(out_$i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_12085:
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_12084:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1842} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_12085;

  corral_source_split_12083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} out_vslice_dummy_var_106 := usbhid_wait_io(out_$p244);
    goto corral_source_split_12084;

  corral_source_split_12082:
    assume {:verifier.code 0} true;
    out_$p244 := $M.50;
    goto corral_source_split_12083;

  $bb171:
    assume out_$i243 == 1;
    goto corral_source_split_12082;

  corral_source_split_12080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  corral_source_split_12079:
    assume {:verifier.code 0} true;
    out_$i243 := $eq.i32(out_$i242, 2);
    goto corral_source_split_12080;

  $bb170:
    assume {:verifier.code 0} true;
    out_$i242 := $M.53;
    goto corral_source_split_12079;

  $bb169:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  corral_source_split_12077:
    assume {:verifier.code 0} true;
    goto $bb170;

  corral_source_split_12076:
    assume {:verifier.code 0} true;
    $M.53 := 3;
    call {:si_unique_call 1840} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_12077;

  corral_source_split_12075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} out_vslice_dummy_var_105 := usbhid_wait_io(out_$p240);
    goto corral_source_split_12076;

  corral_source_split_12074:
    assume {:verifier.code 0} true;
    out_$p240 := $M.50;
    goto corral_source_split_12075;

  $bb168:
    assume out_$i239 == 1;
    goto corral_source_split_12074;

  corral_source_split_12072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  corral_source_split_12071:
    assume {:verifier.code 0} true;
    out_$i239 := $eq.i32(out_$i238, 3);
    goto corral_source_split_12072;

  $bb167:
    assume {:verifier.code 0} true;
    out_$i238 := $M.53;
    goto corral_source_split_12071;

  $bb166:
    assume !(out_$i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  corral_source_split_12069:
    assume {:verifier.code 0} true;
    goto $bb167;

  corral_source_split_12068:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1838} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_12069;

  corral_source_split_12067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} out_vslice_dummy_var_104 := usbhid_wait_io(out_$p236);
    goto corral_source_split_12068;

  corral_source_split_12066:
    assume {:verifier.code 0} true;
    out_$p236 := $M.50;
    goto corral_source_split_12067;

  $bb165:
    assume out_$i235 == 1;
    goto corral_source_split_12066;

  corral_source_split_12064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  corral_source_split_12063:
    assume {:verifier.code 0} true;
    out_$i235 := $eq.i32(out_$i234, 1);
    goto corral_source_split_12064;

  $bb164:
    assume {:verifier.code 0} true;
    out_$i234 := $M.53;
    goto corral_source_split_12063;

  $bb163:
    assume !(out_$i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_12061:
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_12060:
    assume {:verifier.code 0} true;
    $M.53 := 4;
    call {:si_unique_call 1836} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_12061;

  corral_source_split_12059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} out_vslice_dummy_var_103 := usbhid_wait_io(out_$p232);
    goto corral_source_split_12060;

  corral_source_split_12058:
    assume {:verifier.code 0} true;
    out_$p232 := $M.50;
    goto corral_source_split_12059;

  $bb162:
    assume out_$i231 == 1;
    goto corral_source_split_12058;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  corral_source_split_11877:
    assume {:verifier.code 0} true;
    out_$i231 := $eq.i32(out_$i230, 4);
    goto corral_source_split_11878;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    out_$i230 := $M.53;
    goto corral_source_split_11877;

  $bb106:
    assume !(out_$i112 == 1);
    goto corral_source_split_11876;

  $bb178:
    assume !(out_$i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  corral_source_split_12098:
    assume {:verifier.code 0} true;
    goto $bb179;

  corral_source_split_12097:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1846} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_12098;

  SeqInstr_396:
    goto corral_source_split_12097;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  corral_source_split_12096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} usbhid_close(out_$p252);
    goto SeqInstr_395;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    out_$p252 := $M.50;
    goto corral_source_split_12096;

  $bb177:
    assume out_$i251 == 1;
    goto corral_source_split_12095;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  corral_source_split_11865:
    assume {:verifier.code 0} true;
    out_$i251 := $eq.i32(out_$i250, 3);
    goto corral_source_split_11866;

  corral_source_split_11864:
    assume {:verifier.code 0} true;
    out_$i250 := $M.53;
    goto corral_source_split_11865;

  $bb103:
    assume out_$i111 == 1;
    goto corral_source_split_11864;

  $bb102:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    out_$i111 := $slt.i32(out_$i100, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb181:
    assume !(out_$i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb183:
    assume !(out_$i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_12108:
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    $M.53 := 3;
    call {:si_unique_call 1849} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_12108;

  $bb182:
    assume out_$i258 == 1;
    goto corral_source_split_12107;

  corral_source_split_12105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    out_$i258 := $eq.i32(out_$i257, 0);
    goto corral_source_split_12105;

  corral_source_split_12103:
    assume {:verifier.code 0} true;
    out_$i257 := $M.64;
    goto corral_source_split_12104;

  corral_source_split_12102:
    assume {:verifier.code 0} true;
    $M.64 := out_$i256;
    call {:si_unique_call 1848} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i256);
    goto corral_source_split_12103;

  SeqInstr_399:
    goto corral_source_split_12102;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} out_$i256 := usbhid_open(out_$p255);
    goto SeqInstr_398;

  corral_source_split_12100:
    assume {:verifier.code 0} true;
    out_$p255 := $M.50;
    goto corral_source_split_12101;

  $bb180:
    assume out_$i254 == 1;
    goto corral_source_split_12100;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    out_$i254 := $eq.i32(out_$i253, 2);
    goto corral_source_split_11870;

  corral_source_split_11868:
    assume {:verifier.code 0} true;
    out_$i253 := $M.53;
    goto corral_source_split_11869;

  $bb104:
    assume !(out_$i111 == 1);
    goto corral_source_split_11868;

  $bb199:
    assume !(out_$i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    goto $bb200;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    $M.53 := 5;
    call {:si_unique_call 1859} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_12160;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} out_vslice_dummy_var_112 := usbhid_idle(out_$p289, out_$i290, out_$i291, out_$i292);
    goto corral_source_split_12159;

  corral_source_split_12157:
    assume {:verifier.code 0} true;
    out_$i292 := $load.i32($M.47, in_$p5);
    goto corral_source_split_12158;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    out_$i291 := $load.i32($M.47, in_$p1);
    goto corral_source_split_12157;

  corral_source_split_12155:
    assume {:verifier.code 0} true;
    out_$i290 := $load.i32($M.47, in_$p6);
    goto corral_source_split_12156;

  corral_source_split_12154:
    assume {:verifier.code 0} true;
    out_$p289 := $M.50;
    goto corral_source_split_12155;

  $bb198:
    assume out_$i288 == 1;
    goto corral_source_split_12154;

  corral_source_split_12152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    out_$i288 := $eq.i32(out_$i287, 5);
    goto corral_source_split_12152;

  $bb197:
    assume {:verifier.code 0} true;
    out_$i287 := $M.53;
    goto corral_source_split_12151;

  $bb196:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1857} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_12149;

  corral_source_split_12147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} out_vslice_dummy_var_111 := usbhid_idle(out_$p282, out_$i283, out_$i284, out_$i285);
    goto corral_source_split_12148;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    out_$i285 := $load.i32($M.47, in_$p5);
    goto corral_source_split_12147;

  corral_source_split_12145:
    assume {:verifier.code 0} true;
    out_$i284 := $load.i32($M.47, in_$p1);
    goto corral_source_split_12146;

  corral_source_split_12144:
    assume {:verifier.code 0} true;
    out_$i283 := $load.i32($M.47, in_$p6);
    goto corral_source_split_12145;

  corral_source_split_12143:
    assume {:verifier.code 0} true;
    out_$p282 := $M.50;
    goto corral_source_split_12144;

  $bb195:
    assume out_$i281 == 1;
    goto corral_source_split_12143;

  corral_source_split_12141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    out_$i281 := $eq.i32(out_$i280, 2);
    goto corral_source_split_12141;

  $bb194:
    assume {:verifier.code 0} true;
    out_$i280 := $M.53;
    goto corral_source_split_12140;

  $bb193:
    assume !(out_$i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_12138:
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_12137:
    assume {:verifier.code 0} true;
    $M.53 := 3;
    call {:si_unique_call 1855} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_12138;

  corral_source_split_12136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} out_vslice_dummy_var_110 := usbhid_idle(out_$p275, out_$i276, out_$i277, out_$i278);
    goto corral_source_split_12137;

  corral_source_split_12135:
    assume {:verifier.code 0} true;
    out_$i278 := $load.i32($M.47, in_$p5);
    goto corral_source_split_12136;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    out_$i277 := $load.i32($M.47, in_$p1);
    goto corral_source_split_12135;

  corral_source_split_12133:
    assume {:verifier.code 0} true;
    out_$i276 := $load.i32($M.47, in_$p6);
    goto corral_source_split_12134;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    out_$p275 := $M.50;
    goto corral_source_split_12133;

  $bb192:
    assume out_$i274 == 1;
    goto corral_source_split_12132;

  corral_source_split_12130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  corral_source_split_12129:
    assume {:verifier.code 0} true;
    out_$i274 := $eq.i32(out_$i273, 3);
    goto corral_source_split_12130;

  $bb191:
    assume {:verifier.code 0} true;
    out_$i273 := $M.53;
    goto corral_source_split_12129;

  $bb190:
    assume !(out_$i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_12127:
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_12126:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1853} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_12127;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} out_vslice_dummy_var_109 := usbhid_idle(out_$p268, out_$i269, out_$i270, out_$i271);
    goto corral_source_split_12126;

  corral_source_split_12124:
    assume {:verifier.code 0} true;
    out_$i271 := $load.i32($M.47, in_$p5);
    goto corral_source_split_12125;

  corral_source_split_12123:
    assume {:verifier.code 0} true;
    out_$i270 := $load.i32($M.47, in_$p1);
    goto corral_source_split_12124;

  corral_source_split_12122:
    assume {:verifier.code 0} true;
    out_$i269 := $load.i32($M.47, in_$p6);
    goto corral_source_split_12123;

  corral_source_split_12121:
    assume {:verifier.code 0} true;
    out_$p268 := $M.50;
    goto corral_source_split_12122;

  $bb189:
    assume out_$i267 == 1;
    goto corral_source_split_12121;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  corral_source_split_12118:
    assume {:verifier.code 0} true;
    out_$i267 := $eq.i32(out_$i266, 1);
    goto corral_source_split_12119;

  $bb188:
    assume {:verifier.code 0} true;
    out_$i266 := $M.53;
    goto corral_source_split_12118;

  $bb187:
    assume !(out_$i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_12115:
    assume {:verifier.code 0} true;
    $M.53 := 4;
    call {:si_unique_call 1851} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_12116;

  corral_source_split_12114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} out_vslice_dummy_var_108 := usbhid_idle(out_$p261, out_$i262, out_$i263, out_$i264);
    goto corral_source_split_12115;

  corral_source_split_12113:
    assume {:verifier.code 0} true;
    out_$i264 := $load.i32($M.47, in_$p5);
    goto corral_source_split_12114;

  corral_source_split_12112:
    assume {:verifier.code 0} true;
    out_$i263 := $load.i32($M.47, in_$p1);
    goto corral_source_split_12113;

  corral_source_split_12111:
    assume {:verifier.code 0} true;
    out_$i262 := $load.i32($M.47, in_$p6);
    goto corral_source_split_12112;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    out_$p261 := $M.50;
    goto corral_source_split_12111;

  $bb186:
    assume out_$i260 == 1;
    goto corral_source_split_12110;

  corral_source_split_11854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    out_$i260 := $eq.i32(out_$i259, 4);
    goto corral_source_split_11854;

  corral_source_split_11852:
    assume {:verifier.code 0} true;
    out_$i259 := $M.53;
    goto corral_source_split_11853;

  $bb95:
    assume out_$i107 == 1;
    goto corral_source_split_11852;

  $bb84:
    assume out_$i102 == 1;
    assume {:verifier.code 0} true;
    out_$i107 := $slt.i32(out_$i100, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb83:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i100, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb214:
    assume !(out_$i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_12197:
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_12196:
    assume {:verifier.code 0} true;
    $M.53 := 5;
    call {:si_unique_call 1869} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_12197;

  corral_source_split_12195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} out_vslice_dummy_var_117 := usbhid_parse(out_$p312);
    goto corral_source_split_12196;

  corral_source_split_12194:
    assume {:verifier.code 0} true;
    out_$p312 := $M.50;
    goto corral_source_split_12195;

  $bb213:
    assume out_$i311 == 1;
    goto corral_source_split_12194;

  corral_source_split_12192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    out_$i311 := $eq.i32(out_$i310, 5);
    goto corral_source_split_12192;

  $bb212:
    assume {:verifier.code 0} true;
    out_$i310 := $M.53;
    goto corral_source_split_12191;

  $bb211:
    assume !(out_$i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    goto $bb212;

  corral_source_split_12188:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1867} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_12189;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} out_vslice_dummy_var_116 := usbhid_parse(out_$p308);
    goto corral_source_split_12188;

  corral_source_split_12186:
    assume {:verifier.code 0} true;
    out_$p308 := $M.50;
    goto corral_source_split_12187;

  $bb210:
    assume out_$i307 == 1;
    goto corral_source_split_12186;

  corral_source_split_12184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    out_$i307 := $eq.i32(out_$i306, 2);
    goto corral_source_split_12184;

  $bb209:
    assume {:verifier.code 0} true;
    out_$i306 := $M.53;
    goto corral_source_split_12183;

  $bb208:
    assume !(out_$i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_12181:
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_12180:
    assume {:verifier.code 0} true;
    $M.53 := 3;
    call {:si_unique_call 1865} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_12181;

  corral_source_split_12179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} out_vslice_dummy_var_115 := usbhid_parse(out_$p304);
    goto corral_source_split_12180;

  corral_source_split_12178:
    assume {:verifier.code 0} true;
    out_$p304 := $M.50;
    goto corral_source_split_12179;

  $bb207:
    assume out_$i303 == 1;
    goto corral_source_split_12178;

  corral_source_split_12176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    out_$i303 := $eq.i32(out_$i302, 3);
    goto corral_source_split_12176;

  $bb206:
    assume {:verifier.code 0} true;
    out_$i302 := $M.53;
    goto corral_source_split_12175;

  $bb205:
    assume !(out_$i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_12173:
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_12172:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1863} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_12173;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} out_vslice_dummy_var_114 := usbhid_parse(out_$p300);
    goto corral_source_split_12172;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    out_$p300 := $M.50;
    goto corral_source_split_12171;

  $bb204:
    assume out_$i299 == 1;
    goto corral_source_split_12170;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    out_$i299 := $eq.i32(out_$i298, 1);
    goto corral_source_split_12168;

  $bb203:
    assume {:verifier.code 0} true;
    out_$i298 := $M.53;
    goto corral_source_split_12167;

  $bb202:
    assume !(out_$i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_12164:
    assume {:verifier.code 0} true;
    $M.53 := 4;
    call {:si_unique_call 1861} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_12165;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} out_vslice_dummy_var_113 := usbhid_parse(out_$p296);
    goto corral_source_split_12164;

  corral_source_split_12162:
    assume {:verifier.code 0} true;
    out_$p296 := $M.50;
    goto corral_source_split_12163;

  $bb201:
    assume out_$i295 == 1;
    goto corral_source_split_12162;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    out_$i295 := $eq.i32(out_$i294, 4);
    goto corral_source_split_11858;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    out_$i294 := $M.53;
    goto corral_source_split_11857;

  $bb97:
    assume out_$i108 == 1;
    goto corral_source_split_11856;

  $bb96:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    out_$i108 := $slt.i32(out_$i100, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb217:
    assume !(out_$i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_12202:
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_12201:
    assume {:verifier.code 0} true;
    $M.53 := 3;
    call {:si_unique_call 1871} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_12202;

  corral_source_split_12200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} usbhid_stop(out_$p316);
    goto corral_source_split_12201;

  corral_source_split_12199:
    assume {:verifier.code 0} true;
    out_$p316 := $M.50;
    goto corral_source_split_12200;

  $bb216:
    assume out_$i315 == 1;
    goto corral_source_split_12199;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  corral_source_split_11861:
    assume {:verifier.code 0} true;
    out_$i315 := $eq.i32(out_$i314, 5);
    goto corral_source_split_11862;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    out_$i314 := $M.53;
    goto corral_source_split_11861;

  $bb98:
    assume !(out_$i108 == 1);
    goto corral_source_split_11860;

  $bb232:
    assume !(out_$i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_12244:
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    $M.53 := 5;
    call {:si_unique_call 1881} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_12244;

  corral_source_split_12242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} usbhid_request(out_$p335, in_$p15, out_$i336);
    goto corral_source_split_12243;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    out_$i336 := $load.i32($M.47, in_$p7);
    goto corral_source_split_12242;

  corral_source_split_12240:
    assume {:verifier.code 0} true;
    out_$p335 := $M.50;
    goto corral_source_split_12241;

  $bb231:
    assume out_$i334 == 1;
    goto corral_source_split_12240;

  corral_source_split_12238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  corral_source_split_12237:
    assume {:verifier.code 0} true;
    out_$i334 := $eq.i32(out_$i333, 5);
    goto corral_source_split_12238;

  $bb230:
    assume {:verifier.code 0} true;
    out_$i333 := $M.53;
    goto corral_source_split_12237;

  $bb229:
    assume !(out_$i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    goto $bb230;

  corral_source_split_12234:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1879} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_12235;

  corral_source_split_12233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} usbhid_request(out_$p331, in_$p15, out_$i332);
    goto corral_source_split_12234;

  corral_source_split_12232:
    assume {:verifier.code 0} true;
    out_$i332 := $load.i32($M.47, in_$p7);
    goto corral_source_split_12233;

  corral_source_split_12231:
    assume {:verifier.code 0} true;
    out_$p331 := $M.50;
    goto corral_source_split_12232;

  $bb228:
    assume out_$i330 == 1;
    goto corral_source_split_12231;

  corral_source_split_12229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  corral_source_split_12228:
    assume {:verifier.code 0} true;
    out_$i330 := $eq.i32(out_$i329, 2);
    goto corral_source_split_12229;

  $bb227:
    assume {:verifier.code 0} true;
    out_$i329 := $M.53;
    goto corral_source_split_12228;

  $bb226:
    assume !(out_$i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_12226:
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    $M.53 := 3;
    call {:si_unique_call 1877} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_12226;

  corral_source_split_12224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} usbhid_request(out_$p327, in_$p15, out_$i328);
    goto corral_source_split_12225;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    out_$i328 := $load.i32($M.47, in_$p7);
    goto corral_source_split_12224;

  corral_source_split_12222:
    assume {:verifier.code 0} true;
    out_$p327 := $M.50;
    goto corral_source_split_12223;

  $bb225:
    assume out_$i326 == 1;
    goto corral_source_split_12222;

  corral_source_split_12220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    out_$i326 := $eq.i32(out_$i325, 3);
    goto corral_source_split_12220;

  $bb224:
    assume {:verifier.code 0} true;
    out_$i325 := $M.53;
    goto corral_source_split_12219;

  $bb223:
    assume !(out_$i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_12217:
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_12216:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1875} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_12217;

  corral_source_split_12215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} usbhid_request(out_$p323, in_$p15, out_$i324);
    goto corral_source_split_12216;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    out_$i324 := $load.i32($M.47, in_$p7);
    goto corral_source_split_12215;

  corral_source_split_12213:
    assume {:verifier.code 0} true;
    out_$p323 := $M.50;
    goto corral_source_split_12214;

  $bb222:
    assume out_$i322 == 1;
    goto corral_source_split_12213;

  corral_source_split_12211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  corral_source_split_12210:
    assume {:verifier.code 0} true;
    out_$i322 := $eq.i32(out_$i321, 1);
    goto corral_source_split_12211;

  $bb221:
    assume {:verifier.code 0} true;
    out_$i321 := $M.53;
    goto corral_source_split_12210;

  $bb220:
    assume !(out_$i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_12208:
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    $M.53 := 4;
    call {:si_unique_call 1873} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_12208;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} usbhid_request(out_$p319, in_$p15, out_$i320);
    goto corral_source_split_12207;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    out_$i320 := $load.i32($M.47, in_$p7);
    goto corral_source_split_12206;

  corral_source_split_12204:
    assume {:verifier.code 0} true;
    out_$p319 := $M.50;
    goto corral_source_split_12205;

  $bb219:
    assume out_$i318 == 1;
    goto corral_source_split_12204;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  corral_source_split_11845:
    assume {:verifier.code 0} true;
    out_$i318 := $eq.i32(out_$i317, 4);
    goto corral_source_split_11846;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    out_$i317 := $M.53;
    goto corral_source_split_11845;

  $bb93:
    assume out_$i106 == 1;
    goto corral_source_split_11844;

  $bb86:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$i106 := $slt.i32(out_$i100, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb85:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i100, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb241:
    assume !(out_$i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_12261:
    assume {:verifier.code 0} true;
    $M.53 := 4;
    call {:si_unique_call 1887} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_12262;

  corral_source_split_12260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} out_vslice_dummy_var_120 := ldv_disconnect_7();
    goto corral_source_split_12261;

  $bb240:
    assume out_$i344 == 1;
    goto corral_source_split_12260;

  corral_source_split_12258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    out_$i344 := $eq.i32(out_$i343, 5);
    goto corral_source_split_12258;

  $bb239:
    assume {:verifier.code 0} true;
    out_$i343 := $M.53;
    goto corral_source_split_12257;

  $bb238:
    assume !(out_$i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_12255:
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    $M.53 := 4;
    call {:si_unique_call 1885} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_12255;

  corral_source_split_12253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} out_vslice_dummy_var_119 := ldv_disconnect_7();
    goto corral_source_split_12254;

  $bb237:
    assume out_$i341 == 1;
    goto corral_source_split_12253;

  corral_source_split_12251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  corral_source_split_12250:
    assume {:verifier.code 0} true;
    out_$i341 := $eq.i32(out_$i340, 2);
    goto corral_source_split_12251;

  $bb236:
    assume {:verifier.code 0} true;
    out_$i340 := $M.53;
    goto corral_source_split_12250;

  $bb235:
    assume !(out_$i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_12248:
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_12247:
    assume {:verifier.code 0} true;
    $M.53 := 4;
    call {:si_unique_call 1883} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_12248;

  corral_source_split_12246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} out_vslice_dummy_var_118 := ldv_disconnect_7();
    goto corral_source_split_12247;

  $bb234:
    assume out_$i338 == 1;
    goto corral_source_split_12246;

  corral_source_split_11850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  corral_source_split_11849:
    assume {:verifier.code 0} true;
    out_$i338 := $eq.i32(out_$i337, 3);
    goto corral_source_split_11850;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    out_$i337 := $M.53;
    goto corral_source_split_11849;

  $bb94:
    assume !(out_$i106 == 1);
    goto corral_source_split_11848;

  $bb244:
    assume !(out_$i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_12269:
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_12268:
    assume {:verifier.code 0} true;
    $M.57 := out_$i350;
    call {:si_unique_call 1890} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i350);
    goto corral_source_split_12269;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    out_$i350 := $sub.i32(out_$i349, 1);
    goto corral_source_split_12268;

  corral_source_split_12266:
    assume {:verifier.code 0} true;
    out_$i349 := $M.57;
    goto corral_source_split_12267;

  corral_source_split_12265:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1889} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_12266;

  corral_source_split_12264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} out_vslice_dummy_var_121 := ldv_release_7();
    goto corral_source_split_12265;

  $bb243:
    assume out_$i347 == 1;
    goto corral_source_split_12264;

  corral_source_split_11838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  corral_source_split_11837:
    assume {:verifier.code 0} true;
    out_$i347 := $eq.i32(out_$i346, 4);
    goto corral_source_split_11838;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    out_$i346 := $M.53;
    goto corral_source_split_11837;

  $bb88:
    assume out_$i104 == 1;
    goto corral_source_split_11836;

  $bb87:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    out_$i104 := $slt.i32(out_$i100, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb247:
    assume !(out_$i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  corral_source_split_12276:
    assume {:verifier.code 0} true;
    goto $bb248;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    $M.57 := out_$i355;
    call {:si_unique_call 1893} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i355);
    goto corral_source_split_12276;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    out_$i355 := $add.i32(out_$i354, 1);
    goto corral_source_split_12275;

  corral_source_split_12273:
    assume {:verifier.code 0} true;
    out_$i354 := $M.57;
    goto corral_source_split_12274;

  corral_source_split_12272:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1892} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_12273;

  corral_source_split_12271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} out_vslice_dummy_var_122 := ldv_setup_7();
    goto corral_source_split_12272;

  $bb246:
    assume out_$i352 == 1;
    goto corral_source_split_12271;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    out_$i352 := $eq.i32(out_$i351, 1);
    goto corral_source_split_11842;

  corral_source_split_11840:
    assume {:verifier.code 0} true;
    out_$i351 := $M.53;
    goto corral_source_split_11841;

  $bb90:
    assume out_$i105 == 1;
    goto corral_source_split_11840;

  $bb89:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i100, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} ldv_stop();
    goto corral_source_split_12278;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb91:
    assume {:verifier.code 0} true;
    assume !(out_$i105 == 1);
    goto $bb92;

  $bb112:
    assume {:verifier.code 0} true;
    assume !(out_$i115 == 1);
    goto $bb92;

  $bb253:
    assume !(out_$i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  corral_source_split_12281:
    assume {:verifier.code 0} true;
    goto $bb254;

  corral_source_split_12280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} choose_timer_2();
    goto corral_source_split_12281;

  $bb252:
    assume out_$i357 == 1;
    goto corral_source_split_12280;

  corral_source_split_11730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  corral_source_split_11729:
    assume {:verifier.code 0} true;
    out_$i357 := $ne.i32(out_$i356, 0);
    goto corral_source_split_11730;

  corral_source_split_11728:
    assume {:verifier.code 0} true;
    out_$i356 := $M.54;
    goto corral_source_split_11729;

  $bb17:
    assume !(out_$i44 == 1);
    goto corral_source_split_11728;

  $bb256:
    assume !(out_$i359 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    goto $bb257;

  corral_source_split_12283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} invoke_work_1();
    goto corral_source_split_12284;

  $bb255:
    assume out_$i359 == 1;
    goto corral_source_split_12283;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    out_$i359 := $ne.i32(out_$i358, 0);
    goto corral_source_split_11718;

  corral_source_split_11716:
    assume {:verifier.code 0} true;
    out_$i358 := $M.55;
    goto corral_source_split_11717;

  $bb12:
    assume out_$i42 == 1;
    goto corral_source_split_11716;

  $bb5:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i37, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i37, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb259:
    assume !(out_$i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  corral_source_split_12287:
    assume {:verifier.code 0} true;
    goto $bb260;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} ldv_main_exported_4();
    goto corral_source_split_12287;

  $bb258:
    assume out_$i361 == 1;
    goto corral_source_split_12286;

  corral_source_split_11722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  corral_source_split_11721:
    assume {:verifier.code 0} true;
    out_$i361 := $ne.i32(out_$i360, 0);
    goto corral_source_split_11722;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    out_$i360 := $M.56;
    goto corral_source_split_11721;

  $bb13:
    assume !(out_$i42 == 1);
    goto corral_source_split_11720;

  $bb262:
    assume !(out_$i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb272:
    assume {:verifier.code 0} true;
    assume !(out_$i369 == 1);
    goto $bb273;

  $bb275:
    assume {:verifier.code 0} true;
    assume !(out_$i371 == 1);
    goto $bb273;

  corral_source_split_12301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275;

  corral_source_split_12300:
    assume {:verifier.code 0} true;
    out_$i371 := $eq.i32(out_$i370, 0);
    goto corral_source_split_12301;

  corral_source_split_12299:
    assume {:verifier.code 0} true;
    out_$i370 := $M.57;
    goto corral_source_split_12300;

  $bb271:
    assume out_$i369 == 1;
    goto corral_source_split_12299;

  corral_source_split_12297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  corral_source_split_12296:
    assume {:verifier.code 0} true;
    out_$i369 := $eq.i32(out_$i368, 3);
    goto corral_source_split_12297;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    out_$i368 := $M.58;
    goto corral_source_split_12296;

  $bb269:
    assume out_$i367 == 1;
    goto corral_source_split_12295;

  $bb264:
    assume out_$i365 == 1;
    assume {:verifier.code 0} true;
    out_$i367 := $eq.i32(out_$i364, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb263:
    assume {:verifier.code 0} true;
    out_$i365 := $slt.i32(out_$i364, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  corral_source_split_12289:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1898} out_$i364 := __VERIFIER_nondet_int();
    call {:si_unique_call 1899} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i364);
    call {:si_unique_call 1900} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i364);
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb261:
    assume out_$i363 == 1;
    goto corral_source_split_12289;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  corral_source_split_11709:
    assume {:verifier.code 0} true;
    out_$i363 := $ne.i32(out_$i362, 0);
    goto corral_source_split_11710;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    out_$i362 := $M.58;
    goto corral_source_split_11709;

  $bb7:
    assume out_$i40 == 1;
    goto corral_source_split_11708;

  $bb6:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i37, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb280:
    assume !(out_$i373 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb285:
    assume !(out_$i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_12325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285;

  corral_source_split_12324:
    assume {:verifier.code 0} true;
    out_$i378 := $ne.i32(out_$i377, 0);
    goto corral_source_split_12325;

  $bb283:
    assume {:verifier.code 0} true;
    out_$i377 := $M.65;
    goto corral_source_split_12324;

  $bb282:
    assume !(out_$i376 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_12322:
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_12321:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1912} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_12322;

  corral_source_split_12320:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1911} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_12321;

  corral_source_split_12319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} ldv_initialize_hid_ll_driver_7();
    goto corral_source_split_12320;

  corral_source_split_12318:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1909} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_12319;

  corral_source_split_12317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} ldv_file_operations_5();
    goto corral_source_split_12318;

  corral_source_split_12316:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1907} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12317;

  corral_source_split_12315:
    assume {:verifier.code 0} true;
    $M.58 := 3;
    call {:si_unique_call 1906} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_12316;

  $bb281:
    assume out_$i376 == 1;
    goto corral_source_split_12315;

  corral_source_split_12313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  corral_source_split_12312:
    assume {:verifier.code 0} true;
    out_$i376 := $eq.i32(out_$i375, 0);
    goto corral_source_split_12313;

  corral_source_split_12311:
    assume {:verifier.code 0} true;
    out_$i375 := $M.65;
    goto corral_source_split_12312;

  corral_source_split_12310:
    assume {:verifier.code 0} true;
    $M.65 := out_$i374;
    call {:si_unique_call 1905} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i374);
    goto corral_source_split_12311;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} out_$i374 := hid_init();
    goto corral_source_split_12310;

  $bb279:
    assume out_$i373 == 1;
    goto corral_source_split_12309;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  corral_source_split_12292:
    assume {:verifier.code 0} true;
    out_$i373 := $eq.i32(out_$i372, 1);
    goto corral_source_split_12293;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    out_$i372 := $M.58;
    goto corral_source_split_12292;

  $bb266:
    assume out_$i366 == 1;
    goto corral_source_split_12291;

  $bb265:
    assume !(out_$i365 == 1);
    assume {:verifier.code 0} true;
    out_$i366 := $eq.i32(out_$i364, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  corral_source_split_12330:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} ldv_stop();
    goto corral_source_split_12330;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb267:
    assume {:verifier.code 0} true;
    assume !(out_$i366 == 1);
    goto $bb268;

  $bb270:
    assume {:verifier.code 0} true;
    assume !(out_$i367 == 1);
    goto $bb268;

  $bb292:
    assume !(out_$i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  corral_source_split_12333:
    assume {:verifier.code 0} true;
    goto $bb293;

  SeqInstr_405:
    goto corral_source_split_12333;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  corral_source_split_12332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} ldv_main_exported_5();
    goto SeqInstr_404;

  $bb291:
    assume out_$i380 == 1;
    goto corral_source_split_12332;

  corral_source_split_11714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    out_$i380 := $ne.i32(out_$i379, 0);
    goto corral_source_split_11714;

  corral_source_split_11712:
    assume {:verifier.code 0} true;
    out_$i379 := $M.59;
    goto corral_source_split_11713;

  $bb9:
    assume out_$i41 == 1;
    goto corral_source_split_11712;

  $bb8:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i37, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_12335:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} ldv_stop();
    goto corral_source_split_12335;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb11;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i46 == 1);
    goto $bb11;

  $bb75_dummy:
    call {:si_unique_call 1} out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i180, out_$i181, out_$p182, out_$i183, out_$i185, out_$i186, out_$p187, out_$i188, out_$i190, out_$i191, out_$p192, out_$i193, out_$i195, out_$i196, out_$p197, out_$i198, out_$i200, out_$i201, out_$p202, out_$i203, out_$i205, out_$i206, out_$p207, out_$i208, out_$i210, out_$i211, out_$p212, out_$i213, out_$i215, out_$i216, out_$p217, out_$i218, out_$i220, out_$i221, out_$p222, out_$i223, out_$i225, out_$i226, out_$p227, out_$i228, out_$i230, out_$i231, out_$p232, out_$i234, out_$i235, out_$p236, out_$i238, out_$i239, out_$p240, out_$i242, out_$i243, out_$p244, out_$i246, out_$i247, out_$p248, out_$i250, out_$i251, out_$p252, out_$i253, out_$i254, out_$p255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$p261, out_$i262, out_$i263, out_$i264, out_$i266, out_$i267, out_$p268, out_$i269, out_$i270, out_$i271, out_$i273, out_$i274, out_$p275, out_$i276, out_$i277, out_$i278, out_$i280, out_$i281, out_$p282, out_$i283, out_$i284, out_$i285, out_$i287, out_$i288, out_$p289, out_$i290, out_$i291, out_$i292, out_$i294, out_$i295, out_$p296, out_$i298, out_$i299, out_$p300, out_$i302, out_$i303, out_$p304, out_$i306, out_$i307, out_$p308, out_$i310, out_$i311, out_$p312, out_$i314, out_$i315, out_$p316, out_$i317, out_$i318, out_$p319, out_$i320, out_$i321, out_$i322, out_$p323, out_$i324, out_$i325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$p331, out_$i332, out_$i333, out_$i334, out_$p335, out_$i336, out_$i337, out_$i338, out_$i340, out_$i341, out_$i343, out_$i344, out_$i346, out_$i347, out_$i349, out_$i350, out_$i351, out_$i352, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i372, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p12, in_$p13, in_$p15, in_$p16, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i180, out_$i181, out_$p182, out_$i183, out_$i185, out_$i186, out_$p187, out_$i188, out_$i190, out_$i191, out_$p192, out_$i193, out_$i195, out_$i196, out_$p197, out_$i198, out_$i200, out_$i201, out_$p202, out_$i203, out_$i205, out_$i206, out_$p207, out_$i208, out_$i210, out_$i211, out_$p212, out_$i213, out_$i215, out_$i216, out_$p217, out_$i218, out_$i220, out_$i221, out_$p222, out_$i223, out_$i225, out_$i226, out_$p227, out_$i228, out_$i230, out_$i231, out_$p232, out_$i234, out_$i235, out_$p236, out_$i238, out_$i239, out_$p240, out_$i242, out_$i243, out_$p244, out_$i246, out_$i247, out_$p248, out_$i250, out_$i251, out_$p252, out_$i253, out_$i254, out_$p255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$p261, out_$i262, out_$i263, out_$i264, out_$i266, out_$i267, out_$p268, out_$i269, out_$i270, out_$i271, out_$i273, out_$i274, out_$p275, out_$i276, out_$i277, out_$i278, out_$i280, out_$i281, out_$p282, out_$i283, out_$i284, out_$i285, out_$i287, out_$i288, out_$p289, out_$i290, out_$i291, out_$i292, out_$i294, out_$i295, out_$p296, out_$i298, out_$i299, out_$p300, out_$i302, out_$i303, out_$p304, out_$i306, out_$i307, out_$p308, out_$i310, out_$i311, out_$p312, out_$i314, out_$i315, out_$p316, out_$i317, out_$i318, out_$p319, out_$i320, out_$i321, out_$i322, out_$p323, out_$i324, out_$i325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$p331, out_$i332, out_$i333, out_$i334, out_$p335, out_$i336, out_$i337, out_$i338, out_$i340, out_$i341, out_$i343, out_$i344, out_$i346, out_$i347, out_$i349, out_$i350, out_$i351, out_$i352, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i372, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p12: ref, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i81: i32, in_$i82: i32, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i86: i1, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$p92: ref, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$i96: i32, in_$i97: i1, in_$i98: i32, in_$i99: i1, in_$i100: i32, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$p118: ref, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i123: i8, in_$i124: i32, in_$i125: i8, in_$i126: i64, in_$i127: i8, in_$i128: i32, in_$i129: i8, in_$i130: i32, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$i135: i8, in_$i136: i32, in_$i137: i8, in_$i138: i64, in_$i139: i8, in_$i140: i32, in_$i141: i8, in_$i142: i32, in_$i144: i32, in_$i145: i1, in_$p146: ref, in_$i147: i8, in_$i148: i32, in_$i149: i8, in_$i150: i64, in_$i151: i8, in_$i152: i32, in_$i153: i8, in_$i154: i32, in_$i156: i32, in_$i157: i1, in_$p158: ref, in_$i159: i8, in_$i160: i32, in_$i161: i8, in_$i162: i64, in_$i163: i8, in_$i164: i32, in_$i165: i8, in_$i166: i32, in_$i168: i32, in_$i169: i1, in_$p170: ref, in_$i171: i8, in_$i172: i32, in_$i173: i8, in_$i174: i64, in_$i175: i8, in_$i176: i32, in_$i177: i8, in_$i178: i32, in_$i180: i32, in_$i181: i1, in_$p182: ref, in_$i183: i64, in_$i185: i32, in_$i186: i1, in_$p187: ref, in_$i188: i64, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_$i193: i64, in_$i195: i32, in_$i196: i1, in_$p197: ref, in_$i198: i64, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$i203: i64, in_$i205: i32, in_$i206: i1, in_$p207: ref, in_$i208: i32, in_$i210: i32, in_$i211: i1, in_$p212: ref, in_$i213: i32, in_$i215: i32, in_$i216: i1, in_$p217: ref, in_$i218: i32, in_$i220: i32, in_$i221: i1, in_$p222: ref, in_$i223: i32, in_$i225: i32, in_$i226: i1, in_$p227: ref, in_$i228: i32, in_$i230: i32, in_$i231: i1, in_$p232: ref, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$i238: i32, in_$i239: i1, in_$p240: ref, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$i246: i32, in_$i247: i1, in_$p248: ref, in_$i250: i32, in_$i251: i1, in_$p252: ref, in_$i253: i32, in_$i254: i1, in_$p255: ref, in_$i256: i32, in_$i257: i32, in_$i258: i1, in_$i259: i32, in_$i260: i1, in_$p261: ref, in_$i262: i32, in_$i263: i32, in_$i264: i32, in_$i266: i32, in_$i267: i1, in_$p268: ref, in_$i269: i32, in_$i270: i32, in_$i271: i32, in_$i273: i32, in_$i274: i1, in_$p275: ref, in_$i276: i32, in_$i277: i32, in_$i278: i32, in_$i280: i32, in_$i281: i1, in_$p282: ref, in_$i283: i32, in_$i284: i32, in_$i285: i32, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$i290: i32, in_$i291: i32, in_$i292: i32, in_$i294: i32, in_$i295: i1, in_$p296: ref, in_$i298: i32, in_$i299: i1, in_$p300: ref, in_$i302: i32, in_$i303: i1, in_$p304: ref, in_$i306: i32, in_$i307: i1, in_$p308: ref, in_$i310: i32, in_$i311: i1, in_$p312: ref, in_$i314: i32, in_$i315: i1, in_$p316: ref, in_$i317: i32, in_$i318: i1, in_$p319: ref, in_$i320: i32, in_$i321: i32, in_$i322: i1, in_$p323: ref, in_$i324: i32, in_$i325: i32, in_$i326: i1, in_$p327: ref, in_$i328: i32, in_$i329: i32, in_$i330: i1, in_$p331: ref, in_$i332: i32, in_$i333: i32, in_$i334: i1, in_$p335: ref, in_$i336: i32, in_$i337: i32, in_$i338: i1, in_$i340: i32, in_$i341: i1, in_$i343: i32, in_$i344: i1, in_$i346: i32, in_$i347: i1, in_$i349: i32, in_$i350: i32, in_$i351: i32, in_$i352: i1, in_$i354: i32, in_$i355: i32, in_$i356: i32, in_$i357: i1, in_$i358: i32, in_$i359: i1, in_$i360: i32, in_$i361: i1, in_$i362: i32, in_$i363: i1, in_$i364: i32, in_$i365: i1, in_$i366: i1, in_$i367: i1, in_$i368: i32, in_$i369: i1, in_$i370: i32, in_$i371: i1, in_$i372: i32, in_$i373: i1, in_$i374: i32, in_$i375: i32, in_$i376: i1, in_$i377: i32, in_$i378: i1, in_$i379: i32, in_$i380: i1, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: i32, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_122: i32) returns (out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i81: i32, out_$i82: i32, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i86: i1, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$p92: ref, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$i96: i32, out_$i97: i1, out_$i98: i32, out_$i99: i1, out_$i100: i32, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$p118: ref, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i123: i8, out_$i124: i32, out_$i125: i8, out_$i126: i64, out_$i127: i8, out_$i128: i32, out_$i129: i8, out_$i130: i32, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$i135: i8, out_$i136: i32, out_$i137: i8, out_$i138: i64, out_$i139: i8, out_$i140: i32, out_$i141: i8, out_$i142: i32, out_$i144: i32, out_$i145: i1, out_$p146: ref, out_$i147: i8, out_$i148: i32, out_$i149: i8, out_$i150: i64, out_$i151: i8, out_$i152: i32, out_$i153: i8, out_$i154: i32, out_$i156: i32, out_$i157: i1, out_$p158: ref, out_$i159: i8, out_$i160: i32, out_$i161: i8, out_$i162: i64, out_$i163: i8, out_$i164: i32, out_$i165: i8, out_$i166: i32, out_$i168: i32, out_$i169: i1, out_$p170: ref, out_$i171: i8, out_$i172: i32, out_$i173: i8, out_$i174: i64, out_$i175: i8, out_$i176: i32, out_$i177: i8, out_$i178: i32, out_$i180: i32, out_$i181: i1, out_$p182: ref, out_$i183: i64, out_$i185: i32, out_$i186: i1, out_$p187: ref, out_$i188: i64, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_$i193: i64, out_$i195: i32, out_$i196: i1, out_$p197: ref, out_$i198: i64, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$i203: i64, out_$i205: i32, out_$i206: i1, out_$p207: ref, out_$i208: i32, out_$i210: i32, out_$i211: i1, out_$p212: ref, out_$i213: i32, out_$i215: i32, out_$i216: i1, out_$p217: ref, out_$i218: i32, out_$i220: i32, out_$i221: i1, out_$p222: ref, out_$i223: i32, out_$i225: i32, out_$i226: i1, out_$p227: ref, out_$i228: i32, out_$i230: i32, out_$i231: i1, out_$p232: ref, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$i238: i32, out_$i239: i1, out_$p240: ref, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$i246: i32, out_$i247: i1, out_$p248: ref, out_$i250: i32, out_$i251: i1, out_$p252: ref, out_$i253: i32, out_$i254: i1, out_$p255: ref, out_$i256: i32, out_$i257: i32, out_$i258: i1, out_$i259: i32, out_$i260: i1, out_$p261: ref, out_$i262: i32, out_$i263: i32, out_$i264: i32, out_$i266: i32, out_$i267: i1, out_$p268: ref, out_$i269: i32, out_$i270: i32, out_$i271: i32, out_$i273: i32, out_$i274: i1, out_$p275: ref, out_$i276: i32, out_$i277: i32, out_$i278: i32, out_$i280: i32, out_$i281: i1, out_$p282: ref, out_$i283: i32, out_$i284: i32, out_$i285: i32, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$i290: i32, out_$i291: i32, out_$i292: i32, out_$i294: i32, out_$i295: i1, out_$p296: ref, out_$i298: i32, out_$i299: i1, out_$p300: ref, out_$i302: i32, out_$i303: i1, out_$p304: ref, out_$i306: i32, out_$i307: i1, out_$p308: ref, out_$i310: i32, out_$i311: i1, out_$p312: ref, out_$i314: i32, out_$i315: i1, out_$p316: ref, out_$i317: i32, out_$i318: i1, out_$p319: ref, out_$i320: i32, out_$i321: i32, out_$i322: i1, out_$p323: ref, out_$i324: i32, out_$i325: i32, out_$i326: i1, out_$p327: ref, out_$i328: i32, out_$i329: i32, out_$i330: i1, out_$p331: ref, out_$i332: i32, out_$i333: i32, out_$i334: i1, out_$p335: ref, out_$i336: i32, out_$i337: i32, out_$i338: i1, out_$i340: i32, out_$i341: i1, out_$i343: i32, out_$i344: i1, out_$i346: i32, out_$i347: i1, out_$i349: i32, out_$i350: i32, out_$i351: i32, out_$i352: i1, out_$i354: i32, out_$i355: i32, out_$i356: i32, out_$i357: i1, out_$i358: i32, out_$i359: i1, out_$i360: i32, out_$i361: i1, out_$i362: i32, out_$i363: i1, out_$i364: i32, out_$i365: i1, out_$i366: i1, out_$i367: i1, out_$i368: i32, out_$i369: i1, out_$i370: i32, out_$i371: i1, out_$i372: i32, out_$i373: i1, out_$i374: i32, out_$i375: i32, out_$i376: i1, out_$i377: i32, out_$i378: i1, out_$i379: i32, out_$i380: i1, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: i32, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_122: i32);
  modifies $M.57, $M.51, $M.60, $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr, $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.37, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.27, $M.18, $M.20, $M.22, $M.24, $M.19, $M.21, $M.23, $M.25, $M.42, assertsPassed, $M.61, $M.63, $M.52, $M.53, $M.64, $M.56, $M.50, $M.66, $M.67, $M.59, $M.58, $M.65, $M.62, $M.48, $M.47, $M.44, $M.45, $M.68, $M.26, $M.46;



implementation usbhid_quirks_init_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$i14: i16, in_$i15: i32, in_$i16: i16, in_$i17: i16, in_$i18: i32, in_$i19: i16, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i64, in_$p24: ref, in_$p25: ref, in_$i27: i32, in_$i28: i1, in_$i4: i32, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_vslice_dummy_var_147: i32, in_vslice_dummy_var_148: i32) returns (out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$i14: i16, out_$i15: i32, out_$i16: i16, out_$i17: i16, out_$i18: i32, out_$i19: i16, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i64, out_$p24: ref, out_$p25: ref, out_$i27: i32, out_$i28: i1, out_$i4: i32, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_vslice_dummy_var_147: i32, out_vslice_dummy_var_148: i32)
{

  entry:
    out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i27, out_$i28, out_$i4, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_vslice_dummy_var_147, out_vslice_dummy_var_148 := in_$i5, in_$p6, in_$p7, in_$i8, in_$i9, in_$i10, in_$p11, in_$p12, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$p24, in_$p25, in_$i27, in_$i28, in_$i4, in_$i29, in_$p30, in_$p31, in_$i32, in_$i33, in_vslice_dummy_var_147, in_vslice_dummy_var_148;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_12613;

  $bb9:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i27;
    goto $bb9_dummy;

  corral_source_split_12644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    out_$i28 := $sle.i32(out_$i27, 3);
    goto corral_source_split_12644;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i4, 1);
    call {:si_unique_call 2019} {:cexpr "n"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_12643;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_12630:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} out_vslice_dummy_var_147 := printk.ref.ref(.str.2, out_$p12);
    goto corral_source_split_12630;

  corral_source_split_12628:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.72, out_$p11);
    goto corral_source_split_12629;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref(in_$p0, $mul.ref(out_$i10, 8));
    goto corral_source_split_12628;

  corral_source_split_12626:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i4);
    goto corral_source_split_12627;

  $bb3:
    assume out_$i9 == 1;
    goto corral_source_split_12626;

  corral_source_split_12624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_12623:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i32(out_$i8, 3);
    goto corral_source_split_12624;

  corral_source_split_12622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2014} out_$i8 := sscanf.ref.ref.ref.ref.ref(out_$p7, .str.1, in_$p1, in_$p2, in_$p3);
    call {:si_unique_call 2015} {:cexpr "m"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_12623;

  corral_source_split_12621:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.72, out_$p6);
    goto corral_source_split_12622;

  corral_source_split_12620:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref(in_$p0, $mul.ref(out_$i5, 8));
    goto corral_source_split_12621;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i32.i64(out_$i4);
    goto corral_source_split_12620;

  corral_source_split_12652:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb12:
    assume out_$i33 == 1;
    goto corral_source_split_12652;

  corral_source_split_12618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_12617:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i64(out_$i32, 0);
    goto corral_source_split_12618;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(out_$p31);
    goto corral_source_split_12617;

  corral_source_split_12615:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.72, out_$p30);
    goto corral_source_split_12616;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref(in_$p0, $mul.ref(out_$i29, 8));
    goto corral_source_split_12615;

  corral_source_split_12613:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i4);
    goto corral_source_split_12614;

  $bb7:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_12650:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_12649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} out_vslice_dummy_var_148 := printk.ref.ref(.str.2, out_$p25);
    goto corral_source_split_12650;

  corral_source_split_12648:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.72, out_$p24);
    goto corral_source_split_12649;

  corral_source_split_12647:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(in_$p0, $mul.ref(out_$i23, 8));
    goto corral_source_split_12648;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i4);
    goto corral_source_split_12647;

  $bb6:
    assume out_$i22 == 1;
    goto corral_source_split_12646;

  corral_source_split_12641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_12640:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_12641;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2017} out_$i21 := usbhid_modify_dquirk(out_$i16, out_$i19, out_$i20);
    call {:si_unique_call 2018} {:cexpr "tmp"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_12640;

  corral_source_split_12638:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.73, in_$p3);
    goto corral_source_split_12639;

  corral_source_split_12637:
    assume {:verifier.code 0} true;
    out_$i19 := $trunc.i32.i16(out_$i18);
    goto corral_source_split_12638;

  corral_source_split_12636:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i16.i32(out_$i17);
    goto corral_source_split_12637;

  corral_source_split_12635:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i16($M.73, in_$p2);
    goto corral_source_split_12636;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    out_$i16 := $trunc.i32.i16(out_$i15);
    goto corral_source_split_12635;

  corral_source_split_12633:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i16.i32(out_$i14);
    goto corral_source_split_12634;

  corral_source_split_12632:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i16($M.73, in_$p1);
    goto corral_source_split_12633;

  $bb4:
    assume !(out_$i9 == 1);
    goto corral_source_split_12632;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i27, out_$i28, out_$i4, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_vslice_dummy_var_147, out_vslice_dummy_var_148 := usbhid_quirks_init_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i27, out_$i28, out_$i4, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_vslice_dummy_var_147, out_vslice_dummy_var_148);
    return;

  exit:
    return;
}



procedure usbhid_quirks_init_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$i14: i16, in_$i15: i32, in_$i16: i16, in_$i17: i16, in_$i18: i32, in_$i19: i16, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i64, in_$p24: ref, in_$p25: ref, in_$i27: i32, in_$i28: i1, in_$i4: i32, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_vslice_dummy_var_147: i32, in_vslice_dummy_var_148: i32) returns (out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$i14: i16, out_$i15: i32, out_$i16: i16, out_$i17: i16, out_$i18: i32, out_$i19: i16, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i64, out_$p24: ref, out_$p25: ref, out_$i27: i32, out_$i28: i1, out_$i4: i32, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_vslice_dummy_var_147: i32, out_vslice_dummy_var_148: i32);
  modifies $M.0, $CurrAddr;



implementation usbhid_remove_all_dquirks_loop_$bb4(in_$p13: ref, in_$p14: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p11: ref, in_$p12: ref) returns (out_$p13: ref, out_$p14: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p11: ref, out_$p12: ref)
{

  entry:
    out_$p13, out_$p14, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p11, out_$p12 := in_$p13, in_$p14, in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p11, in_$p12;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12678;

  $bb6:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$p11, out_$p12 := out_$p12, out_$p19;
    goto $bb6_dummy;

  corral_source_split_12690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_12689:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, $p2i.ref.i64(dquirks_list));
    goto corral_source_split_12690;

  corral_source_split_12688:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_12689;

  corral_source_split_12687:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p12, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12688;

  corral_source_split_12686:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(out_$p18, $mul.ref($sub.ref(0, 8), 24));
    goto corral_source_split_12687;

  corral_source_split_12685:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_12686;

  corral_source_split_12684:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_12685;

  corral_source_split_12683:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_12684;

  corral_source_split_12682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} kfree(out_$p14);
    goto corral_source_split_12683;

  corral_source_split_12681:
    assume {:verifier.code 0} true;
    out_$p14 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_12682;

  corral_source_split_12680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2028} list_del(out_$p13);
    goto corral_source_split_12681;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p11, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12680;

  corral_source_split_12678:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p11, out_$p12 := usbhid_remove_all_dquirks_loop_$bb4(out_$p13, out_$p14, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p11, out_$p12);
    return;

  exit:
    return;
}



procedure usbhid_remove_all_dquirks_loop_$bb4(in_$p13: ref, in_$p14: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p11: ref, in_$p12: ref) returns (out_$p13: ref, out_$p14: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p11: ref, out_$p12: ref);



implementation usbhid_modify_dquirk_loop_$bb17(in_$i0: i16, in_$i1: i16, in_$p30: ref, in_$i31: i16, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p36: ref, in_$i37: i16, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$p28: ref) returns (out_$p30: ref, out_$i31: i16, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p36: ref, out_$i37: i16, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$p28: ref)
{

  entry:
    out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p28 := in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p41, in_$p47, in_$p48, in_$p49, in_$p50, in_$p51, in_$i52, in_$i53, in_$p28;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_12744;

  $bb26:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$p28 := out_$p50;
    goto $bb26_dummy;

  corral_source_split_12775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_12774:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i64(out_$i52, $p2i.ref.i64(dquirks_list));
    goto corral_source_split_12775;

  corral_source_split_12773:
    assume {:verifier.code 0} true;
    out_$i52 := $p2i.ref.i64(out_$p51);
    goto corral_source_split_12774;

  corral_source_split_12772:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p49, $mul.ref($sub.ref(0, 8), 24)), $mul.ref(8, 1));
    goto corral_source_split_12773;

  corral_source_split_12771:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref(out_$p49, $mul.ref($sub.ref(0, 8), 24));
    goto corral_source_split_12772;

  corral_source_split_12770:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_12771;

  corral_source_split_12769:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_12770;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($add.ref(out_$p28, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_12769;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb21;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i40 == 1);
    goto $bb21;

  corral_source_split_12757:
    assume {:verifier.code 0} true;
    out_$p41 := out_$p28;
    assume true;
    goto $bb23;

  corral_source_split_12756:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i38, out_$i39);
    goto corral_source_split_12757;

  corral_source_split_12755:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i16.i32(in_$i1);
    goto corral_source_split_12756;

  corral_source_split_12754:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i16.i32(out_$i37);
    goto corral_source_split_12755;

  corral_source_split_12753:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i16($M.0, out_$p36);
    goto corral_source_split_12754;

  corral_source_split_12752:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(out_$p28, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_12753;

  $bb19:
    assume out_$i34 == 1;
    goto corral_source_split_12752;

  corral_source_split_12750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_12749:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i32, out_$i33);
    goto corral_source_split_12750;

  corral_source_split_12748:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i16.i32(in_$i0);
    goto corral_source_split_12749;

  corral_source_split_12747:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i16.i32(out_$i31);
    goto corral_source_split_12748;

  corral_source_split_12746:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i16($M.0, out_$p30);
    goto corral_source_split_12747;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(out_$p28, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_12746;

  corral_source_split_12744:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p28 := usbhid_modify_dquirk_loop_$bb17(in_$i0, in_$i1, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p28);
    return;

  exit:
    return;
}



procedure usbhid_modify_dquirk_loop_$bb17(in_$i0: i16, in_$i1: i16, in_$p30: ref, in_$i31: i16, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p36: ref, in_$i37: i16, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$p28: ref) returns (out_$p30: ref, out_$i31: i16, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p36: ref, out_$i37: i16, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$p28: ref);


