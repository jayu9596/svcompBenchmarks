var $M.0: [ref]i8;

var $M.1: [ref]ref;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]i24;

var $M.6: [ref]i8;

var $M.7: [ref]i16;

var $M.8: [ref]i8;

var $M.9: [ref]ref;

var $M.10: [ref]ref;

var $M.11: [ref]ref;

var $M.12: [ref]ref;

var $M.13: [ref]i24;

var $M.14: [ref]i8;

var $M.15: i32;

var $M.16: ref;

var $M.17: i32;

var $M.18: ref;

var $M.19: i32;

var $M.20: ref;

var $M.21: i32;

var $M.22: ref;

var $M.23: i32;

var $M.24: [ref]i8;

var $M.25: [ref]i32;

var $M.26: [ref]i16;

var $M.27: [ref]i8;

var $M.28: i32;

var $M.29: ref;

var $M.30: i32;

var $M.31: ref;

var $M.32: i32;

var $M.33: ref;

var $M.34: i32;

var $M.35: ref;

var $M.37: [ref]i64;

var $M.38: ref;

var $M.39: ref;

var $M.40: ref;

var $M.41: ref;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: [ref]i16;

var $M.51: [ref]i16;

var $M.52: [ref]i16;

var $M.53: [ref]i16;

var $M.54: [ref]i16;

var $M.55: [ref]i8;

var $M.56: [ref]i8;

var $M.57: [ref]i8;

var $M.58: [ref]i8;

var $M.59: [ref]i8;

var $M.60: [ref]i8;

var $M.61: [ref]i8;

var $M.62: [ref]i64;

var $M.63: [ref]i8;

var $M.64: [ref]ref;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 388554);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const ldv_timer_1_0: ref;

axiom ldv_timer_1_0 == $sub.ref(0, 2056);

const ldv_timer_1_1: ref;

axiom ldv_timer_1_1 == $sub.ref(0, 3084);

const ldv_timer_1_2: ref;

axiom ldv_timer_1_2 == $sub.ref(0, 4112);

const ldv_timer_1_3: ref;

axiom ldv_timer_1_3 == $sub.ref(0, 5140);

const ldv_timer_2_0: ref;

axiom ldv_timer_2_0 == $sub.ref(0, 6168);

const ldv_timer_list_2_0: ref;

axiom ldv_timer_list_2_0 == $sub.ref(0, 7200);

const ldv_timer_2_1: ref;

axiom ldv_timer_2_1 == $sub.ref(0, 8228);

const ldv_timer_list_2_1: ref;

axiom ldv_timer_list_2_1 == $sub.ref(0, 9260);

const ldv_timer_2_2: ref;

axiom ldv_timer_2_2 == $sub.ref(0, 10288);

const ldv_timer_list_2_2: ref;

axiom ldv_timer_list_2_2 == $sub.ref(0, 11320);

const ldv_timer_2_3: ref;

axiom ldv_timer_2_3 == $sub.ref(0, 12348);

const ldv_timer_list_2_3: ref;

axiom ldv_timer_list_2_3 == $sub.ref(0, 13380);

const ldv_timer_list_1_0: ref;

axiom ldv_timer_list_1_0 == $sub.ref(0, 14412);

const ldv_timer_list_1_1: ref;

axiom ldv_timer_list_1_1 == $sub.ref(0, 15444);

const ldv_timer_list_1_2: ref;

axiom ldv_timer_list_1_2 == $sub.ref(0, 16476);

const ldv_timer_list_1_3: ref;

axiom ldv_timer_list_1_3 == $sub.ref(0, 17508);

const moschip7840_4port_device_group0: ref;

axiom moschip7840_4port_device_group0 == $sub.ref(0, 18540);

const moschip7840_4port_device_group1: ref;

axiom moschip7840_4port_device_group1 == $sub.ref(0, 19572);

const moschip7840_4port_device_group2: ref;

axiom moschip7840_4port_device_group2 == $sub.ref(0, 20604);

const moschip7840_4port_device_group3: ref;

axiom moschip7840_4port_device_group3 == $sub.ref(0, 21636);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 22664);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 23692);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 24720);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 25748);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 26776);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 27804);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 28832);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 29860);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 30888);

const {:count 19} __mod_usb__id_table_device_table: ref;

axiom __mod_usb__id_table_device_table == $sub.ref(0, 32520);

const {:count 19} id_table: ref;

axiom id_table == $sub.ref(0, 34152);

const moschip7840_4port_device: ref;

axiom moschip7840_4port_device == $sub.ref(0, 35728);

const {:count 2} serial_drivers: ref;

axiom serial_drivers == $sub.ref(0, 36768);

const {:count 36} .str.5: ref;

axiom .str.5 == $sub.ref(0, 37828);

const .str: ref;

axiom .str == $sub.ref(0, 38860);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 25} .str.132: ref;

axiom .str.132 == $sub.ref(0, 39909);

const {:count 207} .str.2: ref;

axiom .str.2 == $sub.ref(0, 41140);

const {:count 39} .str.133: ref;

axiom .str.133 == $sub.ref(0, 42203);

const {:count 18} .str.134: ref;

axiom .str.134 == $sub.ref(0, 43245);

const {:count 3} .str.7: ref;

axiom .str.7 == $sub.ref(0, 44272);

const {:count 16} .str.135: ref;

axiom .str.135 == $sub.ref(0, 45312);

const {:count 47} .str.136: ref;

axiom .str.136 == $sub.ref(0, 46383);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 25} .str.1: ref;

axiom .str.1 == $sub.ref(0, 47432);

const {:count 28} .str.3: ref;

axiom .str.3 == $sub.ref(0, 48484);

const {:count 29} .str.4: ref;

axiom .str.4 == $sub.ref(0, 49537);

const {:count 22} .str.137: ref;

axiom .str.137 == $sub.ref(0, 50583);

const {:count 27} .str.138: ref;

axiom .str.138 == $sub.ref(0, 51634);

const {:count 31} .str.139: ref;

axiom .str.139 == $sub.ref(0, 52689);

const {:count 30} .str.66: ref;

axiom .str.66 == $sub.ref(0, 53743);

const {:count 21} .str.67: ref;

axiom .str.67 == $sub.ref(0, 54788);

const {:count 28} .str.68: ref;

axiom .str.68 == $sub.ref(0, 55840);

const {:count 28} .str.9: ref;

axiom .str.9 == $sub.ref(0, 56892);

const {:count 19} .str.10: ref;

axiom .str.10 == $sub.ref(0, 57935);

const {:count 27} .str.11: ref;

axiom .str.11 == $sub.ref(0, 58986);

const {:count 27} .str.110: ref;

axiom .str.110 == $sub.ref(0, 60037);

const {:count 40} .str.111: ref;

axiom .str.111 == $sub.ref(0, 61101);

const {:count 38} .str.112: ref;

axiom .str.112 == $sub.ref(0, 62163);

const {:count 16} .str.113: ref;

axiom .str.113 == $sub.ref(0, 63203);

const {:count 23} .str.114: ref;

axiom .str.114 == $sub.ref(0, 64250);

const {:count 43} .str.115: ref;

axiom .str.115 == $sub.ref(0, 65317);

const {:count 36} .str.116: ref;

axiom .str.116 == $sub.ref(0, 66377);

const {:count 37} .str.117: ref;

axiom .str.117 == $sub.ref(0, 67438);

const {:count 40} .str.57: ref;

axiom .str.57 == $sub.ref(0, 68502);

const {:count 25} .str.118: ref;

axiom .str.118 == $sub.ref(0, 69551);

const {:count 26} .str.119: ref;

axiom .str.119 == $sub.ref(0, 70601);

const {:count 39} .str.120: ref;

axiom .str.120 == $sub.ref(0, 71664);

const {:count 15} .str.121: ref;

axiom .str.121 == $sub.ref(0, 72703);

const {:count 17} .str.100: ref;

axiom .str.100 == $sub.ref(0, 73744);

const {:count 39} .str.101: ref;

axiom .str.101 == $sub.ref(0, 74807);

const {:count 21} .str.12: ref;

axiom .str.12 == $sub.ref(0, 75852);

const {:count 29} .str.13: ref;

axiom .str.13 == $sub.ref(0, 76905);

const {:count 17} .str.130: ref;

axiom .str.130 == $sub.ref(0, 77946);

const {:count 13} .str.131: ref;

axiom .str.131 == $sub.ref(0, 78983);

const {:count 21} .str.69: ref;

axiom .str.69 == $sub.ref(0, 80028);

const {:count 19} .str.48: ref;

axiom .str.48 == $sub.ref(0, 81071);

const {:count 22} .str.49: ref;

axiom .str.49 == $sub.ref(0, 82117);

const {:count 17} .str.6: ref;

axiom .str.6 == $sub.ref(0, 83158);

const {:count 17} .str.8: ref;

axiom .str.8 == $sub.ref(0, 84199);

const {:count 24} .str.129: ref;

axiom .str.129 == $sub.ref(0, 85247);

const {:count 17} .str.126: ref;

axiom .str.126 == $sub.ref(0, 86288);

const {:count 14} .str.127: ref;

axiom .str.127 == $sub.ref(0, 87326);

const {:count 34} .str.128: ref;

axiom .str.128 == $sub.ref(0, 88384);

const {:count 20} .str.70: ref;

axiom .str.70 == $sub.ref(0, 89428);

const {:count 20} .str.71: ref;

axiom .str.71 == $sub.ref(0, 90472);

const {:count 28} .str.72: ref;

axiom .str.72 == $sub.ref(0, 91524);

const {:count 36} .str.73: ref;

axiom .str.73 == $sub.ref(0, 92584);

const {:count 18} .str.74: ref;

axiom .str.74 == $sub.ref(0, 93626);

const {:count 47} .str.75: ref;

axiom .str.75 == $sub.ref(0, 94697);

const {:count 29} .str.76: ref;

axiom .str.76 == $sub.ref(0, 95750);

const {:count 19} .str.77: ref;

axiom .str.77 == $sub.ref(0, 96793);

const {:count 20} .str.78: ref;

axiom .str.78 == $sub.ref(0, 97837);

const {:count 20} .str.79: ref;

axiom .str.79 == $sub.ref(0, 98881);

const {:count 20} .str.80: ref;

axiom .str.80 == $sub.ref(0, 99925);

const {:count 20} .str.81: ref;

axiom .str.81 == $sub.ref(0, 100969);

const {:count 36} .str.82: ref;

axiom .str.82 == $sub.ref(0, 102029);

const {:count 24} .str.83: ref;

axiom .str.83 == $sub.ref(0, 103077);

const {:count 21} .str.84: ref;

axiom .str.84 == $sub.ref(0, 104122);

const {:count 40} .str.85: ref;

axiom .str.85 == $sub.ref(0, 105186);

const {:count 33} .str.86: ref;

axiom .str.86 == $sub.ref(0, 106243);

const {:count 16} .str.87: ref;

axiom .str.87 == $sub.ref(0, 107283);

const {:count 41} .str.88: ref;

axiom .str.88 == $sub.ref(0, 108348);

const {:count 41} .str.89: ref;

axiom .str.89 == $sub.ref(0, 109413);

const {:count 20} .str.90: ref;

axiom .str.90 == $sub.ref(0, 110457);

const {:count 42} .str.91: ref;

axiom .str.91 == $sub.ref(0, 111523);

const {:count 42} .str.92: ref;

axiom .str.92 == $sub.ref(0, 112589);

const {:count 21} .str.46: ref;

axiom .str.46 == $sub.ref(0, 113634);

const {:count 45} .str.47: ref;

axiom .str.47 == $sub.ref(0, 114703);

const {:count 21} .str.44: ref;

axiom .str.44 == $sub.ref(0, 115748);

const {:count 32} .str.45: ref;

axiom .str.45 == $sub.ref(0, 116804);

const {:count 31} .str.93: ref;

axiom .str.93 == $sub.ref(0, 117859);

const {:count 9} .str.94: ref;

axiom .str.94 == $sub.ref(0, 118892);

const {:count 14} .str.95: ref;

axiom .str.95 == $sub.ref(0, 119930);

const {:count 18} .str.96: ref;

axiom .str.96 == $sub.ref(0, 120972);

const {:count 16} .str.97: ref;

axiom .str.97 == $sub.ref(0, 122012);

const {:count 16} .str.98: ref;

axiom .str.98 == $sub.ref(0, 123052);

const {:count 33} .str.99: ref;

axiom .str.99 == $sub.ref(0, 124109);

const {:count 19} .str.125: ref;

axiom .str.125 == $sub.ref(0, 125152);

const {:count 14} .str.102: ref;

axiom .str.102 == $sub.ref(0, 126190);

const {:count 8} .str.103: ref;

axiom .str.103 == $sub.ref(0, 127222);

const {:count 24} .str.104: ref;

axiom .str.104 == $sub.ref(0, 128270);

const {:count 24} .str.105: ref;

axiom .str.105 == $sub.ref(0, 129318);

const {:count 57} .str.106: ref;

axiom .str.106 == $sub.ref(0, 130399);

const {:count 18} .str.107: ref;

axiom .str.107 == $sub.ref(0, 131441);

const {:count 31} .str.108: ref;

axiom .str.108 == $sub.ref(0, 132496);

const {:count 39} .str.109: ref;

axiom .str.109 == $sub.ref(0, 133559);

const {:count 14} .str.122: ref;

axiom .str.122 == $sub.ref(0, 134597);

const {:count 15} .str.123: ref;

axiom .str.123 == $sub.ref(0, 135636);

const {:count 27} .str.124: ref;

axiom .str.124 == $sub.ref(0, 136687);

const {:count 13} .str.50: ref;

axiom .str.50 == $sub.ref(0, 137724);

const {:count 22} .str.51: ref;

axiom .str.51 == $sub.ref(0, 138770);

const {:count 22} .str.52: ref;

axiom .str.52 == $sub.ref(0, 139816);

const {:count 27} .str.53: ref;

axiom .str.53 == $sub.ref(0, 140867);

const {:count 27} .str.54: ref;

axiom .str.54 == $sub.ref(0, 141918);

const {:count 29} .str.55: ref;

axiom .str.55 == $sub.ref(0, 142971);

const {:count 39} .str.56: ref;

axiom .str.56 == $sub.ref(0, 144034);

const {:count 19} .str.58: ref;

axiom .str.58 == $sub.ref(0, 145077);

const {:count 20} .str.59: ref;

axiom .str.59 == $sub.ref(0, 146121);

const {:count 23} .str.60: ref;

axiom .str.60 == $sub.ref(0, 147168);

const {:count 24} .str.61: ref;

axiom .str.61 == $sub.ref(0, 148216);

const {:count 26} .str.62: ref;

axiom .str.62 == $sub.ref(0, 149266);

const {:count 35} .str.63: ref;

axiom .str.63 == $sub.ref(0, 150325);

const {:count 27} .str.64: ref;

axiom .str.64 == $sub.ref(0, 151376);

const {:count 38} .str.65: ref;

axiom .str.65 == $sub.ref(0, 152438);

const {:count 19} .str.14: ref;

axiom .str.14 == $sub.ref(0, 153481);

const {:count 38} .str.15: ref;

axiom .str.15 == $sub.ref(0, 154543);

const {:count 35} .str.16: ref;

axiom .str.16 == $sub.ref(0, 155602);

const {:count 18} .str.17: ref;

axiom .str.17 == $sub.ref(0, 156644);

const {:count 29} .str.18: ref;

axiom .str.18 == $sub.ref(0, 157697);

const {:count 39} .str.19: ref;

axiom .str.19 == $sub.ref(0, 158760);

const {:count 48} .str.20: ref;

axiom .str.20 == $sub.ref(0, 159832);

const {:count 51} .str.21: ref;

axiom .str.21 == $sub.ref(0, 160907);

const {:count 49} .str.22: ref;

axiom .str.22 == $sub.ref(0, 161980);

const {:count 33} .str.23: ref;

axiom .str.23 == $sub.ref(0, 163037);

const {:count 31} .str.24: ref;

axiom .str.24 == $sub.ref(0, 164092);

const {:count 33} .str.25: ref;

axiom .str.25 == $sub.ref(0, 165149);

const {:count 31} .str.26: ref;

axiom .str.26 == $sub.ref(0, 166204);

const {:count 33} .str.27: ref;

axiom .str.27 == $sub.ref(0, 167261);

const {:count 31} .str.28: ref;

axiom .str.28 == $sub.ref(0, 168316);

const {:count 53} .str.29: ref;

axiom .str.29 == $sub.ref(0, 169393);

const {:count 51} .str.30: ref;

axiom .str.30 == $sub.ref(0, 170468);

const {:count 47} .str.31: ref;

axiom .str.31 == $sub.ref(0, 171539);

const {:count 45} .str.32: ref;

axiom .str.32 == $sub.ref(0, 172608);

const {:count 49} .str.33: ref;

axiom .str.33 == $sub.ref(0, 173681);

const {:count 47} .str.34: ref;

axiom .str.34 == $sub.ref(0, 174752);

const {:count 16} .str.35: ref;

axiom .str.35 == $sub.ref(0, 175792);

const {:count 38} .str.36: ref;

axiom .str.36 == $sub.ref(0, 176854);

const {:count 36} .str.37: ref;

axiom .str.37 == $sub.ref(0, 177914);

const {:count 37} .str.38: ref;

axiom .str.38 == $sub.ref(0, 178975);

const {:count 35} .str.39: ref;

axiom .str.39 == $sub.ref(0, 180034);

const {:count 25} .str.40: ref;

axiom .str.40 == $sub.ref(0, 181083);

const {:count 20} .str.41: ref;

axiom .str.41 == $sub.ref(0, 182127);

const {:count 25} .str.42: ref;

axiom .str.42 == $sub.ref(0, 183176);

const {:count 21} .str.43: ref;

axiom .str.43 == $sub.ref(0, 184221);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 185253);

const {:count 3} .str.1.290: ref;

axiom .str.1.290 == $sub.ref(0, 186280);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 187318);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 188346);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 189378);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 190410);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const mos7840_probe: ref;

axiom mos7840_probe == $sub.ref(0, 191442);

procedure mos7840_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation mos7840_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i28: i32;
  var $i12: i32;
  var $i32: i64;
  var $p33: ref;
  var $i16: i32;
  var vslice_dummy_var_9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(10, 1));
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    call {:si_unique_call 1} {:cexpr "product"} boogie_si_record_i16($i6);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 30736);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i6);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 30752);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p13 := kmalloc(1, 208);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $i19 := __create_pipe($p18, 0);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i19, $sub.i32(0, 2147483520));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} vslice_dummy_var_9 := usb_control_msg($p21, $i22, 13, $sub.i8(0, 64), 0, 7, $p13, 1, 5000);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p13);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 1);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i27 == 1);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $i29 := mos7810_check($p0);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 9} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := 30752;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i28 := $i31;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} kfree($p13);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i12 := $i28;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i12);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i32);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} usb_set_serial_data($p0, $p33);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb15:
    assume $i30 == 1;
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i31 := 30736;
    goto $bb17;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i27 == 1;
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i28 := 30784;
    goto $bb14;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb10;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i6);
    call {:si_unique_call 2} {:cexpr "device_type"} boogie_si_record_i32($i11);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const mos7840_calc_num_ports: ref;

axiom mos7840_calc_num_ports == $sub.ref(0, 192474);

procedure mos7840_calc_num_ports($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mos7840_calc_num_ports($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $p1 := usb_get_serial_data($p0);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i2);
    call {:si_unique_call 12} {:cexpr "device_type"} boogie_si_record_i32($i3);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i4 := $ashr.i32($i3, 4);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 15);
    call {:si_unique_call 13} {:cexpr "mos7840_num_ports"} boogie_si_record_i32($i5);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const mos7840_port_probe: ref;

axiom mos7840_port_probe == $sub.ref(0, 193506);

procedure mos7840_port_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.7, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $CurrAddr, assertsPassed;



implementation mos7840_port_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i32;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i24;
  var $i45: i24;
  var $i46: i24;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p60: ref;
  var $p61: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i24;
  var $i75: i24;
  var $i76: i24;
  var $p77: ref;
  var $p78: ref;
  var $i79: i8;
  var $i80: i64;
  var $i81: i64;
  var $i82: i64;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i24;
  var $i94: i24;
  var $i95: i24;
  var $p96: ref;
  var $p97: ref;
  var $i98: i8;
  var $i99: i64;
  var $i100: i64;
  var $i101: i64;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i116: i8;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $i126: i8;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $i136: i8;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $i146: i8;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i8;
  var $i154: i32;
  var $i155: i16;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $i164: i24;
  var $i165: i24;
  var $i166: i24;
  var $p167: ref;
  var $p168: ref;
  var $i169: i8;
  var $i170: i64;
  var $i171: i64;
  var $i172: i64;
  var $i173: i1;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $i181: i24;
  var $i182: i24;
  var $i183: i24;
  var $p184: ref;
  var $p185: ref;
  var $i186: i8;
  var $i187: i64;
  var $i188: i64;
  var $i189: i64;
  var $i190: i1;
  var $p191: ref;
  var $i192: i16;
  var $i193: i32;
  var $i194: i16;
  var $i195: i32;
  var $i196: i32;
  var $i197: i16;
  var $i198: i16;
  var $i199: i32;
  var $i200: i32;
  var $i201: i16;
  var $p202: ref;
  var $i203: i8;
  var $i204: i32;
  var $i205: i16;
  var $i206: i16;
  var $i207: i32;
  var $i208: i16;
  var $i209: i32;
  var $i210: i1;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $i217: i24;
  var $i218: i24;
  var $i219: i24;
  var $p220: ref;
  var $p221: ref;
  var $i222: i8;
  var $i223: i64;
  var $i224: i64;
  var $i225: i64;
  var $i226: i1;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $i234: i24;
  var $i235: i24;
  var $i236: i24;
  var $p237: ref;
  var $p238: ref;
  var $i239: i8;
  var $i240: i64;
  var $i241: i64;
  var $i242: i64;
  var $i243: i1;
  var $p244: ref;
  var $p245: ref;
  var $i246: i8;
  var $i247: i32;
  var $i248: i16;
  var $i249: i16;
  var $i250: i32;
  var $i251: i16;
  var $i252: i32;
  var $i253: i1;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $i260: i24;
  var $i261: i24;
  var $i262: i24;
  var $p263: ref;
  var $p264: ref;
  var $i265: i8;
  var $i266: i64;
  var $i267: i64;
  var $i268: i64;
  var $i269: i1;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $i277: i24;
  var $i278: i24;
  var $i279: i24;
  var $p280: ref;
  var $p281: ref;
  var $i282: i8;
  var $i283: i64;
  var $i284: i64;
  var $i285: i64;
  var $i286: i1;
  var $p287: ref;
  var $p288: ref;
  var $i289: i8;
  var $i290: i16;
  var $i291: i32;
  var $i292: i32;
  var $i293: i16;
  var $i294: i16;
  var $i295: i32;
  var $i296: i16;
  var $i297: i32;
  var $i298: i1;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $p302: ref;
  var $p303: ref;
  var $p304: ref;
  var $i305: i24;
  var $i306: i24;
  var $i307: i24;
  var $p308: ref;
  var $p309: ref;
  var $i310: i8;
  var $i311: i64;
  var $i312: i64;
  var $i313: i64;
  var $i314: i1;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $i322: i24;
  var $i323: i24;
  var $i324: i24;
  var $p325: ref;
  var $p326: ref;
  var $i327: i8;
  var $i328: i64;
  var $i329: i64;
  var $i330: i64;
  var $i331: i1;
  var $p332: ref;
  var $p333: ref;
  var $i334: i8;
  var $i335: i16;
  var $i336: i32;
  var $i337: i32;
  var $i338: i16;
  var $i339: i16;
  var $i340: i32;
  var $i341: i16;
  var $i342: i32;
  var $i343: i1;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $i350: i24;
  var $i351: i24;
  var $i352: i24;
  var $p353: ref;
  var $p354: ref;
  var $i355: i8;
  var $i356: i64;
  var $i357: i64;
  var $i358: i64;
  var $i359: i1;
  var $p360: ref;
  var $p361: ref;
  var $p362: ref;
  var $p363: ref;
  var $p364: ref;
  var $p365: ref;
  var $p366: ref;
  var $i367: i24;
  var $i368: i24;
  var $i369: i24;
  var $p370: ref;
  var $p371: ref;
  var $i372: i8;
  var $i373: i64;
  var $i374: i64;
  var $i375: i64;
  var $i376: i1;
  var $p377: ref;
  var $i378: i16;
  var $i379: i32;
  var $i380: i16;
  var $i381: i32;
  var $i382: i1;
  var $p383: ref;
  var $p384: ref;
  var $p385: ref;
  var $p386: ref;
  var $p387: ref;
  var $p388: ref;
  var $i389: i24;
  var $i390: i24;
  var $i391: i24;
  var $p392: ref;
  var $p393: ref;
  var $i394: i8;
  var $i395: i64;
  var $i396: i64;
  var $i397: i64;
  var $i398: i1;
  var $p399: ref;
  var $p400: ref;
  var $p401: ref;
  var $p402: ref;
  var $p403: ref;
  var $p404: ref;
  var $p405: ref;
  var $i406: i24;
  var $i407: i24;
  var $i408: i24;
  var $p409: ref;
  var $p410: ref;
  var $i411: i8;
  var $i412: i64;
  var $i413: i64;
  var $i414: i64;
  var $i415: i1;
  var $p416: ref;
  var $i417: i16;
  var $i418: i32;
  var $i419: i16;
  var $i420: i32;
  var $i421: i1;
  var $p422: ref;
  var $p423: ref;
  var $p424: ref;
  var $p425: ref;
  var $p426: ref;
  var $p427: ref;
  var $i428: i24;
  var $i429: i24;
  var $i430: i24;
  var $p431: ref;
  var $p432: ref;
  var $i433: i8;
  var $i434: i64;
  var $i435: i64;
  var $i436: i64;
  var $i437: i1;
  var $p438: ref;
  var $p440: ref;
  var $p441: ref;
  var $p442: ref;
  var $p443: ref;
  var $p444: ref;
  var $p445: ref;
  var $i446: i24;
  var $i447: i24;
  var $i448: i24;
  var $p449: ref;
  var $p450: ref;
  var $i451: i8;
  var $i452: i64;
  var $i453: i64;
  var $i454: i64;
  var $i455: i1;
  var $p456: ref;
  var $i457: i16;
  var $i458: i32;
  var $i459: i16;
  var $i460: i32;
  var $i461: i1;
  var $p462: ref;
  var $p463: ref;
  var $p464: ref;
  var $p465: ref;
  var $p466: ref;
  var $p467: ref;
  var $i468: i24;
  var $i469: i24;
  var $i470: i24;
  var $p471: ref;
  var $p472: ref;
  var $i473: i8;
  var $i474: i64;
  var $i475: i64;
  var $i476: i64;
  var $i477: i1;
  var $p478: ref;
  var $p479: ref;
  var $p480: ref;
  var $p481: ref;
  var $p482: ref;
  var $p483: ref;
  var $p484: ref;
  var $i485: i24;
  var $i486: i24;
  var $i487: i24;
  var $p488: ref;
  var $p489: ref;
  var $i490: i8;
  var $i491: i64;
  var $i492: i64;
  var $i493: i64;
  var $i494: i1;
  var $p495: ref;
  var $p496: ref;
  var $i497: i32;
  var $i498: i1;
  var $p499: ref;
  var $i500: i8;
  var $i501: i32;
  var $i502: i1;
  var $p503: ref;
  var $i504: i32;
  var $i505: i16;
  var $i506: i32;
  var $i507: i32;
  var $i508: i16;
  var $i509: i16;
  var $i510: i32;
  var $i511: i16;
  var $i512: i32;
  var $p513: ref;
  var $p514: ref;
  var $p515: ref;
  var $p516: ref;
  var $p517: ref;
  var $p518: ref;
  var $i519: i24;
  var $i520: i24;
  var $i521: i24;
  var $p522: ref;
  var $p523: ref;
  var $i524: i8;
  var $i525: i64;
  var $i526: i64;
  var $i527: i64;
  var $i528: i1;
  var $p529: ref;
  var $p530: ref;
  var $i531: i32;
  var $i532: i16;
  var $i533: i32;
  var $i534: i32;
  var $i535: i1;
  var $p536: ref;
  var $p537: ref;
  var $p538: ref;
  var $p539: ref;
  var $p540: ref;
  var $p541: ref;
  var $i542: i24;
  var $i543: i24;
  var $i544: i24;
  var $p545: ref;
  var $p546: ref;
  var $i547: i8;
  var $i548: i64;
  var $i549: i64;
  var $i550: i64;
  var $i551: i1;
  var $p552: ref;
  var $i553: i32;
  var $p554: ref;
  var $p555: ref;
  var $p556: ref;
  var $p557: ref;
  var $p558: ref;
  var $p559: ref;
  var $i560: i24;
  var $i561: i24;
  var $i562: i24;
  var $p563: ref;
  var $p564: ref;
  var $i565: i8;
  var $i566: i64;
  var $i567: i64;
  var $i568: i64;
  var $i569: i1;
  var $p570: ref;
  var $i571: i32;
  var $p572: ref;
  var $i573: i32;
  var $i574: i16;
  var $i575: i32;
  var $i576: i32;
  var $i577: i16;
  var $i578: i16;
  var $i579: i32;
  var $i580: i16;
  var $i581: i32;
  var $p582: ref;
  var $p583: ref;
  var $p584: ref;
  var $p585: ref;
  var $p586: ref;
  var $p587: ref;
  var $i588: i24;
  var $i589: i24;
  var $i590: i24;
  var $p591: ref;
  var $p592: ref;
  var $i593: i8;
  var $i594: i64;
  var $i595: i64;
  var $i596: i64;
  var $i597: i1;
  var $p598: ref;
  var $p599: ref;
  var $i600: i32;
  var $i601: i16;
  var $i602: i32;
  var $i603: i32;
  var $i604: i1;
  var $p605: ref;
  var $p606: ref;
  var $p607: ref;
  var $p608: ref;
  var $p609: ref;
  var $p610: ref;
  var $i611: i24;
  var $i612: i24;
  var $i613: i24;
  var $p614: ref;
  var $p615: ref;
  var $i616: i8;
  var $i617: i64;
  var $i618: i64;
  var $i619: i64;
  var $i620: i1;
  var $p621: ref;
  var $i622: i32;
  var $p623: ref;
  var $p624: ref;
  var $p625: ref;
  var $p626: ref;
  var $p627: ref;
  var $p628: ref;
  var $i629: i24;
  var $i630: i24;
  var $i631: i24;
  var $p632: ref;
  var $p633: ref;
  var $i634: i8;
  var $i635: i64;
  var $i636: i64;
  var $i637: i64;
  var $i638: i1;
  var $p639: ref;
  var $i640: i32;
  var $p641: ref;
  var $p642: ref;
  var $p643: ref;
  var $p644: ref;
  var $p645: ref;
  var $p647: ref;
  var $p648: ref;
  var $p649: ref;
  var $i650: i64;
  var $i651: i1;
  var $p652: ref;
  var $p653: ref;
  var $i654: i64;
  var $i655: i1;
  var $p656: ref;
  var $p657: ref;
  var $i658: i64;
  var $i659: i1;
  var $p660: ref;
  var $i661: i1;
  var $p662: ref;
  var $p663: ref;
  var $p664: ref;
  var $p665: ref;
  var $p667: ref;
  var $p668: ref;
  var $p669: ref;
  var $i670: i64;
  var $i671: i1;
  var $p672: ref;
  var $p673: ref;
  var $i674: i64;
  var $i675: i1;
  var $p676: ref;
  var $i677: i64;
  var $i679: i64;
  var $i680: i64;
  var $i681: i64;
  var $p683: ref;
  var $p684: ref;
  var $i685: i64;
  var $i687: i64;
  var $i688: i64;
  var $i689: i64;
  var $p691: ref;
  var $p692: ref;
  var $i693: i8;
  var $i694: i32;
  var $i695: i32;
  var $i696: i1;
  var $p698: ref;
  var $p699: ref;
  var $i700: i16;
  var $i701: i32;
  var $i702: i16;
  var $i703: i32;
  var $i704: i1;
  var $p705: ref;
  var $p706: ref;
  var $p707: ref;
  var $p708: ref;
  var $p709: ref;
  var $p710: ref;
  var $i711: i24;
  var $i712: i24;
  var $i713: i24;
  var $p714: ref;
  var $p715: ref;
  var $i716: i8;
  var $i717: i64;
  var $i718: i64;
  var $i719: i64;
  var $i720: i1;
  var $p721: ref;
  var $p722: ref;
  var $p723: ref;
  var $p724: ref;
  var $p725: ref;
  var $p726: ref;
  var $p727: ref;
  var $i728: i24;
  var $i729: i24;
  var $i730: i24;
  var $p731: ref;
  var $p732: ref;
  var $i733: i8;
  var $i734: i64;
  var $i735: i64;
  var $i736: i64;
  var $i737: i1;
  var $p738: ref;
  var $p739: ref;
  var $p740: ref;
  var $i741: i32;
  var $p742: ref;
  var $p743: ref;
  var $i744: i32;
  var $i439: i32;
  var $p746: ref;
  var $p747: ref;
  var $p748: ref;
  var $p749: ref;
  var $p750: ref;
  var $p751: ref;
  var $p752: ref;
  var $p753: ref;
  var $p754: ref;
  var $p755: ref;
  var $p756: ref;
  var $p757: ref;
  var $p758: ref;
  var $i59: i32;
  var vslice_dummy_var_10: ref;
  var vslice_dummy_var_11: i32;
  var vslice_dummy_var_12: i32;
  var vslice_dummy_var_13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $p14 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $p15 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $p16 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $p17 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $p18 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $p19 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $p20 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $p21 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $p22 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $p23 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $p24 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $p25 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $p26 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p27 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $p28 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $p29 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $p32 := usb_get_serial_data($p31);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i64.i32($i33);
    call {:si_unique_call 44} {:cexpr "device_type"} boogie_si_record_i32($i34);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    call {:si_unique_call 45} {:cexpr "pnum"} boogie_si_record_i32($i37);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p38, .str);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p39, .str.14);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p40, .str.2);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p41, .str.15);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i44 := $load.i24($M.5, $p43);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i45 := $and.i24($i44, $sub.i24(0, 262144));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i46 := $or.i24($i45, 2133);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p43, $i46);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p47, 0);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.6, $p48);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i64($i49);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i51 := $and.i64($i50, 1);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i52 := ldv__builtin_expect($i51, 0);
    call {:si_unique_call 47} {:cexpr "tmp___0"} boogie_si_record_i64($i52);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $p55 := kmalloc(584, 208);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i58 := $eq.i64($i57, 0);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(32, 1));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, $p0);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} mos7840_set_port_private($p0, $p56);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(80, 1));
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} vslice_dummy_var_10 := spinlock_check($p61);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} __raw_spin_lock_init($p65, .str.16, $p3);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i37, 1);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(0, 1));
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i66);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p68, .str);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p69, .str.14);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p70, .str.2);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p71, .str.17);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i74 := $load.i24($M.5, $p73);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i75 := $and.i24($i74, $sub.i24(0, 262144));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i76 := $or.i24($i75, 2150);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p73, $i76);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p77, 0);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.6, $p78);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i64($i79);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i81 := $and.i64($i80, 1);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $i82 := ldv__builtin_expect($i81, 0);
    call {:si_unique_call 54} {:cexpr "tmp___2"} boogie_si_record_i64($i82);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i83 := $ne.i64($i82, 0);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p87, .str);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p88, .str.14);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p89, .str.2);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p90, .str.18);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i93 := $load.i24($M.5, $p92);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i94 := $and.i24($i93, $sub.i24(0, 262144));
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i95 := $or.i24($i94, 2151);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p92, $i95);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p96, 0);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.6, $p97);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i64($i98);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i100 := $and.i64($i99, 1);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $i101 := ldv__builtin_expect($i100, 0);
    call {:si_unique_call 57} {:cexpr "tmp___3"} boogie_si_record_i64($i101);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(0, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 1);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i108 == 1);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(0, 1));
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 2);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(0, 1));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p122);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 2);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i124 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(0, 1));
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 3);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i134 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(0, 1));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.0, $p142);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i143, 4);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i144 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} mos7840_dump_serial_port($p0, $p56);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} mos7840_set_port_private($p0, $p56);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(41, 1));
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i153 := $load.i8($M.0, $p152);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i154 := $zext.i8.i32($i153);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i155 := $trunc.i32.i16($i154);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $i156 := mos7840_get_reg_sync($p0, $i155, $p1);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 62} {:cexpr "status"} boogie_si_record_i32($i156);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i157 := $slt.i32($i156, 0);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i157 == 1);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p175, .str);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p176, .str.14);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p177, .str.2);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p178, .str.20);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p180 := $bitcast.ref.ref($p179);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i181 := $load.i24($M.5, $p180);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i182 := $and.i24($i181, $sub.i24(0, 262144));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i183 := $or.i24($i182, 2184);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p180, $i183);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p184, 0);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i186 := $load.i8($M.6, $p185);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i187 := $zext.i8.i64($i186);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i188 := $and.i64($i187, 1);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i189 := ldv__builtin_expect($i188, 0);
    call {:si_unique_call 66} {:cexpr "tmp___5"} boogie_si_record_i64($i189);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i190 := $ne.i64($i189, 0);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i194 := $load.i16($M.7, $p1);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i195 := $zext.i16.i32($i194);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i196 := $or.i32($i195, 8);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i197 := $trunc.i32.i16($i196);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p1, $i197);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i198 := $load.i16($M.7, $p1);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i199 := $zext.i16.i32($i198);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i200 := $or.i32($i199, 4);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i201 := $trunc.i32.i16($i200);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p1, $i201);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(41, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i203 := $load.i8($M.0, $p202);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i204 := $zext.i8.i32($i203);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i205 := $trunc.i32.i16($i204);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i206 := $load.i16($M.7, $p1);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i207 := $zext.i16.i32($i206);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i208 := $trunc.i32.i16($i207);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $i209 := mos7840_set_reg_sync($p0, $i205, $i208);
    call {:si_unique_call 70} {:cexpr "status"} boogie_si_record_i32($i209);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i210 := $slt.i32($i209, 0);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i210 == 1);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p228, .str);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p229, .str.14);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p230, .str.2);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p231, .str.22);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p233 := $bitcast.ref.ref($p232);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i234 := $load.i24($M.5, $p233);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i235 := $and.i24($i234, $sub.i24(0, 262144));
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i236 := $or.i24($i235, 2196);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p233, $i236);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p237, 0);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i239 := $load.i8($M.6, $p238);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i240 := $zext.i8.i64($i239);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i241 := $and.i64($i240, 1);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $i242 := ldv__builtin_expect($i241, 0);
    call {:si_unique_call 74} {:cexpr "tmp___7"} boogie_si_record_i64($i242);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i243 := $ne.i64($i242, 0);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i243} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p1, 1);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(42, 1));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i246 := $load.i8($M.0, $p245);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i247 := $zext.i8.i32($i246);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i248 := $trunc.i32.i16($i247);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i249 := $load.i16($M.7, $p1);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i250 := $zext.i16.i32($i249);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i251 := $trunc.i32.i16($i250);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i252 := mos7840_set_reg_sync($p0, $i248, $i251);
    call {:si_unique_call 78} {:cexpr "status"} boogie_si_record_i32($i252);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i253 := $slt.i32($i252, 0);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i253} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i253 == 1);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p271, .str);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p272, .str.14);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p273, .str.2);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p274, .str.24);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p276 := $bitcast.ref.ref($p275);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i277 := $load.i24($M.5, $p276);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i278 := $and.i24($i277, $sub.i24(0, 262144));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i279 := $or.i24($i278, 2207);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p276, $i279);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p280, 0);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i282 := $load.i8($M.6, $p281);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i283 := $zext.i8.i64($i282);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i284 := $and.i64($i283, 1);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $i285 := ldv__builtin_expect($i284, 0);
    call {:si_unique_call 82} {:cexpr "tmp___9"} boogie_si_record_i64($i285);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i286 := $ne.i64($i285, 0);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i286} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p1, 5);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(42, 1));
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i289 := $load.i8($M.0, $p288);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i290 := $zext.i8.i16($i289);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i291 := $zext.i16.i32($i290);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i292 := $add.i32($i291, 1);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i293 := $trunc.i32.i16($i292);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i294 := $load.i16($M.7, $p1);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i295 := $zext.i16.i32($i294);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i296 := $trunc.i32.i16($i295);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $i297 := mos7840_set_reg_sync($p0, $i293, $i296);
    call {:si_unique_call 86} {:cexpr "status"} boogie_si_record_i32($i297);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i298 := $slt.i32($i297, 0);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i298} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i298 == 1);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p316, .str);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p317, .str.14);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p318, .str.2);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p319, .str.26);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p321 := $bitcast.ref.ref($p320);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i322 := $load.i24($M.5, $p321);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i323 := $and.i24($i322, $sub.i24(0, 262144));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i324 := $or.i24($i323, 2216);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p321, $i324);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p325, 0);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i327 := $load.i8($M.6, $p326);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i328 := $zext.i8.i64($i327);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i329 := $and.i64($i328, 1);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i330 := ldv__builtin_expect($i329, 0);
    call {:si_unique_call 90} {:cexpr "tmp___11"} boogie_si_record_i64($i330);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i331 := $ne.i64($i330, 0);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i331} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p1, 36);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(42, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i334 := $load.i8($M.0, $p333);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i335 := $zext.i8.i16($i334);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i336 := $zext.i16.i32($i335);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i337 := $add.i32($i336, 2);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i338 := $trunc.i32.i16($i337);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i339 := $load.i16($M.7, $p1);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i340 := $zext.i16.i32($i339);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i341 := $trunc.i32.i16($i340);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i342 := mos7840_set_reg_sync($p0, $i338, $i341);
    call {:si_unique_call 94} {:cexpr "status"} boogie_si_record_i32($i342);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i343 := $slt.i32($i342, 0);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i343 == 1);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p361, .str);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p362, .str.14);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p363, .str.2);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p364, .str.28);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p366 := $bitcast.ref.ref($p365);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i367 := $load.i24($M.5, $p366);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i368 := $and.i24($i367, $sub.i24(0, 262144));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $i369 := $or.i24($i368, 2225);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p366, $i369);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p370, 0);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i372 := $load.i8($M.6, $p371);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i373 := $zext.i8.i64($i372);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i374 := $and.i64($i373, 1);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $i375 := ldv__builtin_expect($i374, 0);
    call {:si_unique_call 98} {:cexpr "tmp___13"} boogie_si_record_i64($i375);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i376 := $ne.i64($i375, 0);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i376} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i376 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p1, 0);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i378 := $load.i16($M.7, $p1);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i379 := $zext.i16.i32($i378);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i380 := $trunc.i32.i16($i379);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $i381 := mos7840_set_reg_sync($p0, 3, $i380);
    call {:si_unique_call 102} {:cexpr "status"} boogie_si_record_i32($i381);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i382 := $slt.i32($i381, 0);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i382} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i382 == 1);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p400, .str);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p401, .str.14);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p402, .str.2);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p403, .str.30);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p405 := $bitcast.ref.ref($p404);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i406 := $load.i24($M.5, $p405);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i407 := $and.i24($i406, $sub.i24(0, 262144));
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i408 := $or.i24($i407, 2234);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p405, $i408);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p409, 0);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i411 := $load.i8($M.6, $p410);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i412 := $zext.i8.i64($i411);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i413 := $and.i64($i412, 1);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} $i414 := ldv__builtin_expect($i413, 0);
    call {:si_unique_call 106} {:cexpr "tmp___15"} boogie_si_record_i64($i414);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i415 := $ne.i64($i414, 0);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i415} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i415 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p1, 32);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i417 := $load.i16($M.7, $p1);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i418 := $zext.i16.i32($i417);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i419 := $trunc.i32.i16($i418);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} $i420 := mos7840_set_reg_sync($p0, 2, $i419);
    call {:si_unique_call 110} {:cexpr "status"} boogie_si_record_i32($i420);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i421 := $slt.i32($i420, 0);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    assume {:branchcond $i421} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i421 == 1);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p440, .str);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p441, .str.14);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p442, .str.2);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p443, .str.32);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p445 := $bitcast.ref.ref($p444);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i446 := $load.i24($M.5, $p445);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i447 := $and.i24($i446, $sub.i24(0, 262144));
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i448 := $or.i24($i447, 2242);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p445, $i448);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p449, 0);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i451 := $load.i8($M.6, $p450);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i452 := $zext.i8.i64($i451);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i453 := $and.i64($i452, 1);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $i454 := ldv__builtin_expect($i453, 0);
    call {:si_unique_call 114} {:cexpr "tmp___17"} boogie_si_record_i64($i454);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i455 := $ne.i64($i454, 0);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i455} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i455 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p1, 0);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i457 := $load.i16($M.7, $p1);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i458 := $zext.i16.i32($i457);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i459 := $trunc.i32.i16($i458);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $i460 := mos7840_set_uart_reg($p0, 7, $i459);
    call {:si_unique_call 124} {:cexpr "status"} boogie_si_record_i32($i460);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i461 := $slt.i32($i460, 0);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i461} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i461 == 1);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p479, .str);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p480, .str.14);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p481, .str.2);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p482, .str.34);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p484 := $bitcast.ref.ref($p483);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i485 := $load.i24($M.5, $p484);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i486 := $and.i24($i485, $sub.i24(0, 262144));
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i487 := $or.i24($i486, 2251);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p484, $i487);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p488, 0);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i490 := $load.i8($M.6, $p489);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i491 := $zext.i8.i64($i490);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i492 := $and.i64($i491, 1);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $i493 := ldv__builtin_expect($i492, 0);
    call {:si_unique_call 128} {:cexpr "tmp___19"} boogie_si_record_i64($i493);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i494 := $ne.i64($i493, 0);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i494} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i494 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(0, 1));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i497 := $load.i32($M.0, $p496);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i498 := $ne.i32($i497, 1);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i498} true;
    goto $bb115, $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    assume !($i498 == 1);
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p1, 255);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p572 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(0, 1));
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i573 := $load.i32($M.0, $p572);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i574 := $trunc.i32.i16($i573);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i575 := $zext.i16.i32($i574);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i576 := $add.i32($i575, 57);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i577 := $trunc.i32.i16($i576);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i578 := $load.i16($M.7, $p1);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i579 := $zext.i16.i32($i578);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i580 := $trunc.i32.i16($i579);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $i581 := mos7840_set_reg_sync($p0, $i577, $i580);
    call {:si_unique_call 132} {:cexpr "status"} boogie_si_record_i32($i581);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p582 := $add.ref($add.ref($p25, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p582, .str);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p583 := $add.ref($add.ref($p25, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p583, .str.14);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p584 := $add.ref($add.ref($p25, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p584, .str.2);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($add.ref($p25, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p585, .str.35);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $p586 := $add.ref($add.ref($p25, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p587 := $bitcast.ref.ref($p586);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i588 := $load.i24($M.5, $p587);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i589 := $and.i24($i588, $sub.i24(0, 262144));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i590 := $or.i24($i589, 2272);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p587, $i590);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($p25, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p591, 0);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p592 := $add.ref($add.ref($p25, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i593 := $load.i8($M.6, $p592);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i594 := $zext.i8.i64($i593);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i595 := $and.i64($i594, 1);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $i596 := ldv__builtin_expect($i595, 0);
    call {:si_unique_call 134} {:cexpr "tmp___23"} boogie_si_record_i64($i596);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i597 := $ne.i64($i596, 0);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i597} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i597 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $i604 := $slt.i32($i581, 0);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i604} true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i604 == 1);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p623 := $add.ref($add.ref($p27, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p623, .str);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p624 := $add.ref($add.ref($p27, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p624, .str.14);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p625 := $add.ref($add.ref($p27, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p625, .str.2);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p626 := $add.ref($add.ref($p27, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p626, .str.37);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p627 := $add.ref($add.ref($p27, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p628 := $bitcast.ref.ref($p627);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i629 := $load.i24($M.5, $p628);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i630 := $and.i24($i629, $sub.i24(0, 262144));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i631 := $or.i24($i630, 2277);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p628, $i631);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p632 := $add.ref($add.ref($p27, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p632, 0);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($add.ref($p27, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i634 := $load.i8($M.6, $p633);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i635 := $zext.i8.i64($i634);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i636 := $and.i64($i635, 1);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $i637 := ldv__builtin_expect($i636, 0);
    call {:si_unique_call 153} {:cexpr "tmp___25"} boogie_si_record_i64($i637);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i638 := $ne.i64($i637, 0);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i638} true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i638 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $p641 := ldv_usb_alloc_urb_35(0, 208);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p642 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(48, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p642, $p641);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $p643 := kmalloc(16, 208);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p644 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(64, 1));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p644, $p643);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $p645 := kmalloc(8, 208);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p647 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(56, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p647, $p645);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p648 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(48, 1));
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p649 := $load.ref($M.0, $p648);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i650 := $p2i.ref.i64($p649);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i651 := $eq.i64($i650, 0);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i651} true;
    goto $bb145, $bb147;

  $bb147:
    assume !($i651 == 1);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p652 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(64, 1));
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p653 := $load.ref($M.0, $p652);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i654 := $p2i.ref.i64($p653);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i655 := $eq.i64($i654, 0);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i655} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i655 == 1);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p656 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(56, 1));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p657 := $load.ref($M.0, $p656);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i658 := $p2i.ref.i64($p657);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i659 := $eq.i64($i658, 0);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i659} true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i659 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $p660 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(297, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p660, 0);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i661 := $eq.i32($i34, 30736);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    assume {:branchcond $i661} true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i661 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p692 := $add.ref($add.ref($p31, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i693 := $load.i8($M.0, $p692);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i694 := $zext.i8.i32($i693);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i695 := $add.i32($i694, $sub.i32(0, 1));
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i696 := $eq.i32($i695, $i37);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i696} true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i696 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $r := $i59;
    return;

  $bb162:
    assume $i696 == 1;
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p1, 15);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p698 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p699 := $load.ref($M.0, $p698);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i700 := $load.i16($M.7, $p1);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i701 := $zext.i16.i32($i700);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i702 := $trunc.i32.i16($i701);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $i703 := mos7840_set_reg_sync($p699, 62, $i702);
    call {:si_unique_call 166} {:cexpr "status"} boogie_si_record_i32($i703);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i704 := $slt.i32($i703, 0);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    assume {:branchcond $i704} true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i704 == 1);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p722 := $add.ref($add.ref($p29, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p722, .str);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p723 := $add.ref($add.ref($p29, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p723, .str.14);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p724 := $add.ref($add.ref($p29, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p724, .str.2);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p725 := $add.ref($add.ref($p29, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p725, .str.39);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p726 := $add.ref($add.ref($p29, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p727 := $bitcast.ref.ref($p726);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i728 := $load.i24($M.5, $p727);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i729 := $and.i24($i728, $sub.i24(0, 262144));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i730 := $or.i24($i729, 2325);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p727, $i730);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p731 := $add.ref($add.ref($p29, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p731, 0);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p732 := $add.ref($add.ref($p29, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i733 := $load.i8($M.6, $p732);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i734 := $zext.i8.i64($i733);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i735 := $and.i64($i734, 1);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i736 := ldv__builtin_expect($i735, 0);
    call {:si_unique_call 170} {:cexpr "tmp___32"} boogie_si_record_i64($i736);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i737 := $ne.i64($i736, 0);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i737} true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i737 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $p739 := $add.ref($add.ref($p31, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p740 := $load.ref($M.0, $p739);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $i741 := __create_pipe($p740, 0);
    call {:si_unique_call 174} {:cexpr "tmp___33"} boogie_si_record_i32($i741);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p742 := $add.ref($add.ref($p31, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p743 := $load.ref($M.0, $p742);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i744 := $or.i32($i741, $sub.i32(0, 2147483648));
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} vslice_dummy_var_13 := usb_control_msg($p743, $i744, 3, 0, 1, 0, $0.ref, 0, 5000);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb169:
    assume $i737 == 1;
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p738 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} __dynamic_dev_dbg.ref.ref.ref.i32($p29, $p738, .str.39, $i703);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb164:
    assume $i704 == 1;
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p705 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p705, .str);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p706 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p706, .str.14);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p707 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p707, .str.2);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p708 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p708, .str.38);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p709 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p710 := $bitcast.ref.ref($p709);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i711 := $load.i24($M.5, $p710);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i712 := $and.i24($i711, $sub.i24(0, 262144));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i713 := $or.i24($i712, 2322);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p710, $i713);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p714 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p714, 0);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p715 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i716 := $load.i8($M.6, $p715);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i717 := $zext.i8.i64($i716);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i718 := $and.i64($i717, 1);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $i719 := ldv__builtin_expect($i718, 0);
    call {:si_unique_call 168} {:cexpr "tmp___31"} boogie_si_record_i64($i719);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i720 := $ne.i64($i719, 0);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i720} true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i720 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $i439 := $i703;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p746 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(568, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $p747 := $load.ref($M.0, $p746);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p748 := $bitcast.ref.ref($p747);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} kfree($p748);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p749 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(560, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p750 := $load.ref($M.0, $p749);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} usb_free_urb($p750);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p751 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(56, 1));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p752 := $load.ref($M.0, $p751);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p753 := $bitcast.ref.ref($p752);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} kfree($p753);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p754 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(64, 1));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p755 := $load.ref($M.0, $p754);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} kfree($p755);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p756 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(48, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p757 := $load.ref($M.0, $p756);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} usb_free_urb($p757);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p758 := $bitcast.ref.ref($p56);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} kfree($p758);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i59 := $i439;
    goto $bb6;

  $bb166:
    assume $i720 == 1;
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p721 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} __dynamic_dev_dbg.ref.ref.ref.i32($p28, $p721, .str.38, $i703);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb153:
    assume $i661 == 1;
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p662 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(297, 1));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p662, 1);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $p663 := ldv_usb_alloc_urb_36(0, 208);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p664 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(560, 1));
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p664, $p663);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $p665 := kmalloc(8, 208);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p667 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(568, 1));
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p667, $p665);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p668 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(560, 1));
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p669 := $load.ref($M.0, $p668);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i670 := $p2i.ref.i64($p669);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i671 := $eq.i64($i670, 0);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i671} true;
    goto $bb155, $bb157;

  $bb157:
    assume !($i671 == 1);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p672 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(568, 1));
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p673 := $load.ref($M.0, $p672);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i674 := $p2i.ref.i64($p673);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i675 := $eq.i64($i674, 0);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    assume {:branchcond $i675} true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i675 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(304, 1));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i677 := $p2i.ref.i64($p56);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} vslice_dummy_var_11 := reg_timer_1($p676, mos7840_led_off, $i677);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $i679 := msecs_to_jiffies(500);
    call {:si_unique_call 160} {:cexpr "tmp___29"} boogie_si_record_i64($i679);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i680 := $load.i64($M.0, jiffies);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i681 := $add.i64($i679, $i680);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p683 := $add.ref($add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(304, 1)), $mul.ref(16, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p683, $i681);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p684 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(432, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i685 := $p2i.ref.i64($p56);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} vslice_dummy_var_12 := reg_timer_1($p684, mos7840_led_flag_off, $i685);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $i687 := msecs_to_jiffies(500);
    call {:si_unique_call 163} {:cexpr "tmp___30"} boogie_si_record_i64($i687);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i688 := $load.i64($M.0, jiffies);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i689 := $add.i64($i687, $i688);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(432, 1)), $mul.ref(16, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p691, $i689);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} mos7840_set_led_sync($p0, 4, 768);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb158:
    assume {:verifier.code 0} true;
    assume $i675 == 1;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $i439 := $sub.i32(0, 12);
    goto $bb101;

  $bb155:
    assume {:verifier.code 0} true;
    assume $i671 == 1;
    goto $bb156;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb150:
    assume {:verifier.code 0} true;
    assume $i659 == 1;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $i439 := $sub.i32(0, 12);
    goto $bb101;

  $bb148:
    assume {:verifier.code 0} true;
    assume $i655 == 1;
    goto $bb146;

  $bb145:
    assume {:verifier.code 0} true;
    assume $i651 == 1;
    goto $bb146;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb141:
    assume $i638 == 1;
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i640 := $add.i32($i37, 1);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p27, $p639, .str.37, $i640, $i581);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb136:
    assume $i604 == 1;
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p605 := $add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p605, .str);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p606 := $add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p606, .str.14);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p607 := $add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p607, .str.2);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p608 := $add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p608, .str.36);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p610 := $bitcast.ref.ref($p609);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i611 := $load.i24($M.5, $p610);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i612 := $and.i24($i611, $sub.i24(0, 262144));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i613 := $or.i24($i612, 2274);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p610, $i613);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p614 := $add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p614, 0);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $p615 := $add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i616 := $load.i8($M.6, $p615);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i617 := $zext.i8.i64($i616);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i618 := $and.i64($i617, 1);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} $i619 := ldv__builtin_expect($i618, 0);
    call {:si_unique_call 151} {:cexpr "tmp___24"} boogie_si_record_i64($i619);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i620 := $ne.i64($i619, 0);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i620} true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i620 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb138:
    assume $i620 == 1;
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p621 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i622 := $add.i32($i37, 1);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p26, $p621, .str.36, $i622, $i581);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb133:
    assume $i597 == 1;
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p599 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(0, 1));
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i600 := $load.i32($M.0, $p599);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i601 := $trunc.i32.i16($i600);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i602 := $zext.i16.i32($i601);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i603 := $add.i32($i602, 57);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} __dynamic_dev_dbg.ref.ref.ref.i32($p25, $p598, .str.35, $i603);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb115:
    assume $i498 == 1;
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p499 := $add.ref($add.ref($p31, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i500 := $load.i8($M.0, $p499);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i501 := $zext.i8.i32($i500);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i502 := $eq.i32($i501, 2);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i502} true;
    goto $bb118, $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    assume !($i502 == 1);
    goto $bb117;

  $bb118:
    assume $i502 == 1;
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p1, 255);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(0, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i504 := $load.i32($M.0, $p503);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i505 := $trunc.i32.i16($i504);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i506 := $zext.i16.i32($i505);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i507 := $add.i32($i506, 58);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i508 := $trunc.i32.i16($i507);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i509 := $load.i16($M.7, $p1);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i510 := $zext.i16.i32($i509);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i511 := $trunc.i32.i16($i510);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $i512 := mos7840_set_reg_sync($p0, $i508, $i511);
    call {:si_unique_call 136} {:cexpr "status"} boogie_si_record_i32($i512);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p513, .str);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p514, .str.14);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p515, .str.2);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p516, .str.35);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p518 := $bitcast.ref.ref($p517);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i519 := $load.i24($M.5, $p518);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i520 := $and.i24($i519, $sub.i24(0, 262144));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i521 := $or.i24($i520, 2260);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p518, $i521);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p522, 0);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i524 := $load.i8($M.6, $p523);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i525 := $zext.i8.i64($i524);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i526 := $and.i64($i525, 1);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $i527 := ldv__builtin_expect($i526, 0);
    call {:si_unique_call 138} {:cexpr "tmp___20"} boogie_si_record_i64($i527);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i528 := $ne.i64($i527, 0);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    assume {:branchcond $i528} true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i528 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $i535 := $slt.i32($i512, 0);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i535} true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i535 == 1);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($add.ref($p24, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p554, .str);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($add.ref($p24, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p555, .str.14);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($add.ref($p24, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p556, .str.2);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($add.ref($p24, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p557, .str.37);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p558 := $add.ref($add.ref($p24, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p559 := $bitcast.ref.ref($p558);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i560 := $load.i24($M.5, $p559);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i561 := $and.i24($i560, $sub.i24(0, 262144));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i562 := $or.i24($i561, 2265);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p559, $i562);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p563 := $add.ref($add.ref($p24, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p563, 0);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p564 := $add.ref($add.ref($p24, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i565 := $load.i8($M.6, $p564);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i566 := $zext.i8.i64($i565);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i567 := $and.i64($i566, 1);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $i568 := ldv__builtin_expect($i567, 0);
    call {:si_unique_call 143} {:cexpr "tmp___22"} boogie_si_record_i64($i568);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i569 := $ne.i64($i568, 0);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    assume {:branchcond $i569} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i569 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb128:
    assume $i569 == 1;
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p570 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i571 := $add.i32($i37, 2);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p24, $p570, .str.37, $i571, $i512);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb123:
    assume $i535 == 1;
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p536 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p536, .str);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p537, .str.14);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p538 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p538, .str.2);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p539 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p539, .str.36);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p540 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p541 := $bitcast.ref.ref($p540);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i542 := $load.i24($M.5, $p541);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i543 := $and.i24($i542, $sub.i24(0, 262144));
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i544 := $or.i24($i543, 2262);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p541, $i544);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p545, 0);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p546 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i547 := $load.i8($M.6, $p546);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i548 := $zext.i8.i64($i547);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i549 := $and.i64($i548, 1);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $i550 := ldv__builtin_expect($i549, 0);
    call {:si_unique_call 141} {:cexpr "tmp___21"} boogie_si_record_i64($i550);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i551 := $ne.i64($i550, 0);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i551} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i551 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb125:
    assume $i551 == 1;
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i553 := $add.i32($i37, 2);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p23, $p552, .str.36, $i553, $i512);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb120:
    assume $i528 == 1;
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(0, 1));
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i531 := $load.i32($M.0, $p530);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i532 := $trunc.i32.i16($i531);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i533 := $zext.i16.i32($i532);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i534 := $add.i32($i533, 58);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} __dynamic_dev_dbg.ref.ref.ref.i32($p22, $p529, .str.35, $i534);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb111:
    assume $i494 == 1;
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} __dynamic_dev_dbg.ref.ref.ref.i32($p21, $p495, .str.34, $i460);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb106:
    assume $i461 == 1;
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p462 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p462, .str);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p463, .str.14);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p464 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p464, .str.2);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p465, .str.33);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p467 := $bitcast.ref.ref($p466);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i468 := $load.i24($M.5, $p467);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i469 := $and.i24($i468, $sub.i24(0, 262144));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i470 := $or.i24($i469, 2248);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p467, $i470);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p471, 0);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i473 := $load.i8($M.6, $p472);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i474 := $zext.i8.i64($i473);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i475 := $and.i64($i474, 1);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i476 := ldv__builtin_expect($i475, 0);
    call {:si_unique_call 126} {:cexpr "tmp___18"} boogie_si_record_i64($i476);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i477 := $ne.i64($i476, 0);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i477} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i477 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb108:
    assume $i477 == 1;
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p478 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} __dynamic_dev_dbg.ref.ref.ref.i32($p20, $p478, .str.33, $i460);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb102:
    assume $i455 == 1;
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} __dynamic_dev_dbg.ref.ref.ref.i32($p19, $p456, .str.32, $i420);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb96:
    assume $i421 == 1;
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p422, .str);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p423, .str.14);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p424, .str.2);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p425, .str.31);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p427 := $bitcast.ref.ref($p426);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i428 := $load.i24($M.5, $p427);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i429 := $and.i24($i428, $sub.i24(0, 262144));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i430 := $or.i24($i429, 2239);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p427, $i430);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p431, 0);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i433 := $load.i8($M.6, $p432);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i434 := $zext.i8.i64($i433);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i435 := $and.i64($i434, 1);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i436 := ldv__builtin_expect($i435, 0);
    call {:si_unique_call 112} {:cexpr "tmp___16"} boogie_si_record_i64($i436);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i437 := $ne.i64($i436, 0);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i437} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i437 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i439 := $i420;
    goto $bb101;

  $bb98:
    assume $i437 == 1;
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} __dynamic_dev_dbg.ref.ref.ref.i32($p18, $p438, .str.31, $i420);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb92:
    assume $i415 == 1;
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} __dynamic_dev_dbg.ref.ref.ref.i32($p17, $p416, .str.30, $i381);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb87:
    assume $i382 == 1;
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p383, .str);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p384, .str.14);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p385, .str.2);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p386, .str.29);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p388 := $bitcast.ref.ref($p387);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i389 := $load.i24($M.5, $p388);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i390 := $and.i24($i389, $sub.i24(0, 262144));
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i391 := $or.i24($i390, 2231);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p388, $i391);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p392, 0);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i394 := $load.i8($M.6, $p393);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i395 := $zext.i8.i64($i394);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i396 := $and.i64($i395, 1);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $i397 := ldv__builtin_expect($i396, 0);
    call {:si_unique_call 104} {:cexpr "tmp___14"} boogie_si_record_i64($i397);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i398 := $ne.i64($i397, 0);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i398} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb89:
    assume $i398 == 1;
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} __dynamic_dev_dbg.ref.ref.ref.i32($p16, $p399, .str.29, $i381);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb83:
    assume $i376 == 1;
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} __dynamic_dev_dbg.ref.ref.ref.i32($p15, $p377, .str.28, $i342);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb78:
    assume $i343 == 1;
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p344, .str);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p345, .str.14);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p346, .str.2);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p347, .str.27);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p349 := $bitcast.ref.ref($p348);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i350 := $load.i24($M.5, $p349);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i351 := $and.i24($i350, $sub.i24(0, 262144));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i352 := $or.i24($i351, 2222);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p349, $i352);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p353, 0);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i355 := $load.i8($M.6, $p354);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i356 := $zext.i8.i64($i355);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i357 := $and.i64($i356, 1);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $i358 := ldv__builtin_expect($i357, 0);
    call {:si_unique_call 96} {:cexpr "tmp___12"} boogie_si_record_i64($i358);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i359 := $ne.i64($i358, 0);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i359 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb80:
    assume $i359 == 1;
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} __dynamic_dev_dbg.ref.ref.ref.i32($p14, $p360, .str.27, $i342);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb74:
    assume $i331 == 1;
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} __dynamic_dev_dbg.ref.ref.ref.i32($p13, $p332, .str.26, $i297);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb69:
    assume $i298 == 1;
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p299, .str);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p300, .str.14);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p301, .str.2);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p302, .str.25);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p304 := $bitcast.ref.ref($p303);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i305 := $load.i24($M.5, $p304);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i306 := $and.i24($i305, $sub.i24(0, 262144));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i307 := $or.i24($i306, 2213);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p304, $i307);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p308, 0);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i310 := $load.i8($M.6, $p309);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i311 := $zext.i8.i64($i310);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i312 := $and.i64($i311, 1);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $i313 := ldv__builtin_expect($i312, 0);
    call {:si_unique_call 88} {:cexpr "tmp___10"} boogie_si_record_i64($i313);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i314 := $ne.i64($i313, 0);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i314} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb71:
    assume $i314 == 1;
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} __dynamic_dev_dbg.ref.ref.ref.i32($p12, $p315, .str.25, $i297);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb65:
    assume $i286 == 1;
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} __dynamic_dev_dbg.ref.ref.ref.i32($p11, $p287, .str.24, $i252);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb60:
    assume $i253 == 1;
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p254, .str);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p255, .str.14);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p256, .str.2);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p257, .str.23);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p259 := $bitcast.ref.ref($p258);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i260 := $load.i24($M.5, $p259);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i261 := $and.i24($i260, $sub.i24(0, 262144));
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i262 := $or.i24($i261, 2204);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p259, $i262);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p263, 0);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i265 := $load.i8($M.6, $p264);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i266 := $zext.i8.i64($i265);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i267 := $and.i64($i266, 1);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $i268 := ldv__builtin_expect($i267, 0);
    call {:si_unique_call 80} {:cexpr "tmp___8"} boogie_si_record_i64($i268);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i269 := $ne.i64($i268, 0);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb62:
    assume $i269 == 1;
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} __dynamic_dev_dbg.ref.ref.ref.i32($p10, $p270, .str.23, $i252);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb56:
    assume $i243 == 1;
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} __dynamic_dev_dbg.ref.ref.ref.i32($p9, $p244, .str.22, $i209);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb51:
    assume $i210 == 1;
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p211, .str);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p212, .str.14);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p213, .str.2);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p214, .str.21);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p216 := $bitcast.ref.ref($p215);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i217 := $load.i24($M.5, $p216);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i218 := $and.i24($i217, $sub.i24(0, 262144));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i219 := $or.i24($i218, 2193);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p216, $i219);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p220, 0);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i222 := $load.i8($M.6, $p221);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i223 := $zext.i8.i64($i222);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i224 := $and.i64($i223, 1);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $i225 := ldv__builtin_expect($i224, 0);
    call {:si_unique_call 72} {:cexpr "tmp___6"} boogie_si_record_i64($i225);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i226 := $ne.i64($i225, 0);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i226} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb53:
    assume $i226 == 1;
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} __dynamic_dev_dbg.ref.ref.ref.i32($p8, $p227, .str.21, $i209);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb47:
    assume $i190 == 1;
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i192 := $load.i16($M.7, $p1);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i193 := $zext.i16.i32($i192);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p7, $p191, .str.20, $i193, $i156);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb41:
    assume $i157 == 1;
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p158, .str);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p159, .str.14);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p160, .str.2);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p161, .str.19);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i164 := $load.i24($M.5, $p163);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i165 := $and.i24($i164, $sub.i24(0, 262144));
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i166 := $or.i24($i165, 2181);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p163, $i166);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p167, 0);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i169 := $load.i8($M.6, $p168);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i170 := $zext.i8.i64($i169);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i171 := $and.i64($i170, 1);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $i172 := ldv__builtin_expect($i171, 0);
    call {:si_unique_call 64} {:cexpr "tmp___4"} boogie_si_record_i64($i172);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i173 := $ne.i64($i172, 0);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb43:
    assume $i173 == 1;
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} __dynamic_dev_dbg.ref.ref.ref.i32($p6, $p174, .str.19, $i156);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    goto $bb45;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i144 == 1;
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p31, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i146 := $load.i8($M.0, $p145);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i147 := $zext.i8.i32($i146);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 4);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i148 == 1);
    goto $bb37;

  $bb38:
    assume $i148 == 1;
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(40, 1));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p149, 12);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(41, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p150, 13);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(42, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p151, 28);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb29:
    assume $i134 == 1;
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p31, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i136 := $load.i8($M.0, $p135);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32($i136);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 4);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i138 == 1);
    goto $bb31;

  $bb32:
    assume $i138 == 1;
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(40, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p139, 10);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(41, 1));
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p140, 11);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(42, 1));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p141, 25);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb23:
    assume $i124 == 1;
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p31, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.0, $p125);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i126);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 2);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i128 == 1);
    goto $bb25;

  $bb26:
    assume $i128 == 1;
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(40, 1));
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p129, 10);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(41, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p130, 11);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(42, 1));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p131, 25);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb17:
    assume $i114 == 1;
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p31, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.0, $p115);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 4);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb19;

  $bb20:
    assume $i118 == 1;
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(40, 1));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p119, 8);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(41, 1));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p120, 9);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(42, 1));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p121, 22);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i108 == 1;
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(40, 1));
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p109, 0);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(41, 1));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p110, 1);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(42, 1));
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p111, 4);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i102 == 1;
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p56, $mul.ref(0, 584)), $mul.ref(0, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} __dynamic_dev_dbg.ref.ref.ref.i32($p5, $p103, .str.18, $i105);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i83 == 1;
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1120, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} __dynamic_dev_dbg.ref.ref.ref.i32($p4, $p84, .str.17, $i86);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i58 == 1;
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i59 := $sub.i32(0, 12);
    goto $bb6;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i53 == 1;
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} __dynamic_dev_dbg.ref.ref.ref.i32($p2, $p54, .str.15, $i37);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mos7840_port_remove: ref;

axiom mos7840_port_remove == $sub.ref(0, 194538);

procedure mos7840_port_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.19, $M.21, $M.23;



implementation mos7840_port_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var vslice_dummy_var_14: i32;
  var vslice_dummy_var_15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $p1 := mos7840_get_port_private($p0);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(297, 1));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(48, 1));
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} usb_kill_urb($p17);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(48, 1));
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} usb_free_urb($p19);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(64, 1));
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} kfree($p21);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(56, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} kfree($p24);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p1);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} kfree($p25);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} mos7840_set_led_sync($p0, 4, 768);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(304, 1));
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} vslice_dummy_var_14 := ldv_del_timer_sync_37($p5);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(432, 1));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} vslice_dummy_var_15 := ldv_del_timer_sync_38($p7);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(560, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} usb_kill_urb($p10);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(560, 1));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} usb_free_urb($p12);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(568, 1));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} kfree($p15);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mos7840_open: ref;

axiom mos7840_open == $sub.ref(0, 195570);

procedure mos7840_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.7, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $CurrAddr, assertsPassed;



implementation mos7840_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i8;
  var $p53: ref;
  var $p55: ref;
  var $i56: i64;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $i67: i64;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $i54: i32;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i16;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i24;
  var $i85: i24;
  var $i86: i24;
  var $p87: ref;
  var $p88: ref;
  var $i89: i8;
  var $i90: i64;
  var $i91: i64;
  var $i92: i64;
  var $i93: i1;
  var $p94: ref;
  var $i96: i16;
  var $i97: i32;
  var $i98: i32;
  var $i99: i16;
  var $p100: ref;
  var $i101: i8;
  var $i102: i32;
  var $i103: i16;
  var $i104: i16;
  var $i105: i32;
  var $i106: i16;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i24;
  var $i116: i24;
  var $i117: i24;
  var $p118: ref;
  var $p119: ref;
  var $i120: i8;
  var $i121: i64;
  var $i122: i64;
  var $i123: i64;
  var $i124: i1;
  var $p125: ref;
  var $i126: i16;
  var $i127: i32;
  var $i128: i32;
  var $i129: i16;
  var $p130: ref;
  var $i131: i8;
  var $i132: i32;
  var $i133: i16;
  var $i134: i16;
  var $i135: i32;
  var $i136: i16;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i24;
  var $i146: i24;
  var $i147: i24;
  var $p148: ref;
  var $p149: ref;
  var $i150: i8;
  var $i151: i64;
  var $i152: i64;
  var $i153: i64;
  var $i154: i1;
  var $p155: ref;
  var $p156: ref;
  var $i157: i8;
  var $i158: i32;
  var $i159: i16;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $i168: i24;
  var $i169: i24;
  var $i170: i24;
  var $p171: ref;
  var $p172: ref;
  var $i173: i8;
  var $i174: i64;
  var $i175: i64;
  var $i176: i64;
  var $i177: i1;
  var $p178: ref;
  var $i179: i16;
  var $i180: i32;
  var $i181: i32;
  var $i182: i16;
  var $i183: i16;
  var $i184: i32;
  var $i185: i32;
  var $i186: i16;
  var $p187: ref;
  var $i188: i8;
  var $i189: i32;
  var $i190: i16;
  var $i191: i16;
  var $i192: i32;
  var $i193: i16;
  var $i194: i32;
  var $i195: i1;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $i202: i24;
  var $i203: i24;
  var $i204: i24;
  var $p205: ref;
  var $p206: ref;
  var $i207: i8;
  var $i208: i64;
  var $i209: i64;
  var $i210: i64;
  var $i211: i1;
  var $p212: ref;
  var $i213: i16;
  var $i214: i32;
  var $i215: i16;
  var $i216: i32;
  var $i217: i1;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $i224: i24;
  var $i225: i24;
  var $i226: i24;
  var $p227: ref;
  var $p228: ref;
  var $i229: i8;
  var $i230: i64;
  var $i231: i64;
  var $i232: i64;
  var $i233: i1;
  var $p234: ref;
  var $i235: i16;
  var $i236: i32;
  var $i237: i16;
  var $i238: i32;
  var $i239: i1;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $i246: i24;
  var $i247: i24;
  var $i248: i24;
  var $p249: ref;
  var $p250: ref;
  var $i251: i8;
  var $i252: i64;
  var $i253: i64;
  var $i254: i64;
  var $i255: i1;
  var $p256: ref;
  var $i257: i16;
  var $i258: i32;
  var $i259: i16;
  var $i260: i32;
  var $i261: i1;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $i268: i24;
  var $i269: i24;
  var $i270: i24;
  var $p271: ref;
  var $p272: ref;
  var $i273: i8;
  var $i274: i64;
  var $i275: i64;
  var $i276: i64;
  var $i277: i1;
  var $p278: ref;
  var $i279: i16;
  var $i280: i32;
  var $i281: i16;
  var $i282: i32;
  var $i283: i16;
  var $i284: i8;
  var $p285: ref;
  var $i286: i16;
  var $i287: i32;
  var $i288: i16;
  var $i289: i32;
  var $i290: i16;
  var $i291: i8;
  var $p292: ref;
  var $i293: i32;
  var $i294: i16;
  var $i295: i8;
  var $p296: ref;
  var $i297: i16;
  var $i298: i32;
  var $i299: i32;
  var $i300: i16;
  var $i301: i16;
  var $i302: i32;
  var $i303: i16;
  var $i304: i32;
  var $i305: i16;
  var $i306: i32;
  var $i307: i16;
  var $i308: i32;
  var $i309: i16;
  var $i310: i32;
  var $i311: i16;
  var $i312: i32;
  var $i313: i32;
  var $i314: i16;
  var $i315: i32;
  var $i316: i32;
  var $i317: i16;
  var $i318: i16;
  var $i319: i32;
  var $i320: i16;
  var $i321: i32;
  var $i322: i16;
  var $i323: i8;
  var $p324: ref;
  var $p325: ref;
  var $i326: i8;
  var $i327: i32;
  var $i328: i16;
  var $i329: i32;
  var $i330: i16;
  var $i331: i32;
  var $i332: i32;
  var $i333: i16;
  var $p334: ref;
  var $i335: i8;
  var $i336: i32;
  var $i337: i16;
  var $i338: i16;
  var $i339: i32;
  var $i340: i16;
  var $i341: i32;
  var $i342: i16;
  var $i343: i32;
  var $i344: i32;
  var $i345: i16;
  var $p346: ref;
  var $i347: i8;
  var $i348: i32;
  var $i349: i16;
  var $i350: i16;
  var $i351: i32;
  var $i352: i16;
  var $i353: i32;
  var $i354: i16;
  var $i355: i32;
  var $i356: i16;
  var $i357: i32;
  var $p358: ref;
  var $i359: i8;
  var $i360: i32;
  var $i361: i16;
  var $i362: i32;
  var $i363: i16;
  var $i364: i32;
  var $i365: i32;
  var $i366: i16;
  var $p367: ref;
  var $i368: i8;
  var $i369: i32;
  var $i370: i16;
  var $i371: i16;
  var $i372: i32;
  var $i373: i16;
  var $i374: i32;
  var $p375: ref;
  var $i376: i8;
  var $i377: i32;
  var $i378: i16;
  var $i379: i32;
  var $i380: i16;
  var $i381: i32;
  var $i382: i32;
  var $i383: i16;
  var $p384: ref;
  var $i385: i8;
  var $i386: i32;
  var $i387: i16;
  var $i388: i16;
  var $i389: i32;
  var $i390: i16;
  var $i391: i32;
  var $p392: ref;
  var $i393: i8;
  var $i394: i32;
  var $i395: i1;
  var $p397: ref;
  var $p398: ref;
  var $p399: ref;
  var $p400: ref;
  var $i401: i64;
  var $i402: i1;
  var $p403: ref;
  var $p404: ref;
  var $p406: ref;
  var $p407: ref;
  var $p408: ref;
  var $i409: i8;
  var $i410: i32;
  var $i411: i32;
  var $p413: ref;
  var $p414: ref;
  var $p415: ref;
  var $p416: ref;
  var $p417: ref;
  var $p418: ref;
  var $i419: i32;
  var $p421: ref;
  var $p422: ref;
  var $p423: ref;
  var $p424: ref;
  var $p426: ref;
  var $p427: ref;
  var $p428: ref;
  var $p429: ref;
  var $p430: ref;
  var $i431: i32;
  var $p432: ref;
  var $p434: ref;
  var $p435: ref;
  var $p436: ref;
  var $p437: ref;
  var $p438: ref;
  var $i439: i32;
  var $p441: ref;
  var $p442: ref;
  var $p443: ref;
  var $p444: ref;
  var $i445: i32;
  var $i446: i1;
  var $p447: ref;
  var $p448: ref;
  var $p449: ref;
  var $p450: ref;
  var $p451: ref;
  var $p452: ref;
  var $p453: ref;
  var $i454: i24;
  var $i455: i24;
  var $i456: i24;
  var $p457: ref;
  var $p458: ref;
  var $i459: i8;
  var $i460: i64;
  var $i461: i64;
  var $i462: i64;
  var $i463: i1;
  var $p464: ref;
  var $p465: ref;
  var $i466: i8;
  var $i467: i32;
  var $p468: ref;
  var $p469: ref;
  var $p470: ref;
  var $p471: ref;
  var $p472: ref;
  var $p473: ref;
  var $i474: i24;
  var $i475: i24;
  var $i476: i24;
  var $p477: ref;
  var $p478: ref;
  var $i479: i8;
  var $i480: i64;
  var $i481: i64;
  var $i482: i64;
  var $i483: i1;
  var $p484: ref;
  var $p485: ref;
  var $i486: i32;
  var $p487: ref;
  var $p488: ref;
  var $p489: ref;
  var $p490: ref;
  var $p491: ref;
  var $p492: ref;
  var $i493: i24;
  var $i494: i24;
  var $i495: i24;
  var $p496: ref;
  var $p497: ref;
  var $i498: i8;
  var $i499: i64;
  var $i500: i64;
  var $i501: i64;
  var $i502: i1;
  var $p503: ref;
  var $p504: ref;
  var $i505: i8;
  var $i506: i32;
  var $p507: ref;
  var $p508: ref;
  var $p509: ref;
  var $p510: ref;
  var $p511: ref;
  var $p512: ref;
  var $i513: i24;
  var $i514: i24;
  var $i515: i24;
  var $p516: ref;
  var $p517: ref;
  var $i518: i8;
  var $i519: i64;
  var $i520: i64;
  var $i521: i64;
  var $i522: i1;
  var $p523: ref;
  var $p524: ref;
  var $i525: i8;
  var $i526: i32;
  var $p527: ref;
  var $p528: ref;
  var $p529: ref;
  var $p530: ref;
  var $p531: ref;
  var $p532: ref;
  var $i533: i24;
  var $i534: i24;
  var $i535: i24;
  var $p536: ref;
  var $p537: ref;
  var $i538: i8;
  var $i539: i64;
  var $i540: i64;
  var $i541: i64;
  var $i542: i1;
  var $p543: ref;
  var $p544: ref;
  var $i545: i8;
  var $i546: i32;
  var $p547: ref;
  var $p548: ref;
  var $p549: ref;
  var $p550: ref;
  var $p551: ref;
  var $p552: ref;
  var $i553: i24;
  var $i554: i24;
  var $i555: i24;
  var $p556: ref;
  var $p557: ref;
  var $i558: i8;
  var $i559: i64;
  var $i560: i64;
  var $i561: i64;
  var $i562: i1;
  var $p563: ref;
  var $p564: ref;
  var $i565: i32;
  var $p566: ref;
  var $p567: ref;
  var $p568: ref;
  var $p569: ref;
  var $i570: i8;
  var $i571: i32;
  var $i572: i1;
  var $p573: ref;
  var $i574: i8;
  var $i575: i32;
  var $i576: i32;
  var $i577: i1;
  var $p578: ref;
  var $p579: ref;
  var $p580: ref;
  var $i581: i8;
  var $i582: i32;
  var $i583: i32;
  var $i584: i32;
  var $p585: ref;
  var $p586: ref;
  var $p587: ref;
  var $p588: ref;
  var $i589: i32;
  var $p590: ref;
  var $p591: ref;
  var $p592: ref;
  var $p593: ref;
  var $p594: ref;
  var $i595: i32;
  var $p596: ref;
  var $p597: ref;
  var $p598: ref;
  var $p599: ref;
  var $i600: i8;
  var $i601: i32;
  var $i602: i32;
  var $p603: ref;
  var $p604: ref;
  var $p605: ref;
  var $p606: ref;
  var $i607: i32;
  var $p608: ref;
  var $p609: ref;
  var $p610: ref;
  var $p611: ref;
  var $p612: ref;
  var $i613: i32;
  var $p614: ref;
  var $p615: ref;
  var $p616: ref;
  var $p617: ref;
  var $p618: ref;
  var $p619: ref;
  var $p620: ref;
  var $i621: i24;
  var $i622: i24;
  var $i623: i24;
  var $p624: ref;
  var $p625: ref;
  var $i626: i8;
  var $i627: i64;
  var $i628: i64;
  var $i629: i64;
  var $i630: i1;
  var $p631: ref;
  var $p632: ref;
  var $i633: i8;
  var $i634: i32;
  var $p635: ref;
  var $p636: ref;
  var $p637: ref;
  var $i638: i32;
  var $i639: i1;
  var $p640: ref;
  var $p641: ref;
  var $p642: ref;
  var $p643: ref;
  var $i95: i32;
  var $p645: ref;
  var $p646: ref;
  var $i647: i64;
  var $i648: i1;
  var $p649: ref;
  var $p650: ref;
  var $i20: i32;
  var $p652: ref;
  var $p653: ref;
  var $i654: i64;
  var $i655: i1;
  var $p656: ref;
  var $p657: ref;
  var $p659: ref;
  var $p660: ref;
  var $i661: i64;
  var $i662: i1;
  var $p663: ref;
  var $p664: ref;
  var $p666: ref;
  var $p667: ref;
  var $i668: i64;
  var $i669: i1;
  var $p670: ref;
  var $p671: ref;
  var $p673: ref;
  var $p674: ref;
  var $i675: i64;
  var $i676: i1;
  var $p677: ref;
  var $p678: ref;
  var $p680: ref;
  var $p681: ref;
  var $i682: i64;
  var $i683: i1;
  var $p684: ref;
  var $p685: ref;
  var $p687: ref;
  var $p688: ref;
  var $i689: i64;
  var $i690: i1;
  var $p691: ref;
  var $p692: ref;
  var $p694: ref;
  var $p695: ref;
  var $i696: i64;
  var $i697: i1;
  var $p698: ref;
  var $p699: ref;
  var $p701: ref;
  var $p702: ref;
  var $i703: i64;
  var $i704: i1;
  var $p705: ref;
  var $p706: ref;
  var $p708: ref;
  var $p709: ref;
  var $i710: i64;
  var $i711: i1;
  var $p712: ref;
  var $p713: ref;
  var $p715: ref;
  var $p716: ref;
  var $i717: i64;
  var $i718: i1;
  var $p719: ref;
  var $p720: ref;
  var $p722: ref;
  var $p723: ref;
  var $i724: i64;
  var $i725: i1;
  var $p726: ref;
  var $p727: ref;
  var $p729: ref;
  var $p730: ref;
  var $i731: i64;
  var $i732: i1;
  var $p733: ref;
  var $p734: ref;
  var $p736: ref;
  var $p737: ref;
  var $i738: i64;
  var $i739: i1;
  var $p740: ref;
  var $p741: ref;
  var $p743: ref;
  var $p744: ref;
  var $i745: i64;
  var $i746: i1;
  var $p747: ref;
  var $p748: ref;
  var $p750: ref;
  var $p751: ref;
  var $i752: i64;
  var $i753: i1;
  var $p754: ref;
  var $p755: ref;
  var vslice_dummy_var_16: i32;
  var vslice_dummy_var_17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $p14 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $p15 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $p16 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $p17 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $i18 := mos7840_port_paranoia_check($p1, .str.50);
    call {:si_unique_call 205} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $i23 := mos7840_serial_paranoia_check($p22, .str.50);
    call {:si_unique_call 207} {:cexpr "tmp___0"} boogie_si_record_i32($i23);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $p25 := mos7840_get_port_private($p1);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $p29 := mos7840_get_port_private($p28);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p25);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i31 == 1);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p29);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p22, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} vslice_dummy_var_16 := usb_clear_halt($p35, $i39);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p22, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1200, 1));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} vslice_dummy_var_17 := usb_clear_halt($p42, $i46);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p29, $mul.ref(0, 584)), $mul.ref(27, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i50 := $sext.i8.i32($i49);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i50, 1);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p29, $mul.ref(0, 584)), $mul.ref(27, 1));
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, $i52);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i54 := 0;
    goto $bb14;

  $bb14:
    call $p55, $i56, $p58, $i59, $i60, $p61, $p62, $p63, $p64, $i65, $i66, $i67, $p69, $i70, $i71, $i54 := mos7840_open_loop_$bb14($p25, $p55, $i56, $p58, $i59, $i60, $p61, $p62, $p63, $p64, $i65, $i66, $i67, $p69, $i70, $i71, $i54);
    goto $bb14_last;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $p55 := ldv_usb_alloc_urb_29(0, 208);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i54);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref($i56, 8));
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p58, $p55);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p55);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i59, 0);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $p61 := kmalloc(32, 208);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p55, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, $p61);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p55, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i66 := $eq.i64($i65, 0);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i54, 1);
    call {:si_unique_call 213} {:cexpr "j"} boogie_si_record_i32($i70);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i71 := $sle.i32($i70, 15);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, 0);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(40, 1));
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i16($i74);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} $i76 := mos7840_get_reg_sync($p1, $i75, $p2);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 217} {:cexpr "status"} boogie_si_record_i32($i76);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i76, 0);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i96 := $load.i16($M.7, $p2);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i97 := $zext.i16.i32($i96);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i98 := $or.i32($i97, 128);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i16($i98);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, $i99);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(40, 1));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.0, $p100);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i16($i102);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i104 := $load.i16($M.7, $p2);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i105 := $zext.i16.i32($i104);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i32.i16($i105);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $i107 := mos7840_set_reg_sync($p1, $i103, $i106);
    call {:si_unique_call 222} {:cexpr "status"} boogie_si_record_i32($i107);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i107, 0);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i126 := $load.i16($M.7, $p2);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i127 := $zext.i16.i32($i126);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i128 := $and.i32($i127, 65407);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i32.i16($i128);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, $i129);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(40, 1));
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.0, $p130);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i32.i16($i132);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i134 := $load.i16($M.7, $p2);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i135 := $zext.i16.i32($i134);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i32.i16($i135);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $i137 := mos7840_set_reg_sync($p1, $i133, $i136);
    call {:si_unique_call 227} {:cexpr "status"} boogie_si_record_i32($i137);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i138 := $slt.i32($i137, 0);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, 0);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(41, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.0, $p156);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i32($i157);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i159 := $trunc.i32.i16($i158);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} $i160 := mos7840_get_reg_sync($p1, $i159, $p2);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 232} {:cexpr "status"} boogie_si_record_i32($i160);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i161 := $slt.i32($i160, 0);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i179 := $load.i16($M.7, $p2);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i180 := $zext.i16.i32($i179);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i181 := $or.i32($i180, 8);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i182 := $trunc.i32.i16($i181);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, $i182);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i183 := $load.i16($M.7, $p2);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i184 := $zext.i16.i32($i183);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i185 := $or.i32($i184, 32);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i186 := $trunc.i32.i16($i185);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, $i186);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(41, 1));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i188 := $load.i8($M.0, $p187);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i189 := $zext.i8.i32($i188);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i190 := $trunc.i32.i16($i189);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i191 := $load.i16($M.7, $p2);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i192 := $zext.i16.i32($i191);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i193 := $trunc.i32.i16($i192);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $i194 := mos7840_set_reg_sync($p1, $i190, $i193);
    call {:si_unique_call 237} {:cexpr "status"} boogie_si_record_i32($i194);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i195 := $slt.i32($i194, 0);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i195} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, 0);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i213 := $load.i16($M.7, $p2);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i214 := $zext.i16.i32($i213);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i215 := $trunc.i32.i16($i214);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $i216 := mos7840_set_uart_reg($p1, 1, $i215);
    call {:si_unique_call 242} {:cexpr "status"} boogie_si_record_i32($i216);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i217 := $slt.i32($i216, 0);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i217} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, 0);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i235 := $load.i16($M.7, $p2);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i236 := $zext.i16.i32($i235);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i237 := $trunc.i32.i16($i236);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $i238 := mos7840_set_uart_reg($p1, 2, $i237);
    call {:si_unique_call 247} {:cexpr "status"} boogie_si_record_i32($i238);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i239 := $slt.i32($i238, 0);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i239} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, 207);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i257 := $load.i16($M.7, $p2);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i258 := $zext.i16.i32($i257);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i259 := $trunc.i32.i16($i258);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $i260 := mos7840_set_uart_reg($p1, 2, $i259);
    call {:si_unique_call 252} {:cexpr "status"} boogie_si_record_i32($i260);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i261 := $slt.i32($i260, 0);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i261} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, 3);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i279 := $load.i16($M.7, $p2);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i280 := $zext.i16.i32($i279);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i281 := $trunc.i32.i16($i280);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $i282 := mos7840_set_uart_reg($p1, 3, $i281);
    call {:si_unique_call 257} {:cexpr "status"} boogie_si_record_i32($i282);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i283 := $load.i16($M.7, $p2);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i284 := $trunc.i16.i8($i283);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(24, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p285, $i284);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, 11);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i286 := $load.i16($M.7, $p2);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i287 := $zext.i16.i32($i286);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i288 := $trunc.i32.i16($i287);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $i289 := mos7840_set_uart_reg($p1, 4, $i288);
    call {:si_unique_call 259} {:cexpr "status"} boogie_si_record_i32($i289);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i290 := $load.i16($M.7, $p2);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i291 := $trunc.i16.i8($i290);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(25, 1));
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p292, $i291);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, 0);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $i293 := mos7840_get_uart_reg($p1, 3, $p2);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 261} {:cexpr "status"} boogie_si_record_i32($i293);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i294 := $load.i16($M.7, $p2);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i295 := $trunc.i16.i8($i294);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(24, 1));
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p296, $i295);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i297 := $load.i16($M.7, $p2);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i298 := $zext.i16.i32($i297);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i299 := $or.i32($i298, 128);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i300 := $trunc.i32.i16($i299);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, $i300);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i301 := $load.i16($M.7, $p2);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i302 := $zext.i16.i32($i301);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i303 := $trunc.i32.i16($i302);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $i304 := mos7840_set_uart_reg($p1, 3, $i303);
    call {:si_unique_call 263} {:cexpr "status"} boogie_si_record_i32($i304);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, 12);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i305 := $load.i16($M.7, $p2);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i306 := $zext.i16.i32($i305);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i307 := $trunc.i32.i16($i306);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $i308 := mos7840_set_uart_reg($p1, 0, $i307);
    call {:si_unique_call 265} {:cexpr "status"} boogie_si_record_i32($i308);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, 0);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i309 := $load.i16($M.7, $p2);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i310 := $zext.i16.i32($i309);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i311 := $trunc.i32.i16($i310);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $i312 := mos7840_set_uart_reg($p1, 1, $i311);
    call {:si_unique_call 267} {:cexpr "status"} boogie_si_record_i32($i312);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, 0);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $i313 := mos7840_get_uart_reg($p1, 3, $p2);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 269} {:cexpr "status"} boogie_si_record_i32($i313);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i314 := $load.i16($M.7, $p2);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i315 := $zext.i16.i32($i314);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i316 := $and.i32($i315, 65407);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i317 := $trunc.i32.i16($i316);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, $i317);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i318 := $load.i16($M.7, $p2);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i319 := $zext.i16.i32($i318);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i320 := $trunc.i32.i16($i319);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $i321 := mos7840_set_uart_reg($p1, 3, $i320);
    call {:si_unique_call 271} {:cexpr "status"} boogie_si_record_i32($i321);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i322 := $load.i16($M.7, $p2);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i323 := $trunc.i16.i8($i322);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(24, 1));
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p324, $i323);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, 0);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(40, 1));
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i326 := $load.i8($M.0, $p325);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i327 := $zext.i8.i32($i326);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i328 := $trunc.i32.i16($i327);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $i329 := mos7840_get_reg_sync($p1, $i328, $p2);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 273} {:cexpr "status"} boogie_si_record_i32($i329);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i330 := $load.i16($M.7, $p2);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i331 := $zext.i16.i32($i330);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i332 := $or.i32($i331, 12);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i333 := $trunc.i32.i16($i332);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, $i333);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(40, 1));
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i335 := $load.i8($M.0, $p334);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i336 := $zext.i8.i32($i335);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i337 := $trunc.i32.i16($i336);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i338 := $load.i16($M.7, $p2);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i339 := $zext.i16.i32($i338);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i340 := $trunc.i32.i16($i339);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $i341 := mos7840_set_reg_sync($p1, $i337, $i340);
    call {:si_unique_call 275} {:cexpr "status"} boogie_si_record_i32($i341);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i342 := $load.i16($M.7, $p2);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i343 := $zext.i16.i32($i342);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i344 := $and.i32($i343, 65523);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i345 := $trunc.i32.i16($i344);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, $i345);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(40, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i347 := $load.i8($M.0, $p346);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i348 := $zext.i8.i32($i347);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i349 := $trunc.i32.i16($i348);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i350 := $load.i16($M.7, $p2);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i351 := $zext.i16.i32($i350);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i352 := $trunc.i32.i16($i351);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i353 := mos7840_set_reg_sync($p1, $i349, $i352);
    call {:si_unique_call 277} {:cexpr "status"} boogie_si_record_i32($i353);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, 12);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i354 := $load.i16($M.7, $p2);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i355 := $zext.i16.i32($i354);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i356 := $trunc.i32.i16($i355);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i357 := mos7840_set_uart_reg($p1, 1, $i356);
    call {:si_unique_call 279} {:cexpr "status"} boogie_si_record_i32($i357);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, 0);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(41, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i359 := $load.i8($M.0, $p358);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i360 := $zext.i8.i32($i359);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i361 := $trunc.i32.i16($i360);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i362 := mos7840_get_reg_sync($p1, $i361, $p2);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 281} {:cexpr "status"} boogie_si_record_i32($i362);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i363 := $load.i16($M.7, $p2);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i364 := $zext.i16.i32($i363);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i365 := $and.i32($i364, 65503);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i366 := $trunc.i32.i16($i365);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, $i366);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(41, 1));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i368 := $load.i8($M.0, $p367);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i369 := $zext.i8.i32($i368);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i370 := $trunc.i32.i16($i369);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i371 := $load.i16($M.7, $p2);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i372 := $zext.i16.i32($i371);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i373 := $trunc.i32.i16($i372);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i374 := mos7840_set_reg_sync($p1, $i370, $i373);
    call {:si_unique_call 283} {:cexpr "status"} boogie_si_record_i32($i374);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, 0);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(41, 1));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i376 := $load.i8($M.0, $p375);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i377 := $zext.i8.i32($i376);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i378 := $trunc.i32.i16($i377);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $i379 := mos7840_get_reg_sync($p1, $i378, $p2);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 285} {:cexpr "status"} boogie_si_record_i32($i379);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i380 := $load.i16($M.7, $p2);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i381 := $zext.i16.i32($i380);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i382 := $or.i32($i381, 16);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i383 := $trunc.i32.i16($i382);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, $i383);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(41, 1));
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i385 := $load.i8($M.0, $p384);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i386 := $zext.i8.i32($i385);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i387 := $trunc.i32.i16($i386);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i388 := $load.i16($M.7, $p2);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i389 := $zext.i16.i32($i388);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i390 := $trunc.i32.i16($i389);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i391 := mos7840_set_reg_sync($p1, $i387, $i390);
    call {:si_unique_call 287} {:cexpr "status"} boogie_si_record_i32($i391);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p29, $mul.ref(0, 584)), $mul.ref(27, 1));
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i393 := $load.i8($M.0, $p392);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i394 := $sext.i8.i32($i393);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i395 := $eq.i32($i394, 1);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i395} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i395 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p448, .str);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p449, .str.50);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p450, .str.2);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p451, .str.58);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p453 := $bitcast.ref.ref($p452);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i454 := $load.i24($M.5, $p453);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i455 := $and.i24($i454, $sub.i24(0, 262144));
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i456 := $or.i24($i455, 1059);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p453, $i456);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p457, 0);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i459 := $load.i8($M.6, $p458);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i460 := $zext.i8.i64($i459);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i461 := $and.i64($i460, 1);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $i462 := ldv__builtin_expect($i461, 0);
    call {:si_unique_call 295} {:cexpr "tmp___10"} boogie_si_record_i64($i462);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i463 := $ne.i64($i462, 0);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i463} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i463 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p468 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p468, .str);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p469, .str.50);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p470, .str.2);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p471, .str.59);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p473 := $bitcast.ref.ref($p472);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i474 := $load.i24($M.5, $p473);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i475 := $and.i24($i474, $sub.i24(0, 262144));
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i476 := $or.i24($i475, 1060);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p473, $i476);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p477, 0);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p478 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i479 := $load.i8($M.6, $p478);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i480 := $zext.i8.i64($i479);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i481 := $and.i64($i480, 1);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $i482 := ldv__builtin_expect($i481, 0);
    call {:si_unique_call 298} {:cexpr "tmp___11"} boogie_si_record_i64($i482);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i483 := $ne.i64($i482, 0);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i483} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i483 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p487 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p487, .str);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p488, .str.50);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p489, .str.2);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p490, .str.60);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p492 := $bitcast.ref.ref($p491);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i493 := $load.i24($M.5, $p492);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i494 := $and.i24($i493, $sub.i24(0, 262144));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i495 := $or.i24($i494, 1061);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p492, $i495);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p496, 0);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i498 := $load.i8($M.6, $p497);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i499 := $zext.i8.i64($i498);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i500 := $and.i64($i499, 1);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i501 := ldv__builtin_expect($i500, 0);
    call {:si_unique_call 301} {:cexpr "tmp___12"} boogie_si_record_i64($i501);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i502 := $ne.i64($i501, 0);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    assume {:branchcond $i502} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i502 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p507, .str);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p508, .str.50);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p509, .str.2);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p510 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p510, .str.61);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p512 := $bitcast.ref.ref($p511);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i513 := $load.i24($M.5, $p512);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i514 := $and.i24($i513, $sub.i24(0, 262144));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i515 := $or.i24($i514, 1062);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p512, $i515);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p516, 0);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i518 := $load.i8($M.6, $p517);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i519 := $zext.i8.i64($i518);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i520 := $and.i64($i519, 1);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $i521 := ldv__builtin_expect($i520, 0);
    call {:si_unique_call 304} {:cexpr "tmp___13"} boogie_si_record_i64($i521);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i522 := $ne.i64($i521, 0);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    assume {:branchcond $i522} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i522 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p527, .str);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p528 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p528, .str.50);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p529, .str.2);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p530, .str.62);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p532 := $bitcast.ref.ref($p531);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i533 := $load.i24($M.5, $p532);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i534 := $and.i24($i533, $sub.i24(0, 262144));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i535 := $or.i24($i534, 1063);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p532, $i535);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p536 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p536, 0);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i538 := $load.i8($M.6, $p537);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i539 := $zext.i8.i64($i538);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i540 := $and.i64($i539, 1);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $i541 := ldv__builtin_expect($i540, 0);
    call {:si_unique_call 307} {:cexpr "tmp___14"} boogie_si_record_i64($i541);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i542 := $ne.i64($i541, 0);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    assume {:branchcond $i542} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i542 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p547, .str);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p548 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p548, .str.50);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p549, .str.2);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p550 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p550, .str.63);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p552 := $bitcast.ref.ref($p551);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i553 := $load.i24($M.5, $p552);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i554 := $and.i24($i553, $sub.i24(0, 262144));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i555 := $or.i24($i554, 1064);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p552, $i555);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p556, 0);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i558 := $load.i8($M.6, $p557);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i559 := $zext.i8.i64($i558);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i560 := $and.i64($i559, 1);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $i561 := ldv__builtin_expect($i560, 0);
    call {:si_unique_call 310} {:cexpr "tmp___15"} boogie_si_record_i64($i561);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i562 := $ne.i64($i561, 0);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    assume {:branchcond $i562} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i562 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p566 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1200, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p567 := $load.ref($M.0, $p566);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p568 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(16, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p568, $p567);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref($p22, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i570 := $load.i8($M.0, $p569);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i571 := $zext.i8.i32($i570);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i572 := $eq.i32($i571, 2);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    assume {:branchcond $i572} true;
    goto $bb102, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i572 == 1);
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p597 := $add.ref($add.ref($p22, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p598 := $load.ref($M.0, $p597);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p599 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1208, 1));
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i600 := $load.i8($M.0, $p599);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i601 := $zext.i8.i32($i600);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $i602 := __create_pipe($p598, $i601);
    call {:si_unique_call 313} {:cexpr "tmp___17"} boogie_si_record_i32($i602);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(16, 1));
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p604 := $load.ref($M.0, $p603);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p605 := $add.ref($add.ref($p22, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p606 := $load.ref($M.0, $p605);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i607 := $or.i32($i602, $sub.i32(0, 1073741696));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p608 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1184, 1));
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p609 := $load.ref($M.0, $p608);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p610 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(16, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p611 := $load.ref($M.0, $p610);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p612 := $add.ref($add.ref($p611, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i613 := $load.i32($M.0, $p612);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p614 := $bitcast.ref.ref($p25);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} usb_fill_bulk_urb($p604, $p606, $i607, $p609, $i613, mos7840_bulk_in_callback, $p614);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p615 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p615, .str);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p616 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p616, .str.50);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p617 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p617, .str.2);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p618 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p618, .str.64);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p619 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p620 := $bitcast.ref.ref($p619);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i621 := $load.i24($M.5, $p620);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i622 := $and.i24($i621, $sub.i24(0, 262144));
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i623 := $or.i24($i622, 1086);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p620, $i623);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p624 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p624, 0);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p625 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i626 := $load.i8($M.6, $p625);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i627 := $zext.i8.i64($i626);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i628 := $and.i64($i627, 1);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i629 := ldv__builtin_expect($i628, 0);
    call {:si_unique_call 319} {:cexpr "tmp___18"} boogie_si_record_i64($i629);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i630 := $ne.i64($i629, 0);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i630} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i630 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p635 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(296, 1));
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p635, 1);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p636 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(16, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p637 := $load.ref($M.0, $p636);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $i638 := ldv_usb_submit_urb_31($p637, 208);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    call {:si_unique_call 322} {:cexpr "response"} boogie_si_record_i32($i638);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i639 := $ne.i32($i638, 0);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i639} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i639 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p642 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(25, 1));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p642, 8);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $p643 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(26, 1));
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p643, 1);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb111:
    assume $i639 == 1;
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p640 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} dev_err.ref.ref.ref.i32($p640, .str.65, .str.50, $i638);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(296, 1));
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p641, 0);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    goto $bb113;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb108:
    assume $i630 == 1;
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p631 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p632 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1208, 1));
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i633 := $load.i8($M.0, $p632);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i634 := $zext.i8.i32($i633);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p17, $p631, .str.64, .str.50, $i634);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb102:
    assume $i572 == 1;
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i574 := $load.i8($M.0, $p573);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i575 := $zext.i8.i32($i574);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i576 := $and.i32($i575, 1);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i577 := $ne.i32($i576, 0);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i577} true;
    goto $bb105, $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume !($i577 == 1);
    goto $bb104;

  $bb105:
    assume $i577 == 1;
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($add.ref($p22, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p579 := $load.ref($M.0, $p578);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p580 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1208, 1));
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i581 := $load.i8($M.0, $p580);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i582 := $zext.i8.i32($i581);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i583 := $add.i32($i582, 2);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $i584 := __create_pipe($p579, $i583);
    call {:si_unique_call 316} {:cexpr "tmp___16"} boogie_si_record_i32($i584);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(16, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p586 := $load.ref($M.0, $p585);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p587 := $add.ref($add.ref($p22, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p588 := $load.ref($M.0, $p587);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i589 := $or.i32($i584, $sub.i32(0, 1073741696));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p590 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1184, 1));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p591 := $load.ref($M.0, $p590);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p592 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(16, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p593 := $load.ref($M.0, $p592);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p594 := $add.ref($add.ref($p593, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i595 := $load.i32($M.0, $p594);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p596 := $bitcast.ref.ref($p25);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} usb_fill_bulk_urb($p586, $p588, $i589, $p591, $i595, mos7840_bulk_in_callback, $p596);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb99:
    assume $i562 == 1;
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p563 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p564 := $add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(0, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i565 := $load.i32($M.0, $p564);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} __dynamic_dev_dbg.ref.ref.ref.i32($p16, $p563, .str.63, $i565);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb96:
    assume $i542 == 1;
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p544 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1144, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i545 := $load.i8($M.0, $p544);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i546 := $zext.i8.i32($i545);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} __dynamic_dev_dbg.ref.ref.ref.i32($p15, $p543, .str.62, $i546);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb93:
    assume $i522 == 1;
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p524 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1344, 1));
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i525 := $load.i8($M.0, $p524);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i526 := $zext.i8.i32($i525);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} __dynamic_dev_dbg.ref.ref.ref.i32($p14, $p523, .str.61, $i526);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb90:
    assume $i502 == 1;
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p504 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1208, 1));
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i505 := $load.i8($M.0, $p504);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i506 := $zext.i8.i32($i505);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} __dynamic_dev_dbg.ref.ref.ref.i32($p13, $p503, .str.60, $i506);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb87:
    assume $i483 == 1;
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1120, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i486 := $load.i32($M.0, $p485);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} __dynamic_dev_dbg.ref.ref.ref.i32($p12, $p484, .str.59, $i486);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb84:
    assume $i463 == 1;
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p464 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i466 := $load.i8($M.0, $p465);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i467 := $zext.i8.i32($i466);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} __dynamic_dev_dbg.ref.ref.ref.i32($p11, $p464, .str.58, $i467);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb75:
    assume $i395 == 1;
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p398 := $load.ref($M.0, $p397);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($p398, $mul.ref(0, 3016)), $mul.ref(1128, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p400 := $load.ref($M.0, $p399);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i401 := $p2i.ref.i64($p400);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i402 := $eq.i64($i401, 0);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i402} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i402 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb77:
    assume $i402 == 1;
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($p22, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p404 := $load.ref($M.0, $p403);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p407 := $load.ref($M.0, $p406);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($p407, $mul.ref(0, 3016)), $mul.ref(1144, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i409 := $load.i8($M.0, $p408);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i410 := $zext.i8.i32($i409);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $i411 := __create_pipe($p404, $i410);
    call {:si_unique_call 289} {:cexpr "tmp___9"} boogie_si_record_i32($i411);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p414 := $load.ref($M.0, $p413);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($p414, $mul.ref(0, 3016)), $mul.ref(1136, 1));
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p416 := $load.ref($M.0, $p415);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($p22, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p418 := $load.ref($M.0, $p417);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i419 := $or.i32($i411, 1073741952);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p422 := $load.ref($M.0, $p421);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($p422, $mul.ref(0, 3016)), $mul.ref(1128, 1));
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p424 := $load.ref($M.0, $p423);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p427 := $load.ref($M.0, $p426);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($p427, $mul.ref(0, 3016)), $mul.ref(1136, 1));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $p429 := $load.ref($M.0, $p428);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($p429, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i431 := $load.i32($M.0, $p430);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p432 := $bitcast.ref.ref($p22);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p435 := $load.ref($M.0, $p434);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($p435, $mul.ref(0, 3016)), $mul.ref(1136, 1));
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p437 := $load.ref($M.0, $p436);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($p437, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i439 := $load.i32($M.0, $p438);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} usb_fill_int_urb($p416, $p418, $i419, $p424, $i431, mos7840_interrupt_callback, $p432, $i439);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p442 := $load.ref($M.0, $p441);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p442, $mul.ref(0, 3016)), $mul.ref(1136, 1));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p444 := $load.ref($M.0, $p443);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $i445 := ldv_usb_submit_urb_30($p444, 208);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 292} {:cexpr "response"} boogie_si_record_i32($i445);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i446 := $ne.i32($i445, 0);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i446} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i446 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb79:
    assume $i446 == 1;
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} dev_err.ref.ref.ref.i32($p447, .str.57, .str.50, $i445);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    goto $bb81;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb69:
    assume $i261 == 1;
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p262, .str);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p263, .str.50);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p264, .str.2);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p265, .str.56);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p267 := $bitcast.ref.ref($p266);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i268 := $load.i24($M.5, $p267);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i269 := $and.i24($i268, $sub.i24(0, 262144));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i270 := $or.i24($i269, 962);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p267, $i270);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p271, 0);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i273 := $load.i8($M.6, $p272);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i274 := $zext.i8.i64($i273);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i275 := $and.i64($i274, 1);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $i276 := ldv__builtin_expect($i275, 0);
    call {:si_unique_call 254} {:cexpr "tmp___8"} boogie_si_record_i64($i276);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i277 := $ne.i64($i276, 0);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i95 := $i260;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p645 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(0, 8));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p646 := $load.ref($M.0, $p645);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i647 := $p2i.ref.i64($p646);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i648 := $eq.i64($i647, 0);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    assume {:branchcond $i648} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i648 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p649 := $add.ref($add.ref($p646, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p650 := $load.ref($M.0, $p649);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} kfree($p650);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} usb_free_urb($p646);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p652 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(1, 8));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p653 := $load.ref($M.0, $p652);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i654 := $p2i.ref.i64($p653);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i655 := $eq.i64($i654, 0);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i655} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i655 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p656 := $add.ref($add.ref($p653, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p657 := $load.ref($M.0, $p656);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} kfree($p657);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} usb_free_urb($p653);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p659 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(2, 8));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p660 := $load.ref($M.0, $p659);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i661 := $p2i.ref.i64($p660);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i662 := $eq.i64($i661, 0);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    assume {:branchcond $i662} true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i662 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p663 := $add.ref($add.ref($p660, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $p664 := $load.ref($M.0, $p663);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} kfree($p664);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} usb_free_urb($p660);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $p666 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(3, 8));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p667 := $load.ref($M.0, $p666);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i668 := $p2i.ref.i64($p667);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i669 := $eq.i64($i668, 0);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i669} true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i669 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p670 := $add.ref($add.ref($p667, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p671 := $load.ref($M.0, $p670);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} kfree($p671);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} usb_free_urb($p667);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $p673 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(4, 8));
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p674 := $load.ref($M.0, $p673);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i675 := $p2i.ref.i64($p674);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i676 := $eq.i64($i675, 0);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i676} true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i676 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $p677 := $add.ref($add.ref($p674, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p678 := $load.ref($M.0, $p677);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} kfree($p678);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} usb_free_urb($p674);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $p680 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(5, 8));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p681 := $load.ref($M.0, $p680);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i682 := $p2i.ref.i64($p681);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i683 := $eq.i64($i682, 0);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i683} true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i683 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p684 := $add.ref($add.ref($p681, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p685 := $load.ref($M.0, $p684);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} kfree($p685);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} usb_free_urb($p681);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $p687 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(6, 8));
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p688 := $load.ref($M.0, $p687);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i689 := $p2i.ref.i64($p688);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i690 := $eq.i64($i689, 0);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    assume {:branchcond $i690} true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i690 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($add.ref($p688, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p692 := $load.ref($M.0, $p691);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} kfree($p692);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} usb_free_urb($p688);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $p694 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(7, 8));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p695 := $load.ref($M.0, $p694);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i696 := $p2i.ref.i64($p695);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i697 := $eq.i64($i696, 0);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i697} true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i697 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $p698 := $add.ref($add.ref($p695, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p699 := $load.ref($M.0, $p698);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} kfree($p699);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} usb_free_urb($p695);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $p701 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(8, 8));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p702 := $load.ref($M.0, $p701);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i703 := $p2i.ref.i64($p702);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i704 := $eq.i64($i703, 0);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i704} true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i704 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $p705 := $add.ref($add.ref($p702, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p706 := $load.ref($M.0, $p705);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} kfree($p706);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} usb_free_urb($p702);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $p708 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(9, 8));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p709 := $load.ref($M.0, $p708);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i710 := $p2i.ref.i64($p709);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i711 := $eq.i64($i710, 0);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i711} true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i711 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $p712 := $add.ref($add.ref($p709, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p713 := $load.ref($M.0, $p712);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} kfree($p713);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} usb_free_urb($p709);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $p715 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(10, 8));
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p716 := $load.ref($M.0, $p715);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i717 := $p2i.ref.i64($p716);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i718 := $eq.i64($i717, 0);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i718} true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i718 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $p719 := $add.ref($add.ref($p716, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p720 := $load.ref($M.0, $p719);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} kfree($p720);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} usb_free_urb($p716);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $p722 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(11, 8));
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p723 := $load.ref($M.0, $p722);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i724 := $p2i.ref.i64($p723);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i725 := $eq.i64($i724, 0);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i725} true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i725 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $p726 := $add.ref($add.ref($p723, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p727 := $load.ref($M.0, $p726);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} kfree($p727);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} usb_free_urb($p723);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $p729 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(12, 8));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p730 := $load.ref($M.0, $p729);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i731 := $p2i.ref.i64($p730);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i732 := $eq.i64($i731, 0);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    assume {:branchcond $i732} true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i732 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $p733 := $add.ref($add.ref($p730, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p734 := $load.ref($M.0, $p733);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} kfree($p734);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} usb_free_urb($p730);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $p736 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(13, 8));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $p737 := $load.ref($M.0, $p736);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i738 := $p2i.ref.i64($p737);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i739 := $eq.i64($i738, 0);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i739} true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i739 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $p740 := $add.ref($add.ref($p737, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p741 := $load.ref($M.0, $p740);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} kfree($p741);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} usb_free_urb($p737);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $p743 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(14, 8));
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p744 := $load.ref($M.0, $p743);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i745 := $p2i.ref.i64($p744);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i746 := $eq.i64($i745, 0);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i746} true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i746 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $p747 := $add.ref($add.ref($p744, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p748 := $load.ref($M.0, $p747);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} kfree($p748);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} usb_free_urb($p744);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $p750 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(15, 8));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p751 := $load.ref($M.0, $p750);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i752 := $p2i.ref.i64($p751);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i753 := $eq.i64($i752, 0);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i753} true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i753 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $p754 := $add.ref($add.ref($p751, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p755 := $load.ref($M.0, $p754);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} kfree($p755);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} usb_free_urb($p751);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i20 := $i95;
    goto $bb3;

  $bb192:
    assume $i753 == 1;
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb187:
    assume $i746 == 1;
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb182:
    assume $i739 == 1;
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb177:
    assume $i732 == 1;
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb172:
    assume $i725 == 1;
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb167:
    assume $i718 == 1;
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb162:
    assume $i711 == 1;
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb157:
    assume $i704 == 1;
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb152:
    assume $i697 == 1;
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb147:
    assume $i690 == 1;
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb142:
    assume $i683 == 1;
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb137:
    assume $i676 == 1;
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb132:
    assume $i669 == 1;
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb127:
    assume $i662 == 1;
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb122:
    assume $i655 == 1;
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb116:
    assume $i648 == 1;
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb71:
    assume $i277 == 1;
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} __dynamic_dev_dbg.ref.ref.ref($p10, $p278, .str.56);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb63:
    assume $i239 == 1;
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p240, .str);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p241, .str.50);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p242, .str.2);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p243, .str.56);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p245 := $bitcast.ref.ref($p244);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i246 := $load.i24($M.5, $p245);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i247 := $and.i24($i246, $sub.i24(0, 262144));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i248 := $or.i24($i247, 955);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p245, $i248);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p249, 0);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i251 := $load.i8($M.6, $p250);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i252 := $zext.i8.i64($i251);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i253 := $and.i64($i252, 1);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $i254 := ldv__builtin_expect($i253, 0);
    call {:si_unique_call 249} {:cexpr "tmp___7"} boogie_si_record_i64($i254);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i255 := $ne.i64($i254, 0);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i255} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i95 := $i238;
    goto $bb31;

  $bb65:
    assume $i255 == 1;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} __dynamic_dev_dbg.ref.ref.ref($p9, $p256, .str.56);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb57:
    assume $i217 == 1;
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p218, .str);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p219, .str.50);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p220, .str.2);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p221, .str.55);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p222);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i224 := $load.i24($M.5, $p223);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i225 := $and.i24($i224, $sub.i24(0, 262144));
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i226 := $or.i24($i225, 948);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p223, $i226);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p227, 0);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i229 := $load.i8($M.6, $p228);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i230 := $zext.i8.i64($i229);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i231 := $and.i64($i230, 1);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} $i232 := ldv__builtin_expect($i231, 0);
    call {:si_unique_call 244} {:cexpr "tmp___6"} boogie_si_record_i64($i232);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i233 := $ne.i64($i232, 0);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i95 := $i216;
    goto $bb31;

  $bb59:
    assume $i233 == 1;
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} __dynamic_dev_dbg.ref.ref.ref($p8, $p234, .str.55);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb51:
    assume $i195 == 1;
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p196, .str);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p197, .str.50);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p198, .str.2);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p199, .str.54);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p201 := $bitcast.ref.ref($p200);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i202 := $load.i24($M.5, $p201);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i203 := $and.i24($i202, $sub.i24(0, 262144));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i204 := $or.i24($i203, 937);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p201, $i204);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p205, 0);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i207 := $load.i8($M.6, $p206);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i208 := $zext.i8.i64($i207);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i209 := $and.i64($i208, 1);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $i210 := ldv__builtin_expect($i209, 0);
    call {:si_unique_call 239} {:cexpr "tmp___5"} boogie_si_record_i64($i210);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i211 := $ne.i64($i210, 0);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i211} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i95 := $i194;
    goto $bb31;

  $bb53:
    assume $i211 == 1;
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} __dynamic_dev_dbg.ref.ref.ref($p7, $p212, .str.54);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb45:
    assume $i161 == 1;
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p162, .str);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p163, .str.50);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p164, .str.2);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p165, .str.53);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p167 := $bitcast.ref.ref($p166);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i168 := $load.i24($M.5, $p167);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i169 := $and.i24($i168, $sub.i24(0, 262144));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i170 := $or.i24($i169, 929);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p167, $i170);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p171, 0);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i173 := $load.i8($M.6, $p172);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i174 := $zext.i8.i64($i173);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i175 := $and.i64($i174, 1);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $i176 := ldv__builtin_expect($i175, 0);
    call {:si_unique_call 234} {:cexpr "tmp___4"} boogie_si_record_i64($i176);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i177 := $ne.i64($i176, 0);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i95 := $i160;
    goto $bb31;

  $bb47:
    assume $i177 == 1;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} __dynamic_dev_dbg.ref.ref.ref($p6, $p178, .str.53);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    goto $bb49;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i138 == 1;
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p139, .str);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p140, .str.50);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p141, .str.2);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p142, .str.52);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i145 := $load.i24($M.5, $p144);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i146 := $and.i24($i145, $sub.i24(0, 262144));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i147 := $or.i24($i146, 920);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p144, $i147);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p148, 0);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.6, $p149);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i64($i150);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i152 := $and.i64($i151, 1);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $i153 := ldv__builtin_expect($i152, 0);
    call {:si_unique_call 229} {:cexpr "tmp___3"} boogie_si_record_i64($i153);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i154 := $ne.i64($i153, 0);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i95 := $i137;
    goto $bb31;

  $bb41:
    assume $i154 == 1;
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} __dynamic_dev_dbg.ref.ref.ref($p5, $p155, .str.52);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb33:
    assume $i108 == 1;
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p109, .str);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p110, .str.50);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p111, .str.2);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p112, .str.52);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i115 := $load.i24($M.5, $p114);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i116 := $and.i24($i115, $sub.i24(0, 262144));
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i117 := $or.i24($i116, 913);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p114, $i117);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p118, 0);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.6, $p119);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i64($i120);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i122 := $and.i64($i121, 1);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $i123 := ldv__builtin_expect($i122, 0);
    call {:si_unique_call 224} {:cexpr "tmp___2"} boogie_si_record_i64($i123);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i124 := $ne.i64($i123, 0);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i95 := $i107;
    goto $bb31;

  $bb35:
    assume $i124 == 1;
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} __dynamic_dev_dbg.ref.ref.ref($p4, $p125, .str.52);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb26:
    assume $i77 == 1;
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p78, .str);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p79, .str.50);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p80, .str.2);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p81, .str.51);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i84 := $load.i24($M.5, $p83);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i85 := $and.i24($i84, $sub.i24(0, 262144));
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i86 := $or.i24($i85, 907);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p83, $i86);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p87, 0);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.6, $p88);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i64($i89);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i91 := $and.i64($i90, 1);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $i92 := ldv__builtin_expect($i91, 0);
    call {:si_unique_call 219} {:cexpr "tmp___1"} boogie_si_record_i64($i92);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i92, 0);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i95 := $i76;
    goto $bb31;

  $bb28:
    assume $i93 == 1;
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} __dynamic_dev_dbg.ref.ref.ref($p3, $p94, .str.51);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i54 := $i70;
    goto $bb23_dummy;

  $bb20:
    assume $i66 == 1;
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} usb_free_urb($p55);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i54);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref($i67, 8));
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p69, $0.ref);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i60 == 1;
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 19);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb9;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 19);
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1269;
}



const mos7840_close: ref;

axiom mos7840_close == $sub.ref(0, 196602);

procedure mos7840_close($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $CurrAddr;



implementation mos7840_close($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i8;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i24;
  var $i51: i24;
  var $i52: i24;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i24;
  var $i82: i24;
  var $i83: i24;
  var $p84: ref;
  var $p85: ref;
  var $i86: i8;
  var $i87: i64;
  var $i88: i64;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i16;
  var $i110: i32;
  var $i111: i16;
  var $p113: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $i118: i1;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p125: ref;
  var $p126: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i64;
  var $i131: i1;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p138: ref;
  var $p139: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i64;
  var $i144: i1;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p151: ref;
  var $p152: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i64;
  var $i157: i1;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p164: ref;
  var $p165: ref;
  var $p167: ref;
  var $p168: ref;
  var $i169: i64;
  var $i170: i1;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p177: ref;
  var $p178: ref;
  var $p180: ref;
  var $p181: ref;
  var $i182: i64;
  var $i183: i1;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p190: ref;
  var $p191: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: i64;
  var $i196: i1;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p203: ref;
  var $p204: ref;
  var $p206: ref;
  var $p207: ref;
  var $i208: i64;
  var $i209: i1;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p216: ref;
  var $p217: ref;
  var $p219: ref;
  var $p220: ref;
  var $i221: i64;
  var $i222: i1;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p229: ref;
  var $p230: ref;
  var $p232: ref;
  var $p233: ref;
  var $i234: i64;
  var $i235: i1;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p242: ref;
  var $p243: ref;
  var $p245: ref;
  var $p246: ref;
  var $i247: i64;
  var $i248: i1;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p255: ref;
  var $p256: ref;
  var $p258: ref;
  var $p259: ref;
  var $i260: i64;
  var $i261: i1;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $p268: ref;
  var $p269: ref;
  var $p271: ref;
  var $p272: ref;
  var $i273: i64;
  var $i274: i1;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $p281: ref;
  var $p282: ref;
  var $p284: ref;
  var $p285: ref;
  var $i286: i64;
  var $i287: i1;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $p294: ref;
  var $p295: ref;
  var $p297: ref;
  var $p298: ref;
  var $i299: i64;
  var $i300: i1;
  var $p302: ref;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p307: ref;
  var $p308: ref;
  var $p310: ref;
  var $p311: ref;
  var $p313: ref;
  var $p314: ref;
  var $p316: ref;
  var $p317: ref;
  var $p319: ref;
  var $p320: ref;
  var $p322: ref;
  var $p323: ref;
  var $p325: ref;
  var $p326: ref;
  var $p328: ref;
  var $p329: ref;
  var $p331: ref;
  var $p332: ref;
  var $p334: ref;
  var $p335: ref;
  var $p337: ref;
  var $p338: ref;
  var $p340: ref;
  var $p341: ref;
  var $p343: ref;
  var $p344: ref;
  var $p346: ref;
  var $p347: ref;
  var $p349: ref;
  var $p350: ref;
  var $p352: ref;
  var $p353: ref;
  var vslice_dummy_var_18: i32;
  var vslice_dummy_var_19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $i3 := mos7840_port_paranoia_check($p0, .str.122);
    call {:si_unique_call 359} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} $p5 := mos7840_get_usb_serial($p0, .str.122);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $p8 := mos7840_get_port_private($p0);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $p12 := mos7840_get_port_private($p11);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p8);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i14 == 1);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p12);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(0, 8));
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} usb_kill_urb($p19);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(1, 8));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p311 := $load.ref($M.0, $p310);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} usb_kill_urb($p311);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(2, 8));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p314 := $load.ref($M.0, $p313);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} usb_kill_urb($p314);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(3, 8));
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p317 := $load.ref($M.0, $p316);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} usb_kill_urb($p317);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(4, 8));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $p320 := $load.ref($M.0, $p319);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} usb_kill_urb($p320);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(5, 8));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p323 := $load.ref($M.0, $p322);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} usb_kill_urb($p323);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(6, 8));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p326 := $load.ref($M.0, $p325);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} usb_kill_urb($p326);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(7, 8));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p329 := $load.ref($M.0, $p328);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} usb_kill_urb($p329);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(8, 8));
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p332 := $load.ref($M.0, $p331);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} usb_kill_urb($p332);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(9, 8));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p335 := $load.ref($M.0, $p334);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} usb_kill_urb($p335);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(10, 8));
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p338 := $load.ref($M.0, $p337);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} usb_kill_urb($p338);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(11, 8));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p341 := $load.ref($M.0, $p340);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} usb_kill_urb($p341);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(12, 8));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p344 := $load.ref($M.0, $p343);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} usb_kill_urb($p344);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(13, 8));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.0, $p346);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} usb_kill_urb($p347);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(14, 8));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p350 := $load.ref($M.0, $p349);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} usb_kill_urb($p350);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(15, 8));
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $p353 := $load.ref($M.0, $p352);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} usb_kill_urb($p353);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(0, 8));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(1, 8));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($p116);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i118 := $ne.i64($i117, 0);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(2, 8));
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i130 := $p2i.ref.i64($p129);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i131 := $ne.i64($i130, 0);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(3, 8));
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.0, $p141);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i143 := $p2i.ref.i64($p142);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i144 := $ne.i64($i143, 0);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(4, 8));
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i156 := $p2i.ref.i64($p155);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i157 := $ne.i64($i156, 0);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(5, 8));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.0, $p167);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i169 := $p2i.ref.i64($p168);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i170 := $ne.i64($i169, 0);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(6, 8));
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i182 := $p2i.ref.i64($p181);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i183 := $ne.i64($i182, 0);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i183} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(7, 8));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p194 := $load.ref($M.0, $p193);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i195 := $p2i.ref.i64($p194);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i196 := $ne.i64($i195, 0);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(8, 8));
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i208 := $p2i.ref.i64($p207);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i209 := $ne.i64($i208, 0);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(9, 8));
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p220 := $load.ref($M.0, $p219);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i221 := $p2i.ref.i64($p220);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i222 := $ne.i64($i221, 0);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    assume {:branchcond $i222} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(10, 8));
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p233 := $load.ref($M.0, $p232);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i234 := $p2i.ref.i64($p233);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i235 := $ne.i64($i234, 0);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i235} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(11, 8));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.0, $p245);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i247 := $p2i.ref.i64($p246);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i248 := $ne.i64($i247, 0);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(12, 8));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p259 := $load.ref($M.0, $p258);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i260 := $p2i.ref.i64($p259);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i261 := $ne.i64($i260, 0);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i261} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(13, 8));
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p272 := $load.ref($M.0, $p271);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i273 := $p2i.ref.i64($p272);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i274 := $ne.i64($i273, 0);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(14, 8));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p285 := $load.ref($M.0, $p284);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i286 := $p2i.ref.i64($p285);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i287 := $ne.i64($i286, 0);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i287} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(15, 8));
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p298 := $load.ref($M.0, $p297);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i299 := $p2i.ref.i64($p298);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i300 := $ne.i64($i299, 0);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(8, 1));
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} usb_kill_urb($p34);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(16, 1));
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} usb_kill_urb($p36);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(296, 1));
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, 0);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p12, $mul.ref(0, 584)), $mul.ref(27, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i40 := $sext.i8.i32($i39);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i40, 1);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p12, $mul.ref(0, 584)), $mul.ref(27, 1));
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, $i42);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p44, .str);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p45, .str.122);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p46, .str.2);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p47, .str.123);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i50 := $load.i24($M.5, $p49);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i51 := $and.i24($i50, $sub.i24(0, 262144));
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i52 := $or.i24($i51, 1194);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p49, $i52);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p53, 0);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.6, $p54);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i64($i55);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i57 := $and.i64($i56, 1);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $i58 := ldv__builtin_expect($i57, 0);
    call {:si_unique_call 370} {:cexpr "tmp___0"} boogie_si_record_i64($i58);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p12, $mul.ref(0, 584)), $mul.ref(27, 1));
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i66 := $sext.i8.i32($i65);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 0);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(8, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i100 := $ne.i64($i99, 0);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32(0);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i16($i107);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} vslice_dummy_var_18 := mos7840_set_uart_reg($p0, 4, $i108);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32(0);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i16($i110);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} vslice_dummy_var_19 := mos7840_set_uart_reg($p0, 1, $i111);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(26, 1));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p113, 0);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb37:
    assume $i100 == 1;
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(8, 1));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} kfree($p104);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(8, 1));
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} usb_free_urb($p106);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb28:
    assume $i67 == 1;
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 3016)), $mul.ref(1136, 1));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb30:
    assume $i74 == 1;
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p75, .str);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p76, .str.122);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p77, .str.2);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p78, .str.124);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i81 := $load.i24($M.5, $p80);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i82 := $and.i24($i81, $sub.i24(0, 262144));
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i83 := $or.i24($i82, 1197);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p80, $i83);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p84, 0);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.6, $p85);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i64($i86);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i88 := $and.i64($i87, 1);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $i89 := ldv__builtin_expect($i88, 0);
    call {:si_unique_call 373} {:cexpr "tmp___1"} boogie_si_record_i64($i89);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, 0);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 3016)), $mul.ref(1136, 1));
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} usb_kill_urb($p96);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i90 == 1;
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} __dynamic_dev_dbg.ref.ref.ref($p2, $p91, .str.124);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb25:
    assume $i59 == 1;
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p12, $mul.ref(0, 584)), $mul.ref(27, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i63 := $sext.i8.i32($i62);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p60, .str.123, .str.122, $i63);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb96:
    assume $i300 == 1;
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(15, 8));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p303 := $load.ref($M.0, $p302);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p303, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p305 := $load.ref($M.0, $p304);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} kfree($p305);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(15, 8));
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p308 := $load.ref($M.0, $p307);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} usb_free_urb($p308);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb92:
    assume $i287 == 1;
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(14, 8));
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p290 := $load.ref($M.0, $p289);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p290, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p292 := $load.ref($M.0, $p291);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} kfree($p292);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(14, 8));
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p295 := $load.ref($M.0, $p294);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} usb_free_urb($p295);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb88:
    assume $i274 == 1;
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(13, 8));
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p277 := $load.ref($M.0, $p276);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p277, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p279 := $load.ref($M.0, $p278);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} kfree($p279);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(13, 8));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p282 := $load.ref($M.0, $p281);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} usb_free_urb($p282);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb84:
    assume $i261 == 1;
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(12, 8));
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p264 := $load.ref($M.0, $p263);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p264, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p266 := $load.ref($M.0, $p265);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} kfree($p266);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(12, 8));
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p269 := $load.ref($M.0, $p268);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} usb_free_urb($p269);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb80:
    assume $i248 == 1;
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(11, 8));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p251 := $load.ref($M.0, $p250);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p251, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p253 := $load.ref($M.0, $p252);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} kfree($p253);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(11, 8));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p256 := $load.ref($M.0, $p255);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} usb_free_urb($p256);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb76:
    assume $i235 == 1;
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(10, 8));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p238 := $load.ref($M.0, $p237);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p238, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p240 := $load.ref($M.0, $p239);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} kfree($p240);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(10, 8));
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p243 := $load.ref($M.0, $p242);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} usb_free_urb($p243);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb72:
    assume $i222 == 1;
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(9, 8));
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p225 := $load.ref($M.0, $p224);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p227 := $load.ref($M.0, $p226);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} kfree($p227);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(9, 8));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $p230 := $load.ref($M.0, $p229);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} usb_free_urb($p230);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb68:
    assume $i209 == 1;
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(8, 8));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p212, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p214 := $load.ref($M.0, $p213);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} kfree($p214);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(8, 8));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.0, $p216);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} usb_free_urb($p217);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb64:
    assume $i196 == 1;
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(7, 8));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p199 := $load.ref($M.0, $p198);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p199, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p201 := $load.ref($M.0, $p200);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} kfree($p201);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(7, 8));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.0, $p203);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} usb_free_urb($p204);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb60:
    assume $i183 == 1;
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(6, 8));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.0, $p185);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p186, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.0, $p187);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} kfree($p188);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(6, 8));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.0, $p190);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} usb_free_urb($p191);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb56:
    assume $i170 == 1;
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(5, 8));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.0, $p172);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p173, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.0, $p174);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} kfree($p175);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(5, 8));
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.0, $p177);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} usb_free_urb($p178);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb52:
    assume $i157 == 1;
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(4, 8));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p159);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p160, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.0, $p161);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} kfree($p162);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(4, 8));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.0, $p164);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} usb_free_urb($p165);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb48:
    assume $i144 == 1;
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(3, 8));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p147, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} kfree($p149);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(3, 8));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.0, $p151);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} usb_free_urb($p152);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb44:
    assume $i131 == 1;
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(2, 8));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p134, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} kfree($p136);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(2, 8));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} usb_free_urb($p139);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb40:
    assume $i118 == 1;
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(1, 8));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} kfree($p123);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(1, 8));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} usb_free_urb($p126);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(0, 8));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} kfree($p29);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(0, 8));
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} usb_free_urb($p32);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb9;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mos7840_write: ref;

axiom mos7840_write == $sub.ref(0, 197634);

procedure mos7840_write($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr, assertsPassed, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23;



implementation mos7840_write($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $p26: ref;
  var $i27: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i24;
  var $i38: i24;
  var $i39: i24;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i24;
  var $i60: i24;
  var $i61: i24;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i64;
  var $i66: i64;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $i81: i1;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $p86: ref;
  var $i87: i8;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i32;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i24;
  var $i127: i24;
  var $i128: i24;
  var $p129: ref;
  var $p130: ref;
  var $i131: i8;
  var $i132: i64;
  var $i133: i64;
  var $i134: i64;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $i138: i8;
  var $i139: i32;
  var $p140: ref;
  var $i141: i8;
  var $i142: i1;
  var $i143: i32;
  var $i144: i1;
  var $i145: i64;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i8;
  var $i151: i32;
  var $i152: i1;
  var $i153: i1;
  var $p154: ref;
  var $p156: ref;
  var $i157: i32;
  var $i158: i32;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i24;
  var $i168: i24;
  var $i169: i24;
  var $p170: ref;
  var $p171: ref;
  var $i172: i8;
  var $i173: i64;
  var $i174: i64;
  var $i175: i64;
  var $i176: i1;
  var $p177: ref;
  var $p179: ref;
  var $i180: i32;
  var $i70: i32;
  var $i10: i32;
  var $p182: ref;
  var $i183: i8;
  var $i184: i32;
  var $i185: i1;
  var $p187: ref;
  var $i188: i8;
  var $i189: i32;
  var $i190: i1;
  var $p192: ref;
  var $i193: i8;
  var $i194: i32;
  var $i195: i1;
  var $p197: ref;
  var $i198: i8;
  var $i199: i32;
  var $i200: i1;
  var $p202: ref;
  var $i203: i8;
  var $i204: i32;
  var $i205: i1;
  var $p207: ref;
  var $i208: i8;
  var $i209: i32;
  var $i210: i1;
  var $p212: ref;
  var $i213: i8;
  var $i214: i32;
  var $i215: i1;
  var $p217: ref;
  var $i218: i8;
  var $i219: i32;
  var $i220: i1;
  var $p222: ref;
  var $i223: i8;
  var $i224: i32;
  var $i225: i1;
  var $p227: ref;
  var $i228: i8;
  var $i229: i32;
  var $i230: i1;
  var $p232: ref;
  var $i233: i8;
  var $i234: i32;
  var $i235: i1;
  var $p237: ref;
  var $i238: i8;
  var $i239: i32;
  var $i240: i1;
  var $p242: ref;
  var $i243: i8;
  var $i244: i32;
  var $i245: i1;
  var $p247: ref;
  var $i248: i8;
  var $i249: i32;
  var $i250: i1;
  var $p252: ref;
  var $i253: i8;
  var $i254: i32;
  var $i255: i1;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 428} {:cexpr "mos7840_write:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $i8 := mos7840_port_paranoia_check($p1, .str.102);
    call {:si_unique_call 430} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $i13 := mos7840_serial_paranoia_check($p12, .str.102);
    call {:si_unique_call 432} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $p15 := mos7840_get_port_private($p1);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} ldv_spin_lock();
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(0, 1));
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i21 := $sext.i8.i32($i20);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i23 := 0;
    assume {:branchcond $i22} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(1, 1));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i183 := $load.i8($M.0, $p182);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i184 := $sext.i8.i32($i183);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 0);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i23 := 1;
    assume {:branchcond $i185} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(2, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i188 := $load.i8($M.0, $p187);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i189 := $sext.i8.i32($i188);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i189, 0);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i23 := 2;
    assume {:branchcond $i190} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(3, 1));
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i193 := $load.i8($M.0, $p192);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i194 := $sext.i8.i32($i193);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 0);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i23 := 3;
    assume {:branchcond $i195} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(4, 1));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i198 := $load.i8($M.0, $p197);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i199 := $sext.i8.i32($i198);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i199, 0);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i23 := 4;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(5, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i203 := $load.i8($M.0, $p202);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i204 := $sext.i8.i32($i203);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i204, 0);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i23 := 5;
    assume {:branchcond $i205} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(6, 1));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i208 := $load.i8($M.0, $p207);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i209 := $sext.i8.i32($i208);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i209, 0);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i23 := 6;
    assume {:branchcond $i210} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(7, 1));
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i213 := $load.i8($M.0, $p212);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i214 := $sext.i8.i32($i213);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i214, 0);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i23 := 7;
    assume {:branchcond $i215} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i218 := $load.i8($M.0, $p217);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i219 := $sext.i8.i32($i218);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i220 := $eq.i32($i219, 0);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i23 := 8;
    assume {:branchcond $i220} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(9, 1));
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i223 := $load.i8($M.0, $p222);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i224 := $sext.i8.i32($i223);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i225 := $eq.i32($i224, 0);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i23 := 9;
    assume {:branchcond $i225} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(10, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i228 := $load.i8($M.0, $p227);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i229 := $sext.i8.i32($i228);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i229, 0);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i23 := 10;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(11, 1));
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i233 := $load.i8($M.0, $p232);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i234 := $sext.i8.i32($i233);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 0);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i23 := 11;
    assume {:branchcond $i235} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i238 := $load.i8($M.0, $p237);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i239 := $sext.i8.i32($i238);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i239, 0);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i23 := 12;
    assume {:branchcond $i240} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(13, 1));
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i243 := $load.i8($M.0, $p242);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i244 := $sext.i8.i32($i243);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i244, 0);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i23 := 13;
    assume {:branchcond $i245} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(14, 1));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i248 := $load.i8($M.0, $p247);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i249 := $sext.i8.i32($i248);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i249, 0);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i23 := 14;
    assume {:branchcond $i250} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(15, 1));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i253 := $load.i8($M.0, $p252);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i254 := $sext.i8.i32($i253);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i254, 0);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i23 := 15;
    assume {:branchcond $i255} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i48, $p49 := 16, $0.ref;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(80, 1));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} spin_unlock_irqrestore($p50, $u0);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p49);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i52 := $eq.i64($i51, 0);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p49, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i74 := $eq.i64($i73, 0);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    call {:si_unique_call 443} {:cexpr "mos7840_write:arg:_min1"} boogie_si_record_i32($i3);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i3, 32);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i81 == 1);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i82 := 32;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p49, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i82);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 444} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p84, $p2, $i85, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p12, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.0, $p86);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 2);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p12, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1344, 1));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $i113 := __create_pipe($p109, $i112);
    call {:si_unique_call 446} {:cexpr "tmp___4"} boogie_si_record_i32($i113);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p12, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i116 := $or.i32($i113, $sub.i32(0, 1073741824));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p49, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p15);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} usb_fill_bulk_urb($p49, $p115, $i116, $p118, $i82, mos7840_bulk_out_data_callback, $p119);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p120, .str);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p121, .str.102);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p122, .str.2);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p123, .str.105);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i126 := $load.i24($M.5, $p125);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i127 := $and.i24($i126, $sub.i24(0, 262144));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i128 := $or.i24($i127, 1372);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p125, $i128);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p129, 0);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.6, $p130);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i64($i131);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i133 := $and.i64($i132, 1);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $i134 := ldv__builtin_expect($i133, 0);
    call {:si_unique_call 452} {:cexpr "tmp___5"} boogie_si_record_i64($i134);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i135 := $ne.i64($i134, 0);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(297, 1));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i141 := $load.i8($M.0, $p140);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i142 := $trunc.i8.i1($i141);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $i143 := ldv_usb_submit_urb_32($p49, 32);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 456} {:cexpr "status"} boogie_si_record_i32($i143);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i143, 0);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(16, 1));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i157 := $load.i32($M.0, $p156);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i158 := $add.i32($i157, $i82);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(16, 1));
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p160, $i158);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p161, .str);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p162, .str.102);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p163, .str.2);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p164, .str.107);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p166 := $bitcast.ref.ref($p165);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i167 := $load.i24($M.5, $p166);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i168 := $and.i24($i167, $sub.i24(0, 262144));
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i169 := $or.i24($i168, 1389);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p166, $i169);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p170, 0);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i172 := $load.i8($M.6, $p171);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i173 := $zext.i8.i64($i172);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i174 := $and.i64($i173, 1);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i175 := ldv__builtin_expect($i174, 0);
    call {:si_unique_call 459} {:cexpr "tmp___6"} boogie_si_record_i64($i175);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i176 := $ne.i64($i175, 0);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i70 := $i82;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i10 := $i70;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb60:
    assume $i176 == 1;
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(16, 1));
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i180 := $load.i32($M.0, $p179);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} __dynamic_dev_dbg.ref.ref.ref.i32($p7, $p177, .str.107, $i180);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb51:
    assume $i144 == 1;
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i145 := $sext.i32.i64($i48);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref($i145, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p147, 0);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p1);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($p148, $mul.ref(696, 1));
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.0, $p149);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i32($i150);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 0);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb53, $bb55;

  $bb55:
    assume !($i152 == 1);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i153 := $trunc.i8.i1(1);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i153 == 1);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} dev_err.ref.ref.ref.i32($p154, .str.106, .str.102, $i143);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i70 := $i143;
    goto $bb28;

  $bb56:
    assume $i153 == 1;
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i152 == 1;
    goto $bb54;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i142 == 1;
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} mos7840_led_activity($p1);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    goto $bb50;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i135 == 1;
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1344, 1));
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.0, $p137);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i138);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} __dynamic_dev_dbg.ref.ref.ref.i32($p6, $p136, .str.105, $i139);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb39:
    assume $i89 == 1;
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i93 := $and.i32($i92, 1);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb41;

  $bb42:
    assume $i94 == 1;
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p12, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1344, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.0, $p97);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i99, 2);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $i101 := __create_pipe($p96, $i100);
    call {:si_unique_call 449} {:cexpr "tmp___3"} boogie_si_record_i32($i101);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p12, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i104 := $or.i32($i101, $sub.i32(0, 1073741824));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p49, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p15);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} usb_fill_bulk_urb($p49, $p103, $i104, $p106, $i82, mos7840_bulk_out_data_callback, $p107);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb36:
    assume $i81 == 1;
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i82 := $i3;
    goto $bb38;

  $bb30:
    assume $i74 == 1;
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} $p75 := kmalloc(32, 208);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p49, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p76, $p75);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p49, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i80 := $eq.i64($i79, 0);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i80 == 1;
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i70 := 0;
    goto $bb28;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i52 == 1;
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p53, .str);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p54, .str.102);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p55, .str.2);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p56, .str.104);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i59 := $load.i24($M.5, $p58);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i60 := $and.i24($i59, $sub.i24(0, 262144));
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i61 := $or.i24($i60, 1338);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p58, $i61);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p62, 0);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.6, $p63);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i64($i64);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i66 := $and.i64($i65, 1);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $i67 := ldv__builtin_expect($i66, 0);
    call {:si_unique_call 440} {:cexpr "tmp___2"} boogie_si_record_i64($i67);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i70 := 0;
    goto $bb28;

  $bb25:
    assume $i68 == 1;
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} __dynamic_dev_dbg.ref.ref.ref.ref($p5, $p69, .str.104, .str.102);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb119:
    assume {:verifier.code 0} true;
    assume $i255 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref($i24, 1));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 1);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i23);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref($i27, 8));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p31, .str);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p32, .str.102);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p33, .str.2);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p34, .str.103);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i37 := $load.i24($M.5, $p36);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i38 := $and.i24($i37, $sub.i24(0, 262144));
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i39 := $or.i24($i38, 1331);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p36, $i39);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p40, 0);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.6, $p41);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i64($i42);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i44 := $and.i64($i43, 1);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 436} {:cexpr "tmp___1"} boogie_si_record_i64($i45);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i48, $p49 := $i23, $p30;
    goto $bb19;

  $bb16:
    assume $i46 == 1;
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} __dynamic_dev_dbg.ref.ref.ref.i32($p4, $p47, .str.103, $i23);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb115:
    assume {:verifier.code 0} true;
    assume $i250 == 1;
    goto $bb14;

  $bb111:
    assume {:verifier.code 0} true;
    assume $i245 == 1;
    goto $bb14;

  $bb107:
    assume {:verifier.code 0} true;
    assume $i240 == 1;
    goto $bb14;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i235 == 1;
    goto $bb14;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i230 == 1;
    goto $bb14;

  $bb95:
    assume {:verifier.code 0} true;
    assume $i225 == 1;
    goto $bb14;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i220 == 1;
    goto $bb14;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i215 == 1;
    goto $bb14;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i210 == 1;
    goto $bb14;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i205 == 1;
    goto $bb14;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i200 == 1;
    goto $bb14;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i195 == 1;
    goto $bb14;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i190 == 1;
    goto $bb14;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i185 == 1;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb14;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 1);
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 1);
    goto $bb3;
}



const mos7840_write_room: ref;

axiom mos7840_write_room == $sub.ref(0, 198666);

procedure mos7840_write_room($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation mos7840_write_room($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i1;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i24;
  var $i29: i24;
  var $i30: i24;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i7: i32;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $i47: i32;
  var $i46: i32;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $i54: i32;
  var $i53: i32;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $i61: i32;
  var $i60: i32;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i1;
  var $i68: i32;
  var $i67: i32;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i1;
  var $i75: i32;
  var $i74: i32;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $i80: i1;
  var $i82: i32;
  var $i81: i32;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i1;
  var $i89: i32;
  var $i88: i32;
  var $p91: ref;
  var $i92: i8;
  var $i93: i32;
  var $i94: i1;
  var $i96: i32;
  var $i95: i32;
  var $p98: ref;
  var $i99: i8;
  var $i100: i32;
  var $i101: i1;
  var $i103: i32;
  var $i102: i32;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i1;
  var $i110: i32;
  var $i109: i32;
  var $p112: ref;
  var $i113: i8;
  var $i114: i32;
  var $i115: i1;
  var $i117: i32;
  var $i116: i32;
  var $p119: ref;
  var $i120: i8;
  var $i121: i32;
  var $i122: i1;
  var $i124: i32;
  var $i123: i32;
  var $p126: ref;
  var $i127: i8;
  var $i128: i32;
  var $i129: i1;
  var $i131: i32;
  var $i130: i32;
  var $p133: ref;
  var $i134: i8;
  var $i135: i32;
  var $i136: i1;
  var $i138: i32;
  var $i137: i32;
  var $p140: ref;
  var $i141: i8;
  var $i142: i32;
  var $i143: i1;
  var $i144: i32;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $i5 := mos7840_port_paranoia_check($p4, .str.125);
    call {:si_unique_call 463} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $p8 := mos7840_get_port_private($p4);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} ldv_spin_lock();
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i14 := $sext.i8.i32($i13);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(1, 1));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i44 := $sext.i8.i32($i43);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $i16;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(2, 1));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i51 := $sext.i8.i32($i50);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $i46;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(3, 1));
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i58 := $sext.i8.i32($i57);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $i53;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(4, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i65 := $sext.i8.i32($i64);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 0);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i67 := $i60;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(5, 1));
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i72 := $sext.i8.i32($i71);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 0);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := $i67;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(6, 1));
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i79 := $sext.i8.i32($i78);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 0);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $i81 := $i74;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(7, 1));
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.0, $p84);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i86 := $sext.i8.i32($i85);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 0);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i88 := $i81;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.0, $p91);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i93 := $sext.i8.i32($i92);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 0);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    $i95 := $i88;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(9, 1));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.0, $p98);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i100 := $sext.i8.i32($i99);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 0);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i102 := $i95;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(10, 1));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i107 := $sext.i8.i32($i106);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 0);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    $i109 := $i102;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(11, 1));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.0, $p112);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i114 := $sext.i8.i32($i113);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 0);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    $i116 := $i109;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.0, $p119);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i121 := $sext.i8.i32($i120);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 0);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    $i123 := $i116;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(13, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.0, $p126);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i128 := $sext.i8.i32($i127);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 0);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    $i130 := $i123;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(14, 1));
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i134 := $load.i8($M.0, $p133);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i135 := $sext.i8.i32($i134);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 0);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    $i137 := $i130;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(15, 1));
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i141 := $load.i8($M.0, $p140);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i142 := $sext.i8.i32($i141);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 0);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    $i19 := $i137;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(80, 1));
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} spin_unlock_irqrestore($p17, $u0);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i19, 0);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i18 == 1);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p22, .str);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p23, .str.125);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p24, .str.2);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p25, .str.126);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i28 := $load.i24($M.5, $p27);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i29 := $and.i24($i28, $sub.i24(0, 262144));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i30 := $or.i24($i29, 1283);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p27, $i30);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p31, 0);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.6, $p32);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i64($i33);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i35 := $and.i64($i34, 1);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $i36 := ldv__builtin_expect($i35, 0);
    call {:si_unique_call 468} {:cexpr "tmp___0"} boogie_si_record_i64($i36);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i7 := $i21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb18:
    assume $i37 == 1;
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(32, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p40, .str.126, .str.125, $i21);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i18 == 1;
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, $sub.i32(0, 31));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb17;

  $bb77:
    assume $i143 == 1;
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i144 := $add.i32($i137, 32);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i19 := $i144;
    goto $bb79;

  $bb73:
    assume $i136 == 1;
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i138 := $add.i32($i130, 32);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i137 := $i138;
    goto $bb75;

  $bb69:
    assume $i129 == 1;
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i131 := $add.i32($i123, 32);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i130 := $i131;
    goto $bb71;

  $bb65:
    assume $i122 == 1;
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i124 := $add.i32($i116, 32);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i123 := $i124;
    goto $bb67;

  $bb61:
    assume $i115 == 1;
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i117 := $add.i32($i109, 32);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i116 := $i117;
    goto $bb63;

  $bb57:
    assume $i108 == 1;
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i102, 32);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i109 := $i110;
    goto $bb59;

  $bb53:
    assume $i101 == 1;
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i103 := $add.i32($i95, 32);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i102 := $i103;
    goto $bb55;

  $bb49:
    assume $i94 == 1;
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i96 := $add.i32($i88, 32);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i95 := $i96;
    goto $bb51;

  $bb45:
    assume $i87 == 1;
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i81, 32);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i88 := $i89;
    goto $bb47;

  $bb41:
    assume $i80 == 1;
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i82 := $add.i32($i74, 32);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i81 := $i82;
    goto $bb43;

  $bb37:
    assume $i73 == 1;
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i67, 32);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i74 := $i75;
    goto $bb39;

  $bb33:
    assume $i66 == 1;
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i60, 32);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i67 := $i68;
    goto $bb35;

  $bb29:
    assume $i59 == 1;
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i53, 32);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i60 := $i61;
    goto $bb31;

  $bb25:
    assume $i52 == 1;
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i46, 32);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i53 := $i54;
    goto $bb27;

  $bb21:
    assume $i45 == 1;
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i16, 32);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i46 := $i47;
    goto $bb23;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i16 := 32;
    goto $bb12;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 1);
    goto $bb3;
}



const mos7840_ioctl: ref;

axiom mos7840_ioctl == $sub.ref(0, 199698);

procedure mos7840_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.0, $CurrAddr, $M.15;



implementation mos7840_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i24;
  var $i28: i24;
  var $i29: i24;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i24;
  var $i47: i24;
  var $i48: i24;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i24;
  var $i66: i24;
  var $i67: i24;
  var $p68: ref;
  var $p69: ref;
  var $i70: i8;
  var $i71: i64;
  var $i72: i64;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 473} {:cexpr "mos7840_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 474} {:cexpr "mos7840_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i2);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $i10 := mos7840_port_paranoia_check($p8, .str.95);
    call {:si_unique_call 476} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $p13 := mos7840_get_port_private($p8);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i1, 21535);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i1, 21593);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i1, 21593);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 515);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb13:
    assume $i18 == 1;
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p21, .str);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p22, .str.95);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p23, .str.2);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p24, .str.96);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i27 := $load.i24($M.5, $p26);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i28 := $and.i24($i27, $sub.i24(0, 262144));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i29 := $or.i24($i28, 2003);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p26, $i29);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p30, 0);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.6, $p31);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i64($i32);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i33, 1);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 479} {:cexpr "tmp___0"} boogie_si_record_i64($i35);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p9);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i39 := mos7840_get_lsr_info($p0, $p38);
    call {:si_unique_call 486} {:cexpr "tmp___1"} boogie_si_record_i32($i39);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i12 := $i39;
    goto $bb3;

  $bb20:
    assume $i36 == 1;
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p8, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p37, .str.96, .str.95);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb11:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i1, 21535);
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb15;

  $bb16:
    assume $i19 == 1;
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p59, .str);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p60, .str.95);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p61, .str.2);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p62, .str.98);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i65 := $load.i24($M.5, $p64);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i66 := $and.i24($i65, $sub.i24(0, 262144));
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i67 := $or.i24($i66, 2011);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p64, $i67);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p68, 0);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.6, $p69);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i64($i70);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i72 := $and.i64($i71, 1);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i73 := ldv__builtin_expect($i72, 0);
    call {:si_unique_call 481} {:cexpr "tmp___4"} boogie_si_record_i64($i73);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i74 == 1;
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p8, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} __dynamic_dev_dbg.ref.ref.ref.ref($p5, $p75, .str.98, .str.95);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i1, 21534);
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb15;

  $bb18:
    assume $i20 == 1;
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p40, .str);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p41, .str.95);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p42, .str.2);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p43, .str.97);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i46 := $load.i24($M.5, $p45);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i47 := $and.i24($i46, $sub.i24(0, 262144));
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i48 := $or.i24($i47, 2007);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p45, $i48);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p49, 0);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.6, $p50);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i64($i51);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i53 := $and.i64($i52, 1);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $i54 := ldv__builtin_expect($i53, 0);
    call {:si_unique_call 483} {:cexpr "tmp___2"} boogie_si_record_i64($i54);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p9);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i58 := mos7840_get_serial_info($p13, $p57);
    call {:si_unique_call 489} {:cexpr "tmp___3"} boogie_si_record_i32($i58);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i12 := $i58;
    goto $bb3;

  $bb23:
    assume $i55 == 1;
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p8, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} __dynamic_dev_dbg.ref.ref.ref.ref($p4, $p56, .str.97, .str.95);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;
}



const mos7840_set_termios: ref;

axiom mos7840_set_termios == $sub.ref(0, 200730);

procedure mos7840_set_termios($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $CurrAddr, $M.25, $M.26, $M.7, assertsPassed;



implementation mos7840_set_termios($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i24;
  var $i29: i24;
  var $i30: i24;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i24;
  var $i46: i24;
  var $i47: i24;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i24;
  var $i63: i24;
  var $i64: i24;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p74: ref;
  var $i75: i32;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i24;
  var $i87: i24;
  var $i88: i24;
  var $p89: ref;
  var $p90: ref;
  var $i91: i8;
  var $i92: i64;
  var $i93: i64;
  var $i94: i64;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i24;
  var $i113: i24;
  var $i114: i24;
  var $p115: ref;
  var $p116: ref;
  var $i117: i8;
  var $i118: i64;
  var $i119: i64;
  var $i120: i64;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $i124: i8;
  var $i125: i1;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i24;
  var $i138: i24;
  var $i139: i24;
  var $p140: ref;
  var $p141: ref;
  var $i142: i8;
  var $i143: i64;
  var $i144: i64;
  var $i145: i64;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $i9 := mos7840_port_paranoia_check($p1, .str.70);
    call {:si_unique_call 498} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i13 := mos7840_serial_paranoia_check($p12, .str.70);
    call {:si_unique_call 500} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $p15 := mos7840_get_port_private($p1);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(26, 1));
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i20 := $sext.i8.i32($i19);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p39, .str);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p40, .str.70);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p41, .str.2);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p42, .str.7);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i45 := $load.i24($M.5, $p44);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i46 := $and.i24($i45, $sub.i24(0, 262144));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i47 := $or.i24($i46, 1891);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p44, $i47);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p48, 0);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.6, $p49);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i64($i50);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i52 := $and.i64($i51, 1);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $i53 := ldv__builtin_expect($i52, 0);
    call {:si_unique_call 506} {:cexpr "tmp___2"} boogie_si_record_i64($i53);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p56, .str);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p57, .str.70);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p58, .str.2);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p59, .str.72);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i62 := $load.i24($M.5, $p61);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i63 := $and.i24($i62, $sub.i24(0, 262144));
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i64 := $or.i24($i63, 1896);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p61, $i64);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p65, 0);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.6, $p66);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i64($i67);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i69 := $and.i64($i68, 1);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $i70 := ldv__builtin_expect($i69, 0);
    call {:si_unique_call 509} {:cexpr "tmp___3"} boogie_si_record_i64($i70);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p80, .str);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p81, .str.70);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p82, .str.2);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p83, .str.73);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i86 := $load.i24($M.5, $p85);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i87 := $and.i24($i86, $sub.i24(0, 262144));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i88 := $or.i24($i87, 1898);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p85, $i88);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p89, 0);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.6, $p90);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i64($i91);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i93 := $and.i64($i92, 1);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i94 := ldv__builtin_expect($i93, 0);
    call {:si_unique_call 512} {:cexpr "tmp___4"} boogie_si_record_i64($i94);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i94, 0);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} mos7840_change_port_settings($p0, $p15, $p2);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(16, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i104 := $p2i.ref.i64($p103);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i105 := $eq.i64($i104, 0);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(296, 1));
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.0, $p123);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i8.i1($i124);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i125 == 1);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(296, 1));
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p126, 1);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(16, 1));
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $i129 := ldv_usb_submit_urb_34($p128, 208);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 519} {:cexpr "status"} boogie_si_record_i32($i129);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb34:
    assume $i130 == 1;
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p131, .str);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p132, .str.70);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p133, .str.2);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p134, .str.75);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p135);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i137 := $load.i24($M.5, $p136);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i138 := $and.i24($i137, $sub.i24(0, 262144));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i139 := $or.i24($i138, 1914);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p136, $i139);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p140, 0);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i142 := $load.i8($M.6, $p141);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i143 := $zext.i8.i64($i142);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i144 := $and.i64($i143, 1);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $i145 := ldv__builtin_expect($i144, 0);
    call {:si_unique_call 521} {:cexpr "tmp___6"} boogie_si_record_i64($i145);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i146 := $ne.i64($i145, 0);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p15, $mul.ref(0, 584)), $mul.ref(296, 1));
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p148, 0);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i146 == 1;
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} __dynamic_dev_dbg.ref.ref.ref.i32($p8, $p147, .str.75, $i129);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i125 == 1;
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb26:
    assume $i105 == 1;
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p106, .str);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p107, .str.70);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p108, .str.2);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p109, .str.7);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i112 := $load.i24($M.5, $p111);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i113 := $and.i24($i112, $sub.i24(0, 262144));
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i114 := $or.i24($i113, 1905);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p111, $i114);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p115, 0);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.6, $p116);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i64($i117);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i119 := $and.i64($i118, 1);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i120 := ldv__builtin_expect($i119, 0);
    call {:si_unique_call 516} {:cexpr "tmp___5"} boogie_si_record_i64($i120);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i121 := $ne.i64($i120, 0);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb28:
    assume $i121 == 1;
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} __dynamic_dev_dbg.ref.ref.ref.ref($p7, $p122, .str.7, .str.74);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i95 == 1;
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i101 := $and.i32($i100, 31);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p6, $p96, .str.73, .str.70, $i98, $i101);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i71 == 1;
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i78, 31);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p5, $p72, .str.72, .str.70, $i75, $i79);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i54 == 1;
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} __dynamic_dev_dbg.ref.ref.ref.ref($p4, $p55, .str.7, .str.71);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p22, .str);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p23, .str.70);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p24, .str.2);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p25, .str.49);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i28 := $load.i24($M.5, $p27);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i29 := $and.i24($i28, $sub.i24(0, 262144));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i30 := $or.i24($i29, 1887);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p27, $i30);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p31, 0);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.6, $p32);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i64($i33);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i35 := $and.i64($i34, 1);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $i36 := ldv__builtin_expect($i35, 0);
    call {:si_unique_call 503} {:cexpr "tmp___1"} boogie_si_record_i64($i36);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p38, .str.49, .str.70);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mos7840_break: ref;

axiom mos7840_break == $sub.ref(0, 201762);

procedure mos7840_break($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $CurrAddr;



implementation mos7840_break($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $i20: i8;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i24;
  var $i34: i24;
  var $i35: i24;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i16;
  var vslice_dummy_var_20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 524} {:cexpr "mos7840_break:arg:break_state"} boogie_si_record_i32($i1);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $i6 := mos7840_port_paranoia_check($p5, .str.127);
    call {:si_unique_call 526} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $p8 := mos7840_get_usb_serial($p5, .str.127);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $p11 := mos7840_get_port_private($p5);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p11, $mul.ref(0, 584)), $mul.ref(24, 1));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 191);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    call {:si_unique_call 530} {:cexpr "data"} boogie_si_record_i8($i25);
    assume {:verifier.code 0} true;
    $i20 := $i25;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p11, $mul.ref(0, 584)), $mul.ref(24, 1));
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, $i20);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p27, .str);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p28, .str.127);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p29, .str.2);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p30, .str.128);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i33 := $load.i24($M.5, $p32);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i34 := $and.i24($i33, $sub.i24(0, 262144));
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i35 := $or.i24($i34, 1247);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p32, $i35);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p36, 0);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.6, $p37);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i64($i38);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 1);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 532} {:cexpr "tmp___0"} boogie_si_record_i64($i41);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p11, $mul.ref(0, 584)), $mul.ref(24, 1));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} vslice_dummy_var_20 := mos7840_set_uart_reg($p5, 3, $i50);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i42 == 1;
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p11, $mul.ref(0, 584)), $mul.ref(24, 1));
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p2, $p43, .str.128, .str.127, $i46);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p11, $mul.ref(0, 584)), $mul.ref(24, 1));
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, 64);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    call {:si_unique_call 529} {:cexpr "data"} boogie_si_record_i8($i19);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb13;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mos7840_chars_in_buffer: ref;

axiom mos7840_chars_in_buffer == $sub.ref(0, 202794);

procedure mos7840_chars_in_buffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation mos7840_chars_in_buffer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i24;
  var $i30: i24;
  var $i31: i24;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $i7: i32;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i46: i32;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i58: i32;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i70: i32;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $i82: i32;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i32;
  var $i94: i32;
  var $p102: ref;
  var $i103: i8;
  var $i104: i32;
  var $i105: i1;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $i112: i32;
  var $i106: i32;
  var $p114: ref;
  var $i115: i8;
  var $i116: i32;
  var $i117: i1;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $i124: i32;
  var $i118: i32;
  var $p126: ref;
  var $i127: i8;
  var $i128: i32;
  var $i129: i1;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $i136: i32;
  var $i130: i32;
  var $p138: ref;
  var $i139: i8;
  var $i140: i32;
  var $i141: i1;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $i147: i32;
  var $i148: i32;
  var $i142: i32;
  var $p150: ref;
  var $i151: i8;
  var $i152: i32;
  var $i153: i1;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i32;
  var $i160: i32;
  var $i154: i32;
  var $p162: ref;
  var $i163: i8;
  var $i164: i32;
  var $i165: i1;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i32;
  var $i172: i32;
  var $i166: i32;
  var $p174: ref;
  var $i175: i8;
  var $i176: i32;
  var $i177: i1;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $i183: i32;
  var $i184: i32;
  var $i178: i32;
  var $p186: ref;
  var $i187: i8;
  var $i188: i32;
  var $i189: i1;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: i32;
  var $i196: i32;
  var $i190: i32;
  var $p198: ref;
  var $i199: i8;
  var $i200: i32;
  var $i201: i1;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $i207: i32;
  var $i208: i32;
  var $i202: i32;
  var $p210: ref;
  var $i211: i8;
  var $i212: i32;
  var $i213: i1;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $i218: i32;
  var $i219: i32;
  var $i40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $i5 := mos7840_port_paranoia_check($p4, .str.129);
    call {:si_unique_call 537} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $p8 := mos7840_get_port_private($p4);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} ldv_spin_lock();
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i14 := $sext.i8.i32($i13);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(1, 1));
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i44 := $sext.i8.i32($i43);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $i21;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(2, 1));
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i56 := $sext.i8.i32($i55);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := $i46;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(3, 1));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i68 := $sext.i8.i32($i67);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $i58;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(4, 1));
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p78);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i80 := $sext.i8.i32($i79);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i82 := $i70;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(5, 1));
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i92 := $sext.i8.i32($i91);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := $i82;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(6, 1));
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.0, $p102);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i104 := $sext.i8.i32($i103);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i106 := $i94;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(7, 1));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.0, $p114);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i116 := $sext.i8.i32($i115);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    $i118 := $i106;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.0, $p126);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i128 := $sext.i8.i32($i127);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    $i130 := $i118;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(9, 1));
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i139 := $load.i8($M.0, $p138);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i140 := $sext.i8.i32($i139);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i141 := $ne.i32($i140, 0);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    $i142 := $i130;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(10, 1));
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i151 := $load.i8($M.0, $p150);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i152 := $sext.i8.i32($i151);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i153 := $ne.i32($i152, 0);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    $i154 := $i142;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(11, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i163 := $load.i8($M.0, $p162);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i164 := $sext.i8.i32($i163);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i165 := $ne.i32($i164, 0);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    $i166 := $i154;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(12, 1));
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i175 := $load.i8($M.0, $p174);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i176 := $sext.i8.i32($i175);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    $i178 := $i166;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(13, 1));
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i187 := $load.i8($M.0, $p186);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i188 := $sext.i8.i32($i187);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i189 := $ne.i32($i188, 0);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    $i190 := $i178;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(14, 1));
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i199 := $load.i8($M.0, $p198);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i200 := $sext.i8.i32($i199);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i201 := $ne.i32($i200, 0);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    assume {:branchcond $i201} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    $i202 := $i190;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(280, 1)), $mul.ref(15, 1));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i211 := $load.i8($M.0, $p210);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i212 := $sext.i8.i32($i211);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i213 := $ne.i32($i212, 0);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i213} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    $i40 := $i202;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(80, 1));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} spin_unlock_irqrestore($p22, $u0);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p23, .str);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p24, .str.129);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p25, .str.2);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p26, .str.126);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i29 := $load.i24($M.5, $p28);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i30 := $and.i24($i29, $sub.i24(0, 262144));
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i31 := $or.i24($i30, 1147);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p28, $i31);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p32, 0);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.6, $p33);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i64($i34);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i36 := $and.i64($i35, 1);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 543} {:cexpr "tmp___0"} boogie_si_record_i64($i37);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i7 := $i40;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb15:
    assume $i38 == 1;
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p39, .str.126, .str.129, $i40);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb74:
    assume $i213 == 1;
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(15, 8));
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p216 := $load.ref($M.0, $p215);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p216, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i218 := $load.i32($M.0, $p217);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i219 := $add.i32($i218, $i202);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i40 := $i219;
    goto $bb76;

  $bb70:
    assume $i201 == 1;
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(14, 8));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.0, $p204);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p205, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i207 := $load.i32($M.0, $p206);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i208 := $add.i32($i207, $i190);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i202 := $i208;
    goto $bb72;

  $bb66:
    assume $i189 == 1;
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(13, 8));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.0, $p192);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p193, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i195 := $load.i32($M.0, $p194);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i196 := $add.i32($i195, $i178);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i190 := $i196;
    goto $bb68;

  $bb62:
    assume $i177 == 1;
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(12, 8));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p181, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i183 := $load.i32($M.0, $p182);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i184 := $add.i32($i183, $i166);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i178 := $i184;
    goto $bb64;

  $bb58:
    assume $i165 == 1;
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(11, 8));
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.0, $p168);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p169, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.0, $p170);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i172 := $add.i32($i171, $i154);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i166 := $i172;
    goto $bb60;

  $bb54:
    assume $i153 == 1;
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(10, 8));
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p157, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.0, $p158);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i160 := $add.i32($i159, $i142);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i154 := $i160;
    goto $bb56;

  $bb50:
    assume $i141 == 1;
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(9, 8));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.0, $p144);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p145, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.0, $p146);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i148 := $add.i32($i147, $i130);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i142 := $i148;
    goto $bb52;

  $bb46:
    assume $i129 == 1;
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(8, 8));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p133, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i136 := $add.i32($i135, $i118);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i130 := $i136;
    goto $bb48;

  $bb42:
    assume $i117 == 1;
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(7, 8));
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p122);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i124 := $add.i32($i123, $i106);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i118 := $i124;
    goto $bb44;

  $bb38:
    assume $i105 == 1;
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(6, 8));
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i112 := $add.i32($i111, $i94);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i106 := $i112;
    goto $bb40;

  $bb34:
    assume $i93 == 1;
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(5, 8));
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i99, $i82);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i94 := $i100;
    goto $bb36;

  $bb30:
    assume $i81 == 1;
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(4, 8));
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i88 := $add.i32($i87, $i70);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i82 := $i88;
    goto $bb32;

  $bb26:
    assume $i69 == 1;
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(3, 8));
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i75, $i58);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i70 := $i76;
    goto $bb28;

  $bb22:
    assume $i57 == 1;
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(2, 8));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i63, $i46);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i58 := $i64;
    goto $bb24;

  $bb18:
    assume $i45 == 1;
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(1, 8));
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, $i21);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i46 := $i52;
    goto $bb20;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(0, 8));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    call {:si_unique_call 540} {:cexpr "chars"} boogie_si_record_i32($i20);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb12;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const mos7840_throttle: ref;

axiom mos7840_throttle == $sub.ref(0, 203826);

procedure mos7840_throttle($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr, assertsPassed, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23;



implementation mos7840_throttle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i24;
  var $i22: i24;
  var $i23: i24;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i8;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i16;
  var $i57: i32;
  var $i58: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} $i6 := mos7840_port_paranoia_check($p5, .str.6);
    call {:si_unique_call 548} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $p8 := mos7840_get_port_private($p5);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(26, 1));
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i13 := $sext.i8.i32($i12);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 4096);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i45, 0);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i46 == 1;
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(25, 1));
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 253);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(25, 1));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, $i51);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p8, $mul.ref(0, 584)), $mul.ref(25, 1));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i16($i55);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $i57 := mos7840_set_uart_reg($p5, 4, $i56);
    call {:si_unique_call 556} {:cexpr "status"} boogie_si_record_i32($i57);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i57, 0);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i58 == 1;
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(17, 1)), $mul.ref(9, 1));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, $i40);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $i41 := mos7840_write($p0, $p5, $p2, 1);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 554} {:cexpr "status"} boogie_si_record_i32($i41);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i42 := $sle.i32($i41, 0);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p15, .str);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p16, .str.6);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p17, .str.2);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p18, .str.7);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i21 := $load.i24($M.5, $p20);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i22 := $and.i24($i21, $sub.i24(0, 262144));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i23 := $or.i24($i22, 1416);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p20, $i23);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p24, 0);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.6, $p25);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 1);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 551} {:cexpr "tmp___0"} boogie_si_record_i64($i29);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p31, .str.7, .str.8);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mos7840_unthrottle: ref;

axiom mos7840_unthrottle == $sub.ref(0, 204858);

procedure mos7840_unthrottle($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr, assertsPassed, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23;



implementation mos7840_unthrottle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i24;
  var $i22: i24;
  var $i23: i24;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i8;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i16;
  var $i57: i32;
  var $i58: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $p6 := mos7840_get_port_private($p5);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $i7 := mos7840_port_paranoia_check($p5, .str.48);
    call {:si_unique_call 561} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p6);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 584)), $mul.ref(26, 1));
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $i13 := $sext.i8.i32($i12);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 4096);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i45, 0);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i46 == 1;
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 584)), $mul.ref(25, 1));
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i50 := $or.i32($i49, 2);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p6, $mul.ref(0, 584)), $mul.ref(25, 1));
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, $i51);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p6, $mul.ref(0, 584)), $mul.ref(25, 1));
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i16($i55);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $i57 := mos7840_set_uart_reg($p5, 4, $i56);
    call {:si_unique_call 568} {:cexpr "status"} boogie_si_record_i32($i57);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i57, 0);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i58 == 1;
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(17, 1)), $mul.ref(8, 1));
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, $i40);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $i41 := mos7840_write($p0, $p5, $p2, 1);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 566} {:cexpr "status"} boogie_si_record_i32($i41);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i42 := $sle.i32($i41, 0);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p15, .str);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p16, .str.48);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p17, .str.2);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p18, .str.49);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i21 := $load.i24($M.5, $p20);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i22 := $and.i24($i21, $sub.i24(0, 262144));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i23 := $or.i24($i22, 1456);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p20, $i23);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p24, 0);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.6, $p25);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 1);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 563} {:cexpr "tmp___1"} boogie_si_record_i64($i29);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p31, .str.49, .str.48);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mos7840_tiocmget: ref;

axiom mos7840_tiocmget == $sub.ref(0, 205890);

procedure mos7840_tiocmget($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation mos7840_tiocmget($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i16;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i16;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i16;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $i50: i16;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i24;
  var $i63: i24;
  var $i64: i24;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $p7 := mos7840_get_port_private($p6);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $i11 := mos7840_get_uart_reg($p6, 6, $p1);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 574} {:cexpr "status"} boogie_si_record_i32($i11);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 1);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $i13 := mos7840_get_uart_reg($p6, 4, $p2);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 576} {:cexpr "status"} boogie_si_record_i32($i13);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 1);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.7, $p2);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 1);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i19 := (if $i18 == 1 then 2 else 0);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.7, $p2);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 2);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i24 := (if $i23 == 1 then 4 else 0);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i19, $i24);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.7, $p2);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 16);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i30 := (if $i29 == 1 then 32768 else 0);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i25, $i30);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.7, $p1);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 16);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i36 := (if $i35 == 1 then 32 else 0);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i31, $i36);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.7, $p1);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 128);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i42 := (if $i41 == 1 then 64 else 0);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i43 := $or.i32($i37, $i42);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.7, $p1);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 64);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i48 := (if $i47 == 1 then 128 else 0);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i49 := $or.i32($i43, $i48);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.7, $p1);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 32);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i54 := (if $i53 == 1 then 256 else 0);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i49, $i54);
    call {:si_unique_call 577} {:cexpr "result"} boogie_si_record_i32($i55);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p56, .str);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p57, .str.130);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p58, .str.2);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p59, .str.131);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i62 := $load.i24($M.5, $p61);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i63 := $and.i24($i62, $sub.i24(0, 262144));
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i64 := $or.i24($i63, 1505);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p61, $i64);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p65, 0);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.6, $p66);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i64($i67);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i69 := $and.i64($i68, 1);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $i70 := ldv__builtin_expect($i69, 0);
    call {:si_unique_call 579} {:cexpr "tmp"} boogie_si_record_i64($i70);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $i55;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb11:
    assume $i71 == 1;
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p72, .str.131, .str.130, $i55);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 5);
    goto $bb3;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 5);
    goto $bb3;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 19);
    goto $bb3;
}



const mos7840_tiocmset: ref;

axiom mos7840_tiocmset == $sub.ref(0, 206922);

procedure mos7840_tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mos7840_tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i8;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i16;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i24;
  var $i52: i24;
  var $i53: i24;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 582} {:cexpr "mos7840_tiocmset:arg:set"} boogie_si_record_i32($i1);
    call {:si_unique_call 583} {:cexpr "mos7840_tiocmset:arg:clear"} boogie_si_record_i32($i2);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $p7 := mos7840_get_port_private($p6);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 584)), $mul.ref(25, 1));
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    call {:si_unique_call 585} {:cexpr "mcr"} boogie_si_record_i32($i13);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i2, 4);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i13;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i2, 2);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i21 := $i17;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i2, 32768);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i25 := $i21;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i1, 4);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i25;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i1, 2);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i33 := $i29;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i1, 32768);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i37 := $i33;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p7, $mul.ref(0, 584)), $mul.ref(25, 1));
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, $i38);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i37);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $i43 := mos7840_set_uart_reg($p6, 4, $i42);
    call {:si_unique_call 593} {:cexpr "status"} boogie_si_record_i32($i43);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 0);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb23:
    assume $i44 == 1;
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p45, .str);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p46, .str.100);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p47, .str.2);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p48, .str.101);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i51 := $load.i24($M.5, $p50);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i52 := $and.i24($i51, $sub.i24(0, 262144));
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i53 := $or.i24($i52, 1543);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p50, $i53);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p54, 0);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.6, $p55);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i64($i56);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $i58 := $and.i64($i57, 1);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 595} {:cexpr "tmp"} boogie_si_record_i64($i59);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i10 := $i43;
    goto $bb3;

  $bb25:
    assume $i60 == 1;
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} __dynamic_dev_dbg.ref.ref.ref($p3, $p61, .str.101);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb20:
    assume $i35 == 1;
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i33, 16);
    call {:si_unique_call 591} {:cexpr "mcr"} boogie_si_record_i32($i36);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb22;

  $bb17:
    assume $i31 == 1;
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i29, 1);
    call {:si_unique_call 590} {:cexpr "mcr"} boogie_si_record_i32($i32);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb19;

  $bb14:
    assume $i27 == 1;
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i25, 2);
    call {:si_unique_call 589} {:cexpr "mcr"} boogie_si_record_i32($i28);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb16;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i21, $sub.i32(0, 17));
    call {:si_unique_call 588} {:cexpr "mcr"} boogie_si_record_i32($i24);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb13;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i17, $sub.i32(0, 2));
    call {:si_unique_call 587} {:cexpr "mcr"} boogie_si_record_i32($i20);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb10;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i13, $sub.i32(0, 3));
    call {:si_unique_call 586} {:cexpr "mcr"} boogie_si_record_i32($i16);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 19);
    goto $bb3;
}



const usb_serial_generic_tiocmiwait: ref;

axiom usb_serial_generic_tiocmiwait == $sub.ref(0, 207954);

procedure usb_serial_generic_tiocmiwait($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_serial_generic_tiocmiwait($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 597} {:cexpr "usb_serial_generic_tiocmiwait:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 1} true;
    call {:si_unique_call 598} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 599} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_serial_generic_get_icount: ref;

axiom usb_serial_generic_get_icount == $sub.ref(0, 208986);

procedure usb_serial_generic_get_icount($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_serial_generic_get_icount($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 1} true;
    call {:si_unique_call 600} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 601} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mos7840_interrupt_callback: ref;

axiom mos7840_interrupt_callback == $sub.ref(0, 210018);

procedure mos7840_interrupt_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.0, $CurrAddr, assertsPassed;



implementation mos7840_interrupt_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i24;
  var $i26: i24;
  var $i27: i24;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i24;
  var $i45: i24;
  var $i46: i24;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i1;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i24;
  var $i73: i24;
  var $i74: i24;
  var $p75: ref;
  var $p76: ref;
  var $i77: i8;
  var $i78: i64;
  var $i79: i64;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i8;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $p89: ref;
  var $p90: ref;
  var $i91: i8;
  var $p92: ref;
  var $p93: ref;
  var $i94: i8;
  var $p95: ref;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $i99: i1;
  var $i104: i64;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i8;
  var $i115: i16;
  var $i116: i32;
  var $i117: i32;
  var $i118: i32;
  var $i119: i16;
  var $p120: ref;
  var $i121: i8;
  var $i122: i32;
  var $i123: i1;
  var $i124: i64;
  var $p125: ref;
  var $i126: i8;
  var $i127: i32;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i136: i24;
  var $i137: i24;
  var $i138: i24;
  var $p139: ref;
  var $p140: ref;
  var $i141: i8;
  var $i142: i64;
  var $i143: i64;
  var $i144: i64;
  var $i145: i1;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $i151: i64;
  var $p152: ref;
  var $i153: i8;
  var $i154: i32;
  var $i155: i32;
  var $i156: i1;
  var $i157: i1;
  var $i158: i1;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i165: i24;
  var $i166: i24;
  var $i167: i24;
  var $p168: ref;
  var $p169: ref;
  var $i170: i8;
  var $i171: i64;
  var $i172: i64;
  var $i173: i64;
  var $i174: i1;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $i184: i24;
  var $i185: i24;
  var $i186: i24;
  var $p187: ref;
  var $p188: ref;
  var $i189: i8;
  var $i190: i64;
  var $i191: i64;
  var $i192: i64;
  var $i193: i1;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $i205: i24;
  var $i206: i24;
  var $i207: i24;
  var $p208: ref;
  var $p209: ref;
  var $i210: i8;
  var $i211: i64;
  var $i212: i64;
  var $i213: i64;
  var $i214: i1;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $i198: i16;
  var $i219: i32;
  var $i220: i16;
  var $i221: i32;
  var $i222: i16;
  var $i223: i32;
  var $i149: i32;
  var $i150: i16;
  var $i224: i32;
  var $i225: i16;
  var $i226: i32;
  var $i227: i8;
  var $i228: i32;
  var $i229: i1;
  var $i101: i16;
  var $i102: i32;
  var $i103: i32;
  var $i230: i32;
  var $i100: i32;
  var $i231: i1;
  var $i232: i32;
  var $i233: i1;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $p2 := $alloc($mul.ref(5, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    call {:si_unique_call 611} {:cexpr "status"} boogie_si_record_i32($i11);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i11, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p38, .str);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p39, .str.110);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p40, .str.2);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p41, .str.112);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i44 := $load.i24($M.5, $p43);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i45 := $and.i24($i44, $sub.i24(0, 262144));
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i46 := $or.i24($i45, 622);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p43, $i46);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p47, 0);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.6, $p48);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i64($i49);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i51 := $and.i64($i50, 1);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $i52 := ldv__builtin_expect($i51, 0);
    call {:si_unique_call 617} {:cexpr "tmp___0"} boogie_si_record_i64($i52);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $i232 := ldv_usb_submit_urb_27($p0, 32);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 620} {:cexpr "result"} boogie_si_record_i32($i232);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i233 := $ne.i32($i232, 0);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb77:
    assume $i233 == 1;
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $p235 := $load.ref($M.0, $p234);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p235, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} dev_err.ref.ref.ref.i32($p236, .str.57, .str.110, $i232);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    goto $bb79;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i53 == 1;
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p4, $p56, .str.112, .str.110, $i11);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    call {:si_unique_call 614} {:cexpr "length"} boogie_si_record_i32($i58);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i58, 0);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.0, $p60);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p2, $mul.ref(0, 5)), $mul.ref(0, 1));
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p86, $i85);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p60, $mul.ref(1, 1));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref(0, 5)), $mul.ref(1, 1));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p89, $i88);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p60, $mul.ref(2, 1));
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 5)), $mul.ref(2, 1));
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p92, $i91);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p60, $mul.ref(3, 1));
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p93);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p2, $mul.ref(0, 5)), $mul.ref(3, 1));
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p95, $i94);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p63, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.0, $p96);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i99 := $sgt.i32($i98, 0);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i100 := 0;
    assume {:branchcond $i99} true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i231 := $sge.i32($i100, 0);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb74:
    assume $i231 == 1;
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb38:
    assume $i99 == 1;
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i101, $i102, $i103 := 0, 0, 0;
    goto $bb41;

  $bb41:
    call $i104, $p106, $p107, $p108, $i109, $p111, $p112, $p113, $i114, $i115, $i116, $i117, $i118, $i119, $p120, $i121, $i122, $i123, $i124, $p125, $i126, $i127, $i128, $i129, $p130, $p131, $p132, $p133, $p134, $p135, $i136, $i137, $i138, $p139, $p140, $i141, $i142, $i143, $i144, $i145, $p146, $p147, $p148, $i151, $p152, $i153, $i154, $i155, $i156, $i157, $i158, $p159, $p160, $p161, $p162, $p163, $p164, $i165, $i166, $i167, $p168, $p169, $i170, $i171, $i172, $i173, $i174, $p175, $p176, $p177, $p178, $p179, $p180, $p181, $p182, $p183, $i184, $i185, $i186, $p187, $p188, $i189, $i190, $i191, $i192, $i193, $p194, $p195, $p196, $p197, $p199, $p200, $p201, $p202, $p203, $p204, $i205, $i206, $i207, $p208, $p209, $i210, $i211, $i212, $i213, $i214, $p215, $p216, $p217, $p218, $i198, $i219, $i220, $i221, $i222, $i223, $i149, $i150, $i224, $i225, $i226, $i227, $i228, $i229, $i101, $i102, $i103, $i230 := mos7840_interrupt_callback_loop_$bb41($p0, $p1, $p2, $p6, $p7, $p8, $p9, $p63, $p96, $i104, $p106, $p107, $p108, $i109, $p111, $p112, $p113, $i114, $i115, $i116, $i117, $i118, $i119, $p120, $i121, $i122, $i123, $i124, $p125, $i126, $i127, $i128, $i129, $p130, $p131, $p132, $p133, $p134, $p135, $i136, $i137, $i138, $p139, $p140, $i141, $i142, $i143, $i144, $i145, $p146, $p147, $p148, $i151, $p152, $i153, $i154, $i155, $i156, $i157, $i158, $p159, $p160, $p161, $p162, $p163, $p164, $i165, $i166, $i167, $p168, $p169, $i170, $i171, $i172, $i173, $i174, $p175, $p176, $p177, $p178, $p179, $p180, $p181, $p182, $p183, $i184, $i185, $i186, $p187, $p188, $i189, $i190, $i191, $i192, $i193, $p194, $p195, $p196, $p197, $p199, $p200, $p201, $p202, $p203, $p204, $i205, $i206, $i207, $p208, $p209, $i210, $i211, $i212, $i213, $i214, $p215, $p216, $p217, $p218, $i198, $i219, $i220, $i221, $i222, $i223, $i149, $i150, $i224, $i225, $i226, $i227, $i228, $i229, $i101, $i102, $i103, $i230);
    goto $bb41_last;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i103);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref($i104, 8));
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $p108 := mos7840_get_port_private($p107);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i103);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref($i109, 8));
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.0, $p113);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i16($i114);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i116 := $zext.i16.i32($i115);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i117 := $add.i32($i116, 1);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i118 := $shl.i32($i117, 8);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i32.i16($i118);
    call {:si_unique_call 625} {:cexpr "wval"} boogie_si_record_i16($i119);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p108, $mul.ref(0, 584)), $mul.ref(26, 1));
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.0, $p120);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i122 := $sext.i8.i32($i121);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i122, 0);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    $i224, $i225 := $i102, $i101;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i226 := $add.i32($i103, 1);
    call {:si_unique_call 640} {:cexpr "i"} boogie_si_record_i32($i226);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i227 := $load.i8($M.0, $p96);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i228 := $zext.i8.i32($i227);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i229 := $sgt.i32($i228, $i226);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i230 := $i224;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i100 := $i230;
    goto $bb40;

  $bb71:
    assume $i229 == 1;
    assume {:verifier.code 0} true;
    $i101, $i102, $i103 := $i225, $i224, $i226;
    goto $bb71_dummy;

  $bb43:
    assume $i123 == 1;
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i124 := $sext.i32.i64($i103);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p2, $mul.ref(0, 5)), $mul.ref($i124, 1));
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.8, $p125);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i126);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i128 := $and.i32($i127, 1);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i129 == 1);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i151 := $sext.i32.i64($i103);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p2, $mul.ref(0, 5)), $mul.ref($i151, 1));
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i153 := $load.i8($M.8, $p152);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i154 := $zext.i8.i32($i153);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i155 := $and.i32($i154, 15);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i156 := $slt.i32($i155, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i155, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i157 == 1);
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i198 := $i101;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i219 := $zext.i16.i32($i119);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i220 := $trunc.i32.i16($i219);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i221 := $zext.i16.i32($i198);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i222 := $trunc.i32.i16($i221);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $i223 := mos7840_get_reg($p108, $i220, $i222, $p1);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 638} {:cexpr "rv"} boogie_si_record_i32($i223);
    assume {:verifier.code 0} true;
    $i149, $i150 := $i223, $i198;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i224, $i225 := $i149, $i150;
    goto $bb70;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i157 == 1;
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p159, .str);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p160, .str.110);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p161, .str.2);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p162, .str.115);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p164 := $bitcast.ref.ref($p163);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i165 := $load.i24($M.5, $p164);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i166 := $and.i24($i165, $sub.i24(0, 262144));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i167 := $or.i24($i166, 658);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p164, $i167);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p168, 0);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i170 := $load.i8($M.6, $p169);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i171 := $zext.i8.i64($i170);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i172 := $and.i64($i171, 1);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $i173 := ldv__builtin_expect($i172, 0);
    call {:si_unique_call 630} {:cexpr "tmp___3"} boogie_si_record_i64($i173);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i174 := $ne.i64($i173, 0);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p178, .str);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p179, .str.110);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p180, .str.2);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p181, .str.116);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $p183 := $bitcast.ref.ref($p182);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i184 := $load.i24($M.5, $p183);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i185 := $and.i24($i184, $sub.i24(0, 262144));
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i186 := $or.i24($i185, 659);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p183, $i186);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p187, 0);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i189 := $load.i8($M.6, $p188);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i190 := $zext.i8.i64($i189);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i191 := $and.i64($i190, 1);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i192 := ldv__builtin_expect($i191, 0);
    call {:si_unique_call 635} {:cexpr "tmp___4"} boogie_si_record_i64($i192);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i193 := $ne.i64($i192, 0);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p108, $mul.ref(0, 584)), $mul.ref(72, 1));
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p197, 1);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i198 := 5;
    goto $bb65;

  $bb62:
    assume $i193 == 1;
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.0, $p194);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p195, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} __dynamic_dev_dbg.ref.ref.ref($p8, $p196, .str.116);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb59:
    assume $i174 == 1;
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.0, $p175);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p176, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} __dynamic_dev_dbg.ref.ref.ref.i32($p7, $p177, .str.115, $i103);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb52:
    assume $i156 == 1;
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i155, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i158 == 1);
    goto $bb56;

  $bb57:
    assume $i158 == 1;
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p199, .str);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p200, .str.110);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p201, .str.2);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p202, .str.117);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $p204 := $bitcast.ref.ref($p203);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i205 := $load.i24($M.5, $p204);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i206 := $and.i24($i205, $sub.i24(0, 262144));
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i207 := $or.i24($i206, 664);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p204, $i207);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p208, 0);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i210 := $load.i8($M.6, $p209);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i211 := $zext.i8.i64($i210);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i212 := $and.i64($i211, 1);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $i213 := ldv__builtin_expect($i212, 0);
    call {:si_unique_call 632} {:cexpr "tmp___5"} boogie_si_record_i64($i213);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i214 := $ne.i64($i213, 0);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p108, $mul.ref(0, 584)), $mul.ref(72, 1));
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p218, 0);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i198 := 6;
    goto $bb65;

  $bb66:
    assume $i214 == 1;
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $p216 := $load.ref($M.0, $p215);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p216, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} __dynamic_dev_dbg.ref.ref.ref.i32($p9, $p217, .str.117, $i103);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb45:
    assume $i129 == 1;
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p130, .str);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p131, .str.110);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p132, .str.2);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p133, .str.114);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p134);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i136 := $load.i24($M.5, $p135);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i137 := $and.i24($i136, $sub.i24(0, 262144));
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i138 := $or.i24($i137, 654);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p135, $i138);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p139, 0);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i141 := $load.i8($M.6, $p140);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i64($i141);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i143 := $and.i64($i142, 1);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $i144 := ldv__builtin_expect($i143, 0);
    call {:si_unique_call 627} {:cexpr "tmp___2"} boogie_si_record_i64($i144);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i145 := $ne.i64($i144, 0);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i149, $i150 := $i102, $i101;
    goto $bb50;

  $bb47:
    assume $i145 == 1;
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p147, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} __dynamic_dev_dbg.ref.ref.ref.i32($p6, $p148, .str.114, $i103);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb29:
    assume $i64 == 1;
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i65 := $sgt.i32($i58, 5);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb31;

  $bb32:
    assume $i65 == 1;
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p66, .str);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p67, .str.110);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p68, .str.2);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p69, .str.7);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i72 := $load.i24($M.5, $p71);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i73 := $and.i24($i72, $sub.i24(0, 262144));
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i74 := $or.i24($i73, 639);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p71, $i74);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p75, 0);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.6, $p76);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i64($i77);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i79 := $and.i64($i78, 1);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $i80 := ldv__builtin_expect($i79, 0);
    call {:si_unique_call 622} {:cexpr "tmp___1"} boogie_si_record_i64($i80);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb34:
    assume $i81 == 1;
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} __dynamic_dev_dbg.ref.ref.ref.ref($p5, $p84, .str.7, .str.113);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb4:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i11, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb9, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p19, .str);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p20, .str.110);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p21, .str.2);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p22, .str.111);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i25 := $load.i24($M.5, $p24);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i26 := $and.i24($i25, $sub.i24(0, 262144));
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i27 := $or.i24($i26, 618);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p24, $i27);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p28, 0);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.6, $p29);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 1);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 613} {:cexpr "tmp"} boogie_si_record_i64($i33);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i34 == 1;
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p37, .str.111, .str.110, $i11);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i11, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i11, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb14:
    assume $i17 == 1;
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i11, $sub.i32(0, 108));
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb8;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb17;

  $bb71_dummy:
    assume false;
    return;

  $bb41_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4425;
}



const mos7840_bulk_in_callback: ref;

axiom mos7840_bulk_in_callback == $sub.ref(0, 211050);

procedure mos7840_bulk_in_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $CurrAddr, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, assertsPassed;



implementation mos7840_bulk_in_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i64;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i24;
  var $i72: i24;
  var $i73: i24;
  var $p74: ref;
  var $p75: ref;
  var $i76: i8;
  var $i77: i64;
  var $i78: i64;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var $p83: ref;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i24;
  var $i96: i24;
  var $i97: i24;
  var $p98: ref;
  var $p99: ref;
  var $i100: i8;
  var $i101: i64;
  var $i102: i64;
  var $i103: i64;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i8;
  var $i109: i1;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i24;
  var $i122: i24;
  var $i123: i24;
  var $p124: ref;
  var $p125: ref;
  var $i126: i8;
  var $i127: i64;
  var $i128: i64;
  var $i129: i64;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var vslice_dummy_var_21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 646} {:cexpr "status"} boogie_si_record_i32($i6);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i6, 0);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p9, $mul.ref(0, 584)), $mul.ref(32, 1));
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $i35 := mos7840_port_paranoia_check($p34, .str.132);
    call {:si_unique_call 651} {:cexpr "tmp___0"} boogie_si_record_i32($i35);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $p38 := mos7840_get_usb_serial($p34, .str.132);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p34, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} usb_serial_debug_data($p44, .str.132, $i46, $p43);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p9, $mul.ref(0, 584)), $mul.ref(16, 1));
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p86);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i88 := $eq.i64($i87, 0);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p9, $mul.ref(0, 584)), $mul.ref(297, 1));
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.0, $p107);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i8.i1($i108);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p9, $mul.ref(0, 584)), $mul.ref(296, 1));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p110, 1);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p9, $mul.ref(0, 584)), $mul.ref(16, 1));
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $i113 := ldv_usb_submit_urb_28($p112, 32);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 664} {:cexpr "retval"} boogie_si_record_i32($i113);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i114 := $ne.i32($i113, 0);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume $i114 == 1;
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p115, .str);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p116, .str.132);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p117, .str.2);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p118, .str.136);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p119);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i121 := $load.i24($M.5, $p120);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i122 := $and.i24($i121, $sub.i24(0, 262144));
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i123 := $or.i24($i122, 792);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p120, $i123);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p124, 0);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.6, $p125);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i64($i126);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i128 := $and.i64($i127, 1);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $i129 := ldv__builtin_expect($i128, 0);
    call {:si_unique_call 666} {:cexpr "tmp___3"} boogie_si_record_i64($i129);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i130 := $ne.i64($i129, 0);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p9, $mul.ref(0, 584)), $mul.ref(296, 1));
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p132, 0);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i130 == 1;
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p34, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} __dynamic_dev_dbg.ref.ref.ref.i32($p4, $p131, .str.136, $i113);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i109 == 1;
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} mos7840_led_activity($p34);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i88 == 1;
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p89, .str);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p90, .str.132);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p91, .str.2);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p92, .str.7);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i95 := $load.i24($M.5, $p94);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i96 := $and.i24($i95, $sub.i24(0, 262144));
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i97 := $or.i24($i96, 780);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p94, $i97);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p98, 0);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.6, $p99);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i64($i100);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i102 := $and.i64($i101, 1);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $i103 := ldv__builtin_expect($i102, 0);
    call {:si_unique_call 660} {:cexpr "tmp___2"} boogie_si_record_i64($i103);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i104 := $ne.i64($i103, 0);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p9, $mul.ref(0, 584)), $mul.ref(296, 1));
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p106, 0);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb25:
    assume $i104 == 1;
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p34, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p105, .str.7, .str.135);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb17:
    assume $i49 == 1;
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p9, $mul.ref(0, 584)), $mul.ref(32, 1));
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i55 := $zext.i32.i64($i54);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} vslice_dummy_var_21 := tty_insert_flip_string($p52, $p43, $i55);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} tty_flip_buffer_push($p52);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(20, 1));
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i59, $i61);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(20, 1));
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i62);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p65, .str);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p66, .str.132);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p67, .str.2);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p68, .str.134);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i71 := $load.i24($M.5, $p70);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i72 := $and.i24($i71, $sub.i24(0, 262144));
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i73 := $or.i24($i72, 776);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p70, $i73);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p74, 0);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.6, $p75);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i64($i76);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i78 := $and.i64($i77, 1);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} $i79 := ldv__builtin_expect($i78, 0);
    call {:si_unique_call 657} {:cexpr "tmp___1"} boogie_si_record_i64($i79);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i80 == 1;
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p34, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(20, 1));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} __dynamic_dev_dbg.ref.ref.ref.i32($p2, $p81, .str.134, $i84);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb14:
    assume $i40 == 1;
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p9, $mul.ref(0, 584)), $mul.ref(296, 1));
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, 0);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume $i36 == 1;
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p9, $mul.ref(0, 584)), $mul.ref(296, 1));
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, 0);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, .str);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p14, .str.132);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p15, .str.2);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p16, .str.133);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.5, $p18);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 751);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p18, $i21);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p22, 0);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.6, $p23);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 648} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p9, $mul.ref(0, 584)), $mul.ref(296, 1));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 0);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} __dynamic_dev_dbg.ref.ref.ref.i32($p1, $p31, .str.133, $i6);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 212082);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 669} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 213114);

procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: ref)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    return;
}



const mos7840_port_paranoia_check: ref;

axiom mos7840_port_paranoia_check == $sub.ref(0, 214146);

procedure mos7840_port_paranoia_check($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $CurrAddr;



implementation mos7840_port_paranoia_check($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i24;
  var $i34: i24;
  var $i35: i24;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p27, .str);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p28, .str.9);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p29, .str.2);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p30, .str.11);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i33 := $load.i24($M.13, $p32);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i34 := $and.i24($i33, $sub.i24(0, 262144));
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i35 := $or.i24($i34, 693);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $M.13 := $store.i24($M.13, $p32, $i35);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $M.14 := $store.i8($M.14, $p36, 0);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.14, $p37);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i64($i38);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 1);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 676} {:cexpr "tmp___0"} boogie_si_record_i64($i41);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 1);
    goto $bb6;

  $bb10:
    assume $i42 == 1;
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} __dynamic_pr_debug.ref.ref.ref($p3, .str.11, $p1);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p6, .str);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p7, .str.9);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p8, .str.2);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p9, .str.10);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.13, $p11);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 689);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $M.13 := $store.i24($M.13, $p11, $i14);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $M.14 := $store.i8($M.14, $p15, 0);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.14, $p16);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 673} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 1);
    goto $bb6;

  $bb3:
    assume $i21 == 1;
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} __dynamic_pr_debug.ref.ref.ref($p2, .str.10, $p1);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const mos7840_get_usb_serial: ref;

axiom mos7840_get_usb_serial == $sub.ref(0, 215178);

procedure mos7840_get_usb_serial($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $CurrAddr;



implementation mos7840_get_usb_serial($p0: ref, $p1: ref) returns ($r: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $i5 := mos7840_port_paranoia_check($p0, $p1);
    call {:si_unique_call 679} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $i9 := mos7840_serial_paranoia_check($p8, $p1);
    call {:si_unique_call 681} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p4 := $p12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const usb_serial_debug_data: ref;

axiom usb_serial_debug_data == $sub.ref(0, 216210);

procedure usb_serial_debug_data($p0: ref, $p1: ref, $i2: i32, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation usb_serial_debug_data($p0: ref, $p1: ref, $i2: i32, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 683} {:cexpr "usb_serial_debug_data:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.137);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.138);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.139);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 368);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 685} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.ref($p4, $p0, .str.139, $p1, $i2, $i2, $p3);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tty_insert_flip_string: ref;

axiom tty_insert_flip_string == $sub.ref(0, 217242);

procedure tty_insert_flip_string($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_insert_flip_string($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} {:cexpr "tty_insert_flip_string:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $i3 := tty_insert_flip_string_fixed_flag($p0, $p1, 0, $i2);
    call {:si_unique_call 689} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const tty_flip_buffer_push: ref;

axiom tty_flip_buffer_push == $sub.ref(0, 218274);

procedure tty_flip_buffer_push($p0: ref);
  free requires assertsPassed;



implementation tty_flip_buffer_push($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    return;
}



const mos7840_led_activity: ref;

axiom mos7840_led_activity == $sub.ref(0, 219306);

procedure mos7840_led_activity($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $CurrAddr, assertsPassed;



implementation mos7840_led_activity($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var vslice_dummy_var_22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $p1 := usb_get_serial_port_data($p0);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 584)), $mul.ref(576, 1));
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $i4 := test_and_set_bit_lock(1, $p3);
    call {:si_unique_call 692} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} mos7840_set_led_async($p2, 769, 4);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $i6 := msecs_to_jiffies(500);
    call {:si_unique_call 695} {:cexpr "tmp___1"} boogie_si_record_i64($i6);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 584)), $mul.ref(304, 1));
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, jiffies);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i6, $i8);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} vslice_dummy_var_22 := ldv_mod_timer_26($p7, $i9);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_submit_urb_28: ref;

axiom ldv_usb_submit_urb_28 == $sub.ref(0, 220338);

procedure ldv_usb_submit_urb_28($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_28($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} {:cexpr "ldv_usb_submit_urb_28:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} ldv_check_alloc_flags($i1);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $p2 := ldv_undef_ptr();
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 221370);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i1 := $M.15;
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} ldv_error();
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 222402);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 1} true;
    call {:si_unique_call 702} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 703} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 223434);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 704} __VERIFIER_error();
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const usb_get_serial_port_data: ref;

axiom usb_get_serial_port_data == $sub.ref(0, 224466);

procedure usb_get_serial_port_data($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_serial_port_data($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const test_and_set_bit_lock: ref;

axiom test_and_set_bit_lock == $sub.ref(0, 225498);

procedure test_and_set_bit_lock($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit_lock($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} {:cexpr "test_and_set_bit_lock:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $i2 := test_and_set_bit($i0, $p1);
    call {:si_unique_call 708} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mos7840_set_led_async: ref;

axiom mos7840_set_led_async == $sub.ref(0, 226530);

procedure mos7840_set_led_async($p0: ref, $i1: i16, $i2: i16);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation mos7840_set_led_async($p0: ref, $i1: i16, $i2: i16)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var vslice_dummy_var_23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} {:cexpr "mos7840_set_led_async:arg:wval"} boogie_si_record_i16($i1);
    call {:si_unique_call 710} {:cexpr "mos7840_set_led_async:arg:reg"} boogie_si_record_i16($i2);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 584)), $mul.ref(32, 1));
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 584)), $mul.ref(568, 1));
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 64);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 14);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $i1);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p10, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, $i2);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p10, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p15, 0);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $i16 := __create_pipe($p8, 0);
    call {:si_unique_call 712} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 584)), $mul.ref(560, 1));
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i16, $sub.i32(0, 2147483648));
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p10);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} usb_fill_control_urb($p18, $p8, $i19, $p20, $0.ref, 0, mos7840_set_led_callback, $0.ref);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 584)), $mul.ref(560, 1));
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} vslice_dummy_var_23 := ldv_usb_submit_urb_24($p22, 32);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 227562);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} {:cexpr "msecs_to_jiffies:arg:m"} boogie_si_record_i32($i0);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $i1 := __msecs_to_jiffies($i0);
    call {:si_unique_call 717} {:cexpr "tmp___0"} boogie_si_record_i64($i1);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mod_timer_26: ref;

axiom ldv_mod_timer_26 == $sub.ref(0, 228594);

procedure ldv_mod_timer_26($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.0, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23;



implementation ldv_mod_timer_26($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} {:cexpr "ldv_mod_timer_26:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 720} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} activate_pending_timer_1($p0, $i1, 1);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mod_timer: ref;

axiom mod_timer == $sub.ref(0, 229626);

procedure mod_timer($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mod_timer($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 722} {:cexpr "mod_timer:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 1} true;
    call {:si_unique_call 723} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 724} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const activate_pending_timer_1: ref;

axiom activate_pending_timer_1 == $sub.ref(0, 230658);

procedure activate_pending_timer_1($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;
  modifies $M.16, $M.0, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23;



implementation activate_pending_timer_1($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} {:cexpr "activate_pending_timer_1:arg:data"} boogie_si_record_i64($i1);
    call {:si_unique_call 726} {:cexpr "activate_pending_timer_1:arg:pending_flag"} boogie_si_record_i32($i2);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $p3 := $M.16;
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i4, $i5);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $M.18;
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i13, $i14);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p21 := $M.20;
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p30 := $M.22;
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p0);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i31, $i32);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} activate_suitable_timer_1($p0, $i1);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i33 == 1;
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i34 := $M.23;
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i35 == 1);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i2, 0);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $M.22 := $p0;
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p37 := $M.22;
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p38, $i1);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 730} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb32;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i25 := $M.21;
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i26 == 1);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i2, 0);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $M.20 := $p0;
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p28 := $M.20;
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i1);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 729} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb23;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i16 := $M.19;
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i17 == 1);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i2, 0);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.18 := $p0;
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $p19 := $M.18;
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i1);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $M.19 := 1;
    call {:si_unique_call 728} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb14;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i7 := $M.17;
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 2);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.16 := $p0;
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $p10 := $M.16;
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i1);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 727} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb4;
}



const activate_suitable_timer_1: ref;

axiom activate_suitable_timer_1 == $sub.ref(0, 231690);

procedure activate_suitable_timer_1($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.16, $M.0, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23;



implementation activate_suitable_timer_1($p0: ref, $i1: i64)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} {:cexpr "activate_suitable_timer_1:arg:data"} boogie_si_record_i64($i1);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i2 := $M.17;
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i4 := $M.17;
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $M.19;
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i9 == 1);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i10 := $M.19;
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $M.21;
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i15 == 1);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i16 := $M.21;
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i20 := $M.23;
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i21 == 1);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $i22 := $M.23;
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.22 := $p0;
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $p24 := $M.22;
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i1);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 736} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $M.20 := $p0;
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $p18 := $M.20;
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i1);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 735} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.18 := $p0;
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $p12 := $M.18;
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i1);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $M.19 := 1;
    call {:si_unique_call 734} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $M.16 := $p0;
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $p6 := $M.16;
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, $i1);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 733} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const __msecs_to_jiffies: ref;

axiom __msecs_to_jiffies == $sub.ref(0, 232722);

procedure __msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation __msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 737} {:cexpr "__msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 1} true;
    call {:si_unique_call 738} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 739} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 233754);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const mos7840_set_led_callback: ref;

axiom mos7840_set_led_callback == $sub.ref(0, 234786);

procedure mos7840_set_led_callback($p0: ref);



const usb_fill_control_urb: ref;

axiom usb_fill_control_urb == $sub.ref(0, 235818);

procedure usb_fill_control_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $i5: i32, $p6: ref, $p7: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_control_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $i5: i32, $p6: ref, $p7: ref)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} {:cexpr "usb_fill_control_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 742} {:cexpr "usb_fill_control_urb:arg:buffer_length"} boogie_si_record_i32($i5);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i2);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p3);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p4);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i5);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p6);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p7);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_24: ref;

axiom ldv_usb_submit_urb_24 == $sub.ref(0, 236850);

procedure ldv_usb_submit_urb_24($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_24($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} {:cexpr "ldv_usb_submit_urb_24:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} ldv_check_alloc_flags($i1);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $p2 := ldv_undef_ptr();
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 237882);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 747} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 748} devirtbounce(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.24, $p2);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 238914);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const tty_insert_flip_string_fixed_flag: ref;

axiom tty_insert_flip_string_fixed_flag == $sub.ref(0, 239946);

procedure tty_insert_flip_string_fixed_flag($p0: ref, $p1: ref, $i2: i8, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_insert_flip_string_fixed_flag($p0: ref, $p1: ref, $i2: i8, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 749} {:cexpr "tty_insert_flip_string_fixed_flag:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 750} {:cexpr "tty_insert_flip_string_fixed_flag:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 1} true;
    call {:si_unique_call 751} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 752} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const mos7840_serial_paranoia_check: ref;

axiom mos7840_serial_paranoia_check == $sub.ref(0, 240978);

procedure mos7840_serial_paranoia_check($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $CurrAddr;



implementation mos7840_serial_paranoia_check($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i24;
  var $i34: i24;
  var $i35: i24;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p27, .str);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p28, .str.66);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p29, .str.2);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p30, .str.68);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i33 := $load.i24($M.13, $p32);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i34 := $and.i24($i33, $sub.i24(0, 262144));
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i35 := $or.i24($i34, 709);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $M.13 := $store.i24($M.13, $p32, $i35);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $M.14 := $store.i8($M.14, $p36, 0);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.14, $p37);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i64($i38);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 1);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 759} {:cexpr "tmp___0"} boogie_si_record_i64($i41);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 1);
    goto $bb6;

  $bb10:
    assume $i42 == 1;
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} __dynamic_pr_debug.ref.ref.ref($p3, .str.68, $p1);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p6, .str);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p7, .str.66);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p8, .str.2);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p9, .str.67);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.13, $p11);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 705);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $M.13 := $store.i24($M.13, $p11, $i14);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $M.14 := $store.i8($M.14, $p15, 0);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.14, $p16);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 756} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 1);
    goto $bb6;

  $bb3:
    assume $i21 == 1;
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} __dynamic_pr_debug.ref.ref.ref($p2, .str.67, $p1);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 242010);

procedure __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    return;
}



const mos7840_get_port_private: ref;

axiom mos7840_get_port_private == $sub.ref(0, 243042);

procedure mos7840_get_port_private($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation mos7840_get_port_private($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $p1 := usb_get_serial_port_data($p0);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const mos7840_get_reg: ref;

axiom mos7840_get_reg == $sub.ref(0, 244074);

procedure mos7840_get_reg($p0: ref, $i1: i16, $i2: i16, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation mos7840_get_reg($p0: ref, $i1: i16, $i2: i16, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} {:cexpr "mos7840_get_reg:arg:Wval"} boogie_si_record_i16($i1);
    call {:si_unique_call 763} {:cexpr "mos7840_get_reg:arg:reg"} boogie_si_record_i16($i2);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 584)), $mul.ref(32, 1));
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 584)), $mul.ref(56, 1));
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 584)), $mul.ref(64, 1));
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 584)), $mul.ref(576, 1));
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $i15 := test_and_set_bit_lock(0, $p14);
    call {:si_unique_call 765} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $sub.i8(0, 64));
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 13);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p11, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, $i1);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p11, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, $i2);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p11, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p22, 2);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i23 := __create_pipe($p9, 0);
    call {:si_unique_call 767} {:cexpr "tmp___0"} boogie_si_record_i32($i23);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 584)), $mul.ref(48, 1));
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i23, $sub.i32(0, 2147483520));
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p11);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p0);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} usb_fill_control_urb($p25, $p9, $i26, $p27, $p13, 2, mos7840_control_callback, $p28);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 584)), $mul.ref(48, 1));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 2);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 584)), $mul.ref(48, 1));
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $i34 := ldv_usb_submit_urb_23($p33, 32);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    call {:si_unique_call 770} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i17 := $i34;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb5:
    assume $i35 == 1;
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 584)), $mul.ref(576, 1));
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} clear_bit_unlock(0, $p36);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 16);
    goto $bb3;
}



const ldv_usb_submit_urb_27: ref;

axiom ldv_usb_submit_urb_27 == $sub.ref(0, 245106);

procedure ldv_usb_submit_urb_27($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_27($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} {:cexpr "ldv_usb_submit_urb_27:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} ldv_check_alloc_flags($i1);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $p2 := ldv_undef_ptr();
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 246138);

procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    return;
}



const mos7840_control_callback: ref;

axiom mos7840_control_callback == $sub.ref(0, 247170);

procedure mos7840_control_callback($p0: ref);



const ldv_usb_submit_urb_23: ref;

axiom ldv_usb_submit_urb_23 == $sub.ref(0, 248202);

procedure ldv_usb_submit_urb_23($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_23($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} {:cexpr "ldv_usb_submit_urb_23:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} ldv_check_alloc_flags($i1);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $p2 := ldv_undef_ptr();
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const clear_bit_unlock: ref;

axiom clear_bit_unlock == $sub.ref(0, 249234);

procedure clear_bit_unlock($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit_unlock($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} {:cexpr "clear_bit_unlock:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 779} devirtbounce.1(0);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} clear_bit($i0, $p1);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 250266);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 782} devirtbounce.2(0, $p1, $i0, $p1);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    return;
}



const mos7840_handle_new_msr: ref;

axiom mos7840_handle_new_msr == $sub.ref(0, 251298);

procedure mos7840_handle_new_msr($p0: ref, $i1: i8);



const mos7840_handle_new_lsr: ref;

axiom mos7840_handle_new_lsr == $sub.ref(0, 252330);

procedure mos7840_handle_new_lsr($p0: ref, $i1: i8);



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 253362);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);



const mos7840_set_uart_reg: ref;

axiom mos7840_set_uart_reg == $sub.ref(0, 254394);

procedure mos7840_set_uart_reg($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mos7840_set_uart_reg($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i16;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i16;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i16;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i16;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i16;
  var $i42: i16;
  var $i27: i16;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i24;
  var $i60: i24;
  var $i61: i24;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i64;
  var $i66: i64;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i16;
  var $i75: i32;
  var $i76: i16;
  var $i77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 784} {:cexpr "mos7840_set_uart_reg:arg:reg"} boogie_si_record_i16($i1);
    call {:si_unique_call 785} {:cexpr "mos7840_set_uart_reg:arg:val"} boogie_si_record_i16($i2);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i2);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 255);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    call {:si_unique_call 786} {:cexpr "val"} boogie_si_record_i16($i10);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 4);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i45, 2);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i47 := $shl.i32($i46, 8);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i49 := $sext.i16.i32($i48);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i50 := $sext.i16.i32($i10);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i51 := $or.i32($i49, $i50);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    call {:si_unique_call 791} {:cexpr "val"} boogie_si_record_i16($i52);
    assume {:verifier.code 0} true;
    $i42 := $i52;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i27 := $i42;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p53, .str);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p54, .str.12);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p55, .str.2);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p56, .str.13);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i59 := $load.i24($M.5, $p58);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i60 := $and.i24($i59, $sub.i24(0, 262144));
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $i61 := $or.i24($i60, 318);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p58, $i61);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p62, 0);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.6, $p63);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i64($i64);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i66 := $and.i64($i65, 1);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $i67 := ldv__builtin_expect($i66, 0);
    call {:si_unique_call 789} {:cexpr "tmp"} boogie_si_record_i64($i67);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $i71 := __create_pipe($p7, 0);
    call {:si_unique_call 794} {:cexpr "tmp___0"} boogie_si_record_i32($i71);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i72 := $or.i32($i71, $sub.i32(0, 2147483648));
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i73 := $zext.i16.i32($i27);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i16($i73);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i1);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i16($i75);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i77 := usb_control_msg($p7, $i72, 14, 64, $i74, $i76, $0.ref, 0, 5000);
    call {:si_unique_call 796} {:cexpr "tmp___1"} boogie_si_record_i32($i77);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $r := $i77;
    return;

  $bb7:
    assume $i68 == 1;
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i27);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p69, .str.13, .str.12, $i70);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, 1);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i36 := $shl.i32($i35, 8);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i38 := $sext.i16.i32($i37);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i39 := $sext.i16.i32($i10);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i38, $i39);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    call {:si_unique_call 790} {:cexpr "val"} boogie_si_record_i16($i41);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb6;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i21 := $shl.i32($i20, 8);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i23 := $sext.i16.i32($i22);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i24 := $sext.i16.i32($i10);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i23, $i24);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    call {:si_unique_call 787} {:cexpr "val"} boogie_si_record_i16($i26);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb3;
}



const usb_control_msg: ref;

axiom usb_control_msg == $sub.ref(0, 255426);

procedure usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 797} {:cexpr "usb_control_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 798} {:cexpr "usb_control_msg:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 799} {:cexpr "usb_control_msg:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 800} {:cexpr "usb_control_msg:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 801} {:cexpr "usb_control_msg:arg:arg5"} boogie_si_record_i16($i5);
    call {:si_unique_call 802} {:cexpr "usb_control_msg:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 803} {:cexpr "usb_control_msg:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 1} true;
    call {:si_unique_call 804} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 805} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const mos7840_get_uart_reg: ref;

axiom mos7840_get_uart_reg == $sub.ref(0, 256458);

procedure mos7840_get_uart_reg($p0: ref, $i1: i16, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed;



implementation mos7840_get_uart_reg($p0: ref, $i1: i16, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i16;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i8;
  var $i32: i16;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i16;
  var $p38: ref;
  var $i39: i8;
  var $i40: i16;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i16;
  var $i37: i16;
  var $i25: i16;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i24;
  var $i52: i24;
  var $i53: i24;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i16;
  var $i67: i32;
  var $i68: i16;
  var $i69: i32;
  var $i70: i8;
  var $i71: i16;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 807} {:cexpr "mos7840_get_uart_reg:arg:reg"} boogie_si_record_i16($i1);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $p8 := kmalloc(1, 208);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 4);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i16($i39);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, 2);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i43 := $shl.i32($i42, 8);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    call {:si_unique_call 813} {:cexpr "Wval"} boogie_si_record_i16($i44);
    assume {:verifier.code 0} true;
    $i37 := $i44;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i25 := $i37;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p45, .str);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p46, .str.69);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p47, .str.2);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p48, .str.13);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i51 := $load.i24($M.5, $p50);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i52 := $and.i24($i51, $sub.i24(0, 262144));
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i53 := $or.i24($i52, 352);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p50, $i53);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p54, 0);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.6, $p55);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i64($i56);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i58 := $and.i64($i57, 1);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 811} {:cexpr "tmp___0"} boogie_si_record_i64($i59);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $i63 := __create_pipe($p7, 0);
    call {:si_unique_call 816} {:cexpr "tmp___1"} boogie_si_record_i32($i63);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $i64 := $or.i32($i63, $sub.i32(0, 2147483520));
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i25);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i1);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i16($i67);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $i69 := usb_control_msg($p7, $i64, 13, $sub.i8(0, 64), $i66, $i68, $p8, 1, 5000);
    call {:si_unique_call 818} {:cexpr "ret"} boogie_si_record_i32($i69);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p8);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i16($i70);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, $i71);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} kfree($p8);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i11 := $i69;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb11:
    assume $i60 == 1;
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i25);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p61, .str.13, .str.69, $i62);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i16($i31);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, 1);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i35 := $shl.i32($i34, 8);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    call {:si_unique_call 812} {:cexpr "Wval"} boogie_si_record_i16($i36);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb10;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i16($i19);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 1);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i23 := $shl.i32($i22, 8);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    call {:si_unique_call 809} {:cexpr "Wval"} boogie_si_record_i16($i24);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_127:
    assume !assertsPassed;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 257490);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 821} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} ldv_check_alloc_flags($i1);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $p2 := ldv_undef_ptr();
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 258522);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} free_($p0);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 259554);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 825} $free($p0);
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 260586);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.15;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 826} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 261618);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.15;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} ldv_spin_unlock();
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} ldv_spin_unlock_irqrestore_12($p0, $i1);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 262650);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.15;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $M.15 := 0;
    call {:si_unique_call 830} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_12: ref;

axiom ldv_spin_unlock_irqrestore_12 == $sub.ref(0, 263682);

procedure ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} {:cexpr "ldv_spin_unlock_irqrestore_12:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 264714);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    return;
}



const mos7840_change_port_settings: ref;

axiom mos7840_change_port_settings == $sub.ref(0, 265746);

procedure mos7840_change_port_settings($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.25, $M.26, $M.7, $CurrAddr, assertsPassed;



implementation mos7840_change_port_settings($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i24;
  var $i35: i24;
  var $i36: i24;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i8;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i24;
  var $i68: i24;
  var $i69: i24;
  var $p70: ref;
  var $p71: ref;
  var $i72: i8;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i24;
  var $i86: i24;
  var $i87: i24;
  var $p88: ref;
  var $p89: ref;
  var $i90: i8;
  var $i91: i64;
  var $i92: i64;
  var $i93: i64;
  var $i94: i1;
  var $p95: ref;
  var $i78: i8;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i24;
  var $i104: i24;
  var $i105: i24;
  var $p106: ref;
  var $p107: ref;
  var $i108: i8;
  var $i109: i64;
  var $i110: i64;
  var $i111: i64;
  var $i112: i1;
  var $p113: ref;
  var $i96: i8;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i32;
  var $i118: i8;
  var $i119: i8;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i24;
  var $i129: i24;
  var $i130: i24;
  var $p131: ref;
  var $p132: ref;
  var $i133: i8;
  var $i134: i64;
  var $i135: i64;
  var $i136: i64;
  var $i137: i1;
  var $p138: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i24;
  var $i147: i24;
  var $i148: i24;
  var $p149: ref;
  var $p150: ref;
  var $i151: i8;
  var $i152: i64;
  var $i153: i64;
  var $i154: i64;
  var $i155: i1;
  var $p156: ref;
  var $i139: i8;
  var $p157: ref;
  var $i158: i8;
  var $i159: i32;
  var $i160: i32;
  var $i161: i8;
  var $p162: ref;
  var $p163: ref;
  var $i164: i8;
  var $i165: i32;
  var $i166: i32;
  var $i167: i32;
  var $i168: i32;
  var $i169: i32;
  var $i170: i32;
  var $i171: i32;
  var $i172: i8;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $i180: i24;
  var $i181: i24;
  var $i182: i24;
  var $p183: ref;
  var $p184: ref;
  var $i185: i8;
  var $i186: i64;
  var $i187: i64;
  var $i188: i64;
  var $i189: i1;
  var $p190: ref;
  var $p191: ref;
  var $i192: i8;
  var $i193: i32;
  var $i194: i32;
  var $i195: i16;
  var $i197: i32;
  var $i198: i16;
  var $i200: i32;
  var $i201: i16;
  var $p203: ref;
  var $i204: i8;
  var $i205: i16;
  var $i206: i32;
  var $i207: i16;
  var $i209: i8;
  var $p210: ref;
  var $i211: i32;
  var $i212: i16;
  var $i214: i32;
  var $i215: i16;
  var $p217: ref;
  var $i218: i32;
  var $i219: i1;
  var $p220: ref;
  var $i221: i8;
  var $i222: i32;
  var $i223: i32;
  var $i224: i8;
  var $p225: ref;
  var $i226: i1;
  var $p227: ref;
  var $i228: i8;
  var $i229: i32;
  var $i230: i32;
  var $i231: i8;
  var $p232: ref;
  var $p233: ref;
  var $i234: i8;
  var $i235: i32;
  var $i236: i32;
  var $i237: i8;
  var $p238: ref;
  var $p239: ref;
  var $i240: i8;
  var $i241: i16;
  var $i242: i32;
  var $i243: i16;
  var $i245: i32;
  var $i246: i1;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $i253: i24;
  var $i254: i24;
  var $i255: i24;
  var $p256: ref;
  var $p257: ref;
  var $i258: i8;
  var $i259: i64;
  var $i260: i64;
  var $i261: i64;
  var $i262: i1;
  var $p263: ref;
  var $i264: i32;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $i271: i24;
  var $i272: i24;
  var $i273: i24;
  var $p274: ref;
  var $p275: ref;
  var $i276: i8;
  var $i277: i64;
  var $i278: i64;
  var $i279: i64;
  var $i280: i1;
  var $p281: ref;
  var $i282: i32;
  var $i283: i32;
  var $i284: i16;
  var $p286: ref;
  var $i287: i8;
  var $i288: i1;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $i292: i32;
  var $i293: i1;
  var $p294: ref;
  var $p295: ref;
  var $p296: ref;
  var $p297: ref;
  var $p298: ref;
  var $p299: ref;
  var $i300: i24;
  var $i301: i24;
  var $i302: i24;
  var $p303: ref;
  var $p304: ref;
  var $i305: i8;
  var $i306: i64;
  var $i307: i64;
  var $i308: i64;
  var $i309: i1;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $p314: ref;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $i318: i24;
  var $i319: i24;
  var $i320: i24;
  var $p321: ref;
  var $p322: ref;
  var $i323: i8;
  var $i324: i64;
  var $i325: i64;
  var $i326: i64;
  var $i327: i1;
  var $p328: ref;
  var $p329: ref;
  var $i330: i8;
  var $i331: i32;
  var vslice_dummy_var_24: i32;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p1);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(32, 1));
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $i18 := mos7840_port_paranoia_check($p17, .str.76);
    call {:si_unique_call 846} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p17, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $i22 := mos7840_serial_paranoia_check($p21, .str.76);
    call {:si_unique_call 848} {:cexpr "tmp___0"} boogie_si_record_i32($i22);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(26, 1));
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i26 := $sext.i8.i32($i25);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    call {:si_unique_call 852} {:cexpr "cflag"} boogie_si_record_i32($i47);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 48);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, 32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i48, 48);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i48, 48);
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb22, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i56 := 3;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i47, 256);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i58 == 1);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p97, .str);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p98, .str.76);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p99, .str.2);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p100, .str.79);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i103 := $load.i24($M.5, $p102);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i104 := $and.i24($i103, $sub.i24(0, 262144));
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $i105 := $or.i24($i104, 1772);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p102, $i105);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p106, 0);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.6, $p107);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i64($i108);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i110 := $and.i64($i109, 1);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $i111 := ldv__builtin_expect($i110, 0);
    call {:si_unique_call 854} {:cexpr "tmp___4"} boogie_si_record_i64($i111);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i112 := $ne.i64($i111, 0);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i96 := 0;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i114 := $and.i32($i47, 1073741824);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    $i119 := $i96;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i120 := $and.i32($i47, 64);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i121 == 1);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p140, .str);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p141, .str.76);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p142, .str.2);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p143, .str.81);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i146 := $load.i24($M.5, $p145);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i147 := $and.i24($i146, $sub.i24(0, 262144));
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i148 := $or.i24($i147, 1784);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p145, $i148);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p149, 0);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i151 := $load.i8($M.6, $p150);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i64($i151);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i153 := $and.i64($i152, 1);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $i154 := ldv__builtin_expect($i153, 0);
    call {:si_unique_call 866} {:cexpr "tmp___6"} boogie_si_record_i64($i154);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i155 := $ne.i64($i154, 0);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i139 := 0;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(24, 1));
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i158 := $load.i8($M.0, $p157);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i159 := $zext.i8.i32($i158);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i160 := $and.i32($i159, 192);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $i161 := $trunc.i32.i8($i160);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(24, 1));
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p162, $i161);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(24, 1));
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i164 := $load.i8($M.0, $p163);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i165 := $zext.i8.i32($i164);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i166 := $zext.i8.i32($i56);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i167 := $zext.i8.i32($i119);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i168 := $or.i32($i166, $i167);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i169 := $zext.i8.i32($i139);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i170 := $or.i32($i168, $i169);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i171 := $or.i32($i165, $i170);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i172 := $trunc.i32.i8($i171);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(24, 1));
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p173, $i172);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p174, .str);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p175, .str.76);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p176, .str.2);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p177, .str.82);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $p179 := $bitcast.ref.ref($p178);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i180 := $load.i24($M.5, $p179);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i181 := $and.i24($i180, $sub.i24(0, 262144));
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i182 := $or.i24($i181, 1793);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p179, $i182);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p183, 0);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i185 := $load.i8($M.6, $p184);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i64($i185);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $i187 := $and.i64($i186, 1);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $i188 := ldv__builtin_expect($i187, 0);
    call {:si_unique_call 869} {:cexpr "tmp___7"} boogie_si_record_i64($i188);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $i189 := $ne.i64($i188, 0);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i194 := $zext.i16.i32(0);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i195 := $trunc.i32.i16($i194);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} vslice_dummy_var_24 := mos7840_set_uart_reg($p17, 1, $i195);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i197 := $zext.i16.i32(0);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i198 := $trunc.i32.i16($i197);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} vslice_dummy_var_25 := mos7840_set_uart_reg($p17, 2, $i198);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $i200 := $zext.i16.i32(207);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $i201 := $trunc.i32.i16($i200);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} vslice_dummy_var_26 := mos7840_set_uart_reg($p17, 2, $i201);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(24, 1));
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $i204 := $load.i8($M.0, $p203);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i205 := $zext.i8.i16($i204);
    call {:si_unique_call 875} {:cexpr "Data"} boogie_si_record_i16($i205);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i206 := $zext.i16.i32($i205);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i207 := $trunc.i32.i16($i206);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} vslice_dummy_var_27 := mos7840_set_uart_reg($p17, 3, $i207);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $i209 := $trunc.i16.i8(11);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(25, 1));
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p210, $i209);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $i211 := $zext.i16.i32(11);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i212 := $trunc.i32.i16($i211);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} vslice_dummy_var_28 := mos7840_set_uart_reg($p17, 4, $i212);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i214 := $zext.i16.i32(11);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i215 := $trunc.i32.i16($i214);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} vslice_dummy_var_29 := mos7840_set_uart_reg($p17, 4, $i215);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(25, 1));
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p217, 8);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i218 := $and.i32($i47, 4111);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i219 := $ne.i32($i218, 0);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i219} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i226 := $slt.i32($i47, 0);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    assume {:branchcond $i226} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i226 == 1);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(25, 1));
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $i234 := $load.i8($M.0, $p233);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i235 := $zext.i8.i32($i234);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i236 := $and.i32($i235, 223);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i237 := $trunc.i32.i8($i236);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(25, 1));
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p238, $i237);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(25, 1));
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i240 := $load.i8($M.0, $p239);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i241 := $zext.i8.i16($i240);
    call {:si_unique_call 879} {:cexpr "Data"} boogie_si_record_i16($i241);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i242 := $zext.i16.i32($i241);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i243 := $trunc.i32.i16($i242);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} vslice_dummy_var_30 := mos7840_set_uart_reg($p17, 4, $i243);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} $i245 := tty_get_baud_rate($p0);
    call {:si_unique_call 882} {:cexpr "tmp___8"} boogie_si_record_i32($i245);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i245, 0);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i246} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    $i264 := $i245;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p265, .str);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p266, .str.76);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p267, .str.2);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p268, .str.84);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $p270 := $bitcast.ref.ref($p269);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $i271 := $load.i24($M.5, $p270);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i272 := $and.i24($i271, $sub.i24(0, 262144));
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i273 := $or.i24($i272, 1838);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p270, $i273);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p274, 0);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i276 := $load.i8($M.6, $p275);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i277 := $zext.i8.i64($i276);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $i278 := $and.i64($i277, 1);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $i279 := ldv__builtin_expect($i278, 0);
    call {:si_unique_call 887} {:cexpr "tmp___10"} boogie_si_record_i64($i279);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i280 := $ne.i64($i279, 0);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} $i282 := mos7840_send_cmd_write_baud_rate($p1, $i264);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    call {:si_unique_call 890} {:cexpr "status"} boogie_si_record_i32($i282);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i283 := $zext.i16.i32(12);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $i284 := $trunc.i32.i16($i283);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} vslice_dummy_var_31 := mos7840_set_uart_reg($p17, 1, $i284);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(296, 1));
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $i287 := $load.i8($M.0, $p286);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $i288 := $trunc.i8.i1($i287);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i288 == 1);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(296, 1));
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p289, 1);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(16, 1));
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $p291 := $load.ref($M.0, $p290);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} $i292 := ldv_usb_submit_urb_33($p291, 208);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    call {:si_unique_call 893} {:cexpr "status"} boogie_si_record_i32($i292);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i293 := $ne.i32($i292, 0);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i293} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p312, .str);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p313, .str.76);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p314, .str.2);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p315, .str.85);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $p317 := $bitcast.ref.ref($p316);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i318 := $load.i24($M.5, $p317);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i319 := $and.i24($i318, $sub.i24(0, 262144));
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i320 := $or.i24($i319, 1855);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p317, $i320);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p321, 0);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i323 := $load.i8($M.6, $p322);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i324 := $zext.i8.i64($i323);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i325 := $and.i64($i324, 1);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $i326 := ldv__builtin_expect($i325, 0);
    call {:si_unique_call 898} {:cexpr "tmp___12"} boogie_si_record_i64($i326);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i327 := $ne.i64($i326, 0);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i327} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb90:
    assume $i327 == 1;
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($p17, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(24, 1));
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $i330 := $load.i8($M.0, $p329);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i331 := $zext.i8.i32($i330);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p13, $p328, .str.85, .str.76, $i331);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb83:
    assume $i293 == 1;
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p294, .str);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p295, .str.76);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p296, .str.2);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p297, .str.75);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $p299 := $bitcast.ref.ref($p298);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $i300 := $load.i24($M.5, $p299);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $i301 := $and.i24($i300, $sub.i24(0, 262144));
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i302 := $or.i24($i301, 1850);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p299, $i302);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p303, 0);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $i305 := $load.i8($M.6, $p304);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $i306 := $zext.i8.i64($i305);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i307 := $and.i64($i306, 1);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} $i308 := ldv__builtin_expect($i307, 0);
    call {:si_unique_call 895} {:cexpr "tmp___11"} boogie_si_record_i64($i308);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i309 := $ne.i64($i308, 0);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i309} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(296, 1));
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p311, 0);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb85:
    assume $i309 == 1;
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p17, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} __dynamic_dev_dbg.ref.ref.ref.i32($p12, $p310, .str.75, $i292);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    goto $bb87;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb81:
    assume $i288 == 1;
    assume {:verifier.code 0} true;
    goto $bb89;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb78:
    assume $i280 == 1;
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p17, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p11, $p281, .str.84, .str.76, $i264);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb72:
    assume $i246 == 1;
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p247, .str);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p248, .str.76);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p249, .str.2);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p250, .str.7);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $p252 := $bitcast.ref.ref($p251);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $i253 := $load.i24($M.5, $p252);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i254 := $and.i24($i253, $sub.i24(0, 262144));
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $i255 := $or.i24($i254, 1834);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p252, $i255);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p256, 0);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i258 := $load.i8($M.6, $p257);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i259 := $zext.i8.i64($i258);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i260 := $and.i64($i259, 1);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $i261 := ldv__builtin_expect($i260, 0);
    call {:si_unique_call 884} {:cexpr "tmp___9"} boogie_si_record_i64($i261);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i262 := $ne.i64($i261, 0);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i262} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i264 := 9600;
    goto $bb77;

  $bb74:
    assume $i262 == 1;
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p17, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} __dynamic_dev_dbg.ref.ref.ref.ref($p10, $p263, .str.7, .str.83);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb69:
    assume $i226 == 1;
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(25, 1));
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i228 := $load.i8($M.0, $p227);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i229 := $zext.i8.i32($i228);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i230 := $or.i32($i229, 32);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i231 := $trunc.i32.i8($i230);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(25, 1));
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p232, $i231);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb66:
    assume $i219 == 1;
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(25, 1));
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i221 := $load.i8($M.0, $p220);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i32($i221);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $i223 := $or.i32($i222, 3);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i224 := $trunc.i32.i8($i223);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(25, 1));
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p225, $i224);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb63:
    assume $i189 == 1;
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p17, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(24, 1));
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i192 := $load.i8($M.0, $p191);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i193 := $zext.i8.i32($i192);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p9, $p190, .str.82, .str.76, $i193);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb60:
    assume $i155 == 1;
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p17, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} __dynamic_dev_dbg.ref.ref.ref.ref($p8, $p156, .str.81, .str.76);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb54:
    assume $i121 == 1;
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p122, .str);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p123, .str.76);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p124, .str.2);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p125, .str.80);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i128 := $load.i24($M.5, $p127);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $i129 := $and.i24($i128, $sub.i24(0, 262144));
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i130 := $or.i24($i129, 1781);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p127, $i130);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p131, 0);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.6, $p132);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i64($i133);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i135 := $and.i64($i134, 1);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $i136 := ldv__builtin_expect($i135, 0);
    call {:si_unique_call 864} {:cexpr "tmp___5"} boogie_si_record_i64($i136);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i137 := $ne.i64($i136, 0);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i139 := 4;
    goto $bb59;

  $bb56:
    assume $i137 == 1;
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p17, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} __dynamic_dev_dbg.ref.ref.ref.ref($p7, $p138, .str.80, .str.76);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb51:
    assume $i115 == 1;
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i96);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i117 := $or.i32($i116, 32);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i32.i8($i117);
    call {:si_unique_call 862} {:cexpr "lParity"} boogie_si_record_i8($i118);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i119 := $i118;
    goto $bb53;

  $bb48:
    assume $i112 == 1;
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p17, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} __dynamic_dev_dbg.ref.ref.ref.ref($p6, $p113, .str.79, .str.76);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb36:
    assume $i58 == 1;
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i47, 512);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i60 == 1);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p79, .str);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p80, .str.76);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p81, .str.2);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p82, .str.78);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i85 := $load.i24($M.5, $p84);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i86 := $and.i24($i85, $sub.i24(0, 262144));
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i87 := $or.i24($i86, 1768);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p84, $i87);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p88, 0);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.6, $p89);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i64($i90);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i92 := $and.i64($i91, 1);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $i93 := ldv__builtin_expect($i92, 0);
    call {:si_unique_call 858} {:cexpr "tmp___3"} boogie_si_record_i64($i93);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i78 := 24;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i96 := $i78;
    goto $bb47;

  $bb44:
    assume $i94 == 1;
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p17, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} __dynamic_dev_dbg.ref.ref.ref.ref($p5, $p95, .str.78, .str.76);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb38:
    assume $i60 == 1;
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p61, .str);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p62, .str.76);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p63, .str.2);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p64, .str.77);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i67 := $load.i24($M.5, $p66);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i68 := $and.i24($i67, $sub.i24(0, 262144));
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i69 := $or.i24($i68, 1765);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p66, $i69);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p70, 0);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.6, $p71);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i64($i72);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i74 := $and.i64($i73, 1);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $i75 := ldv__builtin_expect($i74, 0);
    call {:si_unique_call 856} {:cexpr "tmp___2"} boogie_si_record_i64($i75);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i78 := 8;
    goto $bb43;

  $bb40:
    assume $i76 == 1;
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p17, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} __dynamic_dev_dbg.ref.ref.ref.ref($p4, $p77, .str.77, .str.76);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb23;

  $bb20:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i48, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb25;

  $bb26:
    assume $i52 == 1;
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $i56 := 2;
    goto $bb34;

  $bb18:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i48, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i48, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb25;

  $bb30:
    assume $i54 == 1;
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i56 := 1;
    goto $bb34;

  $bb28:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i48, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb25;

  $bb32:
    assume $i55 == 1;
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i56 := 0;
    goto $bb34;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p28, .str);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p29, .str.76);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p30, .str.2);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p31, .str.49);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i34 := $load.i24($M.5, $p33);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i35 := $and.i24($i34, $sub.i24(0, 262144));
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i36 := $or.i24($i35, 1730);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p33, $i36);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p37, 0);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.6, $p38);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i64($i39);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i41 := $and.i64($i40, 1);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $i42 := ldv__builtin_expect($i41, 0);
    call {:si_unique_call 850} {:cexpr "tmp___1"} boogie_si_record_i64($i42);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i43 == 1;
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p17, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p44, .str.49, .str.76);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_submit_urb_34: ref;

axiom ldv_usb_submit_urb_34 == $sub.ref(0, 266778);

procedure ldv_usb_submit_urb_34($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_34($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} {:cexpr "ldv_usb_submit_urb_34:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} ldv_check_alloc_flags($i1);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $p2 := ldv_undef_ptr();
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const tty_get_baud_rate: ref;

axiom tty_get_baud_rate == $sub.ref(0, 267810);

procedure tty_get_baud_rate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_get_baud_rate($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1));
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $i2 := tty_termios_baud_rate($p1);
    call {:si_unique_call 904} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mos7840_send_cmd_write_baud_rate: ref;

axiom mos7840_send_cmd_write_baud_rate == $sub.ref(0, 268842);

procedure mos7840_send_cmd_write_baud_rate($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.26, $M.7, $M.0, $CurrAddr, assertsPassed;



implementation mos7840_send_cmd_write_baud_rate($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i24;
  var $i28: i24;
  var $i29: i24;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i16;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i24;
  var $i52: i24;
  var $i53: i24;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $i62: i16;
  var $i63: i32;
  var $i64: i32;
  var $i65: i16;
  var $i66: i32;
  var $i67: i32;
  var $i68: i16;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i16;
  var $i73: i16;
  var $i74: i32;
  var $i75: i16;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i24;
  var $i85: i24;
  var $i86: i24;
  var $p87: ref;
  var $p88: ref;
  var $i89: i8;
  var $i90: i64;
  var $i91: i64;
  var $i92: i64;
  var $i93: i1;
  var $p94: ref;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i32;
  var $i101: i16;
  var $i102: i16;
  var $i103: i8;
  var $p104: ref;
  var $i105: i16;
  var $i106: i32;
  var $i107: i16;
  var $i109: i32;
  var $i110: i8;
  var $i111: i16;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i24;
  var $i119: i24;
  var $i120: i24;
  var $p121: ref;
  var $p122: ref;
  var $i123: i8;
  var $i124: i64;
  var $i125: i64;
  var $i126: i64;
  var $i127: i1;
  var $p128: ref;
  var $i129: i16;
  var $i130: i32;
  var $i131: i16;
  var $i132: i32;
  var $i133: i16;
  var $i135: i32;
  var $i136: i32;
  var $i137: i32;
  var $i138: i8;
  var $i139: i16;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i24;
  var $i147: i24;
  var $i148: i24;
  var $p149: ref;
  var $p150: ref;
  var $i151: i8;
  var $i152: i64;
  var $i153: i64;
  var $i154: i64;
  var $i155: i1;
  var $p156: ref;
  var $i157: i16;
  var $i158: i32;
  var $i159: i16;
  var $i160: i32;
  var $i161: i16;
  var $p163: ref;
  var $i164: i8;
  var $i165: i16;
  var $i166: i32;
  var $i167: i32;
  var $i168: i16;
  var $i169: i16;
  var $i170: i8;
  var $p171: ref;
  var $i172: i16;
  var $i173: i32;
  var $i174: i16;
  var $i12: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 913} {:cexpr "mos7840_send_cmd_write_baud_rate:arg:baudRate"} boogie_si_record_i32($i1);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p2, 0);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 584)), $mul.ref(32, 1));
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $i15 := mos7840_port_paranoia_check($p14, .str.86);
    call {:si_unique_call 915} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} $i19 := mos7840_serial_paranoia_check($p18, .str.86);
    call {:si_unique_call 917} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p21, .str);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p22, .str.86);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p23, .str.2);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p24, .str.87);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $i27 := $load.i24($M.5, $p26);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i28 := $and.i24($i27, $sub.i24(0, 262144));
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $i29 := $or.i24($i28, 1618);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p26, $i29);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p30, 0);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.6, $p31);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i64($i32);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i33, 1);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 919} {:cexpr "tmp___1"} boogie_si_record_i64($i35);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $M.26 := $store.i16($M.26, $p4, 0);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p3, 0);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $i38 := mos7840_calc_baud_rate_divisor($p14, $i1, $p2, $p4);
    call {:si_unique_call 922} {:cexpr "status"} boogie_si_record_i32($i38);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 584)), $mul.ref(40, 1));
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $i43 := mos7840_get_reg_sync($p14, $i42, $p3);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    call {:si_unique_call 924} {:cexpr "status"} boogie_si_record_i32($i43);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 0);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.7, $p3);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i63 := $sext.i16.i32($i62);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, 143);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i65 := $load.i16($M.26, $p4);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i66 := $sext.i16.i32($i65);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i67 := $or.i32($i64, $i66);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i16($i67);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p3, $i68);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 584)), $mul.ref(40, 1));
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i16($i71);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.7, $p3);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i73);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i16($i74);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} $i76 := mos7840_set_reg_sync($p14, $i72, $i75);
    call {:si_unique_call 929} {:cexpr "status"} boogie_si_record_i32($i76);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i76, 0);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i76, 0);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 584)), $mul.ref(24, 1));
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.0, $p97);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i100 := $or.i32($i99, 128);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i16($i100);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p3, $i101);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i102 := $load.i16($M.7, $p3);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i16.i8($i102);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 584)), $mul.ref(24, 1));
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p104, $i103);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i105 := $load.i16($M.7, $p3);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $i106 := $zext.i16.i32($i105);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i16($i106);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} vslice_dummy_var_32 := mos7840_set_uart_reg($p14, 3, $i107);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.25, $p2);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i32.i8($i109);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i16($i110);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p3, $i111);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p112, .str);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p113, .str.86);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p114, .str.2);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p115, .str.91);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $i118 := $load.i24($M.5, $p117);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i119 := $and.i24($i118, $sub.i24(0, 262144));
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i120 := $or.i24($i119, 1680);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p117, $i120);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p121, 0);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.6, $p122);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i64($i123);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i125 := $and.i64($i124, 1);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $i126 := ldv__builtin_expect($i125, 0);
    call {:si_unique_call 936} {:cexpr "tmp___4"} boogie_si_record_i64($i126);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i127 := $ne.i64($i126, 0);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i131 := $load.i16($M.7, $p3);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i132 := $zext.i16.i32($i131);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i32.i16($i132);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} vslice_dummy_var_33 := mos7840_set_uart_reg($p14, 0, $i133);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.25, $p2);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i136 := $and.i32($i135, 65280);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i137 := $ashr.i32($i136, 8);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i138 := $trunc.i32.i8($i137);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i16($i138);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p3, $i139);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p140, .str);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p141, .str.86);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p142, .str.2);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p143, .str.92);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i146 := $load.i24($M.5, $p145);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i147 := $and.i24($i146, $sub.i24(0, 262144));
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i148 := $or.i24($i147, 1684);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p145, $i148);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p149, 0);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i151 := $load.i8($M.6, $p150);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i64($i151);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i153 := $and.i64($i152, 1);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $i154 := ldv__builtin_expect($i153, 0);
    call {:si_unique_call 940} {:cexpr "tmp___5"} boogie_si_record_i64($i154);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i155 := $ne.i64($i154, 0);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i159 := $load.i16($M.7, $p3);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i160 := $zext.i16.i32($i159);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i161 := $trunc.i32.i16($i160);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} vslice_dummy_var_34 := mos7840_set_uart_reg($p14, 1, $i161);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p0, $mul.ref(0, 584)), $mul.ref(24, 1));
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i164 := $load.i8($M.0, $p163);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $i165 := $zext.i8.i16($i164);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i166 := $zext.i16.i32($i165);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i167 := $and.i32($i166, 65407);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $i168 := $trunc.i32.i16($i167);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p3, $i168);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i169 := $load.i16($M.7, $p3);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i170 := $trunc.i16.i8($i169);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p0, $mul.ref(0, 584)), $mul.ref(24, 1));
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p171, $i170);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $i172 := $load.i16($M.7, $p3);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $i173 := $zext.i16.i32($i172);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i174 := $trunc.i32.i16($i173);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} vslice_dummy_var_35 := mos7840_set_uart_reg($p14, 3, $i174);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i12 := $i76;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb32:
    assume $i155 == 1;
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p14, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i157 := $load.i16($M.7, $p3);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i158 := $zext.i16.i32($i157);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} __dynamic_dev_dbg.ref.ref.ref.i32($p9, $p156, .str.92, $i158);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i127 == 1;
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p14, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $i129 := $load.i16($M.7, $p3);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $i130 := $zext.i16.i32($i129);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} __dynamic_dev_dbg.ref.ref.ref.i32($p8, $p128, .str.91, $i130);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i95 == 1;
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p14, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} dev_err.ref.ref.ref($p96, .str.90, .str.86);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $i12 := $i76;
    goto $bb3;

  $bb20:
    assume $i77 == 1;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p78, .str);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p79, .str.86);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p80, .str.2);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p81, .str.89);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i84 := $load.i24($M.5, $p83);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i85 := $and.i24($i84, $sub.i24(0, 262144));
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i86 := $or.i24($i85, 1664);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p83, $i86);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p87, 0);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.6, $p88);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i64($i89);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i91 := $and.i64($i90, 1);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} $i92 := ldv__builtin_expect($i91, 0);
    call {:si_unique_call 931} {:cexpr "tmp___3"} boogie_si_record_i64($i92);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i92, 0);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  $bb22:
    assume $i93 == 1;
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p14, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} __dynamic_dev_dbg.ref.ref.ref($p7, $p94, .str.89);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb14:
    assume $i44 == 1;
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p45, .str);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p46, .str.86);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p47, .str.2);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p48, .str.88);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i51 := $load.i24($M.5, $p50);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i52 := $and.i24($i51, $sub.i24(0, 262144));
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $i53 := $or.i24($i52, 1657);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p50, $i53);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p54, 0);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.6, $p55);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i64($i56);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $i58 := $and.i64($i57, 1);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 926} {:cexpr "tmp___2"} boogie_si_record_i64($i59);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  $bb16:
    assume $i60 == 1;
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p14, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} __dynamic_dev_dbg.ref.ref.ref($p6, $p61, .str.88);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i36 == 1;
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p14, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p5, $p37, .str.87, .str.86, $i1);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;
}



const ldv_usb_submit_urb_33: ref;

axiom ldv_usb_submit_urb_33 == $sub.ref(0, 269874);

procedure ldv_usb_submit_urb_33($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_33($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} {:cexpr "ldv_usb_submit_urb_33:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} ldv_check_alloc_flags($i1);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} $p2 := ldv_undef_ptr();
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;
}



const mos7840_calc_baud_rate_divisor: ref;

axiom mos7840_calc_baud_rate_divisor == $sub.ref(0, 270906);

procedure mos7840_calc_baud_rate_divisor($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.25, $M.26, $CurrAddr;



implementation mos7840_calc_baud_rate_divisor($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 948} {:cexpr "mos7840_calc_baud_rate_divisor:arg:baudRate"} boogie_si_record_i32($i1);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.93);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.2);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.94);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 1559);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 950} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i22 := $sle.i32($i1, 115200);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i24 := $sgt.i32($i1, 115200);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i27 := $sgt.i32($i1, 230400);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i30 := $sgt.i32($i1, 403200);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i33 := $sgt.i32($i1, 460800);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i36 := $sgt.i32($i1, 806400);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i39 := $sgt.i32($i1, 921600);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i42 := $sgt.i32($i1, 1572864);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb43:
    assume $i42 == 1;
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $i43 := $sle.i32($i1, 3145728);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb45;

  $bb46:
    assume $i43 == 1;
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i44 := $sdiv.i32(3145728, $i1);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p2, $i44);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $M.26 := $store.i16($M.26, $p3, 112);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb37:
    assume $i39 == 1;
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $i40 := $sle.i32($i1, 1572864);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb39;

  $bb40:
    assume $i40 == 1;
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $i41 := $sdiv.i32(1572864, $i1);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p2, $i41);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $M.26 := $store.i16($M.26, $p3, 96);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb31:
    assume $i36 == 1;
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $i37 := $sle.i32($i1, 921600);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb33;

  $bb34:
    assume $i37 == 1;
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $i38 := $sdiv.i32(921600, $i1);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p2, $i38);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $M.26 := $store.i16($M.26, $p3, 80);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb25:
    assume $i33 == 1;
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $i34 := $sle.i32($i1, 806400);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb27;

  $bb28:
    assume $i34 == 1;
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $i35 := $sdiv.i32(806400, $i1);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p2, $i35);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $M.26 := $store.i16($M.26, $p3, 64);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb19:
    assume $i30 == 1;
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i31 := $sle.i32($i1, 460800);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb21;

  $bb22:
    assume $i31 == 1;
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $i32 := $sdiv.i32(460800, $i1);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p2, $i32);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $M.26 := $store.i16($M.26, $p3, 48);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i28 := $sle.i32($i1, 403200);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb15;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i29 := $sdiv.i32(403200, $i1);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p2, $i29);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $M.26 := $store.i16($M.26, $p3, 32);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $i25 := $sle.i32($i1, 230400);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb9;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $i26 := $sdiv.i32(230400, $i1);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p2, $i26);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $M.26 := $store.i16($M.26, $p3, 16);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $i23 := $sdiv.i32(115200, $i1);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p2, $i23);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $M.26 := $store.i16($M.26, $p3, 0);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p4, $p21, .str.94, .str.93, $i1);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mos7840_get_reg_sync: ref;

axiom mos7840_get_reg_sync == $sub.ref(0, 271938);

procedure mos7840_get_reg_sync($p0: ref, $i1: i16, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation mos7840_get_reg_sync($p0: ref, $i1: i16, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i16;
  var $i16: i32;
  var $i17: i8;
  var $i18: i16;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i24;
  var $i26: i24;
  var $i27: i24;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i16;
  var $i38: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 953} {:cexpr "mos7840_get_reg_sync:arg:reg"} boogie_si_record_i16($i1);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} $p8 := kmalloc(1, 208);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} $i12 := __create_pipe($p7, 0);
    call {:si_unique_call 956} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, $sub.i32(0, 2147483520));
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i1);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $i16 := usb_control_msg($p7, $i13, 13, $sub.i8(0, 64), 0, $i15, $p8, 1, 5000);
    call {:si_unique_call 958} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p8);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i16($i17);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p2, $i18);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p19, .str);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p20, .str.44);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p21, .str.2);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p22, .str.45);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $i25 := $load.i24($M.5, $p24);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $i26 := $and.i24($i25, $sub.i24(0, 262144));
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $i27 := $or.i24($i26, 289);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p24, $i27);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p28, 0);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.6, $p29);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 1);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 960} {:cexpr "tmp___1"} boogie_si_record_i64($i33);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} kfree($p8);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i34 == 1;
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i1);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.7, $p2);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p3, $p35, .str.45, .str.44, $i36, $i38);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const mos7840_set_reg_sync: ref;

axiom mos7840_set_reg_sync == $sub.ref(0, 272970);

procedure mos7840_set_reg_sync($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mos7840_set_reg_sync($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i16;
  var $i34: i32;
  var $i35: i16;
  var $i36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 964} {:cexpr "mos7840_set_reg_sync:arg:reg"} boogie_si_record_i16($i1);
    call {:si_unique_call 965} {:cexpr "mos7840_set_reg_sync:arg:val"} boogie_si_record_i16($i2);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i2);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 255);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    call {:si_unique_call 966} {:cexpr "val"} boogie_si_record_i16($i10);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, .str);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p12, .str.46);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p13, .str.2);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p14, .str.47);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.5, $p16);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 261);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p16, $i19);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p20, 0);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.6, $p21);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 968} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} $i30 := __create_pipe($p7, 0);
    call {:si_unique_call 971} {:cexpr "tmp___0"} boogie_si_record_i32($i30);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i30, $sub.i32(0, 2147483648));
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i10);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16($i32);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i1);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $i36 := usb_control_msg($p7, $i31, 14, 64, $i33, $i35, $0.ref, 0, 5000);
    call {:si_unique_call 973} {:cexpr "tmp___1"} boogie_si_record_i32($i36);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i1);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i10);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p3, $p27, .str.47, $i28, $i29);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tty_termios_baud_rate: ref;

axiom tty_termios_baud_rate == $sub.ref(0, 274002);

procedure tty_termios_baud_rate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_termios_baud_rate($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 1} true;
    call {:si_unique_call 974} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 975} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mos7840_get_lsr_info: ref;

axiom mos7840_get_lsr_info == $sub.ref(0, 275034);

procedure mos7840_get_lsr_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation mos7840_get_lsr_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $i3 := mos7840_chars_in_buffer($p0);
    call {:si_unique_call 978} {:cexpr "count"} boogie_si_record_i32($i3);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $i7 := copy_to_user($p5, $p6, 4);
    call {:si_unique_call 980} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 1);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mos7840_get_serial_info: ref;

axiom mos7840_get_serial_info == $sub.ref(0, 276066);

procedure mos7840_get_serial_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation mos7840_get_serial_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i5: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $p2 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p1);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    call {:si_unique_call 982} cmdloc_dummy_var_4 := $memset.i8(cmdloc_dummy_var_3, $p8, 0, 72, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_4;
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 4);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 584)), $mul.ref(32, 1));
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 3016)), $mul.ref(1120, 1));
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 584)), $mul.ref(32, 1));
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(12, 1));
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 0);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 192);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(20, 1));
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 512);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(28, 1));
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 9600);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, 1250);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p26, 7500);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p1);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p2);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $i29 := copy_to_user($p27, $p28, 72);
    call {:si_unique_call 984} {:cexpr "tmp___0"} boogie_si_record_i64($i29);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 14);
    goto $bb3;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb3;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 277098);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 278130);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $i3 := __builtinx_object_size.ref.i32($p1, 0);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 987} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 988} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} __might_fault(.str.99, 732);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 991} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $i15 := _copy_to_user($p0, $p1, $i14);
    call {:si_unique_call 993} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 279162);

procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const __might_fault: ref;

axiom __might_fault == $sub.ref(0, 280194);

procedure __might_fault($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __might_fault($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} {:cexpr "__might_fault:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 281226);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 996} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 1} true;
    call {:si_unique_call 997} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 998} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 282258);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 283290);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const mos7840_bulk_out_data_callback: ref;

axiom mos7840_bulk_out_data_callback == $sub.ref(0, 284322);

procedure mos7840_bulk_out_data_callback($p0: ref);



const usb_fill_bulk_urb: ref;

axiom usb_fill_bulk_urb == $sub.ref(0, 285354);

procedure usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} {:cexpr "usb_fill_bulk_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 1000} {:cexpr "usb_fill_bulk_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i2);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p3);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i4);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p5);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p6);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_32: ref;

axiom ldv_usb_submit_urb_32 == $sub.ref(0, 286386);

procedure ldv_usb_submit_urb_32($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_32($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} {:cexpr "ldv_usb_submit_urb_32:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} ldv_check_alloc_flags($i1);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} $p2 := ldv_undef_ptr();
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 287418);

procedure spin_lock($p0: ref);



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 288450);

procedure spin_unlock($p0: ref);



const tty_port_tty_wakeup: ref;

axiom tty_port_tty_wakeup == $sub.ref(0, 289482);

procedure tty_port_tty_wakeup($p0: ref);



const ldv_spin_unlock_9: ref;

axiom ldv_spin_unlock_9 == $sub.ref(0, 290514);

procedure ldv_spin_unlock_9($p0: ref);



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 291546);

procedure _raw_spin_unlock($p0: ref);



const ldv_spin_lock_5: ref;

axiom ldv_spin_lock_5 == $sub.ref(0, 292578);

procedure ldv_spin_lock_5($p0: ref);



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 293610);

procedure _raw_spin_lock($p0: ref);



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 294642);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_urb: ref;

axiom usb_free_urb == $sub.ref(0, 295674);

procedure usb_free_urb($p0: ref);
  free requires assertsPassed;



implementation usb_free_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    return;
}



const usb_clear_halt: ref;

axiom usb_clear_halt == $sub.ref(0, 296706);

procedure usb_clear_halt($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_clear_halt($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1004} {:cexpr "usb_clear_halt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1005} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1006} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_usb_alloc_urb_29: ref;

axiom ldv_usb_alloc_urb_29 == $sub.ref(0, 297738);

procedure ldv_usb_alloc_urb_29($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_29($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} {:cexpr "ldv_usb_alloc_urb_29:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 1008} {:cexpr "ldv_usb_alloc_urb_29:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} ldv_check_alloc_flags($i1);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} $p2 := ldv_undef_ptr();
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const usb_fill_int_urb: ref;

axiom usb_fill_int_urb == $sub.ref(0, 298770);

procedure usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} {:cexpr "usb_fill_int_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 1012} {:cexpr "usb_fill_int_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    call {:si_unique_call 1013} {:cexpr "usb_fill_int_urb:arg:interval"} boogie_si_record_i32($i7);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i2);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p3);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i4);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p5);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p6);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 3);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i16 == 1);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 5);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i7);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $sub.i32(0, 1));
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  $bb2:
    call {:si_unique_call 1014} {:cexpr "usb_fill_int_urb:arg:_max1"} boogie_si_record_i32($i7);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i7, 1);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 16);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i23 := 16;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, $sub.i32(0, 1));
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32(1, $i24);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    goto $bb11;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $i21 := $i7;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;
}



const ldv_usb_submit_urb_30: ref;

axiom ldv_usb_submit_urb_30 == $sub.ref(0, 299802);

procedure ldv_usb_submit_urb_30($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_30($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} {:cexpr "ldv_usb_submit_urb_30:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} ldv_check_alloc_flags($i1);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} $p2 := ldv_undef_ptr();
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const ldv_usb_submit_urb_31: ref;

axiom ldv_usb_submit_urb_31 == $sub.ref(0, 300834);

procedure ldv_usb_submit_urb_31($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_31($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} {:cexpr "ldv_usb_submit_urb_31:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} ldv_check_alloc_flags($i1);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} $p2 := ldv_undef_ptr();
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;
}



const mos7840_set_led_sync: ref;

axiom mos7840_set_led_sync == $sub.ref(0, 301866);

procedure mos7840_set_led_sync($p0: ref, $i1: i16, $i2: i16);
  free requires assertsPassed;



implementation mos7840_set_led_sync($p0: ref, $i1: i16, $i2: i16)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
  var $i11: i32;
  var $i12: i16;
  var vslice_dummy_var_36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} {:cexpr "mos7840_set_led_sync:arg:reg"} boogie_si_record_i16($i1);
    call {:si_unique_call 1022} {:cexpr "mos7840_set_led_sync:arg:val"} boogie_si_record_i16($i2);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} $i7 := __create_pipe($p6, 0);
    call {:si_unique_call 1024} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, $sub.i32(0, 2147483648));
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i2);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i1);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} vslice_dummy_var_36 := usb_control_msg($p6, $i8, 14, 64, $i10, $i12, $0.ref, 0, 5000);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_timer_sync_37: ref;

axiom ldv_del_timer_sync_37 == $sub.ref(0, 302898);

procedure ldv_del_timer_sync_37($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.19, $M.21, $M.23;



implementation ldv_del_timer_sync_37($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $i1 := del_timer_sync($p0);
    call {:si_unique_call 1027} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} disable_suitable_timer_1($p0);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_del_timer_sync_38: ref;

axiom ldv_del_timer_sync_38 == $sub.ref(0, 303930);

procedure ldv_del_timer_sync_38($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.19, $M.21, $M.23;



implementation ldv_del_timer_sync_38($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} $i1 := del_timer_sync($p0);
    call {:si_unique_call 1030} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} disable_suitable_timer_1($p0);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const del_timer_sync: ref;

axiom del_timer_sync == $sub.ref(0, 304962);

procedure del_timer_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1032} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1033} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_suitable_timer_1: ref;

axiom disable_suitable_timer_1 == $sub.ref(0, 305994);

procedure disable_suitable_timer_1($p0: ref);
  free requires assertsPassed;
  modifies $M.17, $M.19, $M.21, $M.23;



implementation disable_suitable_timer_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $i1 := $M.17;
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $M.19;
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i13 := $M.21;
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i19 := $M.23;
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $p22 := $M.22;
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb22;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $M.23 := 0;
    call {:si_unique_call 1037} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $p16 := $M.20;
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i15, $i17);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb16;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $M.21 := 0;
    call {:si_unique_call 1036} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $p10 := $M.18;
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i9, $i11);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $M.19 := 0;
    call {:si_unique_call 1035} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $p4 := $M.16;
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $M.17 := 0;
    call {:si_unique_call 1034} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const usb_get_serial_data: ref;

axiom usb_get_serial_data == $sub.ref(0, 307026);

procedure usb_get_serial_data($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_serial_data($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(264, 1));
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const mos7840_set_port_private: ref;

axiom mos7840_set_port_private == $sub.ref(0, 308058);

procedure mos7840_set_port_private($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation mos7840_set_port_private($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} usb_set_serial_port_data($p0, $p2);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 309090);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 310122);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    return;
}



const mos7840_dump_serial_port: ref;

axiom mos7840_dump_serial_port == $sub.ref(0, 311154);

procedure mos7840_dump_serial_port($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mos7840_dump_serial_port($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i24;
  var $i32: i24;
  var $i33: i24;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i24;
  var $i52: i24;
  var $i53: i24;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.40);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.2);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.41);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 366);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 1043} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p25, .str);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p26, .str.40);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p27, .str.2);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p28, .str.42);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i31 := $load.i24($M.5, $p30);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i32 := $and.i24($i31, $sub.i24(0, 262144));
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $i33 := $or.i24($i32, 367);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p30, $i33);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p34, 0);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.6, $p35);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i64($i36);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i38 := $and.i64($i37, 1);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} $i39 := ldv__builtin_expect($i38, 0);
    call {:si_unique_call 1046} {:cexpr "tmp___0"} boogie_si_record_i64($i39);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p45, .str);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p46, .str.40);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p47, .str.2);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p48, .str.43);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $i51 := $load.i24($M.5, $p50);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $i52 := $and.i24($i51, $sub.i24(0, 262144));
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $i53 := $or.i24($i52, 368);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p50, $i53);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p54, 0);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.6, $p55);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i64($i56);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i58 := $and.i64($i57, 1);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 1049} {:cexpr "tmp___1"} boogie_si_record_i64($i59);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i60 == 1;
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(42, 1));
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} __dynamic_dev_dbg.ref.ref.ref.i32($p4, $p61, .str.43, $i64);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i40 == 1;
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(41, 1));
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} __dynamic_dev_dbg.ref.ref.ref.i32($p3, $p41, .str.42, $i44);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(40, 1));
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} __dynamic_dev_dbg.ref.ref.ref.i32($p2, $p21, .str.41, $i24);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_alloc_urb_35: ref;

axiom ldv_usb_alloc_urb_35 == $sub.ref(0, 312186);

procedure ldv_usb_alloc_urb_35($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_35($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} {:cexpr "ldv_usb_alloc_urb_35:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 1052} {:cexpr "ldv_usb_alloc_urb_35:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} ldv_check_alloc_flags($i1);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $p2 := ldv_undef_ptr();
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;
}



const ldv_usb_alloc_urb_36: ref;

axiom ldv_usb_alloc_urb_36 == $sub.ref(0, 313218);

procedure ldv_usb_alloc_urb_36($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_36($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} {:cexpr "ldv_usb_alloc_urb_36:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 1056} {:cexpr "ldv_usb_alloc_urb_36:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} ldv_check_alloc_flags($i1);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $p2 := ldv_undef_ptr();
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;
}



const mos7840_led_off: ref;

axiom mos7840_led_off == $sub.ref(0, 314250);

procedure mos7840_led_off($i0: i64);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, assertsPassed;



implementation mos7840_led_off($i0: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var vslice_dummy_var_37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} {:cexpr "mos7840_led_off:arg:arg"} boogie_si_record_i64($i0);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} mos7840_set_led_async($p1, 768, 4);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} $i2 := msecs_to_jiffies(500);
    call {:si_unique_call 1062} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(432, 1));
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, jiffies);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i2, $i4);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} vslice_dummy_var_37 := ldv_mod_timer_25($p3, $i5);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;
}



const reg_timer_1: ref;

axiom reg_timer_1 == $sub.ref(0, 315282);

procedure reg_timer_1($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.0, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23;



implementation reg_timer_1($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} {:cexpr "reg_timer_1:arg:data"} boogie_si_record_i64($i2);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(mos7840_led_off));
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} activate_suitable_timer_1($p0, $i2);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mos7840_led_flag_off: ref;

axiom mos7840_led_flag_off == $sub.ref(0, 316314);

procedure mos7840_led_flag_off($i0: i64);
  free requires assertsPassed;



implementation mos7840_led_flag_off($i0: i64)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} {:cexpr "mos7840_led_flag_off:arg:arg"} boogie_si_record_i64($i0);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 584)), $mul.ref(576, 1));
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} clear_bit_unlock(1, $p2);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mod_timer_25: ref;

axiom ldv_mod_timer_25 == $sub.ref(0, 317346);

procedure ldv_mod_timer_25($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.0, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23;



implementation ldv_mod_timer_25($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} {:cexpr "ldv_mod_timer_25:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 1070} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} activate_pending_timer_1($p0, $i1, 1);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_set_serial_port_data: ref;

axiom usb_set_serial_port_data == $sub.ref(0, 318378);

procedure usb_set_serial_port_data($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_set_serial_port_data($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} dev_set_drvdata($p2, $p1);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 319410);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    return;
}



const mos7810_check: ref;

axiom mos7810_check == $sub.ref(0, 320442);

procedure mos7810_check($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation mos7810_check($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i8;
  var $i14: i16;
  var $i15: i16;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i8;
  var $i32: i16;
  var $i33: i16;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i16;
  var $i52: i1;
  var $i4: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i69: i8;
  var $i70: i16;
  var $i68: i16;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i93: i8;
  var $i94: i16;
  var $i92: i16;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $i117: i8;
  var $i118: i16;
  var $i116: i16;
  var $i119: i32;
  var $i120: i32;
  var $i121: i32;
  var $i122: i32;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $p126: ref;
  var $i127: i32;
  var $p128: ref;
  var $p129: ref;
  var $i130: i32;
  var $p132: ref;
  var $p133: ref;
  var $i134: i32;
  var $p135: ref;
  var $p136: ref;
  var $i137: i32;
  var $i138: i32;
  var $i139: i1;
  var $i141: i8;
  var $i142: i16;
  var $i140: i16;
  var $i143: i32;
  var $i144: i32;
  var $i145: i32;
  var $i146: i32;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $i151: i32;
  var $p152: ref;
  var $p153: ref;
  var $i154: i32;
  var $p156: ref;
  var $p157: ref;
  var $i158: i32;
  var $p159: ref;
  var $p160: ref;
  var $i161: i32;
  var $i162: i32;
  var $i163: i1;
  var $i165: i8;
  var $i166: i16;
  var $i164: i16;
  var $i167: i32;
  var $i168: i32;
  var $i169: i32;
  var $i170: i32;
  var $i171: i32;
  var $i172: i1;
  var $p173: ref;
  var $p174: ref;
  var $i175: i32;
  var $p176: ref;
  var $p177: ref;
  var $i178: i32;
  var $p180: ref;
  var $p181: ref;
  var $i182: i32;
  var $p183: ref;
  var $p184: ref;
  var $i185: i32;
  var $i186: i32;
  var $i187: i1;
  var $i189: i8;
  var $i190: i16;
  var $i188: i16;
  var $i191: i32;
  var $i192: i32;
  var $i193: i32;
  var $i194: i32;
  var $i195: i32;
  var $i196: i1;
  var $p197: ref;
  var $p198: ref;
  var $i199: i32;
  var $p200: ref;
  var $p201: ref;
  var $i202: i32;
  var $p204: ref;
  var $p205: ref;
  var $i206: i32;
  var $p207: ref;
  var $p208: ref;
  var $i209: i32;
  var $i210: i32;
  var $i211: i1;
  var $i213: i8;
  var $i214: i16;
  var $i212: i16;
  var $i215: i32;
  var $i216: i32;
  var $i217: i32;
  var $i218: i32;
  var $i219: i32;
  var $i220: i1;
  var $p221: ref;
  var $p222: ref;
  var $i223: i32;
  var $p224: ref;
  var $p225: ref;
  var $i226: i32;
  var $p228: ref;
  var $p229: ref;
  var $i230: i32;
  var $p231: ref;
  var $p232: ref;
  var $i233: i32;
  var $i234: i32;
  var $i235: i1;
  var $i237: i8;
  var $i238: i16;
  var $i236: i16;
  var $i239: i32;
  var $i240: i32;
  var $i241: i32;
  var $i242: i32;
  var $i243: i32;
  var $i244: i1;
  var $p245: ref;
  var $p246: ref;
  var $i247: i32;
  var $p248: ref;
  var $p249: ref;
  var $i250: i32;
  var $p252: ref;
  var $p253: ref;
  var $i254: i32;
  var $p255: ref;
  var $p256: ref;
  var $i257: i32;
  var $i258: i32;
  var $i259: i1;
  var $i261: i8;
  var $i262: i16;
  var $i260: i16;
  var $i263: i32;
  var $i264: i32;
  var $i265: i32;
  var $i266: i32;
  var $i267: i32;
  var $i268: i1;
  var $p269: ref;
  var $p270: ref;
  var $i271: i32;
  var $p272: ref;
  var $p273: ref;
  var $i274: i32;
  var $p276: ref;
  var $p277: ref;
  var $i278: i32;
  var $p279: ref;
  var $p280: ref;
  var $i281: i32;
  var $i282: i32;
  var $i283: i1;
  var $i285: i8;
  var $i286: i16;
  var $i284: i16;
  var $i287: i32;
  var $i288: i32;
  var $i289: i32;
  var $i290: i32;
  var $i291: i32;
  var $i292: i1;
  var $p293: ref;
  var $p294: ref;
  var $i295: i32;
  var $p296: ref;
  var $p297: ref;
  var $i298: i32;
  var $p300: ref;
  var $p301: ref;
  var $i302: i32;
  var $p303: ref;
  var $p304: ref;
  var $i305: i32;
  var $i306: i32;
  var $i307: i1;
  var $i309: i8;
  var $i310: i16;
  var $i308: i16;
  var $i311: i32;
  var $i312: i32;
  var $i313: i32;
  var $i314: i32;
  var $i315: i32;
  var $i316: i1;
  var $p317: ref;
  var $p318: ref;
  var $i319: i32;
  var $p320: ref;
  var $p321: ref;
  var $i322: i32;
  var $p324: ref;
  var $p325: ref;
  var $i326: i32;
  var $p327: ref;
  var $p328: ref;
  var $i329: i32;
  var $i330: i32;
  var $i331: i1;
  var $i333: i8;
  var $i334: i16;
  var $i332: i16;
  var $i335: i32;
  var $i336: i32;
  var $i337: i32;
  var $i338: i32;
  var $i339: i32;
  var $i340: i1;
  var $p341: ref;
  var $p342: ref;
  var $i343: i32;
  var $p344: ref;
  var $p345: ref;
  var $i346: i32;
  var $p348: ref;
  var $p349: ref;
  var $i350: i32;
  var $p351: ref;
  var $p352: ref;
  var $i353: i32;
  var $i354: i32;
  var $i355: i1;
  var $i357: i8;
  var $i358: i16;
  var $i356: i16;
  var $i359: i32;
  var $i360: i32;
  var $i361: i32;
  var $i362: i32;
  var $i363: i32;
  var $i364: i1;
  var $p365: ref;
  var $p366: ref;
  var $i367: i32;
  var $p368: ref;
  var $p369: ref;
  var $i370: i32;
  var $p372: ref;
  var $p373: ref;
  var $i374: i32;
  var $p375: ref;
  var $p376: ref;
  var $i377: i32;
  var $i378: i32;
  var $i379: i1;
  var $i381: i8;
  var $i382: i16;
  var $i380: i16;
  var $i383: i32;
  var $i384: i32;
  var $i385: i32;
  var $i386: i32;
  var $i387: i32;
  var $i388: i1;
  var $p389: ref;
  var $p390: ref;
  var $i391: i32;
  var $p392: ref;
  var $p393: ref;
  var $i394: i32;
  var $p396: ref;
  var $p397: ref;
  var $i398: i32;
  var $p399: ref;
  var $p400: ref;
  var $i401: i32;
  var $i402: i32;
  var $i403: i1;
  var $i405: i8;
  var $i406: i16;
  var $i404: i16;
  var $i407: i32;
  var $i408: i32;
  var $i409: i32;
  var $i410: i32;
  var $i411: i1;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} $p1 := kmalloc(1, 208);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $i7 := __create_pipe($p6, 0);
    call {:si_unique_call 1075} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i7, $sub.i32(0, 2147483520));
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $i11 := usb_control_msg($p9, $i10, 13, $sub.i8(0, 64), 768, 4, $p1, 1, 5000);
    call {:si_unique_call 1077} {:cexpr "res"} boogie_si_record_i32($i11);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 1);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} $i18 := __create_pipe($p17, 0);
    call {:si_unique_call 1080} {:cexpr "tmp___1"} boogie_si_record_i32($i18);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i18, $sub.i32(0, 2147483648));
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} vslice_dummy_var_38 := usb_control_msg($p20, $i21, 14, 64, 768, 4, $0.ref, 0, 5000);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} $i25 := __create_pipe($p24, 0);
    call {:si_unique_call 1083} {:cexpr "tmp___2"} boogie_si_record_i32($i25);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i25, $sub.i32(0, 2147483520));
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $i29 := usb_control_msg($p27, $i28, 13, $sub.i8(0, 64), 0, 7, $p1, 1, 5000);
    call {:si_unique_call 1085} {:cexpr "res"} boogie_si_record_i32($i29);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 1);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $i35 := $xor.i32($i34, $sub.i32(0, 1));
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $i36 := $ashr.i32($i35, 1);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i37 := $xor.i32(21930, $i36);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 1);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $i40 := 0;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} $i55 := __create_pipe($p54, 0);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $i58 := $or.i32($i55, $sub.i32(0, 2147483648));
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} vslice_dummy_var_40 := usb_control_msg($p57, $i58, 14, 64, 770, 4, $0.ref, 0, 5000);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $i62 := __create_pipe($p61, 0);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $i65 := $or.i32($i62, $sub.i32(0, 2147483520));
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} $i66 := usb_control_msg($p64, $i65, 13, $sub.i8(0, 64), 0, 7, $p1, 1, 5000);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 1);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i68 := $i33;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i68);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $i72 := $xor.i32($i71, $sub.i32(0, 1));
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $i73 := $ashr.i32($i72, 1);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i74 := $xor.i32(10965, $i73);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 1);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $i40 := 1;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $i79 := __create_pipe($p78, 0);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $i82 := $or.i32($i79, $sub.i32(0, 2147483648));
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} vslice_dummy_var_41 := usb_control_msg($p81, $i82, 14, 64, 768, 4, $0.ref, 0, 5000);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} $i86 := __create_pipe($p85, 0);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $i89 := $or.i32($i86, $sub.i32(0, 2147483520));
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $i90 := usb_control_msg($p88, $i89, 13, $sub.i8(0, 64), 0, 7, $p1, 1, 5000);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 1);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i92 := $i68;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $i95 := $zext.i16.i32($i92);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i96 := $xor.i32($i95, $sub.i32(0, 1));
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i97 := $ashr.i32($i96, 1);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i98 := $xor.i32(5482, $i97);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, 1);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $i40 := 2;
    assume {:branchcond $i100} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} $i103 := __create_pipe($p102, 0);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i106 := $or.i32($i103, $sub.i32(0, 2147483648));
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} vslice_dummy_var_42 := usb_control_msg($p105, $i106, 14, 64, 770, 4, $0.ref, 0, 5000);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} $i110 := __create_pipe($p109, 0);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $i113 := $or.i32($i110, $sub.i32(0, 2147483520));
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} $i114 := usb_control_msg($p112, $i113, 13, $sub.i8(0, 64), 0, 7, $p1, 1, 5000);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 1);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    $i116 := $i92;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i119 := $zext.i16.i32($i116);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $i120 := $xor.i32($i119, $sub.i32(0, 1));
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $i121 := $ashr.i32($i120, 1);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $i122 := $xor.i32(2741, $i121);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i123 := $and.i32($i122, 1);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i124 := $ne.i32($i123, 0);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i40 := 3;
    assume {:branchcond $i124} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} $i127 := __create_pipe($p126, 0);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i130 := $or.i32($i127, $sub.i32(0, 2147483648));
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} vslice_dummy_var_43 := usb_control_msg($p129, $i130, 14, 64, 768, 4, $0.ref, 0, 5000);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} $i134 := __create_pipe($p133, 0);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $i137 := $or.i32($i134, $sub.i32(0, 2147483520));
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} $i138 := usb_control_msg($p136, $i137, 13, $sub.i8(0, 64), 0, 7, $p1, 1, 5000);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 1);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    $i140 := $i116;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i143 := $zext.i16.i32($i140);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $i144 := $xor.i32($i143, $sub.i32(0, 1));
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i145 := $ashr.i32($i144, 1);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i146 := $xor.i32(1370, $i145);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i147 := $and.i32($i146, 1);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i147, 0);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $i40 := 4;
    assume {:branchcond $i148} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} $i151 := __create_pipe($p150, 0);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $i154 := $or.i32($i151, $sub.i32(0, 2147483648));
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} vslice_dummy_var_44 := usb_control_msg($p153, $i154, 14, 64, 770, 4, $0.ref, 0, 5000);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} $i158 := __create_pipe($p157, 0);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p159);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i161 := $or.i32($i158, $sub.i32(0, 2147483520));
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $i162 := usb_control_msg($p160, $i161, 13, $sub.i8(0, 64), 0, 7, $p1, 1, 5000);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i162, 1);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    $i164 := $i140;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i167 := $zext.i16.i32($i164);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i168 := $xor.i32($i167, $sub.i32(0, 1));
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $i169 := $ashr.i32($i168, 1);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $i170 := $xor.i32(685, $i169);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $i171 := $and.i32($i170, 1);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i172 := $ne.i32($i171, 0);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $i40 := 5;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.0, $p173);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} $i175 := __create_pipe($p174, 0);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $i178 := $or.i32($i175, $sub.i32(0, 2147483648));
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} vslice_dummy_var_45 := usb_control_msg($p177, $i178, 14, 64, 768, 4, $0.ref, 0, 5000);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} $i182 := __create_pipe($p181, 0);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $i185 := $or.i32($i182, $sub.i32(0, 2147483520));
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} $i186 := usb_control_msg($p184, $i185, 13, $sub.i8(0, 64), 0, 7, $p1, 1, 5000);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $i187 := $eq.i32($i186, 1);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i187} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    $i188 := $i164;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i191 := $zext.i16.i32($i188);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i192 := $xor.i32($i191, $sub.i32(0, 1));
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $i193 := $ashr.i32($i192, 1);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $i194 := $xor.i32(342, $i193);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $i195 := $and.i32($i194, 1);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $i196 := $ne.i32($i195, 0);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i40 := 6;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.0, $p197);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} $i199 := __create_pipe($p198, 0);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $p201 := $load.ref($M.0, $p200);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $i202 := $or.i32($i199, $sub.i32(0, 2147483648));
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} vslice_dummy_var_46 := usb_control_msg($p201, $i202, 14, 64, 770, 4, $0.ref, 0, 5000);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.0, $p204);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} $i206 := __create_pipe($p205, 0);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $i209 := $or.i32($i206, $sub.i32(0, 2147483520));
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} $i210 := usb_control_msg($p208, $i209, 13, $sub.i8(0, 64), 0, 7, $p1, 1, 5000);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 1);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i211} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    $i212 := $i188;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $i215 := $zext.i16.i32($i212);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i216 := $xor.i32($i215, $sub.i32(0, 1));
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $i217 := $ashr.i32($i216, 1);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $i218 := $xor.i32(171, $i217);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i219 := $and.i32($i218, 1);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $i220 := $ne.i32($i219, 0);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $i40 := 7;
    assume {:branchcond $i220} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $i223 := __create_pipe($p222, 0);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $p225 := $load.ref($M.0, $p224);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i226 := $or.i32($i223, $sub.i32(0, 2147483648));
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} vslice_dummy_var_47 := usb_control_msg($p225, $i226, 14, 64, 770, 4, $0.ref, 0, 5000);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $p229 := $load.ref($M.0, $p228);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} $i230 := __create_pipe($p229, 0);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $p232 := $load.ref($M.0, $p231);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i233 := $or.i32($i230, $sub.i32(0, 2147483520));
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} $i234 := usb_control_msg($p232, $i233, 13, $sub.i8(0, 64), 0, 7, $p1, 1, 5000);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 1);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i235} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    $i236 := $i212;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i239 := $zext.i16.i32($i236);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i240 := $xor.i32($i239, $sub.i32(0, 1));
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i241 := $ashr.i32($i240, 1);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $i242 := $xor.i32(85, $i241);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $i243 := $and.i32($i242, 1);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i244 := $ne.i32($i243, 0);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $i40 := 8;
    assume {:branchcond $i244} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.0, $p245);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} $i247 := __create_pipe($p246, 0);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $p249 := $load.ref($M.0, $p248);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i250 := $or.i32($i247, $sub.i32(0, 2147483648));
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} vslice_dummy_var_48 := usb_control_msg($p249, $i250, 14, 64, 768, 4, $0.ref, 0, 5000);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $p253 := $load.ref($M.0, $p252);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $i254 := __create_pipe($p253, 0);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $p256 := $load.ref($M.0, $p255);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $i257 := $or.i32($i254, $sub.i32(0, 2147483520));
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} $i258 := usb_control_msg($p256, $i257, 13, $sub.i8(0, 64), 0, 7, $p1, 1, 5000);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $i259 := $eq.i32($i258, 1);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    $i260 := $i236;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $i263 := $zext.i16.i32($i260);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i264 := $xor.i32($i263, $sub.i32(0, 1));
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $i265 := $ashr.i32($i264, 1);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $i266 := $xor.i32(42, $i265);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i267 := $and.i32($i266, 1);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i268 := $ne.i32($i267, 0);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i40 := 9;
    assume {:branchcond $i268} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $p270 := $load.ref($M.0, $p269);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} $i271 := __create_pipe($p270, 0);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $p273 := $load.ref($M.0, $p272);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $i274 := $or.i32($i271, $sub.i32(0, 2147483648));
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} vslice_dummy_var_49 := usb_control_msg($p273, $i274, 14, 64, 770, 4, $0.ref, 0, 5000);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $p277 := $load.ref($M.0, $p276);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} $i278 := __create_pipe($p277, 0);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.0, $p279);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i281 := $or.i32($i278, $sub.i32(0, 2147483520));
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} $i282 := usb_control_msg($p280, $i281, 13, $sub.i8(0, 64), 0, 7, $p1, 1, 5000);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i283 := $eq.i32($i282, 1);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i283} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i283 == 1);
    assume {:verifier.code 0} true;
    $i284 := $i260;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $i287 := $zext.i16.i32($i284);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $i288 := $xor.i32($i287, $sub.i32(0, 1));
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $i289 := $ashr.i32($i288, 1);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $i290 := $xor.i32(21, $i289);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $i291 := $and.i32($i290, 1);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i292 := $ne.i32($i291, 0);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $i40 := 10;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $p294 := $load.ref($M.0, $p293);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $i295 := __create_pipe($p294, 0);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $p297 := $load.ref($M.0, $p296);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $i298 := $or.i32($i295, $sub.i32(0, 2147483648));
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} vslice_dummy_var_50 := usb_control_msg($p297, $i298, 14, 64, 768, 4, $0.ref, 0, 5000);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $p301 := $load.ref($M.0, $p300);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} $i302 := __create_pipe($p301, 0);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $p304 := $load.ref($M.0, $p303);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i305 := $or.i32($i302, $sub.i32(0, 2147483520));
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} $i306 := usb_control_msg($p304, $i305, 13, $sub.i8(0, 64), 0, 7, $p1, 1, 5000);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i307 := $eq.i32($i306, 1);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i307} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    $i308 := $i284;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i311 := $zext.i16.i32($i308);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i312 := $xor.i32($i311, $sub.i32(0, 1));
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i313 := $ashr.i32($i312, 1);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i314 := $xor.i32(10, $i313);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $i315 := $and.i32($i314, 1);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i316 := $ne.i32($i315, 0);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i40 := 11;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $p318 := $load.ref($M.0, $p317);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $i319 := __create_pipe($p318, 0);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $p321 := $load.ref($M.0, $p320);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $i322 := $or.i32($i319, $sub.i32(0, 2147483648));
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} vslice_dummy_var_51 := usb_control_msg($p321, $i322, 14, 64, 770, 4, $0.ref, 0, 5000);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $p325 := $load.ref($M.0, $p324);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $i326 := __create_pipe($p325, 0);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $p328 := $load.ref($M.0, $p327);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i329 := $or.i32($i326, $sub.i32(0, 2147483520));
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} $i330 := usb_control_msg($p328, $i329, 13, $sub.i8(0, 64), 0, 7, $p1, 1, 5000);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i331 := $eq.i32($i330, 1);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i331} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    $i332 := $i308;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $i335 := $zext.i16.i32($i332);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i336 := $xor.i32($i335, $sub.i32(0, 1));
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i337 := $ashr.i32($i336, 1);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i338 := $xor.i32(5, $i337);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $i339 := $and.i32($i338, 1);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $i340 := $ne.i32($i339, 0);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $i40 := 12;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $p342 := $load.ref($M.0, $p341);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} $i343 := __create_pipe($p342, 0);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $p345 := $load.ref($M.0, $p344);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $i346 := $or.i32($i343, $sub.i32(0, 2147483648));
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} vslice_dummy_var_52 := usb_control_msg($p345, $i346, 14, 64, 768, 4, $0.ref, 0, 5000);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $p349 := $load.ref($M.0, $p348);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $i350 := __create_pipe($p349, 0);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $p352 := $load.ref($M.0, $p351);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i353 := $or.i32($i350, $sub.i32(0, 2147483520));
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} $i354 := usb_control_msg($p352, $i353, 13, $sub.i8(0, 64), 0, 7, $p1, 1, 5000);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i355 := $eq.i32($i354, 1);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i355 == 1);
    assume {:verifier.code 0} true;
    $i356 := $i332;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $i359 := $zext.i16.i32($i356);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $i360 := $xor.i32($i359, $sub.i32(0, 1));
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $i361 := $ashr.i32($i360, 1);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i362 := $xor.i32(2, $i361);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i363 := $and.i32($i362, 1);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $i364 := $ne.i32($i363, 0);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i40 := 13;
    assume {:branchcond $i364} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i364 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $p366 := $load.ref($M.0, $p365);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} $i367 := __create_pipe($p366, 0);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $p369 := $load.ref($M.0, $p368);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $i370 := $or.i32($i367, $sub.i32(0, 2147483648));
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} vslice_dummy_var_53 := usb_control_msg($p369, $i370, 14, 64, 770, 4, $0.ref, 0, 5000);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $p373 := $load.ref($M.0, $p372);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $i374 := __create_pipe($p373, 0);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $p376 := $load.ref($M.0, $p375);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i377 := $or.i32($i374, $sub.i32(0, 2147483520));
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} $i378 := usb_control_msg($p376, $i377, 13, $sub.i8(0, 64), 0, 7, $p1, 1, 5000);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $i379 := $eq.i32($i378, 1);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    assume {:branchcond $i379} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i379 == 1);
    assume {:verifier.code 0} true;
    $i380 := $i356;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $i383 := $zext.i16.i32($i380);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $i384 := $xor.i32($i383, $sub.i32(0, 1));
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $i385 := $ashr.i32($i384, 1);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $i386 := $xor.i32(1, $i385);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $i387 := $and.i32($i386, 1);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i388 := $ne.i32($i387, 0);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i40 := 14;
    assume {:branchcond $i388} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i388 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $p390 := $load.ref($M.0, $p389);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $i391 := __create_pipe($p390, 0);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $p393 := $load.ref($M.0, $p392);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $i394 := $or.i32($i391, $sub.i32(0, 2147483648));
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} vslice_dummy_var_54 := usb_control_msg($p393, $i394, 14, 64, 768, 4, $0.ref, 0, 5000);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $p397 := $load.ref($M.0, $p396);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} $i398 := __create_pipe($p397, 0);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $p400 := $load.ref($M.0, $p399);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $i401 := $or.i32($i398, $sub.i32(0, 2147483520));
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} $i402 := usb_control_msg($p400, $i401, 13, $sub.i8(0, 64), 0, 7, $p1, 1, 5000);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $i403 := $eq.i32($i402, 1);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i403} true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i403 == 1);
    assume {:verifier.code 0} true;
    $i404 := $i380;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $i407 := $zext.i16.i32($i404);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $i408 := $xor.i32($i407, $sub.i32(0, 1));
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i409 := $ashr.i32($i408, 1);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i410 := $and.i32($i409, 1);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $i411 := $ne.i32($i410, 0);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $i40 := 15;
    assume {:branchcond $i411} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i411 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i41 := 16;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $i44 := __create_pipe($p43, 0);
    call {:si_unique_call 1088} {:cexpr "tmp___3"} boogie_si_record_i32($i44);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i44, $sub.i32(0, 2147483648));
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i15);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $i49 := $or.i32($i48, 768);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} vslice_dummy_var_39 := usb_control_msg($p46, $i47, 14, 64, $i50, 4, $0.ref, 0, 5000);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} kfree($p1);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i41, 16);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb20:
    assume $i52 == 1;
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb124:
    assume {:verifier.code 0} true;
    assume $i411 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb16;

  $bb121:
    assume $i403 == 1;
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $i405 := $load.i8($M.0, $p1);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $i406 := $zext.i8.i16($i405);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $i404 := $i406;
    goto $bb123;

  $bb117:
    assume {:verifier.code 0} true;
    assume $i388 == 1;
    goto $bb14;

  $bb114:
    assume $i379 == 1;
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i381 := $load.i8($M.0, $p1);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $i382 := $zext.i8.i16($i381);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i380 := $i382;
    goto $bb116;

  $bb110:
    assume {:verifier.code 0} true;
    assume $i364 == 1;
    goto $bb14;

  $bb107:
    assume $i355 == 1;
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i357 := $load.i8($M.0, $p1);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $i358 := $zext.i8.i16($i357);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i356 := $i358;
    goto $bb109;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i340 == 1;
    goto $bb14;

  $bb100:
    assume $i331 == 1;
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $i333 := $load.i8($M.0, $p1);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $i334 := $zext.i8.i16($i333);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i332 := $i334;
    goto $bb102;

  $bb96:
    assume {:verifier.code 0} true;
    assume $i316 == 1;
    goto $bb14;

  $bb93:
    assume $i307 == 1;
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i309 := $load.i8($M.0, $p1);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $i310 := $zext.i8.i16($i309);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $i308 := $i310;
    goto $bb95;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i292 == 1;
    goto $bb14;

  $bb86:
    assume $i283 == 1;
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $i285 := $load.i8($M.0, $p1);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i286 := $zext.i8.i16($i285);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $i284 := $i286;
    goto $bb88;

  $bb82:
    assume {:verifier.code 0} true;
    assume $i268 == 1;
    goto $bb14;

  $bb79:
    assume $i259 == 1;
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i261 := $load.i8($M.0, $p1);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $i262 := $zext.i8.i16($i261);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $i260 := $i262;
    goto $bb81;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i244 == 1;
    goto $bb14;

  $bb72:
    assume $i235 == 1;
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $i237 := $load.i8($M.0, $p1);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $i238 := $zext.i8.i16($i237);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $i236 := $i238;
    goto $bb74;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i220 == 1;
    goto $bb14;

  $bb65:
    assume $i211 == 1;
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i213 := $load.i8($M.0, $p1);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i214 := $zext.i8.i16($i213);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $i212 := $i214;
    goto $bb67;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i196 == 1;
    goto $bb14;

  $bb58:
    assume $i187 == 1;
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $i189 := $load.i8($M.0, $p1);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $i190 := $zext.i8.i16($i189);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $i188 := $i190;
    goto $bb60;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i172 == 1;
    goto $bb14;

  $bb51:
    assume $i163 == 1;
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i165 := $load.i8($M.0, $p1);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $i166 := $zext.i8.i16($i165);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $i164 := $i166;
    goto $bb53;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb14;

  $bb44:
    assume $i139 == 1;
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $i141 := $load.i8($M.0, $p1);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i16($i141);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i140 := $i142;
    goto $bb46;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i124 == 1;
    goto $bb14;

  $bb37:
    assume $i115 == 1;
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.0, $p1);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i16($i117);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i116 := $i118;
    goto $bb39;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb14;

  $bb30:
    assume $i91 == 1;
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.0, $p1);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i16($i93);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $i92 := $i94;
    goto $bb32;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb14;

  $bb23:
    assume $i67 == 1;
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p1);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i16($i69);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $i68 := $i70;
    goto $bb25;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb14;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p1);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i16($i31);
    call {:si_unique_call 1086} {:cexpr "data"} boogie_si_record_i16($i32);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb12;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p1);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i16($i13);
    call {:si_unique_call 1078} {:cexpr "mcr_data"} boogie_si_record_i16($i14);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  SeqInstr_172:
    assume !assertsPassed;
    return;
}



const usb_set_serial_data: ref;

axiom usb_set_serial_data == $sub.ref(0, 321474);

procedure usb_set_serial_data($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_set_serial_data($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(264, 1));
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 322506);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} $p1 := calloc(1, $i0);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1153} __VERIFIER_assume($i4);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 323538);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.27;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1155} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.27;
    call {:si_unique_call 1156} cmdloc_dummy_var_6 := $memset.i8(cmdloc_dummy_var_5, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.27 := cmdloc_dummy_var_6;
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const timer_init_1: ref;

axiom timer_init_1 == $sub.ref(0, 324570);

procedure timer_init_1();
  free requires assertsPassed;
  modifies $M.17, $M.19, $M.21, $M.23;



implementation timer_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $M.17 := 0;
    call {:si_unique_call 1157} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $M.19 := 0;
    call {:si_unique_call 1158} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $M.21 := 0;
    call {:si_unique_call 1159} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $M.23 := 0;
    call {:si_unique_call 1160} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    return;
}



const choose_timer_2: ref;

axiom choose_timer_2 == $sub.ref(0, 325602);

procedure choose_timer_2();
  free requires assertsPassed;
  modifies $M.28, $M.30, $M.32, $M.34;



implementation choose_timer_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1161} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1162} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1163} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} ldv_stop();
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $i18 := $M.34;
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i19 == 1;
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 1170} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(2);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $i20 := $M.34;
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $p21 := $M.35;
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} ldv_timer_2($i20, $p21);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $i14 := $M.32;
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $M.32 := 2;
    call {:si_unique_call 1168} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(2);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $i16 := $M.32;
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $p17 := $M.33;
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} ldv_timer_2($i16, $p17);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i10 := $M.30;
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 1166} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(2);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i12 := $M.30;
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $p13 := $M.31;
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} ldv_timer_2($i12, $p13);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i6 := $M.28;
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 1164} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(2);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $i8 := $M.28;
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $p9 := $M.29;
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} ldv_timer_2($i8, $p9);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const ldv_timer_2: ref;

axiom ldv_timer_2 == $sub.ref(0, 326634);

procedure ldv_timer_2($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation ldv_timer_2($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} {:cexpr "ldv_timer_2:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.37, $p2);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} mos7840_led_flag_off($i3);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 327666);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const choose_timer_1: ref;

axiom choose_timer_1 == $sub.ref(0, 328698);

procedure choose_timer_1();
  free requires assertsPassed;
  modifies $M.17, $M.19, $M.21, $M.23, $M.0, $M.16, $M.18, $M.20, $M.22, assertsPassed;



implementation choose_timer_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1177} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1178} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1179} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} ldv_stop();
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $i18 := $M.23;
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i19 == 1;
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $M.23 := 2;
    call {:si_unique_call 1186} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(2);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $i20 := $M.23;
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $p21 := $M.22;
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} ldv_timer_1($i20, $p21);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $i14 := $M.21;
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1184} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(2);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $i16 := $M.21;
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $p17 := $M.20;
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} ldv_timer_1($i16, $p17);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $i10 := $M.19;
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $M.19 := 2;
    call {:si_unique_call 1182} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(2);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $i12 := $M.19;
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $p13 := $M.18;
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} ldv_timer_1($i12, $p13);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $i6 := $M.17;
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $M.17 := 2;
    call {:si_unique_call 1180} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(2);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $i8 := $M.17;
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $p9 := $M.16;
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} ldv_timer_1($i8, $p9);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_175:
    assume !assertsPassed;
    return;
}



const ldv_timer_1: ref;

axiom ldv_timer_1 == $sub.ref(0, 329730);

procedure ldv_timer_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, assertsPassed;



implementation ldv_timer_1($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} {:cexpr "ldv_timer_1:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} mos7840_led_off($i3);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;
}



const ldv_initialize_usb_serial_driver_3: ref;

axiom ldv_initialize_usb_serial_driver_3 == $sub.ref(0, 330762);

procedure ldv_initialize_usb_serial_driver_3();
  free requires assertsPassed;
  modifies $M.38, $M.39, $M.40, $M.41, $M.0, $CurrAddr;



implementation ldv_initialize_usb_serial_driver_3()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} $p0 := ldv_init_zalloc(192);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $M.38 := $p0;
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} $p2 := ldv_init_zalloc(3008);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $M.39 := $p2;
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} $p4 := ldv_init_zalloc(272);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $M.40 := $p4;
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} $p6 := ldv_init_zalloc(1816);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $M.41 := $p6;
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    return;
}



const timer_init_2: ref;

axiom timer_init_2 == $sub.ref(0, 331794);

procedure timer_init_2();
  free requires assertsPassed;
  modifies $M.28, $M.30, $M.32, $M.34;



implementation timer_init_2()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $M.28 := 0;
    call {:si_unique_call 1197} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $M.30 := 0;
    call {:si_unique_call 1198} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $M.32 := 0;
    call {:si_unique_call 1199} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $M.34 := 0;
    call {:si_unique_call 1200} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 332826);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $M.17, $M.19, $M.21, $M.23, $M.42, $M.43, $M.44, $M.45, $M.28, $M.30, $M.32, $M.34, $M.46, $M.47, $M.38, $M.39, $M.40, $M.41, $M.48, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.7, $M.49, $M.8, $M.29, $M.31, $M.33, $M.35, $M.16, $M.18, $M.20, $M.22, $M.15, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $CurrAddr, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.25, $M.26, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $i164: i32;
  var $i165: i32;
  var $i166: i1;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $p170: ref;
  var $i171: i32;
  var $i172: i1;
  var $p173: ref;
  var $p174: ref;
  var $i175: i32;
  var $i176: i1;
  var $p177: ref;
  var $p178: ref;
  var $i179: i32;
  var $i180: i1;
  var $p181: ref;
  var $p182: ref;
  var $i183: i32;
  var $i184: i1;
  var $p185: ref;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $i195: i32;
  var $i196: i1;
  var $p197: ref;
  var $i199: i32;
  var $i200: i1;
  var $p201: ref;
  var $i202: i32;
  var $i203: i64;
  var $i205: i32;
  var $i206: i1;
  var $p207: ref;
  var $i208: i32;
  var $i209: i64;
  var $i211: i32;
  var $i212: i1;
  var $p213: ref;
  var $i214: i32;
  var $i215: i64;
  var $i217: i32;
  var $i218: i1;
  var $p219: ref;
  var $i220: i32;
  var $i221: i64;
  var $i223: i32;
  var $i224: i1;
  var $p225: ref;
  var $i226: i32;
  var $i227: i32;
  var $i229: i32;
  var $i230: i1;
  var $p231: ref;
  var $i232: i32;
  var $i233: i32;
  var $i235: i32;
  var $i236: i1;
  var $p237: ref;
  var $i238: i32;
  var $i239: i32;
  var $i241: i32;
  var $i242: i1;
  var $p243: ref;
  var $i244: i32;
  var $i245: i32;
  var $i247: i32;
  var $i248: i1;
  var $p249: ref;
  var $p250: ref;
  var $i251: i32;
  var $i253: i32;
  var $i254: i1;
  var $p255: ref;
  var $i256: i64;
  var $i258: i32;
  var $i259: i1;
  var $p260: ref;
  var $i261: i64;
  var $i263: i32;
  var $i264: i1;
  var $p265: ref;
  var $i266: i64;
  var $i268: i32;
  var $i269: i1;
  var $p270: ref;
  var $i271: i64;
  var $i273: i32;
  var $i274: i1;
  var $p275: ref;
  var $i276: i32;
  var $i277: i1;
  var $p278: ref;
  var $i279: i32;
  var $i280: i1;
  var $p281: ref;
  var $i283: i32;
  var $i284: i1;
  var $p285: ref;
  var $i287: i32;
  var $i288: i1;
  var $p289: ref;
  var $i291: i32;
  var $i292: i1;
  var $p293: ref;
  var $i295: i32;
  var $i296: i1;
  var $p297: ref;
  var $i298: i32;
  var $i299: i32;
  var $i300: i1;
  var $p301: ref;
  var $i302: i32;
  var $i303: i32;
  var $i304: i1;
  var $p305: ref;
  var $i306: i32;
  var $i307: i32;
  var $i308: i1;
  var $p309: ref;
  var $i310: i32;
  var $i311: i32;
  var $i312: i1;
  var $p313: ref;
  var $i315: i32;
  var $i316: i1;
  var $p317: ref;
  var $i319: i32;
  var $i320: i1;
  var $p321: ref;
  var $i323: i32;
  var $i324: i1;
  var $p325: ref;
  var $i327: i32;
  var $i328: i1;
  var $p329: ref;
  var $i331: i32;
  var $i332: i1;
  var $p333: ref;
  var $i335: i32;
  var $i336: i1;
  var $p337: ref;
  var $i339: i32;
  var $i340: i1;
  var $p341: ref;
  var $i343: i32;
  var $i344: i1;
  var $p345: ref;
  var $i346: i32;
  var $i347: i1;
  var $p348: ref;
  var $i349: i32;
  var $i350: i1;
  var $p351: ref;
  var $i352: i32;
  var $i353: i1;
  var $p354: ref;
  var $i355: i32;
  var $i356: i1;
  var $i358: i32;
  var $i359: i1;
  var $i361: i32;
  var $i362: i1;
  var $i364: i32;
  var $i365: i32;
  var $i366: i32;
  var $i367: i1;
  var $i369: i32;
  var $i370: i1;
  var vslice_dummy_var_55: ref;
  var vslice_dummy_var_56: ref;
  var vslice_dummy_var_57: ref;
  var vslice_dummy_var_58: ref;
  var vslice_dummy_var_59: ref;
  var vslice_dummy_var_60: ref;
  var vslice_dummy_var_61: ref;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;

  $bb0:
    call {:si_unique_call 1201} $initialize();
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} $p7 := ldv_init_zalloc(1);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} $p8 := ldv_init_zalloc(44);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} $p10 := ldv_init_zalloc(32);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} $p12 := ldv_init_zalloc(80);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} ldv_initialize();
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} vslice_dummy_var_55 := ldv_memset($p14, 0, 4);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} vslice_dummy_var_56 := ldv_memset($p16, 0, 4);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} vslice_dummy_var_57 := ldv_memset($p18, 0, 4);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p3);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} vslice_dummy_var_58 := ldv_memset($p20, 0, 8);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p4);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} vslice_dummy_var_59 := ldv_memset($p22, 0, 8);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p5);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} vslice_dummy_var_60 := ldv_memset($p24, 0, 4);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p6);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} vslice_dummy_var_61 := ldv_memset($p26, 0, 4);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} timer_init_1();
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1223} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $M.43 := 0;
    call {:si_unique_call 1224} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1225} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $M.45 := 0;
    call {:si_unique_call 1226} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} timer_init_2();
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1228} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $p82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $p90, $i91, $i92, $p93, $i94, $i95, $p96, $i97, $i98, $p99, $i100, $i101, $p102, $i104, $i105, $p106, $i108, $i109, $p110, $i112, $i113, $p114, $i116, $i117, $p118, $i120, $i121, $p122, $i124, $i125, $p126, $i128, $i129, $p130, $i132, $i133, $p134, $i135, $i136, $p137, $i138, $i139, $p140, $i141, $i142, $p143, $i144, $i145, $p146, $i148, $i149, $p150, $i152, $i153, $p154, $i156, $i157, $p158, $i160, $i161, $p162, $p163, $i164, $i165, $i166, $i167, $i168, $p169, $p170, $i171, $i172, $p173, $p174, $i175, $i176, $p177, $p178, $i179, $i180, $p181, $p182, $i183, $i184, $p185, $i187, $i188, $p189, $i191, $i192, $p193, $i195, $i196, $p197, $i199, $i200, $p201, $i202, $i203, $i205, $i206, $p207, $i208, $i209, $i211, $i212, $p213, $i214, $i215, $i217, $i218, $p219, $i220, $i221, $i223, $i224, $p225, $i226, $i227, $i229, $i230, $p231, $i232, $i233, $i235, $i236, $p237, $i238, $i239, $i241, $i242, $p243, $i244, $i245, $i247, $i248, $p249, $p250, $i251, $i253, $i254, $p255, $i256, $i258, $i259, $p260, $i261, $i263, $i264, $p265, $i266, $i268, $i269, $p270, $i271, $i273, $i274, $p275, $i276, $i277, $p278, $i279, $i280, $p281, $i283, $i284, $p285, $i287, $i288, $p289, $i291, $i292, $p293, $i295, $i296, $p297, $i298, $i299, $i300, $p301, $i302, $i303, $i304, $p305, $i306, $i307, $i308, $p309, $i310, $i311, $i312, $p313, $i315, $i316, $p317, $i319, $i320, $p321, $i323, $i324, $p325, $i327, $i328, $p329, $i331, $i332, $p333, $i335, $i336, $p337, $i339, $i340, $p341, $i343, $i344, $p345, $i346, $i347, $p348, $i349, $i350, $p351, $i352, $i353, $p354, $i355, $i356, $i358, $i359, $i361, $i362, $i364, $i365, $i366, $i367, $i369, $i370, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p9, $p11, $p13, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $p82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $p90, $i91, $i92, $p93, $i94, $i95, $p96, $i97, $i98, $p99, $i100, $i101, $p102, $i104, $i105, $p106, $i108, $i109, $p110, $i112, $i113, $p114, $i116, $i117, $p118, $i120, $i121, $p122, $i124, $i125, $p126, $i128, $i129, $p130, $i132, $i133, $p134, $i135, $i136, $p137, $i138, $i139, $p140, $i141, $i142, $p143, $i144, $i145, $p146, $i148, $i149, $p150, $i152, $i153, $p154, $i156, $i157, $p158, $i160, $i161, $p162, $p163, $i164, $i165, $i166, $i167, $i168, $p169, $p170, $i171, $i172, $p173, $p174, $i175, $i176, $p177, $p178, $i179, $i180, $p181, $p182, $i183, $i184, $p185, $i187, $i188, $p189, $i191, $i192, $p193, $i195, $i196, $p197, $i199, $i200, $p201, $i202, $i203, $i205, $i206, $p207, $i208, $i209, $i211, $i212, $p213, $i214, $i215, $i217, $i218, $p219, $i220, $i221, $i223, $i224, $p225, $i226, $i227, $i229, $i230, $p231, $i232, $i233, $i235, $i236, $p237, $i238, $i239, $i241, $i242, $p243, $i244, $i245, $i247, $i248, $p249, $p250, $i251, $i253, $i254, $p255, $i256, $i258, $i259, $p260, $i261, $i263, $i264, $p265, $i266, $i268, $i269, $p270, $i271, $i273, $i274, $p275, $i276, $i277, $p278, $i279, $i280, $p281, $i283, $i284, $p285, $i287, $i288, $p289, $i291, $i292, $p293, $i295, $i296, $p297, $i298, $i299, $i300, $p301, $i302, $i303, $i304, $p305, $i306, $i307, $i308, $p309, $i310, $i311, $i312, $p313, $i315, $i316, $p317, $i319, $i320, $p321, $i323, $i324, $p325, $i327, $i328, $p329, $i331, $i332, $p333, $i335, $i336, $p337, $i339, $i340, $p341, $i343, $i344, $p345, $i346, $i347, $p348, $i349, $i350, $p351, $i352, $i353, $p354, $i355, $i356, $i358, $i359, $i361, $i362, $i364, $i365, $i366, $i367, $i369, $i370, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i28, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i28, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} ldv_stop();
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $i369 := $M.46;
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $i370 := $ne.i32($i369, 0);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb317:
    assume $i370 == 1;
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} choose_timer_2();
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb5:
    assume $i30 == 1;
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $i53 := $M.45;
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb48:
    assume $i54 == 1;
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1246} $i55 := __VERIFIER_nondet_int();
    call {:si_unique_call 1247} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i55);
    call {:si_unique_call 1248} {:cexpr "tmp___5"} boogie_si_record_i32($i55);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i55, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i55, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i55, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i55, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i55, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} ldv_stop();
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb61:
    assume $i61 == 1;
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $i366 := $M.45;
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $i367 := $eq.i32($i366, 2);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i367 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb311:
    assume $i367 == 1;
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} vslice_dummy_var_106 := ldv_attach_3();
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1390} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb59:
    assume $i60 == 1;
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $i361 := $M.45;
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $i362 := $eq.i32($i361, 2);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb308:
    assume $i362 == 1;
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} vslice_dummy_var_105 := ldv_release_3();
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1387} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $i364 := $M.43;
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $i365 := $sub.i32($i364, 1);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $M.43 := $i365;
    call {:si_unique_call 1388} {:cexpr "ref_cnt"} boogie_si_record_i32($i365);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb57:
    assume $i59 == 1;
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $i355 := $M.45;
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $i356 := $eq.i32($i355, 4);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    $i358 := $M.45;
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $i359 := $eq.i32($i358, 3);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  $bb306:
    assume !($i359 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb305:
    assume $i359 == 1;
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} vslice_dummy_var_104 := ldv_detach_3();
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1385} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb302:
    assume $i356 == 1;
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} vslice_dummy_var_103 := ldv_detach_3();
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1383} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb55:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i55, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i55, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i63 == 1);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $i343 := $M.45;
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $i344 := $eq.i32($i343, 4);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    $i346 := $M.45;
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $i347 := $eq.i32($i346, 1);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    $i349 := $M.45;
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $i350 := $eq.i32($i349, 3);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  $bb297:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    $i352 := $M.45;
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $i353 := $eq.i32($i352, 2);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb299:
    assume $i353 == 1;
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $p354 := $M.38;
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} mos7840_bulk_in_callback($p354);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1381} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    goto $bb301;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb296:
    assume $i350 == 1;
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $p351 := $M.38;
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} mos7840_bulk_in_callback($p351);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1379} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    goto $bb298;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb293:
    assume $i347 == 1;
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $p348 := $M.38;
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} mos7840_bulk_in_callback($p348);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1377} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    goto $bb295;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb290:
    assume $i344 == 1;
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $p345 := $M.38;
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} mos7840_bulk_in_callback($p345);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1375} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    goto $bb292;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb66:
    assume $i63 == 1;
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $i327 := $M.45;
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $i328 := $eq.i32($i327, 4);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  $bb279:
    assume !($i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    $i331 := $M.45;
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $i332 := $eq.i32($i331, 1);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb282:
    assume !($i332 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    $i335 := $M.45;
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $i336 := $eq.i32($i335, 3);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i336 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    $i339 := $M.45;
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $i340 := $eq.i32($i339, 2);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb287:
    assume $i340 == 1;
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $p341 := $M.41;
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} vslice_dummy_var_102 := mos7840_tiocmget($p341);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1373} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    goto $bb289;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb284:
    assume $i336 == 1;
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $p337 := $M.41;
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} vslice_dummy_var_101 := mos7840_tiocmget($p337);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1371} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    goto $bb286;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb281:
    assume $i332 == 1;
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $p333 := $M.41;
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} vslice_dummy_var_100 := mos7840_tiocmget($p333);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1369} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    goto $bb283;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb278:
    assume $i328 == 1;
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $p329 := $M.41;
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} vslice_dummy_var_99 := mos7840_tiocmget($p329);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1367} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    goto $bb280;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb64:
    assume $i62 == 1;
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $i311 := $M.45;
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $i312 := $eq.i32($i311, 4);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $i315 := $M.45;
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $i316 := $eq.i32($i315, 1);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    $i319 := $M.45;
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $i320 := $eq.i32($i319, 3);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    $i323 := $M.45;
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $i324 := $eq.i32($i323, 2);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb275:
    assume $i324 == 1;
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $p325 := $M.41;
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} vslice_dummy_var_98 := mos7840_chars_in_buffer($p325);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1365} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb272:
    assume $i320 == 1;
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $p321 := $M.41;
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} vslice_dummy_var_97 := mos7840_chars_in_buffer($p321);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1363} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb269:
    assume $i316 == 1;
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $p317 := $M.41;
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} vslice_dummy_var_96 := mos7840_chars_in_buffer($p317);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1361} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb266:
    assume $i312 == 1;
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $p313 := $M.41;
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} vslice_dummy_var_95 := mos7840_chars_in_buffer($p313);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1359} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb53:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i55, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i55, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i55, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i66 == 1);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $i295 := $M.45;
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $i296 := $eq.i32($i295, 4);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $i299 := $M.45;
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $i300 := $eq.i32($i299, 1);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $i303 := $M.45;
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $i304 := $eq.i32($i303, 3);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $i307 := $M.45;
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $i308 := $eq.i32($i307, 2);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb263:
    assume $i308 == 1;
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $p309 := $M.41;
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i310 := $load.i32($M.27, $p1);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} mos7840_break($p309, $i310);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1357} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb260:
    assume $i304 == 1;
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $p305 := $M.41;
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $i306 := $load.i32($M.27, $p1);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} mos7840_break($p305, $i306);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1355} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb257:
    assume $i300 == 1;
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $p301 := $M.41;
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i302 := $load.i32($M.27, $p1);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} mos7840_break($p301, $i302);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1353} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb254:
    assume $i296 == 1;
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $p297 := $M.41;
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $i298 := $load.i32($M.27, $p1);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} mos7840_break($p297, $i298);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1351} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb72:
    assume $i66 == 1;
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $i279 := $M.45;
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $i280 := $eq.i32($i279, 4);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $i283 := $M.45;
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $i284 := $eq.i32($i283, 1);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $i287 := $M.45;
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $i288 := $eq.i32($i287, 3);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $i291 := $M.45;
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $i292 := $eq.i32($i291, 2);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb251:
    assume $i292 == 1;
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $p293 := $M.41;
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} vslice_dummy_var_94 := mos7840_write_room($p293);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1349} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb248:
    assume $i288 == 1;
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $p289 := $M.41;
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} vslice_dummy_var_93 := mos7840_write_room($p289);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1347} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb245:
    assume $i284 == 1;
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $p285 := $M.41;
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} vslice_dummy_var_92 := mos7840_write_room($p285);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1345} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb242:
    assume $i280 == 1;
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $p281 := $M.41;
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} vslice_dummy_var_91 := mos7840_write_room($p281);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1343} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb70:
    assume $i65 == 1;
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $i276 := $M.45;
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $i277 := $eq.i32($i276, 4);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb239:
    assume $i277 == 1;
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $p278 := $M.39;
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} mos7840_close($p278);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1341} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb68:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i55, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i55, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i68 == 1);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $i273 := $M.45;
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i274 := $eq.i32($i273, 4);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb236:
    assume $i274 == 1;
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $p275 := $M.38;
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} mos7840_interrupt_callback($p275);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1339} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    goto $bb238;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb76:
    assume $i68 == 1;
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i253 := $M.45;
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i254 := $eq.i32($i253, 4);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $i258 := $M.45;
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $i259 := $eq.i32($i258, 1);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $i263 := $M.45;
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $i264 := $eq.i32($i263, 3);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $i268 := $M.45;
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i268, 2);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb233:
    assume $i269 == 1;
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $p270 := $M.41;
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $i271 := $load.i64($M.27, $p4);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} vslice_dummy_var_90 := usb_serial_generic_tiocmiwait($p270, $i271);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1337} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb230:
    assume $i264 == 1;
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    $p265 := $M.41;
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $i266 := $load.i64($M.27, $p4);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} vslice_dummy_var_89 := usb_serial_generic_tiocmiwait($p265, $i266);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1335} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb227:
    assume $i259 == 1;
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $p260 := $M.41;
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $i261 := $load.i64($M.27, $p4);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} vslice_dummy_var_88 := usb_serial_generic_tiocmiwait($p260, $i261);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1333} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb224:
    assume $i254 == 1;
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $p255 := $M.41;
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $i256 := $load.i64($M.27, $p4);
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} vslice_dummy_var_87 := usb_serial_generic_tiocmiwait($p255, $i256);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1331} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb74:
    assume $i67 == 1;
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $i247 := $M.45;
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $i248 := $eq.i32($i247, 4);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb221:
    assume $i248 == 1;
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $p249 := $M.41;
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $p250 := $M.39;
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $i251 := $load.i32($M.27, $p6);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} vslice_dummy_var_86 := mos7840_write($p249, $p250, $p7, $i251);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1329} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    goto $bb223;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i55, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i55, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i55, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i55, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i72 == 1);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $i223 := $M.45;
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i223, 4);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $i229 := $M.45;
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i229, 1);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $i235 := $M.45;
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i236 := $eq.i32($i235, 3);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $i241 := $M.45;
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i241, 2);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb218:
    assume $i242 == 1;
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $p243 := $M.41;
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $i244 := $load.i32($M.27, $p2);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $i245 := $load.i32($M.27, $p5);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} vslice_dummy_var_85 := mos7840_tiocmset($p243, $i244, $i245);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1327} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb215:
    assume $i236 == 1;
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $p237 := $M.41;
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $i238 := $load.i32($M.27, $p2);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $i239 := $load.i32($M.27, $p5);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} vslice_dummy_var_84 := mos7840_tiocmset($p237, $i238, $i239);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1325} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb212:
    assume $i230 == 1;
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $p231 := $M.41;
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $i232 := $load.i32($M.27, $p2);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $i233 := $load.i32($M.27, $p5);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} vslice_dummy_var_83 := mos7840_tiocmset($p231, $i232, $i233);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1323} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb209:
    assume $i224 == 1;
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $p225 := $M.41;
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $i226 := $load.i32($M.27, $p2);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.27, $p5);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} vslice_dummy_var_82 := mos7840_tiocmset($p225, $i226, $i227);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1321} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb84:
    assume $i72 == 1;
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $i199 := $M.45;
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i199, 4);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $i205 := $M.45;
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i205, 1);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $i211 := $M.45;
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i211, 3);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $i217 := $M.45;
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, 2);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb206:
    assume $i218 == 1;
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $p219 := $M.41;
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $i220 := $load.i32($M.27, $p0);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $i221 := $load.i64($M.27, $p3);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} vslice_dummy_var_81 := mos7840_ioctl($p219, $i220, $i221);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1319} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb203:
    assume $i212 == 1;
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $p213 := $M.41;
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $i214 := $load.i32($M.27, $p0);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $i215 := $load.i64($M.27, $p3);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} vslice_dummy_var_80 := mos7840_ioctl($p213, $i214, $i215);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1317} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb200:
    assume $i206 == 1;
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $p207 := $M.41;
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $i208 := $load.i32($M.27, $p0);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $i209 := $load.i64($M.27, $p3);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} vslice_dummy_var_79 := mos7840_ioctl($p207, $i208, $i209);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1315} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb197:
    assume $i200 == 1;
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $p201 := $M.41;
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $i202 := $load.i32($M.27, $p0);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $i203 := $load.i64($M.27, $p3);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} vslice_dummy_var_78 := mos7840_ioctl($p201, $i202, $i203);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1313} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb82:
    assume $i71 == 1;
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $i183 := $M.45;
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i183, 4);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $i187 := $M.45;
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 1);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $i191 := $M.45;
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 3);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $i195 := $M.45;
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i195, 2);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb194:
    assume $i196 == 1;
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $p197 := $M.39;
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} vslice_dummy_var_77 := mos7840_port_remove($p197);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1311} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb191:
    assume $i192 == 1;
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $p193 := $M.39;
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} vslice_dummy_var_76 := mos7840_port_remove($p193);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1309} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb188:
    assume $i188 == 1;
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $p189 := $M.39;
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} vslice_dummy_var_75 := mos7840_port_remove($p189);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1307} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb185:
    assume $i184 == 1;
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $p185 := $M.39;
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} vslice_dummy_var_74 := mos7840_port_remove($p185);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1305} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb80:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i55, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i55, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i74 == 1);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $i167 := $M.45;
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 4);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $i171 := $M.45;
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i172 := $eq.i32($i171, 1);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $i175 := $M.45;
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i175, 3);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $i179 := $M.45;
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, 2);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb182:
    assume $i180 == 1;
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $p181 := $M.41;
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $p182 := $M.39;
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} mos7840_set_termios($p181, $p182, $p9);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1303} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    goto $bb184;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb179:
    assume $i176 == 1;
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $p177 := $M.41;
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $p178 := $M.39;
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} mos7840_set_termios($p177, $p178, $p9);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1301} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    goto $bb181;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb176:
    assume $i172 == 1;
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $p173 := $M.41;
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $p174 := $M.39;
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} mos7840_set_termios($p173, $p174, $p9);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1299} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    goto $bb178;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb173:
    assume $i168 == 1;
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $p169 := $M.41;
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $p170 := $M.39;
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} mos7840_set_termios($p169, $p170, $p9);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1297} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    goto $bb175;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb88:
    assume $i74 == 1;
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $i160 := $M.45;
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 3);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb167:
    assume $i161 == 1;
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $p162 := $M.41;
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $p163 := $M.39;
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} $i164 := mos7840_open($p162, $p163);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $M.49 := $i164;
    call {:si_unique_call 1294} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i164);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $i165 := $M.49;
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 0);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb169:
    assume $i166 == 1;
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1295} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    goto $bb171;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb86:
    assume $i73 == 1;
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $i144 := $M.45;
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 4);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $i148 := $M.45;
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 1);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $i152 := $M.45;
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i152, 3);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i156 := $M.45;
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, 2);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb164:
    assume $i157 == 1;
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $p158 := $M.40;
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} vslice_dummy_var_73 := mos7840_calc_num_ports($p158);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1292} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb161:
    assume $i153 == 1;
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $p154 := $M.40;
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} vslice_dummy_var_72 := mos7840_calc_num_ports($p154);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1290} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb158:
    assume $i149 == 1;
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $p150 := $M.40;
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} vslice_dummy_var_71 := mos7840_calc_num_ports($p150);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1288} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb155:
    assume $i145 == 1;
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $p146 := $M.40;
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} vslice_dummy_var_70 := mos7840_calc_num_ports($p146);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1286} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb78:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i55, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i55, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i55, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i77 == 1);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $i132 := $M.45;
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 4);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $i135 := $M.45;
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 1);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $i138 := $M.45;
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 3);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $i141 := $M.45;
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 2);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb152:
    assume $i142 == 1;
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $p143 := $M.41;
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} mos7840_unthrottle($p143);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1284} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    goto $bb154;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb149:
    assume $i139 == 1;
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $p140 := $M.41;
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} mos7840_unthrottle($p140);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1282} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    goto $bb151;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb146:
    assume $i136 == 1;
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $p137 := $M.41;
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} mos7840_unthrottle($p137);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1280} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    goto $bb148;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb143:
    assume $i133 == 1;
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $p134 := $M.41;
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} mos7840_unthrottle($p134);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1278} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    goto $bb145;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb94:
    assume $i77 == 1;
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $i116 := $M.45;
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 4);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $i120 := $M.45;
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 1);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $i124 := $M.45;
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 3);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $i128 := $M.45;
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 2);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb140:
    assume $i129 == 1;
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $p130 := $M.39;
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} vslice_dummy_var_69 := mos7840_port_probe($p130);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1276} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    goto $bb142;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb137:
    assume $i125 == 1;
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $p126 := $M.39;
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} vslice_dummy_var_68 := mos7840_port_probe($p126);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1274} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    goto $bb139;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb134:
    assume $i121 == 1;
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $p122 := $M.39;
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} vslice_dummy_var_67 := mos7840_port_probe($p122);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1272} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    goto $bb136;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb131:
    assume $i117 == 1;
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $p118 := $M.39;
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} vslice_dummy_var_66 := mos7840_port_probe($p118);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1270} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    goto $bb133;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb92:
    assume $i76 == 1;
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $i100 := $M.45;
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 4);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i104 := $M.45;
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 1);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $i108 := $M.45;
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 3);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $i112 := $M.45;
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 2);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb128:
    assume $i113 == 1;
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $p114 := $M.41;
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} vslice_dummy_var_65 := usb_serial_generic_get_icount($p114, $p13);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1268} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb125:
    assume $i109 == 1;
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $p110 := $M.41;
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} vslice_dummy_var_64 := usb_serial_generic_get_icount($p110, $p13);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1266} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb122:
    assume $i105 == 1;
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $p106 := $M.41;
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} vslice_dummy_var_63 := usb_serial_generic_get_icount($p106, $p13);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1264} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb119:
    assume $i101 == 1;
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $p102 := $M.41;
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} vslice_dummy_var_62 := usb_serial_generic_get_icount($p102, $p13);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1262} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb90:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i55, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i78 == 1);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $i88 := $M.45;
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 4);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i91 := $M.45;
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 1);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i94 := $M.45;
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 3);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i97 := $M.45;
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 2);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb116:
    assume $i98 == 1;
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $p99 := $M.41;
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} mos7840_throttle($p99);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1260} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    goto $bb118;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb113:
    assume $i95 == 1;
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $p96 := $M.41;
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} mos7840_throttle($p96);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1258} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    goto $bb115;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb110:
    assume $i92 == 1;
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $p93 := $M.41;
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} mos7840_throttle($p93);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1256} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    goto $bb112;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb107:
    assume $i89 == 1;
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $p90 := $M.41;
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} mos7840_throttle($p90);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1254} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    goto $bb109;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb96:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i55, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb63;

  $bb98:
    assume $i79 == 1;
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $i80 := $M.45;
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 1);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb100:
    assume $i81 == 1;
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $p82 := $M.40;
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $i83 := mos7840_probe($p82, $p11);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $M.48 := $i83;
    call {:si_unique_call 1250} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i83);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $i84 := $M.48;
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 0);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb102:
    assume $i85 == 1;
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1251} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $i86 := $M.43;
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $i87 := $add.i32($i86, 1);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $M.43 := $i87;
    call {:si_unique_call 1252} {:cexpr "ref_cnt"} boogie_si_record_i32($i87);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    goto $bb104;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i28, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $i36 := $M.44;
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18:
    assume $i37 == 1;
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1233} $i38 := __VERIFIER_nondet_int();
    call {:si_unique_call 1234} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i38);
    call {:si_unique_call 1235} {:cexpr "tmp___4"} boogie_si_record_i32($i38);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i38, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i38, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} ldv_stop();
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb23:
    assume $i40 == 1;
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $i46 := $M.44;
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 1);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb36:
    assume $i47 == 1;
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} $i48 := usb_serial_module_init();
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $M.47 := $i48;
    call {:si_unique_call 1240} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i48);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i49 := $M.47;
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i51 := $M.47;
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i52 == 1;
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 1244} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} ldv_check_final_state();
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb38:
    assume $i50 == 1;
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $M.44 := 3;
    call {:si_unique_call 1241} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1242} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} ldv_initialize_usb_serial_driver_3();
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb21:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i38, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb25;

  $bb26:
    assume $i41 == 1;
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $i42 := $M.44;
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 3);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb28:
    assume $i43 == 1;
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $i44 := $M.43;
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb30;

  $bb31:
    assume $i45 == 1;
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} usb_serial_module_exit();
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 1237} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb10:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i28, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb9;

  $bb12:
    assume $i33 == 1;
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $i34 := $M.42;
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} choose_timer_1();
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb17_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1229} $i28 := __VERIFIER_nondet_int();
    call {:si_unique_call 1230} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i28);
    call {:si_unique_call 1231} {:cexpr "tmp___3"} boogie_si_record_i32($i28);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 333858);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_module_exit: ref;

axiom usb_serial_module_exit == $sub.ref(0, 334890);

procedure usb_serial_module_exit();
  free requires assertsPassed;



implementation usb_serial_module_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} usb_serial_deregister_drivers(serial_drivers);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_module_init: ref;

axiom usb_serial_module_init == $sub.ref(0, 335922);

procedure usb_serial_module_init() returns ($r: i32);
  free requires assertsPassed;



implementation usb_serial_module_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $i0 := usb_serial_register_drivers(serial_drivers, .str, id_table);
    call {:si_unique_call 1396} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_detach_3: ref;

axiom ldv_detach_3 == $sub.ref(0, 336954);

procedure ldv_detach_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_detach_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1397} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1398} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_3: ref;

axiom ldv_release_3 == $sub.ref(0, 337986);

procedure ldv_release_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1399} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1400} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_attach_3: ref;

axiom ldv_attach_3 == $sub.ref(0, 339018);

procedure ldv_attach_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_attach_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1401} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1402} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 340050);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_register_drivers: ref;

axiom usb_serial_register_drivers == $sub.ref(0, 341082);

procedure usb_serial_register_drivers($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_serial_register_drivers($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1403} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1404} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_serial_deregister_drivers: ref;

axiom usb_serial_deregister_drivers == $sub.ref(0, 342114);

procedure usb_serial_deregister_drivers($p0: ref);
  free requires assertsPassed;



implementation usb_serial_deregister_drivers($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 343146);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1405} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 1} true;
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 344178);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 345210);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 346242);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 347274);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 348306);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 349338);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 350370);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 351402);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 352434);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 353466);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 354498);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 355530);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 356562);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1406} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1407} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1408} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1409} __VERIFIER_assume($i4);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 357594);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 358626);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 359658);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 360690);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1410} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1411} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1412} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1413} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1414} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1415} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1416} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1417} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1418} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1419} __VERIFIER_assume($i7);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1420} __VERIFIER_assume($i11);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 361722);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 362754);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 363786);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 364818);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 365850);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 366882);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1421} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1422} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1423} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1424} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1425} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1426} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1427} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1428} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1429} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1430} __VERIFIER_assume($i7);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1431} __VERIFIER_assume($i11);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 367914);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 368946);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 369978);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 371010);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 372042);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 373074);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 374106);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 375138);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 376170);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1432} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1433} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1434} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 377202);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1435} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1436} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1437} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 378234);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1438} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1439} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 379266);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 380298);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1440} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1441} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 381330);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 382362);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 383394);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1442} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1443} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1444} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1445} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} $p6 := malloc($i5);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 1447} cmdloc_dummy_var_8 := $memset.i8(cmdloc_dummy_var_7, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 384426);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 385458);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.17, $M.19, $M.21, $M.23, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.16, $M.18, $M.20, $M.22, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.15, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.0, $M.63, $M.64;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1448} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.17 := 0;
    call {:si_unique_call 1449} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(0);
    $M.19 := 0;
    call {:si_unique_call 1450} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(0);
    $M.21 := 0;
    call {:si_unique_call 1451} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(0);
    $M.23 := 0;
    call {:si_unique_call 1452} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(0);
    $M.28 := 0;
    call {:si_unique_call 1453} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(0);
    $M.29 := $0.ref;
    $M.30 := 0;
    call {:si_unique_call 1454} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(0);
    $M.31 := $0.ref;
    $M.32 := 0;
    call {:si_unique_call 1455} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(0);
    $M.33 := $0.ref;
    $M.34 := 0;
    call {:si_unique_call 1456} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(0);
    $M.35 := $0.ref;
    $M.16 := $0.ref;
    $M.18 := $0.ref;
    $M.20 := $0.ref;
    $M.22 := $0.ref;
    $M.38 := $0.ref;
    $M.39 := $0.ref;
    $M.40 := $0.ref;
    $M.41 := $0.ref;
    $M.42 := 0;
    call {:si_unique_call 1457} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 1458} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 1459} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.45 := 0;
    call {:si_unique_call 1460} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1461} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 1462} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 1463} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1464} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.15 := 0;
    call {:si_unique_call 1465} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.50 := $store.i16($M.50, __mod_usb__id_table_device_table, 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(0, 32)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i64($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i64($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i64($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(0, 1)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(4, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i64($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(0, 1)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(4, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i64($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(0, 1)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(4, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i64($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(0, 1)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(4, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i64($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(0, 1)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(4, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i64($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(0, 1)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(4, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i64($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(0, 1)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(4, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(13, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i64($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(0, 1)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(4, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(13, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i64($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(0, 1)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(4, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(13, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(15, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i64($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(0, 1)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(4, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(13, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(15, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i64($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(0, 1)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(4, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(13, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(15, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i64($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(0, 1)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(4, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(6, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(11, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(13, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(15, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i64($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(0, 1)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(4, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(6, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(10, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(11, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(13, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(14, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(15, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i64($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(0, 1)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(4, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(6, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(8, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(10, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(11, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(12, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(13, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(14, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(15, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i64($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(0, 1)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(4, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(6, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(8, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(10, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(11, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(12, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(13, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(14, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(15, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i64($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(0, 1)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(4, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(6, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(8, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(10, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(11, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(12, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(13, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(14, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(15, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i64($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, id_table, 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(0, 32)), $mul.ref(2, 1)), $sub.i16(0, 26864));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(0, 32)), $mul.ref(4, 1)), 30784);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(2, 1)), $sub.i16(0, 26864));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(4, 1)), 30752);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(2, 1)), $sub.i16(0, 26864));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(4, 1)), 30736);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(2, 1)), 2134);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(4, 1)), $sub.i16(0, 21470));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(2, 1)), 2134);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(4, 1)), $sub.i16(0, 17408));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(2, 1)), 2134);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(4, 1)), $sub.i16(0, 21468));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(2, 1)), 2134);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(4, 1)), $sub.i16(0, 17407));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(2, 1)), 2134);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(4, 1)), $sub.i16(0, 21463));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(2, 1)), 2134);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(4, 1)), $sub.i16(0, 21456));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(2, 1)), 2134);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(4, 1)), $sub.i16(0, 21455));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(2, 1)), 2134);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(4, 1)), $sub.i16(0, 21454));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(10, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(2, 1)), 2134);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(4, 1)), $sub.i16(0, 21438));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(11, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(2, 1)), 2134);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(4, 1)), $sub.i16(0, 17406));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(12, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(2, 1)), 2134);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(4, 1)), $sub.i16(0, 21436));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(13, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(2, 1)), 2134);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(4, 1)), $sub.i16(0, 17405));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(14, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(2, 1)), 2134);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(4, 1)), $sub.i16(0, 21468));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(15, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(2, 1)), 1367);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(4, 1)), 8209);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(16, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(2, 1)), 1367);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(4, 1)), 30752);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(17, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 608)), $mul.ref(18, 32)), $mul.ref(24, 1)), 0);
    $M.63 := $store.ref($M.63, moschip7840_4port_device, .str.5);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(8, 1)), id_table);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(16, 1)), 4);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(8, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(0, 1)), .str);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(8, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1)), __this_module);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(24, 1)), $0.ref);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(32, 1)), 0);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(36, 1)), 0);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(40, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(48, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(56, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(64, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(72, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(80, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(88, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(96, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(104, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(112, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(160, 1)), $0.ref);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.63 := $store.i64($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.63 := $store.i64($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(256, 1)), 0);
    $M.63 := $store.i64($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(264, 1)), 0);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(272, 1)), mos7840_probe);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(280, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(288, 1)), mos7840_calc_num_ports);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(296, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(304, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(312, 1)), mos7840_port_probe);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(320, 1)), mos7840_port_remove);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(328, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(336, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(344, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(352, 1)), mos7840_open);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(360, 1)), mos7840_close);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(368, 1)), mos7840_write);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(376, 1)), mos7840_write_room);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(384, 1)), mos7840_ioctl);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(392, 1)), mos7840_set_termios);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(400, 1)), mos7840_break);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(408, 1)), mos7840_chars_in_buffer);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(416, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(424, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(432, 1)), mos7840_throttle);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(440, 1)), mos7840_unthrottle);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(448, 1)), mos7840_tiocmget);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(456, 1)), mos7840_tiocmset);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(464, 1)), usb_serial_generic_tiocmiwait);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(472, 1)), usb_serial_generic_get_icount);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(480, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(488, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(496, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(504, 1)), mos7840_interrupt_callback);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(512, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(520, 1)), mos7840_bulk_in_callback);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(528, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(536, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(moschip7840_4port_device, $mul.ref(0, 552)), $mul.ref(544, 1)), $0.ref);
    $M.64 := $store.ref($M.64, serial_drivers, moschip7840_4port_device);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(serial_drivers, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.i8($M.0, .str.132, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 25)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 25)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 25)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 25)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 25)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 25)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 25)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 25)), $mul.ref(8, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 25)), $mul.ref(9, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 25)), $mul.ref(10, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 25)), $mul.ref(11, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 25)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 25)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 25)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 25)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 25)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 25)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 25)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 25)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 25)), $mul.ref(20, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 25)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 25)), $mul.ref(22, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 25)), $mul.ref(23, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.1, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 25)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 25)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 25)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 25)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 25)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 25)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 25)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 25)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 25)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 25)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 25)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 25)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 25)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 25)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 25)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 25)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 25)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 25)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 25)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 25)), $mul.ref(20, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 25)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 25)), $mul.ref(22, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 25)), $mul.ref(23, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.137, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 22)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 22)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 22)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 22)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 22)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 22)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 22)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 22)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 22)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 22)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 22)), $mul.ref(13, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 22)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 22)), $mul.ref(15, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 22)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 22)), $mul.ref(17, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 22)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 22)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 22)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.110, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(18, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(20, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(21, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(22, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(23, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(24, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(25, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, .str.118, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 25)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 25)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 25)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 25)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 25)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 25)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 25)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 25)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 25)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 25)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 25)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 25)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 25)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 25)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 25)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 25)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 25)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 25)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 25)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 25)), $mul.ref(20, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 25)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 25)), $mul.ref(22, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 25)), $mul.ref(23, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.100, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 17)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 17)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 17)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 17)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 17)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 17)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 17)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 17)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 17)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 17)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 17)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 17)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 17)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 17)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 17)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.12, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 21)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 21)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 21)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 21)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 21)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 21)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 21)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 21)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 21)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 21)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 21)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 21)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 21)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 21)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 21)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 21)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 21)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 21)), $mul.ref(19, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.130, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 17)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 17)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 17)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 17)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 17)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 17)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 17)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 17)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 17)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 17)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 17)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 17)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 17)), $mul.ref(13, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 17)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 17)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.69, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 21)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 21)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 21)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 21)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 21)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 21)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 21)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 21)), $mul.ref(8, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 21)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 21)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 21)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 21)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 21)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 21)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 21)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 21)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 21)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 21)), $mul.ref(19, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.48, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(11, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.6, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 17)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 17)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 17)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 17)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 17)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 17)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 17)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 17)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 17)), $mul.ref(9, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 17)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 17)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 17)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 17)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 17)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 17)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.129, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 24)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 24)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 24)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 24)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 24)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 24)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 24)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 24)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 24)), $mul.ref(9, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 24)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 24)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 24)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 24)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 24)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 24)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 24)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 24)), $mul.ref(17, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 24)), $mul.ref(18, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 24)), $mul.ref(19, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 24)), $mul.ref(20, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 24)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 24)), $mul.ref(22, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.127, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(8, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(12, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.70, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 20)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 20)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 20)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 20)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 20)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 20)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 20)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 20)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 20)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 20)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 20)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 20)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 20)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 20)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 20)), $mul.ref(15, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 20)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 20)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 20)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.76, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(9, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(12, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(24, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(25, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(26, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(27, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, .str.86, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(13, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(17, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(19, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(22, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(23, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(24, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(25, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(26, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(27, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(28, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(29, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(30, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(31, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, .str.46, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 21)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 21)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 21)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 21)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 21)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 21)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 21)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 21)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 21)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 21)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 21)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 21)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 21)), $mul.ref(14, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 21)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 21)), $mul.ref(17, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 21)), $mul.ref(18, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 21)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.44, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 21)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 21)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 21)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 21)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 21)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 21)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 21)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 21)), $mul.ref(8, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 21)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 21)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 21)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 21)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 21)), $mul.ref(14, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 21)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 21)), $mul.ref(17, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 21)), $mul.ref(18, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 21)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.93, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(10, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(13, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(22, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(23, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(24, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(25, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(26, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(27, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(28, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(29, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, .str.95, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.125, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 19)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 19)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 19)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 19)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 19)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 19)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 19)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 19)), $mul.ref(8, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 19)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 19)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 19)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 19)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 19)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 19)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 19)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 19)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 19)), $mul.ref(17, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.102, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 14)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 14)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 14)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 14)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 14)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 14)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 14)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 14)), $mul.ref(8, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 14)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 14)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 14)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 14)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.108, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(8, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(9, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(10, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(11, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(17, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(21, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(22, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(23, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(24, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(25, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(26, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(27, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(28, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(29, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, .str.122, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 14)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 14)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 14)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 14)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 14)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 14)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 14)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 14)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 14)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 14)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 14)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 14)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.50, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.14, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(16, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.40, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(9, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(10, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(20, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(22, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    call {:si_unique_call 1466} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 386490);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 387522);

procedure devirtbounce.1(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 388554);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.17, $M.19, $M.21, $M.23, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.16, $M.18, $M.20, $M.22, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.15, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.0, $M.63, $M.64, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1467} __SMACK_static_init();
    call {:si_unique_call 1468} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.27, $M.17, $M.19, $M.21, $M.23, $M.42, $M.43, $M.44, $M.45, $M.28, $M.30, $M.32, $M.34, $M.46, $M.47, $M.38, $M.39, $M.40, $M.41, $M.48, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.7, $M.49, $M.8, $M.29, $M.31, $M.33, $M.35, $M.16, $M.18, $M.20, $M.22, $M.15, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $CurrAddr, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.25, $M.26;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation {:SIextraRecBound 16} mos7840_open_loop_$bb14(in_$p25: ref, in_$p55: ref, in_$i56: i64, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$i67: i64, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$i54: i32) returns (out_$p55: ref, out_$i56: i64, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$i67: i64, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$i54: i32)
{

  entry:
    out_$p55, out_$i56, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p69, out_$i70, out_$i71, out_$i54 := in_$p55, in_$i56, in_$p58, in_$i59, in_$i60, in_$p61, in_$p62, in_$p63, in_$p64, in_$i65, in_$i66, in_$i67, in_$p69, in_$i70, in_$i71, in_$i54;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1269;

  $bb23:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i54 := out_$i70;
    goto $bb23_dummy;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    out_$i71 := $sle.i32(out_$i70, 15);
    goto corral_source_split_1281;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i54, 1);
    call {:si_unique_call 213} {:cexpr "j"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_1280;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i60 == 1;
    goto corral_source_split_1278;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i64(out_$i59, 0);
    goto corral_source_split_1276;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i64(out_$p55);
    goto corral_source_split_1275;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p58, out_$p55);
    goto corral_source_split_1274;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(in_$p25, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(out_$i56, 8));
    goto corral_source_split_1273;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(out_$i54);
    goto corral_source_split_1272;

  SeqInstr_30:
    goto corral_source_split_1271;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} out_$p55 := ldv_usb_alloc_urb_29(0, 208);
    goto SeqInstr_29;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p69, $0.ref);
    goto corral_source_split_1295;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref(in_$p25, $mul.ref(0, 584)), $mul.ref(152, 1)), $mul.ref(out_$i67, 8));
    goto corral_source_split_1294;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i54);
    goto corral_source_split_1293;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} usb_free_urb(out_$p55);
    goto corral_source_split_1292;

  $bb20:
    assume out_$i66 == 1;
    goto corral_source_split_1291;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i64(out_$i65, 0);
    goto corral_source_split_1289;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    out_$i65 := $p2i.ref.i64(out_$p64);
    goto corral_source_split_1288;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.0, out_$p63);
    goto corral_source_split_1287;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p55, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1286;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p62, out_$p61);
    goto corral_source_split_1285;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p55, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1284;

  SeqInstr_33:
    goto corral_source_split_1283;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} out_$p61 := kmalloc(32, 208);
    goto SeqInstr_32;

  $bb17:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb21:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p55, out_$i56, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p69, out_$i70, out_$i71, out_$i54 := mos7840_open_loop_$bb14(in_$p25, out_$p55, out_$i56, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p69, out_$i70, out_$i71, out_$i54);
    return;

  exit:
    return;
}



procedure mos7840_open_loop_$bb14(in_$p25: ref, in_$p55: ref, in_$i56: i64, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$i67: i64, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$i54: i32) returns (out_$p55: ref, out_$i56: i64, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$i67: i64, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$i54: i32);
  modifies $M.0, assertsPassed;



implementation mos7840_interrupt_callback_loop_$bb41(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p63: ref, in_$p96: ref, in_$i104: i64, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$i114: i8, in_$i115: i16, in_$i116: i32, in_$i117: i32, in_$i118: i32, in_$i119: i16, in_$p120: ref, in_$i121: i8, in_$i122: i32, in_$i123: i1, in_$i124: i64, in_$p125: ref, in_$i126: i8, in_$i127: i32, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$i136: i24, in_$i137: i24, in_$i138: i24, in_$p139: ref, in_$p140: ref, in_$i141: i8, in_$i142: i64, in_$i143: i64, in_$i144: i64, in_$i145: i1, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$i151: i64, in_$p152: ref, in_$i153: i8, in_$i154: i32, in_$i155: i32, in_$i156: i1, in_$i157: i1, in_$i158: i1, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$i165: i24, in_$i166: i24, in_$i167: i24, in_$p168: ref, in_$p169: ref, in_$i170: i8, in_$i171: i64, in_$i172: i64, in_$i173: i64, in_$i174: i1, in_$p175: ref, in_$p176: ref, in_$p177: ref, in_$p178: ref, in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$i184: i24, in_$i185: i24, in_$i186: i24, in_$p187: ref, in_$p188: ref, in_$i189: i8, in_$i190: i64, in_$i191: i64, in_$i192: i64, in_$i193: i1, in_$p194: ref, in_$p195: ref, in_$p196: ref, in_$p197: ref, in_$p199: ref, in_$p200: ref, in_$p201: ref, in_$p202: ref, in_$p203: ref, in_$p204: ref, in_$i205: i24, in_$i206: i24, in_$i207: i24, in_$p208: ref, in_$p209: ref, in_$i210: i8, in_$i211: i64, in_$i212: i64, in_$i213: i64, in_$i214: i1, in_$p215: ref, in_$p216: ref, in_$p217: ref, in_$p218: ref, in_$i198: i16, in_$i219: i32, in_$i220: i16, in_$i221: i32, in_$i222: i16, in_$i223: i32, in_$i149: i32, in_$i150: i16, in_$i224: i32, in_$i225: i16, in_$i226: i32, in_$i227: i8, in_$i228: i32, in_$i229: i1, in_$i101: i16, in_$i102: i32, in_$i103: i32, in_$i230: i32) returns (out_$i104: i64, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$i114: i8, out_$i115: i16, out_$i116: i32, out_$i117: i32, out_$i118: i32, out_$i119: i16, out_$p120: ref, out_$i121: i8, out_$i122: i32, out_$i123: i1, out_$i124: i64, out_$p125: ref, out_$i126: i8, out_$i127: i32, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$i136: i24, out_$i137: i24, out_$i138: i24, out_$p139: ref, out_$p140: ref, out_$i141: i8, out_$i142: i64, out_$i143: i64, out_$i144: i64, out_$i145: i1, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$i151: i64, out_$p152: ref, out_$i153: i8, out_$i154: i32, out_$i155: i32, out_$i156: i1, out_$i157: i1, out_$i158: i1, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$i165: i24, out_$i166: i24, out_$i167: i24, out_$p168: ref, out_$p169: ref, out_$i170: i8, out_$i171: i64, out_$i172: i64, out_$i173: i64, out_$i174: i1, out_$p175: ref, out_$p176: ref, out_$p177: ref, out_$p178: ref, out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$i184: i24, out_$i185: i24, out_$i186: i24, out_$p187: ref, out_$p188: ref, out_$i189: i8, out_$i190: i64, out_$i191: i64, out_$i192: i64, out_$i193: i1, out_$p194: ref, out_$p195: ref, out_$p196: ref, out_$p197: ref, out_$p199: ref, out_$p200: ref, out_$p201: ref, out_$p202: ref, out_$p203: ref, out_$p204: ref, out_$i205: i24, out_$i206: i24, out_$i207: i24, out_$p208: ref, out_$p209: ref, out_$i210: i8, out_$i211: i64, out_$i212: i64, out_$i213: i64, out_$i214: i1, out_$p215: ref, out_$p216: ref, out_$p217: ref, out_$p218: ref, out_$i198: i16, out_$i219: i32, out_$i220: i16, out_$i221: i32, out_$i222: i16, out_$i223: i32, out_$i149: i32, out_$i150: i16, out_$i224: i32, out_$i225: i16, out_$i226: i32, out_$i227: i8, out_$i228: i32, out_$i229: i1, out_$i101: i16, out_$i102: i32, out_$i103: i32, out_$i230: i32)
{

  entry:
    out_$i104, out_$p106, out_$p107, out_$p108, out_$i109, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$p132, out_$p133, out_$p134, out_$p135, out_$i136, out_$i137, out_$i138, out_$p139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$p147, out_$p148, out_$i151, out_$p152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$p159, out_$p160, out_$p161, out_$p162, out_$p163, out_$p164, out_$i165, out_$i166, out_$i167, out_$p168, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$p175, out_$p176, out_$p177, out_$p178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$i184, out_$i185, out_$i186, out_$p187, out_$p188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$p194, out_$p195, out_$p196, out_$p197, out_$p199, out_$p200, out_$p201, out_$p202, out_$p203, out_$p204, out_$i205, out_$i206, out_$i207, out_$p208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$p215, out_$p216, out_$p217, out_$p218, out_$i198, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i149, out_$i150, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i101, out_$i102, out_$i103, out_$i230 := in_$i104, in_$p106, in_$p107, in_$p108, in_$i109, in_$p111, in_$p112, in_$p113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$p120, in_$i121, in_$i122, in_$i123, in_$i124, in_$p125, in_$i126, in_$i127, in_$i128, in_$i129, in_$p130, in_$p131, in_$p132, in_$p133, in_$p134, in_$p135, in_$i136, in_$i137, in_$i138, in_$p139, in_$p140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$p146, in_$p147, in_$p148, in_$i151, in_$p152, in_$i153, in_$i154, in_$i155, in_$i156, in_$i157, in_$i158, in_$p159, in_$p160, in_$p161, in_$p162, in_$p163, in_$p164, in_$i165, in_$i166, in_$i167, in_$p168, in_$p169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$p175, in_$p176, in_$p177, in_$p178, in_$p179, in_$p180, in_$p181, in_$p182, in_$p183, in_$i184, in_$i185, in_$i186, in_$p187, in_$p188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$p194, in_$p195, in_$p196, in_$p197, in_$p199, in_$p200, in_$p201, in_$p202, in_$p203, in_$p204, in_$i205, in_$i206, in_$i207, in_$p208, in_$p209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$p215, in_$p216, in_$p217, in_$p218, in_$i198, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i149, in_$i150, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i229, in_$i101, in_$i102, in_$i103, in_$i230;
    goto $bb41, exit;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4425;

  $bb71:
    assume out_$i229 == 1;
    assume {:verifier.code 0} true;
    out_$i101, out_$i102, out_$i103 := out_$i225, out_$i224, out_$i226;
    goto $bb71_dummy;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    out_$i230 := out_$i224;
    assume true;
    goto $bb71;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    out_$i229 := $sgt.i32(out_$i228, out_$i226);
    goto corral_source_split_4597;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    out_$i228 := $zext.i8.i32(out_$i227);
    goto corral_source_split_4596;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    out_$i227 := $load.i8($M.0, in_$p96);
    goto corral_source_split_4595;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    out_$i226 := $add.i32(out_$i103, 1);
    call {:si_unique_call 640} {:cexpr "i"} boogie_si_record_i32(out_$i226);
    goto corral_source_split_4594;

  $bb70:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4593;

  $bb44:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    out_$i224, out_$i225 := out_$i102, out_$i101;
    goto $bb70;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    out_$i224, out_$i225 := out_$i149, out_$i150;
    goto $bb70;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4490;

  SeqInstr_93:
    call {:si_unique_call 638} {:cexpr "rv"} boogie_si_record_i32(out_$i223);
    assume {:verifier.code 0} true;
    out_$i149, out_$i150 := out_$i223, out_$i198;
    goto $bb50;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i149, out_$i150 := out_$i102, out_$i101;
    goto $bb50;

  $bb48:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} __dynamic_dev_dbg.ref.ref.ref.i32(in_$p6, out_$p148, .str.114, out_$i103);
    goto corral_source_split_4488;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(out_$p147, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4487;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    out_$p147 := $load.ref($M.0, out_$p146);
    goto corral_source_split_4486;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_4485;

  $bb47:
    assume out_$i145 == 1;
    goto corral_source_split_4484;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    out_$i145 := $ne.i64(out_$i144, 0);
    goto corral_source_split_4476;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} out_$i144 := ldv__builtin_expect(out_$i143, 0);
    call {:si_unique_call 627} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i144);
    goto corral_source_split_4475;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    out_$i143 := $and.i64(out_$i142, 1);
    goto corral_source_split_4474;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    out_$i142 := $zext.i8.i64(out_$i141);
    goto corral_source_split_4473;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i8($M.6, out_$p140);
    goto corral_source_split_4472;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4471;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p139, 0);
    goto corral_source_split_4470;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4469;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p135, out_$i138);
    goto corral_source_split_4468;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    out_$i138 := $or.i24(out_$i137, 654);
    goto corral_source_split_4467;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    out_$i137 := $and.i24(out_$i136, $sub.i24(0, 262144));
    goto corral_source_split_4466;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    out_$i136 := $load.i24($M.5, out_$p135);
    goto corral_source_split_4465;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    out_$p135 := $bitcast.ref.ref(out_$p134);
    goto corral_source_split_4464;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4463;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p133, .str.114);
    goto corral_source_split_4462;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4461;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p132, .str.2);
    goto corral_source_split_4460;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4459;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p131, .str.110);
    goto corral_source_split_4458;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4457;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p130, .str);
    goto corral_source_split_4456;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4455;

  $bb45:
    assume out_$i129 == 1;
    goto corral_source_split_4454;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    out_$i129 := $ne.i32(out_$i128, 0);
    goto corral_source_split_4452;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    out_$i128 := $and.i32(out_$i127, 1);
    goto corral_source_split_4451;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    out_$i127 := $zext.i8.i32(out_$i126);
    goto corral_source_split_4450;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i8($M.8, out_$p125);
    goto corral_source_split_4449;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p2, $mul.ref(0, 5)), $mul.ref(out_$i124, 1));
    goto corral_source_split_4448;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    out_$i124 := $sext.i32.i64(out_$i103);
    goto corral_source_split_4447;

  $bb43:
    assume out_$i123 == 1;
    goto corral_source_split_4446;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    out_$i123 := $ne.i32(out_$i122, 0);
    goto corral_source_split_4444;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    out_$i122 := $sext.i8.i32(out_$i121);
    goto corral_source_split_4443;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i8($M.0, out_$p120);
    goto corral_source_split_4442;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(out_$p108, $mul.ref(0, 584)), $mul.ref(26, 1));
    goto corral_source_split_4441;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    out_$i119 := $trunc.i32.i16(out_$i118);
    call {:si_unique_call 625} {:cexpr "wval"} boogie_si_record_i16(out_$i119);
    goto corral_source_split_4440;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    out_$i118 := $shl.i32(out_$i117, 8);
    goto corral_source_split_4439;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    out_$i117 := $add.i32(out_$i116, 1);
    goto corral_source_split_4438;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    out_$i116 := $zext.i16.i32(out_$i115);
    goto corral_source_split_4437;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    out_$i115 := $zext.i8.i16(out_$i114);
    goto corral_source_split_4436;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i8($M.0, out_$p113);
    goto corral_source_split_4435;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(out_$p112, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_4434;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.0, out_$p111);
    goto corral_source_split_4433;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref($add.ref(in_$p63, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(out_$i109, 8));
    goto corral_source_split_4432;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    out_$i109 := $sext.i32.i64(out_$i103);
    goto corral_source_split_4431;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} out_$p108 := mos7840_get_port_private(out_$p107);
    goto corral_source_split_4430;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    out_$p107 := $load.ref($M.0, out_$p106);
    goto corral_source_split_4429;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref($add.ref(in_$p63, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(out_$i104, 8));
    goto corral_source_split_4428;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i104 := $sext.i32.i64(out_$i103);
    goto corral_source_split_4427;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    goto $bb42;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} out_$i223 := mos7840_get_reg(out_$p108, out_$i220, out_$i222, in_$p1);
    goto SeqInstr_92;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    out_$i222 := $trunc.i32.i16(out_$i221);
    goto corral_source_split_4582;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    out_$i221 := $zext.i16.i32(out_$i198);
    goto corral_source_split_4581;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    out_$i220 := $trunc.i32.i16(out_$i219);
    goto corral_source_split_4580;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    out_$i219 := $zext.i16.i32(out_$i119);
    goto corral_source_split_4579;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_4578;

  $bb69:
    assume {:verifier.code 0} true;
    out_$i198 := out_$i101;
    goto $bb65;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    out_$i198 := 5;
    goto $bb65;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    out_$i198 := 6;
    goto $bb65;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p218, 0);
    goto corral_source_split_4591;

  $bb68:
    assume {:verifier.code 0} true;
    out_$p218 := $add.ref($add.ref(out_$p108, $mul.ref(0, 584)), $mul.ref(72, 1));
    goto corral_source_split_4590;

  $bb67:
    assume !(out_$i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} __dynamic_dev_dbg.ref.ref.ref.i32(in_$p9, out_$p217, .str.117, out_$i103);
    goto corral_source_split_4588;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    out_$p217 := $add.ref($add.ref(out_$p216, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4587;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    out_$p216 := $load.ref($M.0, out_$p215);
    goto corral_source_split_4586;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    out_$p215 := $add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_4585;

  $bb66:
    assume out_$i214 == 1;
    goto corral_source_split_4584;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    out_$i214 := $ne.i64(out_$i213, 0);
    goto corral_source_split_4538;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} out_$i213 := ldv__builtin_expect(out_$i212, 0);
    call {:si_unique_call 632} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i213);
    goto corral_source_split_4537;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    out_$i212 := $and.i64(out_$i211, 1);
    goto corral_source_split_4536;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    out_$i211 := $zext.i8.i64(out_$i210);
    goto corral_source_split_4535;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    out_$i210 := $load.i8($M.6, out_$p209);
    goto corral_source_split_4534;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    out_$p209 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4533;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p208, 0);
    goto corral_source_split_4532;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    out_$p208 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4531;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p204, out_$i207);
    goto corral_source_split_4530;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    out_$i207 := $or.i24(out_$i206, 664);
    goto corral_source_split_4529;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    out_$i206 := $and.i24(out_$i205, $sub.i24(0, 262144));
    goto corral_source_split_4528;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    out_$i205 := $load.i24($M.5, out_$p204);
    goto corral_source_split_4527;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    out_$p204 := $bitcast.ref.ref(out_$p203);
    goto corral_source_split_4526;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    out_$p203 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4525;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p202, .str.117);
    goto corral_source_split_4524;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    out_$p202 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4523;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p201, .str.2);
    goto corral_source_split_4522;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    out_$p201 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4521;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p200, .str.110);
    goto corral_source_split_4520;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    out_$p200 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4519;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p199, .str);
    goto corral_source_split_4518;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    out_$p199 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4517;

  $bb57:
    assume out_$i158 == 1;
    goto corral_source_split_4516;

  $bb52:
    assume out_$i156 == 1;
    assume {:verifier.code 0} true;
    out_$i158 := $eq.i32(out_$i155, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i156 := $slt.i32(out_$i155, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    out_$i155 := $and.i32(out_$i154, 15);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    out_$i154 := $zext.i8.i32(out_$i153);
    goto corral_source_split_4482;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    out_$i153 := $load.i8($M.8, out_$p152);
    goto corral_source_split_4481;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref(in_$p2, $mul.ref(0, 5)), $mul.ref(out_$i151, 1));
    goto corral_source_split_4480;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    out_$i151 := $sext.i32.i64(out_$i103);
    goto corral_source_split_4479;

  $bb46:
    assume !(out_$i129 == 1);
    goto corral_source_split_4478;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p197, 1);
    goto corral_source_split_4576;

  $bb64:
    assume {:verifier.code 0} true;
    out_$p197 := $add.ref($add.ref(out_$p108, $mul.ref(0, 584)), $mul.ref(72, 1));
    goto corral_source_split_4575;

  $bb63:
    assume !(out_$i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} __dynamic_dev_dbg.ref.ref.ref(in_$p8, out_$p196, .str.116);
    goto corral_source_split_4573;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    out_$p196 := $add.ref($add.ref(out_$p195, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4572;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    out_$p195 := $load.ref($M.0, out_$p194);
    goto corral_source_split_4571;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    out_$p194 := $add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_4570;

  $bb62:
    assume out_$i193 == 1;
    goto corral_source_split_4569;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    out_$i193 := $ne.i64(out_$i192, 0);
    goto corral_source_split_4567;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} out_$i192 := ldv__builtin_expect(out_$i191, 0);
    call {:si_unique_call 635} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i192);
    goto corral_source_split_4566;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    out_$i191 := $and.i64(out_$i190, 1);
    goto corral_source_split_4565;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    out_$i190 := $zext.i8.i64(out_$i189);
    goto corral_source_split_4564;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    out_$i189 := $load.i8($M.6, out_$p188);
    goto corral_source_split_4563;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    out_$p188 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4562;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p187, 0);
    goto corral_source_split_4561;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4560;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p183, out_$i186);
    goto corral_source_split_4559;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    out_$i186 := $or.i24(out_$i185, 659);
    goto corral_source_split_4558;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    out_$i185 := $and.i24(out_$i184, $sub.i24(0, 262144));
    goto corral_source_split_4557;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    out_$i184 := $load.i24($M.5, out_$p183);
    goto corral_source_split_4556;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    out_$p183 := $bitcast.ref.ref(out_$p182);
    goto corral_source_split_4555;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    out_$p182 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4554;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p181, .str.116);
    goto corral_source_split_4553;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4552;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p180, .str.2);
    goto corral_source_split_4551;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    out_$p180 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4550;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p179, .str.110);
    goto corral_source_split_4549;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    out_$p179 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4548;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p178, .str);
    goto corral_source_split_4547;

  $bb61:
    assume {:verifier.code 0} true;
    out_$p178 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4546;

  $bb60:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} __dynamic_dev_dbg.ref.ref.ref.i32(in_$p7, out_$p177, .str.115, out_$i103);
    goto corral_source_split_4544;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    out_$p177 := $add.ref($add.ref(out_$p176, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4543;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    out_$p176 := $load.ref($M.0, out_$p175);
    goto corral_source_split_4542;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_4541;

  $bb59:
    assume out_$i174 == 1;
    goto corral_source_split_4540;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    out_$i174 := $ne.i64(out_$i173, 0);
    goto corral_source_split_4514;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} out_$i173 := ldv__builtin_expect(out_$i172, 0);
    call {:si_unique_call 630} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i173);
    goto corral_source_split_4513;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    out_$i172 := $and.i64(out_$i171, 1);
    goto corral_source_split_4512;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    out_$i171 := $zext.i8.i64(out_$i170);
    goto corral_source_split_4511;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    out_$i170 := $load.i8($M.6, out_$p169);
    goto corral_source_split_4510;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4509;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p168, 0);
    goto corral_source_split_4508;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    out_$p168 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4507;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p164, out_$i167);
    goto corral_source_split_4506;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    out_$i167 := $or.i24(out_$i166, 658);
    goto corral_source_split_4505;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    out_$i166 := $and.i24(out_$i165, $sub.i24(0, 262144));
    goto corral_source_split_4504;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    out_$i165 := $load.i24($M.5, out_$p164);
    goto corral_source_split_4503;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    out_$p164 := $bitcast.ref.ref(out_$p163);
    goto corral_source_split_4502;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4501;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p162, .str.115);
    goto corral_source_split_4500;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4499;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p161, .str.2);
    goto corral_source_split_4498;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4497;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p160, .str.110);
    goto corral_source_split_4496;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4495;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p159, .str);
    goto corral_source_split_4494;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4493;

  $bb54:
    assume out_$i157 == 1;
    goto corral_source_split_4492;

  $bb53:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    out_$i157 := $eq.i32(out_$i155, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb55:
    assume {:verifier.code 0} true;
    assume !(out_$i157 == 1);
    goto $bb56;

  $bb58:
    assume {:verifier.code 0} true;
    assume !(out_$i158 == 1);
    goto $bb56;

  $bb71_dummy:
    call {:si_unique_call 1} out_$i104, out_$p106, out_$p107, out_$p108, out_$i109, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$p132, out_$p133, out_$p134, out_$p135, out_$i136, out_$i137, out_$i138, out_$p139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$p147, out_$p148, out_$i151, out_$p152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$p159, out_$p160, out_$p161, out_$p162, out_$p163, out_$p164, out_$i165, out_$i166, out_$i167, out_$p168, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$p175, out_$p176, out_$p177, out_$p178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$i184, out_$i185, out_$i186, out_$p187, out_$p188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$p194, out_$p195, out_$p196, out_$p197, out_$p199, out_$p200, out_$p201, out_$p202, out_$p203, out_$p204, out_$i205, out_$i206, out_$i207, out_$p208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$p215, out_$p216, out_$p217, out_$p218, out_$i198, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i149, out_$i150, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i101, out_$i102, out_$i103, out_$i230 := mos7840_interrupt_callback_loop_$bb41(in_$p0, in_$p1, in_$p2, in_$p6, in_$p7, in_$p8, in_$p9, in_$p63, in_$p96, out_$i104, out_$p106, out_$p107, out_$p108, out_$i109, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$p132, out_$p133, out_$p134, out_$p135, out_$i136, out_$i137, out_$i138, out_$p139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$p147, out_$p148, out_$i151, out_$p152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$p159, out_$p160, out_$p161, out_$p162, out_$p163, out_$p164, out_$i165, out_$i166, out_$i167, out_$p168, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$p175, out_$p176, out_$p177, out_$p178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$i184, out_$i185, out_$i186, out_$p187, out_$p188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$p194, out_$p195, out_$p196, out_$p197, out_$p199, out_$p200, out_$p201, out_$p202, out_$p203, out_$p204, out_$i205, out_$i206, out_$i207, out_$p208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$p215, out_$p216, out_$p217, out_$p218, out_$i198, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i149, out_$i150, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i101, out_$i102, out_$i103, out_$i230);
    return;

  exit:
    return;
}



procedure mos7840_interrupt_callback_loop_$bb41(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p63: ref, in_$p96: ref, in_$i104: i64, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$i114: i8, in_$i115: i16, in_$i116: i32, in_$i117: i32, in_$i118: i32, in_$i119: i16, in_$p120: ref, in_$i121: i8, in_$i122: i32, in_$i123: i1, in_$i124: i64, in_$p125: ref, in_$i126: i8, in_$i127: i32, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$i136: i24, in_$i137: i24, in_$i138: i24, in_$p139: ref, in_$p140: ref, in_$i141: i8, in_$i142: i64, in_$i143: i64, in_$i144: i64, in_$i145: i1, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$i151: i64, in_$p152: ref, in_$i153: i8, in_$i154: i32, in_$i155: i32, in_$i156: i1, in_$i157: i1, in_$i158: i1, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$i165: i24, in_$i166: i24, in_$i167: i24, in_$p168: ref, in_$p169: ref, in_$i170: i8, in_$i171: i64, in_$i172: i64, in_$i173: i64, in_$i174: i1, in_$p175: ref, in_$p176: ref, in_$p177: ref, in_$p178: ref, in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$i184: i24, in_$i185: i24, in_$i186: i24, in_$p187: ref, in_$p188: ref, in_$i189: i8, in_$i190: i64, in_$i191: i64, in_$i192: i64, in_$i193: i1, in_$p194: ref, in_$p195: ref, in_$p196: ref, in_$p197: ref, in_$p199: ref, in_$p200: ref, in_$p201: ref, in_$p202: ref, in_$p203: ref, in_$p204: ref, in_$i205: i24, in_$i206: i24, in_$i207: i24, in_$p208: ref, in_$p209: ref, in_$i210: i8, in_$i211: i64, in_$i212: i64, in_$i213: i64, in_$i214: i1, in_$p215: ref, in_$p216: ref, in_$p217: ref, in_$p218: ref, in_$i198: i16, in_$i219: i32, in_$i220: i16, in_$i221: i32, in_$i222: i16, in_$i223: i32, in_$i149: i32, in_$i150: i16, in_$i224: i32, in_$i225: i16, in_$i226: i32, in_$i227: i8, in_$i228: i32, in_$i229: i1, in_$i101: i16, in_$i102: i32, in_$i103: i32, in_$i230: i32) returns (out_$i104: i64, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$i114: i8, out_$i115: i16, out_$i116: i32, out_$i117: i32, out_$i118: i32, out_$i119: i16, out_$p120: ref, out_$i121: i8, out_$i122: i32, out_$i123: i1, out_$i124: i64, out_$p125: ref, out_$i126: i8, out_$i127: i32, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$i136: i24, out_$i137: i24, out_$i138: i24, out_$p139: ref, out_$p140: ref, out_$i141: i8, out_$i142: i64, out_$i143: i64, out_$i144: i64, out_$i145: i1, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$i151: i64, out_$p152: ref, out_$i153: i8, out_$i154: i32, out_$i155: i32, out_$i156: i1, out_$i157: i1, out_$i158: i1, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$i165: i24, out_$i166: i24, out_$i167: i24, out_$p168: ref, out_$p169: ref, out_$i170: i8, out_$i171: i64, out_$i172: i64, out_$i173: i64, out_$i174: i1, out_$p175: ref, out_$p176: ref, out_$p177: ref, out_$p178: ref, out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$i184: i24, out_$i185: i24, out_$i186: i24, out_$p187: ref, out_$p188: ref, out_$i189: i8, out_$i190: i64, out_$i191: i64, out_$i192: i64, out_$i193: i1, out_$p194: ref, out_$p195: ref, out_$p196: ref, out_$p197: ref, out_$p199: ref, out_$p200: ref, out_$p201: ref, out_$p202: ref, out_$p203: ref, out_$p204: ref, out_$i205: i24, out_$i206: i24, out_$i207: i24, out_$p208: ref, out_$p209: ref, out_$i210: i8, out_$i211: i64, out_$i212: i64, out_$i213: i64, out_$i214: i1, out_$p215: ref, out_$p216: ref, out_$p217: ref, out_$p218: ref, out_$i198: i16, out_$i219: i32, out_$i220: i16, out_$i221: i32, out_$i222: i16, out_$i223: i32, out_$i149: i32, out_$i150: i16, out_$i224: i32, out_$i225: i16, out_$i226: i32, out_$i227: i8, out_$i228: i32, out_$i229: i1, out_$i101: i16, out_$i102: i32, out_$i103: i32, out_$i230: i32);
  modifies $M.6, $M.5, $M.4, $M.3, $M.2, $M.1, $M.0, $CurrAddr, assertsPassed;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$i28: i32, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$i55: i32, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$i83: i32, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i32, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i108: i32, in_$i109: i1, in_$p110: ref, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$i116: i32, in_$i117: i1, in_$p118: ref, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$i144: i32, in_$i145: i1, in_$p146: ref, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$i156: i32, in_$i157: i1, in_$p158: ref, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$p163: ref, in_$i164: i32, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$p170: ref, in_$i171: i32, in_$i172: i1, in_$p173: ref, in_$p174: ref, in_$i175: i32, in_$i176: i1, in_$p177: ref, in_$p178: ref, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$p182: ref, in_$i183: i32, in_$i184: i1, in_$p185: ref, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i191: i32, in_$i192: i1, in_$p193: ref, in_$i195: i32, in_$i196: i1, in_$p197: ref, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$i202: i32, in_$i203: i64, in_$i205: i32, in_$i206: i1, in_$p207: ref, in_$i208: i32, in_$i209: i64, in_$i211: i32, in_$i212: i1, in_$p213: ref, in_$i214: i32, in_$i215: i64, in_$i217: i32, in_$i218: i1, in_$p219: ref, in_$i220: i32, in_$i221: i64, in_$i223: i32, in_$i224: i1, in_$p225: ref, in_$i226: i32, in_$i227: i32, in_$i229: i32, in_$i230: i1, in_$p231: ref, in_$i232: i32, in_$i233: i32, in_$i235: i32, in_$i236: i1, in_$p237: ref, in_$i238: i32, in_$i239: i32, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$i244: i32, in_$i245: i32, in_$i247: i32, in_$i248: i1, in_$p249: ref, in_$p250: ref, in_$i251: i32, in_$i253: i32, in_$i254: i1, in_$p255: ref, in_$i256: i64, in_$i258: i32, in_$i259: i1, in_$p260: ref, in_$i261: i64, in_$i263: i32, in_$i264: i1, in_$p265: ref, in_$i266: i64, in_$i268: i32, in_$i269: i1, in_$p270: ref, in_$i271: i64, in_$i273: i32, in_$i274: i1, in_$p275: ref, in_$i276: i32, in_$i277: i1, in_$p278: ref, in_$i279: i32, in_$i280: i1, in_$p281: ref, in_$i283: i32, in_$i284: i1, in_$p285: ref, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$i291: i32, in_$i292: i1, in_$p293: ref, in_$i295: i32, in_$i296: i1, in_$p297: ref, in_$i298: i32, in_$i299: i32, in_$i300: i1, in_$p301: ref, in_$i302: i32, in_$i303: i32, in_$i304: i1, in_$p305: ref, in_$i306: i32, in_$i307: i32, in_$i308: i1, in_$p309: ref, in_$i310: i32, in_$i311: i32, in_$i312: i1, in_$p313: ref, in_$i315: i32, in_$i316: i1, in_$p317: ref, in_$i319: i32, in_$i320: i1, in_$p321: ref, in_$i323: i32, in_$i324: i1, in_$p325: ref, in_$i327: i32, in_$i328: i1, in_$p329: ref, in_$i331: i32, in_$i332: i1, in_$p333: ref, in_$i335: i32, in_$i336: i1, in_$p337: ref, in_$i339: i32, in_$i340: i1, in_$p341: ref, in_$i343: i32, in_$i344: i1, in_$p345: ref, in_$i346: i32, in_$i347: i1, in_$p348: ref, in_$i349: i32, in_$i350: i1, in_$p351: ref, in_$i352: i32, in_$i353: i1, in_$p354: ref, in_$i355: i32, in_$i356: i1, in_$i358: i32, in_$i359: i1, in_$i361: i32, in_$i362: i1, in_$i364: i32, in_$i365: i32, in_$i366: i32, in_$i367: i1, in_$i369: i32, in_$i370: i1, in_vslice_dummy_var_62: i32, in_vslice_dummy_var_63: i32, in_vslice_dummy_var_64: i32, in_vslice_dummy_var_65: i32, in_vslice_dummy_var_66: i32, in_vslice_dummy_var_67: i32, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: i32, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32) returns (out_$i28: i32, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$i55: i32, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$i83: i32, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i32, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i108: i32, out_$i109: i1, out_$p110: ref, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$i116: i32, out_$i117: i1, out_$p118: ref, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$i144: i32, out_$i145: i1, out_$p146: ref, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$i156: i32, out_$i157: i1, out_$p158: ref, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$p163: ref, out_$i164: i32, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$p170: ref, out_$i171: i32, out_$i172: i1, out_$p173: ref, out_$p174: ref, out_$i175: i32, out_$i176: i1, out_$p177: ref, out_$p178: ref, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$p182: ref, out_$i183: i32, out_$i184: i1, out_$p185: ref, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i191: i32, out_$i192: i1, out_$p193: ref, out_$i195: i32, out_$i196: i1, out_$p197: ref, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$i202: i32, out_$i203: i64, out_$i205: i32, out_$i206: i1, out_$p207: ref, out_$i208: i32, out_$i209: i64, out_$i211: i32, out_$i212: i1, out_$p213: ref, out_$i214: i32, out_$i215: i64, out_$i217: i32, out_$i218: i1, out_$p219: ref, out_$i220: i32, out_$i221: i64, out_$i223: i32, out_$i224: i1, out_$p225: ref, out_$i226: i32, out_$i227: i32, out_$i229: i32, out_$i230: i1, out_$p231: ref, out_$i232: i32, out_$i233: i32, out_$i235: i32, out_$i236: i1, out_$p237: ref, out_$i238: i32, out_$i239: i32, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$i244: i32, out_$i245: i32, out_$i247: i32, out_$i248: i1, out_$p249: ref, out_$p250: ref, out_$i251: i32, out_$i253: i32, out_$i254: i1, out_$p255: ref, out_$i256: i64, out_$i258: i32, out_$i259: i1, out_$p260: ref, out_$i261: i64, out_$i263: i32, out_$i264: i1, out_$p265: ref, out_$i266: i64, out_$i268: i32, out_$i269: i1, out_$p270: ref, out_$i271: i64, out_$i273: i32, out_$i274: i1, out_$p275: ref, out_$i276: i32, out_$i277: i1, out_$p278: ref, out_$i279: i32, out_$i280: i1, out_$p281: ref, out_$i283: i32, out_$i284: i1, out_$p285: ref, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$i291: i32, out_$i292: i1, out_$p293: ref, out_$i295: i32, out_$i296: i1, out_$p297: ref, out_$i298: i32, out_$i299: i32, out_$i300: i1, out_$p301: ref, out_$i302: i32, out_$i303: i32, out_$i304: i1, out_$p305: ref, out_$i306: i32, out_$i307: i32, out_$i308: i1, out_$p309: ref, out_$i310: i32, out_$i311: i32, out_$i312: i1, out_$p313: ref, out_$i315: i32, out_$i316: i1, out_$p317: ref, out_$i319: i32, out_$i320: i1, out_$p321: ref, out_$i323: i32, out_$i324: i1, out_$p325: ref, out_$i327: i32, out_$i328: i1, out_$p329: ref, out_$i331: i32, out_$i332: i1, out_$p333: ref, out_$i335: i32, out_$i336: i1, out_$p337: ref, out_$i339: i32, out_$i340: i1, out_$p341: ref, out_$i343: i32, out_$i344: i1, out_$p345: ref, out_$i346: i32, out_$i347: i1, out_$p348: ref, out_$i349: i32, out_$i350: i1, out_$p351: ref, out_$i352: i32, out_$i353: i1, out_$p354: ref, out_$i355: i32, out_$i356: i1, out_$i358: i32, out_$i359: i1, out_$i361: i32, out_$i362: i1, out_$i364: i32, out_$i365: i32, out_$i366: i32, out_$i367: i1, out_$i369: i32, out_$i370: i1, out_vslice_dummy_var_62: i32, out_vslice_dummy_var_63: i32, out_vslice_dummy_var_64: i32, out_vslice_dummy_var_65: i32, out_vslice_dummy_var_66: i32, out_vslice_dummy_var_67: i32, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: i32, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32)
{

  entry:
    out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$p102, out_$i104, out_$i105, out_$p106, out_$i108, out_$i109, out_$p110, out_$i112, out_$i113, out_$p114, out_$i116, out_$i117, out_$p118, out_$i120, out_$i121, out_$p122, out_$i124, out_$i125, out_$p126, out_$i128, out_$i129, out_$p130, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$p143, out_$i144, out_$i145, out_$p146, out_$i148, out_$i149, out_$p150, out_$i152, out_$i153, out_$p154, out_$i156, out_$i157, out_$p158, out_$i160, out_$i161, out_$p162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$p169, out_$p170, out_$i171, out_$i172, out_$p173, out_$p174, out_$i175, out_$i176, out_$p177, out_$p178, out_$i179, out_$i180, out_$p181, out_$p182, out_$i183, out_$i184, out_$p185, out_$i187, out_$i188, out_$p189, out_$i191, out_$i192, out_$p193, out_$i195, out_$i196, out_$p197, out_$i199, out_$i200, out_$p201, out_$i202, out_$i203, out_$i205, out_$i206, out_$p207, out_$i208, out_$i209, out_$i211, out_$i212, out_$p213, out_$i214, out_$i215, out_$i217, out_$i218, out_$p219, out_$i220, out_$i221, out_$i223, out_$i224, out_$p225, out_$i226, out_$i227, out_$i229, out_$i230, out_$p231, out_$i232, out_$i233, out_$i235, out_$i236, out_$p237, out_$i238, out_$i239, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i247, out_$i248, out_$p249, out_$p250, out_$i251, out_$i253, out_$i254, out_$p255, out_$i256, out_$i258, out_$i259, out_$p260, out_$i261, out_$i263, out_$i264, out_$p265, out_$i266, out_$i268, out_$i269, out_$p270, out_$i271, out_$i273, out_$i274, out_$p275, out_$i276, out_$i277, out_$p278, out_$i279, out_$i280, out_$p281, out_$i283, out_$i284, out_$p285, out_$i287, out_$i288, out_$p289, out_$i291, out_$i292, out_$p293, out_$i295, out_$i296, out_$p297, out_$i298, out_$i299, out_$i300, out_$p301, out_$i302, out_$i303, out_$i304, out_$p305, out_$i306, out_$i307, out_$i308, out_$p309, out_$i310, out_$i311, out_$i312, out_$p313, out_$i315, out_$i316, out_$p317, out_$i319, out_$i320, out_$p321, out_$i323, out_$i324, out_$p325, out_$i327, out_$i328, out_$p329, out_$i331, out_$i332, out_$p333, out_$i335, out_$i336, out_$p337, out_$i339, out_$i340, out_$p341, out_$i343, out_$i344, out_$p345, out_$i346, out_$i347, out_$p348, out_$i349, out_$i350, out_$p351, out_$i352, out_$i353, out_$p354, out_$i355, out_$i356, out_$i358, out_$i359, out_$i361, out_$i362, out_$i364, out_$i365, out_$i366, out_$i367, out_$i369, out_$i370, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106 := in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$p82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$p90, in_$i91, in_$i92, in_$p93, in_$i94, in_$i95, in_$p96, in_$i97, in_$i98, in_$p99, in_$i100, in_$i101, in_$p102, in_$i104, in_$i105, in_$p106, in_$i108, in_$i109, in_$p110, in_$i112, in_$i113, in_$p114, in_$i116, in_$i117, in_$p118, in_$i120, in_$i121, in_$p122, in_$i124, in_$i125, in_$p126, in_$i128, in_$i129, in_$p130, in_$i132, in_$i133, in_$p134, in_$i135, in_$i136, in_$p137, in_$i138, in_$i139, in_$p140, in_$i141, in_$i142, in_$p143, in_$i144, in_$i145, in_$p146, in_$i148, in_$i149, in_$p150, in_$i152, in_$i153, in_$p154, in_$i156, in_$i157, in_$p158, in_$i160, in_$i161, in_$p162, in_$p163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$p169, in_$p170, in_$i171, in_$i172, in_$p173, in_$p174, in_$i175, in_$i176, in_$p177, in_$p178, in_$i179, in_$i180, in_$p181, in_$p182, in_$i183, in_$i184, in_$p185, in_$i187, in_$i188, in_$p189, in_$i191, in_$i192, in_$p193, in_$i195, in_$i196, in_$p197, in_$i199, in_$i200, in_$p201, in_$i202, in_$i203, in_$i205, in_$i206, in_$p207, in_$i208, in_$i209, in_$i211, in_$i212, in_$p213, in_$i214, in_$i215, in_$i217, in_$i218, in_$p219, in_$i220, in_$i221, in_$i223, in_$i224, in_$p225, in_$i226, in_$i227, in_$i229, in_$i230, in_$p231, in_$i232, in_$i233, in_$i235, in_$i236, in_$p237, in_$i238, in_$i239, in_$i241, in_$i242, in_$p243, in_$i244, in_$i245, in_$i247, in_$i248, in_$p249, in_$p250, in_$i251, in_$i253, in_$i254, in_$p255, in_$i256, in_$i258, in_$i259, in_$p260, in_$i261, in_$i263, in_$i264, in_$p265, in_$i266, in_$i268, in_$i269, in_$p270, in_$i271, in_$i273, in_$i274, in_$p275, in_$i276, in_$i277, in_$p278, in_$i279, in_$i280, in_$p281, in_$i283, in_$i284, in_$p285, in_$i287, in_$i288, in_$p289, in_$i291, in_$i292, in_$p293, in_$i295, in_$i296, in_$p297, in_$i298, in_$i299, in_$i300, in_$p301, in_$i302, in_$i303, in_$i304, in_$p305, in_$i306, in_$i307, in_$i308, in_$p309, in_$i310, in_$i311, in_$i312, in_$p313, in_$i315, in_$i316, in_$p317, in_$i319, in_$i320, in_$p321, in_$i323, in_$i324, in_$p325, in_$i327, in_$i328, in_$p329, in_$i331, in_$i332, in_$p333, in_$i335, in_$i336, in_$p337, in_$i339, in_$i340, in_$p341, in_$i343, in_$i344, in_$p345, in_$i346, in_$i347, in_$p348, in_$i349, in_$i350, in_$p351, in_$i352, in_$i353, in_$p354, in_$i355, in_$i356, in_$i358, in_$i359, in_$i361, in_$i362, in_$i364, in_$i365, in_$i366, in_$i367, in_$i369, in_$i370, in_vslice_dummy_var_62, in_vslice_dummy_var_63, in_vslice_dummy_var_64, in_vslice_dummy_var_65, in_vslice_dummy_var_66, in_vslice_dummy_var_67, in_vslice_dummy_var_68, in_vslice_dummy_var_69, in_vslice_dummy_var_70, in_vslice_dummy_var_71, in_vslice_dummy_var_72, in_vslice_dummy_var_73, in_vslice_dummy_var_74, in_vslice_dummy_var_75, in_vslice_dummy_var_76, in_vslice_dummy_var_77, in_vslice_dummy_var_78, in_vslice_dummy_var_79, in_vslice_dummy_var_80, in_vslice_dummy_var_81, in_vslice_dummy_var_82, in_vslice_dummy_var_83, in_vslice_dummy_var_84, in_vslice_dummy_var_85, in_vslice_dummy_var_86, in_vslice_dummy_var_87, in_vslice_dummy_var_88, in_vslice_dummy_var_89, in_vslice_dummy_var_90, in_vslice_dummy_var_91, in_vslice_dummy_var_92, in_vslice_dummy_var_93, in_vslice_dummy_var_94, in_vslice_dummy_var_95, in_vslice_dummy_var_96, in_vslice_dummy_var_97, in_vslice_dummy_var_98, in_vslice_dummy_var_99, in_vslice_dummy_var_100, in_vslice_dummy_var_101, in_vslice_dummy_var_102, in_vslice_dummy_var_103, in_vslice_dummy_var_104, in_vslice_dummy_var_105, in_vslice_dummy_var_106;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1229} out_$i28 := __VERIFIER_nondet_int();
    call {:si_unique_call 1230} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i28);
    call {:si_unique_call 1231} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i28);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb316:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_192:
    goto corral_source_split_7597;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} choose_timer_1();
    goto SeqInstr_191;

  $bb14:
    assume out_$i35 == 1;
    goto corral_source_split_7596;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_7594;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    out_$i34 := $M.42;
    goto corral_source_split_7593;

  $bb12:
    assume out_$i33 == 1;
    goto corral_source_split_7592;

  $bb10:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i28, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb3:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i28, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i28, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb19:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i43 == 1);
    goto $bb30;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i45 == 1);
    goto $bb30;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 0);
    goto corral_source_split_7611;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    out_$i44 := $M.43;
    goto corral_source_split_7610;

  $bb28:
    assume out_$i43 == 1;
    goto corral_source_split_7609;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, 3);
    goto corral_source_split_7607;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    out_$i42 := $M.44;
    goto corral_source_split_7606;

  $bb26:
    assume out_$i41 == 1;
    goto corral_source_split_7605;

  $bb21:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i38, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i38, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_7599:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1233} out_$i38 := __VERIFIER_nondet_int();
    call {:si_unique_call 1234} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i38);
    call {:si_unique_call 1235} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i38);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i37 == 1;
    goto corral_source_split_7599;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_7590;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    out_$i36 := $M.44;
    goto corral_source_split_7589;

  $bb11:
    assume !(out_$i32 == 1);
    goto corral_source_split_7588;

  $bb37:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb42:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i51, 0);
    goto corral_source_split_7631;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i51 := $M.47;
    goto corral_source_split_7630;

  $bb39:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} ldv_initialize_usb_serial_driver_3();
    goto corral_source_split_7628;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1242} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7627;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $M.44 := 3;
    call {:si_unique_call 1241} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_7626;

  $bb38:
    assume out_$i50 == 1;
    goto corral_source_split_7625;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i49, 0);
    goto corral_source_split_7623;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    out_$i49 := $M.47;
    goto corral_source_split_7622;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $M.47 := out_$i48;
    call {:si_unique_call 1240} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_7621;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} out_$i48 := usb_serial_module_init();
    goto corral_source_split_7620;

  $bb36:
    assume out_$i47 == 1;
    goto corral_source_split_7619;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 1);
    goto corral_source_split_7603;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    out_$i46 := $M.44;
    goto corral_source_split_7602;

  $bb23:
    assume out_$i40 == 1;
    goto corral_source_split_7601;

  $bb22:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i38, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} ldv_stop();
    goto corral_source_split_7636;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i40 == 1);
    goto $bb25;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb25;

  $bb49:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb101:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb103:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $M.43 := out_$i87;
    call {:si_unique_call 1252} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i87);
    goto corral_source_split_7743;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    out_$i87 := $add.i32(out_$i86, 1);
    goto corral_source_split_7742;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    out_$i86 := $M.43;
    goto corral_source_split_7741;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1251} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7740;

  $bb102:
    assume out_$i85 == 1;
    goto corral_source_split_7739;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i84, 0);
    goto corral_source_split_7737;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    out_$i84 := $M.48;
    goto corral_source_split_7736;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $M.48 := out_$i83;
    call {:si_unique_call 1250} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i83);
    goto corral_source_split_7735;

  SeqInstr_195:
    goto corral_source_split_7734;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} out_$i83 := mos7840_probe(out_$p82, in_$p11);
    goto SeqInstr_194;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    out_$p82 := $M.40;
    goto corral_source_split_7733;

  $bb100:
    assume out_$i81 == 1;
    goto corral_source_split_7732;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i80, 1);
    goto corral_source_split_7730;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    out_$i80 := $M.45;
    goto corral_source_split_7729;

  $bb98:
    assume out_$i79 == 1;
    goto corral_source_split_7728;

  $bb96:
    assume out_$i78 == 1;
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i55, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb90:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i78 := $slt.i32(out_$i55, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb78:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i75 := $slt.i32(out_$i55, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb51:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i55, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i56 := $slt.i32(out_$i55, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_7638:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1246} out_$i55 := __VERIFIER_nondet_int();
    call {:si_unique_call 1247} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i55);
    call {:si_unique_call 1248} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i55);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume out_$i54 == 1;
    goto corral_source_split_7638;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i32(out_$i53, 0);
    goto corral_source_split_7582;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    out_$i53 := $M.45;
    goto corral_source_split_7581;

  $bb5:
    assume out_$i30 == 1;
    goto corral_source_split_7580;

  $bb4:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i30 := $slt.i32(out_$i28, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb117:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1260} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7772;

  SeqInstr_207:
    goto corral_source_split_7771;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} mos7840_throttle(out_$p99);
    goto SeqInstr_206;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    out_$p99 := $M.41;
    goto corral_source_split_7770;

  $bb116:
    assume out_$i98 == 1;
    goto corral_source_split_7769;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i97, 2);
    goto corral_source_split_7767;

  $bb115:
    assume {:verifier.code 0} true;
    out_$i97 := $M.45;
    goto corral_source_split_7766;

  $bb114:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1258} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7764;

  SeqInstr_204:
    goto corral_source_split_7763;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} mos7840_throttle(out_$p96);
    goto SeqInstr_203;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    out_$p96 := $M.41;
    goto corral_source_split_7762;

  $bb113:
    assume out_$i95 == 1;
    goto corral_source_split_7761;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i94, 3);
    goto corral_source_split_7759;

  $bb112:
    assume {:verifier.code 0} true;
    out_$i94 := $M.45;
    goto corral_source_split_7758;

  $bb111:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1256} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7756;

  SeqInstr_201:
    goto corral_source_split_7755;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} mos7840_throttle(out_$p93);
    goto SeqInstr_200;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    out_$p93 := $M.41;
    goto corral_source_split_7754;

  $bb110:
    assume out_$i92 == 1;
    goto corral_source_split_7753;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i91, 1);
    goto corral_source_split_7751;

  $bb109:
    assume {:verifier.code 0} true;
    out_$i91 := $M.45;
    goto corral_source_split_7750;

  $bb108:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1254} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_7748;

  SeqInstr_198:
    goto corral_source_split_7747;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} mos7840_throttle(out_$p90);
    goto SeqInstr_197;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    out_$p90 := $M.41;
    goto corral_source_split_7746;

  $bb107:
    assume out_$i89 == 1;
    goto corral_source_split_7745;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i88, 4);
    goto corral_source_split_7726;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    out_$i88 := $M.45;
    goto corral_source_split_7725;

  $bb97:
    assume !(out_$i78 == 1);
    goto corral_source_split_7724;

  $bb129:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1268} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7801;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} out_vslice_dummy_var_65 := usb_serial_generic_get_icount(out_$p114, in_$p13);
    goto corral_source_split_7800;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    out_$p114 := $M.41;
    goto corral_source_split_7799;

  $bb128:
    assume out_$i113 == 1;
    goto corral_source_split_7798;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    out_$i113 := $eq.i32(out_$i112, 2);
    goto corral_source_split_7796;

  $bb127:
    assume {:verifier.code 0} true;
    out_$i112 := $M.45;
    goto corral_source_split_7795;

  $bb126:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1266} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7793;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} out_vslice_dummy_var_64 := usb_serial_generic_get_icount(out_$p110, in_$p13);
    goto corral_source_split_7792;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    out_$p110 := $M.41;
    goto corral_source_split_7791;

  $bb125:
    assume out_$i109 == 1;
    goto corral_source_split_7790;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    out_$i109 := $eq.i32(out_$i108, 3);
    goto corral_source_split_7788;

  $bb124:
    assume {:verifier.code 0} true;
    out_$i108 := $M.45;
    goto corral_source_split_7787;

  $bb123:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1264} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7785;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} out_vslice_dummy_var_63 := usb_serial_generic_get_icount(out_$p106, in_$p13);
    goto corral_source_split_7784;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    out_$p106 := $M.41;
    goto corral_source_split_7783;

  $bb122:
    assume out_$i105 == 1;
    goto corral_source_split_7782;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i104, 1);
    goto corral_source_split_7780;

  $bb121:
    assume {:verifier.code 0} true;
    out_$i104 := $M.45;
    goto corral_source_split_7779;

  $bb120:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1262} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_7777;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} out_vslice_dummy_var_62 := usb_serial_generic_get_icount(out_$p102, in_$p13);
    goto corral_source_split_7776;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    out_$p102 := $M.41;
    goto corral_source_split_7775;

  $bb119:
    assume out_$i101 == 1;
    goto corral_source_split_7774;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i100, 4);
    goto corral_source_split_7714;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    out_$i100 := $M.45;
    goto corral_source_split_7713;

  $bb92:
    assume out_$i76 == 1;
    goto corral_source_split_7712;

  $bb91:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$i76 := $slt.i32(out_$i55, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb141:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1276} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7830;

  SeqInstr_219:
    goto corral_source_split_7829;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} out_vslice_dummy_var_69 := mos7840_port_probe(out_$p130);
    goto SeqInstr_218;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    out_$p130 := $M.39;
    goto corral_source_split_7828;

  $bb140:
    assume out_$i129 == 1;
    goto corral_source_split_7827;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i32(out_$i128, 2);
    goto corral_source_split_7825;

  $bb139:
    assume {:verifier.code 0} true;
    out_$i128 := $M.45;
    goto corral_source_split_7824;

  $bb138:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1274} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7822;

  SeqInstr_216:
    goto corral_source_split_7821;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} out_vslice_dummy_var_68 := mos7840_port_probe(out_$p126);
    goto SeqInstr_215;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    out_$p126 := $M.39;
    goto corral_source_split_7820;

  $bb137:
    assume out_$i125 == 1;
    goto corral_source_split_7819;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i124, 3);
    goto corral_source_split_7817;

  $bb136:
    assume {:verifier.code 0} true;
    out_$i124 := $M.45;
    goto corral_source_split_7816;

  $bb135:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1272} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7814;

  SeqInstr_213:
    goto corral_source_split_7813;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} out_vslice_dummy_var_67 := mos7840_port_probe(out_$p122);
    goto SeqInstr_212;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    out_$p122 := $M.39;
    goto corral_source_split_7812;

  $bb134:
    assume out_$i121 == 1;
    goto corral_source_split_7811;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i32(out_$i120, 1);
    goto corral_source_split_7809;

  $bb133:
    assume {:verifier.code 0} true;
    out_$i120 := $M.45;
    goto corral_source_split_7808;

  $bb132:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1270} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_7806;

  SeqInstr_210:
    goto corral_source_split_7805;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} out_vslice_dummy_var_66 := mos7840_port_probe(out_$p118);
    goto SeqInstr_209;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    out_$p118 := $M.39;
    goto corral_source_split_7804;

  $bb131:
    assume out_$i117 == 1;
    goto corral_source_split_7803;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    out_$i117 := $eq.i32(out_$i116, 4);
    goto corral_source_split_7718;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    out_$i116 := $M.45;
    goto corral_source_split_7717;

  $bb94:
    assume out_$i77 == 1;
    goto corral_source_split_7716;

  $bb93:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    out_$i77 := $slt.i32(out_$i55, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb153:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1284} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7859;

  SeqInstr_231:
    goto corral_source_split_7858;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} mos7840_unthrottle(out_$p143);
    goto SeqInstr_230;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    out_$p143 := $M.41;
    goto corral_source_split_7857;

  $bb152:
    assume out_$i142 == 1;
    goto corral_source_split_7856;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i141, 2);
    goto corral_source_split_7854;

  $bb151:
    assume {:verifier.code 0} true;
    out_$i141 := $M.45;
    goto corral_source_split_7853;

  $bb150:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1282} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7851;

  SeqInstr_228:
    goto corral_source_split_7850;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} mos7840_unthrottle(out_$p140);
    goto SeqInstr_227;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    out_$p140 := $M.41;
    goto corral_source_split_7849;

  $bb149:
    assume out_$i139 == 1;
    goto corral_source_split_7848;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i138, 3);
    goto corral_source_split_7846;

  $bb148:
    assume {:verifier.code 0} true;
    out_$i138 := $M.45;
    goto corral_source_split_7845;

  $bb147:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1280} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7843;

  SeqInstr_225:
    goto corral_source_split_7842;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} mos7840_unthrottle(out_$p137);
    goto SeqInstr_224;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    out_$p137 := $M.41;
    goto corral_source_split_7841;

  $bb146:
    assume out_$i136 == 1;
    goto corral_source_split_7840;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    out_$i136 := $eq.i32(out_$i135, 1);
    goto corral_source_split_7838;

  $bb145:
    assume {:verifier.code 0} true;
    out_$i135 := $M.45;
    goto corral_source_split_7837;

  $bb144:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1278} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_7835;

  SeqInstr_222:
    goto corral_source_split_7834;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} mos7840_unthrottle(out_$p134);
    goto SeqInstr_221;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    out_$p134 := $M.41;
    goto corral_source_split_7833;

  $bb143:
    assume out_$i133 == 1;
    goto corral_source_split_7832;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    out_$i133 := $eq.i32(out_$i132, 4);
    goto corral_source_split_7722;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    out_$i132 := $M.45;
    goto corral_source_split_7721;

  $bb95:
    assume !(out_$i77 == 1);
    goto corral_source_split_7720;

  $bb165:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1292} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7888;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} out_vslice_dummy_var_73 := mos7840_calc_num_ports(out_$p158);
    goto corral_source_split_7887;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    out_$p158 := $M.40;
    goto corral_source_split_7886;

  $bb164:
    assume out_$i157 == 1;
    goto corral_source_split_7885;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    out_$i157 := $eq.i32(out_$i156, 2);
    goto corral_source_split_7883;

  $bb163:
    assume {:verifier.code 0} true;
    out_$i156 := $M.45;
    goto corral_source_split_7882;

  $bb162:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1290} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7880;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} out_vslice_dummy_var_72 := mos7840_calc_num_ports(out_$p154);
    goto corral_source_split_7879;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    out_$p154 := $M.40;
    goto corral_source_split_7878;

  $bb161:
    assume out_$i153 == 1;
    goto corral_source_split_7877;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    out_$i153 := $eq.i32(out_$i152, 3);
    goto corral_source_split_7875;

  $bb160:
    assume {:verifier.code 0} true;
    out_$i152 := $M.45;
    goto corral_source_split_7874;

  $bb159:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1288} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7872;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} out_vslice_dummy_var_71 := mos7840_calc_num_ports(out_$p150);
    goto corral_source_split_7871;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    out_$p150 := $M.40;
    goto corral_source_split_7870;

  $bb158:
    assume out_$i149 == 1;
    goto corral_source_split_7869;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    out_$i149 := $eq.i32(out_$i148, 1);
    goto corral_source_split_7867;

  $bb157:
    assume {:verifier.code 0} true;
    out_$i148 := $M.45;
    goto corral_source_split_7866;

  $bb156:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1286} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_7864;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} out_vslice_dummy_var_70 := mos7840_calc_num_ports(out_$p146);
    goto corral_source_split_7863;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    out_$p146 := $M.40;
    goto corral_source_split_7862;

  $bb155:
    assume out_$i145 == 1;
    goto corral_source_split_7861;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i144, 4);
    goto corral_source_split_7702;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    out_$i144 := $M.45;
    goto corral_source_split_7701;

  $bb86:
    assume out_$i73 == 1;
    goto corral_source_split_7700;

  $bb80:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i73 := $slt.i32(out_$i55, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb79:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i55, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb168:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb170:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1295} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_7899;

  $bb169:
    assume out_$i166 == 1;
    goto corral_source_split_7898;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i165, 0);
    goto corral_source_split_7896;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    out_$i165 := $M.49;
    goto corral_source_split_7895;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $M.49 := out_$i164;
    call {:si_unique_call 1294} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i164);
    goto corral_source_split_7894;

  SeqInstr_234:
    goto corral_source_split_7893;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} out_$i164 := mos7840_open(out_$p162, out_$p163);
    goto SeqInstr_233;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    out_$p163 := $M.39;
    goto corral_source_split_7892;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    out_$p162 := $M.41;
    goto corral_source_split_7891;

  $bb167:
    assume out_$i161 == 1;
    goto corral_source_split_7890;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i32(out_$i160, 3);
    goto corral_source_split_7706;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    out_$i160 := $M.45;
    goto corral_source_split_7705;

  $bb88:
    assume out_$i74 == 1;
    goto corral_source_split_7704;

  $bb87:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    out_$i74 := $slt.i32(out_$i55, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb183:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1303} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7932;

  SeqInstr_246:
    goto corral_source_split_7931;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} mos7840_set_termios(out_$p181, out_$p182, in_$p9);
    goto SeqInstr_245;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    out_$p182 := $M.39;
    goto corral_source_split_7930;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    out_$p181 := $M.41;
    goto corral_source_split_7929;

  $bb182:
    assume out_$i180 == 1;
    goto corral_source_split_7928;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    out_$i180 := $eq.i32(out_$i179, 2);
    goto corral_source_split_7926;

  $bb181:
    assume {:verifier.code 0} true;
    out_$i179 := $M.45;
    goto corral_source_split_7925;

  $bb180:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1301} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7923;

  SeqInstr_243:
    goto corral_source_split_7922;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} mos7840_set_termios(out_$p177, out_$p178, in_$p9);
    goto SeqInstr_242;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    out_$p178 := $M.39;
    goto corral_source_split_7921;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    out_$p177 := $M.41;
    goto corral_source_split_7920;

  $bb179:
    assume out_$i176 == 1;
    goto corral_source_split_7919;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    out_$i176 := $eq.i32(out_$i175, 3);
    goto corral_source_split_7917;

  $bb178:
    assume {:verifier.code 0} true;
    out_$i175 := $M.45;
    goto corral_source_split_7916;

  $bb177:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    goto $bb178;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1299} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7914;

  SeqInstr_240:
    goto corral_source_split_7913;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} mos7840_set_termios(out_$p173, out_$p174, in_$p9);
    goto SeqInstr_239;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    out_$p174 := $M.39;
    goto corral_source_split_7912;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    out_$p173 := $M.41;
    goto corral_source_split_7911;

  $bb176:
    assume out_$i172 == 1;
    goto corral_source_split_7910;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    out_$i172 := $eq.i32(out_$i171, 1);
    goto corral_source_split_7908;

  $bb175:
    assume {:verifier.code 0} true;
    out_$i171 := $M.45;
    goto corral_source_split_7907;

  $bb174:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1297} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_7905;

  SeqInstr_237:
    goto corral_source_split_7904;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} mos7840_set_termios(out_$p169, out_$p170, in_$p9);
    goto SeqInstr_236;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    out_$p170 := $M.39;
    goto corral_source_split_7903;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    out_$p169 := $M.41;
    goto corral_source_split_7902;

  $bb173:
    assume out_$i168 == 1;
    goto corral_source_split_7901;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, 4);
    goto corral_source_split_7710;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    out_$i167 := $M.45;
    goto corral_source_split_7709;

  $bb89:
    assume !(out_$i74 == 1);
    goto corral_source_split_7708;

  $bb195:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    goto $bb196;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1311} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7961;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} out_vslice_dummy_var_77 := mos7840_port_remove(out_$p197);
    goto corral_source_split_7960;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    out_$p197 := $M.39;
    goto corral_source_split_7959;

  $bb194:
    assume out_$i196 == 1;
    goto corral_source_split_7958;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    out_$i196 := $eq.i32(out_$i195, 2);
    goto corral_source_split_7956;

  $bb193:
    assume {:verifier.code 0} true;
    out_$i195 := $M.45;
    goto corral_source_split_7955;

  $bb192:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1309} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7953;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} out_vslice_dummy_var_76 := mos7840_port_remove(out_$p193);
    goto corral_source_split_7952;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    out_$p193 := $M.39;
    goto corral_source_split_7951;

  $bb191:
    assume out_$i192 == 1;
    goto corral_source_split_7950;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    out_$i192 := $eq.i32(out_$i191, 3);
    goto corral_source_split_7948;

  $bb190:
    assume {:verifier.code 0} true;
    out_$i191 := $M.45;
    goto corral_source_split_7947;

  $bb189:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1307} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7945;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} out_vslice_dummy_var_75 := mos7840_port_remove(out_$p189);
    goto corral_source_split_7944;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    out_$p189 := $M.39;
    goto corral_source_split_7943;

  $bb188:
    assume out_$i188 == 1;
    goto corral_source_split_7942;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    out_$i188 := $eq.i32(out_$i187, 1);
    goto corral_source_split_7940;

  $bb187:
    assume {:verifier.code 0} true;
    out_$i187 := $M.45;
    goto corral_source_split_7939;

  $bb186:
    assume !(out_$i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1305} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_7937;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} out_vslice_dummy_var_74 := mos7840_port_remove(out_$p185);
    goto corral_source_split_7936;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    out_$p185 := $M.39;
    goto corral_source_split_7935;

  $bb185:
    assume out_$i184 == 1;
    goto corral_source_split_7934;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    out_$i184 := $eq.i32(out_$i183, 4);
    goto corral_source_split_7690;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    out_$i183 := $M.45;
    goto corral_source_split_7689;

  $bb82:
    assume out_$i71 == 1;
    goto corral_source_split_7688;

  $bb81:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i55, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb207:
    assume !(out_$i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1319} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7998;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} out_vslice_dummy_var_81 := mos7840_ioctl(out_$p219, out_$i220, out_$i221);
    goto corral_source_split_7997;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    out_$i221 := $load.i64($M.27, in_$p3);
    goto corral_source_split_7996;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    out_$i220 := $load.i32($M.27, in_$p0);
    goto corral_source_split_7995;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    out_$p219 := $M.41;
    goto corral_source_split_7994;

  $bb206:
    assume out_$i218 == 1;
    goto corral_source_split_7993;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    out_$i218 := $eq.i32(out_$i217, 2);
    goto corral_source_split_7991;

  $bb205:
    assume {:verifier.code 0} true;
    out_$i217 := $M.45;
    goto corral_source_split_7990;

  $bb204:
    assume !(out_$i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1317} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7988;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} out_vslice_dummy_var_80 := mos7840_ioctl(out_$p213, out_$i214, out_$i215);
    goto corral_source_split_7987;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    out_$i215 := $load.i64($M.27, in_$p3);
    goto corral_source_split_7986;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    out_$i214 := $load.i32($M.27, in_$p0);
    goto corral_source_split_7985;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    out_$p213 := $M.41;
    goto corral_source_split_7984;

  $bb203:
    assume out_$i212 == 1;
    goto corral_source_split_7983;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    out_$i212 := $eq.i32(out_$i211, 3);
    goto corral_source_split_7981;

  $bb202:
    assume {:verifier.code 0} true;
    out_$i211 := $M.45;
    goto corral_source_split_7980;

  $bb201:
    assume !(out_$i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1315} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7978;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} out_vslice_dummy_var_79 := mos7840_ioctl(out_$p207, out_$i208, out_$i209);
    goto corral_source_split_7977;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    out_$i209 := $load.i64($M.27, in_$p3);
    goto corral_source_split_7976;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    out_$i208 := $load.i32($M.27, in_$p0);
    goto corral_source_split_7975;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    out_$p207 := $M.41;
    goto corral_source_split_7974;

  $bb200:
    assume out_$i206 == 1;
    goto corral_source_split_7973;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    out_$i206 := $eq.i32(out_$i205, 1);
    goto corral_source_split_7971;

  $bb199:
    assume {:verifier.code 0} true;
    out_$i205 := $M.45;
    goto corral_source_split_7970;

  $bb198:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1313} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_7968;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} out_vslice_dummy_var_78 := mos7840_ioctl(out_$p201, out_$i202, out_$i203);
    goto corral_source_split_7967;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    out_$i203 := $load.i64($M.27, in_$p3);
    goto corral_source_split_7966;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    out_$i202 := $load.i32($M.27, in_$p0);
    goto corral_source_split_7965;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    out_$p201 := $M.41;
    goto corral_source_split_7964;

  $bb197:
    assume out_$i200 == 1;
    goto corral_source_split_7963;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    out_$i200 := $eq.i32(out_$i199, 4);
    goto corral_source_split_7694;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    out_$i199 := $M.45;
    goto corral_source_split_7693;

  $bb84:
    assume out_$i72 == 1;
    goto corral_source_split_7692;

  $bb83:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i55, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb219:
    assume !(out_$i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1327} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8035;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} out_vslice_dummy_var_85 := mos7840_tiocmset(out_$p243, out_$i244, out_$i245);
    goto corral_source_split_8034;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    out_$i245 := $load.i32($M.27, in_$p5);
    goto corral_source_split_8033;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    out_$i244 := $load.i32($M.27, in_$p2);
    goto corral_source_split_8032;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    out_$p243 := $M.41;
    goto corral_source_split_8031;

  $bb218:
    assume out_$i242 == 1;
    goto corral_source_split_8030;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    out_$i242 := $eq.i32(out_$i241, 2);
    goto corral_source_split_8028;

  $bb217:
    assume {:verifier.code 0} true;
    out_$i241 := $M.45;
    goto corral_source_split_8027;

  $bb216:
    assume !(out_$i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1325} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8025;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} out_vslice_dummy_var_84 := mos7840_tiocmset(out_$p237, out_$i238, out_$i239);
    goto corral_source_split_8024;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    out_$i239 := $load.i32($M.27, in_$p5);
    goto corral_source_split_8023;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    out_$i238 := $load.i32($M.27, in_$p2);
    goto corral_source_split_8022;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    out_$p237 := $M.41;
    goto corral_source_split_8021;

  $bb215:
    assume out_$i236 == 1;
    goto corral_source_split_8020;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    out_$i236 := $eq.i32(out_$i235, 3);
    goto corral_source_split_8018;

  $bb214:
    assume {:verifier.code 0} true;
    out_$i235 := $M.45;
    goto corral_source_split_8017;

  $bb213:
    assume !(out_$i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1323} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8015;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} out_vslice_dummy_var_83 := mos7840_tiocmset(out_$p231, out_$i232, out_$i233);
    goto corral_source_split_8014;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    out_$i233 := $load.i32($M.27, in_$p5);
    goto corral_source_split_8013;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    out_$i232 := $load.i32($M.27, in_$p2);
    goto corral_source_split_8012;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    out_$p231 := $M.41;
    goto corral_source_split_8011;

  $bb212:
    assume out_$i230 == 1;
    goto corral_source_split_8010;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    out_$i230 := $eq.i32(out_$i229, 1);
    goto corral_source_split_8008;

  $bb211:
    assume {:verifier.code 0} true;
    out_$i229 := $M.45;
    goto corral_source_split_8007;

  $bb210:
    assume !(out_$i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1321} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_8005;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} out_vslice_dummy_var_82 := mos7840_tiocmset(out_$p225, out_$i226, out_$i227);
    goto corral_source_split_8004;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    out_$i227 := $load.i32($M.27, in_$p5);
    goto corral_source_split_8003;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    out_$i226 := $load.i32($M.27, in_$p2);
    goto corral_source_split_8002;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    out_$p225 := $M.41;
    goto corral_source_split_8001;

  $bb209:
    assume out_$i224 == 1;
    goto corral_source_split_8000;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    out_$i224 := $eq.i32(out_$i223, 4);
    goto corral_source_split_7698;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    out_$i223 := $M.45;
    goto corral_source_split_7697;

  $bb85:
    assume !(out_$i72 == 1);
    goto corral_source_split_7696;

  $bb222:
    assume !(out_$i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1329} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_8042;

  SeqInstr_249:
    goto corral_source_split_8041;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} out_vslice_dummy_var_86 := mos7840_write(out_$p249, out_$p250, in_$p7, out_$i251);
    goto SeqInstr_248;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    out_$i251 := $load.i32($M.27, in_$p6);
    goto corral_source_split_8040;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    out_$p250 := $M.39;
    goto corral_source_split_8039;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    out_$p249 := $M.41;
    goto corral_source_split_8038;

  $bb221:
    assume out_$i248 == 1;
    goto corral_source_split_8037;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    out_$i248 := $eq.i32(out_$i247, 4);
    goto corral_source_split_7678;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    out_$i247 := $M.45;
    goto corral_source_split_7677;

  $bb74:
    assume out_$i67 == 1;
    goto corral_source_split_7676;

  $bb68:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(out_$i55, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb53:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$i64 := $slt.i32(out_$i55, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb52:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    out_$i57 := $slt.i32(out_$i55, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb234:
    assume !(out_$i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1337} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8075;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} out_vslice_dummy_var_90 := usb_serial_generic_tiocmiwait(out_$p270, out_$i271);
    goto corral_source_split_8074;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    out_$i271 := $load.i64($M.27, in_$p4);
    goto corral_source_split_8073;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    out_$p270 := $M.41;
    goto corral_source_split_8072;

  $bb233:
    assume out_$i269 == 1;
    goto corral_source_split_8071;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    out_$i269 := $eq.i32(out_$i268, 2);
    goto corral_source_split_8069;

  $bb232:
    assume {:verifier.code 0} true;
    out_$i268 := $M.45;
    goto corral_source_split_8068;

  $bb231:
    assume !(out_$i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1335} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8066;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} out_vslice_dummy_var_89 := usb_serial_generic_tiocmiwait(out_$p265, out_$i266);
    goto corral_source_split_8065;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    out_$i266 := $load.i64($M.27, in_$p4);
    goto corral_source_split_8064;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    out_$p265 := $M.41;
    goto corral_source_split_8063;

  $bb230:
    assume out_$i264 == 1;
    goto corral_source_split_8062;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    out_$i264 := $eq.i32(out_$i263, 3);
    goto corral_source_split_8060;

  $bb229:
    assume {:verifier.code 0} true;
    out_$i263 := $M.45;
    goto corral_source_split_8059;

  $bb228:
    assume !(out_$i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    goto $bb229;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1333} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8057;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} out_vslice_dummy_var_88 := usb_serial_generic_tiocmiwait(out_$p260, out_$i261);
    goto corral_source_split_8056;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    out_$i261 := $load.i64($M.27, in_$p4);
    goto corral_source_split_8055;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    out_$p260 := $M.41;
    goto corral_source_split_8054;

  $bb227:
    assume out_$i259 == 1;
    goto corral_source_split_8053;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    out_$i259 := $eq.i32(out_$i258, 1);
    goto corral_source_split_8051;

  $bb226:
    assume {:verifier.code 0} true;
    out_$i258 := $M.45;
    goto corral_source_split_8050;

  $bb225:
    assume !(out_$i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1331} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_8048;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} out_vslice_dummy_var_87 := usb_serial_generic_tiocmiwait(out_$p255, out_$i256);
    goto corral_source_split_8047;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    out_$i256 := $load.i64($M.27, in_$p4);
    goto corral_source_split_8046;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    out_$p255 := $M.41;
    goto corral_source_split_8045;

  $bb224:
    assume out_$i254 == 1;
    goto corral_source_split_8044;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    out_$i254 := $eq.i32(out_$i253, 4);
    goto corral_source_split_7682;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    out_$i253 := $M.45;
    goto corral_source_split_7681;

  $bb76:
    assume out_$i68 == 1;
    goto corral_source_split_7680;

  $bb75:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i55, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb237:
    assume !(out_$i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1339} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_8080;

  SeqInstr_252:
    goto corral_source_split_8079;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} mos7840_interrupt_callback(out_$p275);
    goto SeqInstr_251;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    out_$p275 := $M.38;
    goto corral_source_split_8078;

  $bb236:
    assume out_$i274 == 1;
    goto corral_source_split_8077;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    out_$i274 := $eq.i32(out_$i273, 4);
    goto corral_source_split_7686;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    out_$i273 := $M.45;
    goto corral_source_split_7685;

  $bb77:
    assume !(out_$i68 == 1);
    goto corral_source_split_7684;

  $bb240:
    assume !(out_$i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1341} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8085;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} mos7840_close(out_$p278);
    goto corral_source_split_8084;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    out_$p278 := $M.39;
    goto corral_source_split_8083;

  $bb239:
    assume out_$i277 == 1;
    goto corral_source_split_8082;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    out_$i277 := $eq.i32(out_$i276, 4);
    goto corral_source_split_7666;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    out_$i276 := $M.45;
    goto corral_source_split_7665;

  $bb70:
    assume out_$i65 == 1;
    goto corral_source_split_7664;

  $bb69:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    out_$i65 := $slt.i32(out_$i55, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb252:
    assume !(out_$i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1349} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8114;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} out_vslice_dummy_var_94 := mos7840_write_room(out_$p293);
    goto corral_source_split_8113;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    out_$p293 := $M.41;
    goto corral_source_split_8112;

  $bb251:
    assume out_$i292 == 1;
    goto corral_source_split_8111;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    out_$i292 := $eq.i32(out_$i291, 2);
    goto corral_source_split_8109;

  $bb250:
    assume {:verifier.code 0} true;
    out_$i291 := $M.45;
    goto corral_source_split_8108;

  $bb249:
    assume !(out_$i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1347} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8106;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} out_vslice_dummy_var_93 := mos7840_write_room(out_$p289);
    goto corral_source_split_8105;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    out_$p289 := $M.41;
    goto corral_source_split_8104;

  $bb248:
    assume out_$i288 == 1;
    goto corral_source_split_8103;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    out_$i288 := $eq.i32(out_$i287, 3);
    goto corral_source_split_8101;

  $bb247:
    assume {:verifier.code 0} true;
    out_$i287 := $M.45;
    goto corral_source_split_8100;

  $bb246:
    assume !(out_$i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1345} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8098;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} out_vslice_dummy_var_92 := mos7840_write_room(out_$p285);
    goto corral_source_split_8097;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    out_$p285 := $M.41;
    goto corral_source_split_8096;

  $bb245:
    assume out_$i284 == 1;
    goto corral_source_split_8095;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    out_$i284 := $eq.i32(out_$i283, 1);
    goto corral_source_split_8093;

  $bb244:
    assume {:verifier.code 0} true;
    out_$i283 := $M.45;
    goto corral_source_split_8092;

  $bb243:
    assume !(out_$i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1343} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_8090;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} out_vslice_dummy_var_91 := mos7840_write_room(out_$p281);
    goto corral_source_split_8089;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    out_$p281 := $M.41;
    goto corral_source_split_8088;

  $bb242:
    assume out_$i280 == 1;
    goto corral_source_split_8087;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    out_$i280 := $eq.i32(out_$i279, 4);
    goto corral_source_split_7670;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    out_$i279 := $M.45;
    goto corral_source_split_7669;

  $bb72:
    assume out_$i66 == 1;
    goto corral_source_split_7668;

  $bb71:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i55, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb264:
    assume !(out_$i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1357} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8147;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} mos7840_break(out_$p309, out_$i310);
    goto corral_source_split_8146;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    out_$i310 := $load.i32($M.27, in_$p1);
    goto corral_source_split_8145;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    out_$p309 := $M.41;
    goto corral_source_split_8144;

  $bb263:
    assume out_$i308 == 1;
    goto corral_source_split_8143;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    out_$i308 := $eq.i32(out_$i307, 2);
    goto corral_source_split_8141;

  $bb262:
    assume {:verifier.code 0} true;
    out_$i307 := $M.45;
    goto corral_source_split_8140;

  $bb261:
    assume !(out_$i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1355} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8138;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} mos7840_break(out_$p305, out_$i306);
    goto corral_source_split_8137;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    out_$i306 := $load.i32($M.27, in_$p1);
    goto corral_source_split_8136;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    out_$p305 := $M.41;
    goto corral_source_split_8135;

  $bb260:
    assume out_$i304 == 1;
    goto corral_source_split_8134;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    out_$i304 := $eq.i32(out_$i303, 3);
    goto corral_source_split_8132;

  $bb259:
    assume {:verifier.code 0} true;
    out_$i303 := $M.45;
    goto corral_source_split_8131;

  $bb258:
    assume !(out_$i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1353} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8129;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} mos7840_break(out_$p301, out_$i302);
    goto corral_source_split_8128;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    out_$i302 := $load.i32($M.27, in_$p1);
    goto corral_source_split_8127;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    out_$p301 := $M.41;
    goto corral_source_split_8126;

  $bb257:
    assume out_$i300 == 1;
    goto corral_source_split_8125;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    out_$i300 := $eq.i32(out_$i299, 1);
    goto corral_source_split_8123;

  $bb256:
    assume {:verifier.code 0} true;
    out_$i299 := $M.45;
    goto corral_source_split_8122;

  $bb255:
    assume !(out_$i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1351} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_8120;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} mos7840_break(out_$p297, out_$i298);
    goto corral_source_split_8119;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    out_$i298 := $load.i32($M.27, in_$p1);
    goto corral_source_split_8118;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    out_$p297 := $M.41;
    goto corral_source_split_8117;

  $bb254:
    assume out_$i296 == 1;
    goto corral_source_split_8116;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    out_$i296 := $eq.i32(out_$i295, 4);
    goto corral_source_split_7674;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    out_$i295 := $M.45;
    goto corral_source_split_7673;

  $bb73:
    assume !(out_$i66 == 1);
    goto corral_source_split_7672;

  $bb276:
    assume !(out_$i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    goto $bb277;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1365} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8176;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} out_vslice_dummy_var_98 := mos7840_chars_in_buffer(out_$p325);
    goto corral_source_split_8175;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    out_$p325 := $M.41;
    goto corral_source_split_8174;

  $bb275:
    assume out_$i324 == 1;
    goto corral_source_split_8173;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    out_$i324 := $eq.i32(out_$i323, 2);
    goto corral_source_split_8171;

  $bb274:
    assume {:verifier.code 0} true;
    out_$i323 := $M.45;
    goto corral_source_split_8170;

  $bb273:
    assume !(out_$i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1363} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8168;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} out_vslice_dummy_var_97 := mos7840_chars_in_buffer(out_$p321);
    goto corral_source_split_8167;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    out_$p321 := $M.41;
    goto corral_source_split_8166;

  $bb272:
    assume out_$i320 == 1;
    goto corral_source_split_8165;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    out_$i320 := $eq.i32(out_$i319, 3);
    goto corral_source_split_8163;

  $bb271:
    assume {:verifier.code 0} true;
    out_$i319 := $M.45;
    goto corral_source_split_8162;

  $bb270:
    assume !(out_$i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1361} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8160;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} out_vslice_dummy_var_96 := mos7840_chars_in_buffer(out_$p317);
    goto corral_source_split_8159;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    out_$p317 := $M.41;
    goto corral_source_split_8158;

  $bb269:
    assume out_$i316 == 1;
    goto corral_source_split_8157;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    out_$i316 := $eq.i32(out_$i315, 1);
    goto corral_source_split_8155;

  $bb268:
    assume {:verifier.code 0} true;
    out_$i315 := $M.45;
    goto corral_source_split_8154;

  $bb267:
    assume !(out_$i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1359} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_8152;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} out_vslice_dummy_var_95 := mos7840_chars_in_buffer(out_$p313);
    goto corral_source_split_8151;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    out_$p313 := $M.41;
    goto corral_source_split_8150;

  $bb266:
    assume out_$i312 == 1;
    goto corral_source_split_8149;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    out_$i312 := $eq.i32(out_$i311, 4);
    goto corral_source_split_7654;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    out_$i311 := $M.45;
    goto corral_source_split_7653;

  $bb64:
    assume out_$i62 == 1;
    goto corral_source_split_7652;

  $bb55:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$i62 := $slt.i32(out_$i55, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb54:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    out_$i58 := $slt.i32(out_$i55, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb288:
    assume !(out_$i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    goto $bb289;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1373} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8205;

  SeqInstr_264:
    goto corral_source_split_8204;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} out_vslice_dummy_var_102 := mos7840_tiocmget(out_$p341);
    goto SeqInstr_263;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    out_$p341 := $M.41;
    goto corral_source_split_8203;

  $bb287:
    assume out_$i340 == 1;
    goto corral_source_split_8202;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    out_$i340 := $eq.i32(out_$i339, 2);
    goto corral_source_split_8200;

  $bb286:
    assume {:verifier.code 0} true;
    out_$i339 := $M.45;
    goto corral_source_split_8199;

  $bb285:
    assume !(out_$i336 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1371} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8197;

  SeqInstr_261:
    goto corral_source_split_8196;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} out_vslice_dummy_var_101 := mos7840_tiocmget(out_$p337);
    goto SeqInstr_260;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    out_$p337 := $M.41;
    goto corral_source_split_8195;

  $bb284:
    assume out_$i336 == 1;
    goto corral_source_split_8194;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    out_$i336 := $eq.i32(out_$i335, 3);
    goto corral_source_split_8192;

  $bb283:
    assume {:verifier.code 0} true;
    out_$i335 := $M.45;
    goto corral_source_split_8191;

  $bb282:
    assume !(out_$i332 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1369} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8189;

  SeqInstr_258:
    goto corral_source_split_8188;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} out_vslice_dummy_var_100 := mos7840_tiocmget(out_$p333);
    goto SeqInstr_257;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    out_$p333 := $M.41;
    goto corral_source_split_8187;

  $bb281:
    assume out_$i332 == 1;
    goto corral_source_split_8186;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    out_$i332 := $eq.i32(out_$i331, 1);
    goto corral_source_split_8184;

  $bb280:
    assume {:verifier.code 0} true;
    out_$i331 := $M.45;
    goto corral_source_split_8183;

  $bb279:
    assume !(out_$i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    goto $bb280;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1367} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_8181;

  SeqInstr_255:
    goto corral_source_split_8180;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} out_vslice_dummy_var_99 := mos7840_tiocmget(out_$p329);
    goto SeqInstr_254;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    out_$p329 := $M.41;
    goto corral_source_split_8179;

  $bb278:
    assume out_$i328 == 1;
    goto corral_source_split_8178;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    out_$i328 := $eq.i32(out_$i327, 4);
    goto corral_source_split_7658;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    out_$i327 := $M.45;
    goto corral_source_split_7657;

  $bb66:
    assume out_$i63 == 1;
    goto corral_source_split_7656;

  $bb65:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    out_$i63 := $slt.i32(out_$i55, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb300:
    assume !(out_$i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1381} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8234;

  SeqInstr_276:
    goto corral_source_split_8233;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} mos7840_bulk_in_callback(out_$p354);
    goto SeqInstr_275;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    out_$p354 := $M.38;
    goto corral_source_split_8232;

  $bb299:
    assume out_$i353 == 1;
    goto corral_source_split_8231;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    out_$i353 := $eq.i32(out_$i352, 2);
    goto corral_source_split_8229;

  $bb298:
    assume {:verifier.code 0} true;
    out_$i352 := $M.45;
    goto corral_source_split_8228;

  $bb297:
    assume !(out_$i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    goto $bb298;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1379} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8226;

  SeqInstr_273:
    goto corral_source_split_8225;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} mos7840_bulk_in_callback(out_$p351);
    goto SeqInstr_272;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    out_$p351 := $M.38;
    goto corral_source_split_8224;

  $bb296:
    assume out_$i350 == 1;
    goto corral_source_split_8223;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    out_$i350 := $eq.i32(out_$i349, 3);
    goto corral_source_split_8221;

  $bb295:
    assume {:verifier.code 0} true;
    out_$i349 := $M.45;
    goto corral_source_split_8220;

  $bb294:
    assume !(out_$i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    goto $bb295;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1377} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8218;

  SeqInstr_270:
    goto corral_source_split_8217;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} mos7840_bulk_in_callback(out_$p348);
    goto SeqInstr_269;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    out_$p348 := $M.38;
    goto corral_source_split_8216;

  $bb293:
    assume out_$i347 == 1;
    goto corral_source_split_8215;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    out_$i347 := $eq.i32(out_$i346, 1);
    goto corral_source_split_8213;

  $bb292:
    assume {:verifier.code 0} true;
    out_$i346 := $M.45;
    goto corral_source_split_8212;

  $bb291:
    assume !(out_$i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    goto $bb292;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1375} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_8210;

  SeqInstr_267:
    goto corral_source_split_8209;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} mos7840_bulk_in_callback(out_$p345);
    goto SeqInstr_266;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    out_$p345 := $M.38;
    goto corral_source_split_8208;

  $bb290:
    assume out_$i344 == 1;
    goto corral_source_split_8207;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    out_$i344 := $eq.i32(out_$i343, 4);
    goto corral_source_split_7662;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    out_$i343 := $M.45;
    goto corral_source_split_7661;

  $bb67:
    assume !(out_$i63 == 1);
    goto corral_source_split_7660;

  $bb306:
    assume !(out_$i359 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    goto $bb307;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1385} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8245;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} out_vslice_dummy_var_104 := ldv_detach_3();
    goto corral_source_split_8244;

  $bb305:
    assume out_$i359 == 1;
    goto corral_source_split_8243;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    out_$i359 := $eq.i32(out_$i358, 3);
    goto corral_source_split_8241;

  $bb304:
    assume {:verifier.code 0} true;
    out_$i358 := $M.45;
    goto corral_source_split_8240;

  $bb303:
    assume !(out_$i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    goto $bb304;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1383} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8238;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} out_vslice_dummy_var_103 := ldv_detach_3();
    goto corral_source_split_8237;

  $bb302:
    assume out_$i356 == 1;
    goto corral_source_split_8236;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    out_$i356 := $eq.i32(out_$i355, 4);
    goto corral_source_split_7642;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    out_$i355 := $M.45;
    goto corral_source_split_7641;

  $bb57:
    assume out_$i59 == 1;
    goto corral_source_split_7640;

  $bb56:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    out_$i59 := $slt.i32(out_$i55, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb309:
    assume !(out_$i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    goto $bb310;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $M.43 := out_$i365;
    call {:si_unique_call 1388} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i365);
    goto corral_source_split_8252;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    out_$i365 := $sub.i32(out_$i364, 1);
    goto corral_source_split_8251;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    out_$i364 := $M.43;
    goto corral_source_split_8250;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1387} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8249;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} out_vslice_dummy_var_105 := ldv_release_3();
    goto corral_source_split_8248;

  $bb308:
    assume out_$i362 == 1;
    goto corral_source_split_8247;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    out_$i362 := $eq.i32(out_$i361, 2);
    goto corral_source_split_7646;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    out_$i361 := $M.45;
    goto corral_source_split_7645;

  $bb59:
    assume out_$i60 == 1;
    goto corral_source_split_7644;

  $bb58:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    out_$i60 := $slt.i32(out_$i55, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb312:
    assume !(out_$i367 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    goto $bb313;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1390} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8256;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} out_vslice_dummy_var_106 := ldv_attach_3();
    goto corral_source_split_8255;

  $bb311:
    assume out_$i367 == 1;
    goto corral_source_split_8254;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    out_$i367 := $eq.i32(out_$i366, 2);
    goto corral_source_split_7650;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    out_$i366 := $M.45;
    goto corral_source_split_7649;

  $bb61:
    assume out_$i61 == 1;
    goto corral_source_split_7648;

  $bb60:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i55, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} ldv_stop();
    goto corral_source_split_8258;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb62:
    assume {:verifier.code 0} true;
    assume !(out_$i61 == 1);
    goto $bb63;

  $bb99:
    assume {:verifier.code 0} true;
    assume !(out_$i79 == 1);
    goto $bb63;

  $bb318:
    assume !(out_$i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    goto $bb319;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} choose_timer_2();
    goto corral_source_split_8261;

  $bb317:
    assume out_$i370 == 1;
    goto corral_source_split_8260;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    out_$i370 := $ne.i32(out_$i369, 0);
    goto corral_source_split_7586;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    out_$i369 := $M.46;
    goto corral_source_split_7585;

  $bb7:
    assume out_$i31 == 1;
    goto corral_source_split_7584;

  $bb6:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i28, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} ldv_stop();
    goto corral_source_split_8263;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i31 == 1);
    goto $bb9;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i33 == 1);
    goto $bb9;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$p102, out_$i104, out_$i105, out_$p106, out_$i108, out_$i109, out_$p110, out_$i112, out_$i113, out_$p114, out_$i116, out_$i117, out_$p118, out_$i120, out_$i121, out_$p122, out_$i124, out_$i125, out_$p126, out_$i128, out_$i129, out_$p130, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$p143, out_$i144, out_$i145, out_$p146, out_$i148, out_$i149, out_$p150, out_$i152, out_$i153, out_$p154, out_$i156, out_$i157, out_$p158, out_$i160, out_$i161, out_$p162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$p169, out_$p170, out_$i171, out_$i172, out_$p173, out_$p174, out_$i175, out_$i176, out_$p177, out_$p178, out_$i179, out_$i180, out_$p181, out_$p182, out_$i183, out_$i184, out_$p185, out_$i187, out_$i188, out_$p189, out_$i191, out_$i192, out_$p193, out_$i195, out_$i196, out_$p197, out_$i199, out_$i200, out_$p201, out_$i202, out_$i203, out_$i205, out_$i206, out_$p207, out_$i208, out_$i209, out_$i211, out_$i212, out_$p213, out_$i214, out_$i215, out_$i217, out_$i218, out_$p219, out_$i220, out_$i221, out_$i223, out_$i224, out_$p225, out_$i226, out_$i227, out_$i229, out_$i230, out_$p231, out_$i232, out_$i233, out_$i235, out_$i236, out_$p237, out_$i238, out_$i239, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i247, out_$i248, out_$p249, out_$p250, out_$i251, out_$i253, out_$i254, out_$p255, out_$i256, out_$i258, out_$i259, out_$p260, out_$i261, out_$i263, out_$i264, out_$p265, out_$i266, out_$i268, out_$i269, out_$p270, out_$i271, out_$i273, out_$i274, out_$p275, out_$i276, out_$i277, out_$p278, out_$i279, out_$i280, out_$p281, out_$i283, out_$i284, out_$p285, out_$i287, out_$i288, out_$p289, out_$i291, out_$i292, out_$p293, out_$i295, out_$i296, out_$p297, out_$i298, out_$i299, out_$i300, out_$p301, out_$i302, out_$i303, out_$i304, out_$p305, out_$i306, out_$i307, out_$i308, out_$p309, out_$i310, out_$i311, out_$i312, out_$p313, out_$i315, out_$i316, out_$p317, out_$i319, out_$i320, out_$p321, out_$i323, out_$i324, out_$p325, out_$i327, out_$i328, out_$p329, out_$i331, out_$i332, out_$p333, out_$i335, out_$i336, out_$p337, out_$i339, out_$i340, out_$p341, out_$i343, out_$i344, out_$p345, out_$i346, out_$i347, out_$p348, out_$i349, out_$i350, out_$p351, out_$i352, out_$i353, out_$p354, out_$i355, out_$i356, out_$i358, out_$i359, out_$i361, out_$i362, out_$i364, out_$i365, out_$i366, out_$i367, out_$i369, out_$i370, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p9, in_$p11, in_$p13, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$p102, out_$i104, out_$i105, out_$p106, out_$i108, out_$i109, out_$p110, out_$i112, out_$i113, out_$p114, out_$i116, out_$i117, out_$p118, out_$i120, out_$i121, out_$p122, out_$i124, out_$i125, out_$p126, out_$i128, out_$i129, out_$p130, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$p143, out_$i144, out_$i145, out_$p146, out_$i148, out_$i149, out_$p150, out_$i152, out_$i153, out_$p154, out_$i156, out_$i157, out_$p158, out_$i160, out_$i161, out_$p162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$p169, out_$p170, out_$i171, out_$i172, out_$p173, out_$p174, out_$i175, out_$i176, out_$p177, out_$p178, out_$i179, out_$i180, out_$p181, out_$p182, out_$i183, out_$i184, out_$p185, out_$i187, out_$i188, out_$p189, out_$i191, out_$i192, out_$p193, out_$i195, out_$i196, out_$p197, out_$i199, out_$i200, out_$p201, out_$i202, out_$i203, out_$i205, out_$i206, out_$p207, out_$i208, out_$i209, out_$i211, out_$i212, out_$p213, out_$i214, out_$i215, out_$i217, out_$i218, out_$p219, out_$i220, out_$i221, out_$i223, out_$i224, out_$p225, out_$i226, out_$i227, out_$i229, out_$i230, out_$p231, out_$i232, out_$i233, out_$i235, out_$i236, out_$p237, out_$i238, out_$i239, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i247, out_$i248, out_$p249, out_$p250, out_$i251, out_$i253, out_$i254, out_$p255, out_$i256, out_$i258, out_$i259, out_$p260, out_$i261, out_$i263, out_$i264, out_$p265, out_$i266, out_$i268, out_$i269, out_$p270, out_$i271, out_$i273, out_$i274, out_$p275, out_$i276, out_$i277, out_$p278, out_$i279, out_$i280, out_$p281, out_$i283, out_$i284, out_$p285, out_$i287, out_$i288, out_$p289, out_$i291, out_$i292, out_$p293, out_$i295, out_$i296, out_$p297, out_$i298, out_$i299, out_$i300, out_$p301, out_$i302, out_$i303, out_$i304, out_$p305, out_$i306, out_$i307, out_$i308, out_$p309, out_$i310, out_$i311, out_$i312, out_$p313, out_$i315, out_$i316, out_$p317, out_$i319, out_$i320, out_$p321, out_$i323, out_$i324, out_$p325, out_$i327, out_$i328, out_$p329, out_$i331, out_$i332, out_$p333, out_$i335, out_$i336, out_$p337, out_$i339, out_$i340, out_$p341, out_$i343, out_$i344, out_$p345, out_$i346, out_$i347, out_$p348, out_$i349, out_$i350, out_$p351, out_$i352, out_$i353, out_$p354, out_$i355, out_$i356, out_$i358, out_$i359, out_$i361, out_$i362, out_$i364, out_$i365, out_$i366, out_$i367, out_$i369, out_$i370, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$i28: i32, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$i55: i32, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$i83: i32, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i32, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i108: i32, in_$i109: i1, in_$p110: ref, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$i116: i32, in_$i117: i1, in_$p118: ref, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$i144: i32, in_$i145: i1, in_$p146: ref, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$i156: i32, in_$i157: i1, in_$p158: ref, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$p163: ref, in_$i164: i32, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$p170: ref, in_$i171: i32, in_$i172: i1, in_$p173: ref, in_$p174: ref, in_$i175: i32, in_$i176: i1, in_$p177: ref, in_$p178: ref, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$p182: ref, in_$i183: i32, in_$i184: i1, in_$p185: ref, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i191: i32, in_$i192: i1, in_$p193: ref, in_$i195: i32, in_$i196: i1, in_$p197: ref, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$i202: i32, in_$i203: i64, in_$i205: i32, in_$i206: i1, in_$p207: ref, in_$i208: i32, in_$i209: i64, in_$i211: i32, in_$i212: i1, in_$p213: ref, in_$i214: i32, in_$i215: i64, in_$i217: i32, in_$i218: i1, in_$p219: ref, in_$i220: i32, in_$i221: i64, in_$i223: i32, in_$i224: i1, in_$p225: ref, in_$i226: i32, in_$i227: i32, in_$i229: i32, in_$i230: i1, in_$p231: ref, in_$i232: i32, in_$i233: i32, in_$i235: i32, in_$i236: i1, in_$p237: ref, in_$i238: i32, in_$i239: i32, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$i244: i32, in_$i245: i32, in_$i247: i32, in_$i248: i1, in_$p249: ref, in_$p250: ref, in_$i251: i32, in_$i253: i32, in_$i254: i1, in_$p255: ref, in_$i256: i64, in_$i258: i32, in_$i259: i1, in_$p260: ref, in_$i261: i64, in_$i263: i32, in_$i264: i1, in_$p265: ref, in_$i266: i64, in_$i268: i32, in_$i269: i1, in_$p270: ref, in_$i271: i64, in_$i273: i32, in_$i274: i1, in_$p275: ref, in_$i276: i32, in_$i277: i1, in_$p278: ref, in_$i279: i32, in_$i280: i1, in_$p281: ref, in_$i283: i32, in_$i284: i1, in_$p285: ref, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$i291: i32, in_$i292: i1, in_$p293: ref, in_$i295: i32, in_$i296: i1, in_$p297: ref, in_$i298: i32, in_$i299: i32, in_$i300: i1, in_$p301: ref, in_$i302: i32, in_$i303: i32, in_$i304: i1, in_$p305: ref, in_$i306: i32, in_$i307: i32, in_$i308: i1, in_$p309: ref, in_$i310: i32, in_$i311: i32, in_$i312: i1, in_$p313: ref, in_$i315: i32, in_$i316: i1, in_$p317: ref, in_$i319: i32, in_$i320: i1, in_$p321: ref, in_$i323: i32, in_$i324: i1, in_$p325: ref, in_$i327: i32, in_$i328: i1, in_$p329: ref, in_$i331: i32, in_$i332: i1, in_$p333: ref, in_$i335: i32, in_$i336: i1, in_$p337: ref, in_$i339: i32, in_$i340: i1, in_$p341: ref, in_$i343: i32, in_$i344: i1, in_$p345: ref, in_$i346: i32, in_$i347: i1, in_$p348: ref, in_$i349: i32, in_$i350: i1, in_$p351: ref, in_$i352: i32, in_$i353: i1, in_$p354: ref, in_$i355: i32, in_$i356: i1, in_$i358: i32, in_$i359: i1, in_$i361: i32, in_$i362: i1, in_$i364: i32, in_$i365: i32, in_$i366: i32, in_$i367: i1, in_$i369: i32, in_$i370: i1, in_vslice_dummy_var_62: i32, in_vslice_dummy_var_63: i32, in_vslice_dummy_var_64: i32, in_vslice_dummy_var_65: i32, in_vslice_dummy_var_66: i32, in_vslice_dummy_var_67: i32, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: i32, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32) returns (out_$i28: i32, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$i55: i32, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$i83: i32, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i32, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i108: i32, out_$i109: i1, out_$p110: ref, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$i116: i32, out_$i117: i1, out_$p118: ref, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$i144: i32, out_$i145: i1, out_$p146: ref, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$i156: i32, out_$i157: i1, out_$p158: ref, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$p163: ref, out_$i164: i32, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$p170: ref, out_$i171: i32, out_$i172: i1, out_$p173: ref, out_$p174: ref, out_$i175: i32, out_$i176: i1, out_$p177: ref, out_$p178: ref, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$p182: ref, out_$i183: i32, out_$i184: i1, out_$p185: ref, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i191: i32, out_$i192: i1, out_$p193: ref, out_$i195: i32, out_$i196: i1, out_$p197: ref, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$i202: i32, out_$i203: i64, out_$i205: i32, out_$i206: i1, out_$p207: ref, out_$i208: i32, out_$i209: i64, out_$i211: i32, out_$i212: i1, out_$p213: ref, out_$i214: i32, out_$i215: i64, out_$i217: i32, out_$i218: i1, out_$p219: ref, out_$i220: i32, out_$i221: i64, out_$i223: i32, out_$i224: i1, out_$p225: ref, out_$i226: i32, out_$i227: i32, out_$i229: i32, out_$i230: i1, out_$p231: ref, out_$i232: i32, out_$i233: i32, out_$i235: i32, out_$i236: i1, out_$p237: ref, out_$i238: i32, out_$i239: i32, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$i244: i32, out_$i245: i32, out_$i247: i32, out_$i248: i1, out_$p249: ref, out_$p250: ref, out_$i251: i32, out_$i253: i32, out_$i254: i1, out_$p255: ref, out_$i256: i64, out_$i258: i32, out_$i259: i1, out_$p260: ref, out_$i261: i64, out_$i263: i32, out_$i264: i1, out_$p265: ref, out_$i266: i64, out_$i268: i32, out_$i269: i1, out_$p270: ref, out_$i271: i64, out_$i273: i32, out_$i274: i1, out_$p275: ref, out_$i276: i32, out_$i277: i1, out_$p278: ref, out_$i279: i32, out_$i280: i1, out_$p281: ref, out_$i283: i32, out_$i284: i1, out_$p285: ref, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$i291: i32, out_$i292: i1, out_$p293: ref, out_$i295: i32, out_$i296: i1, out_$p297: ref, out_$i298: i32, out_$i299: i32, out_$i300: i1, out_$p301: ref, out_$i302: i32, out_$i303: i32, out_$i304: i1, out_$p305: ref, out_$i306: i32, out_$i307: i32, out_$i308: i1, out_$p309: ref, out_$i310: i32, out_$i311: i32, out_$i312: i1, out_$p313: ref, out_$i315: i32, out_$i316: i1, out_$p317: ref, out_$i319: i32, out_$i320: i1, out_$p321: ref, out_$i323: i32, out_$i324: i1, out_$p325: ref, out_$i327: i32, out_$i328: i1, out_$p329: ref, out_$i331: i32, out_$i332: i1, out_$p333: ref, out_$i335: i32, out_$i336: i1, out_$p337: ref, out_$i339: i32, out_$i340: i1, out_$p341: ref, out_$i343: i32, out_$i344: i1, out_$p345: ref, out_$i346: i32, out_$i347: i1, out_$p348: ref, out_$i349: i32, out_$i350: i1, out_$p351: ref, out_$i352: i32, out_$i353: i1, out_$p354: ref, out_$i355: i32, out_$i356: i1, out_$i358: i32, out_$i359: i1, out_$i361: i32, out_$i362: i1, out_$i364: i32, out_$i365: i32, out_$i366: i32, out_$i367: i1, out_$i369: i32, out_$i370: i1, out_vslice_dummy_var_62: i32, out_vslice_dummy_var_63: i32, out_vslice_dummy_var_64: i32, out_vslice_dummy_var_65: i32, out_vslice_dummy_var_66: i32, out_vslice_dummy_var_67: i32, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: i32, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32);
  modifies $M.17, $M.19, $M.21, $M.23, $M.0, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.38, $M.39, $M.40, $M.41, $CurrAddr, $M.45, $M.44, $M.47, $M.43, $M.48, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.7, $M.49, $M.25, $M.26, $M.8, $M.28, $M.30, $M.32, $M.34;


