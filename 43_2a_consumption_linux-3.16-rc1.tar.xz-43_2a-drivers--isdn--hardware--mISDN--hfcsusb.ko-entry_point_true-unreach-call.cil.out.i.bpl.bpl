var $M.0: [ref]i8;

var $M.1: [ref]i8;

var $M.2: [ref]ref;

var $M.3: i32;

var $M.4: i32;

var $M.5: i32;

var $M.6: i32;

var $M.7: [ref]i8;

var $M.9: [ref]i32;

var $M.11: [ref]ref;

var $M.12: [ref]i32;

var $M.14: [ref]ref;

var $M.15: [ref]ref;

var $M.16: ref;

var $M.17: i32;

var $M.18: i32;

var $M.19: i32;

var $M.20: i32;

var $M.21: i32;

var $M.22: i32;

var $M.37: [ref]i8;

var $M.38: [ref]i8;

var $M.39: [ref]i8;

var $M.40: [ref]i8;

var $M.41: [ref]i8;

var $M.42: [ref]i8;

var $M.43: [ref]i8;

var $M.44: [ref]i8;

var $M.45: [ref]i8;

var $M.46: [ref]i8;

var $M.47: [ref]i8;

var $M.48: [ref]i8;

var $M.49: [ref]i8;

var $M.50: [ref]i8;

var $M.51: [ref]i8;

var $M.52: [ref]i8;

var $M.53: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 409959);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const hfcsusb_drv_group1: ref;

axiom hfcsusb_drv_group1 == $sub.ref(0, 2060);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 3088);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 4116);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 5144);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 6172);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 7200);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 8228);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 9256);

const __mod_usb__hfcsusb_idtab_device_table: ref;

axiom __mod_usb__hfcsusb_idtab_device_table == $sub.ref(0, 10312);

const hfcsusb_drv: ref;

axiom hfcsusb_drv == $sub.ref(0, 11640);

const HFClist: ref;

axiom HFClist == $sub.ref(0, 12680);

const HFClock: ref;

axiom HFClock == $sub.ref(0, 13776);

const hfcsusb_cnt: ref;

axiom hfcsusb_cnt == $sub.ref(0, 14804);

const poll: ref;

axiom poll == $sub.ref(0, 15832);

const {:count 8} iso_packets: ref;

axiom iso_packets == $sub.ref(0, 16888);

const {:count 15} urb_errlist: ref;

axiom urb_errlist == $sub.ref(0, 18152);

const {:count 9} HFC_TE_LAYER1_STATES: ref;

axiom HFC_TE_LAYER1_STATES == $sub.ref(0, 19248);

const {:count 5} HFC_NT_LAYER1_STATES: ref;

axiom HFC_NT_LAYER1_STATES == $sub.ref(0, 20312);

const debug: ref;

axiom debug == $sub.ref(0, 21340);

const {:count 4} conf_str: ref;

axiom conf_str == $sub.ref(0, 22396);

const {:count 5} validconf: ref;

axiom validconf == $sub.ref(0, 23800);

const __constr_expr_12: ref;

axiom __constr_expr_12 == $sub.ref(0, 24856);

const __constr_expr_11: ref;

axiom __constr_expr_11 == $sub.ref(0, 25912);

const __constr_expr_10: ref;

axiom __constr_expr_10 == $sub.ref(0, 26968);

const __constr_expr_9: ref;

axiom __constr_expr_9 == $sub.ref(0, 28024);

const __constr_expr_8: ref;

axiom __constr_expr_8 == $sub.ref(0, 29080);

const __constr_expr_7: ref;

axiom __constr_expr_7 == $sub.ref(0, 30136);

const __constr_expr_6: ref;

axiom __constr_expr_6 == $sub.ref(0, 31192);

const __constr_expr_5: ref;

axiom __constr_expr_5 == $sub.ref(0, 32248);

const __constr_expr_4: ref;

axiom __constr_expr_4 == $sub.ref(0, 33304);

const __constr_expr_3: ref;

axiom __constr_expr_3 == $sub.ref(0, 34360);

const __constr_expr_2: ref;

axiom __constr_expr_2 == $sub.ref(0, 35416);

const __constr_expr_1: ref;

axiom __constr_expr_1 == $sub.ref(0, 36472);

const __constr_expr_0: ref;

axiom __constr_expr_0 == $sub.ref(0, 37528);

const {:count 14} hfcsusb_idtab: ref;

axiom hfcsusb_idtab == $sub.ref(0, 39000);

const {:count 43} .str.7: ref;

axiom .str.7 == $sub.ref(0, 40067);

const {:count 34} .str.8: ref;

axiom .str.8 == $sub.ref(0, 41125);

const {:count 29} .str.9: ref;

axiom .str.9 == $sub.ref(0, 42178);

const {:count 17} .str.10: ref;

axiom .str.10 == $sub.ref(0, 43219);

const {:count 18} .str.11: ref;

axiom .str.11 == $sub.ref(0, 44261);

const {:count 16} .str.12: ref;

axiom .str.12 == $sub.ref(0, 45301);

const {:count 16} .str.13: ref;

axiom .str.13 == $sub.ref(0, 46341);

const {:count 21} .str.14: ref;

axiom .str.14 == $sub.ref(0, 47386);

const {:count 18} .str.15: ref;

axiom .str.15 == $sub.ref(0, 48428);

const {:count 16} .str.16: ref;

axiom .str.16 == $sub.ref(0, 49468);

const {:count 19} .str.17: ref;

axiom .str.17 == $sub.ref(0, 50511);

const {:count 22} .str.18: ref;

axiom .str.18 == $sub.ref(0, 51557);

const {:count 30} .str.19: ref;

axiom .str.19 == $sub.ref(0, 52611);

const {:count 32} .str.20: ref;

axiom .str.20 == $sub.ref(0, 53667);

const {:count 32} .str.21: ref;

axiom .str.21 == $sub.ref(0, 54723);

const {:count 31} .str.22: ref;

axiom .str.22 == $sub.ref(0, 55778);

const {:count 31} .str.23: ref;

axiom .str.23 == $sub.ref(0, 56833);

const {:count 14} .str.33: ref;

axiom .str.33 == $sub.ref(0, 57871);

const {:count 17} .str.34: ref;

axiom .str.34 == $sub.ref(0, 58912);

const {:count 27} .str.35: ref;

axiom .str.35 == $sub.ref(0, 59963);

const {:count 15} .str.36: ref;

axiom .str.36 == $sub.ref(0, 61002);

const {:count 29} .str.37: ref;

axiom .str.37 == $sub.ref(0, 62055);

const {:count 14} .str.47: ref;

axiom .str.47 == $sub.ref(0, 63093);

const {:count 14} .str.48: ref;

axiom .str.48 == $sub.ref(0, 64131);

const {:count 16} .str.49: ref;

axiom .str.49 == $sub.ref(0, 65171);

const {:count 20} .str.50: ref;

axiom .str.50 == $sub.ref(0, 66215);

const {:count 24} .str.51: ref;

axiom .str.51 == $sub.ref(0, 67263);

const {:count 26} .str.52: ref;

axiom .str.52 == $sub.ref(0, 68313);

const {:count 21} .str.53: ref;

axiom .str.53 == $sub.ref(0, 69358);

const {:count 18} .str.54: ref;

axiom .str.54 == $sub.ref(0, 70400);

const {:count 21} .str.55: ref;

axiom .str.55 == $sub.ref(0, 71445);

const {:count 48} .str.92: ref;

axiom .str.92 == $sub.ref(0, 72517);

const {:count 52} .str.93: ref;

axiom .str.93 == $sub.ref(0, 73593);

const {:count 31} .str.94: ref;

axiom .str.94 == $sub.ref(0, 74648);

const {:count 38} .str.95: ref;

axiom .str.95 == $sub.ref(0, 75710);

const {:count 35} .str.96: ref;

axiom .str.96 == $sub.ref(0, 76769);

const {:count 19} .str.97: ref;

axiom .str.97 == $sub.ref(0, 77812);

const {:count 30} .str.98: ref;

axiom .str.98 == $sub.ref(0, 78866);

const {:count 23} .str.99: ref;

axiom .str.99 == $sub.ref(0, 79913);

const {:count 54} .str.100: ref;

axiom .str.100 == $sub.ref(0, 80991);

const {:count 20} .str.101: ref;

axiom .str.101 == $sub.ref(0, 82035);

const {:count 29} .str.102: ref;

axiom .str.102 == $sub.ref(0, 83088);

const {:count 12} .str.103: ref;

axiom .str.103 == $sub.ref(0, 84124);

const {:count 30} .str.104: ref;

axiom .str.104 == $sub.ref(0, 85178);

const {:count 17} .str.105: ref;

axiom .str.105 == $sub.ref(0, 86219);

const {:count 8} .str.153: ref;

axiom .str.153 == $sub.ref(0, 87251);

const {:count 10} .str.4: ref;

axiom .str.4 == $sub.ref(0, 88285);

const {:count 26} .str.154: ref;

axiom .str.154 == $sub.ref(0, 89335);

const {:count 9} .str.24: ref;

axiom .str.24 == $sub.ref(0, 90368);

const {:count 11} .str.155: ref;

axiom .str.155 == $sub.ref(0, 91403);

const {:count 24} .str.132: ref;

axiom .str.132 == $sub.ref(0, 92451);

const {:count 19} .str.133: ref;

axiom .str.133 == $sub.ref(0, 93494);

const {:count 34} .str.134: ref;

axiom .str.134 == $sub.ref(0, 94552);

const {:count 21} .str.129: ref;

axiom .str.129 == $sub.ref(0, 95597);

const {:count 19} .str.130: ref;

axiom .str.130 == $sub.ref(0, 96640);

const {:count 31} .str.131: ref;

axiom .str.131 == $sub.ref(0, 97695);

const {:count 32} .str.38: ref;

axiom .str.38 == $sub.ref(0, 98751);

const {:count 11} .str.39: ref;

axiom .str.39 == $sub.ref(0, 99786);

const {:count 33} .str.42: ref;

axiom .str.42 == $sub.ref(0, 100843);

const {:count 10} .str.43: ref;

axiom .str.43 == $sub.ref(0, 101877);

const {:count 20} .str.44: ref;

axiom .str.44 == $sub.ref(0, 102921);

const .str: ref;

axiom .str == $sub.ref(0, 103999);

const {:count 14} .str.1: ref;

axiom .str.1 == $sub.ref(0, 105037);

const {:count 46} .str.2: ref;

axiom .str.2 == $sub.ref(0, 106107);

const {:count 3} .str.3: ref;

axiom .str.3 == $sub.ref(0, 107134);

const {:count 32} .str.5: ref;

axiom .str.5 == $sub.ref(0, 108190);

const {:count 43} .str.6: ref;

axiom .str.6 == $sub.ref(0, 109257);

const {:count 15} .str.25: ref;

axiom .str.25 == $sub.ref(0, 110296);

const {:count 25} .str.26: ref;

axiom .str.26 == $sub.ref(0, 111345);

const {:count 20} .str.27: ref;

axiom .str.27 == $sub.ref(0, 112389);

const {:count 6} .str.28: ref;

axiom .str.28 == $sub.ref(0, 113419);

const {:count 25} .str.29: ref;

axiom .str.29 == $sub.ref(0, 114468);

const {:count 14} .str.148: ref;

axiom .str.148 == $sub.ref(0, 115506);

const {:count 30} .str.149: ref;

axiom .str.149 == $sub.ref(0, 116560);

const {:count 33} .str.150: ref;

axiom .str.150 == $sub.ref(0, 117617);

const {:count 14} .str.152: ref;

axiom .str.152 == $sub.ref(0, 118655);

const {:count 14} .str.151: ref;

axiom .str.151 == $sub.ref(0, 119693);

const {:count 16} .str.145: ref;

axiom .str.145 == $sub.ref(0, 120733);

const {:count 10} .str.146: ref;

axiom .str.146 == $sub.ref(0, 121767);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 23} .str.147: ref;

axiom .str.147 == $sub.ref(0, 122814);

const {:count 22} .str.143: ref;

axiom .str.143 == $sub.ref(0, 123860);

const {:count 20} .str.144: ref;

axiom .str.144 == $sub.ref(0, 124904);

const {:count 31} .str.140: ref;

axiom .str.140 == $sub.ref(0, 125959);

const {:count 18} .str.141: ref;

axiom .str.141 == $sub.ref(0, 127001);

const {:count 28} .str.142: ref;

axiom .str.142 == $sub.ref(0, 128053);

const {:count 13} .str.138: ref;

axiom .str.138 == $sub.ref(0, 129090);

const {:count 29} .str.139: ref;

axiom .str.139 == $sub.ref(0, 130143);

const {:count 30} .str.113: ref;

axiom .str.113 == $sub.ref(0, 131197);

const {:count 16} .str.114: ref;

axiom .str.114 == $sub.ref(0, 132237);

const {:count 33} .str.115: ref;

axiom .str.115 == $sub.ref(0, 133294);

const {:count 36} .str.108: ref;

axiom .str.108 == $sub.ref(0, 134354);

const {:count 34} .str.116: ref;

axiom .str.116 == $sub.ref(0, 135412);

const {:count 4} .str.110: ref;

axiom .str.110 == $sub.ref(0, 136440);

const {:count 26} .str.117: ref;

axiom .str.117 == $sub.ref(0, 137490);

const {:count 36} .str.118: ref;

axiom .str.118 == $sub.ref(0, 138550);

const {:count 6} .str.75: ref;

axiom .str.75 == $sub.ref(0, 139580);

const {:count 2} .str.76: ref;

axiom .str.76 == $sub.ref(0, 140606);

const {:count 40} .str.119: ref;

axiom .str.119 == $sub.ref(0, 141670);

const {:count 40} .str.120: ref;

axiom .str.120 == $sub.ref(0, 142734);

const {:count 20} .str.91: ref;

axiom .str.91 == $sub.ref(0, 143778);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 18} .str.86: ref;

axiom .str.86 == $sub.ref(0, 144820);

const {:count 17} .str.87: ref;

axiom .str.87 == $sub.ref(0, 145861);

const {:count 38} .str.88: ref;

axiom .str.88 == $sub.ref(0, 146923);

const {:count 36} .str.89: ref;

axiom .str.89 == $sub.ref(0, 147983);

const {:count 23} .str.90: ref;

axiom .str.90 == $sub.ref(0, 149030);

const {:count 49} .str.106: ref;

axiom .str.106 == $sub.ref(0, 150103);

const {:count 16} .str.107: ref;

axiom .str.107 == $sub.ref(0, 151143);

const {:count 29} .str.109: ref;

axiom .str.109 == $sub.ref(0, 152196);

const {:count 39} .str.111: ref;

axiom .str.111 == $sub.ref(0, 153259);

const {:count 55} .str.112: ref;

axiom .str.112 == $sub.ref(0, 154338);

const {:count 51} .str.78: ref;

axiom .str.78 == $sub.ref(0, 155413);

const {:count 17} .str.79: ref;

axiom .str.79 == $sub.ref(0, 156454);

const {:count 28} .str.80: ref;

axiom .str.80 == $sub.ref(0, 157506);

const {:count 38} .str.81: ref;

axiom .str.81 == $sub.ref(0, 158568);

const {:count 28} .str.82: ref;

axiom .str.82 == $sub.ref(0, 159620);

const {:count 52} .str.83: ref;

axiom .str.83 == $sub.ref(0, 160696);

const {:count 36} .str.84: ref;

axiom .str.84 == $sub.ref(0, 161756);

const {:count 52} .str.85: ref;

axiom .str.85 == $sub.ref(0, 162832);

const {:count 25} .str.69: ref;

axiom .str.69 == $sub.ref(0, 163881);

const {:count 15} .str.70: ref;

axiom .str.70 == $sub.ref(0, 164920);

const {:count 32} .str.71: ref;

axiom .str.71 == $sub.ref(0, 165976);

const {:count 40} .str.72: ref;

axiom .str.72 == $sub.ref(0, 167040);

const {:count 16} .str.73: ref;

axiom .str.73 == $sub.ref(0, 168080);

const {:count 27} .str.74: ref;

axiom .str.74 == $sub.ref(0, 169131);

const {:count 33} .str.77: ref;

axiom .str.77 == $sub.ref(0, 170188);

const {:count 20} .str.62: ref;

axiom .str.62 == $sub.ref(0, 171232);

const {:count 10} .str.63: ref;

axiom .str.63 == $sub.ref(0, 172266);

const {:count 42} .str.64: ref;

axiom .str.64 == $sub.ref(0, 173332);

const {:count 29} .str.65: ref;

axiom .str.65 == $sub.ref(0, 174385);

const {:count 32} .str.135: ref;

axiom .str.135 == $sub.ref(0, 175441);

const {:count 13} .str.136: ref;

axiom .str.136 == $sub.ref(0, 176478);

const {:count 24} .str.137: ref;

axiom .str.137 == $sub.ref(0, 177526);

const {:count 13} .str.126: ref;

axiom .str.126 == $sub.ref(0, 178563);

const {:count 14} .str.127: ref;

axiom .str.127 == $sub.ref(0, 179601);

const {:count 27} .str.128: ref;

axiom .str.128 == $sub.ref(0, 180652);

const {:count 40} .str.66: ref;

axiom .str.66 == $sub.ref(0, 181716);

const {:count 14} .str.67: ref;

axiom .str.67 == $sub.ref(0, 182754);

const {:count 28} .str.68: ref;

axiom .str.68 == $sub.ref(0, 183806);

const {:count 3} .str.60: ref;

axiom .str.60 == $sub.ref(0, 184833);

const {:count 3} .str.59: ref;

axiom .str.59 == $sub.ref(0, 185860);

const {:count 12} .str.124: ref;

axiom .str.124 == $sub.ref(0, 186896);

const {:count 12} .str.125: ref;

axiom .str.125 == $sub.ref(0, 187932);

const {:count 18} .str.121: ref;

axiom .str.121 == $sub.ref(0, 188974);

const {:count 15} .str.122: ref;

axiom .str.122 == $sub.ref(0, 190013);

const {:count 25} .str.123: ref;

axiom .str.123 == $sub.ref(0, 191062);

const {:count 22} .str.56: ref;

axiom .str.56 == $sub.ref(0, 192108);

const {:count 13} .str.57: ref;

axiom .str.57 == $sub.ref(0, 193145);

const {:count 29} .str.58: ref;

axiom .str.58 == $sub.ref(0, 194198);

const {:count 28} .str.61: ref;

axiom .str.61 == $sub.ref(0, 195250);

const {:count 13} .str.40: ref;

axiom .str.40 == $sub.ref(0, 196287);

const {:count 19} .str.41: ref;

axiom .str.41 == $sub.ref(0, 197330);

const {:count 13} .str.30: ref;

axiom .str.30 == $sub.ref(0, 198367);

const {:count 12} .str.45: ref;

axiom .str.45 == $sub.ref(0, 199403);

const {:count 17} .str.46: ref;

axiom .str.46 == $sub.ref(0, 200444);

const {:count 12} .str.31: ref;

axiom .str.31 == $sub.ref(0, 201480);

const {:count 26} .str.32: ref;

axiom .str.32 == $sub.ref(0, 202530);

const {:count 8} .str.156: ref;

axiom .str.156 == $sub.ref(0, 203562);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 204594);

const {:count 3} .str.1.326: ref;

axiom .str.1.326 == $sub.ref(0, 205621);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 206659);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 207687);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 208719);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 209751);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const hfcsusb_probe: ref;

axiom hfcsusb_probe == $sub.ref(0, 210783);

procedure hfcsusb_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.3, $CurrAddr, assertsPassed, $M.5;



implementation hfcsusb_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i64;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i64;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i64;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $i43: i1;
  var $i14: i32;
  var $i15: i32;
  var $i44: i32;
  var $i13: i32;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $i52: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $p68: ref;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i82: i64;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p92: ref;
  var $i93: i8;
  var $i94: i32;
  var $i95: i1;
  var $p101: ref;
  var $i102: i8;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i32;
  var $p112: ref;
  var $i113: i8;
  var $i114: i32;
  var $i115: i64;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $i119: i64;
  var $p120: ref;
  var $i121: i32;
  var $i122: i1;
  var $i123: i32;
  var $i124: i1;
  var $i125: i64;
  var $p126: ref;
  var $i127: i32;
  var $i128: i1;
  var $i129: i64;
  var $p130: ref;
  var $i131: i1;
  var $i132: i64;
  var $p133: ref;
  var $i134: i32;
  var $i135: i1;
  var $i136: i64;
  var $p137: ref;
  var $i138: i1;
  var $i139: i64;
  var $p140: ref;
  var $i141: i32;
  var $i142: i1;
  var $i143: i64;
  var $p144: ref;
  var $i145: i1;
  var $p147: ref;
  var $i148: i8;
  var $i149: i32;
  var $i150: i64;
  var $p151: ref;
  var $i152: i32;
  var $i153: i1;
  var $i154: i32;
  var $i155: i32;
  var $p156: ref;
  var $i157: i32;
  var $i158: i8;
  var $i159: i32;
  var $i160: i1;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $i161: i32;
  var $i96: i32;
  var $p162: ref;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $i166: i32;
  var $i167: i1;
  var $i168: i32;
  var $i169: i1;
  var $i171: i1;
  var $p172: ref;
  var $i173: i32;
  var $i174: i32;
  var $p175: ref;
  var $i176: i32;
  var $i177: i32;
  var $i178: i32;
  var $i179: i64;
  var $p181: ref;
  var $i182: i32;
  var $i183: i1;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $i81: i32;
  var $p184: ref;
  var $i185: i32;
  var $i186: i32;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i187: i32;
  var $i188: i32;
  var $i189: i1;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $i64: i32;
  var $p190: ref;
  var $i191: i32;
  var $i192: i32;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i193: i1;
  var $p194: ref;
  var $p195: ref;
  var $i196: i64;
  var $i197: i1;
  var $p198: ref;
  var $p199: ref;
  var $p201: ref;
  var $p202: ref;
  var $i203: i64;
  var $p206: ref;
  var $i207: i8;
  var $i208: i32;
  var $i209: i1;
  var $p217: ref;
  var $i218: i8;
  var $i219: i32;
  var $i220: i32;
  var $i221: i32;
  var $i222: i32;
  var $i223: i32;
  var $i224: i1;
  var $i225: i32;
  var $i226: i32;
  var $p227: ref;
  var $p228: ref;
  var $i229: i64;
  var $i230: i64;
  var $i232: i64;
  var $i233: i64;
  var $p234: ref;
  var $i235: i32;
  var $i236: i1;
  var $i237: i64;
  var $i238: i64;
  var $p239: ref;
  var $i240: i32;
  var $i241: i1;
  var $p242: ref;
  var $p247: ref;
  var $i248: i8;
  var $i249: i32;
  var $i250: i1;
  var $i251: i1;
  var $i252: i1;
  var $i253: i1;
  var $p255: ref;
  var $i256: i8;
  var $i257: i32;
  var $i258: i32;
  var $i259: i32;
  var $p260: ref;
  var $p261: ref;
  var $p263: ref;
  var $i264: i16;
  var $i265: i32;
  var $i269: i32;
  var $i270: i1;
  var $p272: ref;
  var $i273: i8;
  var $i274: i32;
  var $i275: i32;
  var $i276: i32;
  var $p277: ref;
  var $p279: ref;
  var $i280: i8;
  var $i281: i32;
  var $i282: i32;
  var $i283: i32;
  var $p284: ref;
  var $p285: ref;
  var $p287: ref;
  var $i288: i16;
  var $i289: i32;
  var $i290: i32;
  var $i291: i1;
  var $p293: ref;
  var $i294: i8;
  var $i295: i32;
  var $i296: i32;
  var $i297: i32;
  var $p298: ref;
  var $p300: ref;
  var $i301: i8;
  var $i302: i32;
  var $i303: i32;
  var $p304: ref;
  var $p305: ref;
  var $p307: ref;
  var $i308: i16;
  var $i309: i32;
  var $p310: ref;
  var $p266: ref;
  var $i267: i32;
  var $i268: i32;
  var $p311: ref;
  var $i312: i32;
  var $i313: i1;
  var $i314: i32;
  var $p315: ref;
  var $p316: ref;
  var $p318: ref;
  var $i319: i16;
  var $i320: i8;
  var $p321: ref;
  var $p323: ref;
  var $i324: i8;
  var $p325: ref;
  var $p326: ref;
  var $p243: ref;
  var $i244: i32;
  var $i245: i32;
  var $i327: i32;
  var $i328: i8;
  var $i329: i32;
  var $i330: i1;
  var $i212: i32;
  var $i213: i32;
  var $p214: ref;
  var $i215: i32;
  var $i331: i32;
  var $i332: i32;
  var $i210: i32;
  var $i211: i32;
  var $p333: ref;
  var $p334: ref;
  var $p335: ref;
  var $p337: ref;
  var $i338: i8;
  var $i339: i32;
  var $p340: ref;
  var $i341: i64;
  var $p342: ref;
  var $i343: i32;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $i350: i32;
  var $i351: i32;
  var $p352: ref;
  var $p353: ref;
  var $p354: ref;
  var $i355: i32;
  var $i356: i32;
  var $p357: ref;
  var $i358: i64;
  var $p360: ref;
  var $i361: i64;
  var $p362: ref;
  var $p363: ref;
  var $p364: ref;
  var $p365: ref;
  var $p366: ref;
  var $i367: i64;
  var $i368: i1;
  var $p369: ref;
  var $p370: ref;
  var $p372: ref;
  var $p373: ref;
  var $p374: ref;
  var $p375: ref;
  var $p376: ref;
  var $i377: i64;
  var $p378: ref;
  var $p379: ref;
  var $p382: ref;
  var $p383: ref;
  var $i384: i32;
  var $i385: i1;
  var $p386: ref;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $i54: i32;
  var $p390: ref;
  var $i391: i32;
  var $i392: i1;
  var $p393: ref;
  var $i394: i32;
  var $i395: i1;
  var $i396: i32;
  var $p397: ref;
  var $i398: i32;
  var $i399: i1;
  var $p400: ref;
  var $i401: i32;
  var $i402: i1;
  var $i403: i32;
  var $p404: ref;
  var $i405: i32;
  var $i406: i1;
  var $p407: ref;
  var $i408: i32;
  var $i409: i1;
  var $i410: i32;
  var $p411: ref;
  var $i412: i32;
  var $i413: i1;
  var $p414: ref;
  var $i415: i32;
  var $i416: i1;
  var $i417: i32;
  var $p418: ref;
  var $i419: i32;
  var $i420: i1;
  var $p421: ref;
  var $i422: i32;
  var $i423: i1;
  var $i424: i32;
  var $p425: ref;
  var $i426: i32;
  var $i427: i1;
  var $p428: ref;
  var $i429: i32;
  var $i430: i1;
  var $i431: i32;
  var $p432: ref;
  var $i433: i32;
  var $i434: i1;
  var $p435: ref;
  var $i436: i32;
  var $i437: i1;
  var $i438: i32;
  var $p439: ref;
  var $i440: i32;
  var $i441: i1;
  var $p442: ref;
  var $i443: i32;
  var $i444: i1;
  var $i445: i32;
  var $p446: ref;
  var $i447: i32;
  var $i448: i1;
  var $p449: ref;
  var $i450: i32;
  var $i451: i1;
  var $i452: i32;
  var $p453: ref;
  var $i454: i32;
  var $i455: i1;
  var $p456: ref;
  var $i457: i32;
  var $i458: i1;
  var $i459: i32;
  var $p460: ref;
  var $i461: i32;
  var $i462: i1;
  var $p463: ref;
  var $i464: i32;
  var $i465: i1;
  var $i466: i32;
  var $p467: ref;
  var $i468: i32;
  var $i469: i1;
  var $p470: ref;
  var $i471: i32;
  var $i472: i1;
  var $i473: i32;
  var $p474: ref;
  var $i475: i32;
  var $i476: i1;
  var $p477: ref;
  var $i478: i32;
  var $i479: i1;
  var $i480: i32;
  var $p481: ref;
  var $i482: i32;
  var $i483: i1;
  var $p484: ref;
  var $i485: i32;
  var $i486: i1;
  var $i487: i32;
  var $p488: ref;
  var $i489: i32;
  var $i490: i1;
  var $p491: ref;
  var $i492: i32;
  var $i493: i1;
  var $i170: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_8: i32;
  var vslice_dummy_var_9: i32;
  var vslice_dummy_var_10: i32;
  var vslice_dummy_var_11: i32;
  var vslice_dummy_var_12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p2 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p3 := interface_to_usbdev($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    call {:si_unique_call 3} {:cexpr "ifnum"} boogie_si_record_i32($i9);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(2, 1)));
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i13 := 65535;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(32, 1));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} vslice_dummy_var_8 := printk.ref.ref.i32.i32.i32.i32(.str, .str.1, $i9, $i48, $i50, $i13);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i13, 65535);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(16, 1));
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i57 := $ult.i32(0, $i56);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p58, $i59, $i60 := $0.ref, $sub.i32(0, 1), 0;
    assume {:branchcond $i57} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i193 := $eq.i32($i59, $sub.i32(0, 1));
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i193} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $p194 := kzalloc(9624, 208);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p195 := $bitcast.ref.ref($p194);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i196 := $p2i.ref.i64($p195);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i197 := $eq.i64($i196, 0);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p195, $mul.ref(0, 9640)), $mul.ref(9614, 1));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p199 := $bitcast.ref.ref($p198);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} vslice_dummy_var_10 := snprintf.ref.i64.ref.ref($p199, 19, .str.3, .str.4);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p58, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p202 := $load.ref($M.0, $p201);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i203 := $sext.i32.i64($i59);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($p58, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i207 := $load.i8($M.0, $p206);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i208 := $zext.i8.i32($i207);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i209 := $sgt.i32($i208, 0);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i210, $i211 := 16, 64;
    assume {:branchcond $i209} true;
    goto $bb102, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i209 == 1);
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p195, $mul.ref(0, 9640)), $mul.ref(5136, 1));
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p333, $p3);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p195, $mul.ref(0, 9640)), $mul.ref(5152, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p334, $i9);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p195, $mul.ref(0, 9640)), $mul.ref(5156, 1));
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p335, $i60);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(7, 1));
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i338 := $load.i8($M.0, $p337);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i339 := $zext.i8.i32($i338);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p195, $mul.ref(0, 9640)), $mul.ref(9440, 1));
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p340, $i339);
    $i341 := $add.i64($i203, 16);
    $p342 := $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref($i341, 4));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i343 := $load.i32($M.1, $p342);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p195, $mul.ref(0, 9640)), $mul.ref(5160, 1));
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p344, $i343);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p195, $mul.ref(0, 9640)), $mul.ref(5164, 1));
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p345, $i13);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p195, $mul.ref(0, 9640)), $mul.ref(5168, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p346, $i211);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p195, $mul.ref(0, 9640)), $mul.ref(5172, 1));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p347, $i210);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p195, $mul.ref(0, 9640)), $mul.ref(5136, 1));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p349 := $load.ref($M.0, $p348);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $i350 := __create_pipe($p349, 0);
    call {:si_unique_call 37} {:cexpr "tmp___6"} boogie_si_record_i32($i350);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i351 := $or.i32($i350, $sub.i32(0, 2147483520));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($p195, $mul.ref(0, 9640)), $mul.ref(9444, 1));
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p352, $i351);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($p195, $mul.ref(0, 9640)), $mul.ref(5136, 1));
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p354 := $load.ref($M.0, $p353);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $i355 := __create_pipe($p354, 0);
    call {:si_unique_call 39} {:cexpr "tmp___7"} boogie_si_record_i32($i355);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i356 := $or.i32($i355, $sub.i32(0, 2147483648));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p195, $mul.ref(0, 9640)), $mul.ref(9448, 1));
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p357, $i356);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i358 := $sext.i32.i64($i13);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref($i358, 32)), $mul.ref(24, 1));
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i361 := $load.i64($M.0, $p360);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p362 := $i2p.i64.ref($i361);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p363 := ldv_usb_alloc_urb_41(0, 208);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p195, $mul.ref(0, 9640)), $mul.ref(9416, 1));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p364, $p363);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p195, $mul.ref(0, 9640)), $mul.ref(9416, 1));
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p366 := $load.ref($M.0, $p365);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i367 := $p2i.ref.i64($p366);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i368 := $eq.i64($i367, 0);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i368} true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i368 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p195, $mul.ref(0, 9640)), $mul.ref(9614, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p374 := $bitcast.ref.ref($p373);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p362, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p376 := $load.ref($M.0, $p375);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i377 := $sext.i32.i64($i59);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref(conf_str, $mul.ref(0, 32)), $mul.ref($i377, 8));
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p379 := $load.ref($M.2, $p378);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} vslice_dummy_var_12 := printk.ref.ref.ref.ref.ref.i32.i32(.str.6, $p374, .str.1, $p376, $p379, $i9, $i60);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2040)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p383 := $load.ref($M.0, $p382);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $i384 := setup_instance($p195, $p383);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 45} {:cexpr "tmp___8"} boogie_si_record_i32($i384);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i385 := $ne.i32($i384, 0);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    assume {:branchcond $i385} true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p195, $mul.ref(0, 9640)), $mul.ref(5144, 1));
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p386, $p0);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($p195, $mul.ref(0, 9640)), $mul.ref(5144, 1));
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p388 := $load.ref($M.0, $p387);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p389 := $bitcast.ref.ref($p195);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} usb_set_intfdata($p388, $p389);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i54 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $r := $i54;
    return;

  $bb145:
    assume $i385 == 1;
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32(0, 5);
    goto $bb18;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb142:
    assume $i368 == 1;
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p362, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p370 := $load.ref($M.0, $p369);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} vslice_dummy_var_11 := printk.ref.ref(.str.5, $p370);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p372 := $bitcast.ref.ref($p195);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} kfree($p372);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32(0, 12);
    goto $bb18;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb102:
    assume $i209 == 1;
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i212, $i213, $p214, $i215 := 64, 16, $p202, 0;
    goto $bb105;

  $bb105:
    call $p217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $p227, $p228, $i229, $i230, $i232, $i233, $p234, $i235, $i236, $i237, $i238, $p239, $i240, $i241, $p242, $p247, $i248, $i249, $i250, $i251, $i252, $i253, $p255, $i256, $i257, $i258, $i259, $p260, $p261, $p263, $i264, $i265, $i269, $i270, $p272, $i273, $i274, $i275, $i276, $p277, $p279, $i280, $i281, $i282, $i283, $p284, $p285, $p287, $i288, $i289, $i290, $i291, $p293, $i294, $i295, $i296, $i297, $p298, $p300, $i301, $i302, $i303, $p304, $p305, $p307, $i308, $i309, $p310, $p266, $i267, $i268, $p311, $i312, $i313, $i314, $p315, $p316, $p318, $i319, $i320, $p321, $p323, $i324, $p325, $p326, $p243, $i244, $i245, $i327, $i328, $i329, $i330, $i212, $i213, $p214, $i215, $i331, $i332 := hfcsusb_probe_loop_$bb105($p3, $p194, $p195, $i203, $p206, $p217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $p227, $p228, $i229, $i230, $i232, $i233, $p234, $i235, $i236, $i237, $i238, $p239, $i240, $i241, $p242, $p247, $i248, $i249, $i250, $i251, $i252, $i253, $p255, $i256, $i257, $i258, $i259, $p260, $p261, $p263, $i264, $i265, $i269, $i270, $p272, $i273, $i274, $i275, $i276, $p277, $p279, $i280, $i281, $i282, $i283, $p284, $p285, $p287, $i288, $i289, $i290, $i291, $p293, $i294, $i295, $i296, $i297, $p298, $p300, $i301, $i302, $i303, $p304, $p305, $p307, $i308, $i309, $p310, $p266, $i267, $i268, $p311, $i312, $i313, $i314, $p315, $p316, $p318, $i319, $i320, $p321, $p323, $i324, $p325, $p326, $p243, $i244, $i245, $i327, $i328, $i329, $i330, $i212, $i213, $p214, $i215, $i331, $i332);
    goto $bb105_last;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p214, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i218 := $load.i8($M.0, $p217);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i219 := $zext.i8.i32($i218);
    call {:si_unique_call 19} {:cexpr "ep_addr"} boogie_si_record_i32($i219);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i220 := $and.i32($i219, 127);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i221 := $add.i32($i220, $sub.i32(0, 1));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i222 := $mul.i32($i221, 2);
    call {:si_unique_call 20} {:cexpr "idx"} boogie_si_record_i32($i222);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i223 := $and.i32($i219, 128);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i224 := $ne.i32($i223, 0);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    $i226 := $i222;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p195, $mul.ref(0, 9640)), $mul.ref(5176, 1));
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p228 := $bitcast.ref.ref($p227);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i229 := $sext.i32.i64($i226);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i230 := $and.i64($i229, 7);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i232 := $sext.i32.i64($i226);
    $i233 := $add.i64($i203, $i232);
    $p234 := $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref($i233, 4));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i235 := $load.i32($M.1, $p234);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i236 := $eq.i32($i235, 2);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb112;

  $bb112:
    assume !($i236 == 1);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i237 := $sext.i32.i64($i226);
    $i238 := $add.i64($i203, $i237);
    $p239 := $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref($i238, 4));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i240 := $load.i32($M.1, $p239);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i241 := $eq.i32($i240, 1);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($p214, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i248 := $load.i8($M.0, $p247);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i249 := $zext.i8.i32($i248);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $i250 := $slt.i32($i249, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    $i251 := $slt.i32($i249, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    $i252 := $eq.i32($i249, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    assume !($i252 == 1);
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p228, $mul.ref($i230, 512)), $mul.ref(16, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p310, 0);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $p266, $i267, $i268 := $p214, $i213, $i212;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p228, $mul.ref($i230, 512)), $mul.ref(16, 1));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i312 := $load.i32($M.0, $p311);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i313 := $ne.i32($i312, 0);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($p266, $mul.ref(1, 72));
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p243, $i244, $i245 := $p326, $i267, $i268;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i327 := $add.i32($i215, 1);
    call {:si_unique_call 22} {:cexpr "i"} boogie_si_record_i32($i327);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i328 := $load.i8($M.0, $p206);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i329 := $zext.i8.i32($i328);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i330 := $sgt.i32($i329, $i327);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i331, $i332 := $i244, $i245;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i210, $i211 := $i331, $i332;
    goto $bb104;

  $bb139:
    assume $i330 == 1;
    assume {:verifier.code 0} true;
    $i212, $i213, $p214, $i215 := $i245, $i244, $p243, $i327;
    goto $bb139_dummy;

  $bb136:
    assume $i313 == 1;
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i314 := $and.i32($i226, 7);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p228, $mul.ref($i230, 512)), $mul.ref(0, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p315, $i314);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p228, $mul.ref($i230, 512)), $mul.ref(8, 1));
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p316, $p194);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($add.ref($p266, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i319 := $load.i16($M.0, $p318);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i320 := $trunc.i16.i8($i319);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p228, $mul.ref($i230, 512)), $mul.ref(20, 1));
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p321, $i320);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($add.ref($p266, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i324 := $load.i8($M.0, $p323);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p228, $mul.ref($i230, 512)), $mul.ref(28, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p325, $i324);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb122:
    assume $i252 == 1;
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($add.ref($p214, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i256 := $load.i8($M.0, $p255);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i257 := $zext.i8.i32($i256);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $i258 := __create_pipe($p3, $i257);
    call {:si_unique_call 24} {:cexpr "tmp___1"} boogie_si_record_i32($i258);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i259 := $or.i32($i258, 1073741952);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p228, $mul.ref($i230, 512)), $mul.ref(16, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p260, $i259);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p228, $mul.ref($i230, 512)), $mul.ref(172, 1));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p261, 0);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($add.ref($p214, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i264 := $load.i16($M.0, $p263);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i265 := $zext.i16.i32($i264);
    call {:si_unique_call 25} {:cexpr "packet_size"} boogie_si_record_i32($i265);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p266, $i267, $i268 := $p214, $i213, $i265;
    goto $bb127;

  $bb120:
    assume $i251 == 1;
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i269 := $and.i32($i219, 128);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i270 := $ne.i32($i269, 0);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i270 == 1);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($add.ref($p214, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i280 := $load.i8($M.0, $p279);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i281 := $zext.i8.i32($i280);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $i282 := __create_pipe($p3, $i281);
    call {:si_unique_call 29} {:cexpr "tmp___3"} boogie_si_record_i32($i282);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i283 := $or.i32($i282, $sub.i32(0, 1073741824));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p228, $mul.ref($i230, 512)), $mul.ref(16, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p284, $i283);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p228, $mul.ref($i230, 512)), $mul.ref(172, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p285, 1);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($add.ref($p214, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i288 := $load.i16($M.0, $p287);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i289 := $zext.i16.i32($i288);
    call {:si_unique_call 30} {:cexpr "packet_size"} boogie_si_record_i32($i289);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p266, $i267, $i268 := $p214, $i213, $i289;
    goto $bb127;

  $bb128:
    assume $i270 == 1;
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($add.ref($p214, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i273 := $load.i8($M.0, $p272);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i274 := $zext.i8.i32($i273);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $i275 := __create_pipe($p3, $i274);
    call {:si_unique_call 27} {:cexpr "tmp___2"} boogie_si_record_i32($i275);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i276 := $or.i32($i275, $sub.i32(0, 1073741696));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p228, $mul.ref($i230, 512)), $mul.ref(16, 1));
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p277, $i276);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb118:
    assume $i250 == 1;
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i249, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    assume !($i253 == 1);
    goto $bb124;

  $bb125:
    assume $i253 == 1;
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i290 := $and.i32($i219, 128);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i291 := $ne.i32($i290, 0);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i291 == 1);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($add.ref($p214, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i301 := $load.i8($M.0, $p300);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i302 := $zext.i8.i32($i301);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $i303 := __create_pipe($p3, $i302);
    call {:si_unique_call 34} {:cexpr "tmp___5"} boogie_si_record_i32($i303);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p228, $mul.ref($i230, 512)), $mul.ref(16, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p304, $i303);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p228, $mul.ref($i230, 512)), $mul.ref(172, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p305, 2);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($add.ref($p214, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i308 := $load.i16($M.0, $p307);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i309 := $zext.i16.i32($i308);
    call {:si_unique_call 35} {:cexpr "iso_packet_size"} boogie_si_record_i32($i309);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p266, $i267, $i268 := $p214, $i309, $i212;
    goto $bb127;

  $bb131:
    assume $i291 == 1;
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($add.ref($p214, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i294 := $load.i8($M.0, $p293);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i295 := $zext.i8.i32($i294);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $i296 := __create_pipe($p3, $i295);
    call {:si_unique_call 32} {:cexpr "tmp___4"} boogie_si_record_i32($i296);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i297 := $or.i32($i296, 128);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p228, $mul.ref($i230, 512)), $mul.ref(16, 1));
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p298, $i297);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb113:
    assume {:verifier.code 0} true;
    assume $i241 == 1;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($p214, $mul.ref(1, 72));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p243, $i244, $i245 := $p242, $i213, $i212;
    goto $bb115;

  $bb110:
    assume {:verifier.code 0} true;
    assume $i236 == 1;
    goto $bb111;

  $bb107:
    assume $i224 == 1;
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i225 := $add.i32($i222, 1);
    call {:si_unique_call 21} {:cexpr "idx"} boogie_si_record_i32($i225);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i226 := $i225;
    goto $bb109;

  $bb99:
    assume $i197 == 1;
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32(0, 12);
    goto $bb18;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb96:
    assume $i193 == 1;
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32(0, 5);
    goto $bb18;

  $bb20:
    assume $i57 == 1;
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i61, $i62, $p63, $i64 := 0, $sub.i32(0, 1), $0.ref, 0;
    goto $bb23;

  $bb23:
    call $p65, $p66, $i67, $p68, $p70, $i71, $i72, $i73, $i74, $i82, $p83, $p84, $p85, $i86, $p87, $p88, $p89, $p90, $p92, $i93, $i94, $i95, $p101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $p112, $i113, $i114, $i115, $p116, $i117, $i118, $i119, $p120, $i121, $i122, $i123, $i124, $i125, $p126, $i127, $i128, $i129, $p130, $i131, $i132, $p133, $i134, $i135, $i136, $p137, $i138, $i139, $p140, $i141, $i142, $i143, $p144, $i145, $p147, $i148, $i149, $i150, $p151, $i152, $i153, $i154, $i155, $p156, $i157, $i158, $i159, $i160, $p97, $i98, $i99, $i161, $i96, $p162, $i163, $i164, $p165, $i166, $i167, $i168, $i169, $i171, $p172, $i173, $i174, $p175, $i176, $i177, $i178, $i179, $p181, $i182, $i183, $i78, $i79, $p80, $i81, $p184, $i185, $i186, $p75, $i76, $i77, $i187, $i188, $i189, $i61, $i62, $p63, $i64, $p190, $i191, $i192, $p390, $i391, $i392, $p393, $i394, $i395, $i396, $p397, $i398, $i399, $p400, $i401, $i402, $i403, $p404, $i405, $i406, $p407, $i408, $i409, $i410, $p411, $i412, $i413, $p414, $i415, $i416, $i417, $p418, $i419, $i420, $p421, $i422, $i423, $i424, $p425, $i426, $i427, $p428, $i429, $i430, $i431, $p432, $i433, $i434, $p435, $i436, $i437, $i438, $p439, $i440, $i441, $p442, $i443, $i444, $i445, $p446, $i447, $i448, $p449, $i450, $i451, $i452, $p453, $i454, $i455, $p456, $i457, $i458, $i459, $p460, $i461, $i462, $p463, $i464, $i465, $i466, $p467, $i468, $i469, $p470, $i471, $i472, $i473, $p474, $i475, $i476, $p477, $i478, $i479, $i480, $p481, $i482, $i483, $p484, $i485, $i486, $i487, $p488, $i489, $i490, $p491, $i492, $i493, $i170, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5 := hfcsusb_probe_loop_$bb23($p0, $p2, $p55, $p65, $p66, $i67, $p68, $p70, $i71, $i72, $i73, $i74, $i82, $p83, $p84, $p85, $i86, $p87, $p88, $p89, $p90, $p92, $i93, $i94, $i95, $p101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $p112, $i113, $i114, $i115, $p116, $i117, $i118, $i119, $p120, $i121, $i122, $i123, $i124, $i125, $p126, $i127, $i128, $i129, $p130, $i131, $i132, $p133, $i134, $i135, $i136, $p137, $i138, $i139, $p140, $i141, $i142, $i143, $p144, $i145, $p147, $i148, $i149, $i150, $p151, $i152, $i153, $i154, $i155, $p156, $i157, $i158, $i159, $i160, $p97, $i98, $i99, $i161, $i96, $p162, $i163, $i164, $p165, $i166, $i167, $i168, $i169, $i171, $p172, $i173, $i174, $p175, $i176, $i177, $i178, $i179, $p181, $i182, $i183, $i78, $i79, $p80, $i81, $p184, $i185, $i186, $p75, $i76, $i77, $i187, $i188, $i189, $i61, $i62, $p63, $i64, $p190, $i191, $i192, $p390, $i391, $i392, $p393, $i394, $i395, $i396, $p397, $i398, $i399, $p400, $i401, $i402, $i403, $p404, $i405, $i406, $p407, $i408, $i409, $i410, $p411, $i412, $i413, $p414, $i415, $i416, $i417, $p418, $i419, $i420, $p421, $i422, $i423, $i424, $p425, $i426, $i427, $p428, $i429, $i430, $i431, $p432, $i433, $i434, $p435, $i436, $i437, $i438, $p439, $i440, $i441, $p442, $i443, $i444, $i445, $p446, $i447, $i448, $p449, $i450, $i451, $i452, $p453, $i454, $i455, $p456, $i457, $i458, $i459, $p460, $i461, $i462, $p463, $i464, $i465, $i466, $p467, $i468, $i469, $p470, $i471, $i472, $i473, $p474, $i475, $i476, $p477, $i478, $i479, $i480, $p481, $i482, $i483, $p484, $i485, $i486, $i487, $p488, $i489, $i490, $p491, $i492, $i493, $i170, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5);
    goto $bb23_last;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(0, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i64);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p66, $mul.ref($i67, 40));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p66, $mul.ref($i67, 40)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    call {:si_unique_call 7} {:cexpr "probe_alt_setting"} boogie_si_record_i32($i72);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.1, validconf);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p75, $i76, $i77 := $p63, $i62, $i61;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i187 := $add.i32($i64, 1);
    call {:si_unique_call 16} {:cexpr "alt_idx"} boogie_si_record_i32($i187);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i188 := $load.i32($M.0, $p55);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i189 := $ult.i32($i187, $i188);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p190, $i191, $i192 := $p75, $i76, $i77;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p58, $i59, $i60 := $p190, $i191, $i192;
    goto $bb22;

  $bb93:
    assume $i189 == 1;
    assume {:verifier.code 0} true;
    $i61, $i62, $p63, $i64 := $i77, $i76, $p75, $i187;
    goto $bb93_dummy;

  $bb25:
    assume $i74 == 1;
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i78, $i79, $p80, $i81 := $i61, $i62, $p63, 0;
    goto $bb28;

  $bb28:
    call $i82, $p83, $p84, $p85, $i86, $p87, $p88, $p89, $p90, $p92, $i93, $i94, $i95, $p101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $p112, $i113, $i114, $i115, $p116, $i117, $i118, $i119, $p120, $i121, $i122, $i123, $i124, $i125, $p126, $i127, $i128, $i129, $p130, $i131, $i132, $p133, $i134, $i135, $i136, $p137, $i138, $i139, $p140, $i141, $i142, $i143, $p144, $i145, $p147, $i148, $i149, $i150, $p151, $i152, $i153, $i154, $i155, $p156, $i157, $i158, $i159, $i160, $p97, $i98, $i99, $i161, $i96, $p162, $i163, $i164, $p165, $i166, $i167, $i168, $i169, $i171, $p172, $i173, $i174, $p175, $i176, $i177, $i178, $i179, $p181, $i182, $i183, $i78, $i79, $p80, $i81, $p184, $i185, $i186, $p390, $i391, $i392, $p393, $i394, $i395, $i396, $p397, $i398, $i399, $p400, $i401, $i402, $i403, $p404, $i405, $i406, $p407, $i408, $i409, $i410, $p411, $i412, $i413, $p414, $i415, $i416, $i417, $p418, $i419, $i420, $p421, $i422, $i423, $i424, $p425, $i426, $i427, $p428, $i429, $i430, $i431, $p432, $i433, $i434, $p435, $i436, $i437, $i438, $p439, $i440, $i441, $p442, $i443, $i444, $i445, $p446, $i447, $i448, $p449, $i450, $i451, $i452, $p453, $i454, $i455, $p456, $i457, $i458, $i459, $p460, $i461, $i462, $p463, $i464, $i465, $i466, $p467, $i468, $i469, $p470, $i471, $i472, $i473, $p474, $i475, $i476, $p477, $i478, $i479, $i480, $p481, $i482, $i483, $p484, $i485, $i486, $i487, $p488, $i489, $i490, $p491, $i492, $i493, $i170, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5 := hfcsusb_probe_loop_$bb28($p2, $p66, $i67, $p68, $i72, $i82, $p83, $p84, $p85, $i86, $p87, $p88, $p89, $p90, $p92, $i93, $i94, $i95, $p101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $p112, $i113, $i114, $i115, $p116, $i117, $i118, $i119, $p120, $i121, $i122, $i123, $i124, $i125, $p126, $i127, $i128, $i129, $p130, $i131, $i132, $p133, $i134, $i135, $i136, $p137, $i138, $i139, $p140, $i141, $i142, $i143, $p144, $i145, $p147, $i148, $i149, $i150, $p151, $i152, $i153, $i154, $i155, $p156, $i157, $i158, $i159, $i160, $p97, $i98, $i99, $i161, $i96, $p162, $i163, $i164, $p165, $i166, $i167, $i168, $i169, $i171, $p172, $i173, $i174, $p175, $i176, $i177, $i178, $i179, $p181, $i182, $i183, $i78, $i79, $p80, $i81, $p184, $i185, $i186, $p390, $i391, $i392, $p393, $i394, $i395, $i396, $p397, $i398, $i399, $p400, $i401, $i402, $i403, $p404, $i405, $i406, $p407, $i408, $i409, $i410, $p411, $i412, $i413, $p414, $i415, $i416, $i417, $p418, $i419, $i420, $p421, $i422, $i423, $i424, $p425, $i426, $i427, $p428, $i429, $i430, $i431, $p432, $i433, $i434, $p435, $i436, $i437, $i438, $p439, $i440, $i441, $p442, $i443, $i444, $i445, $p446, $i447, $i448, $p449, $i450, $i451, $i452, $p453, $i454, $i455, $p456, $i457, $i458, $i459, $p460, $i461, $i462, $p463, $i464, $i465, $i466, $p467, $i468, $i469, $p470, $i471, $i472, $i473, $p474, $i475, $i476, $p477, $i478, $i479, $i480, $p481, $i482, $i483, $p484, $i485, $i486, $i487, $p488, $i489, $i490, $p491, $i492, $i493, $i170, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5);
    goto $bb28_last;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i81);
    $p83 := $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref($i82, 4));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p66, $mul.ref($i67, 40)), $mul.ref(24, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i86 := $ugt.i64(64, 63);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i86 == 1);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p2);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p83);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.1;
    cmdloc_dummy_var_4 := $M.1;
    call {:si_unique_call 9} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p89, $p90, 64, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_5;
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p66, $mul.ref($i67, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.0, $p92);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i95 := $sgt.i32($i94, 0);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i96 := 1;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 4));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.1, $p162);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i164 := $ne.i32($i163, 2);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i164 == 1);
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i168 := $i96;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(1, 4));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i391 := $load.i32($M.1, $p390);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i392 := $ne.i32($i391, 2);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    assume !($i392 == 1);
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $i396 := $i168;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(2, 4));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i398 := $load.i32($M.1, $p397);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i399 := $ne.i32($i398, 2);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    assume !($i399 == 1);
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $i403 := $i396;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(3, 4));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i405 := $load.i32($M.1, $p404);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i406 := $ne.i32($i405, 2);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    assume !($i406 == 1);
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $i410 := $i403;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(4, 4));
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i412 := $load.i32($M.1, $p411);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i413 := $ne.i32($i412, 2);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    assume !($i413 == 1);
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $i417 := $i410;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(5, 4));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i419 := $load.i32($M.1, $p418);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i420 := $ne.i32($i419, 2);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    assume !($i420 == 1);
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $i424 := $i417;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(6, 4));
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i426 := $load.i32($M.1, $p425);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i427 := $ne.i32($i426, 2);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    assume !($i427 == 1);
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $i431 := $i424;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(7, 4));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i433 := $load.i32($M.1, $p432);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i434 := $ne.i32($i433, 2);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    assume !($i434 == 1);
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $i438 := $i431;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 4));
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i440 := $load.i32($M.1, $p439);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i441 := $ne.i32($i440, 2);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    assume !($i441 == 1);
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $i445 := $i438;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(9, 4));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i447 := $load.i32($M.1, $p446);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i448 := $ne.i32($i447, 2);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    assume !($i448 == 1);
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $i452 := $i445;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(10, 4));
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i454 := $load.i32($M.1, $p453);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i455 := $ne.i32($i454, 2);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    assume !($i455 == 1);
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $i459 := $i452;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(11, 4));
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i461 := $load.i32($M.1, $p460);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i462 := $ne.i32($i461, 2);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    assume !($i462 == 1);
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $i466 := $i459;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 4));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i468 := $load.i32($M.1, $p467);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i469 := $ne.i32($i468, 2);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    assume !($i469 == 1);
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $i473 := $i466;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(13, 4));
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i475 := $load.i32($M.1, $p474);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i476 := $ne.i32($i475, 2);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    assume !($i476 == 1);
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $i480 := $i473;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(14, 4));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i482 := $load.i32($M.1, $p481);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i483 := $ne.i32($i482, 2);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    assume !($i483 == 1);
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $i487 := $i480;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(15, 4));
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i489 := $load.i32($M.1, $p488);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i490 := $ne.i32($i489, 2);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    assume !($i490 == 1);
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    $i170 := $i487;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i169 := $ne.i32($i170, 0);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    $p175, $i176, $i177 := $p80, $i79, $i78;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i178 := $add.i32($i81, 1);
    call {:si_unique_call 15} {:cexpr "cfg_used"} boogie_si_record_i32($i178);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i179 := $sext.i32.i64($i178);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref($i179, 76)), $mul.ref(0, 4));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i182 := $load.i32($M.1, $p181);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i183 := $ne.i32($i182, 0);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p184, $i185, $i186 := $p175, $i176, $i177;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p75, $i76, $i77 := $p184, $i185, $i186;
    goto $bb27;

  $bb90:
    assume $i183 == 1;
    assume {:verifier.code 0} true;
    $i78, $i79, $p80, $i81 := $i177, $i176, $p175, $i178;
    goto $bb90_dummy;

  $bb84:
    assume $i169 == 1;
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i171 := $slt.i32($i79, $i81);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    $p172, $i173, $i174 := $p80, $i79, $i78;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p175, $i176, $i177 := $p172, $i173, $i174;
    goto $bb89;

  $bb86:
    assume $i171 == 1;
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p172, $i173, $i174 := $p68, $i81, $i72;
    goto $bb88;

  $bb246:
    assume $i490 == 1;
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(15, 4));
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i492 := $load.i32($M.1, $p491);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i493 := $ne.i32($i492, 1);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    assume !($i493 == 1);
    goto $bb248;

  $bb249:
    assume $i493 == 1;
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i170 := 0;
    goto $bb251;

  $bb239:
    assume $i483 == 1;
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(14, 4));
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i485 := $load.i32($M.1, $p484);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i486 := $ne.i32($i485, 1);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    assume !($i486 == 1);
    goto $bb241;

  $bb242:
    assume $i486 == 1;
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i487 := 0;
    goto $bb244;

  $bb232:
    assume $i476 == 1;
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(13, 4));
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i478 := $load.i32($M.1, $p477);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i479 := $ne.i32($i478, 1);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    assume !($i479 == 1);
    goto $bb234;

  $bb235:
    assume $i479 == 1;
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i480 := 0;
    goto $bb237;

  $bb225:
    assume $i469 == 1;
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 4));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i471 := $load.i32($M.1, $p470);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i472 := $ne.i32($i471, 1);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    assume !($i472 == 1);
    goto $bb227;

  $bb228:
    assume $i472 == 1;
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i473 := 0;
    goto $bb230;

  $bb218:
    assume $i462 == 1;
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(11, 4));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i464 := $load.i32($M.1, $p463);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i465 := $ne.i32($i464, 1);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    assume !($i465 == 1);
    goto $bb220;

  $bb221:
    assume $i465 == 1;
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i466 := 0;
    goto $bb223;

  $bb211:
    assume $i455 == 1;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(10, 4));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i457 := $load.i32($M.1, $p456);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i458 := $ne.i32($i457, 1);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    assume !($i458 == 1);
    goto $bb213;

  $bb214:
    assume $i458 == 1;
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $i459 := 0;
    goto $bb216;

  $bb204:
    assume $i448 == 1;
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(9, 4));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i450 := $load.i32($M.1, $p449);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i451 := $ne.i32($i450, 1);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    assume !($i451 == 1);
    goto $bb206;

  $bb207:
    assume $i451 == 1;
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i452 := 0;
    goto $bb209;

  $bb197:
    assume $i441 == 1;
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 4));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i443 := $load.i32($M.1, $p442);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i444 := $ne.i32($i443, 1);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    assume !($i444 == 1);
    goto $bb199;

  $bb200:
    assume $i444 == 1;
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i445 := 0;
    goto $bb202;

  $bb190:
    assume $i434 == 1;
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(7, 4));
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i436 := $load.i32($M.1, $p435);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i437 := $ne.i32($i436, 1);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    assume !($i437 == 1);
    goto $bb192;

  $bb193:
    assume $i437 == 1;
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i438 := 0;
    goto $bb195;

  $bb183:
    assume $i427 == 1;
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(6, 4));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i429 := $load.i32($M.1, $p428);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i430 := $ne.i32($i429, 1);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    assume !($i430 == 1);
    goto $bb185;

  $bb186:
    assume $i430 == 1;
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i431 := 0;
    goto $bb188;

  $bb176:
    assume $i420 == 1;
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(5, 4));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i422 := $load.i32($M.1, $p421);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i423 := $ne.i32($i422, 1);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    assume !($i423 == 1);
    goto $bb178;

  $bb179:
    assume $i423 == 1;
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i424 := 0;
    goto $bb181;

  $bb169:
    assume $i413 == 1;
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(4, 4));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i415 := $load.i32($M.1, $p414);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i416 := $ne.i32($i415, 1);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    assume !($i416 == 1);
    goto $bb171;

  $bb172:
    assume $i416 == 1;
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i417 := 0;
    goto $bb174;

  $bb162:
    assume $i406 == 1;
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(3, 4));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i408 := $load.i32($M.1, $p407);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i409 := $ne.i32($i408, 1);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    assume !($i409 == 1);
    goto $bb164;

  $bb165:
    assume $i409 == 1;
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i410 := 0;
    goto $bb167;

  $bb155:
    assume $i399 == 1;
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(2, 4));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i401 := $load.i32($M.1, $p400);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i402 := $ne.i32($i401, 1);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    assume !($i402 == 1);
    goto $bb157;

  $bb158:
    assume $i402 == 1;
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i403 := 0;
    goto $bb160;

  $bb148:
    assume $i392 == 1;
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(1, 4));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i394 := $load.i32($M.1, $p393);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i395 := $ne.i32($i394, 1);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    assume !($i395 == 1);
    goto $bb150;

  $bb151:
    assume $i395 == 1;
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i396 := 0;
    goto $bb153;

  $bb76:
    assume $i164 == 1;
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 4));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.1, $p165);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i166, 1);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i167 == 1);
    goto $bb78;

  $bb79:
    assume $i167 == 1;
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i168 := 0;
    goto $bb81;

  $bb33:
    assume $i95 == 1;
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p97, $i98, $i99 := $p85, 1, 0;
    goto $bb36;

  $bb36:
    call $p101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $p112, $i113, $i114, $i115, $p116, $i117, $i118, $i119, $p120, $i121, $i122, $i123, $i124, $i125, $p126, $i127, $i128, $i129, $p130, $i131, $i132, $p133, $i134, $i135, $i136, $p137, $i138, $i139, $p140, $i141, $i142, $i143, $p144, $i145, $p147, $i148, $i149, $i150, $p151, $i152, $i153, $i154, $i155, $p156, $i157, $i158, $i159, $i160, $p97, $i98, $i99, $i161 := hfcsusb_probe_loop_$bb36($p2, $i82, $p92, $p101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $p112, $i113, $i114, $i115, $p116, $i117, $i118, $i119, $p120, $i121, $i122, $i123, $i124, $i125, $p126, $i127, $i128, $i129, $p130, $i131, $i132, $p133, $i134, $i135, $i136, $p137, $i138, $i139, $p140, $i141, $i142, $i143, $p144, $i145, $p147, $i148, $i149, $i150, $p151, $i152, $i153, $i154, $i155, $p156, $i157, $i158, $i159, $i160, $p97, $i98, $i99, $i161);
    goto $bb36_last;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p97, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.0, $p101);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    call {:si_unique_call 10} {:cexpr "ep_addr"} boogie_si_record_i32($i103);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i104 := $and.i32($i103, 127);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i105 := $add.i32($i104, $sub.i32(0, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i106 := $mul.i32($i105, 2);
    call {:si_unique_call 11} {:cexpr "idx"} boogie_si_record_i32($i106);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i107 := $and.i32($i103, 128);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    $i110 := $i106;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p97, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.0, $p112);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i32($i113);
    call {:si_unique_call 13} {:cexpr "attr"} boogie_si_record_i32($i114);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i115 := $sext.i32.i64($i110);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref($i115, 4));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.1, $p116);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 2);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    $i155 := $i98;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($p97, $mul.ref(1, 72));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i157 := $add.i32($i99, 1);
    call {:si_unique_call 14} {:cexpr "i"} boogie_si_record_i32($i157);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i158 := $load.i8($M.0, $p92);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i159 := $zext.i8.i32($i158);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i160 := $sgt.i32($i159, $i157);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i161 := $i155;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i96 := $i161;
    goto $bb35;

  $bb71:
    assume $i160 == 1;
    assume {:verifier.code 0} true;
    $p97, $i98, $i99 := $p156, $i155, $i157;
    goto $bb71_dummy;

  $bb41:
    assume $i118 == 1;
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i110);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref($i119, 4));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.1, $p120);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 1);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    $i123 := $i98;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i114, 3);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i124 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i114, 2);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i131 == 1);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i114, 1);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i138 == 1);
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i114, 3);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i145 == 1);
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i154 := $i123;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i155 := $i154;
    goto $bb70;

  $bb64:
    assume $i145 == 1;
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p97, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i148 := $load.i8($M.0, $p147);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i32($i148);
    $i150 := $add.i64($i82, 17);
    $p151 := $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref($i150, 4));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.1, $p151);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i153 := $slt.i32($i149, $i152);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i153 == 1);
    goto $bb66;

  $bb67:
    assume $i153 == 1;
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i154 := 0;
    goto $bb69;

  $bb58:
    assume $i138 == 1;
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i139 := $sext.i32.i64($i110);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref($i139, 4));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.1, $p140);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 3);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i142 == 1);
    goto $bb60;

  $bb61:
    assume $i142 == 1;
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i143 := $sext.i32.i64($i110);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref($i143, 4));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p144, 1);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb52:
    assume $i131 == 1;
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i132 := $sext.i32.i64($i110);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref($i132, 4));
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.1, $p133);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 4);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i135 == 1);
    goto $bb54;

  $bb55:
    assume $i135 == 1;
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i136 := $sext.i32.i64($i110);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref($i136, 4));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p137, 1);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb46:
    assume $i124 == 1;
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i125 := $sext.i32.i64($i110);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref($i125, 4));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.1, $p126);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 5);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i128 == 1);
    goto $bb48;

  $bb49:
    assume $i128 == 1;
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i129 := $sext.i32.i64($i110);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref($i129, 4));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p130, 1);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb43:
    assume $i122 == 1;
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i123 := 0;
    goto $bb45;

  $bb38:
    assume $i108 == 1;
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i109 := $add.i32($i106, 1);
    call {:si_unique_call 12} {:cexpr "idx"} boogie_si_record_i32($i109);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i110 := $i109;
    goto $bb40;

  $bb30:
    assume $i86 == 1;
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p2);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p83);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.1;
    cmdloc_dummy_var_1 := $M.1;
    call {:si_unique_call 8} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p87, $p88, 64, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_2;
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb16:
    assume $i52 == 1;
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} vslice_dummy_var_9 := printk.ref.ref(.str.2, .str.1);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32(0, 5);
    goto $bb18;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i14, $i15 := 0, 65535;
    goto $bb4;

  $bb4:
    call $p17, $i18, $i19, $i20, $p22, $i23, $i24, $i25, $p27, $i28, $i29, $i30, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $p40, $i41, $i42, $i43, $i14, $i15, $i44 := hfcsusb_probe_loop_$bb4($p3, $p17, $i18, $i19, $i20, $p22, $i23, $i24, $i25, $p27, $i28, $i29, $i30, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $p40, $i41, $i42, $i43, $i14, $i15, $i44);
    goto $bb4_last;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(8, 1));
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i14);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref($i20, 32)), $mul.ref(2, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i19, $i24);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i36 := $i15;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i14, 1);
    call {:si_unique_call 4} {:cexpr "i"} boogie_si_record_i32($i37);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref($i38, 32)), $mul.ref(2, 1));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i44 := $i36;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i13 := $i44;
    goto $bb3;

  $bb13:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i14, $i15 := $i37, $i36;
    goto $bb13_dummy;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(10, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i14);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref($i30, 32)), $mul.ref(4, 1));
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i29, $i34);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb8;

  $bb9:
    assume $i35 == 1;
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i36 := $i14;
    goto $bb11;

  $bb139_dummy:
    assume false;
    return;

  $bb105_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_261;

  $bb71_dummy:
    assume false;
    return;

  $bb36_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_103;

  $bb90_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_80;

  $bb93_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_66;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14;
}



const hfcsusb_disconnect: ref;

axiom hfcsusb_disconnect == $sub.ref(0, 211815);

procedure hfcsusb_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.5, assertsPassed;



implementation hfcsusb_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i18: i32;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i16: i32;
  var $p17: ref;
  var $i26: i32;
  var $i15: i32;
  var $i27: i1;
  var vslice_dummy_var_13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 9640)), $mul.ref(9614, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} vslice_dummy_var_13 := printk.ref.ref(.str.154, $p4);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} handle_led($p2, 2);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} release_hw($p2);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, HFClist);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 9640)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 9640)), $mul.ref(0, 1));
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, $p2i.ref.i64(HFClist));
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i15 := 0;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i15, 0);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} usb_set_intfdata($p0, $0.ref);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 52} {:cexpr "hfcsusb_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i16, $p17 := 0, $p10;
    goto $bb4;

  $bb4:
    call $i18, $p20, $p21, $p23, $i24, $i25, $i16, $p17, $i26 := hfcsusb_disconnect_loop_$bb4($i18, $p20, $p21, $p23, $i24, $i25, $i16, $p17, $i26);
    goto $bb4_last;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i16, 1);
    call {:si_unique_call 51} {:cexpr "cnt"} boogie_si_record_i32($i18);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 9640)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p17, $mul.ref(0, 9640)), $mul.ref(0, 1));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, $p2i.ref.i64(HFClist));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i26 := $i18;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i15 := $i26;
    goto $bb3;

  $bb6:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i16, $p17 := $i18, $p21;
    goto $bb6_dummy;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_677;
}



const usb_get_intfdata: ref;

axiom usb_get_intfdata == $sub.ref(0, 212847);

procedure usb_get_intfdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intfdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 213879);

procedure printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 1} true;
    call {:si_unique_call 55} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 56} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 1} true;
    call {:si_unique_call 57} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 58} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32);



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 1} true;
    call {:si_unique_call 59} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 60} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32.ref($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: ref) returns ($r: i32);



procedure printk.ref.ref.ref.i32.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: ref, p.5: i32) returns ($r: i32);



procedure printk.ref.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: ref) returns ($r: i32);



procedure printk.ref($p0: ref) returns ($r: i32);



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);



procedure printk.ref.ref.ref.i32.i32.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: ref, p.6: ref, p.7: ref) returns ($r: i32);



procedure printk.ref.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);



procedure printk.ref.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: i32) returns ($r: i32);



procedure printk.ref.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32);



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);



procedure printk.ref.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);



procedure printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32);



procedure printk.ref.ref.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb18:
    assume {:verifier.code 1} true;
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 1} true;
    call {:si_unique_call 61} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 62} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb19:
    assume {:verifier.code 1} true;
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 1} true;
    call {:si_unique_call 63} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 64} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb20:
    assume {:verifier.code 1} true;
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 1} true;
    call {:si_unique_call 65} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 66} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const handle_led: ref;

axiom handle_led == $sub.ref(0, 214911);

procedure handle_led($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, assertsPassed;



implementation handle_led($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $p26: ref;
  var $i27: i16;
  var $i28: i32;
  var $i29: i16;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i34: i16;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i16;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i16;
  var $p46: ref;
  var $i47: i16;
  var $i48: i32;
  var $i49: i16;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i16;
  var $p56: ref;
  var $i57: i16;
  var $i58: i32;
  var $i59: i16;
  var $p61: ref;
  var $i62: i16;
  var $i63: i32;
  var $i64: i16;
  var $p66: ref;
  var $i67: i16;
  var $i68: i32;
  var $i69: i16;
  var $p71: ref;
  var $i72: i16;
  var $i73: i32;
  var $i74: i16;
  var $p76: ref;
  var $i77: i16;
  var $i78: i32;
  var $i79: i16;
  var $p81: ref;
  var $i82: i16;
  var $i83: i32;
  var $i84: i16;
  var $p86: ref;
  var $i87: i16;
  var $i88: i32;
  var $i89: i16;
  var $p91: ref;
  var $i92: i16;
  var $i93: i32;
  var $i94: i16;
  var $p95: ref;
  var $i96: i8;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $p109: ref;
  var $i110: i8;
  var $i111: i32;
  var $i112: i8;
  var vslice_dummy_var_14: i32;
  var vslice_dummy_var_15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} {:cexpr "handle_led:arg:event"} boogie_si_record_i32($i1);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5164, 1));
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref($i4, 32)), $mul.ref(24, 1));
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9601, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    call {:si_unique_call 68} {:cexpr "tmpled"} boogie_si_record_i8($i14);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i1, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i1, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i1, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i1, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9601, 1));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.0, $p95);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i14);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i97, $i98);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i99 == 1;
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i100 := $M.4;
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i101 := $and.i32($i100, 65536);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9601, 1));
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.0, $p109);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i32($i110);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i32.i8($i111);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} vslice_dummy_var_15 := write_reg($p0, 31, $i112);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i102 == 1;
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9614, 1));
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9601, 1));
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} vslice_dummy_var_14 := printk.ref.ref.ref.i32.i32(.str.38, $p104, .str.39, 31, $i107);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb12:
    assume $i18 == 1;
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(3, 2));
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i92 := $load.i16($M.0, $p91);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i93 := $sext.i16.i32($i92);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i32.i16($i93);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} set_led_bit($p0, $i94, 0);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(3, 2));
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i87 := $load.i16($M.0, $p86);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i88 := $sext.i16.i32($i87);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i16($i88);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} set_led_bit($p0, $i89, 1);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb8:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb14;

  $bb17:
    assume $i20 == 1;
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(2, 2));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i82 := $load.i16($M.0, $p81);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i83 := $sext.i16.i32($i82);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i16($i83);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} set_led_bit($p0, $i84, 0);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb15:
    assume $i19 == 1;
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(2, 2));
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.0, $p76);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i78 := $sext.i16.i32($i77);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i16($i78);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} set_led_bit($p0, $i79, 1);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i22 == 1);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(1, 2));
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i72 := $load.i16($M.0, $p71);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i73 := $sext.i16.i32($i72);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i16($i73);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} set_led_bit($p0, $i74, 0);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb21:
    assume $i22 == 1;
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(1, 2));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i67 := $load.i16($M.0, $p66);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i68 := $sext.i16.i32($i67);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i68);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} set_led_bit($p0, $i69, 1);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(0, 2));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.0, $p46);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i48 := $sext.i16.i32($i47);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i16($i48);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} set_led_bit($p0, $i49, 0);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(1, 2));
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i53 := $sext.i16.i32($i52);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} set_led_bit($p0, $i54, 0);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(2, 2));
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.0, $p56);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i58 := $sext.i16.i32($i57);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i58);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} set_led_bit($p0, $i59, 0);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(3, 2));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.0, $p61);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i63 := $sext.i16.i32($i62);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i63);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} set_led_bit($p0, $i64, 0);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb23:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb14;

  $bb25:
    assume $i24 == 1;
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(0, 2));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.0, $p26);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i28 := $sext.i16.i32($i27);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} set_led_bit($p0, $i29, 1);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(1, 2));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.0, $p31);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i33 := $sext.i16.i32($i32);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} set_led_bit($p0, $i34, 0);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(2, 2));
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i38 := $sext.i16.i32($i37);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} set_led_bit($p0, $i39, 0);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(3, 2));
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i43 := $sext.i16.i32($i42);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} set_led_bit($p0, $i44, 0);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const release_hw: ref;

axiom release_hw == $sub.ref(0, 215943);

procedure release_hw($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5;



implementation release_hw($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var vslice_dummy_var_16: i32;
  var vslice_dummy_var_17: i32;
  var vslice_dummy_var_18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i1 := $M.4;
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 65536);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} hfcsusb_stop_endpoint($p0, 2);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} hfcsusb_stop_endpoint($p0, 0);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} hfcsusb_stop_endpoint($p0, 1);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5176, 1)), $mul.ref(7, 512)), $mul.ref(16, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9602, 1));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} mISDN_unregister_device($p22);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(2072, 1));
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(1, 504));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} mISDN_freebchannel($p25);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(2072, 1));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} mISDN_freebchannel($p27);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(16, 1));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} vslice_dummy_var_18 := mISDN_freedchannel($p28);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9416, 1));
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5144, 1));
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(0, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} list_del($p45);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p0);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} kfree($p46);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i42 == 1;
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5144, 1));
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} usb_set_intfdata($p44, $0.ref);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i33 == 1;
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9416, 1));
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} usb_kill_urb($p35);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9416, 1));
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} usb_free_urb($p37);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9416, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $0.ref);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(16, 1)), $mul.ref(1664, 1));
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} vslice_dummy_var_17 := l1_event($p19, 512);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} hfcsusb_stop_endpoint($p0, 3);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9614, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} vslice_dummy_var_16 := printk.ref.ref.ref(.str.24, $p5, .str.155);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_set_intfdata: ref;

axiom usb_set_intfdata == $sub.ref(0, 216975);

procedure usb_set_intfdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_set_intfdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} dev_set_drvdata($p2, $p1);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 218007);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    return;
}



const hfcsusb_stop_endpoint: ref;

axiom hfcsusb_stop_endpoint == $sub.ref(0, 219039);

procedure hfcsusb_stop_endpoint($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5;



implementation hfcsusb_stop_endpoint($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i64;
  var $p55: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} {:cexpr "hfcsusb_stop_endpoint:arg:channel"} boogie_si_record_i32($i1);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 0);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i1, 1);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i1, 3);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5160, 1));
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i28 == 1);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5160, 1));
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 1);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5160, 1));
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 4);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i40 == 1);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5160, 1));
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 3);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i1, 3);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb38:
    assume $i50 == 1;
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5176, 1));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i53 := $mul.i32($i1, 2);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i53);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p52, $mul.ref($i54, 512));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} stop_iso_gracefull($p55);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5176, 1));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i46 := $mul.i32($i1, 2);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 1);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p45, $mul.ref($i48, 512));
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} stop_iso_gracefull($p49);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb33;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5176, 1));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i34 := $mul.i32($i1, 2);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 1);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p33, $mul.ref($i36, 512));
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} stop_int_gracefull($p37);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb27;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5176, 1)), $mul.ref(7, 512)), $mul.ref(4, 1));
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb22;

  $bb23:
    assume $i25 == 1;
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5176, 1)), $mul.ref(3, 512)), $mul.ref(4, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb16;

  $bb17:
    assume $i19 == 1;
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5176, 1)), $mul.ref(1, 512)), $mul.ref(4, 1));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5176, 1)), $mul.ref(5, 512)), $mul.ref(4, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const l1_event: ref;

axiom l1_event == $sub.ref(0, 220071);

procedure l1_event($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation l1_event($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 105} {:cexpr "l1_event:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 1} true;
    call {:si_unique_call 106} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 107} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mISDN_unregister_device: ref;

axiom mISDN_unregister_device == $sub.ref(0, 221103);

procedure mISDN_unregister_device($p0: ref);
  free requires assertsPassed;



implementation mISDN_unregister_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    return;
}



const mISDN_freebchannel: ref;

axiom mISDN_freebchannel == $sub.ref(0, 222135);

procedure mISDN_freebchannel($p0: ref);
  free requires assertsPassed;



implementation mISDN_freebchannel($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    return;
}



const mISDN_freedchannel: ref;

axiom mISDN_freedchannel == $sub.ref(0, 223167);

procedure mISDN_freedchannel($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mISDN_freedchannel($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 1} true;
    call {:si_unique_call 108} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 109} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 224199);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_urb: ref;

axiom usb_free_urb == $sub.ref(0, 225231);

procedure usb_free_urb($p0: ref);
  free requires assertsPassed;



implementation usb_free_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 226263);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 227295);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} free_($p0);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 228327);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 111} $free($p0);
    return;
}



const stop_int_gracefull: ref;

axiom stop_int_gracefull == $sub.ref(0, 229359);

procedure stop_int_gracefull($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5;



implementation stop_int_gracefull($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i16: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var vslice_dummy_var_19: i32;
  var vslice_dummy_var_20: i64;
  var vslice_dummy_var_21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} ldv_spin_lock();
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i3 := $M.4;
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(508, 1));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 1);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 9640)), $mul.ref(9528, 1));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} spin_unlock_irqrestore($p11, $u0);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(508, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i23 := $M.4;
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(508, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb17;

  $bb18:
    assume $i28 == 1;
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 9640)), $mul.ref(9614, 1));
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} vslice_dummy_var_21 := printk.ref.ref.ref.i32(.str.131, $p30, .str.130, $i32);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i16 := 3;
    goto $bb7;

  $bb7:
    call $i18, $i19, $i20, $i16, $i21, $i22, vslice_dummy_var_20 := stop_int_gracefull_loop_$bb7($p12, $i18, $i19, $i20, $i16, $i21, $i22, vslice_dummy_var_20);
    goto $bb7_last;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i16, 1);
    call {:si_unique_call 115} {:cexpr "timeout"} boogie_si_record_i32($i21);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i16, 0);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} vslice_dummy_var_20 := schedule_timeout_interruptible(0);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p12);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb9:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i16 := $i21;
    goto $bb9_dummy;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 9640)), $mul.ref(9614, 1));
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} vslice_dummy_var_19 := printk.ref.ref.ref.i32(.str.129, $p6, .str.130, $i8);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1050;
}



const stop_iso_gracefull: ref;

axiom stop_iso_gracefull == $sub.ref(0, 230391);

procedure stop_iso_gracefull($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5;



implementation stop_iso_gracefull($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i16: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $p63: ref;
  var $p64: ref;
  var vslice_dummy_var_22: i32;
  var vslice_dummy_var_23: i64;
  var vslice_dummy_var_24: i32;
  var vslice_dummy_var_25: i64;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} ldv_spin_lock();
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i3 := $M.4;
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(508, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 1);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 9640)), $mul.ref(9528, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} spin_unlock_irqrestore($p11, $u0);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} ldv_spin_lock();
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i56 := $M.4;
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(508, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, 1);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 9640)), $mul.ref(9528, 1));
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} spin_unlock_irqrestore($p64, $u0);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(508, 1));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i23 := $M.4;
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(508, 1));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i45 := $M.4;
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    return;

  $bb40:
    assume $i46 == 1;
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(508, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb42;

  $bb43:
    assume $i50 == 1;
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 9640)), $mul.ref(9614, 1));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} vslice_dummy_var_26 := printk.ref.ref.ref.i32.i32(.str.134, $p52, .str.133, $i54, 1);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb29:
    assume $i37 == 1;
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i38 := 3;
    goto $bb32;

  $bb32:
    call $i38, $i39, $i40, $i42, $i43, $i44, vslice_dummy_var_25 := stop_iso_gracefull_loop_$bb32($p34, $i38, $i39, $i40, $i42, $i43, $i44, vslice_dummy_var_25);
    goto $bb32_last;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i38, 1);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i38, 0);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i40 == 1);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb33:
    assume $i40 == 1;
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} vslice_dummy_var_25 := schedule_timeout_interruptible(0);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p34);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i44 == 1);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb37:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i38 := $i39;
    goto $bb37_dummy;

  $bb21:
    assume $i24 == 1;
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(508, 1));
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb23;

  $bb24:
    assume $i28 == 1;
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 9640)), $mul.ref(9614, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} vslice_dummy_var_24 := printk.ref.ref.ref.i32.i32(.str.134, $p30, .str.133, $i32, 0);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i16 := 3;
    goto $bb13;

  $bb13:
    call $i18, $i19, $i20, $i16, $i21, $i22, vslice_dummy_var_23 := stop_iso_gracefull_loop_$bb13($p12, $i18, $i19, $i20, $i16, $i21, $i22, vslice_dummy_var_23);
    goto $bb13_last;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i16, 1);
    call {:si_unique_call 122} {:cexpr "timeout"} boogie_si_record_i32($i21);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i16, 0);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i22 == 1);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume $i22 == 1;
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} vslice_dummy_var_23 := schedule_timeout_interruptible(0);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p12);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i20 == 1);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb15:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i16 := $i21;
    goto $bb15_dummy;

  $bb46:
    assume $i57 == 1;
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 9640)), $mul.ref(9614, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} vslice_dummy_var_27 := printk.ref.ref.ref.i32.i32(.str.132, $p59, .str.133, $i61, 1);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 9640)), $mul.ref(9614, 1));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} vslice_dummy_var_22 := printk.ref.ref.ref.i32.i32(.str.132, $p6, .str.133, $i8, 0);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb37_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1150;

  $bb15_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1112;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 231423);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.5;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 129} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 232455);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.5;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} ldv_spin_unlock();
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} ldv_spin_unlock_irqrestore_8($p0, $i1);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    return;
}



const schedule_timeout_interruptible: ref;

axiom schedule_timeout_interruptible == $sub.ref(0, 233487);

procedure schedule_timeout_interruptible($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout_interruptible($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 133} {:cexpr "schedule_timeout_interruptible:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 1} true;
    call {:si_unique_call 134} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 135} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 234519);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.5;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $M.5 := 0;
    call {:si_unique_call 136} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_8: ref;

axiom ldv_spin_unlock_irqrestore_8 == $sub.ref(0, 235551);

procedure ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} {:cexpr "ldv_spin_unlock_irqrestore_8:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 236583);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    return;
}



const set_led_bit: ref;

axiom set_led_bit == $sub.ref(0, 237615);

procedure set_led_bit($p0: ref, $i1: i16, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation set_led_bit($p0: ref, $i1: i16, $i2: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i8;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i8;
  var $p51: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} {:cexpr "set_led_bit:arg:led_bits"} boogie_si_record_i16($i1);
    call {:si_unique_call 141} {:cexpr "set_led_bit:arg:set_on"} boogie_si_record_i32($i2);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i28 := $sext.i16.i32($i1);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9601, 1));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i45 := $sext.i8.i32($i44);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i16.i8($i1);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i47 := $sext.i8.i32($i46);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i48 := $xor.i32($i47, $sub.i32(0, 1));
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i45, $i48);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9601, 1));
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, $i50);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i30 := $sext.i16.i32($i1);
    call {:si_unique_call 144} {:cexpr "__x___2"} boogie_si_record_i32($i30);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i31 == 1);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i33 := $i30;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    call {:si_unique_call 145} {:cexpr "ret___0"} boogie_si_record_i64($i34);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9601, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i37 := $sext.i8.i32($i36);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i8($i34);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i39 := $sext.i8.i32($i38);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i37, $i39);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9601, 1));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, $i41);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i31 == 1;
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, $i30);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb14;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i4 := $sext.i16.i32($i1);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9601, 1));
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i22 := $sext.i8.i32($i21);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i16.i8($i1);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i24 := $sext.i8.i32($i23);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i22, $i24);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9601, 1));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, $i26);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i6 := $sext.i16.i32($i1);
    call {:si_unique_call 142} {:cexpr "__x___0"} boogie_si_record_i32($i6);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i9 := $i6;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    call {:si_unique_call 143} {:cexpr "ret"} boogie_si_record_i64($i10);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9601, 1));
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i13 := $sext.i8.i32($i12);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i8($i10);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i15 := $sext.i8.i32($i14);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i16 := $xor.i32($i15, $sub.i32(0, 1));
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i13, $i16);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9601, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i18);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, $i6);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb7;
}



const write_reg: ref;

axiom write_reg == $sub.ref(0, 238647);

procedure write_reg($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, assertsPassed;



implementation write_reg($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i16: i32;
  var vslice_dummy_var_28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} {:cexpr "write_reg:arg:reg"} boogie_si_record_i8($i1);
    call {:si_unique_call 147} {:cexpr "write_reg:arg:val"} boogie_si_record_i8($i2);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i3 := $M.4;
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 65536);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9456, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} spin_lock($p11);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9408, 1));
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i32($i13, 63);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9272, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9400, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p18, $mul.ref($i21, 2)), $mul.ref(0, 1));
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i1);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p18, $mul.ref($i21, 2)), $mul.ref(1, 1));
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, $i2);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9400, 1));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 1);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9400, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9400, 1));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i31 := $sgt.i32($i30, 63);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9408, 1));
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, 1);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9408, 1));
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9408, 1));
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 1);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9456, 1));
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} spin_unlock($p40);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb11:
    assume $i39 == 1;
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} ctrl_start_transfer($p0);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9400, 1));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 0);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9456, 1));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} spin_unlock($p15);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9614, 1));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i2);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} vslice_dummy_var_28 := printk.ref.ref.ref.i32.i32(.str.42, $p7, .str.43, $i8, $i9);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 239679);

procedure spin_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.5;



implementation spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} ldv_spin_lock();
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} ldv_spin_lock_1($p0);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 240711);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.5;



implementation spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} ldv_spin_unlock();
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} ldv_spin_unlock_5($p0);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    return;
}



const ctrl_start_transfer: ref;

axiom ctrl_start_transfer == $sub.ref(0, 241743);

procedure ctrl_start_transfer($p0: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation ctrl_start_transfer($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $p31: ref;
  var $i32: i8;
  var $i33: i16;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i64;
  var $p41: ref;
  var $i42: i8;
  var $i43: i16;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i1 := $M.4;
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 65536);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9408, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9448, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9416, 1));
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i11);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9424, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9416, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p15);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9416, 1));
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $0.ref);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9416, 1));
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 0);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9404, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9272, 1)), $mul.ref($i28, 2)), $mul.ref(0, 1));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i16($i32);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9424, 1)), $mul.ref(4, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p35, $i33);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9404, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9272, 1)), $mul.ref($i38, 2)), $mul.ref(1, 1));
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i16($i42);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9424, 1)), $mul.ref(2, 1));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p45, $i43);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9416, 1));
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} vslice_dummy_var_30 := ldv_usb_submit_urb_33($p47, 32);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9614, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} vslice_dummy_var_29 := printk.ref.ref.ref(.str.24, $p5, .str.44);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_submit_urb_33: ref;

axiom ldv_usb_submit_urb_33 == $sub.ref(0, 242775);

procedure ldv_usb_submit_urb_33($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_33($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} {:cexpr "ldv_usb_submit_urb_33:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} ldv_check_alloc_flags($i1);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $i2 := usb_submit_urb($p0, $i1);
    call {:si_unique_call 162} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 243807);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i1 := $M.5;
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} ldv_error();
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const usb_submit_urb: ref;

axiom usb_submit_urb == $sub.ref(0, 244839);

procedure usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 165} {:cexpr "usb_submit_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 1} true;
    call {:si_unique_call 166} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 167} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 245871);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 168} __VERIFIER_error();
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_5: ref;

axiom ldv_spin_unlock_5 == $sub.ref(0, 246903);

procedure ldv_spin_unlock_5($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_5($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} _raw_spin_unlock($p2);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 247935);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_1: ref;

axiom ldv_spin_lock_1 == $sub.ref(0, 248967);

procedure ldv_spin_lock_1($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_1($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} _raw_spin_lock($p2);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 249999);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 251031);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 252063);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 253095);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 254127);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 172} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} ldv_check_alloc_flags($i1);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 255159);

procedure snprintf.ref.i64.ref.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: i32) returns ($r: i32);



procedure snprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32);



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 256191);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_usb_alloc_urb_41: ref;

axiom ldv_usb_alloc_urb_41 == $sub.ref(0, 257223);

procedure ldv_usb_alloc_urb_41($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_41($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} {:cexpr "ldv_usb_alloc_urb_41:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 176} {:cexpr "ldv_usb_alloc_urb_41:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} ldv_check_alloc_flags($i1);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $p2 := usb_alloc_urb($i0, $i1);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const setup_instance: ref;

axiom setup_instance == $sub.ref(0, 258255);

procedure setup_instance($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, $M.5, assertsPassed;



implementation setup_instance($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i22: i32;
  var $i23: i32;
  var $p25: ref;
  var $p28: ref;
  var $p31: ref;
  var $p35: ref;
  var $p39: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p49: ref;
  var $p52: ref;
  var $i54: i32;
  var $i55: i64;
  var $p58: ref;
  var $i59: i32;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i64;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i16;
  var $i76: i32;
  var $i77: i16;
  var $i80: i64;
  var $p83: ref;
  var $i84: i64;
  var $p88: ref;
  var $i89: i64;
  var $p93: ref;
  var $i94: i32;
  var $i95: i64;
  var $p99: ref;
  var $i100: i64;
  var $p104: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i1;
  var $i53: i32;
  var $p110: ref;
  var $p114: ref;
  var $p115: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p131: ref;
  var $p132: ref;
  var $p135: ref;
  var $p136: ref;
  var $p139: ref;
  var $p140: ref;
  var $p143: ref;
  var $p144: ref;
  var $p147: ref;
  var $i148: i32;
  var $i149: i1;
  var $p151: ref;
  var $p152: ref;
  var $i153: i32;
  var $i154: i32;
  var $p156: ref;
  var $p157: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i32;
  var $i164: i1;
  var $i165: i32;
  var $i166: i32;
  var $i167: i64;
  var $p168: ref;
  var $i150: i32;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p177: ref;
  var $i169: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: ref;
  var vslice_dummy_var_33: ref;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i4 := $M.4;
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 65536);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9456, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} vslice_dummy_var_32 := spinlock_check($p10);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9456, 1)), $mul.ref(0, 1));
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} __raw_spin_lock_init($p14, .str.26, $p2);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9528, 1));
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} vslice_dummy_var_33 := spinlock_check($p15);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9528, 1)), $mul.ref(0, 1));
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} __raw_spin_lock_init($p19, .str.27, $p3);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(16, 1));
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} vslice_dummy_var_34 := mISDN_initdchannel($p20, 300, ph_state);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i22 := $M.4;
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 65535);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(16, 1)), $mul.ref(2036, 1));
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i23);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(16, 1)), $mul.ref(1672, 1));
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p0);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 6);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, hfcusb_l2l1D);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, hfc_dctrl);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5176, 1)), $mul.ref(7, 512)), $mul.ref(16, 1));
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 6);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(92, 1));
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, 2);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb7;

  $bb7:
    call $i54, $i55, $p58, $i59, $p62, $p63, $i64, $i65, $p68, $p69, $p70, $i71, $p72, $i73, $i74, $i75, $i76, $i77, $i80, $p83, $i84, $p88, $i89, $p93, $i94, $i95, $p99, $i100, $p104, $p107, $i108, $i109, $i53, vslice_dummy_var_36 := setup_instance_loop_$bb7($p0, $i54, $i55, $p58, $i59, $p62, $p63, $i64, $i65, $p68, $p69, $p70, $i71, $p72, $i73, $i74, $i75, $i76, $i77, $i80, $p83, $i84, $p88, $i89, $p93, $i94, $i95, $p99, $i100, $p104, $p107, $i108, $i109, $i53, vslice_dummy_var_36);
    goto $bb7_last;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i53, 1);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i53);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(2072, 1)), $mul.ref($i55, 504)), $mul.ref(80, 1));
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i54);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i53, 1);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} set_channelmap($i59, $p63);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i64 := $M.4;
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i53);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(2072, 1)), $mul.ref($i65, 504)), $mul.ref(480, 1));
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i64);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(2072, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i53);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p70, $mul.ref($i71, 504));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i73 := $M.6;
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i74 := $ashr.i32($i73, 1);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i16($i74);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i75);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i16($i76);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} vslice_dummy_var_36 := mISDN_initbchannel($p72, 2056, $i77);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i53);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(2072, 1)), $mul.ref($i80, 504)), $mul.ref(184, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p83, $p0);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i53);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(2072, 1)), $mul.ref($i84, 504)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p88, hfcusb_l2l1B);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i53);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(2072, 1)), $mul.ref($i89, 504)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p93, hfc_bctrl);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i53, 1);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i95 := $sext.i32.i64($i53);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(2072, 1)), $mul.ref($i95, 504)), $mul.ref(0, 1)), $mul.ref(20, 1));
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, $i94);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i100 := $sext.i32.i64($i53);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(2072, 1)), $mul.ref($i100, 504)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} list_add($p104, $p107);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i108 := $add.i32($i53, 1);
    call {:si_unique_call 191} {:cexpr "i"} boogie_si_record_i32($i108);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i109 := $sle.i32($i108, 1);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(2072, 1));
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5176, 1)), $mul.ref(0, 512)), $mul.ref(488, 1));
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p114, $p110);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(2072, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5176, 1)), $mul.ref(1, 512)), $mul.ref(488, 1));
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p119, $p115);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(2072, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p121, $mul.ref(1, 504));
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5176, 1)), $mul.ref(2, 512)), $mul.ref(488, 1));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p125, $p122);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(2072, 1));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p127, $mul.ref(1, 504));
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5176, 1)), $mul.ref(3, 512)), $mul.ref(488, 1));
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p131, $p128);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(16, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5176, 1)), $mul.ref(4, 512)), $mul.ref(480, 1));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p135, $p132);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(16, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5176, 1)), $mul.ref(5, 512)), $mul.ref(480, 1));
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p139, $p136);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(3080, 1));
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5176, 1)), $mul.ref(7, 512)), $mul.ref(496, 1));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p143, $p140);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(3080, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5176, 1)), $mul.ref(6, 512)), $mul.ref(496, 1));
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p147, $p144);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $i148 := setup_hfcsusb($p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 193} {:cexpr "err"} boogie_si_record_i32($i148);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i149 := $ne.i32($i148, 0);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9614, 1));
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p151);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i153 := $M.3;
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i154 := $add.i32($i153, 1);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} vslice_dummy_var_38 := snprintf.ref.i64.ref.ref.i32($p152, 19, .str.28, .str.4, $i154);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9614, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p156);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} vslice_dummy_var_39 := printk.ref.ref.ref(.str.29, .str.4, $p157);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9614, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p161);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $i163 := mISDN_register_device($p160, $p1, $p162);
    call {:si_unique_call 201} {:cexpr "err"} boogie_si_record_i32($i163);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i164 := $ne.i32($i163, 0);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i165 := $M.3;
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i166 := $add.i32($i165, 1);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $M.3 := $i166;
    call {:si_unique_call 202} {:cexpr "hfcsusb_cnt"} boogie_si_record_i32($i166);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i167 := _raw_write_lock_irqsave(HFClock);
    call {:si_unique_call 204} {:cexpr "flags"} boogie_si_record_i64($i167);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(0, 1));
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} list_add_tail($p168, HFClist);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} _raw_write_unlock_irqrestore(HFClock, $i167);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i169 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $r := $i169;
    return;

  $bb16:
    assume $i164 == 1;
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i150 := $i163;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(2072, 1));
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p171 := $bitcast.ref.ref($p170);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($p171, $mul.ref(1, 504));
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} mISDN_freebchannel($p172);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(2072, 1));
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p174 := $bitcast.ref.ref($p173);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} mISDN_freebchannel($p174);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(16, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} vslice_dummy_var_37 := mISDN_freedchannel($p175);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p0);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} kfree($p177);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i169 := $i150;
    goto $bb19;

  $bb12:
    assume $i149 == 1;
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i150 := $i148;
    goto $bb14;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i109 == 1;
    assume {:verifier.code 0} true;
    $i53 := $i108;
    goto $bb9_dummy;

  $bb4:
    assume $i44 == 1;
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(3080, 1));
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} vslice_dummy_var_35 := mISDN_initdchannel($p45, 300, $0.ref);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9614, 1));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} vslice_dummy_var_31 := printk.ref.ref.ref(.str.24, $p8, .str.25);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1519;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 259287);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 260319);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    return;
}



const ph_state: ref;

axiom ph_state == $sub.ref(0, 261351);

procedure ph_state($p0: ref);



const mISDN_initdchannel: ref;

axiom mISDN_initdchannel == $sub.ref(0, 262383);

procedure mISDN_initdchannel($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mISDN_initdchannel($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 207} {:cexpr "mISDN_initdchannel:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 1} true;
    call {:si_unique_call 208} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 209} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const hfcusb_l2l1D: ref;

axiom hfcusb_l2l1D == $sub.ref(0, 263415);

procedure hfcusb_l2l1D($p0: ref, $p1: ref) returns ($r: i32);



const hfc_dctrl: ref;

axiom hfc_dctrl == $sub.ref(0, 264447);

procedure hfc_dctrl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);



const set_channelmap: ref;

axiom set_channelmap == $sub.ref(0, 265479);

procedure set_channelmap($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation set_channelmap($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} {:cexpr "set_channelmap:arg:nr"} boogie_si_record_i32($i0);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i2 := $lshr.i32($i0, 3);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p1, $mul.ref($i3, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i6 := $sext.i8.i32($i5);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i0, 7);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32(1, $i7);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i6, $i10);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i13 := $lshr.i32($i0, 3);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p1, $mul.ref($i14, 1));
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i12);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    return;
}



const mISDN_initbchannel: ref;

axiom mISDN_initbchannel == $sub.ref(0, 266511);

procedure mISDN_initbchannel($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;



implementation mISDN_initbchannel($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 211} {:cexpr "mISDN_initbchannel:arg:arg1"} boogie_si_record_i16($i1);
    call {:si_unique_call 212} {:cexpr "mISDN_initbchannel:arg:arg2"} boogie_si_record_i16($i2);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 1} true;
    call {:si_unique_call 213} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 214} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const hfcusb_l2l1B: ref;

axiom hfcusb_l2l1B == $sub.ref(0, 267543);

procedure hfcusb_l2l1B($p0: ref, $p1: ref) returns ($r: i32);



const hfc_bctrl: ref;

axiom hfc_bctrl == $sub.ref(0, 268575);

procedure hfc_bctrl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);



const list_add: ref;

axiom list_add == $sub.ref(0, 269607);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} __list_add($p0, $p1, $p3);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    return;
}



const setup_hfcsusb: ref;

axiom setup_hfcsusb == $sub.ref(0, 270639);

procedure setup_hfcsusb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.5, assertsPassed;



implementation setup_hfcsusb($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i17: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i2 := $M.4;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 65536);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5136, 1));
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9444, 1));
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $i12 := usb_control_msg($p9, $i11, 1, $sub.i8(0, 64), 0, 22, $p1, 1, 20);
    call {:si_unique_call 219} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 1);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.7, $p1);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 64);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5136, 1));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5152, 1));
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5156, 1));
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} vslice_dummy_var_43 := usb_set_interface($p27, $i29, $i31);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9601, 1));
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, 0);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9432, 1)), $mul.ref(0, 1));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, $sub.i8(0, 64));
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9432, 1)), $mul.ref(1, 1));
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, 1);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9432, 1)), $mul.ref(6, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p39, 1);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9424, 1)), $mul.ref(0, 1));
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, 64);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9424, 1)), $mul.ref(1, 1));
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, 0);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9424, 1)), $mul.ref(6, 1));
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p45, 0);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9416, 1));
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5136, 1));
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9448, 1));
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9424, 1));
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p0);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} usb_fill_control_urb($p47, $p49, $i51, $p53, $0.ref, 0, ctrl_complete, $p54);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} reset_hfcsusb($p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9614, 1));
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.7, $p1);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} vslice_dummy_var_42 := printk.ref.ref.ref.i32(.str.150, $p22, .str.148, $i24);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb6;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9614, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} vslice_dummy_var_41 := printk.ref.ref.ref(.str.149, $p15, .str.148);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9614, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} vslice_dummy_var_40 := printk.ref.ref.ref(.str.24, $p6, .str.148);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mISDN_register_device: ref;

axiom mISDN_register_device == $sub.ref(0, 271671);

procedure mISDN_register_device($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mISDN_register_device($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 1} true;
    call {:si_unique_call 225} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 226} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const _raw_write_lock_irqsave: ref;

axiom _raw_write_lock_irqsave == $sub.ref(0, 272703);

procedure _raw_write_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_write_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 1} true;
    call {:si_unique_call 227} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 228} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 273735);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} __list_add($p0, $p3, $p1);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    return;
}



const _raw_write_unlock_irqrestore: ref;

axiom _raw_write_unlock_irqrestore == $sub.ref(0, 274767);

procedure _raw_write_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_write_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} {:cexpr "_raw_write_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 275799);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    return;
}



const usb_control_msg: ref;

axiom usb_control_msg == $sub.ref(0, 276831);

procedure usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 231} {:cexpr "usb_control_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 232} {:cexpr "usb_control_msg:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 233} {:cexpr "usb_control_msg:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 234} {:cexpr "usb_control_msg:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 235} {:cexpr "usb_control_msg:arg:arg5"} boogie_si_record_i16($i5);
    call {:si_unique_call 236} {:cexpr "usb_control_msg:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 237} {:cexpr "usb_control_msg:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 1} true;
    call {:si_unique_call 238} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 239} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const usb_set_interface: ref;

axiom usb_set_interface == $sub.ref(0, 277863);

procedure usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 240} {:cexpr "usb_set_interface:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 241} {:cexpr "usb_set_interface:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 1} true;
    call {:si_unique_call 242} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 243} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ctrl_complete: ref;

axiom ctrl_complete == $sub.ref(0, 278895);

procedure ctrl_complete($p0: ref);



const usb_fill_control_urb: ref;

axiom usb_fill_control_urb == $sub.ref(0, 279927);

procedure usb_fill_control_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $i5: i32, $p6: ref, $p7: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_control_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $i5: i32, $p6: ref, $p7: ref)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} {:cexpr "usb_fill_control_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 245} {:cexpr "usb_fill_control_urb:arg:buffer_length"} boogie_si_record_i32($i5);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i2);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p3);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p4);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i5);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p6);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p7);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    return;
}



const reset_hfcsusb: ref;

axiom reset_hfcsusb == $sub.ref(0, 280959);

procedure reset_hfcsusb($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, assertsPassed;



implementation reset_hfcsusb($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $i22: i32;
  var $i23: i8;
  var $p25: ref;
  var $i26: i32;
  var $i27: i8;
  var $i28: i32;
  var $i29: i8;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i8;
  var $p52: ref;
  var $p54: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i8;
  var $p67: ref;
  var $p69: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i8;
  var $p82: ref;
  var $p84: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i8;
  var $p97: ref;
  var $p99: ref;
  var $p102: ref;
  var $i103: i8;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $i107: i8;
  var $p112: ref;
  var $p114: ref;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i8;
  var $p127: ref;
  var $p129: ref;
  var $p132: ref;
  var $i133: i8;
  var $i134: i32;
  var $i135: i1;
  var $i136: i32;
  var $i137: i8;
  var $p142: ref;
  var $p144: ref;
  var $p147: ref;
  var $i148: i8;
  var $i149: i32;
  var $i150: i1;
  var $i151: i32;
  var $i152: i8;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i1 := $M.4;
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 1);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} vslice_dummy_var_45 := write_reg($p0, 0, 8);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} vslice_dummy_var_46 := write_reg($p0, 0, 16);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5168, 1));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i11 := $sdiv.i32($i10, 8);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i13 := $sext.i8.i32($i12);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5168, 1));
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i16 := $sdiv.i32($i15, 8);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i17 := $shl.i32($i16, 4);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i19 := $sext.i8.i32($i18);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i13, $i19);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} vslice_dummy_var_47 := write_reg($p0, 7, $i23);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5172, 1));
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} vslice_dummy_var_48 := write_reg($p0, 6, $i29);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} vslice_dummy_var_49 := write_reg($p0, 21, 0);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} vslice_dummy_var_50 := write_reg($p0, 20, 1);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} vslice_dummy_var_51 := write_reg($p0, 12, $sub.i8(0, 116));
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(5176, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} vslice_dummy_var_52 := write_reg($p0, 15, 0);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p35, $mul.ref(0, 512)), $mul.ref(24, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 2048);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p35, $mul.ref(0, 512)), $mul.ref(504, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 0);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} vslice_dummy_var_53 := write_reg($p0, $sub.i8(0, 5), 0);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb6, $bb7;

  $bb7:
    assume !(0 == 1);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} vslice_dummy_var_55 := write_reg($p0, $sub.i8(0, 6), 8);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} vslice_dummy_var_56 := write_reg($p0, 14, 2);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} vslice_dummy_var_57 := write_reg($p0, 15, 1);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p35, $mul.ref(1, 512)), $mul.ref(24, 1));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, 2048);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p35, $mul.ref(1, 512)), $mul.ref(504, 1));
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 0);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} vslice_dummy_var_58 := write_reg($p0, $sub.i8(0, 5), 0);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb11, $bb12;

  $bb12:
    assume !(0 == 1);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} vslice_dummy_var_61 := write_reg($p0, $sub.i8(0, 6), 8);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} vslice_dummy_var_62 := write_reg($p0, 14, 2);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} vslice_dummy_var_63 := write_reg($p0, 15, 2);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p35, $mul.ref(2, 512)), $mul.ref(24, 1));
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, 2048);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p35, $mul.ref(2, 512)), $mul.ref(504, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, 0);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} vslice_dummy_var_64 := write_reg($p0, $sub.i8(0, 5), 0);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb15, $bb16;

  $bb16:
    assume !(0 == 1);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} vslice_dummy_var_66 := write_reg($p0, $sub.i8(0, 6), 8);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} vslice_dummy_var_67 := write_reg($p0, 14, 2);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} vslice_dummy_var_68 := write_reg($p0, 15, 3);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p35, $mul.ref(3, 512)), $mul.ref(24, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, 2048);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p35, $mul.ref(3, 512)), $mul.ref(504, 1));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, 0);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} vslice_dummy_var_69 := write_reg($p0, $sub.i8(0, 5), 0);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb19, $bb20;

  $bb20:
    assume !(0 == 1);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} vslice_dummy_var_71 := write_reg($p0, $sub.i8(0, 6), 8);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} vslice_dummy_var_72 := write_reg($p0, 14, 2);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} vslice_dummy_var_73 := write_reg($p0, 15, 4);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p35, $mul.ref(4, 512)), $mul.ref(24, 1));
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p97, 260);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p35, $mul.ref(4, 512)), $mul.ref(504, 1));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, 0);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} vslice_dummy_var_74 := write_reg($p0, $sub.i8(0, 5), 2);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb23, $bb24;

  $bb24:
    assume !(1 == 1);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} vslice_dummy_var_76 := write_reg($p0, $sub.i8(0, 6), 8);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} vslice_dummy_var_77 := write_reg($p0, 14, 2);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} vslice_dummy_var_78 := write_reg($p0, 15, 5);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p35, $mul.ref(5, 512)), $mul.ref(24, 1));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p112, 260);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p35, $mul.ref(5, 512)), $mul.ref(504, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p114, 0);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} vslice_dummy_var_79 := write_reg($p0, $sub.i8(0, 5), 2);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb27, $bb28;

  $bb28:
    assume !(0 == 1);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} vslice_dummy_var_81 := write_reg($p0, $sub.i8(0, 6), 8);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} vslice_dummy_var_82 := write_reg($p0, 14, 2);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} vslice_dummy_var_83 := write_reg($p0, 15, 6);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p35, $mul.ref(6, 512)), $mul.ref(24, 1));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p127, 260);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p35, $mul.ref(6, 512)), $mul.ref(504, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p129, 0);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} vslice_dummy_var_84 := write_reg($p0, $sub.i8(0, 5), 2);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb31, $bb32;

  $bb32:
    assume !(0 == 1);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} vslice_dummy_var_86 := write_reg($p0, $sub.i8(0, 6), 8);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} vslice_dummy_var_87 := write_reg($p0, 14, 2);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} vslice_dummy_var_88 := write_reg($p0, 15, 7);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p35, $mul.ref(7, 512)), $mul.ref(24, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p142, 260);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p35, $mul.ref(7, 512)), $mul.ref(504, 1));
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p144, 0);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} vslice_dummy_var_89 := write_reg($p0, $sub.i8(0, 5), 2);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb35, $bb36;

  $bb36:
    assume !(0 == 1);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} vslice_dummy_var_91 := write_reg($p0, $sub.i8(0, 6), 8);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} vslice_dummy_var_92 := write_reg($p0, 14, 2);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} vslice_dummy_var_59 := write_reg($p0, 51, 0);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} handle_led($p0, 1);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb35:
    assume 0 == 1;
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9602, 1));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i148 := $load.i8($M.0, $p147);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i32($i148);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, 2);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i151 := (if $i150 == 1 then 8 else 9);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i152 := $trunc.i32.i8($i151);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} vslice_dummy_var_90 := write_reg($p0, $sub.i8(0, 6), $i152);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb31:
    assume 0 == 1;
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9602, 1));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.0, $p132);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i133);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 2);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i136 := (if $i135 == 1 then 8 else 9);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i32.i8($i136);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} vslice_dummy_var_85 := write_reg($p0, $sub.i8(0, 6), $i137);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    goto $bb33;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb27:
    assume 0 == 1;
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9602, 1));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.0, $p117);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 2);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i121 := (if $i120 == 1 then 8 else 9);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i32.i8($i121);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} vslice_dummy_var_80 := write_reg($p0, $sub.i8(0, 6), $i122);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb23:
    assume 1 == 1;
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9602, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.0, $p102);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 2);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i106 := (if $i105 == 1 then 8 else 9);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i8($i106);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} vslice_dummy_var_75 := write_reg($p0, $sub.i8(0, 6), $i107);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb19:
    assume 0 == 1;
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9602, 1));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 2);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i91 := (if $i90 == 1 then 8 else 9);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i8($i91);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} vslice_dummy_var_70 := write_reg($p0, $sub.i8(0, 6), $i92);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb15:
    assume 0 == 1;
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9602, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 2);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i76 := (if $i75 == 1 then 8 else 9);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} vslice_dummy_var_65 := write_reg($p0, $sub.i8(0, 6), $i77);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb11:
    assume 0 == 1;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9602, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 2);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i61 := (if $i60 == 1 then 8 else 9);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i61);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} vslice_dummy_var_60 := write_reg($p0, $sub.i8(0, 6), $i62);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb6:
    assume 0 == 1;
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9602, 1));
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 2);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i44 := (if $i43 == 1 then 8 else 9);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} vslice_dummy_var_54 := write_reg($p0, $sub.i8(0, 6), $i45);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(9614, 1));
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} vslice_dummy_var_44 := printk.ref.ref.ref(.str.24, $p5, .str.152);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 281991);

procedure test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32);



const deactivate_bchannel: ref;

axiom deactivate_bchannel == $sub.ref(0, 283023);

procedure deactivate_bchannel($p0: ref);



const module_put: ref;

axiom module_put == $sub.ref(0, 284055);

procedure module_put($p0: ref);



const channel_bctrl: ref;

axiom channel_bctrl == $sub.ref(0, 285087);

procedure channel_bctrl($p0: ref, $p1: ref) returns ($r: i32);



const mISDN_ctrl_bchannel: ref;

axiom mISDN_ctrl_bchannel == $sub.ref(0, 286119);

procedure mISDN_ctrl_bchannel($p0: ref, $p1: ref) returns ($r: i32);



const mISDN_clear_bchannel: ref;

axiom mISDN_clear_bchannel == $sub.ref(0, 287151);

procedure mISDN_clear_bchannel($p0: ref);



const hfcsusb_setup_bch: ref;

axiom hfcsusb_setup_bch == $sub.ref(0, 288183);

procedure hfcsusb_setup_bch($p0: ref, $i1: i32) returns ($r: i32);



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 289215);

procedure clear_bit($i0: i64, $p1: ref);



const set_bit: ref;

axiom set_bit == $sub.ref(0, 290247);

procedure set_bit($i0: i64, $p1: ref);



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 291279);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);



const hfcsusb_ph_info: ref;

axiom hfcsusb_ph_info == $sub.ref(0, 292311);

procedure hfcsusb_ph_info($p0: ref);



const _queue_data: ref;

axiom _queue_data == $sub.ref(0, 293343);

procedure _queue_data($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref, $i5: i32);



const _alloc_mISDN_skb: ref;

axiom _alloc_mISDN_skb == $sub.ref(0, 294375);

procedure _alloc_mISDN_skb($i0: i32, $i1: i32, $i2: i32, $p3: ref, $i4: i32) returns ($r: ref);



const consume_skb: ref;

axiom consume_skb == $sub.ref(0, 295407);

procedure consume_skb($p0: ref);



const mI_alloc_skb: ref;

axiom mI_alloc_skb == $sub.ref(0, 296439);

procedure mI_alloc_skb($i0: i32, $i1: i32) returns ($r: ref);



const skb_put: ref;

axiom skb_put == $sub.ref(0, 297471);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 298503);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 1} true;
    call {:si_unique_call 296} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 297} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const alloc_skb: ref;

axiom alloc_skb == $sub.ref(0, 299535);

procedure alloc_skb($i0: i32, $i1: i32) returns ($r: ref);



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 300567);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);



const skb_reserve: ref;

axiom skb_reserve == $sub.ref(0, 301599);

procedure skb_reserve($p0: ref, $i1: i32);



const ldv_alloc_skb_20: ref;

axiom ldv_alloc_skb_20 == $sub.ref(0, 302631);

procedure ldv_alloc_skb_20($i0: i32, $i1: i32) returns ($r: ref);



const __alloc_skb: ref;

axiom __alloc_skb == $sub.ref(0, 303663);

procedure __alloc_skb($i0: i32, $i1: i32, $i2: i32, $i3: i32) returns ($r: ref);



const bchannel_senddata: ref;

axiom bchannel_senddata == $sub.ref(0, 304695);

procedure bchannel_senddata($p0: ref, $p1: ref) returns ($r: i32);



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 305727);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);



const hfcsusb_start_endpoint: ref;

axiom hfcsusb_start_endpoint == $sub.ref(0, 306759);

procedure hfcsusb_start_endpoint($p0: ref, $i1: i32);



const start_int_fifo: ref;

axiom start_int_fifo == $sub.ref(0, 307791);

procedure start_int_fifo($p0: ref);



const rx_iso_complete: ref;

axiom rx_iso_complete == $sub.ref(0, 308823);

procedure rx_iso_complete($p0: ref);



const start_isoc_chain: ref;

axiom start_isoc_chain == $sub.ref(0, 309855);

procedure start_isoc_chain($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);



const tx_iso_complete: ref;

axiom tx_iso_complete == $sub.ref(0, 310887);

procedure tx_iso_complete($p0: ref);



const fill_isoc_urb: ref;

axiom fill_isoc_urb == $sub.ref(0, 311919);

procedure fill_isoc_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $i5: i32, $i6: i32, $p7: ref, $p8: ref);



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 312951);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const get_next_dframe: ref;

axiom get_next_dframe == $sub.ref(0, 313983);

procedure get_next_dframe($p0: ref) returns ($r: i32);



const get_next_bframe: ref;

axiom get_next_bframe == $sub.ref(0, 315015);

procedure get_next_bframe($p0: ref) returns ($r: i32);



const ldv_usb_submit_urb_36: ref;

axiom ldv_usb_submit_urb_36 == $sub.ref(0, 316047);

procedure ldv_usb_submit_urb_36($p0: ref, $i1: i32) returns ($r: i32);



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 317079);

procedure schedule_work($p0: ref) returns ($r: i1);



const symbolic: ref;

axiom symbolic == $sub.ref(0, 318111);

procedure symbolic($p0: ref, $i1: i32) returns ($r: ref);



const queue_work: ref;

axiom queue_work == $sub.ref(0, 319143);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 320175);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);



const usb_fill_bulk_urb: ref;

axiom usb_fill_bulk_urb == $sub.ref(0, 321207);

procedure usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);



const ldv_usb_alloc_urb_37: ref;

axiom ldv_usb_alloc_urb_37 == $sub.ref(0, 322239);

procedure ldv_usb_alloc_urb_37($i0: i32, $i1: i32) returns ($r: ref);



const ldv_usb_submit_urb_38: ref;

axiom ldv_usb_submit_urb_38 == $sub.ref(0, 323271);

procedure ldv_usb_submit_urb_38($p0: ref, $i1: i32) returns ($r: i32);



const usb_alloc_urb: ref;

axiom usb_alloc_urb == $sub.ref(0, 324303);

procedure usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} {:cexpr "usb_alloc_urb:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 299} {:cexpr "usb_alloc_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $p2 := external_alloc();
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const hfcsusb_rx_frame: ref;

axiom hfcsusb_rx_frame == $sub.ref(0, 325335);

procedure hfcsusb_rx_frame($p0: ref, $p1: ref, $i2: i32, $i3: i32);



const ldv_usb_submit_urb_34: ref;

axiom ldv_usb_submit_urb_34 == $sub.ref(0, 326367);

procedure ldv_usb_submit_urb_34($p0: ref, $i1: i32) returns ($r: i32);



const bchannel_get_rxbuf: ref;

axiom bchannel_get_rxbuf == $sub.ref(0, 327399);

procedure bchannel_get_rxbuf($p0: ref, $i1: i32) returns ($r: i32);



const skb_trim: ref;

axiom skb_trim == $sub.ref(0, 328431);

procedure skb_trim($p0: ref, $i1: i32);



const recv_Dchannel: ref;

axiom recv_Dchannel == $sub.ref(0, 329463);

procedure recv_Dchannel($p0: ref);



const recv_Bchannel: ref;

axiom recv_Bchannel == $sub.ref(0, 330495);

procedure recv_Bchannel($p0: ref, $i1: i32, $i2: i1);



const recv_Echannel: ref;

axiom recv_Echannel == $sub.ref(0, 331527);

procedure recv_Echannel($p0: ref, $p1: ref);



const ldv_usb_alloc_urb_39: ref;

axiom ldv_usb_alloc_urb_39 == $sub.ref(0, 332559);

procedure ldv_usb_alloc_urb_39($i0: i32, $i1: i32) returns ($r: ref);



const rx_int_complete: ref;

axiom rx_int_complete == $sub.ref(0, 333591);

procedure rx_int_complete($p0: ref);



const usb_fill_int_urb: ref;

axiom usb_fill_int_urb == $sub.ref(0, 334623);

procedure usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32);



const ldv_usb_submit_urb_40: ref;

axiom ldv_usb_submit_urb_40 == $sub.ref(0, 335655);

procedure ldv_usb_submit_urb_40($p0: ref, $i1: i32) returns ($r: i32);



const ldv_usb_submit_urb_35: ref;

axiom ldv_usb_submit_urb_35 == $sub.ref(0, 336687);

procedure ldv_usb_submit_urb_35($p0: ref, $i1: i32) returns ($r: i32);



const open_dchannel: ref;

axiom open_dchannel == $sub.ref(0, 337719);

procedure open_dchannel($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const open_bchannel: ref;

axiom open_bchannel == $sub.ref(0, 338751);

procedure open_bchannel($p0: ref, $p1: ref) returns ($r: i32);



const llvm.returnaddress: ref;

axiom llvm.returnaddress == $sub.ref(0, 339783);

procedure llvm.returnaddress($i0: i32) returns ($r: ref);



const channel_ctrl: ref;

axiom channel_ctrl == $sub.ref(0, 340815);

procedure channel_ctrl($p0: ref, $p1: ref) returns ($r: i32);



const try_module_get: ref;

axiom try_module_get == $sub.ref(0, 341847);

procedure try_module_get($p0: ref) returns ($r: i1);



const hfc_l1callback: ref;

axiom hfc_l1callback == $sub.ref(0, 342879);

procedure hfc_l1callback($p0: ref, $i1: i32) returns ($r: i32);



const create_l1: ref;

axiom create_l1 == $sub.ref(0, 343911);

procedure create_l1($p0: ref, $p1: ref) returns ($r: i32);



const setPortMode: ref;

axiom setPortMode == $sub.ref(0, 344943);

procedure setPortMode($p0: ref);



const skb_queue_purge: ref;

axiom skb_queue_purge == $sub.ref(0, 345975);

procedure skb_queue_purge($p0: ref);



const dchannel_senddata: ref;

axiom dchannel_senddata == $sub.ref(0, 347007);

procedure dchannel_senddata($p0: ref, $p1: ref) returns ($r: i32);



const queue_ch_frame: ref;

axiom queue_ch_frame == $sub.ref(0, 348039);

procedure queue_ch_frame($p0: ref, $i1: i32, $i2: i32, $p3: ref);



const hfcsusb_ph_command: ref;

axiom hfcsusb_ph_command == $sub.ref(0, 349071);

procedure hfcsusb_ph_command($p0: ref, $i1: i8);



const ph_state_nt: ref;

axiom ph_state_nt == $sub.ref(0, 350103);

procedure ph_state_nt($p0: ref);



const ph_state_te: ref;

axiom ph_state_te == $sub.ref(0, 351135);

procedure ph_state_te($p0: ref);



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 352167);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 301} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 1} true;
    call {:si_unique_call 302} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 303} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 304} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $p4 := calloc(1, $i0);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 1} true;
    call {:si_unique_call 306} __VERIFIER_assume($i7);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_usb_driver_1: ref;

axiom ldv_usb_driver_1 == $sub.ref(0, 353199);

procedure ldv_usb_driver_1();
  free requires assertsPassed;
  modifies $M.16, $M.0, $CurrAddr;



implementation ldv_usb_driver_1()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $p0 := ldv_zalloc(1560);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $M.16 := $p0;
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 354231);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.18, $M.19, $M.1, $M.0, $M.20, $M.3, $M.22, $M.16, $M.21, $M.5, $M.37, $M.38, $M.6, $M.9, $M.12, $M.11, $M.15, $M.14, $M.4, $M.2, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;

  $bb0:
    call {:si_unique_call 308} $initialize();
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $p0 := ldv_zalloc(32);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} ldv_initialize();
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $M.17 := 0;
    call {:si_unique_call 312} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 313} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $M.19 := 1;
    call {:si_unique_call 314} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $p14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $p24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43 := main_loop_$bb1($p1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $p14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $p24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} ldv_stop();
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb36_dummy;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i27 := $M.19;
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb37:
    assume $i28 == 1;
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 1} true;
    call {:si_unique_call 329} $i29 := __VERIFIER_nondet_int();
    call {:si_unique_call 330} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i29);
    call {:si_unique_call 331} {:cexpr "tmp___2"} boogie_si_record_i32($i29);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i29, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} ldv_stop();
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb42:
    assume $i31 == 1;
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i37 := $M.19;
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 1);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb55:
    assume $i38 == 1;
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $i39 := hfcsusb_drv_init();
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $M.22 := $i39;
    call {:si_unique_call 336} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i39);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i40 := $M.22;
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i42 := $M.22;
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb60:
    assume $i43 == 1;
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $M.19 := 2;
    call {:si_unique_call 338} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} ldv_check_final_state();
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb57:
    assume $i41 == 1;
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $M.19 := 3;
    call {:si_unique_call 337} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb40:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i29, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb44;

  $bb45:
    assume $i32 == 1;
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i33 := $M.19;
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 3);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb47:
    assume $i34 == 1;
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i35 := $M.18;
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb49;

  $bb50:
    assume $i36 == 1;
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} hfcsusb_drv_exit();
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $M.19 := 2;
    call {:si_unique_call 333} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb3:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb7;

  $bb8:
    assume $i5 == 1;
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i6 := $M.17;
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 1} true;
    call {:si_unique_call 318} $i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 319} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
    call {:si_unique_call 320} {:cexpr "tmp___1"} boogie_si_record_i32($i8);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i8, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} ldv_stop();
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb15:
    assume $i10 == 1;
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i20 := $M.17;
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 2);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb27:
    assume $i21 == 1;
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i22 := $M.21;
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb29;

  $bb30:
    assume $i23 == 1;
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p24 := $M.16;
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} hfcsusb_disconnect($p24);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 326} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i25 := $M.18;
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i25, 1);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $M.18 := $i26;
    call {:si_unique_call 327} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i8, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb17;

  $bb18:
    assume $i11 == 1;
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i12 := $M.17;
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 1);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb20:
    assume $i13 == 1;
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p14 := $M.16;
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $i15 := hfcsusb_probe($p14, $p1);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $M.20 := $i15;
    call {:si_unique_call 322} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i15);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i16 := $M.20;
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i17 == 1;
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $M.17 := 2;
    call {:si_unique_call 323} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i18 := $M.18;
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 1);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $M.18 := $i19;
    call {:si_unique_call 324} {:cexpr "ref_cnt"} boogie_si_record_i32($i19);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb36_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 315} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 316} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 317} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 355263);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 356295);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const hfcsusb_drv_exit: ref;

axiom hfcsusb_drv_exit == $sub.ref(0, 357327);

procedure hfcsusb_drv_exit();
  free requires assertsPassed;
  modifies $M.17;



implementation hfcsusb_drv_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} ldv_usb_deregister_43(hfcsusb_drv);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    return;
}



const hfcsusb_drv_init: ref;

axiom hfcsusb_drv_init == $sub.ref(0, 358359);

procedure hfcsusb_drv_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.21, $M.16, $M.0, $CurrAddr;



implementation hfcsusb_drv_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $i0 := ldv_usb_register_driver_42(hfcsusb_drv, __this_module, .str.156);
    call {:si_unique_call 343} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 359391);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_register_driver_42: ref;

axiom ldv_usb_register_driver_42 == $sub.ref(0, 360423);

procedure ldv_usb_register_driver_42($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.21, $M.16, $M.0, $CurrAddr;



implementation ldv_usb_register_driver_42($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 345} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 346} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $M.21 := 0;
    call {:si_unique_call 347} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} ldv_usb_driver_1();
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 361455);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 1} true;
    call {:si_unique_call 349} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 350} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_deregister_43: ref;

axiom ldv_usb_deregister_43 == $sub.ref(0, 362487);

procedure ldv_usb_deregister_43($p0: ref);
  free requires assertsPassed;
  modifies $M.17;



implementation ldv_usb_deregister_43($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} usb_deregister($p0);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $M.17 := 0;
    call {:si_unique_call 352} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 363519);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 364551);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 353} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 1} true;
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 365583);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 366615);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 367647);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 368679);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 369711);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 370743);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 371775);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 372807);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 373839);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 374871);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 375903);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 376935);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 377967);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 1} true;
    call {:si_unique_call 354} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 355} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 356} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 1} true;
    call {:si_unique_call 357} __VERIFIER_assume($i4);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 378999);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 380031);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 381063);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 382095);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 383127);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 1} true;
    call {:si_unique_call 358} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 359} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 360} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 1} true;
    call {:si_unique_call 361} __VERIFIER_assume($i4);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 384159);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 385191);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 386223);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 387255);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 388287);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 1} true;
    call {:si_unique_call 362} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 363} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 364} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 1} true;
    call {:si_unique_call 365} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 366} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 367} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 1} true;
    call {:si_unique_call 368} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 369} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 370} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 1} true;
    call {:si_unique_call 371} __VERIFIER_assume($i7);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 1} true;
    call {:si_unique_call 372} __VERIFIER_assume($i11);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 389319);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 390351);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 391383);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 392415);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 393447);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 394479);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 395511);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 396543);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 397575);

procedure __VERIFIER_nondet_bool() returns ($r: i1);



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 398607);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 1} true;
    call {:si_unique_call 373} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 374} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 375} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 399639);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 1} true;
    call {:si_unique_call 376} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 377} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 400671);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 401703);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 378} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 379} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 402735);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 403767);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 404799);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 380} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 381} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 1} true;
    call {:si_unique_call 382} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 383} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $p6 := malloc($i5);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 385} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 405831);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 406863);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.5, $M.37, $M.0, $M.38, $M.3, $M.6, $M.9, $M.12, $M.11, $M.15, $M.14, $M.4, $M.2, $M.1, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 386} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.16 := $0.ref;
    $M.17 := 0;
    call {:si_unique_call 387} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.18 := 0;
    call {:si_unique_call 388} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.19 := 0;
    call {:si_unique_call 389} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.20 := 0;
    call {:si_unique_call 390} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.21 := 0;
    call {:si_unique_call 391} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.22 := 0;
    call {:si_unique_call 392} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.5 := 0;
    call {:si_unique_call 393} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.37 := $store.ref($M.37, hfcsusb_drv, .str.4);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(8, 1)), hfcsusb_probe);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(16, 1)), hfcsusb_disconnect);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(32, 1)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(40, 1)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(48, 1)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(72, 1)), hfcsusb_idtab);
    $M.37 := $store.i32($M.37, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.37 := $store.i32($M.37, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.37 := $store.i32($M.37, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.37 := $store.ref($M.37, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.37 := $store.i32($M.37, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.37 := $store.i64($M.37, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.37 := $store.ref($M.37, $add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.37 := $store.i8($M.37, $add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.37 := $store.ref($M.37, $add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.37 := $store.ref($M.37, $add.ref($add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.37 := $store.i32($M.37, $add.ref($add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.37 := $store.i8($M.37, $add.ref($add.ref(hfcsusb_drv, $mul.ref(0, 304)), $mul.ref(296, 1)), 4);
    $M.0 := $store.ref($M.0, HFClist, HFClist);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(HFClist, $mul.ref(0, 16)), $mul.ref(8, 1)), HFClist);
    $M.38 := $store.i32($M.38, HFClock, 0);
    $M.38 := $store.i32($M.38, $add.ref($add.ref($add.ref($add.ref($add.ref(HFClock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(HFClock, $mul.ref(0, 72)), $mul.ref(8, 1)), $sub.i32(0, 558948627));
    $M.38 := $store.i32($M.38, $add.ref($add.ref(HFClock, $mul.ref(0, 72)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.38 := $store.ref($M.38, $add.ref($add.ref(HFClock, $mul.ref(0, 72)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.38 := $store.ref($M.38, $add.ref($add.ref($add.ref(HFClock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.38 := $store.ref($M.38, $add.ref($add.ref($add.ref($add.ref(HFClock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.38 := $store.ref($M.38, $add.ref($add.ref($add.ref($add.ref(HFClock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.38 := $store.ref($M.38, $add.ref($add.ref($add.ref(HFClock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.153);
    $M.38 := $store.i32($M.38, $add.ref($add.ref($add.ref(HFClock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.38 := $store.i64($M.38, $add.ref($add.ref($add.ref(HFClock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.3 := 0;
    call {:si_unique_call 394} {:cexpr "hfcsusb_cnt"} boogie_si_record_i32(0);
    $M.6 := 128;
    call {:si_unique_call 395} {:cexpr "poll"} boogie_si_record_i32(128);
    $M.9 := $store.i32($M.9, iso_packets, 8);
    $M.9 := $store.i32($M.9, $add.ref($add.ref(iso_packets, $mul.ref(0, 32)), $mul.ref(1, 4)), 8);
    $M.9 := $store.i32($M.9, $add.ref($add.ref(iso_packets, $mul.ref(0, 32)), $mul.ref(2, 4)), 8);
    $M.9 := $store.i32($M.9, $add.ref($add.ref(iso_packets, $mul.ref(0, 32)), $mul.ref(3, 4)), 8);
    $M.9 := $store.i32($M.9, $add.ref($add.ref(iso_packets, $mul.ref(0, 32)), $mul.ref(4, 4)), 8);
    $M.9 := $store.i32($M.9, $add.ref($add.ref(iso_packets, $mul.ref(0, 32)), $mul.ref(5, 4)), 8);
    $M.9 := $store.i32($M.9, $add.ref($add.ref(iso_packets, $mul.ref(0, 32)), $mul.ref(6, 4)), 8);
    $M.9 := $store.i32($M.9, $add.ref($add.ref(iso_packets, $mul.ref(0, 32)), $mul.ref(7, 4)), 8);
    $M.12 := $store.i32($M.12, urb_errlist, $sub.i32(0, 12));
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(0, 16)), $mul.ref(8, 1)), .str.92);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(1, 16)), $mul.ref(0, 1)), $sub.i32(0, 28));
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(1, 16)), $mul.ref(8, 1)), .str.93);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(2, 16)), $mul.ref(0, 1)), $sub.i32(0, 2));
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(2, 16)), $mul.ref(8, 1)), .str.94);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(3, 16)), $mul.ref(0, 1)), $sub.i32(0, 18));
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(3, 16)), $mul.ref(8, 1)), .str.95);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(4, 16)), $mul.ref(0, 1)), $sub.i32(0, 11));
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(4, 16)), $mul.ref(8, 1)), .str.96);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(5, 16)), $mul.ref(0, 1)), $sub.i32(0, 6));
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(5, 16)), $mul.ref(8, 1)), .str.97);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(6, 16)), $mul.ref(0, 1)), $sub.i32(0, 27));
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(6, 16)), $mul.ref(8, 1)), .str.98);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(7, 16)), $mul.ref(0, 1)), $sub.i32(0, 63));
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(7, 16)), $mul.ref(8, 1)), .str.99);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(8, 16)), $mul.ref(0, 1)), $sub.i32(0, 32));
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(8, 16)), $mul.ref(8, 1)), .str.100);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(9, 16)), $mul.ref(0, 1)), $sub.i32(0, 75));
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(9, 16)), $mul.ref(8, 1)), .str.101);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(10, 16)), $mul.ref(0, 1)), $sub.i32(0, 71));
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(10, 16)), $mul.ref(8, 1)), .str.102);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(11, 16)), $mul.ref(0, 1)), $sub.i32(0, 84));
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(11, 16)), $mul.ref(8, 1)), .str.103);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(12, 16)), $mul.ref(0, 1)), $sub.i32(0, 110));
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(12, 16)), $mul.ref(8, 1)), .str.104);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(13, 16)), $mul.ref(0, 1)), $sub.i32(0, 108));
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(13, 16)), $mul.ref(8, 1)), .str.105);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(14, 16)), $mul.ref(0, 1)), $sub.i32(0, 1));
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(urb_errlist, $mul.ref(0, 240)), $mul.ref(14, 16)), $mul.ref(8, 1)), $0.ref);
    $M.15 := $store.ref($M.15, HFC_TE_LAYER1_STATES, .str.47);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(HFC_TE_LAYER1_STATES, $mul.ref(0, 72)), $mul.ref(1, 8)), .str.48);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(HFC_TE_LAYER1_STATES, $mul.ref(0, 72)), $mul.ref(2, 8)), .str.49);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(HFC_TE_LAYER1_STATES, $mul.ref(0, 72)), $mul.ref(3, 8)), .str.50);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(HFC_TE_LAYER1_STATES, $mul.ref(0, 72)), $mul.ref(4, 8)), .str.51);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(HFC_TE_LAYER1_STATES, $mul.ref(0, 72)), $mul.ref(5, 8)), .str.52);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(HFC_TE_LAYER1_STATES, $mul.ref(0, 72)), $mul.ref(6, 8)), .str.53);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(HFC_TE_LAYER1_STATES, $mul.ref(0, 72)), $mul.ref(7, 8)), .str.54);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(HFC_TE_LAYER1_STATES, $mul.ref(0, 72)), $mul.ref(8, 8)), .str.55);
    $M.14 := $store.ref($M.14, HFC_NT_LAYER1_STATES, .str.33);
    $M.14 := $store.ref($M.14, $add.ref($add.ref(HFC_NT_LAYER1_STATES, $mul.ref(0, 40)), $mul.ref(1, 8)), .str.34);
    $M.14 := $store.ref($M.14, $add.ref($add.ref(HFC_NT_LAYER1_STATES, $mul.ref(0, 40)), $mul.ref(2, 8)), .str.35);
    $M.14 := $store.ref($M.14, $add.ref($add.ref(HFC_NT_LAYER1_STATES, $mul.ref(0, 40)), $mul.ref(3, 8)), .str.36);
    $M.14 := $store.ref($M.14, $add.ref($add.ref(HFC_NT_LAYER1_STATES, $mul.ref(0, 40)), $mul.ref(4, 8)), .str.37);
    $M.4 := 0;
    call {:si_unique_call 396} {:cexpr "debug"} boogie_si_record_i32(0);
    $M.2 := $store.ref($M.2, conf_str, .str.20);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(conf_str, $mul.ref(0, 32)), $mul.ref(1, 8)), .str.21);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(conf_str, $mul.ref(0, 32)), $mul.ref(2, 8)), .str.22);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(conf_str, $mul.ref(0, 32)), $mul.ref(3, 8)), .str.23);
    $M.1 := $store.i32($M.1, validconf, 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(1, 4)), 5);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(2, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(3, 4)), 5);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(4, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(5, 4)), 5);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(6, 4)), 2);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(7, 4)), 5);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(8, 4)), 3);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(9, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(10, 4)), 3);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(11, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(12, 4)), 3);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(13, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(14, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(15, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(16, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(17, 4)), 2);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(18, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(1, 76)), $mul.ref(0, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(1, 76)), $mul.ref(1, 4)), 5);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(1, 76)), $mul.ref(2, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(1, 76)), $mul.ref(3, 4)), 5);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(1, 76)), $mul.ref(4, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(1, 76)), $mul.ref(5, 4)), 5);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(1, 76)), $mul.ref(6, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(1, 76)), $mul.ref(7, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(1, 76)), $mul.ref(8, 4)), 3);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(1, 76)), $mul.ref(9, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(1, 76)), $mul.ref(10, 4)), 3);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(1, 76)), $mul.ref(11, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(1, 76)), $mul.ref(12, 4)), 3);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(1, 76)), $mul.ref(13, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(1, 76)), $mul.ref(14, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(1, 76)), $mul.ref(15, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(1, 76)), $mul.ref(16, 4)), 2);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(1, 76)), $mul.ref(17, 4)), 2);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(1, 76)), $mul.ref(18, 4)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(2, 76)), $mul.ref(0, 4)), 2);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(2, 76)), $mul.ref(1, 4)), 2);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(2, 76)), $mul.ref(2, 4)), 2);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(2, 76)), $mul.ref(3, 4)), 2);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(2, 76)), $mul.ref(4, 4)), 2);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(2, 76)), $mul.ref(5, 4)), 2);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(2, 76)), $mul.ref(6, 4)), 2);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(2, 76)), $mul.ref(7, 4)), 2);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(2, 76)), $mul.ref(8, 4)), 3);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(2, 76)), $mul.ref(9, 4)), 3);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(2, 76)), $mul.ref(10, 4)), 3);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(2, 76)), $mul.ref(11, 4)), 3);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(2, 76)), $mul.ref(12, 4)), 3);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(2, 76)), $mul.ref(13, 4)), 3);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(2, 76)), $mul.ref(14, 4)), 2);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(2, 76)), $mul.ref(15, 4)), 3);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(2, 76)), $mul.ref(16, 4)), 3);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(2, 76)), $mul.ref(17, 4)), 2);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(2, 76)), $mul.ref(18, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(3, 76)), $mul.ref(0, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(3, 76)), $mul.ref(1, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(3, 76)), $mul.ref(2, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(3, 76)), $mul.ref(3, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(3, 76)), $mul.ref(4, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(3, 76)), $mul.ref(5, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(3, 76)), $mul.ref(6, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(3, 76)), $mul.ref(7, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(3, 76)), $mul.ref(8, 4)), 3);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(3, 76)), $mul.ref(9, 4)), 3);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(3, 76)), $mul.ref(10, 4)), 3);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(3, 76)), $mul.ref(11, 4)), 3);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(3, 76)), $mul.ref(12, 4)), 3);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(3, 76)), $mul.ref(13, 4)), 3);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(3, 76)), $mul.ref(14, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(3, 76)), $mul.ref(15, 4)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(3, 76)), $mul.ref(16, 4)), 4);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(3, 76)), $mul.ref(17, 4)), 2);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(3, 76)), $mul.ref(18, 4)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(4, 76)), $mul.ref(0, 4)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(4, 76)), $mul.ref(1, 4)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(4, 76)), $mul.ref(2, 4)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(4, 76)), $mul.ref(3, 4)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(4, 76)), $mul.ref(4, 4)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(4, 76)), $mul.ref(5, 4)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(4, 76)), $mul.ref(6, 4)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(4, 76)), $mul.ref(7, 4)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(4, 76)), $mul.ref(8, 4)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(4, 76)), $mul.ref(9, 4)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(4, 76)), $mul.ref(10, 4)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(4, 76)), $mul.ref(11, 4)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(4, 76)), $mul.ref(12, 4)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(4, 76)), $mul.ref(13, 4)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(4, 76)), $mul.ref(14, 4)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(4, 76)), $mul.ref(15, 4)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(4, 76)), $mul.ref(16, 4)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(4, 76)), $mul.ref(17, 4)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(4, 76)), $mul.ref(18, 4)), 0);
    $M.39 := $store.i8($M.39, __constr_expr_12, 1);
    $M.39 := $store.i16($M.39, $add.ref($add.ref($add.ref(__constr_expr_12, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(0, 2)), 136);
    $M.39 := $store.i16($M.39, $add.ref($add.ref($add.ref(__constr_expr_12, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(1, 2)), $sub.i16(0, 64));
    $M.39 := $store.i16($M.39, $add.ref($add.ref($add.ref(__constr_expr_12, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(2, 2)), $sub.i16(0, 32));
    $M.39 := $store.i16($M.39, $add.ref($add.ref($add.ref(__constr_expr_12, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(3, 2)), $sub.i16(0, 16));
    $M.39 := $store.i16($M.39, $add.ref($add.ref($add.ref(__constr_expr_12, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(4, 2)), 0);
    $M.39 := $store.i16($M.39, $add.ref($add.ref($add.ref(__constr_expr_12, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(5, 2)), 0);
    $M.39 := $store.i16($M.39, $add.ref($add.ref($add.ref(__constr_expr_12, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(6, 2)), 0);
    $M.39 := $store.i16($M.39, $add.ref($add.ref($add.ref(__constr_expr_12, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(7, 2)), 0);
    $M.39 := $store.ref($M.39, $add.ref($add.ref(__constr_expr_12, $mul.ref(0, 32)), $mul.ref(24, 1)), .str.19);
    $M.40 := $store.i8($M.40, __constr_expr_11, 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__constr_expr_11, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(0, 2)), 136);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__constr_expr_11, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(1, 2)), $sub.i16(0, 64));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__constr_expr_11, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(2, 2)), $sub.i16(0, 32));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__constr_expr_11, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(3, 2)), $sub.i16(0, 16));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__constr_expr_11, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(4, 2)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__constr_expr_11, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(5, 2)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__constr_expr_11, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(6, 2)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(__constr_expr_11, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(7, 2)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref(__constr_expr_11, $mul.ref(0, 32)), $mul.ref(24, 1)), .str.18);
    $M.41 := $store.i8($M.41, __constr_expr_10, 1);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__constr_expr_10, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(0, 2)), 2);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__constr_expr_10, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(1, 2)), 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__constr_expr_10, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(2, 2)), 1);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__constr_expr_10, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(3, 2)), 4);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__constr_expr_10, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(4, 2)), 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__constr_expr_10, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(5, 2)), 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__constr_expr_10, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(6, 2)), 0);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(__constr_expr_10, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(7, 2)), 0);
    $M.41 := $store.ref($M.41, $add.ref($add.ref(__constr_expr_10, $mul.ref(0, 32)), $mul.ref(24, 1)), .str.17);
    $M.42 := $store.i8($M.42, __constr_expr_9, 1);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__constr_expr_9, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(0, 2)), 128);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__constr_expr_9, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(1, 2)), $sub.i16(0, 64));
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__constr_expr_9, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(2, 2)), $sub.i16(0, 32));
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__constr_expr_9, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(3, 2)), $sub.i16(0, 16));
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__constr_expr_9, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(4, 2)), 0);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__constr_expr_9, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(5, 2)), 0);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__constr_expr_9, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(6, 2)), 0);
    $M.42 := $store.i16($M.42, $add.ref($add.ref($add.ref(__constr_expr_9, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(7, 2)), 0);
    $M.42 := $store.ref($M.42, $add.ref($add.ref(__constr_expr_9, $mul.ref(0, 32)), $mul.ref(24, 1)), .str.16);
    $M.43 := $store.i8($M.43, __constr_expr_8, 1);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__constr_expr_8, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(0, 2)), 128);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__constr_expr_8, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(1, 2)), $sub.i16(0, 64));
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__constr_expr_8, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(2, 2)), $sub.i16(0, 32));
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__constr_expr_8, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(3, 2)), $sub.i16(0, 16));
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__constr_expr_8, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(4, 2)), 0);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__constr_expr_8, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(5, 2)), 0);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__constr_expr_8, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(6, 2)), 0);
    $M.43 := $store.i16($M.43, $add.ref($add.ref($add.ref(__constr_expr_8, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(7, 2)), 0);
    $M.43 := $store.ref($M.43, $add.ref($add.ref(__constr_expr_8, $mul.ref(0, 32)), $mul.ref(24, 1)), .str.15);
    $M.44 := $store.i8($M.44, __constr_expr_7, 1);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__constr_expr_7, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(0, 2)), 128);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__constr_expr_7, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(1, 2)), $sub.i16(0, 64));
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__constr_expr_7, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(2, 2)), $sub.i16(0, 32));
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__constr_expr_7, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(3, 2)), $sub.i16(0, 16));
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__constr_expr_7, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(4, 2)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__constr_expr_7, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(5, 2)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__constr_expr_7, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(6, 2)), 0);
    $M.44 := $store.i16($M.44, $add.ref($add.ref($add.ref(__constr_expr_7, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(7, 2)), 0);
    $M.44 := $store.ref($M.44, $add.ref($add.ref(__constr_expr_7, $mul.ref(0, 32)), $mul.ref(24, 1)), .str.14);
    $M.45 := $store.i8($M.45, __constr_expr_6, 1);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(__constr_expr_6, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(0, 2)), 2);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(__constr_expr_6, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(1, 2)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(__constr_expr_6, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(2, 2)), 1);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(__constr_expr_6, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(3, 2)), 4);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(__constr_expr_6, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(4, 2)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(__constr_expr_6, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(5, 2)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(__constr_expr_6, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(6, 2)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(__constr_expr_6, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(7, 2)), 0);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(__constr_expr_6, $mul.ref(0, 32)), $mul.ref(24, 1)), .str.13);
    $M.46 := $store.i8($M.46, __constr_expr_5, 1);
    $M.46 := $store.i16($M.46, $add.ref($add.ref($add.ref(__constr_expr_5, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(0, 2)), 4);
    $M.46 := $store.i16($M.46, $add.ref($add.ref($add.ref(__constr_expr_5, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(1, 2)), 0);
    $M.46 := $store.i16($M.46, $add.ref($add.ref($add.ref(__constr_expr_5, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(2, 2)), 2);
    $M.46 := $store.i16($M.46, $add.ref($add.ref($add.ref(__constr_expr_5, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(3, 2)), 1);
    $M.46 := $store.i16($M.46, $add.ref($add.ref($add.ref(__constr_expr_5, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(4, 2)), 0);
    $M.46 := $store.i16($M.46, $add.ref($add.ref($add.ref(__constr_expr_5, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(5, 2)), 0);
    $M.46 := $store.i16($M.46, $add.ref($add.ref($add.ref(__constr_expr_5, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(6, 2)), 0);
    $M.46 := $store.i16($M.46, $add.ref($add.ref($add.ref(__constr_expr_5, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(7, 2)), 0);
    $M.46 := $store.ref($M.46, $add.ref($add.ref(__constr_expr_5, $mul.ref(0, 32)), $mul.ref(24, 1)), .str.12);
    $M.47 := $store.i8($M.47, __constr_expr_4, 1);
    $M.47 := $store.i16($M.47, $add.ref($add.ref($add.ref(__constr_expr_4, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(0, 2)), 4);
    $M.47 := $store.i16($M.47, $add.ref($add.ref($add.ref(__constr_expr_4, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(1, 2)), 0);
    $M.47 := $store.i16($M.47, $add.ref($add.ref($add.ref(__constr_expr_4, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(2, 2)), 2);
    $M.47 := $store.i16($M.47, $add.ref($add.ref($add.ref(__constr_expr_4, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(3, 2)), 1);
    $M.47 := $store.i16($M.47, $add.ref($add.ref($add.ref(__constr_expr_4, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(4, 2)), 0);
    $M.47 := $store.i16($M.47, $add.ref($add.ref($add.ref(__constr_expr_4, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(5, 2)), 0);
    $M.47 := $store.i16($M.47, $add.ref($add.ref($add.ref(__constr_expr_4, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(6, 2)), 0);
    $M.47 := $store.i16($M.47, $add.ref($add.ref($add.ref(__constr_expr_4, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(7, 2)), 0);
    $M.47 := $store.ref($M.47, $add.ref($add.ref(__constr_expr_4, $mul.ref(0, 32)), $mul.ref(24, 1)), .str.11);
    $M.48 := $store.i8($M.48, __constr_expr_3, 1);
    $M.48 := $store.i16($M.48, $add.ref($add.ref($add.ref(__constr_expr_3, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(0, 2)), 4);
    $M.48 := $store.i16($M.48, $add.ref($add.ref($add.ref(__constr_expr_3, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(1, 2)), 0);
    $M.48 := $store.i16($M.48, $add.ref($add.ref($add.ref(__constr_expr_3, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(2, 2)), 2);
    $M.48 := $store.i16($M.48, $add.ref($add.ref($add.ref(__constr_expr_3, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(3, 2)), 1);
    $M.48 := $store.i16($M.48, $add.ref($add.ref($add.ref(__constr_expr_3, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(4, 2)), 0);
    $M.48 := $store.i16($M.48, $add.ref($add.ref($add.ref(__constr_expr_3, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(5, 2)), 0);
    $M.48 := $store.i16($M.48, $add.ref($add.ref($add.ref(__constr_expr_3, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(6, 2)), 0);
    $M.48 := $store.i16($M.48, $add.ref($add.ref($add.ref(__constr_expr_3, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(7, 2)), 0);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(__constr_expr_3, $mul.ref(0, 32)), $mul.ref(24, 1)), .str.10);
    $M.49 := $store.i8($M.49, __constr_expr_2, 1);
    $M.49 := $store.i16($M.49, $add.ref($add.ref($add.ref(__constr_expr_2, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(0, 2)), 128);
    $M.49 := $store.i16($M.49, $add.ref($add.ref($add.ref(__constr_expr_2, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(1, 2)), $sub.i16(0, 64));
    $M.49 := $store.i16($M.49, $add.ref($add.ref($add.ref(__constr_expr_2, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(2, 2)), $sub.i16(0, 32));
    $M.49 := $store.i16($M.49, $add.ref($add.ref($add.ref(__constr_expr_2, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(3, 2)), $sub.i16(0, 16));
    $M.49 := $store.i16($M.49, $add.ref($add.ref($add.ref(__constr_expr_2, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(4, 2)), 0);
    $M.49 := $store.i16($M.49, $add.ref($add.ref($add.ref(__constr_expr_2, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(5, 2)), 0);
    $M.49 := $store.i16($M.49, $add.ref($add.ref($add.ref(__constr_expr_2, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(6, 2)), 0);
    $M.49 := $store.i16($M.49, $add.ref($add.ref($add.ref(__constr_expr_2, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(7, 2)), 0);
    $M.49 := $store.ref($M.49, $add.ref($add.ref(__constr_expr_2, $mul.ref(0, 32)), $mul.ref(24, 1)), .str.9);
    $M.50 := $store.i8($M.50, __constr_expr_1, 1);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__constr_expr_1, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(0, 2)), 1);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__constr_expr_1, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(1, 2)), 2);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__constr_expr_1, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(2, 2)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__constr_expr_1, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(3, 2)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__constr_expr_1, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(4, 2)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__constr_expr_1, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(5, 2)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__constr_expr_1, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(6, 2)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__constr_expr_1, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(7, 2)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(__constr_expr_1, $mul.ref(0, 32)), $mul.ref(24, 1)), .str.8);
    $M.51 := $store.i8($M.51, __constr_expr_0, 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__constr_expr_0, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(0, 2)), 4);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__constr_expr_0, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(1, 2)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__constr_expr_0, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(2, 2)), 2);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__constr_expr_0, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(3, 2)), 1);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__constr_expr_0, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(4, 2)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__constr_expr_0, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(5, 2)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__constr_expr_0, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(6, 2)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__constr_expr_0, $mul.ref(0, 32)), $mul.ref(2, 1)), $mul.ref(7, 2)), 0);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(__constr_expr_0, $mul.ref(0, 32)), $mul.ref(24, 1)), .str.7);
    $M.0 := $store.i16($M.0, hfcsusb_idtab, 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(2, 1)), 2393);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(4, 1)), 11216);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(0, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_0));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(2, 1)), 1653);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(4, 1)), 5768);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(1, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(2, 1)), 1968);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(4, 1)), 7);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(2, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_2));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(2, 1)), 1858);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(4, 1)), 8200);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(3, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_3));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(2, 1)), 1858);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(4, 1)), 8201);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(4, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_4));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(2, 1)), 1858);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(4, 1)), 8202);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(5, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_5));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(2, 1)), 2275);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(4, 1)), 769);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(6, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_6));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(2, 1)), 2042);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(4, 1)), 2118);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(7, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_7));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(2, 1)), 2042);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(4, 1)), 2119);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(8, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_8));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(2, 1)), 1968);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(4, 1)), 6);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(9, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_9));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(2, 1)), 1821);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(4, 1)), 4101);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(10, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_10));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(2, 1)), 1414);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(4, 1)), 258);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(11, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_11));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(2, 1)), 6887);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(4, 1)), 1317);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(12, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_12));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(13, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.20, 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(1, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(2, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(12, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(13, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(15, 1)), 43);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(17, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(19, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(22, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(23, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(24, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(25, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(26, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(27, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(28, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(29, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(30, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, .str.21, 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(1, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(2, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(12, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(13, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(15, 1)), 43);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(17, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(19, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(22, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(23, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(24, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(25, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(26, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(27, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(28, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(29, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(30, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, .str.22, 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(1, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(2, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(6, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(11, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(12, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(14, 1)), 43);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(16, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(18, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(20, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(21, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(22, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(23, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(24, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(25, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(26, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(27, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(28, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(29, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, .str.23, 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(1, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(2, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(6, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(11, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(12, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(14, 1)), 43);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(16, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(18, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(20, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(21, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(22, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(23, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(24, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(25, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(26, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(27, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(28, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(29, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, .str.33, 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 14)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 14)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 14)), $mul.ref(3, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 14)), $mul.ref(4, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 14)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 14)), $mul.ref(6, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 14)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 14)), $mul.ref(8, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 14)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 14)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 14)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 14)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.34, 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 17)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 17)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 17)), $mul.ref(3, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 17)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 17)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 17)), $mul.ref(6, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 17)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 17)), $mul.ref(8, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 17)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 17)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 17)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 17)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 17)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 17)), $mul.ref(14, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 17)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.35, 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(3, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(4, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(6, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(8, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(14, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(19, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(20, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(23, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(24, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(25, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, .str.36, 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(3, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(4, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(6, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(8, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(12, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.37, 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(3, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(4, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(6, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(8, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(14, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(21, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(22, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(23, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(24, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(25, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(26, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(27, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, .str.47, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(1, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(3, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(4, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(6, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(8, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.48, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(1, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(3, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(6, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(8, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.49, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 16)), $mul.ref(1, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 16)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 16)), $mul.ref(3, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 16)), $mul.ref(4, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 16)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 16)), $mul.ref(6, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 16)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 16)), $mul.ref(8, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 16)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 16)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 16)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 16)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 16)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 16)), $mul.ref(14, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.50, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 20)), $mul.ref(1, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 20)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 20)), $mul.ref(3, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 20)), $mul.ref(4, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 20)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 20)), $mul.ref(6, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 20)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 20)), $mul.ref(8, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 20)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 20)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 20)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 20)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 20)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 20)), $mul.ref(14, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 20)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 20)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 20)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 20)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.51, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 24)), $mul.ref(1, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 24)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 24)), $mul.ref(3, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 24)), $mul.ref(4, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 24)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 24)), $mul.ref(6, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 24)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 24)), $mul.ref(8, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 24)), $mul.ref(9, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 24)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 24)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 24)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 24)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 24)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 24)), $mul.ref(15, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 24)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 24)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 24)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 24)), $mul.ref(19, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 24)), $mul.ref(20, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 24)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 24)), $mul.ref(22, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.52, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(1, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(3, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(6, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(8, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(14, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(15, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(18, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(19, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(20, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(21, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(22, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(23, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(24, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.53, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 21)), $mul.ref(1, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 21)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 21)), $mul.ref(3, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 21)), $mul.ref(4, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 21)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 21)), $mul.ref(6, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 21)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 21)), $mul.ref(8, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 21)), $mul.ref(9, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 21)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 21)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 21)), $mul.ref(12, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 21)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 21)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 21)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 21)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 21)), $mul.ref(17, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 21)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 21)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.54, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 18)), $mul.ref(1, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 18)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 18)), $mul.ref(3, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 18)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 18)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 18)), $mul.ref(6, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 18)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 18)), $mul.ref(8, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 18)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 18)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 18)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 18)), $mul.ref(12, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 18)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 18)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 18)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 18)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.55, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(1, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(3, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(6, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(8, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(13, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(16, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(17, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(18, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(19, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.92, 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(8, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(10, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(18, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(21, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(22, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(23, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(24, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(25, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(26, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(27, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(28, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(29, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(30, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(31, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(32, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(33, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(34, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(35, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(36, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(37, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(38, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(39, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(40, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(41, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(42, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(43, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(44, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(45, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(46, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 48)), $mul.ref(47, 1)), 0);
    $M.0 := $store.i8($M.0, .str.93, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(1, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(4, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(19, 1)), 39);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(21, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(22, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(23, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(24, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(25, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(26, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(27, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(28, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(29, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(30, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(31, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(32, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(33, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(34, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(35, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(36, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(37, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(38, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(39, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(40, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(41, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(42, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(43, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(44, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(45, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(46, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(47, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(48, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(49, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(50, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 52)), $mul.ref(51, 1)), 0);
    $M.0 := $store.i8($M.0, .str.94, 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(1, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(2, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(4, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(17, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(18, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(19, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(20, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(21, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(22, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(23, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(24, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(25, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(26, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(27, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(28, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(29, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, .str.95, 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(1, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(2, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(9, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(16, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(18, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(22, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(23, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(24, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(25, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(26, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(27, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(28, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(29, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(30, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(31, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(32, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(33, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(34, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(35, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(36, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 38)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, .str.96, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(4, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(8, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(12, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(19, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(20, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(22, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(24, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(25, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(26, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(27, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(28, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(29, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(30, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(31, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(32, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(33, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, .str.97, 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 19)), $mul.ref(1, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 19)), $mul.ref(2, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 19)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 19)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 19)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 19)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 19)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 19)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 19)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 19)), $mul.ref(10, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 19)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 19)), $mul.ref(12, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 19)), $mul.ref(13, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 19)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 19)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 19)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 19)), $mul.ref(17, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.98, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(4, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(7, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(9, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(10, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(11, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(13, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(16, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(19, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(22, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(23, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(24, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(25, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(26, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(28, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, .str.99, 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(2, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(3, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(13, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(15, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(19, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(20, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(21, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.100, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(5, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(19, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(21, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(22, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(24, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(25, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(26, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(28, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(29, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(30, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(31, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(32, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(33, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(34, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(35, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(36, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(37, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(38, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(39, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(40, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(41, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(42, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(43, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(44, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(45, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(46, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(47, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(48, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(49, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(50, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(51, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(52, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 54)), $mul.ref(53, 1)), 0);
    $M.0 := $store.i8($M.0, .str.101, 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 20)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 20)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 20)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 20)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 20)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 20)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 20)), $mul.ref(7, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 20)), $mul.ref(8, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 20)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 20)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 20)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 20)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 20)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 20)), $mul.ref(14, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 20)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 20)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 20)), $mul.ref(17, 1)), 63);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 20)), $mul.ref(18, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.102, 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(3, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(7, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(8, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(16, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(17, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(20, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(21, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(22, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(23, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(24, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(25, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(26, 1)), 63);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(27, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, .str.103, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 12)), $mul.ref(1, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 12)), $mul.ref(2, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 12)), $mul.ref(3, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 12)), $mul.ref(4, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 12)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 12)), $mul.ref(6, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 12)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 12)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 12)), $mul.ref(9, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 12)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.104, 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(1, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(2, 1)), 75);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(4, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(7, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(18, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(20, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(23, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(24, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(25, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(26, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(27, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(28, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, .str.105, 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 17)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 17)), $mul.ref(2, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 17)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 17)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 17)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 17)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 17)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 17)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 17)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 17)), $mul.ref(10, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 17)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 17)), $mul.ref(12, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 17)), $mul.ref(13, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 17)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 17)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.4, 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 10)), $mul.ref(1, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 10)), $mul.ref(2, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 10)), $mul.ref(3, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 10)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 10)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 10)), $mul.ref(6, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 10)), $mul.ref(7, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 10)), $mul.ref(8, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.155, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 11)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 11)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 11)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 11)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 11)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 11)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 11)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 11)), $mul.ref(8, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 11)), $mul.ref(9, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.133, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 19)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 19)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 19)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 19)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 19)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 19)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 19)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 19)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 19)), $mul.ref(9, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 19)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 19)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 19)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 19)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 19)), $mul.ref(14, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 19)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 19)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 19)), $mul.ref(17, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.130, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 19)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 19)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 19)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 19)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 19)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 19)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 19)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 19)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 19)), $mul.ref(9, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 19)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 19)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 19)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 19)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 19)), $mul.ref(14, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 19)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 19)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 19)), $mul.ref(17, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.39, 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 11)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 11)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 11)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 11)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 11)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 11)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 11)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 11)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 11)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.43, 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 10)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 10)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 10)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 10)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 10)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 10)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 10)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 10)), $mul.ref(8, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.44, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(16, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.1, 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(6, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(11, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.52 := $store.i8($M.52, .str.3, 37);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.3, $mul.ref(0, 3)), $mul.ref(1, 1)), 115);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.3, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, .str.25, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.53 := $store.i8($M.53, .str.28, 37);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.28, $mul.ref(0, 6)), $mul.ref(1, 1)), 115);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.28, $mul.ref(0, 6)), $mul.ref(2, 1)), 46);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.28, $mul.ref(0, 6)), $mul.ref(3, 1)), 37);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.28, $mul.ref(0, 6)), $mul.ref(4, 1)), 100);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.28, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.148, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(6, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(7, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(12, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.152, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 14)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 14)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 14)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 14)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 14)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 14)), $mul.ref(6, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 14)), $mul.ref(7, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 14)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 14)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 14)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 14)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 14)), $mul.ref(12, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.151, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 14)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 14)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 14)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 14)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 14)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 14)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 14)), $mul.ref(7, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 14)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 14)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 14)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 14)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 14)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.144, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 20)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 20)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 20)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 20)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 20)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 20)), $mul.ref(6, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 20)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 20)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 20)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 20)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 20)), $mul.ref(11, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 20)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 20)), $mul.ref(13, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 20)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 20)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 20)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 20)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 20)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.141, 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 18)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 18)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 18)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 18)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 18)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 18)), $mul.ref(6, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 18)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 18)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 18)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 18)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 18)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 18)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 18)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 18)), $mul.ref(14, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 18)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 18)), $mul.ref(16, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.138, 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 13)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 13)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 13)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 13)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 13)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 13)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 13)), $mul.ref(8, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 13)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 13)), $mul.ref(10, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 13)), $mul.ref(11, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.114, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.91, 60);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(3, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(6, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(9, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(10, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(11, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(13, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(18, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.87, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(12, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.107, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.79, 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 17)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 17)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 17)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 17)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 17)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 17)), $mul.ref(6, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 17)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 17)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 17)), $mul.ref(9, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 17)), $mul.ref(11, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 17)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 17)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 17)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 17)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.70, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 15)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 15)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 15)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 15)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 15)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 15)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 15)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 15)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 15)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 15)), $mul.ref(10, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 15)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 15)), $mul.ref(12, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 15)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.73, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 16)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 16)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 16)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 16)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 16)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 16)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 16)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 16)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 16)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 16)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 16)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 16)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.63, 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 10)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 10)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 10)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 10)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 10)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 10)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 10)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 10)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.136, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 13)), $mul.ref(1, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 13)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 13)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 13)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 13)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 13)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 13)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 13)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 13)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 13)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.127, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(7, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.67, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 14)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 14)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 14)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 14)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 14)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 14)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 14)), $mul.ref(7, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 14)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 14)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 14)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 14)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 14)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.60, 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 3)), $mul.ref(1, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, .str.59, 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 3)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, .str.125, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 12)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 12)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 12)), $mul.ref(3, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 12)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 12)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 12)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 12)), $mul.ref(7, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 12)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 12)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 12)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.122, 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 15)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 15)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 15)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 15)), $mul.ref(5, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 15)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 15)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 15)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 15)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 15)), $mul.ref(10, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 15)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 15)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 15)), $mul.ref(13, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.57, 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(8, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(10, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(11, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.41, 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(6, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(9, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(17, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.45, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 12)), $mul.ref(1, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 12)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 12)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 12)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 12)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 12)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 12)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 12)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 12)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 12)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.31, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(1, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    call {:si_unique_call 397} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 407895);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 408927);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 409959);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.5, $M.37, $M.0, $M.38, $M.3, $M.6, $M.9, $M.12, $M.11, $M.15, $M.14, $M.4, $M.2, $M.1, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 398} __SMACK_static_init();
    call {:si_unique_call 399} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.17, $M.18, $M.19, $M.1, $M.0, $M.20, $M.3, $M.22, $M.16, $M.21, $M.5, $M.37, $M.38, $M.6, $M.9, $M.12, $M.11, $M.15, $M.14, $M.4, $M.2, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $CurrAddr;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation hfcsusb_probe_loop_$bb105(in_$p3: ref, in_$p194: ref, in_$p195: ref, in_$i203: i64, in_$p206: ref, in_$p217: ref, in_$i218: i8, in_$i219: i32, in_$i220: i32, in_$i221: i32, in_$i222: i32, in_$i223: i32, in_$i224: i1, in_$i225: i32, in_$i226: i32, in_$p227: ref, in_$p228: ref, in_$i229: i64, in_$i230: i64, in_$i232: i64, in_$i233: i64, in_$p234: ref, in_$i235: i32, in_$i236: i1, in_$i237: i64, in_$i238: i64, in_$p239: ref, in_$i240: i32, in_$i241: i1, in_$p242: ref, in_$p247: ref, in_$i248: i8, in_$i249: i32, in_$i250: i1, in_$i251: i1, in_$i252: i1, in_$i253: i1, in_$p255: ref, in_$i256: i8, in_$i257: i32, in_$i258: i32, in_$i259: i32, in_$p260: ref, in_$p261: ref, in_$p263: ref, in_$i264: i16, in_$i265: i32, in_$i269: i32, in_$i270: i1, in_$p272: ref, in_$i273: i8, in_$i274: i32, in_$i275: i32, in_$i276: i32, in_$p277: ref, in_$p279: ref, in_$i280: i8, in_$i281: i32, in_$i282: i32, in_$i283: i32, in_$p284: ref, in_$p285: ref, in_$p287: ref, in_$i288: i16, in_$i289: i32, in_$i290: i32, in_$i291: i1, in_$p293: ref, in_$i294: i8, in_$i295: i32, in_$i296: i32, in_$i297: i32, in_$p298: ref, in_$p300: ref, in_$i301: i8, in_$i302: i32, in_$i303: i32, in_$p304: ref, in_$p305: ref, in_$p307: ref, in_$i308: i16, in_$i309: i32, in_$p310: ref, in_$p266: ref, in_$i267: i32, in_$i268: i32, in_$p311: ref, in_$i312: i32, in_$i313: i1, in_$i314: i32, in_$p315: ref, in_$p316: ref, in_$p318: ref, in_$i319: i16, in_$i320: i8, in_$p321: ref, in_$p323: ref, in_$i324: i8, in_$p325: ref, in_$p326: ref, in_$p243: ref, in_$i244: i32, in_$i245: i32, in_$i327: i32, in_$i328: i8, in_$i329: i32, in_$i330: i1, in_$i212: i32, in_$i213: i32, in_$p214: ref, in_$i215: i32, in_$i331: i32, in_$i332: i32) returns (out_$p217: ref, out_$i218: i8, out_$i219: i32, out_$i220: i32, out_$i221: i32, out_$i222: i32, out_$i223: i32, out_$i224: i1, out_$i225: i32, out_$i226: i32, out_$p227: ref, out_$p228: ref, out_$i229: i64, out_$i230: i64, out_$i232: i64, out_$i233: i64, out_$p234: ref, out_$i235: i32, out_$i236: i1, out_$i237: i64, out_$i238: i64, out_$p239: ref, out_$i240: i32, out_$i241: i1, out_$p242: ref, out_$p247: ref, out_$i248: i8, out_$i249: i32, out_$i250: i1, out_$i251: i1, out_$i252: i1, out_$i253: i1, out_$p255: ref, out_$i256: i8, out_$i257: i32, out_$i258: i32, out_$i259: i32, out_$p260: ref, out_$p261: ref, out_$p263: ref, out_$i264: i16, out_$i265: i32, out_$i269: i32, out_$i270: i1, out_$p272: ref, out_$i273: i8, out_$i274: i32, out_$i275: i32, out_$i276: i32, out_$p277: ref, out_$p279: ref, out_$i280: i8, out_$i281: i32, out_$i282: i32, out_$i283: i32, out_$p284: ref, out_$p285: ref, out_$p287: ref, out_$i288: i16, out_$i289: i32, out_$i290: i32, out_$i291: i1, out_$p293: ref, out_$i294: i8, out_$i295: i32, out_$i296: i32, out_$i297: i32, out_$p298: ref, out_$p300: ref, out_$i301: i8, out_$i302: i32, out_$i303: i32, out_$p304: ref, out_$p305: ref, out_$p307: ref, out_$i308: i16, out_$i309: i32, out_$p310: ref, out_$p266: ref, out_$i267: i32, out_$i268: i32, out_$p311: ref, out_$i312: i32, out_$i313: i1, out_$i314: i32, out_$p315: ref, out_$p316: ref, out_$p318: ref, out_$i319: i16, out_$i320: i8, out_$p321: ref, out_$p323: ref, out_$i324: i8, out_$p325: ref, out_$p326: ref, out_$p243: ref, out_$i244: i32, out_$i245: i32, out_$i327: i32, out_$i328: i8, out_$i329: i32, out_$i330: i1, out_$i212: i32, out_$i213: i32, out_$p214: ref, out_$i215: i32, out_$i331: i32, out_$i332: i32)
{

  entry:
    out_$p217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$p227, out_$p228, out_$i229, out_$i230, out_$i232, out_$i233, out_$p234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$p242, out_$p247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$p255, out_$i256, out_$i257, out_$i258, out_$i259, out_$p260, out_$p261, out_$p263, out_$i264, out_$i265, out_$i269, out_$i270, out_$p272, out_$i273, out_$i274, out_$i275, out_$i276, out_$p277, out_$p279, out_$i280, out_$i281, out_$i282, out_$i283, out_$p284, out_$p285, out_$p287, out_$i288, out_$i289, out_$i290, out_$i291, out_$p293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$p300, out_$i301, out_$i302, out_$i303, out_$p304, out_$p305, out_$p307, out_$i308, out_$i309, out_$p310, out_$p266, out_$i267, out_$i268, out_$p311, out_$i312, out_$i313, out_$i314, out_$p315, out_$p316, out_$p318, out_$i319, out_$i320, out_$p321, out_$p323, out_$i324, out_$p325, out_$p326, out_$p243, out_$i244, out_$i245, out_$i327, out_$i328, out_$i329, out_$i330, out_$i212, out_$i213, out_$p214, out_$i215, out_$i331, out_$i332 := in_$p217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$i225, in_$i226, in_$p227, in_$p228, in_$i229, in_$i230, in_$i232, in_$i233, in_$p234, in_$i235, in_$i236, in_$i237, in_$i238, in_$p239, in_$i240, in_$i241, in_$p242, in_$p247, in_$i248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i253, in_$p255, in_$i256, in_$i257, in_$i258, in_$i259, in_$p260, in_$p261, in_$p263, in_$i264, in_$i265, in_$i269, in_$i270, in_$p272, in_$i273, in_$i274, in_$i275, in_$i276, in_$p277, in_$p279, in_$i280, in_$i281, in_$i282, in_$i283, in_$p284, in_$p285, in_$p287, in_$i288, in_$i289, in_$i290, in_$i291, in_$p293, in_$i294, in_$i295, in_$i296, in_$i297, in_$p298, in_$p300, in_$i301, in_$i302, in_$i303, in_$p304, in_$p305, in_$p307, in_$i308, in_$i309, in_$p310, in_$p266, in_$i267, in_$i268, in_$p311, in_$i312, in_$i313, in_$i314, in_$p315, in_$p316, in_$p318, in_$i319, in_$i320, in_$p321, in_$p323, in_$i324, in_$p325, in_$p326, in_$p243, in_$i244, in_$i245, in_$i327, in_$i328, in_$i329, in_$i330, in_$i212, in_$i213, in_$p214, in_$i215, in_$i331, in_$i332;
    goto $bb105, exit;

  $bb105:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_261;

  $bb139:
    assume out_$i330 == 1;
    assume {:verifier.code 0} true;
    out_$i212, out_$i213, out_$p214, out_$i215 := out_$i245, out_$i244, out_$p243, out_$i327;
    goto $bb139_dummy;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    out_$i331, out_$i332 := out_$i244, out_$i245;
    assume true;
    goto $bb139;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    out_$i330 := $sgt.i32(out_$i329, out_$i327);
    goto corral_source_split_296;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    out_$i329 := $zext.i8.i32(out_$i328);
    goto corral_source_split_295;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    out_$i328 := $load.i8($M.0, in_$p206);
    goto corral_source_split_294;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    out_$i327 := $add.i32(out_$i215, 1);
    call {:si_unique_call 22} {:cexpr "i"} boogie_si_record_i32(out_$i327);
    goto corral_source_split_293;

  $bb115:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_292;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    out_$p243, out_$i244, out_$i245 := out_$p326, out_$i267, out_$i268;
    goto $bb115;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    out_$p243, out_$i244, out_$i245 := out_$p242, out_$i213, out_$i212;
    goto $bb115;

  $bb111:
    assume {:verifier.code 0} true;
    out_$p242 := $add.ref(out_$p214, $mul.ref(1, 72));
    goto corral_source_split_285;

  $bb113:
    assume {:verifier.code 0} true;
    assume out_$i241 == 1;
    goto $bb111;

  $bb110:
    assume {:verifier.code 0} true;
    assume out_$i236 == 1;
    goto $bb111;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb112;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    out_$i236 := $eq.i32(out_$i235, 2);
    goto corral_source_split_283;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    out_$i235 := $load.i32($M.1, out_$p234);
    goto corral_source_split_282;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    out_$i232 := $sext.i32.i64(out_$i226);
    out_$i233 := $add.i64(in_$i203, out_$i232);
    out_$p234 := $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(out_$i233, 4));
    goto corral_source_split_281;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    goto corral_source_split_280;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    out_$i230 := $and.i64(out_$i229, 7);
    goto corral_source_split_279;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    out_$i229 := $sext.i32.i64(out_$i226);
    goto corral_source_split_278;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    out_$p228 := $bitcast.ref.ref(out_$p227);
    goto corral_source_split_277;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    out_$p227 := $add.ref($add.ref(in_$p195, $mul.ref(0, 9640)), $mul.ref(5176, 1));
    goto corral_source_split_276;

  $bb109:
    assume {:verifier.code 0} true;
    goto corral_source_split_275;

  $bb108:
    assume !(out_$i224 == 1);
    assume {:verifier.code 0} true;
    out_$i226 := out_$i222;
    goto $bb109;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    out_$i226 := out_$i225;
    goto $bb109;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    out_$i225 := $add.i32(out_$i222, 1);
    call {:si_unique_call 21} {:cexpr "idx"} boogie_si_record_i32(out_$i225);
    goto corral_source_split_273;

  $bb107:
    assume out_$i224 == 1;
    goto corral_source_split_272;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    out_$i224 := $ne.i32(out_$i223, 0);
    goto corral_source_split_270;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    out_$i223 := $and.i32(out_$i219, 128);
    goto corral_source_split_269;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    out_$i222 := $mul.i32(out_$i221, 2);
    call {:si_unique_call 20} {:cexpr "idx"} boogie_si_record_i32(out_$i222);
    goto corral_source_split_268;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    out_$i221 := $add.i32(out_$i220, $sub.i32(0, 1));
    goto corral_source_split_267;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    out_$i220 := $and.i32(out_$i219, 127);
    goto corral_source_split_266;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    out_$i219 := $zext.i8.i32(out_$i218);
    call {:si_unique_call 19} {:cexpr "ep_addr"} boogie_si_record_i32(out_$i219);
    goto corral_source_split_265;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    out_$i218 := $load.i8($M.0, out_$p217);
    goto corral_source_split_264;

  $bb106:
    assume {:verifier.code 0} true;
    out_$p217 := $add.ref($add.ref($add.ref(out_$p214, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_263;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    goto $bb106;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    out_$i241 := $eq.i32(out_$i240, 1);
    goto corral_source_split_290;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    out_$i240 := $load.i32($M.1, out_$p239);
    goto corral_source_split_289;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    out_$i237 := $sext.i32.i64(out_$i226);
    out_$i238 := $add.i64(in_$i203, out_$i237);
    out_$p239 := $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(out_$i238, 4));
    goto corral_source_split_288;

  $bb112:
    assume !(out_$i236 == 1);
    goto corral_source_split_287;

  $bb138:
    assume {:verifier.code 0} true;
    out_$p326 := $add.ref(out_$p266, $mul.ref(1, 72));
    goto corral_source_split_392;

  $bb137:
    assume !(out_$i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p325, out_$i324);
    goto corral_source_split_390;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    out_$p325 := $add.ref($add.ref(out_$p228, $mul.ref(out_$i230, 512)), $mul.ref(28, 1));
    goto corral_source_split_389;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    out_$i324 := $load.i8($M.0, out_$p323);
    goto corral_source_split_388;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    out_$p323 := $add.ref($add.ref($add.ref(out_$p266, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_387;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p321, out_$i320);
    goto corral_source_split_386;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    out_$p321 := $add.ref($add.ref(out_$p228, $mul.ref(out_$i230, 512)), $mul.ref(20, 1));
    goto corral_source_split_385;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    out_$i320 := $trunc.i16.i8(out_$i319);
    goto corral_source_split_384;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    out_$i319 := $load.i16($M.0, out_$p318);
    goto corral_source_split_383;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    out_$p318 := $add.ref($add.ref($add.ref(out_$p266, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_382;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p316, in_$p194);
    goto corral_source_split_381;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    out_$p316 := $add.ref($add.ref(out_$p228, $mul.ref(out_$i230, 512)), $mul.ref(8, 1));
    goto corral_source_split_380;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p315, out_$i314);
    goto corral_source_split_379;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    out_$p315 := $add.ref($add.ref(out_$p228, $mul.ref(out_$i230, 512)), $mul.ref(0, 1));
    goto corral_source_split_378;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    out_$i314 := $and.i32(out_$i226, 7);
    goto corral_source_split_377;

  $bb136:
    assume out_$i313 == 1;
    goto corral_source_split_376;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    out_$i313 := $ne.i32(out_$i312, 0);
    goto corral_source_split_326;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    out_$i312 := $load.i32($M.0, out_$p311);
    goto corral_source_split_325;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    out_$p311 := $add.ref($add.ref(out_$p228, $mul.ref(out_$i230, 512)), $mul.ref(16, 1));
    goto corral_source_split_324;

  $bb127:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_323;

  $bb135:
    assume {:verifier.code 0} true;
    out_$p266, out_$i267, out_$i268 := out_$p214, out_$i213, out_$i212;
    goto $bb127;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    out_$p266, out_$i267, out_$i268 := out_$p214, out_$i213, out_$i265;
    goto $bb127;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    out_$p266, out_$i267, out_$i268 := out_$p214, out_$i213, out_$i289;
    goto $bb127;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    out_$p266, out_$i267, out_$i268 := out_$p214, out_$i309, out_$i212;
    goto $bb127;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    out_$i309 := $zext.i16.i32(out_$i308);
    call {:si_unique_call 35} {:cexpr "iso_packet_size"} boogie_si_record_i32(out_$i309);
    goto corral_source_split_371;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    out_$i308 := $load.i16($M.0, out_$p307);
    goto corral_source_split_370;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    out_$p307 := $add.ref($add.ref($add.ref(out_$p214, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_369;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p305, 2);
    goto corral_source_split_368;

  $bb133:
    assume {:verifier.code 0} true;
    out_$p305 := $add.ref($add.ref(out_$p228, $mul.ref(out_$i230, 512)), $mul.ref(172, 1));
    goto corral_source_split_367;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p304, out_$i303);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p298, out_$i297);
    goto corral_source_split_358;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    out_$p298 := $add.ref($add.ref(out_$p228, $mul.ref(out_$i230, 512)), $mul.ref(16, 1));
    goto corral_source_split_357;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    out_$i297 := $or.i32(out_$i296, 128);
    goto corral_source_split_356;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} out_$i296 := __create_pipe(in_$p3, out_$i295);
    call {:si_unique_call 32} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i296);
    goto corral_source_split_355;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    out_$i295 := $zext.i8.i32(out_$i294);
    goto corral_source_split_354;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    out_$i294 := $load.i8($M.0, out_$p293);
    goto corral_source_split_353;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    out_$p293 := $add.ref($add.ref($add.ref(out_$p214, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_352;

  $bb131:
    assume out_$i291 == 1;
    goto corral_source_split_351;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    out_$i291 := $ne.i32(out_$i290, 0);
    goto corral_source_split_321;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    out_$i290 := $and.i32(out_$i219, 128);
    goto corral_source_split_320;

  $bb125:
    assume out_$i253 == 1;
    goto corral_source_split_319;

  $bb118:
    assume out_$i250 == 1;
    assume {:verifier.code 0} true;
    out_$i253 := $eq.i32(out_$i249, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb117:
    assume {:verifier.code 0} true;
    out_$i250 := $slt.i32(out_$i249, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    out_$i249 := $zext.i8.i32(out_$i248);
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    out_$i248 := $load.i8($M.0, out_$p247);
    goto corral_source_split_299;

  $bb116:
    assume {:verifier.code 0} true;
    out_$p247 := $add.ref($add.ref($add.ref(out_$p214, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_298;

  $bb114:
    assume !(out_$i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    out_$p304 := $add.ref($add.ref(out_$p228, $mul.ref(out_$i230, 512)), $mul.ref(16, 1));
    goto corral_source_split_365;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} out_$i303 := __create_pipe(in_$p3, out_$i302);
    call {:si_unique_call 34} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i303);
    goto corral_source_split_364;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    out_$i302 := $zext.i8.i32(out_$i301);
    goto corral_source_split_363;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    out_$i301 := $load.i8($M.0, out_$p300);
    goto corral_source_split_362;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    out_$p300 := $add.ref($add.ref($add.ref(out_$p214, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_361;

  $bb132:
    assume !(out_$i291 == 1);
    goto corral_source_split_360;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    out_$i289 := $zext.i16.i32(out_$i288);
    call {:si_unique_call 30} {:cexpr "packet_size"} boogie_si_record_i32(out_$i289);
    goto corral_source_split_349;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    out_$i288 := $load.i16($M.0, out_$p287);
    goto corral_source_split_348;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    out_$p287 := $add.ref($add.ref($add.ref(out_$p214, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_347;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p285, 1);
    goto corral_source_split_346;

  $bb130:
    assume {:verifier.code 0} true;
    out_$p285 := $add.ref($add.ref(out_$p228, $mul.ref(out_$i230, 512)), $mul.ref(172, 1));
    goto corral_source_split_345;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p284, out_$i283);
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p277, out_$i276);
    goto corral_source_split_335;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    out_$p277 := $add.ref($add.ref(out_$p228, $mul.ref(out_$i230, 512)), $mul.ref(16, 1));
    goto corral_source_split_334;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    out_$i276 := $or.i32(out_$i275, $sub.i32(0, 1073741696));
    goto corral_source_split_333;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} out_$i275 := __create_pipe(in_$p3, out_$i274);
    call {:si_unique_call 27} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i275);
    goto corral_source_split_332;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    out_$i274 := $zext.i8.i32(out_$i273);
    goto corral_source_split_331;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    out_$i273 := $load.i8($M.0, out_$p272);
    goto corral_source_split_330;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    out_$p272 := $add.ref($add.ref($add.ref(out_$p214, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_329;

  $bb128:
    assume out_$i270 == 1;
    goto corral_source_split_328;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    out_$i270 := $ne.i32(out_$i269, 0);
    goto corral_source_split_303;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    out_$i269 := $and.i32(out_$i219, 128);
    goto corral_source_split_302;

  $bb120:
    assume out_$i251 == 1;
    goto corral_source_split_301;

  $bb119:
    assume !(out_$i250 == 1);
    assume {:verifier.code 0} true;
    out_$i251 := $slt.i32(out_$i249, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    out_$p284 := $add.ref($add.ref(out_$p228, $mul.ref(out_$i230, 512)), $mul.ref(16, 1));
    goto corral_source_split_343;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    out_$i283 := $or.i32(out_$i282, $sub.i32(0, 1073741824));
    goto corral_source_split_342;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} out_$i282 := __create_pipe(in_$p3, out_$i281);
    call {:si_unique_call 29} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i282);
    goto corral_source_split_341;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    out_$i281 := $zext.i8.i32(out_$i280);
    goto corral_source_split_340;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    out_$i280 := $load.i8($M.0, out_$p279);
    goto corral_source_split_339;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    out_$p279 := $add.ref($add.ref($add.ref(out_$p214, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_338;

  $bb129:
    assume !(out_$i270 == 1);
    goto corral_source_split_337;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    out_$i265 := $zext.i16.i32(out_$i264);
    call {:si_unique_call 25} {:cexpr "packet_size"} boogie_si_record_i32(out_$i265);
    goto corral_source_split_317;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    out_$i264 := $load.i16($M.0, out_$p263);
    goto corral_source_split_316;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    out_$p263 := $add.ref($add.ref($add.ref(out_$p214, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_315;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p261, 0);
    goto corral_source_split_314;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    out_$p261 := $add.ref($add.ref(out_$p228, $mul.ref(out_$i230, 512)), $mul.ref(172, 1));
    goto corral_source_split_313;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p260, out_$i259);
    goto corral_source_split_312;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    out_$p260 := $add.ref($add.ref(out_$p228, $mul.ref(out_$i230, 512)), $mul.ref(16, 1));
    goto corral_source_split_311;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    out_$i259 := $or.i32(out_$i258, 1073741952);
    goto corral_source_split_310;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} out_$i258 := __create_pipe(in_$p3, out_$i257);
    call {:si_unique_call 24} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i258);
    goto corral_source_split_309;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    out_$i257 := $zext.i8.i32(out_$i256);
    goto corral_source_split_308;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    out_$i256 := $load.i8($M.0, out_$p255);
    goto corral_source_split_307;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    out_$p255 := $add.ref($add.ref($add.ref(out_$p214, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_306;

  $bb122:
    assume out_$i252 == 1;
    goto corral_source_split_305;

  $bb121:
    assume !(out_$i251 == 1);
    assume {:verifier.code 0} true;
    out_$i252 := $eq.i32(out_$i249, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p310, 0);
    goto corral_source_split_374;

  $bb134:
    assume {:verifier.code 0} true;
    out_$p310 := $add.ref($add.ref(out_$p228, $mul.ref(out_$i230, 512)), $mul.ref(16, 1));
    goto corral_source_split_373;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb123:
    assume {:verifier.code 0} true;
    assume !(out_$i252 == 1);
    goto $bb124;

  $bb126:
    assume {:verifier.code 0} true;
    assume !(out_$i253 == 1);
    goto $bb124;

  $bb139_dummy:
    call {:si_unique_call 1} out_$p217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$p227, out_$p228, out_$i229, out_$i230, out_$i232, out_$i233, out_$p234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$p242, out_$p247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$p255, out_$i256, out_$i257, out_$i258, out_$i259, out_$p260, out_$p261, out_$p263, out_$i264, out_$i265, out_$i269, out_$i270, out_$p272, out_$i273, out_$i274, out_$i275, out_$i276, out_$p277, out_$p279, out_$i280, out_$i281, out_$i282, out_$i283, out_$p284, out_$p285, out_$p287, out_$i288, out_$i289, out_$i290, out_$i291, out_$p293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$p300, out_$i301, out_$i302, out_$i303, out_$p304, out_$p305, out_$p307, out_$i308, out_$i309, out_$p310, out_$p266, out_$i267, out_$i268, out_$p311, out_$i312, out_$i313, out_$i314, out_$p315, out_$p316, out_$p318, out_$i319, out_$i320, out_$p321, out_$p323, out_$i324, out_$p325, out_$p326, out_$p243, out_$i244, out_$i245, out_$i327, out_$i328, out_$i329, out_$i330, out_$i212, out_$i213, out_$p214, out_$i215, out_$i331, out_$i332 := hfcsusb_probe_loop_$bb105(in_$p3, in_$p194, in_$p195, in_$i203, in_$p206, out_$p217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$p227, out_$p228, out_$i229, out_$i230, out_$i232, out_$i233, out_$p234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$p242, out_$p247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$p255, out_$i256, out_$i257, out_$i258, out_$i259, out_$p260, out_$p261, out_$p263, out_$i264, out_$i265, out_$i269, out_$i270, out_$p272, out_$i273, out_$i274, out_$i275, out_$i276, out_$p277, out_$p279, out_$i280, out_$i281, out_$i282, out_$i283, out_$p284, out_$p285, out_$p287, out_$i288, out_$i289, out_$i290, out_$i291, out_$p293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$p300, out_$i301, out_$i302, out_$i303, out_$p304, out_$p305, out_$p307, out_$i308, out_$i309, out_$p310, out_$p266, out_$i267, out_$i268, out_$p311, out_$i312, out_$i313, out_$i314, out_$p315, out_$p316, out_$p318, out_$i319, out_$i320, out_$p321, out_$p323, out_$i324, out_$p325, out_$p326, out_$p243, out_$i244, out_$i245, out_$i327, out_$i328, out_$i329, out_$i330, out_$i212, out_$i213, out_$p214, out_$i215, out_$i331, out_$i332);
    return;

  exit:
    return;
}



procedure hfcsusb_probe_loop_$bb105(in_$p3: ref, in_$p194: ref, in_$p195: ref, in_$i203: i64, in_$p206: ref, in_$p217: ref, in_$i218: i8, in_$i219: i32, in_$i220: i32, in_$i221: i32, in_$i222: i32, in_$i223: i32, in_$i224: i1, in_$i225: i32, in_$i226: i32, in_$p227: ref, in_$p228: ref, in_$i229: i64, in_$i230: i64, in_$i232: i64, in_$i233: i64, in_$p234: ref, in_$i235: i32, in_$i236: i1, in_$i237: i64, in_$i238: i64, in_$p239: ref, in_$i240: i32, in_$i241: i1, in_$p242: ref, in_$p247: ref, in_$i248: i8, in_$i249: i32, in_$i250: i1, in_$i251: i1, in_$i252: i1, in_$i253: i1, in_$p255: ref, in_$i256: i8, in_$i257: i32, in_$i258: i32, in_$i259: i32, in_$p260: ref, in_$p261: ref, in_$p263: ref, in_$i264: i16, in_$i265: i32, in_$i269: i32, in_$i270: i1, in_$p272: ref, in_$i273: i8, in_$i274: i32, in_$i275: i32, in_$i276: i32, in_$p277: ref, in_$p279: ref, in_$i280: i8, in_$i281: i32, in_$i282: i32, in_$i283: i32, in_$p284: ref, in_$p285: ref, in_$p287: ref, in_$i288: i16, in_$i289: i32, in_$i290: i32, in_$i291: i1, in_$p293: ref, in_$i294: i8, in_$i295: i32, in_$i296: i32, in_$i297: i32, in_$p298: ref, in_$p300: ref, in_$i301: i8, in_$i302: i32, in_$i303: i32, in_$p304: ref, in_$p305: ref, in_$p307: ref, in_$i308: i16, in_$i309: i32, in_$p310: ref, in_$p266: ref, in_$i267: i32, in_$i268: i32, in_$p311: ref, in_$i312: i32, in_$i313: i1, in_$i314: i32, in_$p315: ref, in_$p316: ref, in_$p318: ref, in_$i319: i16, in_$i320: i8, in_$p321: ref, in_$p323: ref, in_$i324: i8, in_$p325: ref, in_$p326: ref, in_$p243: ref, in_$i244: i32, in_$i245: i32, in_$i327: i32, in_$i328: i8, in_$i329: i32, in_$i330: i1, in_$i212: i32, in_$i213: i32, in_$p214: ref, in_$i215: i32, in_$i331: i32, in_$i332: i32) returns (out_$p217: ref, out_$i218: i8, out_$i219: i32, out_$i220: i32, out_$i221: i32, out_$i222: i32, out_$i223: i32, out_$i224: i1, out_$i225: i32, out_$i226: i32, out_$p227: ref, out_$p228: ref, out_$i229: i64, out_$i230: i64, out_$i232: i64, out_$i233: i64, out_$p234: ref, out_$i235: i32, out_$i236: i1, out_$i237: i64, out_$i238: i64, out_$p239: ref, out_$i240: i32, out_$i241: i1, out_$p242: ref, out_$p247: ref, out_$i248: i8, out_$i249: i32, out_$i250: i1, out_$i251: i1, out_$i252: i1, out_$i253: i1, out_$p255: ref, out_$i256: i8, out_$i257: i32, out_$i258: i32, out_$i259: i32, out_$p260: ref, out_$p261: ref, out_$p263: ref, out_$i264: i16, out_$i265: i32, out_$i269: i32, out_$i270: i1, out_$p272: ref, out_$i273: i8, out_$i274: i32, out_$i275: i32, out_$i276: i32, out_$p277: ref, out_$p279: ref, out_$i280: i8, out_$i281: i32, out_$i282: i32, out_$i283: i32, out_$p284: ref, out_$p285: ref, out_$p287: ref, out_$i288: i16, out_$i289: i32, out_$i290: i32, out_$i291: i1, out_$p293: ref, out_$i294: i8, out_$i295: i32, out_$i296: i32, out_$i297: i32, out_$p298: ref, out_$p300: ref, out_$i301: i8, out_$i302: i32, out_$i303: i32, out_$p304: ref, out_$p305: ref, out_$p307: ref, out_$i308: i16, out_$i309: i32, out_$p310: ref, out_$p266: ref, out_$i267: i32, out_$i268: i32, out_$p311: ref, out_$i312: i32, out_$i313: i1, out_$i314: i32, out_$p315: ref, out_$p316: ref, out_$p318: ref, out_$i319: i16, out_$i320: i8, out_$p321: ref, out_$p323: ref, out_$i324: i8, out_$p325: ref, out_$p326: ref, out_$p243: ref, out_$i244: i32, out_$i245: i32, out_$i327: i32, out_$i328: i8, out_$i329: i32, out_$i330: i1, out_$i212: i32, out_$i213: i32, out_$p214: ref, out_$i215: i32, out_$i331: i32, out_$i332: i32);
  modifies $M.0;



implementation hfcsusb_probe_loop_$bb36(in_$p2: ref, in_$i82: i64, in_$p92: ref, in_$p101: ref, in_$i102: i8, in_$i103: i32, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i32, in_$p112: ref, in_$i113: i8, in_$i114: i32, in_$i115: i64, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$i119: i64, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i64, in_$p126: ref, in_$i127: i32, in_$i128: i1, in_$i129: i64, in_$p130: ref, in_$i131: i1, in_$i132: i64, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$i136: i64, in_$p137: ref, in_$i138: i1, in_$i139: i64, in_$p140: ref, in_$i141: i32, in_$i142: i1, in_$i143: i64, in_$p144: ref, in_$i145: i1, in_$p147: ref, in_$i148: i8, in_$i149: i32, in_$i150: i64, in_$p151: ref, in_$i152: i32, in_$i153: i1, in_$i154: i32, in_$i155: i32, in_$p156: ref, in_$i157: i32, in_$i158: i8, in_$i159: i32, in_$i160: i1, in_$p97: ref, in_$i98: i32, in_$i99: i32, in_$i161: i32) returns (out_$p101: ref, out_$i102: i8, out_$i103: i32, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i32, out_$p112: ref, out_$i113: i8, out_$i114: i32, out_$i115: i64, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$i119: i64, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i64, out_$p126: ref, out_$i127: i32, out_$i128: i1, out_$i129: i64, out_$p130: ref, out_$i131: i1, out_$i132: i64, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$i136: i64, out_$p137: ref, out_$i138: i1, out_$i139: i64, out_$p140: ref, out_$i141: i32, out_$i142: i1, out_$i143: i64, out_$p144: ref, out_$i145: i1, out_$p147: ref, out_$i148: i8, out_$i149: i32, out_$i150: i64, out_$p151: ref, out_$i152: i32, out_$i153: i1, out_$i154: i32, out_$i155: i32, out_$p156: ref, out_$i157: i32, out_$i158: i8, out_$i159: i32, out_$i160: i1, out_$p97: ref, out_$i98: i32, out_$i99: i32, out_$i161: i32)
{

  entry:
    out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$p144, out_$i145, out_$p147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p97, out_$i98, out_$i99, out_$i161 := in_$p101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p112, in_$i113, in_$i114, in_$i115, in_$p116, in_$i117, in_$i118, in_$i119, in_$p120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$p126, in_$i127, in_$i128, in_$i129, in_$p130, in_$i131, in_$i132, in_$p133, in_$i134, in_$i135, in_$i136, in_$p137, in_$i138, in_$i139, in_$p140, in_$i141, in_$i142, in_$i143, in_$p144, in_$i145, in_$p147, in_$i148, in_$i149, in_$i150, in_$p151, in_$i152, in_$i153, in_$i154, in_$i155, in_$p156, in_$i157, in_$i158, in_$i159, in_$i160, in_$p97, in_$i98, in_$i99, in_$i161;
    goto $bb36, exit;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_103;

  $bb71:
    assume out_$i160 == 1;
    assume {:verifier.code 0} true;
    out_$p97, out_$i98, out_$i99 := out_$p156, out_$i155, out_$i157;
    goto $bb71_dummy;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    out_$i161 := out_$i155;
    assume true;
    goto $bb71;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    out_$i160 := $sgt.i32(out_$i159, out_$i157);
    goto corral_source_split_192;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    out_$i159 := $zext.i8.i32(out_$i158);
    goto corral_source_split_191;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    out_$i158 := $load.i8($M.0, in_$p92);
    goto corral_source_split_190;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    out_$i157 := $add.i32(out_$i99, 1);
    call {:si_unique_call 14} {:cexpr "i"} boogie_si_record_i32(out_$i157);
    goto corral_source_split_189;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref(out_$p97, $mul.ref(1, 72));
    goto corral_source_split_188;

  $bb70:
    assume {:verifier.code 0} true;
    goto corral_source_split_187;

  $bb42:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    out_$i155 := out_$i98;
    goto $bb70;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    out_$i155 := out_$i154;
    goto $bb70;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_185;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i154 := out_$i123;
    goto $bb69;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    out_$i154 := 0;
    goto $bb69;

  $bb67:
    assume out_$i153 == 1;
    goto corral_source_split_183;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    out_$i153 := $slt.i32(out_$i149, out_$i152);
    goto corral_source_split_181;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i32($M.1, out_$p151);
    goto corral_source_split_180;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    out_$i149 := $zext.i8.i32(out_$i148);
    out_$i150 := $add.i64(in_$i82, 17);
    out_$p151 := $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(out_$i150, 4));
    goto corral_source_split_179;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    out_$i148 := $load.i8($M.0, out_$p147);
    goto corral_source_split_178;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref($add.ref(out_$p97, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_177;

  $bb64:
    assume out_$i145 == 1;
    goto corral_source_split_176;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i114, 3);
    goto corral_source_split_174;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p144, 1);
    goto corral_source_split_172;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i143, 4));
    goto corral_source_split_171;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    out_$i143 := $sext.i32.i64(out_$i110);
    goto corral_source_split_170;

  $bb61:
    assume out_$i142 == 1;
    goto corral_source_split_169;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i141, 3);
    goto corral_source_split_167;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i32($M.1, out_$p140);
    goto corral_source_split_166;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i139, 4));
    goto corral_source_split_165;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    out_$i139 := $sext.i32.i64(out_$i110);
    goto corral_source_split_164;

  $bb58:
    assume out_$i138 == 1;
    goto corral_source_split_163;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i32(out_$i114, 1);
    goto corral_source_split_161;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p137, 1);
    goto corral_source_split_159;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i136, 4));
    goto corral_source_split_158;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    out_$i136 := $sext.i32.i64(out_$i110);
    goto corral_source_split_157;

  $bb55:
    assume out_$i135 == 1;
    goto corral_source_split_156;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 4);
    goto corral_source_split_154;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    out_$i134 := $load.i32($M.1, out_$p133);
    goto corral_source_split_153;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i132, 4));
    goto corral_source_split_152;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    out_$i132 := $sext.i32.i64(out_$i110);
    goto corral_source_split_151;

  $bb52:
    assume out_$i131 == 1;
    goto corral_source_split_150;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i114, 2);
    goto corral_source_split_148;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p130, 1);
    goto corral_source_split_146;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i129, 4));
    goto corral_source_split_145;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    out_$i129 := $sext.i32.i64(out_$i110);
    goto corral_source_split_144;

  $bb49:
    assume out_$i128 == 1;
    goto corral_source_split_143;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i32(out_$i127, 5);
    goto corral_source_split_141;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    out_$i127 := $load.i32($M.1, out_$p126);
    goto corral_source_split_140;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i125, 4));
    goto corral_source_split_139;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    out_$i125 := $sext.i32.i64(out_$i110);
    goto corral_source_split_138;

  $bb46:
    assume out_$i124 == 1;
    goto corral_source_split_137;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    out_$i124 := $eq.i32(out_$i114, 3);
    goto corral_source_split_135;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_134;

  $bb44:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    out_$i123 := out_$i98;
    goto $bb45;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    out_$i123 := 0;
    goto $bb45;

  $bb43:
    assume out_$i122 == 1;
    goto corral_source_split_132;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 1);
    goto corral_source_split_130;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i32($M.1, out_$p120);
    goto corral_source_split_129;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i119, 4));
    goto corral_source_split_128;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    out_$i119 := $sext.i32.i64(out_$i110);
    goto corral_source_split_127;

  $bb41:
    assume out_$i118 == 1;
    goto corral_source_split_126;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i32(out_$i117, 2);
    goto corral_source_split_124;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i32($M.1, out_$p116);
    goto corral_source_split_123;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i115, 4));
    goto corral_source_split_122;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    out_$i115 := $sext.i32.i64(out_$i110);
    goto corral_source_split_121;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    out_$i114 := $zext.i8.i32(out_$i113);
    call {:si_unique_call 13} {:cexpr "attr"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_120;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i8($M.0, out_$p112);
    goto corral_source_split_119;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref($add.ref(out_$p97, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_118;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_117;

  $bb39:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    out_$i110 := out_$i106;
    goto $bb40;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    out_$i110 := out_$i109;
    goto $bb40;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    out_$i109 := $add.i32(out_$i106, 1);
    call {:si_unique_call 12} {:cexpr "idx"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_115;

  $bb38:
    assume out_$i108 == 1;
    goto corral_source_split_114;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i32(out_$i107, 0);
    goto corral_source_split_112;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    out_$i107 := $and.i32(out_$i103, 128);
    goto corral_source_split_111;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    out_$i106 := $mul.i32(out_$i105, 2);
    call {:si_unique_call 11} {:cexpr "idx"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_110;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    out_$i105 := $add.i32(out_$i104, $sub.i32(0, 1));
    goto corral_source_split_109;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    out_$i104 := $and.i32(out_$i103, 127);
    goto corral_source_split_108;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    out_$i103 := $zext.i8.i32(out_$i102);
    call {:si_unique_call 10} {:cexpr "ep_addr"} boogie_si_record_i32(out_$i103);
    goto corral_source_split_107;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i8($M.0, out_$p101);
    goto corral_source_split_106;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref($add.ref(out_$p97, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_105;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i124 == 1);
    goto $bb48;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(out_$i128 == 1);
    goto $bb48;

  $bb53:
    assume {:verifier.code 0} true;
    assume !(out_$i131 == 1);
    goto $bb54;

  $bb56:
    assume {:verifier.code 0} true;
    assume !(out_$i135 == 1);
    goto $bb54;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i138 == 1);
    goto $bb60;

  $bb62:
    assume {:verifier.code 0} true;
    assume !(out_$i142 == 1);
    goto $bb60;

  $bb65:
    assume {:verifier.code 0} true;
    assume !(out_$i145 == 1);
    goto $bb66;

  $bb68:
    assume {:verifier.code 0} true;
    assume !(out_$i153 == 1);
    goto $bb66;

  $bb71_dummy:
    call {:si_unique_call 1} out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$p144, out_$i145, out_$p147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p97, out_$i98, out_$i99, out_$i161 := hfcsusb_probe_loop_$bb36(in_$p2, in_$i82, in_$p92, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$p144, out_$i145, out_$p147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p97, out_$i98, out_$i99, out_$i161);
    return;

  exit:
    return;
}



procedure hfcsusb_probe_loop_$bb36(in_$p2: ref, in_$i82: i64, in_$p92: ref, in_$p101: ref, in_$i102: i8, in_$i103: i32, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i32, in_$p112: ref, in_$i113: i8, in_$i114: i32, in_$i115: i64, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$i119: i64, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i64, in_$p126: ref, in_$i127: i32, in_$i128: i1, in_$i129: i64, in_$p130: ref, in_$i131: i1, in_$i132: i64, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$i136: i64, in_$p137: ref, in_$i138: i1, in_$i139: i64, in_$p140: ref, in_$i141: i32, in_$i142: i1, in_$i143: i64, in_$p144: ref, in_$i145: i1, in_$p147: ref, in_$i148: i8, in_$i149: i32, in_$i150: i64, in_$p151: ref, in_$i152: i32, in_$i153: i1, in_$i154: i32, in_$i155: i32, in_$p156: ref, in_$i157: i32, in_$i158: i8, in_$i159: i32, in_$i160: i1, in_$p97: ref, in_$i98: i32, in_$i99: i32, in_$i161: i32) returns (out_$p101: ref, out_$i102: i8, out_$i103: i32, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i32, out_$p112: ref, out_$i113: i8, out_$i114: i32, out_$i115: i64, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$i119: i64, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i64, out_$p126: ref, out_$i127: i32, out_$i128: i1, out_$i129: i64, out_$p130: ref, out_$i131: i1, out_$i132: i64, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$i136: i64, out_$p137: ref, out_$i138: i1, out_$i139: i64, out_$p140: ref, out_$i141: i32, out_$i142: i1, out_$i143: i64, out_$p144: ref, out_$i145: i1, out_$p147: ref, out_$i148: i8, out_$i149: i32, out_$i150: i64, out_$p151: ref, out_$i152: i32, out_$i153: i1, out_$i154: i32, out_$i155: i32, out_$p156: ref, out_$i157: i32, out_$i158: i8, out_$i159: i32, out_$i160: i1, out_$p97: ref, out_$i98: i32, out_$i99: i32, out_$i161: i32);
  modifies $M.1;



implementation hfcsusb_probe_loop_$bb28(in_$p2: ref, in_$p66: ref, in_$i67: i64, in_$p68: ref, in_$i72: i32, in_$i82: i64, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i1, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p92: ref, in_$i93: i8, in_$i94: i32, in_$i95: i1, in_$p101: ref, in_$i102: i8, in_$i103: i32, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i32, in_$p112: ref, in_$i113: i8, in_$i114: i32, in_$i115: i64, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$i119: i64, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i64, in_$p126: ref, in_$i127: i32, in_$i128: i1, in_$i129: i64, in_$p130: ref, in_$i131: i1, in_$i132: i64, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$i136: i64, in_$p137: ref, in_$i138: i1, in_$i139: i64, in_$p140: ref, in_$i141: i32, in_$i142: i1, in_$i143: i64, in_$p144: ref, in_$i145: i1, in_$p147: ref, in_$i148: i8, in_$i149: i32, in_$i150: i64, in_$p151: ref, in_$i152: i32, in_$i153: i1, in_$i154: i32, in_$i155: i32, in_$p156: ref, in_$i157: i32, in_$i158: i8, in_$i159: i32, in_$i160: i1, in_$p97: ref, in_$i98: i32, in_$i99: i32, in_$i161: i32, in_$i96: i32, in_$p162: ref, in_$i163: i32, in_$i164: i1, in_$p165: ref, in_$i166: i32, in_$i167: i1, in_$i168: i32, in_$i169: i1, in_$i171: i1, in_$p172: ref, in_$i173: i32, in_$i174: i32, in_$p175: ref, in_$i176: i32, in_$i177: i32, in_$i178: i32, in_$i179: i64, in_$p181: ref, in_$i182: i32, in_$i183: i1, in_$i78: i32, in_$i79: i32, in_$p80: ref, in_$i81: i32, in_$p184: ref, in_$i185: i32, in_$i186: i32, in_$p390: ref, in_$i391: i32, in_$i392: i1, in_$p393: ref, in_$i394: i32, in_$i395: i1, in_$i396: i32, in_$p397: ref, in_$i398: i32, in_$i399: i1, in_$p400: ref, in_$i401: i32, in_$i402: i1, in_$i403: i32, in_$p404: ref, in_$i405: i32, in_$i406: i1, in_$p407: ref, in_$i408: i32, in_$i409: i1, in_$i410: i32, in_$p411: ref, in_$i412: i32, in_$i413: i1, in_$p414: ref, in_$i415: i32, in_$i416: i1, in_$i417: i32, in_$p418: ref, in_$i419: i32, in_$i420: i1, in_$p421: ref, in_$i422: i32, in_$i423: i1, in_$i424: i32, in_$p425: ref, in_$i426: i32, in_$i427: i1, in_$p428: ref, in_$i429: i32, in_$i430: i1, in_$i431: i32, in_$p432: ref, in_$i433: i32, in_$i434: i1, in_$p435: ref, in_$i436: i32, in_$i437: i1, in_$i438: i32, in_$p439: ref, in_$i440: i32, in_$i441: i1, in_$p442: ref, in_$i443: i32, in_$i444: i1, in_$i445: i32, in_$p446: ref, in_$i447: i32, in_$i448: i1, in_$p449: ref, in_$i450: i32, in_$i451: i1, in_$i452: i32, in_$p453: ref, in_$i454: i32, in_$i455: i1, in_$p456: ref, in_$i457: i32, in_$i458: i1, in_$i459: i32, in_$p460: ref, in_$i461: i32, in_$i462: i1, in_$p463: ref, in_$i464: i32, in_$i465: i1, in_$i466: i32, in_$p467: ref, in_$i468: i32, in_$i469: i1, in_$p470: ref, in_$i471: i32, in_$i472: i1, in_$i473: i32, in_$p474: ref, in_$i475: i32, in_$i476: i1, in_$p477: ref, in_$i478: i32, in_$i479: i1, in_$i480: i32, in_$p481: ref, in_$i482: i32, in_$i483: i1, in_$p484: ref, in_$i485: i32, in_$i486: i1, in_$i487: i32, in_$p488: ref, in_$i489: i32, in_$i490: i1, in_$p491: ref, in_$i492: i32, in_$i493: i1, in_$i170: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8) returns (out_$i82: i64, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i1, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p92: ref, out_$i93: i8, out_$i94: i32, out_$i95: i1, out_$p101: ref, out_$i102: i8, out_$i103: i32, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i32, out_$p112: ref, out_$i113: i8, out_$i114: i32, out_$i115: i64, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$i119: i64, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i64, out_$p126: ref, out_$i127: i32, out_$i128: i1, out_$i129: i64, out_$p130: ref, out_$i131: i1, out_$i132: i64, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$i136: i64, out_$p137: ref, out_$i138: i1, out_$i139: i64, out_$p140: ref, out_$i141: i32, out_$i142: i1, out_$i143: i64, out_$p144: ref, out_$i145: i1, out_$p147: ref, out_$i148: i8, out_$i149: i32, out_$i150: i64, out_$p151: ref, out_$i152: i32, out_$i153: i1, out_$i154: i32, out_$i155: i32, out_$p156: ref, out_$i157: i32, out_$i158: i8, out_$i159: i32, out_$i160: i1, out_$p97: ref, out_$i98: i32, out_$i99: i32, out_$i161: i32, out_$i96: i32, out_$p162: ref, out_$i163: i32, out_$i164: i1, out_$p165: ref, out_$i166: i32, out_$i167: i1, out_$i168: i32, out_$i169: i1, out_$i171: i1, out_$p172: ref, out_$i173: i32, out_$i174: i32, out_$p175: ref, out_$i176: i32, out_$i177: i32, out_$i178: i32, out_$i179: i64, out_$p181: ref, out_$i182: i32, out_$i183: i1, out_$i78: i32, out_$i79: i32, out_$p80: ref, out_$i81: i32, out_$p184: ref, out_$i185: i32, out_$i186: i32, out_$p390: ref, out_$i391: i32, out_$i392: i1, out_$p393: ref, out_$i394: i32, out_$i395: i1, out_$i396: i32, out_$p397: ref, out_$i398: i32, out_$i399: i1, out_$p400: ref, out_$i401: i32, out_$i402: i1, out_$i403: i32, out_$p404: ref, out_$i405: i32, out_$i406: i1, out_$p407: ref, out_$i408: i32, out_$i409: i1, out_$i410: i32, out_$p411: ref, out_$i412: i32, out_$i413: i1, out_$p414: ref, out_$i415: i32, out_$i416: i1, out_$i417: i32, out_$p418: ref, out_$i419: i32, out_$i420: i1, out_$p421: ref, out_$i422: i32, out_$i423: i1, out_$i424: i32, out_$p425: ref, out_$i426: i32, out_$i427: i1, out_$p428: ref, out_$i429: i32, out_$i430: i1, out_$i431: i32, out_$p432: ref, out_$i433: i32, out_$i434: i1, out_$p435: ref, out_$i436: i32, out_$i437: i1, out_$i438: i32, out_$p439: ref, out_$i440: i32, out_$i441: i1, out_$p442: ref, out_$i443: i32, out_$i444: i1, out_$i445: i32, out_$p446: ref, out_$i447: i32, out_$i448: i1, out_$p449: ref, out_$i450: i32, out_$i451: i1, out_$i452: i32, out_$p453: ref, out_$i454: i32, out_$i455: i1, out_$p456: ref, out_$i457: i32, out_$i458: i1, out_$i459: i32, out_$p460: ref, out_$i461: i32, out_$i462: i1, out_$p463: ref, out_$i464: i32, out_$i465: i1, out_$i466: i32, out_$p467: ref, out_$i468: i32, out_$i469: i1, out_$p470: ref, out_$i471: i32, out_$i472: i1, out_$i473: i32, out_$p474: ref, out_$i475: i32, out_$i476: i1, out_$p477: ref, out_$i478: i32, out_$i479: i1, out_$i480: i32, out_$p481: ref, out_$i482: i32, out_$i483: i1, out_$p484: ref, out_$i485: i32, out_$i486: i1, out_$i487: i32, out_$p488: ref, out_$i489: i32, out_$i490: i1, out_$p491: ref, out_$i492: i32, out_$i493: i1, out_$i170: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8)
{

  entry:
    out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p92, out_$i93, out_$i94, out_$i95, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$p144, out_$i145, out_$p147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p97, out_$i98, out_$i99, out_$i161, out_$i96, out_$p162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i171, out_$p172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p181, out_$i182, out_$i183, out_$i78, out_$i79, out_$p80, out_$i81, out_$p184, out_$i185, out_$i186, out_$p390, out_$i391, out_$i392, out_$p393, out_$i394, out_$i395, out_$i396, out_$p397, out_$i398, out_$i399, out_$p400, out_$i401, out_$i402, out_$i403, out_$p404, out_$i405, out_$i406, out_$p407, out_$i408, out_$i409, out_$i410, out_$p411, out_$i412, out_$i413, out_$p414, out_$i415, out_$i416, out_$i417, out_$p418, out_$i419, out_$i420, out_$p421, out_$i422, out_$i423, out_$i424, out_$p425, out_$i426, out_$i427, out_$p428, out_$i429, out_$i430, out_$i431, out_$p432, out_$i433, out_$i434, out_$p435, out_$i436, out_$i437, out_$i438, out_$p439, out_$i440, out_$i441, out_$p442, out_$i443, out_$i444, out_$i445, out_$p446, out_$i447, out_$i448, out_$p449, out_$i450, out_$i451, out_$i452, out_$p453, out_$i454, out_$i455, out_$p456, out_$i457, out_$i458, out_$i459, out_$p460, out_$i461, out_$i462, out_$p463, out_$i464, out_$i465, out_$i466, out_$p467, out_$i468, out_$i469, out_$p470, out_$i471, out_$i472, out_$i473, out_$p474, out_$i475, out_$i476, out_$p477, out_$i478, out_$i479, out_$i480, out_$p481, out_$i482, out_$i483, out_$p484, out_$i485, out_$i486, out_$i487, out_$p488, out_$i489, out_$i490, out_$p491, out_$i492, out_$i493, out_$i170, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5 := in_$i82, in_$p83, in_$p84, in_$p85, in_$i86, in_$p87, in_$p88, in_$p89, in_$p90, in_$p92, in_$i93, in_$i94, in_$i95, in_$p101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p112, in_$i113, in_$i114, in_$i115, in_$p116, in_$i117, in_$i118, in_$i119, in_$p120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$p126, in_$i127, in_$i128, in_$i129, in_$p130, in_$i131, in_$i132, in_$p133, in_$i134, in_$i135, in_$i136, in_$p137, in_$i138, in_$i139, in_$p140, in_$i141, in_$i142, in_$i143, in_$p144, in_$i145, in_$p147, in_$i148, in_$i149, in_$i150, in_$p151, in_$i152, in_$i153, in_$i154, in_$i155, in_$p156, in_$i157, in_$i158, in_$i159, in_$i160, in_$p97, in_$i98, in_$i99, in_$i161, in_$i96, in_$p162, in_$i163, in_$i164, in_$p165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i171, in_$p172, in_$i173, in_$i174, in_$p175, in_$i176, in_$i177, in_$i178, in_$i179, in_$p181, in_$i182, in_$i183, in_$i78, in_$i79, in_$p80, in_$i81, in_$p184, in_$i185, in_$i186, in_$p390, in_$i391, in_$i392, in_$p393, in_$i394, in_$i395, in_$i396, in_$p397, in_$i398, in_$i399, in_$p400, in_$i401, in_$i402, in_$i403, in_$p404, in_$i405, in_$i406, in_$p407, in_$i408, in_$i409, in_$i410, in_$p411, in_$i412, in_$i413, in_$p414, in_$i415, in_$i416, in_$i417, in_$p418, in_$i419, in_$i420, in_$p421, in_$i422, in_$i423, in_$i424, in_$p425, in_$i426, in_$i427, in_$p428, in_$i429, in_$i430, in_$i431, in_$p432, in_$i433, in_$i434, in_$p435, in_$i436, in_$i437, in_$i438, in_$p439, in_$i440, in_$i441, in_$p442, in_$i443, in_$i444, in_$i445, in_$p446, in_$i447, in_$i448, in_$p449, in_$i450, in_$i451, in_$i452, in_$p453, in_$i454, in_$i455, in_$p456, in_$i457, in_$i458, in_$i459, in_$p460, in_$i461, in_$i462, in_$p463, in_$i464, in_$i465, in_$i466, in_$p467, in_$i468, in_$i469, in_$p470, in_$i471, in_$i472, in_$i473, in_$p474, in_$i475, in_$i476, in_$p477, in_$i478, in_$i479, in_$i480, in_$p481, in_$i482, in_$i483, in_$p484, in_$i485, in_$i486, in_$i487, in_$p488, in_$i489, in_$i490, in_$p491, in_$i492, in_$i493, in_$i170, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1, in_cmdloc_dummy_var_2, in_cmdloc_dummy_var_3, in_cmdloc_dummy_var_4, in_cmdloc_dummy_var_5;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_80;

  $bb90:
    assume out_$i183 == 1;
    assume {:verifier.code 0} true;
    out_$i78, out_$i79, out_$p80, out_$i81 := out_$i177, out_$i176, out_$p175, out_$i178;
    goto $bb90_dummy;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    out_$p184, out_$i185, out_$i186 := out_$p175, out_$i176, out_$i177;
    assume true;
    goto $bb90;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    out_$i183 := $ne.i32(out_$i182, 0);
    goto corral_source_split_227;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    out_$i182 := $load.i32($M.1, out_$p181);
    goto corral_source_split_226;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(out_$i179, 76)), $mul.ref(0, 4));
    goto corral_source_split_225;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    out_$i179 := $sext.i32.i64(out_$i178);
    goto corral_source_split_224;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    out_$i178 := $add.i32(out_$i81, 1);
    call {:si_unique_call 15} {:cexpr "cfg_used"} boogie_si_record_i32(out_$i178);
    goto corral_source_split_223;

  $bb89:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_222;

  $bb85:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    out_$p175, out_$i176, out_$i177 := out_$p80, out_$i79, out_$i78;
    goto $bb89;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    out_$p175, out_$i176, out_$i177 := out_$p172, out_$i173, out_$i174;
    goto $bb89;

  $bb88:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_220;

  $bb87:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    out_$p172, out_$i173, out_$i174 := out_$p80, out_$i79, out_$i78;
    goto $bb88;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    out_$p172, out_$i173, out_$i174 := in_$p68, out_$i81, in_$i72;
    goto $bb88;

  $bb86:
    assume out_$i171 == 1;
    goto corral_source_split_218;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    out_$i171 := $slt.i32(out_$i79, out_$i81);
    goto corral_source_split_216;

  $bb84:
    assume out_$i169 == 1;
    goto corral_source_split_215;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb83:
    assume {:verifier.code 0} true;
    out_$i169 := $ne.i32(out_$i170, 0);
    goto corral_source_split_213;

  $bb251:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb248:
    assume {:verifier.code 0} true;
    out_$i170 := out_$i487;
    goto $bb251;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    out_$i170 := 0;
    goto $bb251;

  $bb249:
    assume out_$i493 == 1;
    goto corral_source_split_656;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    out_$i493 := $ne.i32(out_$i492, 1);
    goto corral_source_split_654;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    out_$i492 := $load.i32($M.1, out_$p491);
    goto corral_source_split_653;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    out_$p491 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(15, 4));
    goto corral_source_split_652;

  $bb246:
    assume out_$i490 == 1;
    goto corral_source_split_651;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    out_$i490 := $ne.i32(out_$i489, 2);
    goto corral_source_split_649;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    out_$i489 := $load.i32($M.1, out_$p488);
    goto corral_source_split_648;

  $bb245:
    assume {:verifier.code 0} true;
    out_$p488 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(15, 4));
    goto corral_source_split_647;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb244:
    assume {:verifier.code 0} true;
    goto corral_source_split_645;

  $bb241:
    assume {:verifier.code 0} true;
    out_$i487 := out_$i480;
    goto $bb244;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    out_$i487 := 0;
    goto $bb244;

  $bb242:
    assume out_$i486 == 1;
    goto corral_source_split_643;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    out_$i486 := $ne.i32(out_$i485, 1);
    goto corral_source_split_641;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    out_$i485 := $load.i32($M.1, out_$p484);
    goto corral_source_split_640;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    out_$p484 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(14, 4));
    goto corral_source_split_639;

  $bb239:
    assume out_$i483 == 1;
    goto corral_source_split_638;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    out_$i483 := $ne.i32(out_$i482, 2);
    goto corral_source_split_636;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    out_$i482 := $load.i32($M.1, out_$p481);
    goto corral_source_split_635;

  $bb238:
    assume {:verifier.code 0} true;
    out_$p481 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(14, 4));
    goto corral_source_split_634;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb237:
    assume {:verifier.code 0} true;
    goto corral_source_split_632;

  $bb234:
    assume {:verifier.code 0} true;
    out_$i480 := out_$i473;
    goto $bb237;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    out_$i480 := 0;
    goto $bb237;

  $bb235:
    assume out_$i479 == 1;
    goto corral_source_split_630;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    out_$i479 := $ne.i32(out_$i478, 1);
    goto corral_source_split_628;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    out_$i478 := $load.i32($M.1, out_$p477);
    goto corral_source_split_627;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    out_$p477 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(13, 4));
    goto corral_source_split_626;

  $bb232:
    assume out_$i476 == 1;
    goto corral_source_split_625;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    out_$i476 := $ne.i32(out_$i475, 2);
    goto corral_source_split_623;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    out_$i475 := $load.i32($M.1, out_$p474);
    goto corral_source_split_622;

  $bb231:
    assume {:verifier.code 0} true;
    out_$p474 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(13, 4));
    goto corral_source_split_621;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb230:
    assume {:verifier.code 0} true;
    goto corral_source_split_619;

  $bb227:
    assume {:verifier.code 0} true;
    out_$i473 := out_$i466;
    goto $bb230;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    out_$i473 := 0;
    goto $bb230;

  $bb228:
    assume out_$i472 == 1;
    goto corral_source_split_617;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    out_$i472 := $ne.i32(out_$i471, 1);
    goto corral_source_split_615;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    out_$i471 := $load.i32($M.1, out_$p470);
    goto corral_source_split_614;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    out_$p470 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(12, 4));
    goto corral_source_split_613;

  $bb225:
    assume out_$i469 == 1;
    goto corral_source_split_612;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    out_$i469 := $ne.i32(out_$i468, 2);
    goto corral_source_split_610;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    out_$i468 := $load.i32($M.1, out_$p467);
    goto corral_source_split_609;

  $bb224:
    assume {:verifier.code 0} true;
    out_$p467 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(12, 4));
    goto corral_source_split_608;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb223:
    assume {:verifier.code 0} true;
    goto corral_source_split_606;

  $bb220:
    assume {:verifier.code 0} true;
    out_$i466 := out_$i459;
    goto $bb223;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    out_$i466 := 0;
    goto $bb223;

  $bb221:
    assume out_$i465 == 1;
    goto corral_source_split_604;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    out_$i465 := $ne.i32(out_$i464, 1);
    goto corral_source_split_602;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    out_$i464 := $load.i32($M.1, out_$p463);
    goto corral_source_split_601;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    out_$p463 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(11, 4));
    goto corral_source_split_600;

  $bb218:
    assume out_$i462 == 1;
    goto corral_source_split_599;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    out_$i462 := $ne.i32(out_$i461, 2);
    goto corral_source_split_597;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    out_$i461 := $load.i32($M.1, out_$p460);
    goto corral_source_split_596;

  $bb217:
    assume {:verifier.code 0} true;
    out_$p460 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(11, 4));
    goto corral_source_split_595;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb216:
    assume {:verifier.code 0} true;
    goto corral_source_split_593;

  $bb213:
    assume {:verifier.code 0} true;
    out_$i459 := out_$i452;
    goto $bb216;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    out_$i459 := 0;
    goto $bb216;

  $bb214:
    assume out_$i458 == 1;
    goto corral_source_split_591;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    out_$i458 := $ne.i32(out_$i457, 1);
    goto corral_source_split_589;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    out_$i457 := $load.i32($M.1, out_$p456);
    goto corral_source_split_588;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    out_$p456 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(10, 4));
    goto corral_source_split_587;

  $bb211:
    assume out_$i455 == 1;
    goto corral_source_split_586;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    out_$i455 := $ne.i32(out_$i454, 2);
    goto corral_source_split_584;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    out_$i454 := $load.i32($M.1, out_$p453);
    goto corral_source_split_583;

  $bb210:
    assume {:verifier.code 0} true;
    out_$p453 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(10, 4));
    goto corral_source_split_582;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb209:
    assume {:verifier.code 0} true;
    goto corral_source_split_580;

  $bb206:
    assume {:verifier.code 0} true;
    out_$i452 := out_$i445;
    goto $bb209;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    out_$i452 := 0;
    goto $bb209;

  $bb207:
    assume out_$i451 == 1;
    goto corral_source_split_578;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    out_$i451 := $ne.i32(out_$i450, 1);
    goto corral_source_split_576;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    out_$i450 := $load.i32($M.1, out_$p449);
    goto corral_source_split_575;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    out_$p449 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(9, 4));
    goto corral_source_split_574;

  $bb204:
    assume out_$i448 == 1;
    goto corral_source_split_573;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    out_$i448 := $ne.i32(out_$i447, 2);
    goto corral_source_split_571;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    out_$i447 := $load.i32($M.1, out_$p446);
    goto corral_source_split_570;

  $bb203:
    assume {:verifier.code 0} true;
    out_$p446 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(9, 4));
    goto corral_source_split_569;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb202:
    assume {:verifier.code 0} true;
    goto corral_source_split_567;

  $bb199:
    assume {:verifier.code 0} true;
    out_$i445 := out_$i438;
    goto $bb202;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    out_$i445 := 0;
    goto $bb202;

  $bb200:
    assume out_$i444 == 1;
    goto corral_source_split_565;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    out_$i444 := $ne.i32(out_$i443, 1);
    goto corral_source_split_563;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    out_$i443 := $load.i32($M.1, out_$p442);
    goto corral_source_split_562;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    out_$p442 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(8, 4));
    goto corral_source_split_561;

  $bb197:
    assume out_$i441 == 1;
    goto corral_source_split_560;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    out_$i441 := $ne.i32(out_$i440, 2);
    goto corral_source_split_558;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    out_$i440 := $load.i32($M.1, out_$p439);
    goto corral_source_split_557;

  $bb196:
    assume {:verifier.code 0} true;
    out_$p439 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(8, 4));
    goto corral_source_split_556;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb195:
    assume {:verifier.code 0} true;
    goto corral_source_split_554;

  $bb192:
    assume {:verifier.code 0} true;
    out_$i438 := out_$i431;
    goto $bb195;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    out_$i438 := 0;
    goto $bb195;

  $bb193:
    assume out_$i437 == 1;
    goto corral_source_split_552;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    out_$i437 := $ne.i32(out_$i436, 1);
    goto corral_source_split_550;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    out_$i436 := $load.i32($M.1, out_$p435);
    goto corral_source_split_549;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    out_$p435 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(7, 4));
    goto corral_source_split_548;

  $bb190:
    assume out_$i434 == 1;
    goto corral_source_split_547;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    out_$i434 := $ne.i32(out_$i433, 2);
    goto corral_source_split_545;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    out_$i433 := $load.i32($M.1, out_$p432);
    goto corral_source_split_544;

  $bb189:
    assume {:verifier.code 0} true;
    out_$p432 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(7, 4));
    goto corral_source_split_543;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb188:
    assume {:verifier.code 0} true;
    goto corral_source_split_541;

  $bb185:
    assume {:verifier.code 0} true;
    out_$i431 := out_$i424;
    goto $bb188;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    out_$i431 := 0;
    goto $bb188;

  $bb186:
    assume out_$i430 == 1;
    goto corral_source_split_539;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    out_$i430 := $ne.i32(out_$i429, 1);
    goto corral_source_split_537;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    out_$i429 := $load.i32($M.1, out_$p428);
    goto corral_source_split_536;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    out_$p428 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(6, 4));
    goto corral_source_split_535;

  $bb183:
    assume out_$i427 == 1;
    goto corral_source_split_534;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    out_$i427 := $ne.i32(out_$i426, 2);
    goto corral_source_split_532;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    out_$i426 := $load.i32($M.1, out_$p425);
    goto corral_source_split_531;

  $bb182:
    assume {:verifier.code 0} true;
    out_$p425 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(6, 4));
    goto corral_source_split_530;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb181:
    assume {:verifier.code 0} true;
    goto corral_source_split_528;

  $bb178:
    assume {:verifier.code 0} true;
    out_$i424 := out_$i417;
    goto $bb181;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    out_$i424 := 0;
    goto $bb181;

  $bb179:
    assume out_$i423 == 1;
    goto corral_source_split_526;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    out_$i423 := $ne.i32(out_$i422, 1);
    goto corral_source_split_524;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    out_$i422 := $load.i32($M.1, out_$p421);
    goto corral_source_split_523;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    out_$p421 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(5, 4));
    goto corral_source_split_522;

  $bb176:
    assume out_$i420 == 1;
    goto corral_source_split_521;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    out_$i420 := $ne.i32(out_$i419, 2);
    goto corral_source_split_519;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    out_$i419 := $load.i32($M.1, out_$p418);
    goto corral_source_split_518;

  $bb175:
    assume {:verifier.code 0} true;
    out_$p418 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(5, 4));
    goto corral_source_split_517;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb174:
    assume {:verifier.code 0} true;
    goto corral_source_split_515;

  $bb171:
    assume {:verifier.code 0} true;
    out_$i417 := out_$i410;
    goto $bb174;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    out_$i417 := 0;
    goto $bb174;

  $bb172:
    assume out_$i416 == 1;
    goto corral_source_split_513;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    out_$i416 := $ne.i32(out_$i415, 1);
    goto corral_source_split_511;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    out_$i415 := $load.i32($M.1, out_$p414);
    goto corral_source_split_510;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    out_$p414 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(4, 4));
    goto corral_source_split_509;

  $bb169:
    assume out_$i413 == 1;
    goto corral_source_split_508;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    out_$i413 := $ne.i32(out_$i412, 2);
    goto corral_source_split_506;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    out_$i412 := $load.i32($M.1, out_$p411);
    goto corral_source_split_505;

  $bb168:
    assume {:verifier.code 0} true;
    out_$p411 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(4, 4));
    goto corral_source_split_504;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb167:
    assume {:verifier.code 0} true;
    goto corral_source_split_502;

  $bb164:
    assume {:verifier.code 0} true;
    out_$i410 := out_$i403;
    goto $bb167;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    out_$i410 := 0;
    goto $bb167;

  $bb165:
    assume out_$i409 == 1;
    goto corral_source_split_500;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    out_$i409 := $ne.i32(out_$i408, 1);
    goto corral_source_split_498;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    out_$i408 := $load.i32($M.1, out_$p407);
    goto corral_source_split_497;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    out_$p407 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(3, 4));
    goto corral_source_split_496;

  $bb162:
    assume out_$i406 == 1;
    goto corral_source_split_495;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    out_$i406 := $ne.i32(out_$i405, 2);
    goto corral_source_split_493;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    out_$i405 := $load.i32($M.1, out_$p404);
    goto corral_source_split_492;

  $bb161:
    assume {:verifier.code 0} true;
    out_$p404 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(3, 4));
    goto corral_source_split_491;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb160:
    assume {:verifier.code 0} true;
    goto corral_source_split_489;

  $bb157:
    assume {:verifier.code 0} true;
    out_$i403 := out_$i396;
    goto $bb160;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    out_$i403 := 0;
    goto $bb160;

  $bb158:
    assume out_$i402 == 1;
    goto corral_source_split_487;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    out_$i402 := $ne.i32(out_$i401, 1);
    goto corral_source_split_485;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    out_$i401 := $load.i32($M.1, out_$p400);
    goto corral_source_split_484;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    out_$p400 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(2, 4));
    goto corral_source_split_483;

  $bb155:
    assume out_$i399 == 1;
    goto corral_source_split_482;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    out_$i399 := $ne.i32(out_$i398, 2);
    goto corral_source_split_480;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    out_$i398 := $load.i32($M.1, out_$p397);
    goto corral_source_split_479;

  $bb154:
    assume {:verifier.code 0} true;
    out_$p397 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(2, 4));
    goto corral_source_split_478;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb153:
    assume {:verifier.code 0} true;
    goto corral_source_split_476;

  $bb150:
    assume {:verifier.code 0} true;
    out_$i396 := out_$i168;
    goto $bb153;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    out_$i396 := 0;
    goto $bb153;

  $bb151:
    assume out_$i395 == 1;
    goto corral_source_split_474;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    out_$i395 := $ne.i32(out_$i394, 1);
    goto corral_source_split_472;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    out_$i394 := $load.i32($M.1, out_$p393);
    goto corral_source_split_471;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    out_$p393 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(1, 4));
    goto corral_source_split_470;

  $bb148:
    assume out_$i392 == 1;
    goto corral_source_split_469;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    out_$i392 := $ne.i32(out_$i391, 2);
    goto corral_source_split_211;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    out_$i391 := $load.i32($M.1, out_$p390);
    goto corral_source_split_210;

  $bb82:
    assume {:verifier.code 0} true;
    out_$p390 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(1, 4));
    goto corral_source_split_209;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb81:
    assume {:verifier.code 0} true;
    goto corral_source_split_207;

  $bb78:
    assume {:verifier.code 0} true;
    out_$i168 := out_$i96;
    goto $bb81;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    out_$i168 := 0;
    goto $bb81;

  $bb79:
    assume out_$i167 == 1;
    goto corral_source_split_205;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    out_$i167 := $ne.i32(out_$i166, 1);
    goto corral_source_split_203;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    out_$i166 := $load.i32($M.1, out_$p165);
    goto corral_source_split_202;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(0, 4));
    goto corral_source_split_201;

  $bb76:
    assume out_$i164 == 1;
    goto corral_source_split_200;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    out_$i164 := $ne.i32(out_$i163, 2);
    goto corral_source_split_198;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i32($M.1, out_$p162);
    goto corral_source_split_197;

  $bb75:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(0, 4));
    goto corral_source_split_196;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb34:
    assume {:verifier.code 0} true;
    assume !(out_$i95 == 1);
    goto $bb35;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    out_$i96 := out_$i161;
    goto $bb35;

  $bb72:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_194;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    out_$i161 := out_$i155;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    out_$i160 := $sgt.i32(out_$i159, out_$i157);
    goto corral_source_split_192;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    out_$i159 := $zext.i8.i32(out_$i158);
    goto corral_source_split_191;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    out_$i158 := $load.i8($M.0, out_$p92);
    goto corral_source_split_190;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    out_$i157 := $add.i32(out_$i99, 1);
    call {:si_unique_call 14} {:cexpr "i"} boogie_si_record_i32(out_$i157);
    goto corral_source_split_189;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref(out_$p97, $mul.ref(1, 72));
    goto corral_source_split_188;

  $bb70:
    assume {:verifier.code 0} true;
    goto corral_source_split_187;

  $bb42:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    out_$i155 := out_$i98;
    goto $bb70;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    out_$i155 := out_$i154;
    goto $bb70;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_185;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i154 := out_$i123;
    goto $bb69;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    out_$i154 := 0;
    goto $bb69;

  $bb67:
    assume out_$i153 == 1;
    goto corral_source_split_183;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    out_$i153 := $slt.i32(out_$i149, out_$i152);
    goto corral_source_split_181;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i32($M.1, out_$p151);
    goto corral_source_split_180;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    out_$i149 := $zext.i8.i32(out_$i148);
    out_$i150 := $add.i64(out_$i82, 17);
    out_$p151 := $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(out_$i150, 4));
    goto corral_source_split_179;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    out_$i148 := $load.i8($M.0, out_$p147);
    goto corral_source_split_178;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref($add.ref(out_$p97, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_177;

  $bb64:
    assume out_$i145 == 1;
    goto corral_source_split_176;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i114, 3);
    goto corral_source_split_174;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p144, 1);
    goto corral_source_split_172;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i143, 4));
    goto corral_source_split_171;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    out_$i143 := $sext.i32.i64(out_$i110);
    goto corral_source_split_170;

  $bb61:
    assume out_$i142 == 1;
    goto corral_source_split_169;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i141, 3);
    goto corral_source_split_167;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i32($M.1, out_$p140);
    goto corral_source_split_166;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i139, 4));
    goto corral_source_split_165;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    out_$i139 := $sext.i32.i64(out_$i110);
    goto corral_source_split_164;

  $bb58:
    assume out_$i138 == 1;
    goto corral_source_split_163;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i32(out_$i114, 1);
    goto corral_source_split_161;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p137, 1);
    goto corral_source_split_159;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i136, 4));
    goto corral_source_split_158;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    out_$i136 := $sext.i32.i64(out_$i110);
    goto corral_source_split_157;

  $bb55:
    assume out_$i135 == 1;
    goto corral_source_split_156;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 4);
    goto corral_source_split_154;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    out_$i134 := $load.i32($M.1, out_$p133);
    goto corral_source_split_153;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i132, 4));
    goto corral_source_split_152;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    out_$i132 := $sext.i32.i64(out_$i110);
    goto corral_source_split_151;

  $bb52:
    assume out_$i131 == 1;
    goto corral_source_split_150;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i114, 2);
    goto corral_source_split_148;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p130, 1);
    goto corral_source_split_146;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i129, 4));
    goto corral_source_split_145;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    out_$i129 := $sext.i32.i64(out_$i110);
    goto corral_source_split_144;

  $bb49:
    assume out_$i128 == 1;
    goto corral_source_split_143;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i32(out_$i127, 5);
    goto corral_source_split_141;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    out_$i127 := $load.i32($M.1, out_$p126);
    goto corral_source_split_140;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i125, 4));
    goto corral_source_split_139;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    out_$i125 := $sext.i32.i64(out_$i110);
    goto corral_source_split_138;

  $bb46:
    assume out_$i124 == 1;
    goto corral_source_split_137;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    out_$i124 := $eq.i32(out_$i114, 3);
    goto corral_source_split_135;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_134;

  $bb44:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    out_$i123 := out_$i98;
    goto $bb45;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    out_$i123 := 0;
    goto $bb45;

  $bb43:
    assume out_$i122 == 1;
    goto corral_source_split_132;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 1);
    goto corral_source_split_130;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i32($M.1, out_$p120);
    goto corral_source_split_129;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i119, 4));
    goto corral_source_split_128;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    out_$i119 := $sext.i32.i64(out_$i110);
    goto corral_source_split_127;

  $bb41:
    assume out_$i118 == 1;
    goto corral_source_split_126;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i32(out_$i117, 2);
    goto corral_source_split_124;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i32($M.1, out_$p116);
    goto corral_source_split_123;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i115, 4));
    goto corral_source_split_122;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    out_$i115 := $sext.i32.i64(out_$i110);
    goto corral_source_split_121;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    out_$i114 := $zext.i8.i32(out_$i113);
    call {:si_unique_call 13} {:cexpr "attr"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_120;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i8($M.0, out_$p112);
    goto corral_source_split_119;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref($add.ref(out_$p97, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_118;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_117;

  $bb39:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    out_$i110 := out_$i106;
    goto $bb40;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    out_$i110 := out_$i109;
    goto $bb40;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    out_$i109 := $add.i32(out_$i106, 1);
    call {:si_unique_call 12} {:cexpr "idx"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_115;

  $bb38:
    assume out_$i108 == 1;
    goto corral_source_split_114;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i32(out_$i107, 0);
    goto corral_source_split_112;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    out_$i107 := $and.i32(out_$i103, 128);
    goto corral_source_split_111;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    out_$i106 := $mul.i32(out_$i105, 2);
    call {:si_unique_call 11} {:cexpr "idx"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_110;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    out_$i105 := $add.i32(out_$i104, $sub.i32(0, 1));
    goto corral_source_split_109;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    out_$i104 := $and.i32(out_$i103, 127);
    goto corral_source_split_108;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    out_$i103 := $zext.i8.i32(out_$i102);
    call {:si_unique_call 10} {:cexpr "ep_addr"} boogie_si_record_i32(out_$i103);
    goto corral_source_split_107;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i8($M.0, out_$p101);
    goto corral_source_split_106;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref($add.ref(out_$p97, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_105;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb36:
    call out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$p144, out_$i145, out_$p147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p97, out_$i98, out_$i99, out_$i161 := hfcsusb_probe_loop_$bb36(in_$p2, out_$i82, out_$p92, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$p144, out_$i145, out_$p147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p97, out_$i98, out_$i99, out_$i161);
    goto $bb36_last;

  $bb36_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_103;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    out_$p97, out_$i98, out_$i99 := out_$p85, 1, 0;
    goto $bb36;

  $bb71:
    assume out_$i160 == 1;
    assume {:verifier.code 0} true;
    out_$p97, out_$i98, out_$i99 := out_$p156, out_$i155, out_$i157;
    assume false;
    return;

  $bb33:
    assume out_$i95 == 1;
    goto corral_source_split_101;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    out_$i96 := 1;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    out_$i95 := $sgt.i32(out_$i94, 0);
    goto corral_source_split_99;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    out_$i94 := $zext.i8.i32(out_$i93);
    goto corral_source_split_98;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i8($M.0, out_$p92);
    goto corral_source_split_97;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref($add.ref(in_$p66, $mul.ref(in_$i67, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_96;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_3 := $M.1;
    out_cmdloc_dummy_var_4 := $M.1;
    call {:si_unique_call 9} out_cmdloc_dummy_var_5 := $memcpy.i8(out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_$p89, out_$p90, 64, $zext.i32.i64(1), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_5;
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.1;
    out_cmdloc_dummy_var_1 := $M.1;
    call {:si_unique_call 8} out_cmdloc_dummy_var_2 := $memcpy.i8(out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_$p87, out_$p88, 64, $zext.i32.i64(1), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_2;
    goto corral_source_split_90;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    out_$p88 := $bitcast.ref.ref(out_$p83);
    goto corral_source_split_89;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    out_$p87 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_88;

  $bb30:
    assume out_$i86 == 1;
    goto corral_source_split_87;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    out_$i86 := $ugt.i64(64, 63);
    goto corral_source_split_85;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.0, out_$p84);
    goto corral_source_split_84;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p66, $mul.ref(in_$i67, 40)), $mul.ref(24, 1));
    goto corral_source_split_83;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i32.i64(out_$i81);
    out_$p83 := $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(out_$i82, 4));
    goto corral_source_split_82;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    out_$p90 := $bitcast.ref.ref(out_$p83);
    goto corral_source_split_94;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    out_$p89 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_93;

  $bb31:
    assume !(out_$i86 == 1);
    goto corral_source_split_92;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i124 == 1);
    goto $bb48;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(out_$i128 == 1);
    goto $bb48;

  $bb53:
    assume {:verifier.code 0} true;
    assume !(out_$i131 == 1);
    goto $bb54;

  $bb56:
    assume {:verifier.code 0} true;
    assume !(out_$i135 == 1);
    goto $bb54;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i138 == 1);
    goto $bb60;

  $bb62:
    assume {:verifier.code 0} true;
    assume !(out_$i142 == 1);
    goto $bb60;

  $bb65:
    assume {:verifier.code 0} true;
    assume !(out_$i145 == 1);
    goto $bb66;

  $bb68:
    assume {:verifier.code 0} true;
    assume !(out_$i153 == 1);
    goto $bb66;

  $bb77:
    assume {:verifier.code 0} true;
    assume !(out_$i164 == 1);
    goto $bb78;

  $bb80:
    assume {:verifier.code 0} true;
    assume !(out_$i167 == 1);
    goto $bb78;

  $bb149:
    assume {:verifier.code 0} true;
    assume !(out_$i392 == 1);
    goto $bb150;

  $bb152:
    assume {:verifier.code 0} true;
    assume !(out_$i395 == 1);
    goto $bb150;

  $bb156:
    assume {:verifier.code 0} true;
    assume !(out_$i399 == 1);
    goto $bb157;

  $bb159:
    assume {:verifier.code 0} true;
    assume !(out_$i402 == 1);
    goto $bb157;

  $bb163:
    assume {:verifier.code 0} true;
    assume !(out_$i406 == 1);
    goto $bb164;

  $bb166:
    assume {:verifier.code 0} true;
    assume !(out_$i409 == 1);
    goto $bb164;

  $bb170:
    assume {:verifier.code 0} true;
    assume !(out_$i413 == 1);
    goto $bb171;

  $bb173:
    assume {:verifier.code 0} true;
    assume !(out_$i416 == 1);
    goto $bb171;

  $bb177:
    assume {:verifier.code 0} true;
    assume !(out_$i420 == 1);
    goto $bb178;

  $bb180:
    assume {:verifier.code 0} true;
    assume !(out_$i423 == 1);
    goto $bb178;

  $bb184:
    assume {:verifier.code 0} true;
    assume !(out_$i427 == 1);
    goto $bb185;

  $bb187:
    assume {:verifier.code 0} true;
    assume !(out_$i430 == 1);
    goto $bb185;

  $bb191:
    assume {:verifier.code 0} true;
    assume !(out_$i434 == 1);
    goto $bb192;

  $bb194:
    assume {:verifier.code 0} true;
    assume !(out_$i437 == 1);
    goto $bb192;

  $bb198:
    assume {:verifier.code 0} true;
    assume !(out_$i441 == 1);
    goto $bb199;

  $bb201:
    assume {:verifier.code 0} true;
    assume !(out_$i444 == 1);
    goto $bb199;

  $bb205:
    assume {:verifier.code 0} true;
    assume !(out_$i448 == 1);
    goto $bb206;

  $bb208:
    assume {:verifier.code 0} true;
    assume !(out_$i451 == 1);
    goto $bb206;

  $bb212:
    assume {:verifier.code 0} true;
    assume !(out_$i455 == 1);
    goto $bb213;

  $bb215:
    assume {:verifier.code 0} true;
    assume !(out_$i458 == 1);
    goto $bb213;

  $bb219:
    assume {:verifier.code 0} true;
    assume !(out_$i462 == 1);
    goto $bb220;

  $bb222:
    assume {:verifier.code 0} true;
    assume !(out_$i465 == 1);
    goto $bb220;

  $bb226:
    assume {:verifier.code 0} true;
    assume !(out_$i469 == 1);
    goto $bb227;

  $bb229:
    assume {:verifier.code 0} true;
    assume !(out_$i472 == 1);
    goto $bb227;

  $bb233:
    assume {:verifier.code 0} true;
    assume !(out_$i476 == 1);
    goto $bb234;

  $bb236:
    assume {:verifier.code 0} true;
    assume !(out_$i479 == 1);
    goto $bb234;

  $bb240:
    assume {:verifier.code 0} true;
    assume !(out_$i483 == 1);
    goto $bb241;

  $bb243:
    assume {:verifier.code 0} true;
    assume !(out_$i486 == 1);
    goto $bb241;

  $bb247:
    assume {:verifier.code 0} true;
    assume !(out_$i490 == 1);
    goto $bb248;

  $bb250:
    assume {:verifier.code 0} true;
    assume !(out_$i493 == 1);
    goto $bb248;

  $bb90_dummy:
    call {:si_unique_call 1} out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p92, out_$i93, out_$i94, out_$i95, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$p144, out_$i145, out_$p147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p97, out_$i98, out_$i99, out_$i161, out_$i96, out_$p162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i171, out_$p172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p181, out_$i182, out_$i183, out_$i78, out_$i79, out_$p80, out_$i81, out_$p184, out_$i185, out_$i186, out_$p390, out_$i391, out_$i392, out_$p393, out_$i394, out_$i395, out_$i396, out_$p397, out_$i398, out_$i399, out_$p400, out_$i401, out_$i402, out_$i403, out_$p404, out_$i405, out_$i406, out_$p407, out_$i408, out_$i409, out_$i410, out_$p411, out_$i412, out_$i413, out_$p414, out_$i415, out_$i416, out_$i417, out_$p418, out_$i419, out_$i420, out_$p421, out_$i422, out_$i423, out_$i424, out_$p425, out_$i426, out_$i427, out_$p428, out_$i429, out_$i430, out_$i431, out_$p432, out_$i433, out_$i434, out_$p435, out_$i436, out_$i437, out_$i438, out_$p439, out_$i440, out_$i441, out_$p442, out_$i443, out_$i444, out_$i445, out_$p446, out_$i447, out_$i448, out_$p449, out_$i450, out_$i451, out_$i452, out_$p453, out_$i454, out_$i455, out_$p456, out_$i457, out_$i458, out_$i459, out_$p460, out_$i461, out_$i462, out_$p463, out_$i464, out_$i465, out_$i466, out_$p467, out_$i468, out_$i469, out_$p470, out_$i471, out_$i472, out_$i473, out_$p474, out_$i475, out_$i476, out_$p477, out_$i478, out_$i479, out_$i480, out_$p481, out_$i482, out_$i483, out_$p484, out_$i485, out_$i486, out_$i487, out_$p488, out_$i489, out_$i490, out_$p491, out_$i492, out_$i493, out_$i170, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5 := hfcsusb_probe_loop_$bb28(in_$p2, in_$p66, in_$i67, in_$p68, in_$i72, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p92, out_$i93, out_$i94, out_$i95, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$p144, out_$i145, out_$p147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p97, out_$i98, out_$i99, out_$i161, out_$i96, out_$p162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i171, out_$p172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p181, out_$i182, out_$i183, out_$i78, out_$i79, out_$p80, out_$i81, out_$p184, out_$i185, out_$i186, out_$p390, out_$i391, out_$i392, out_$p393, out_$i394, out_$i395, out_$i396, out_$p397, out_$i398, out_$i399, out_$p400, out_$i401, out_$i402, out_$i403, out_$p404, out_$i405, out_$i406, out_$p407, out_$i408, out_$i409, out_$i410, out_$p411, out_$i412, out_$i413, out_$p414, out_$i415, out_$i416, out_$i417, out_$p418, out_$i419, out_$i420, out_$p421, out_$i422, out_$i423, out_$i424, out_$p425, out_$i426, out_$i427, out_$p428, out_$i429, out_$i430, out_$i431, out_$p432, out_$i433, out_$i434, out_$p435, out_$i436, out_$i437, out_$i438, out_$p439, out_$i440, out_$i441, out_$p442, out_$i443, out_$i444, out_$i445, out_$p446, out_$i447, out_$i448, out_$p449, out_$i450, out_$i451, out_$i452, out_$p453, out_$i454, out_$i455, out_$p456, out_$i457, out_$i458, out_$i459, out_$p460, out_$i461, out_$i462, out_$p463, out_$i464, out_$i465, out_$i466, out_$p467, out_$i468, out_$i469, out_$p470, out_$i471, out_$i472, out_$i473, out_$p474, out_$i475, out_$i476, out_$p477, out_$i478, out_$i479, out_$i480, out_$p481, out_$i482, out_$i483, out_$p484, out_$i485, out_$i486, out_$i487, out_$p488, out_$i489, out_$i490, out_$p491, out_$i492, out_$i493, out_$i170, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5);
    return;

  exit:
    return;
}



procedure hfcsusb_probe_loop_$bb28(in_$p2: ref, in_$p66: ref, in_$i67: i64, in_$p68: ref, in_$i72: i32, in_$i82: i64, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i1, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p92: ref, in_$i93: i8, in_$i94: i32, in_$i95: i1, in_$p101: ref, in_$i102: i8, in_$i103: i32, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i32, in_$p112: ref, in_$i113: i8, in_$i114: i32, in_$i115: i64, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$i119: i64, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i64, in_$p126: ref, in_$i127: i32, in_$i128: i1, in_$i129: i64, in_$p130: ref, in_$i131: i1, in_$i132: i64, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$i136: i64, in_$p137: ref, in_$i138: i1, in_$i139: i64, in_$p140: ref, in_$i141: i32, in_$i142: i1, in_$i143: i64, in_$p144: ref, in_$i145: i1, in_$p147: ref, in_$i148: i8, in_$i149: i32, in_$i150: i64, in_$p151: ref, in_$i152: i32, in_$i153: i1, in_$i154: i32, in_$i155: i32, in_$p156: ref, in_$i157: i32, in_$i158: i8, in_$i159: i32, in_$i160: i1, in_$p97: ref, in_$i98: i32, in_$i99: i32, in_$i161: i32, in_$i96: i32, in_$p162: ref, in_$i163: i32, in_$i164: i1, in_$p165: ref, in_$i166: i32, in_$i167: i1, in_$i168: i32, in_$i169: i1, in_$i171: i1, in_$p172: ref, in_$i173: i32, in_$i174: i32, in_$p175: ref, in_$i176: i32, in_$i177: i32, in_$i178: i32, in_$i179: i64, in_$p181: ref, in_$i182: i32, in_$i183: i1, in_$i78: i32, in_$i79: i32, in_$p80: ref, in_$i81: i32, in_$p184: ref, in_$i185: i32, in_$i186: i32, in_$p390: ref, in_$i391: i32, in_$i392: i1, in_$p393: ref, in_$i394: i32, in_$i395: i1, in_$i396: i32, in_$p397: ref, in_$i398: i32, in_$i399: i1, in_$p400: ref, in_$i401: i32, in_$i402: i1, in_$i403: i32, in_$p404: ref, in_$i405: i32, in_$i406: i1, in_$p407: ref, in_$i408: i32, in_$i409: i1, in_$i410: i32, in_$p411: ref, in_$i412: i32, in_$i413: i1, in_$p414: ref, in_$i415: i32, in_$i416: i1, in_$i417: i32, in_$p418: ref, in_$i419: i32, in_$i420: i1, in_$p421: ref, in_$i422: i32, in_$i423: i1, in_$i424: i32, in_$p425: ref, in_$i426: i32, in_$i427: i1, in_$p428: ref, in_$i429: i32, in_$i430: i1, in_$i431: i32, in_$p432: ref, in_$i433: i32, in_$i434: i1, in_$p435: ref, in_$i436: i32, in_$i437: i1, in_$i438: i32, in_$p439: ref, in_$i440: i32, in_$i441: i1, in_$p442: ref, in_$i443: i32, in_$i444: i1, in_$i445: i32, in_$p446: ref, in_$i447: i32, in_$i448: i1, in_$p449: ref, in_$i450: i32, in_$i451: i1, in_$i452: i32, in_$p453: ref, in_$i454: i32, in_$i455: i1, in_$p456: ref, in_$i457: i32, in_$i458: i1, in_$i459: i32, in_$p460: ref, in_$i461: i32, in_$i462: i1, in_$p463: ref, in_$i464: i32, in_$i465: i1, in_$i466: i32, in_$p467: ref, in_$i468: i32, in_$i469: i1, in_$p470: ref, in_$i471: i32, in_$i472: i1, in_$i473: i32, in_$p474: ref, in_$i475: i32, in_$i476: i1, in_$p477: ref, in_$i478: i32, in_$i479: i1, in_$i480: i32, in_$p481: ref, in_$i482: i32, in_$i483: i1, in_$p484: ref, in_$i485: i32, in_$i486: i1, in_$i487: i32, in_$p488: ref, in_$i489: i32, in_$i490: i1, in_$p491: ref, in_$i492: i32, in_$i493: i1, in_$i170: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8) returns (out_$i82: i64, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i1, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p92: ref, out_$i93: i8, out_$i94: i32, out_$i95: i1, out_$p101: ref, out_$i102: i8, out_$i103: i32, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i32, out_$p112: ref, out_$i113: i8, out_$i114: i32, out_$i115: i64, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$i119: i64, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i64, out_$p126: ref, out_$i127: i32, out_$i128: i1, out_$i129: i64, out_$p130: ref, out_$i131: i1, out_$i132: i64, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$i136: i64, out_$p137: ref, out_$i138: i1, out_$i139: i64, out_$p140: ref, out_$i141: i32, out_$i142: i1, out_$i143: i64, out_$p144: ref, out_$i145: i1, out_$p147: ref, out_$i148: i8, out_$i149: i32, out_$i150: i64, out_$p151: ref, out_$i152: i32, out_$i153: i1, out_$i154: i32, out_$i155: i32, out_$p156: ref, out_$i157: i32, out_$i158: i8, out_$i159: i32, out_$i160: i1, out_$p97: ref, out_$i98: i32, out_$i99: i32, out_$i161: i32, out_$i96: i32, out_$p162: ref, out_$i163: i32, out_$i164: i1, out_$p165: ref, out_$i166: i32, out_$i167: i1, out_$i168: i32, out_$i169: i1, out_$i171: i1, out_$p172: ref, out_$i173: i32, out_$i174: i32, out_$p175: ref, out_$i176: i32, out_$i177: i32, out_$i178: i32, out_$i179: i64, out_$p181: ref, out_$i182: i32, out_$i183: i1, out_$i78: i32, out_$i79: i32, out_$p80: ref, out_$i81: i32, out_$p184: ref, out_$i185: i32, out_$i186: i32, out_$p390: ref, out_$i391: i32, out_$i392: i1, out_$p393: ref, out_$i394: i32, out_$i395: i1, out_$i396: i32, out_$p397: ref, out_$i398: i32, out_$i399: i1, out_$p400: ref, out_$i401: i32, out_$i402: i1, out_$i403: i32, out_$p404: ref, out_$i405: i32, out_$i406: i1, out_$p407: ref, out_$i408: i32, out_$i409: i1, out_$i410: i32, out_$p411: ref, out_$i412: i32, out_$i413: i1, out_$p414: ref, out_$i415: i32, out_$i416: i1, out_$i417: i32, out_$p418: ref, out_$i419: i32, out_$i420: i1, out_$p421: ref, out_$i422: i32, out_$i423: i1, out_$i424: i32, out_$p425: ref, out_$i426: i32, out_$i427: i1, out_$p428: ref, out_$i429: i32, out_$i430: i1, out_$i431: i32, out_$p432: ref, out_$i433: i32, out_$i434: i1, out_$p435: ref, out_$i436: i32, out_$i437: i1, out_$i438: i32, out_$p439: ref, out_$i440: i32, out_$i441: i1, out_$p442: ref, out_$i443: i32, out_$i444: i1, out_$i445: i32, out_$p446: ref, out_$i447: i32, out_$i448: i1, out_$p449: ref, out_$i450: i32, out_$i451: i1, out_$i452: i32, out_$p453: ref, out_$i454: i32, out_$i455: i1, out_$p456: ref, out_$i457: i32, out_$i458: i1, out_$i459: i32, out_$p460: ref, out_$i461: i32, out_$i462: i1, out_$p463: ref, out_$i464: i32, out_$i465: i1, out_$i466: i32, out_$p467: ref, out_$i468: i32, out_$i469: i1, out_$p470: ref, out_$i471: i32, out_$i472: i1, out_$i473: i32, out_$p474: ref, out_$i475: i32, out_$i476: i1, out_$p477: ref, out_$i478: i32, out_$i479: i1, out_$i480: i32, out_$p481: ref, out_$i482: i32, out_$i483: i1, out_$p484: ref, out_$i485: i32, out_$i486: i1, out_$i487: i32, out_$p488: ref, out_$i489: i32, out_$i490: i1, out_$p491: ref, out_$i492: i32, out_$i493: i1, out_$i170: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8);
  modifies $M.1;



implementation hfcsusb_probe_loop_$bb23(in_$p0: ref, in_$p2: ref, in_$p55: ref, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$p68: ref, in_$p70: ref, in_$i71: i8, in_$i72: i32, in_$i73: i32, in_$i74: i1, in_$i82: i64, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i1, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p92: ref, in_$i93: i8, in_$i94: i32, in_$i95: i1, in_$p101: ref, in_$i102: i8, in_$i103: i32, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i32, in_$p112: ref, in_$i113: i8, in_$i114: i32, in_$i115: i64, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$i119: i64, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i64, in_$p126: ref, in_$i127: i32, in_$i128: i1, in_$i129: i64, in_$p130: ref, in_$i131: i1, in_$i132: i64, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$i136: i64, in_$p137: ref, in_$i138: i1, in_$i139: i64, in_$p140: ref, in_$i141: i32, in_$i142: i1, in_$i143: i64, in_$p144: ref, in_$i145: i1, in_$p147: ref, in_$i148: i8, in_$i149: i32, in_$i150: i64, in_$p151: ref, in_$i152: i32, in_$i153: i1, in_$i154: i32, in_$i155: i32, in_$p156: ref, in_$i157: i32, in_$i158: i8, in_$i159: i32, in_$i160: i1, in_$p97: ref, in_$i98: i32, in_$i99: i32, in_$i161: i32, in_$i96: i32, in_$p162: ref, in_$i163: i32, in_$i164: i1, in_$p165: ref, in_$i166: i32, in_$i167: i1, in_$i168: i32, in_$i169: i1, in_$i171: i1, in_$p172: ref, in_$i173: i32, in_$i174: i32, in_$p175: ref, in_$i176: i32, in_$i177: i32, in_$i178: i32, in_$i179: i64, in_$p181: ref, in_$i182: i32, in_$i183: i1, in_$i78: i32, in_$i79: i32, in_$p80: ref, in_$i81: i32, in_$p184: ref, in_$i185: i32, in_$i186: i32, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$i187: i32, in_$i188: i32, in_$i189: i1, in_$i61: i32, in_$i62: i32, in_$p63: ref, in_$i64: i32, in_$p190: ref, in_$i191: i32, in_$i192: i32, in_$p390: ref, in_$i391: i32, in_$i392: i1, in_$p393: ref, in_$i394: i32, in_$i395: i1, in_$i396: i32, in_$p397: ref, in_$i398: i32, in_$i399: i1, in_$p400: ref, in_$i401: i32, in_$i402: i1, in_$i403: i32, in_$p404: ref, in_$i405: i32, in_$i406: i1, in_$p407: ref, in_$i408: i32, in_$i409: i1, in_$i410: i32, in_$p411: ref, in_$i412: i32, in_$i413: i1, in_$p414: ref, in_$i415: i32, in_$i416: i1, in_$i417: i32, in_$p418: ref, in_$i419: i32, in_$i420: i1, in_$p421: ref, in_$i422: i32, in_$i423: i1, in_$i424: i32, in_$p425: ref, in_$i426: i32, in_$i427: i1, in_$p428: ref, in_$i429: i32, in_$i430: i1, in_$i431: i32, in_$p432: ref, in_$i433: i32, in_$i434: i1, in_$p435: ref, in_$i436: i32, in_$i437: i1, in_$i438: i32, in_$p439: ref, in_$i440: i32, in_$i441: i1, in_$p442: ref, in_$i443: i32, in_$i444: i1, in_$i445: i32, in_$p446: ref, in_$i447: i32, in_$i448: i1, in_$p449: ref, in_$i450: i32, in_$i451: i1, in_$i452: i32, in_$p453: ref, in_$i454: i32, in_$i455: i1, in_$p456: ref, in_$i457: i32, in_$i458: i1, in_$i459: i32, in_$p460: ref, in_$i461: i32, in_$i462: i1, in_$p463: ref, in_$i464: i32, in_$i465: i1, in_$i466: i32, in_$p467: ref, in_$i468: i32, in_$i469: i1, in_$p470: ref, in_$i471: i32, in_$i472: i1, in_$i473: i32, in_$p474: ref, in_$i475: i32, in_$i476: i1, in_$p477: ref, in_$i478: i32, in_$i479: i1, in_$i480: i32, in_$p481: ref, in_$i482: i32, in_$i483: i1, in_$p484: ref, in_$i485: i32, in_$i486: i1, in_$i487: i32, in_$p488: ref, in_$i489: i32, in_$i490: i1, in_$p491: ref, in_$i492: i32, in_$i493: i1, in_$i170: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8) returns (out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$p68: ref, out_$p70: ref, out_$i71: i8, out_$i72: i32, out_$i73: i32, out_$i74: i1, out_$i82: i64, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i1, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p92: ref, out_$i93: i8, out_$i94: i32, out_$i95: i1, out_$p101: ref, out_$i102: i8, out_$i103: i32, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i32, out_$p112: ref, out_$i113: i8, out_$i114: i32, out_$i115: i64, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$i119: i64, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i64, out_$p126: ref, out_$i127: i32, out_$i128: i1, out_$i129: i64, out_$p130: ref, out_$i131: i1, out_$i132: i64, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$i136: i64, out_$p137: ref, out_$i138: i1, out_$i139: i64, out_$p140: ref, out_$i141: i32, out_$i142: i1, out_$i143: i64, out_$p144: ref, out_$i145: i1, out_$p147: ref, out_$i148: i8, out_$i149: i32, out_$i150: i64, out_$p151: ref, out_$i152: i32, out_$i153: i1, out_$i154: i32, out_$i155: i32, out_$p156: ref, out_$i157: i32, out_$i158: i8, out_$i159: i32, out_$i160: i1, out_$p97: ref, out_$i98: i32, out_$i99: i32, out_$i161: i32, out_$i96: i32, out_$p162: ref, out_$i163: i32, out_$i164: i1, out_$p165: ref, out_$i166: i32, out_$i167: i1, out_$i168: i32, out_$i169: i1, out_$i171: i1, out_$p172: ref, out_$i173: i32, out_$i174: i32, out_$p175: ref, out_$i176: i32, out_$i177: i32, out_$i178: i32, out_$i179: i64, out_$p181: ref, out_$i182: i32, out_$i183: i1, out_$i78: i32, out_$i79: i32, out_$p80: ref, out_$i81: i32, out_$p184: ref, out_$i185: i32, out_$i186: i32, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$i187: i32, out_$i188: i32, out_$i189: i1, out_$i61: i32, out_$i62: i32, out_$p63: ref, out_$i64: i32, out_$p190: ref, out_$i191: i32, out_$i192: i32, out_$p390: ref, out_$i391: i32, out_$i392: i1, out_$p393: ref, out_$i394: i32, out_$i395: i1, out_$i396: i32, out_$p397: ref, out_$i398: i32, out_$i399: i1, out_$p400: ref, out_$i401: i32, out_$i402: i1, out_$i403: i32, out_$p404: ref, out_$i405: i32, out_$i406: i1, out_$p407: ref, out_$i408: i32, out_$i409: i1, out_$i410: i32, out_$p411: ref, out_$i412: i32, out_$i413: i1, out_$p414: ref, out_$i415: i32, out_$i416: i1, out_$i417: i32, out_$p418: ref, out_$i419: i32, out_$i420: i1, out_$p421: ref, out_$i422: i32, out_$i423: i1, out_$i424: i32, out_$p425: ref, out_$i426: i32, out_$i427: i1, out_$p428: ref, out_$i429: i32, out_$i430: i1, out_$i431: i32, out_$p432: ref, out_$i433: i32, out_$i434: i1, out_$p435: ref, out_$i436: i32, out_$i437: i1, out_$i438: i32, out_$p439: ref, out_$i440: i32, out_$i441: i1, out_$p442: ref, out_$i443: i32, out_$i444: i1, out_$i445: i32, out_$p446: ref, out_$i447: i32, out_$i448: i1, out_$p449: ref, out_$i450: i32, out_$i451: i1, out_$i452: i32, out_$p453: ref, out_$i454: i32, out_$i455: i1, out_$p456: ref, out_$i457: i32, out_$i458: i1, out_$i459: i32, out_$p460: ref, out_$i461: i32, out_$i462: i1, out_$p463: ref, out_$i464: i32, out_$i465: i1, out_$i466: i32, out_$p467: ref, out_$i468: i32, out_$i469: i1, out_$p470: ref, out_$i471: i32, out_$i472: i1, out_$i473: i32, out_$p474: ref, out_$i475: i32, out_$i476: i1, out_$p477: ref, out_$i478: i32, out_$i479: i1, out_$i480: i32, out_$p481: ref, out_$i482: i32, out_$i483: i1, out_$p484: ref, out_$i485: i32, out_$i486: i1, out_$i487: i32, out_$p488: ref, out_$i489: i32, out_$i490: i1, out_$p491: ref, out_$i492: i32, out_$i493: i1, out_$i170: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8)
{

  entry:
    out_$p65, out_$p66, out_$i67, out_$p68, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p92, out_$i93, out_$i94, out_$i95, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$p144, out_$i145, out_$p147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p97, out_$i98, out_$i99, out_$i161, out_$i96, out_$p162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i171, out_$p172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p181, out_$i182, out_$i183, out_$i78, out_$i79, out_$p80, out_$i81, out_$p184, out_$i185, out_$i186, out_$p75, out_$i76, out_$i77, out_$i187, out_$i188, out_$i189, out_$i61, out_$i62, out_$p63, out_$i64, out_$p190, out_$i191, out_$i192, out_$p390, out_$i391, out_$i392, out_$p393, out_$i394, out_$i395, out_$i396, out_$p397, out_$i398, out_$i399, out_$p400, out_$i401, out_$i402, out_$i403, out_$p404, out_$i405, out_$i406, out_$p407, out_$i408, out_$i409, out_$i410, out_$p411, out_$i412, out_$i413, out_$p414, out_$i415, out_$i416, out_$i417, out_$p418, out_$i419, out_$i420, out_$p421, out_$i422, out_$i423, out_$i424, out_$p425, out_$i426, out_$i427, out_$p428, out_$i429, out_$i430, out_$i431, out_$p432, out_$i433, out_$i434, out_$p435, out_$i436, out_$i437, out_$i438, out_$p439, out_$i440, out_$i441, out_$p442, out_$i443, out_$i444, out_$i445, out_$p446, out_$i447, out_$i448, out_$p449, out_$i450, out_$i451, out_$i452, out_$p453, out_$i454, out_$i455, out_$p456, out_$i457, out_$i458, out_$i459, out_$p460, out_$i461, out_$i462, out_$p463, out_$i464, out_$i465, out_$i466, out_$p467, out_$i468, out_$i469, out_$p470, out_$i471, out_$i472, out_$i473, out_$p474, out_$i475, out_$i476, out_$p477, out_$i478, out_$i479, out_$i480, out_$p481, out_$i482, out_$i483, out_$p484, out_$i485, out_$i486, out_$i487, out_$p488, out_$i489, out_$i490, out_$p491, out_$i492, out_$i493, out_$i170, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5 := in_$p65, in_$p66, in_$i67, in_$p68, in_$p70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i82, in_$p83, in_$p84, in_$p85, in_$i86, in_$p87, in_$p88, in_$p89, in_$p90, in_$p92, in_$i93, in_$i94, in_$i95, in_$p101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p112, in_$i113, in_$i114, in_$i115, in_$p116, in_$i117, in_$i118, in_$i119, in_$p120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$p126, in_$i127, in_$i128, in_$i129, in_$p130, in_$i131, in_$i132, in_$p133, in_$i134, in_$i135, in_$i136, in_$p137, in_$i138, in_$i139, in_$p140, in_$i141, in_$i142, in_$i143, in_$p144, in_$i145, in_$p147, in_$i148, in_$i149, in_$i150, in_$p151, in_$i152, in_$i153, in_$i154, in_$i155, in_$p156, in_$i157, in_$i158, in_$i159, in_$i160, in_$p97, in_$i98, in_$i99, in_$i161, in_$i96, in_$p162, in_$i163, in_$i164, in_$p165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i171, in_$p172, in_$i173, in_$i174, in_$p175, in_$i176, in_$i177, in_$i178, in_$i179, in_$p181, in_$i182, in_$i183, in_$i78, in_$i79, in_$p80, in_$i81, in_$p184, in_$i185, in_$i186, in_$p75, in_$i76, in_$i77, in_$i187, in_$i188, in_$i189, in_$i61, in_$i62, in_$p63, in_$i64, in_$p190, in_$i191, in_$i192, in_$p390, in_$i391, in_$i392, in_$p393, in_$i394, in_$i395, in_$i396, in_$p397, in_$i398, in_$i399, in_$p400, in_$i401, in_$i402, in_$i403, in_$p404, in_$i405, in_$i406, in_$p407, in_$i408, in_$i409, in_$i410, in_$p411, in_$i412, in_$i413, in_$p414, in_$i415, in_$i416, in_$i417, in_$p418, in_$i419, in_$i420, in_$p421, in_$i422, in_$i423, in_$i424, in_$p425, in_$i426, in_$i427, in_$p428, in_$i429, in_$i430, in_$i431, in_$p432, in_$i433, in_$i434, in_$p435, in_$i436, in_$i437, in_$i438, in_$p439, in_$i440, in_$i441, in_$p442, in_$i443, in_$i444, in_$i445, in_$p446, in_$i447, in_$i448, in_$p449, in_$i450, in_$i451, in_$i452, in_$p453, in_$i454, in_$i455, in_$p456, in_$i457, in_$i458, in_$i459, in_$p460, in_$i461, in_$i462, in_$p463, in_$i464, in_$i465, in_$i466, in_$p467, in_$i468, in_$i469, in_$p470, in_$i471, in_$i472, in_$i473, in_$p474, in_$i475, in_$i476, in_$p477, in_$i478, in_$i479, in_$i480, in_$p481, in_$i482, in_$i483, in_$p484, in_$i485, in_$i486, in_$i487, in_$p488, in_$i489, in_$i490, in_$p491, in_$i492, in_$i493, in_$i170, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1, in_cmdloc_dummy_var_2, in_cmdloc_dummy_var_3, in_cmdloc_dummy_var_4, in_cmdloc_dummy_var_5;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_66;

  $bb93:
    assume out_$i189 == 1;
    assume {:verifier.code 0} true;
    out_$i61, out_$i62, out_$p63, out_$i64 := out_$i77, out_$i76, out_$p75, out_$i187;
    goto $bb93_dummy;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    out_$p190, out_$i191, out_$i192 := out_$p75, out_$i76, out_$i77;
    assume true;
    goto $bb93;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    out_$i189 := $ult.i32(out_$i187, out_$i188);
    goto corral_source_split_233;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    out_$i188 := $load.i32($M.0, in_$p55);
    goto corral_source_split_232;

  $bb92:
    assume {:verifier.code 0} true;
    out_$i187 := $add.i32(out_$i64, 1);
    call {:si_unique_call 16} {:cexpr "alt_idx"} boogie_si_record_i32(out_$i187);
    goto corral_source_split_231;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i74 == 1);
    goto $bb27;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    out_$p75, out_$i76, out_$i77 := out_$p184, out_$i185, out_$i186;
    goto $bb27;

  $bb91:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_229;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    out_$p184, out_$i185, out_$i186 := out_$p175, out_$i176, out_$i177;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    out_$i183 := $ne.i32(out_$i182, 0);
    goto corral_source_split_227;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    out_$i182 := $load.i32($M.1, out_$p181);
    goto corral_source_split_226;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(out_$i179, 76)), $mul.ref(0, 4));
    goto corral_source_split_225;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    out_$i179 := $sext.i32.i64(out_$i178);
    goto corral_source_split_224;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    out_$i178 := $add.i32(out_$i81, 1);
    call {:si_unique_call 15} {:cexpr "cfg_used"} boogie_si_record_i32(out_$i178);
    goto corral_source_split_223;

  $bb89:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_222;

  $bb85:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    out_$p175, out_$i176, out_$i177 := out_$p80, out_$i79, out_$i78;
    goto $bb89;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    out_$p175, out_$i176, out_$i177 := out_$p172, out_$i173, out_$i174;
    goto $bb89;

  $bb88:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_220;

  $bb87:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    out_$p172, out_$i173, out_$i174 := out_$p80, out_$i79, out_$i78;
    goto $bb88;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    out_$p172, out_$i173, out_$i174 := out_$p68, out_$i81, out_$i72;
    goto $bb88;

  $bb86:
    assume out_$i171 == 1;
    goto corral_source_split_218;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    out_$i171 := $slt.i32(out_$i79, out_$i81);
    goto corral_source_split_216;

  $bb84:
    assume out_$i169 == 1;
    goto corral_source_split_215;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb83:
    assume {:verifier.code 0} true;
    out_$i169 := $ne.i32(out_$i170, 0);
    goto corral_source_split_213;

  $bb251:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb248:
    assume {:verifier.code 0} true;
    out_$i170 := out_$i487;
    goto $bb251;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    out_$i170 := 0;
    goto $bb251;

  $bb249:
    assume out_$i493 == 1;
    goto corral_source_split_656;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    out_$i493 := $ne.i32(out_$i492, 1);
    goto corral_source_split_654;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    out_$i492 := $load.i32($M.1, out_$p491);
    goto corral_source_split_653;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    out_$p491 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(15, 4));
    goto corral_source_split_652;

  $bb246:
    assume out_$i490 == 1;
    goto corral_source_split_651;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    out_$i490 := $ne.i32(out_$i489, 2);
    goto corral_source_split_649;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    out_$i489 := $load.i32($M.1, out_$p488);
    goto corral_source_split_648;

  $bb245:
    assume {:verifier.code 0} true;
    out_$p488 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(15, 4));
    goto corral_source_split_647;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb244:
    assume {:verifier.code 0} true;
    goto corral_source_split_645;

  $bb241:
    assume {:verifier.code 0} true;
    out_$i487 := out_$i480;
    goto $bb244;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    out_$i487 := 0;
    goto $bb244;

  $bb242:
    assume out_$i486 == 1;
    goto corral_source_split_643;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    out_$i486 := $ne.i32(out_$i485, 1);
    goto corral_source_split_641;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    out_$i485 := $load.i32($M.1, out_$p484);
    goto corral_source_split_640;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    out_$p484 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(14, 4));
    goto corral_source_split_639;

  $bb239:
    assume out_$i483 == 1;
    goto corral_source_split_638;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    out_$i483 := $ne.i32(out_$i482, 2);
    goto corral_source_split_636;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    out_$i482 := $load.i32($M.1, out_$p481);
    goto corral_source_split_635;

  $bb238:
    assume {:verifier.code 0} true;
    out_$p481 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(14, 4));
    goto corral_source_split_634;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb237:
    assume {:verifier.code 0} true;
    goto corral_source_split_632;

  $bb234:
    assume {:verifier.code 0} true;
    out_$i480 := out_$i473;
    goto $bb237;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    out_$i480 := 0;
    goto $bb237;

  $bb235:
    assume out_$i479 == 1;
    goto corral_source_split_630;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    out_$i479 := $ne.i32(out_$i478, 1);
    goto corral_source_split_628;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    out_$i478 := $load.i32($M.1, out_$p477);
    goto corral_source_split_627;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    out_$p477 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(13, 4));
    goto corral_source_split_626;

  $bb232:
    assume out_$i476 == 1;
    goto corral_source_split_625;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    out_$i476 := $ne.i32(out_$i475, 2);
    goto corral_source_split_623;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    out_$i475 := $load.i32($M.1, out_$p474);
    goto corral_source_split_622;

  $bb231:
    assume {:verifier.code 0} true;
    out_$p474 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(13, 4));
    goto corral_source_split_621;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb230:
    assume {:verifier.code 0} true;
    goto corral_source_split_619;

  $bb227:
    assume {:verifier.code 0} true;
    out_$i473 := out_$i466;
    goto $bb230;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    out_$i473 := 0;
    goto $bb230;

  $bb228:
    assume out_$i472 == 1;
    goto corral_source_split_617;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    out_$i472 := $ne.i32(out_$i471, 1);
    goto corral_source_split_615;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    out_$i471 := $load.i32($M.1, out_$p470);
    goto corral_source_split_614;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    out_$p470 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(12, 4));
    goto corral_source_split_613;

  $bb225:
    assume out_$i469 == 1;
    goto corral_source_split_612;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    out_$i469 := $ne.i32(out_$i468, 2);
    goto corral_source_split_610;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    out_$i468 := $load.i32($M.1, out_$p467);
    goto corral_source_split_609;

  $bb224:
    assume {:verifier.code 0} true;
    out_$p467 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(12, 4));
    goto corral_source_split_608;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb223:
    assume {:verifier.code 0} true;
    goto corral_source_split_606;

  $bb220:
    assume {:verifier.code 0} true;
    out_$i466 := out_$i459;
    goto $bb223;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    out_$i466 := 0;
    goto $bb223;

  $bb221:
    assume out_$i465 == 1;
    goto corral_source_split_604;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    out_$i465 := $ne.i32(out_$i464, 1);
    goto corral_source_split_602;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    out_$i464 := $load.i32($M.1, out_$p463);
    goto corral_source_split_601;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    out_$p463 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(11, 4));
    goto corral_source_split_600;

  $bb218:
    assume out_$i462 == 1;
    goto corral_source_split_599;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    out_$i462 := $ne.i32(out_$i461, 2);
    goto corral_source_split_597;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    out_$i461 := $load.i32($M.1, out_$p460);
    goto corral_source_split_596;

  $bb217:
    assume {:verifier.code 0} true;
    out_$p460 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(11, 4));
    goto corral_source_split_595;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb216:
    assume {:verifier.code 0} true;
    goto corral_source_split_593;

  $bb213:
    assume {:verifier.code 0} true;
    out_$i459 := out_$i452;
    goto $bb216;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    out_$i459 := 0;
    goto $bb216;

  $bb214:
    assume out_$i458 == 1;
    goto corral_source_split_591;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    out_$i458 := $ne.i32(out_$i457, 1);
    goto corral_source_split_589;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    out_$i457 := $load.i32($M.1, out_$p456);
    goto corral_source_split_588;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    out_$p456 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(10, 4));
    goto corral_source_split_587;

  $bb211:
    assume out_$i455 == 1;
    goto corral_source_split_586;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    out_$i455 := $ne.i32(out_$i454, 2);
    goto corral_source_split_584;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    out_$i454 := $load.i32($M.1, out_$p453);
    goto corral_source_split_583;

  $bb210:
    assume {:verifier.code 0} true;
    out_$p453 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(10, 4));
    goto corral_source_split_582;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb209:
    assume {:verifier.code 0} true;
    goto corral_source_split_580;

  $bb206:
    assume {:verifier.code 0} true;
    out_$i452 := out_$i445;
    goto $bb209;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    out_$i452 := 0;
    goto $bb209;

  $bb207:
    assume out_$i451 == 1;
    goto corral_source_split_578;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    out_$i451 := $ne.i32(out_$i450, 1);
    goto corral_source_split_576;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    out_$i450 := $load.i32($M.1, out_$p449);
    goto corral_source_split_575;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    out_$p449 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(9, 4));
    goto corral_source_split_574;

  $bb204:
    assume out_$i448 == 1;
    goto corral_source_split_573;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    out_$i448 := $ne.i32(out_$i447, 2);
    goto corral_source_split_571;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    out_$i447 := $load.i32($M.1, out_$p446);
    goto corral_source_split_570;

  $bb203:
    assume {:verifier.code 0} true;
    out_$p446 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(9, 4));
    goto corral_source_split_569;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb202:
    assume {:verifier.code 0} true;
    goto corral_source_split_567;

  $bb199:
    assume {:verifier.code 0} true;
    out_$i445 := out_$i438;
    goto $bb202;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    out_$i445 := 0;
    goto $bb202;

  $bb200:
    assume out_$i444 == 1;
    goto corral_source_split_565;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    out_$i444 := $ne.i32(out_$i443, 1);
    goto corral_source_split_563;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    out_$i443 := $load.i32($M.1, out_$p442);
    goto corral_source_split_562;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    out_$p442 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(8, 4));
    goto corral_source_split_561;

  $bb197:
    assume out_$i441 == 1;
    goto corral_source_split_560;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    out_$i441 := $ne.i32(out_$i440, 2);
    goto corral_source_split_558;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    out_$i440 := $load.i32($M.1, out_$p439);
    goto corral_source_split_557;

  $bb196:
    assume {:verifier.code 0} true;
    out_$p439 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(8, 4));
    goto corral_source_split_556;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb195:
    assume {:verifier.code 0} true;
    goto corral_source_split_554;

  $bb192:
    assume {:verifier.code 0} true;
    out_$i438 := out_$i431;
    goto $bb195;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    out_$i438 := 0;
    goto $bb195;

  $bb193:
    assume out_$i437 == 1;
    goto corral_source_split_552;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    out_$i437 := $ne.i32(out_$i436, 1);
    goto corral_source_split_550;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    out_$i436 := $load.i32($M.1, out_$p435);
    goto corral_source_split_549;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    out_$p435 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(7, 4));
    goto corral_source_split_548;

  $bb190:
    assume out_$i434 == 1;
    goto corral_source_split_547;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    out_$i434 := $ne.i32(out_$i433, 2);
    goto corral_source_split_545;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    out_$i433 := $load.i32($M.1, out_$p432);
    goto corral_source_split_544;

  $bb189:
    assume {:verifier.code 0} true;
    out_$p432 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(7, 4));
    goto corral_source_split_543;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb188:
    assume {:verifier.code 0} true;
    goto corral_source_split_541;

  $bb185:
    assume {:verifier.code 0} true;
    out_$i431 := out_$i424;
    goto $bb188;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    out_$i431 := 0;
    goto $bb188;

  $bb186:
    assume out_$i430 == 1;
    goto corral_source_split_539;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    out_$i430 := $ne.i32(out_$i429, 1);
    goto corral_source_split_537;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    out_$i429 := $load.i32($M.1, out_$p428);
    goto corral_source_split_536;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    out_$p428 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(6, 4));
    goto corral_source_split_535;

  $bb183:
    assume out_$i427 == 1;
    goto corral_source_split_534;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    out_$i427 := $ne.i32(out_$i426, 2);
    goto corral_source_split_532;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    out_$i426 := $load.i32($M.1, out_$p425);
    goto corral_source_split_531;

  $bb182:
    assume {:verifier.code 0} true;
    out_$p425 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(6, 4));
    goto corral_source_split_530;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb181:
    assume {:verifier.code 0} true;
    goto corral_source_split_528;

  $bb178:
    assume {:verifier.code 0} true;
    out_$i424 := out_$i417;
    goto $bb181;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    out_$i424 := 0;
    goto $bb181;

  $bb179:
    assume out_$i423 == 1;
    goto corral_source_split_526;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    out_$i423 := $ne.i32(out_$i422, 1);
    goto corral_source_split_524;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    out_$i422 := $load.i32($M.1, out_$p421);
    goto corral_source_split_523;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    out_$p421 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(5, 4));
    goto corral_source_split_522;

  $bb176:
    assume out_$i420 == 1;
    goto corral_source_split_521;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    out_$i420 := $ne.i32(out_$i419, 2);
    goto corral_source_split_519;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    out_$i419 := $load.i32($M.1, out_$p418);
    goto corral_source_split_518;

  $bb175:
    assume {:verifier.code 0} true;
    out_$p418 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(5, 4));
    goto corral_source_split_517;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb174:
    assume {:verifier.code 0} true;
    goto corral_source_split_515;

  $bb171:
    assume {:verifier.code 0} true;
    out_$i417 := out_$i410;
    goto $bb174;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    out_$i417 := 0;
    goto $bb174;

  $bb172:
    assume out_$i416 == 1;
    goto corral_source_split_513;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    out_$i416 := $ne.i32(out_$i415, 1);
    goto corral_source_split_511;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    out_$i415 := $load.i32($M.1, out_$p414);
    goto corral_source_split_510;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    out_$p414 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(4, 4));
    goto corral_source_split_509;

  $bb169:
    assume out_$i413 == 1;
    goto corral_source_split_508;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    out_$i413 := $ne.i32(out_$i412, 2);
    goto corral_source_split_506;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    out_$i412 := $load.i32($M.1, out_$p411);
    goto corral_source_split_505;

  $bb168:
    assume {:verifier.code 0} true;
    out_$p411 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(4, 4));
    goto corral_source_split_504;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb167:
    assume {:verifier.code 0} true;
    goto corral_source_split_502;

  $bb164:
    assume {:verifier.code 0} true;
    out_$i410 := out_$i403;
    goto $bb167;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    out_$i410 := 0;
    goto $bb167;

  $bb165:
    assume out_$i409 == 1;
    goto corral_source_split_500;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    out_$i409 := $ne.i32(out_$i408, 1);
    goto corral_source_split_498;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    out_$i408 := $load.i32($M.1, out_$p407);
    goto corral_source_split_497;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    out_$p407 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(3, 4));
    goto corral_source_split_496;

  $bb162:
    assume out_$i406 == 1;
    goto corral_source_split_495;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    out_$i406 := $ne.i32(out_$i405, 2);
    goto corral_source_split_493;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    out_$i405 := $load.i32($M.1, out_$p404);
    goto corral_source_split_492;

  $bb161:
    assume {:verifier.code 0} true;
    out_$p404 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(3, 4));
    goto corral_source_split_491;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb160:
    assume {:verifier.code 0} true;
    goto corral_source_split_489;

  $bb157:
    assume {:verifier.code 0} true;
    out_$i403 := out_$i396;
    goto $bb160;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    out_$i403 := 0;
    goto $bb160;

  $bb158:
    assume out_$i402 == 1;
    goto corral_source_split_487;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    out_$i402 := $ne.i32(out_$i401, 1);
    goto corral_source_split_485;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    out_$i401 := $load.i32($M.1, out_$p400);
    goto corral_source_split_484;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    out_$p400 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(2, 4));
    goto corral_source_split_483;

  $bb155:
    assume out_$i399 == 1;
    goto corral_source_split_482;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    out_$i399 := $ne.i32(out_$i398, 2);
    goto corral_source_split_480;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    out_$i398 := $load.i32($M.1, out_$p397);
    goto corral_source_split_479;

  $bb154:
    assume {:verifier.code 0} true;
    out_$p397 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(2, 4));
    goto corral_source_split_478;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb153:
    assume {:verifier.code 0} true;
    goto corral_source_split_476;

  $bb150:
    assume {:verifier.code 0} true;
    out_$i396 := out_$i168;
    goto $bb153;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    out_$i396 := 0;
    goto $bb153;

  $bb151:
    assume out_$i395 == 1;
    goto corral_source_split_474;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    out_$i395 := $ne.i32(out_$i394, 1);
    goto corral_source_split_472;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    out_$i394 := $load.i32($M.1, out_$p393);
    goto corral_source_split_471;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    out_$p393 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(1, 4));
    goto corral_source_split_470;

  $bb148:
    assume out_$i392 == 1;
    goto corral_source_split_469;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    out_$i392 := $ne.i32(out_$i391, 2);
    goto corral_source_split_211;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    out_$i391 := $load.i32($M.1, out_$p390);
    goto corral_source_split_210;

  $bb82:
    assume {:verifier.code 0} true;
    out_$p390 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(1, 4));
    goto corral_source_split_209;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb81:
    assume {:verifier.code 0} true;
    goto corral_source_split_207;

  $bb78:
    assume {:verifier.code 0} true;
    out_$i168 := out_$i96;
    goto $bb81;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    out_$i168 := 0;
    goto $bb81;

  $bb79:
    assume out_$i167 == 1;
    goto corral_source_split_205;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    out_$i167 := $ne.i32(out_$i166, 1);
    goto corral_source_split_203;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    out_$i166 := $load.i32($M.1, out_$p165);
    goto corral_source_split_202;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(0, 4));
    goto corral_source_split_201;

  $bb76:
    assume out_$i164 == 1;
    goto corral_source_split_200;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    out_$i164 := $ne.i32(out_$i163, 2);
    goto corral_source_split_198;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i32($M.1, out_$p162);
    goto corral_source_split_197;

  $bb75:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(0, 4));
    goto corral_source_split_196;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb34:
    assume {:verifier.code 0} true;
    assume !(out_$i95 == 1);
    goto $bb35;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    out_$i96 := out_$i161;
    goto $bb35;

  $bb72:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_194;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    out_$i161 := out_$i155;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    out_$i160 := $sgt.i32(out_$i159, out_$i157);
    goto corral_source_split_192;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    out_$i159 := $zext.i8.i32(out_$i158);
    goto corral_source_split_191;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    out_$i158 := $load.i8($M.0, out_$p92);
    goto corral_source_split_190;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    out_$i157 := $add.i32(out_$i99, 1);
    call {:si_unique_call 14} {:cexpr "i"} boogie_si_record_i32(out_$i157);
    goto corral_source_split_189;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref(out_$p97, $mul.ref(1, 72));
    goto corral_source_split_188;

  $bb70:
    assume {:verifier.code 0} true;
    goto corral_source_split_187;

  $bb42:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    out_$i155 := out_$i98;
    goto $bb70;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    out_$i155 := out_$i154;
    goto $bb70;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_185;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i154 := out_$i123;
    goto $bb69;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    out_$i154 := 0;
    goto $bb69;

  $bb67:
    assume out_$i153 == 1;
    goto corral_source_split_183;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    out_$i153 := $slt.i32(out_$i149, out_$i152);
    goto corral_source_split_181;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i32($M.1, out_$p151);
    goto corral_source_split_180;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    out_$i149 := $zext.i8.i32(out_$i148);
    out_$i150 := $add.i64(out_$i82, 17);
    out_$p151 := $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(out_$i150, 4));
    goto corral_source_split_179;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    out_$i148 := $load.i8($M.0, out_$p147);
    goto corral_source_split_178;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref($add.ref(out_$p97, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_177;

  $bb64:
    assume out_$i145 == 1;
    goto corral_source_split_176;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i114, 3);
    goto corral_source_split_174;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p144, 1);
    goto corral_source_split_172;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i143, 4));
    goto corral_source_split_171;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    out_$i143 := $sext.i32.i64(out_$i110);
    goto corral_source_split_170;

  $bb61:
    assume out_$i142 == 1;
    goto corral_source_split_169;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i141, 3);
    goto corral_source_split_167;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i32($M.1, out_$p140);
    goto corral_source_split_166;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i139, 4));
    goto corral_source_split_165;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    out_$i139 := $sext.i32.i64(out_$i110);
    goto corral_source_split_164;

  $bb58:
    assume out_$i138 == 1;
    goto corral_source_split_163;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i32(out_$i114, 1);
    goto corral_source_split_161;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p137, 1);
    goto corral_source_split_159;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i136, 4));
    goto corral_source_split_158;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    out_$i136 := $sext.i32.i64(out_$i110);
    goto corral_source_split_157;

  $bb55:
    assume out_$i135 == 1;
    goto corral_source_split_156;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 4);
    goto corral_source_split_154;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    out_$i134 := $load.i32($M.1, out_$p133);
    goto corral_source_split_153;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i132, 4));
    goto corral_source_split_152;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    out_$i132 := $sext.i32.i64(out_$i110);
    goto corral_source_split_151;

  $bb52:
    assume out_$i131 == 1;
    goto corral_source_split_150;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i114, 2);
    goto corral_source_split_148;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p130, 1);
    goto corral_source_split_146;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i129, 4));
    goto corral_source_split_145;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    out_$i129 := $sext.i32.i64(out_$i110);
    goto corral_source_split_144;

  $bb49:
    assume out_$i128 == 1;
    goto corral_source_split_143;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i32(out_$i127, 5);
    goto corral_source_split_141;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    out_$i127 := $load.i32($M.1, out_$p126);
    goto corral_source_split_140;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i125, 4));
    goto corral_source_split_139;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    out_$i125 := $sext.i32.i64(out_$i110);
    goto corral_source_split_138;

  $bb46:
    assume out_$i124 == 1;
    goto corral_source_split_137;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    out_$i124 := $eq.i32(out_$i114, 3);
    goto corral_source_split_135;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_134;

  $bb44:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    out_$i123 := out_$i98;
    goto $bb45;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    out_$i123 := 0;
    goto $bb45;

  $bb43:
    assume out_$i122 == 1;
    goto corral_source_split_132;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 1);
    goto corral_source_split_130;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i32($M.1, out_$p120);
    goto corral_source_split_129;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i119, 4));
    goto corral_source_split_128;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    out_$i119 := $sext.i32.i64(out_$i110);
    goto corral_source_split_127;

  $bb41:
    assume out_$i118 == 1;
    goto corral_source_split_126;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i32(out_$i117, 2);
    goto corral_source_split_124;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i32($M.1, out_$p116);
    goto corral_source_split_123;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(out_$i115, 4));
    goto corral_source_split_122;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    out_$i115 := $sext.i32.i64(out_$i110);
    goto corral_source_split_121;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    out_$i114 := $zext.i8.i32(out_$i113);
    call {:si_unique_call 13} {:cexpr "attr"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_120;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i8($M.0, out_$p112);
    goto corral_source_split_119;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref($add.ref(out_$p97, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_118;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_117;

  $bb39:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    out_$i110 := out_$i106;
    goto $bb40;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    out_$i110 := out_$i109;
    goto $bb40;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    out_$i109 := $add.i32(out_$i106, 1);
    call {:si_unique_call 12} {:cexpr "idx"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_115;

  $bb38:
    assume out_$i108 == 1;
    goto corral_source_split_114;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i32(out_$i107, 0);
    goto corral_source_split_112;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    out_$i107 := $and.i32(out_$i103, 128);
    goto corral_source_split_111;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    out_$i106 := $mul.i32(out_$i105, 2);
    call {:si_unique_call 11} {:cexpr "idx"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_110;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    out_$i105 := $add.i32(out_$i104, $sub.i32(0, 1));
    goto corral_source_split_109;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    out_$i104 := $and.i32(out_$i103, 127);
    goto corral_source_split_108;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    out_$i103 := $zext.i8.i32(out_$i102);
    call {:si_unique_call 10} {:cexpr "ep_addr"} boogie_si_record_i32(out_$i103);
    goto corral_source_split_107;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i8($M.0, out_$p101);
    goto corral_source_split_106;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref($add.ref(out_$p97, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_105;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb36:
    call out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$p144, out_$i145, out_$p147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p97, out_$i98, out_$i99, out_$i161 := hfcsusb_probe_loop_$bb36(in_$p2, out_$i82, out_$p92, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$p144, out_$i145, out_$p147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p97, out_$i98, out_$i99, out_$i161);
    goto $bb36_last;

  $bb36_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_103;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    out_$p97, out_$i98, out_$i99 := out_$p85, 1, 0;
    goto $bb36;

  $bb71:
    assume out_$i160 == 1;
    assume {:verifier.code 0} true;
    out_$p97, out_$i98, out_$i99 := out_$p156, out_$i155, out_$i157;
    assume false;
    return;

  $bb33:
    assume out_$i95 == 1;
    goto corral_source_split_101;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    out_$i96 := 1;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    out_$i95 := $sgt.i32(out_$i94, 0);
    goto corral_source_split_99;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    out_$i94 := $zext.i8.i32(out_$i93);
    goto corral_source_split_98;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i8($M.0, out_$p92);
    goto corral_source_split_97;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref($add.ref(out_$p66, $mul.ref(out_$i67, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_96;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_3 := $M.1;
    out_cmdloc_dummy_var_4 := $M.1;
    call {:si_unique_call 9} out_cmdloc_dummy_var_5 := $memcpy.i8(out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_$p89, out_$p90, 64, $zext.i32.i64(1), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_5;
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.1;
    out_cmdloc_dummy_var_1 := $M.1;
    call {:si_unique_call 8} out_cmdloc_dummy_var_2 := $memcpy.i8(out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_$p87, out_$p88, 64, $zext.i32.i64(1), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_2;
    goto corral_source_split_90;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    out_$p88 := $bitcast.ref.ref(out_$p83);
    goto corral_source_split_89;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    out_$p87 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_88;

  $bb30:
    assume out_$i86 == 1;
    goto corral_source_split_87;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    out_$i86 := $ugt.i64(64, 63);
    goto corral_source_split_85;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.0, out_$p84);
    goto corral_source_split_84;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p66, $mul.ref(out_$i67, 40)), $mul.ref(24, 1));
    goto corral_source_split_83;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i32.i64(out_$i81);
    out_$p83 := $add.ref($add.ref($add.ref(validconf, $mul.ref(0, 380)), $mul.ref(0, 76)), $mul.ref(out_$i82, 4));
    goto corral_source_split_82;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb28:
    call out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p92, out_$i93, out_$i94, out_$i95, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$p144, out_$i145, out_$p147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p97, out_$i98, out_$i99, out_$i161, out_$i96, out_$p162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i171, out_$p172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p181, out_$i182, out_$i183, out_$i78, out_$i79, out_$p80, out_$i81, out_$p184, out_$i185, out_$i186, out_$p390, out_$i391, out_$i392, out_$p393, out_$i394, out_$i395, out_$i396, out_$p397, out_$i398, out_$i399, out_$p400, out_$i401, out_$i402, out_$i403, out_$p404, out_$i405, out_$i406, out_$p407, out_$i408, out_$i409, out_$i410, out_$p411, out_$i412, out_$i413, out_$p414, out_$i415, out_$i416, out_$i417, out_$p418, out_$i419, out_$i420, out_$p421, out_$i422, out_$i423, out_$i424, out_$p425, out_$i426, out_$i427, out_$p428, out_$i429, out_$i430, out_$i431, out_$p432, out_$i433, out_$i434, out_$p435, out_$i436, out_$i437, out_$i438, out_$p439, out_$i440, out_$i441, out_$p442, out_$i443, out_$i444, out_$i445, out_$p446, out_$i447, out_$i448, out_$p449, out_$i450, out_$i451, out_$i452, out_$p453, out_$i454, out_$i455, out_$p456, out_$i457, out_$i458, out_$i459, out_$p460, out_$i461, out_$i462, out_$p463, out_$i464, out_$i465, out_$i466, out_$p467, out_$i468, out_$i469, out_$p470, out_$i471, out_$i472, out_$i473, out_$p474, out_$i475, out_$i476, out_$p477, out_$i478, out_$i479, out_$i480, out_$p481, out_$i482, out_$i483, out_$p484, out_$i485, out_$i486, out_$i487, out_$p488, out_$i489, out_$i490, out_$p491, out_$i492, out_$i493, out_$i170, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5 := hfcsusb_probe_loop_$bb28(in_$p2, out_$p66, out_$i67, out_$p68, out_$i72, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p92, out_$i93, out_$i94, out_$i95, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$p144, out_$i145, out_$p147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p97, out_$i98, out_$i99, out_$i161, out_$i96, out_$p162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i171, out_$p172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p181, out_$i182, out_$i183, out_$i78, out_$i79, out_$p80, out_$i81, out_$p184, out_$i185, out_$i186, out_$p390, out_$i391, out_$i392, out_$p393, out_$i394, out_$i395, out_$i396, out_$p397, out_$i398, out_$i399, out_$p400, out_$i401, out_$i402, out_$i403, out_$p404, out_$i405, out_$i406, out_$p407, out_$i408, out_$i409, out_$i410, out_$p411, out_$i412, out_$i413, out_$p414, out_$i415, out_$i416, out_$i417, out_$p418, out_$i419, out_$i420, out_$p421, out_$i422, out_$i423, out_$i424, out_$p425, out_$i426, out_$i427, out_$p428, out_$i429, out_$i430, out_$i431, out_$p432, out_$i433, out_$i434, out_$p435, out_$i436, out_$i437, out_$i438, out_$p439, out_$i440, out_$i441, out_$p442, out_$i443, out_$i444, out_$i445, out_$p446, out_$i447, out_$i448, out_$p449, out_$i450, out_$i451, out_$i452, out_$p453, out_$i454, out_$i455, out_$p456, out_$i457, out_$i458, out_$i459, out_$p460, out_$i461, out_$i462, out_$p463, out_$i464, out_$i465, out_$i466, out_$p467, out_$i468, out_$i469, out_$p470, out_$i471, out_$i472, out_$i473, out_$p474, out_$i475, out_$i476, out_$p477, out_$i478, out_$i479, out_$i480, out_$p481, out_$i482, out_$i483, out_$p484, out_$i485, out_$i486, out_$i487, out_$p488, out_$i489, out_$i490, out_$p491, out_$i492, out_$i493, out_$i170, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5);
    goto $bb28_last;

  $bb28_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_80;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    out_$i78, out_$i79, out_$p80, out_$i81 := out_$i61, out_$i62, out_$p63, 0;
    goto $bb28;

  $bb90:
    assume out_$i183 == 1;
    assume {:verifier.code 0} true;
    out_$i78, out_$i79, out_$p80, out_$i81 := out_$i177, out_$i176, out_$p175, out_$i178;
    assume false;
    return;

  $bb25:
    assume out_$i74 == 1;
    goto corral_source_split_78;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    out_$p75, out_$i76, out_$i77 := out_$p63, out_$i62, out_$i61;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i32(out_$i73, 0);
    goto corral_source_split_76;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.1, validconf);
    goto corral_source_split_75;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i8.i32(out_$i71);
    call {:si_unique_call 7} {:cexpr "probe_alt_setting"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_74;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i8($M.0, out_$p70);
    goto corral_source_split_73;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref($add.ref(out_$p66, $mul.ref(out_$i67, 40)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_72;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref(out_$p66, $mul.ref(out_$i67, 40));
    goto corral_source_split_71;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i64);
    goto corral_source_split_70;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    goto corral_source_split_69;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1568)), $mul.ref(0, 1));
    goto corral_source_split_68;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    out_$p90 := $bitcast.ref.ref(out_$p83);
    goto corral_source_split_94;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    out_$p89 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_93;

  $bb31:
    assume !(out_$i86 == 1);
    goto corral_source_split_92;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i124 == 1);
    goto $bb48;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(out_$i128 == 1);
    goto $bb48;

  $bb53:
    assume {:verifier.code 0} true;
    assume !(out_$i131 == 1);
    goto $bb54;

  $bb56:
    assume {:verifier.code 0} true;
    assume !(out_$i135 == 1);
    goto $bb54;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i138 == 1);
    goto $bb60;

  $bb62:
    assume {:verifier.code 0} true;
    assume !(out_$i142 == 1);
    goto $bb60;

  $bb65:
    assume {:verifier.code 0} true;
    assume !(out_$i145 == 1);
    goto $bb66;

  $bb68:
    assume {:verifier.code 0} true;
    assume !(out_$i153 == 1);
    goto $bb66;

  $bb77:
    assume {:verifier.code 0} true;
    assume !(out_$i164 == 1);
    goto $bb78;

  $bb80:
    assume {:verifier.code 0} true;
    assume !(out_$i167 == 1);
    goto $bb78;

  $bb149:
    assume {:verifier.code 0} true;
    assume !(out_$i392 == 1);
    goto $bb150;

  $bb152:
    assume {:verifier.code 0} true;
    assume !(out_$i395 == 1);
    goto $bb150;

  $bb156:
    assume {:verifier.code 0} true;
    assume !(out_$i399 == 1);
    goto $bb157;

  $bb159:
    assume {:verifier.code 0} true;
    assume !(out_$i402 == 1);
    goto $bb157;

  $bb163:
    assume {:verifier.code 0} true;
    assume !(out_$i406 == 1);
    goto $bb164;

  $bb166:
    assume {:verifier.code 0} true;
    assume !(out_$i409 == 1);
    goto $bb164;

  $bb170:
    assume {:verifier.code 0} true;
    assume !(out_$i413 == 1);
    goto $bb171;

  $bb173:
    assume {:verifier.code 0} true;
    assume !(out_$i416 == 1);
    goto $bb171;

  $bb177:
    assume {:verifier.code 0} true;
    assume !(out_$i420 == 1);
    goto $bb178;

  $bb180:
    assume {:verifier.code 0} true;
    assume !(out_$i423 == 1);
    goto $bb178;

  $bb184:
    assume {:verifier.code 0} true;
    assume !(out_$i427 == 1);
    goto $bb185;

  $bb187:
    assume {:verifier.code 0} true;
    assume !(out_$i430 == 1);
    goto $bb185;

  $bb191:
    assume {:verifier.code 0} true;
    assume !(out_$i434 == 1);
    goto $bb192;

  $bb194:
    assume {:verifier.code 0} true;
    assume !(out_$i437 == 1);
    goto $bb192;

  $bb198:
    assume {:verifier.code 0} true;
    assume !(out_$i441 == 1);
    goto $bb199;

  $bb201:
    assume {:verifier.code 0} true;
    assume !(out_$i444 == 1);
    goto $bb199;

  $bb205:
    assume {:verifier.code 0} true;
    assume !(out_$i448 == 1);
    goto $bb206;

  $bb208:
    assume {:verifier.code 0} true;
    assume !(out_$i451 == 1);
    goto $bb206;

  $bb212:
    assume {:verifier.code 0} true;
    assume !(out_$i455 == 1);
    goto $bb213;

  $bb215:
    assume {:verifier.code 0} true;
    assume !(out_$i458 == 1);
    goto $bb213;

  $bb219:
    assume {:verifier.code 0} true;
    assume !(out_$i462 == 1);
    goto $bb220;

  $bb222:
    assume {:verifier.code 0} true;
    assume !(out_$i465 == 1);
    goto $bb220;

  $bb226:
    assume {:verifier.code 0} true;
    assume !(out_$i469 == 1);
    goto $bb227;

  $bb229:
    assume {:verifier.code 0} true;
    assume !(out_$i472 == 1);
    goto $bb227;

  $bb233:
    assume {:verifier.code 0} true;
    assume !(out_$i476 == 1);
    goto $bb234;

  $bb236:
    assume {:verifier.code 0} true;
    assume !(out_$i479 == 1);
    goto $bb234;

  $bb240:
    assume {:verifier.code 0} true;
    assume !(out_$i483 == 1);
    goto $bb241;

  $bb243:
    assume {:verifier.code 0} true;
    assume !(out_$i486 == 1);
    goto $bb241;

  $bb247:
    assume {:verifier.code 0} true;
    assume !(out_$i490 == 1);
    goto $bb248;

  $bb250:
    assume {:verifier.code 0} true;
    assume !(out_$i493 == 1);
    goto $bb248;

  $bb93_dummy:
    call {:si_unique_call 1} out_$p65, out_$p66, out_$i67, out_$p68, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p92, out_$i93, out_$i94, out_$i95, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$p144, out_$i145, out_$p147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p97, out_$i98, out_$i99, out_$i161, out_$i96, out_$p162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i171, out_$p172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p181, out_$i182, out_$i183, out_$i78, out_$i79, out_$p80, out_$i81, out_$p184, out_$i185, out_$i186, out_$p75, out_$i76, out_$i77, out_$i187, out_$i188, out_$i189, out_$i61, out_$i62, out_$p63, out_$i64, out_$p190, out_$i191, out_$i192, out_$p390, out_$i391, out_$i392, out_$p393, out_$i394, out_$i395, out_$i396, out_$p397, out_$i398, out_$i399, out_$p400, out_$i401, out_$i402, out_$i403, out_$p404, out_$i405, out_$i406, out_$p407, out_$i408, out_$i409, out_$i410, out_$p411, out_$i412, out_$i413, out_$p414, out_$i415, out_$i416, out_$i417, out_$p418, out_$i419, out_$i420, out_$p421, out_$i422, out_$i423, out_$i424, out_$p425, out_$i426, out_$i427, out_$p428, out_$i429, out_$i430, out_$i431, out_$p432, out_$i433, out_$i434, out_$p435, out_$i436, out_$i437, out_$i438, out_$p439, out_$i440, out_$i441, out_$p442, out_$i443, out_$i444, out_$i445, out_$p446, out_$i447, out_$i448, out_$p449, out_$i450, out_$i451, out_$i452, out_$p453, out_$i454, out_$i455, out_$p456, out_$i457, out_$i458, out_$i459, out_$p460, out_$i461, out_$i462, out_$p463, out_$i464, out_$i465, out_$i466, out_$p467, out_$i468, out_$i469, out_$p470, out_$i471, out_$i472, out_$i473, out_$p474, out_$i475, out_$i476, out_$p477, out_$i478, out_$i479, out_$i480, out_$p481, out_$i482, out_$i483, out_$p484, out_$i485, out_$i486, out_$i487, out_$p488, out_$i489, out_$i490, out_$p491, out_$i492, out_$i493, out_$i170, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5 := hfcsusb_probe_loop_$bb23(in_$p0, in_$p2, in_$p55, out_$p65, out_$p66, out_$i67, out_$p68, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p92, out_$i93, out_$i94, out_$i95, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$p144, out_$i145, out_$p147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p97, out_$i98, out_$i99, out_$i161, out_$i96, out_$p162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i171, out_$p172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p181, out_$i182, out_$i183, out_$i78, out_$i79, out_$p80, out_$i81, out_$p184, out_$i185, out_$i186, out_$p75, out_$i76, out_$i77, out_$i187, out_$i188, out_$i189, out_$i61, out_$i62, out_$p63, out_$i64, out_$p190, out_$i191, out_$i192, out_$p390, out_$i391, out_$i392, out_$p393, out_$i394, out_$i395, out_$i396, out_$p397, out_$i398, out_$i399, out_$p400, out_$i401, out_$i402, out_$i403, out_$p404, out_$i405, out_$i406, out_$p407, out_$i408, out_$i409, out_$i410, out_$p411, out_$i412, out_$i413, out_$p414, out_$i415, out_$i416, out_$i417, out_$p418, out_$i419, out_$i420, out_$p421, out_$i422, out_$i423, out_$i424, out_$p425, out_$i426, out_$i427, out_$p428, out_$i429, out_$i430, out_$i431, out_$p432, out_$i433, out_$i434, out_$p435, out_$i436, out_$i437, out_$i438, out_$p439, out_$i440, out_$i441, out_$p442, out_$i443, out_$i444, out_$i445, out_$p446, out_$i447, out_$i448, out_$p449, out_$i450, out_$i451, out_$i452, out_$p453, out_$i454, out_$i455, out_$p456, out_$i457, out_$i458, out_$i459, out_$p460, out_$i461, out_$i462, out_$p463, out_$i464, out_$i465, out_$i466, out_$p467, out_$i468, out_$i469, out_$p470, out_$i471, out_$i472, out_$i473, out_$p474, out_$i475, out_$i476, out_$p477, out_$i478, out_$i479, out_$i480, out_$p481, out_$i482, out_$i483, out_$p484, out_$i485, out_$i486, out_$i487, out_$p488, out_$i489, out_$i490, out_$p491, out_$i492, out_$i493, out_$i170, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5);
    return;

  exit:
    return;
}



procedure hfcsusb_probe_loop_$bb23(in_$p0: ref, in_$p2: ref, in_$p55: ref, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$p68: ref, in_$p70: ref, in_$i71: i8, in_$i72: i32, in_$i73: i32, in_$i74: i1, in_$i82: i64, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i1, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p92: ref, in_$i93: i8, in_$i94: i32, in_$i95: i1, in_$p101: ref, in_$i102: i8, in_$i103: i32, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i32, in_$p112: ref, in_$i113: i8, in_$i114: i32, in_$i115: i64, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$i119: i64, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i64, in_$p126: ref, in_$i127: i32, in_$i128: i1, in_$i129: i64, in_$p130: ref, in_$i131: i1, in_$i132: i64, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$i136: i64, in_$p137: ref, in_$i138: i1, in_$i139: i64, in_$p140: ref, in_$i141: i32, in_$i142: i1, in_$i143: i64, in_$p144: ref, in_$i145: i1, in_$p147: ref, in_$i148: i8, in_$i149: i32, in_$i150: i64, in_$p151: ref, in_$i152: i32, in_$i153: i1, in_$i154: i32, in_$i155: i32, in_$p156: ref, in_$i157: i32, in_$i158: i8, in_$i159: i32, in_$i160: i1, in_$p97: ref, in_$i98: i32, in_$i99: i32, in_$i161: i32, in_$i96: i32, in_$p162: ref, in_$i163: i32, in_$i164: i1, in_$p165: ref, in_$i166: i32, in_$i167: i1, in_$i168: i32, in_$i169: i1, in_$i171: i1, in_$p172: ref, in_$i173: i32, in_$i174: i32, in_$p175: ref, in_$i176: i32, in_$i177: i32, in_$i178: i32, in_$i179: i64, in_$p181: ref, in_$i182: i32, in_$i183: i1, in_$i78: i32, in_$i79: i32, in_$p80: ref, in_$i81: i32, in_$p184: ref, in_$i185: i32, in_$i186: i32, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$i187: i32, in_$i188: i32, in_$i189: i1, in_$i61: i32, in_$i62: i32, in_$p63: ref, in_$i64: i32, in_$p190: ref, in_$i191: i32, in_$i192: i32, in_$p390: ref, in_$i391: i32, in_$i392: i1, in_$p393: ref, in_$i394: i32, in_$i395: i1, in_$i396: i32, in_$p397: ref, in_$i398: i32, in_$i399: i1, in_$p400: ref, in_$i401: i32, in_$i402: i1, in_$i403: i32, in_$p404: ref, in_$i405: i32, in_$i406: i1, in_$p407: ref, in_$i408: i32, in_$i409: i1, in_$i410: i32, in_$p411: ref, in_$i412: i32, in_$i413: i1, in_$p414: ref, in_$i415: i32, in_$i416: i1, in_$i417: i32, in_$p418: ref, in_$i419: i32, in_$i420: i1, in_$p421: ref, in_$i422: i32, in_$i423: i1, in_$i424: i32, in_$p425: ref, in_$i426: i32, in_$i427: i1, in_$p428: ref, in_$i429: i32, in_$i430: i1, in_$i431: i32, in_$p432: ref, in_$i433: i32, in_$i434: i1, in_$p435: ref, in_$i436: i32, in_$i437: i1, in_$i438: i32, in_$p439: ref, in_$i440: i32, in_$i441: i1, in_$p442: ref, in_$i443: i32, in_$i444: i1, in_$i445: i32, in_$p446: ref, in_$i447: i32, in_$i448: i1, in_$p449: ref, in_$i450: i32, in_$i451: i1, in_$i452: i32, in_$p453: ref, in_$i454: i32, in_$i455: i1, in_$p456: ref, in_$i457: i32, in_$i458: i1, in_$i459: i32, in_$p460: ref, in_$i461: i32, in_$i462: i1, in_$p463: ref, in_$i464: i32, in_$i465: i1, in_$i466: i32, in_$p467: ref, in_$i468: i32, in_$i469: i1, in_$p470: ref, in_$i471: i32, in_$i472: i1, in_$i473: i32, in_$p474: ref, in_$i475: i32, in_$i476: i1, in_$p477: ref, in_$i478: i32, in_$i479: i1, in_$i480: i32, in_$p481: ref, in_$i482: i32, in_$i483: i1, in_$p484: ref, in_$i485: i32, in_$i486: i1, in_$i487: i32, in_$p488: ref, in_$i489: i32, in_$i490: i1, in_$p491: ref, in_$i492: i32, in_$i493: i1, in_$i170: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8) returns (out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$p68: ref, out_$p70: ref, out_$i71: i8, out_$i72: i32, out_$i73: i32, out_$i74: i1, out_$i82: i64, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i1, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p92: ref, out_$i93: i8, out_$i94: i32, out_$i95: i1, out_$p101: ref, out_$i102: i8, out_$i103: i32, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i32, out_$p112: ref, out_$i113: i8, out_$i114: i32, out_$i115: i64, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$i119: i64, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i64, out_$p126: ref, out_$i127: i32, out_$i128: i1, out_$i129: i64, out_$p130: ref, out_$i131: i1, out_$i132: i64, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$i136: i64, out_$p137: ref, out_$i138: i1, out_$i139: i64, out_$p140: ref, out_$i141: i32, out_$i142: i1, out_$i143: i64, out_$p144: ref, out_$i145: i1, out_$p147: ref, out_$i148: i8, out_$i149: i32, out_$i150: i64, out_$p151: ref, out_$i152: i32, out_$i153: i1, out_$i154: i32, out_$i155: i32, out_$p156: ref, out_$i157: i32, out_$i158: i8, out_$i159: i32, out_$i160: i1, out_$p97: ref, out_$i98: i32, out_$i99: i32, out_$i161: i32, out_$i96: i32, out_$p162: ref, out_$i163: i32, out_$i164: i1, out_$p165: ref, out_$i166: i32, out_$i167: i1, out_$i168: i32, out_$i169: i1, out_$i171: i1, out_$p172: ref, out_$i173: i32, out_$i174: i32, out_$p175: ref, out_$i176: i32, out_$i177: i32, out_$i178: i32, out_$i179: i64, out_$p181: ref, out_$i182: i32, out_$i183: i1, out_$i78: i32, out_$i79: i32, out_$p80: ref, out_$i81: i32, out_$p184: ref, out_$i185: i32, out_$i186: i32, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$i187: i32, out_$i188: i32, out_$i189: i1, out_$i61: i32, out_$i62: i32, out_$p63: ref, out_$i64: i32, out_$p190: ref, out_$i191: i32, out_$i192: i32, out_$p390: ref, out_$i391: i32, out_$i392: i1, out_$p393: ref, out_$i394: i32, out_$i395: i1, out_$i396: i32, out_$p397: ref, out_$i398: i32, out_$i399: i1, out_$p400: ref, out_$i401: i32, out_$i402: i1, out_$i403: i32, out_$p404: ref, out_$i405: i32, out_$i406: i1, out_$p407: ref, out_$i408: i32, out_$i409: i1, out_$i410: i32, out_$p411: ref, out_$i412: i32, out_$i413: i1, out_$p414: ref, out_$i415: i32, out_$i416: i1, out_$i417: i32, out_$p418: ref, out_$i419: i32, out_$i420: i1, out_$p421: ref, out_$i422: i32, out_$i423: i1, out_$i424: i32, out_$p425: ref, out_$i426: i32, out_$i427: i1, out_$p428: ref, out_$i429: i32, out_$i430: i1, out_$i431: i32, out_$p432: ref, out_$i433: i32, out_$i434: i1, out_$p435: ref, out_$i436: i32, out_$i437: i1, out_$i438: i32, out_$p439: ref, out_$i440: i32, out_$i441: i1, out_$p442: ref, out_$i443: i32, out_$i444: i1, out_$i445: i32, out_$p446: ref, out_$i447: i32, out_$i448: i1, out_$p449: ref, out_$i450: i32, out_$i451: i1, out_$i452: i32, out_$p453: ref, out_$i454: i32, out_$i455: i1, out_$p456: ref, out_$i457: i32, out_$i458: i1, out_$i459: i32, out_$p460: ref, out_$i461: i32, out_$i462: i1, out_$p463: ref, out_$i464: i32, out_$i465: i1, out_$i466: i32, out_$p467: ref, out_$i468: i32, out_$i469: i1, out_$p470: ref, out_$i471: i32, out_$i472: i1, out_$i473: i32, out_$p474: ref, out_$i475: i32, out_$i476: i1, out_$p477: ref, out_$i478: i32, out_$i479: i1, out_$i480: i32, out_$p481: ref, out_$i482: i32, out_$i483: i1, out_$p484: ref, out_$i485: i32, out_$i486: i1, out_$i487: i32, out_$p488: ref, out_$i489: i32, out_$i490: i1, out_$p491: ref, out_$i492: i32, out_$i493: i1, out_$i170: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8);
  modifies $M.1;



implementation hfcsusb_probe_loop_$bb4(in_$p3: ref, in_$p17: ref, in_$i18: i16, in_$i19: i32, in_$i20: i64, in_$p22: ref, in_$i23: i16, in_$i24: i32, in_$i25: i1, in_$p27: ref, in_$i28: i16, in_$i29: i32, in_$i30: i64, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i32, in_$i38: i64, in_$p40: ref, in_$i41: i16, in_$i42: i32, in_$i43: i1, in_$i14: i32, in_$i15: i32, in_$i44: i32) returns (out_$p17: ref, out_$i18: i16, out_$i19: i32, out_$i20: i64, out_$p22: ref, out_$i23: i16, out_$i24: i32, out_$i25: i1, out_$p27: ref, out_$i28: i16, out_$i29: i32, out_$i30: i64, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i32, out_$i38: i64, out_$p40: ref, out_$i41: i16, out_$i42: i32, out_$i43: i1, out_$i14: i32, out_$i15: i32, out_$i44: i32)
{

  entry:
    out_$p17, out_$i18, out_$i19, out_$i20, out_$p22, out_$i23, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$i14, out_$i15, out_$i44 := in_$p17, in_$i18, in_$i19, in_$i20, in_$p22, in_$i23, in_$i24, in_$i25, in_$p27, in_$i28, in_$i29, in_$i30, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p40, in_$i41, in_$i42, in_$i43, in_$i14, in_$i15, in_$i44;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14;

  $bb13:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i14, out_$i15 := out_$i37, out_$i36;
    goto $bb13_dummy;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i36;
    assume true;
    goto $bb13;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i32(out_$i42, 0);
    goto corral_source_split_43;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i16.i32(out_$i41);
    goto corral_source_split_42;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i16($M.0, out_$p40);
    goto corral_source_split_41;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(out_$i38, 32)), $mul.ref(2, 1));
    goto corral_source_split_40;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i37);
    goto corral_source_split_39;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i14, 1);
    call {:si_unique_call 4} {:cexpr "i"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_38;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_37;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i15;
    goto $bb11;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i14;
    goto $bb11;

  $bb9:
    assume out_$i35 == 1;
    goto corral_source_split_35;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i29, out_$i34);
    goto corral_source_split_33;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i32(out_$i33);
    goto corral_source_split_32;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i16($M.0, out_$p32);
    goto corral_source_split_31;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(out_$i30, 32)), $mul.ref(4, 1));
    goto corral_source_split_30;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i14);
    goto corral_source_split_29;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i16.i32(out_$i28);
    goto corral_source_split_28;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i16($M.0, out_$p27);
    goto corral_source_split_27;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(10, 1));
    goto corral_source_split_26;

  $bb6:
    assume out_$i25 == 1;
    goto corral_source_split_25;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i19, out_$i24);
    goto corral_source_split_23;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i16.i32(out_$i23);
    goto corral_source_split_22;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i16($M.0, out_$p22);
    goto corral_source_split_21;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref(hfcsusb_idtab, $mul.ref(0, 448)), $mul.ref(out_$i20, 32)), $mul.ref(2, 1));
    goto corral_source_split_20;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i14);
    goto corral_source_split_19;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i16.i32(out_$i18);
    goto corral_source_split_18;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i16($M.0, out_$p17);
    goto corral_source_split_17;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(8, 1));
    goto corral_source_split_16;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i35 == 1);
    goto $bb8;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p17, out_$i18, out_$i19, out_$i20, out_$p22, out_$i23, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$i14, out_$i15, out_$i44 := hfcsusb_probe_loop_$bb4(in_$p3, out_$p17, out_$i18, out_$i19, out_$i20, out_$p22, out_$i23, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$i14, out_$i15, out_$i44);
    return;

  exit:
    return;
}



procedure hfcsusb_probe_loop_$bb4(in_$p3: ref, in_$p17: ref, in_$i18: i16, in_$i19: i32, in_$i20: i64, in_$p22: ref, in_$i23: i16, in_$i24: i32, in_$i25: i1, in_$p27: ref, in_$i28: i16, in_$i29: i32, in_$i30: i64, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i32, in_$i38: i64, in_$p40: ref, in_$i41: i16, in_$i42: i32, in_$i43: i1, in_$i14: i32, in_$i15: i32, in_$i44: i32) returns (out_$p17: ref, out_$i18: i16, out_$i19: i32, out_$i20: i64, out_$p22: ref, out_$i23: i16, out_$i24: i32, out_$i25: i1, out_$p27: ref, out_$i28: i16, out_$i29: i32, out_$i30: i64, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i32, out_$i38: i64, out_$p40: ref, out_$i41: i16, out_$i42: i32, out_$i43: i1, out_$i14: i32, out_$i15: i32, out_$i44: i32);



implementation hfcsusb_disconnect_loop_$bb4(in_$i18: i32, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$i16: i32, in_$p17: ref, in_$i26: i32) returns (out_$i18: i32, out_$p20: ref, out_$p21: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$i16: i32, out_$p17: ref, out_$i26: i32)
{

  entry:
    out_$i18, out_$p20, out_$p21, out_$p23, out_$i24, out_$i25, out_$i16, out_$p17, out_$i26 := in_$i18, in_$p20, in_$p21, in_$p23, in_$i24, in_$i25, in_$i16, in_$p17, in_$i26;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_677;

  $bb6:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i16, out_$p17 := out_$i18, out_$p21;
    goto $bb6_dummy;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i18;
    assume true;
    goto $bb6;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, $p2i.ref.i64(HFClist));
    goto corral_source_split_685;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_684;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p17, $mul.ref(0, 9640)), $mul.ref(0, 1));
    goto corral_source_split_683;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    goto corral_source_split_682;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_681;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 9640)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_680;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i16, 1);
    call {:si_unique_call 51} {:cexpr "cnt"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_679;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i18, out_$p20, out_$p21, out_$p23, out_$i24, out_$i25, out_$i16, out_$p17, out_$i26 := hfcsusb_disconnect_loop_$bb4(out_$i18, out_$p20, out_$p21, out_$p23, out_$i24, out_$i25, out_$i16, out_$p17, out_$i26);
    return;

  exit:
    return;
}



procedure hfcsusb_disconnect_loop_$bb4(in_$i18: i32, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$i16: i32, in_$p17: ref, in_$i26: i32) returns (out_$i18: i32, out_$p20: ref, out_$p21: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$i16: i32, out_$p17: ref, out_$i26: i32);



implementation stop_int_gracefull_loop_$bb7(in_$p12: ref, in_$i18: i8, in_$i19: i32, in_$i20: i1, in_$i16: i32, in_$i21: i32, in_$i22: i1, in_vslice_dummy_var_20: i64) returns (out_$i18: i8, out_$i19: i32, out_$i20: i1, out_$i16: i32, out_$i21: i32, out_$i22: i1, out_vslice_dummy_var_20: i64)
{

  entry:
    out_$i18, out_$i19, out_$i20, out_$i16, out_$i21, out_$i22, out_vslice_dummy_var_20 := in_$i18, in_$i19, in_$i20, in_$i16, in_$i21, in_$i22, in_vslice_dummy_var_20;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1050;

  $bb9:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i21;
    goto $bb9_dummy;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_1057;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i8.i32(out_$i18);
    goto corral_source_split_1056;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i8($M.0, in_$p12);
    goto corral_source_split_1055;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} out_vslice_dummy_var_20 := schedule_timeout_interruptible(0);
    goto corral_source_split_1054;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb11:
    assume out_$i22 == 1;
    goto corral_source_split_1061;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i16, 0);
    goto corral_source_split_1052;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    out_$i21 := $sub.i32(out_$i16, 1);
    call {:si_unique_call 115} {:cexpr "timeout"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_1051;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i18, out_$i19, out_$i20, out_$i16, out_$i21, out_$i22, out_vslice_dummy_var_20 := stop_int_gracefull_loop_$bb7(in_$p12, out_$i18, out_$i19, out_$i20, out_$i16, out_$i21, out_$i22, out_vslice_dummy_var_20);
    return;

  exit:
    return;
}



procedure stop_int_gracefull_loop_$bb7(in_$p12: ref, in_$i18: i8, in_$i19: i32, in_$i20: i1, in_$i16: i32, in_$i21: i32, in_$i22: i1, in_vslice_dummy_var_20: i64) returns (out_$i18: i8, out_$i19: i32, out_$i20: i1, out_$i16: i32, out_$i21: i32, out_$i22: i1, out_vslice_dummy_var_20: i64);



implementation stop_iso_gracefull_loop_$bb32(in_$p34: ref, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$i42: i8, in_$i43: i32, in_$i44: i1, in_vslice_dummy_var_25: i64) returns (out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$i42: i8, out_$i43: i32, out_$i44: i1, out_vslice_dummy_var_25: i64)
{

  entry:
    out_$i38, out_$i39, out_$i40, out_$i42, out_$i43, out_$i44, out_vslice_dummy_var_25 := in_$i38, in_$i39, in_$i40, in_$i42, in_$i43, in_$i44, in_vslice_dummy_var_25;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_1150;

  $bb37:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := out_$i39;
    goto $bb37_dummy;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i43, 0);
    goto corral_source_split_1164;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i8.i32(out_$i42);
    goto corral_source_split_1163;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i8($M.0, in_$p34);
    goto corral_source_split_1162;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} out_vslice_dummy_var_25 := schedule_timeout_interruptible(0);
    goto corral_source_split_1161;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume out_$i40 == 1;
    goto corral_source_split_1154;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i38, 0);
    goto corral_source_split_1152;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    out_$i39 := $sub.i32(out_$i38, 1);
    goto corral_source_split_1151;

  $bb37_dummy:
    call {:si_unique_call 1} out_$i38, out_$i39, out_$i40, out_$i42, out_$i43, out_$i44, out_vslice_dummy_var_25 := stop_iso_gracefull_loop_$bb32(in_$p34, out_$i38, out_$i39, out_$i40, out_$i42, out_$i43, out_$i44, out_vslice_dummy_var_25);
    return;

  exit:
    return;
}



procedure stop_iso_gracefull_loop_$bb32(in_$p34: ref, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$i42: i8, in_$i43: i32, in_$i44: i1, in_vslice_dummy_var_25: i64) returns (out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$i42: i8, out_$i43: i32, out_$i44: i1, out_vslice_dummy_var_25: i64);



implementation stop_iso_gracefull_loop_$bb13(in_$p12: ref, in_$i18: i8, in_$i19: i32, in_$i20: i1, in_$i16: i32, in_$i21: i32, in_$i22: i1, in_vslice_dummy_var_23: i64) returns (out_$i18: i8, out_$i19: i32, out_$i20: i1, out_$i16: i32, out_$i21: i32, out_$i22: i1, out_vslice_dummy_var_23: i64)
{

  entry:
    out_$i18, out_$i19, out_$i20, out_$i16, out_$i21, out_$i22, out_vslice_dummy_var_23 := in_$i18, in_$i19, in_$i20, in_$i16, in_$i21, in_$i22, in_vslice_dummy_var_23;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1112;

  $bb15:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i21;
    goto $bb15_dummy;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_1119;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i8.i32(out_$i18);
    goto corral_source_split_1118;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i8($M.0, in_$p12);
    goto corral_source_split_1117;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} out_vslice_dummy_var_23 := schedule_timeout_interruptible(0);
    goto corral_source_split_1116;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb17:
    assume out_$i22 == 1;
    goto corral_source_split_1123;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i16, 0);
    goto corral_source_split_1114;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    out_$i21 := $sub.i32(out_$i16, 1);
    call {:si_unique_call 122} {:cexpr "timeout"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_1113;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i18, out_$i19, out_$i20, out_$i16, out_$i21, out_$i22, out_vslice_dummy_var_23 := stop_iso_gracefull_loop_$bb13(in_$p12, out_$i18, out_$i19, out_$i20, out_$i16, out_$i21, out_$i22, out_vslice_dummy_var_23);
    return;

  exit:
    return;
}



procedure stop_iso_gracefull_loop_$bb13(in_$p12: ref, in_$i18: i8, in_$i19: i32, in_$i20: i1, in_$i16: i32, in_$i21: i32, in_$i22: i1, in_vslice_dummy_var_23: i64) returns (out_$i18: i8, out_$i19: i32, out_$i20: i1, out_$i16: i32, out_$i21: i32, out_$i22: i1, out_vslice_dummy_var_23: i64);



implementation {:SIextraRecBound 2} setup_instance_loop_$bb7(in_$p0: ref, in_$i54: i32, in_$i55: i64, in_$p58: ref, in_$i59: i32, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i64, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i16, in_$i76: i32, in_$i77: i16, in_$i80: i64, in_$p83: ref, in_$i84: i64, in_$p88: ref, in_$i89: i64, in_$p93: ref, in_$i94: i32, in_$i95: i64, in_$p99: ref, in_$i100: i64, in_$p104: ref, in_$p107: ref, in_$i108: i32, in_$i109: i1, in_$i53: i32, in_vslice_dummy_var_36: i32) returns (out_$i54: i32, out_$i55: i64, out_$p58: ref, out_$i59: i32, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i64, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i16, out_$i76: i32, out_$i77: i16, out_$i80: i64, out_$p83: ref, out_$i84: i64, out_$p88: ref, out_$i89: i64, out_$p93: ref, out_$i94: i32, out_$i95: i64, out_$p99: ref, out_$i100: i64, out_$p104: ref, out_$p107: ref, out_$i108: i32, out_$i109: i1, out_$i53: i32, out_vslice_dummy_var_36: i32)
{

  entry:
    out_$i54, out_$i55, out_$p58, out_$i59, out_$p62, out_$p63, out_$i64, out_$i65, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i80, out_$p83, out_$i84, out_$p88, out_$i89, out_$p93, out_$i94, out_$i95, out_$p99, out_$i100, out_$p104, out_$p107, out_$i108, out_$i109, out_$i53, out_vslice_dummy_var_36 := in_$i54, in_$i55, in_$p58, in_$i59, in_$p62, in_$p63, in_$i64, in_$i65, in_$p68, in_$p69, in_$p70, in_$i71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i80, in_$p83, in_$i84, in_$p88, in_$i89, in_$p93, in_$i94, in_$i95, in_$p99, in_$i100, in_$p104, in_$p107, in_$i108, in_$i109, in_$i53, in_vslice_dummy_var_36;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1519;

  $bb9:
    assume out_$i109 == 1;
    assume {:verifier.code 0} true;
    out_$i53 := out_$i108;
    goto $bb9_dummy;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    out_$i109 := $sle.i32(out_$i108, 1);
    goto corral_source_split_1562;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    out_$i108 := $add.i32(out_$i53, 1);
    call {:si_unique_call 191} {:cexpr "i"} boogie_si_record_i32(out_$i108);
    goto corral_source_split_1561;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} list_add(out_$p104, out_$p107);
    goto corral_source_split_1560;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 9640)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_1559;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 9640)), $mul.ref(2072, 1)), $mul.ref(out_$i100, 504)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1558;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    out_$i100 := $sext.i32.i64(out_$i53);
    goto corral_source_split_1557;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p99, out_$i94);
    goto corral_source_split_1556;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 9640)), $mul.ref(2072, 1)), $mul.ref(out_$i95, 504)), $mul.ref(0, 1)), $mul.ref(20, 1));
    goto corral_source_split_1555;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    out_$i95 := $sext.i32.i64(out_$i53);
    goto corral_source_split_1554;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(out_$i53, 1);
    goto corral_source_split_1553;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p93, hfc_bctrl);
    goto corral_source_split_1552;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 9640)), $mul.ref(2072, 1)), $mul.ref(out_$i89, 504)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_1551;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    out_$i89 := $sext.i32.i64(out_$i53);
    goto corral_source_split_1550;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p88, hfcusb_l2l1B);
    goto corral_source_split_1549;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 9640)), $mul.ref(2072, 1)), $mul.ref(out_$i84, 504)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_1548;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    out_$i84 := $sext.i32.i64(out_$i53);
    goto corral_source_split_1547;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p83, in_$p0);
    goto corral_source_split_1546;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 9640)), $mul.ref(2072, 1)), $mul.ref(out_$i80, 504)), $mul.ref(184, 1));
    goto corral_source_split_1545;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    out_$i80 := $sext.i32.i64(out_$i53);
    goto corral_source_split_1544;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    goto corral_source_split_1543;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} out_vslice_dummy_var_36 := mISDN_initbchannel(out_$p72, 2056, out_$i77);
    goto corral_source_split_1542;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    out_$i77 := $trunc.i32.i16(out_$i76);
    goto corral_source_split_1541;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i16.i32(out_$i75);
    goto corral_source_split_1540;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    out_$i75 := $trunc.i32.i16(out_$i74);
    goto corral_source_split_1539;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    out_$i74 := $ashr.i32(out_$i73, 1);
    goto corral_source_split_1538;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    out_$i73 := $M.6;
    goto corral_source_split_1537;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(out_$p70, $mul.ref(out_$i71, 504));
    goto corral_source_split_1536;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(out_$i53);
    goto corral_source_split_1535;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    out_$p70 := $bitcast.ref.ref(out_$p69);
    goto corral_source_split_1534;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p0, $mul.ref(0, 9640)), $mul.ref(2072, 1));
    goto corral_source_split_1533;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p68, out_$i64);
    goto corral_source_split_1532;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 9640)), $mul.ref(2072, 1)), $mul.ref(out_$i65, 504)), $mul.ref(480, 1));
    goto corral_source_split_1531;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(out_$i53);
    goto corral_source_split_1530;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    out_$i64 := $M.4;
    goto corral_source_split_1529;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} set_channelmap(out_$i59, out_$p63);
    goto corral_source_split_1528;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    out_$p63 := $bitcast.ref.ref(out_$p62);
    goto corral_source_split_1527;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 9640)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_1526;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i32(out_$i53, 1);
    goto corral_source_split_1525;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p58, out_$i54);
    goto corral_source_split_1524;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 9640)), $mul.ref(2072, 1)), $mul.ref(out_$i55, 504)), $mul.ref(80, 1));
    goto corral_source_split_1523;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i53);
    goto corral_source_split_1522;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i53, 1);
    goto corral_source_split_1521;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i54, out_$i55, out_$p58, out_$i59, out_$p62, out_$p63, out_$i64, out_$i65, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i80, out_$p83, out_$i84, out_$p88, out_$i89, out_$p93, out_$i94, out_$i95, out_$p99, out_$i100, out_$p104, out_$p107, out_$i108, out_$i109, out_$i53, out_vslice_dummy_var_36 := setup_instance_loop_$bb7(in_$p0, out_$i54, out_$i55, out_$p58, out_$i59, out_$p62, out_$p63, out_$i64, out_$i65, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i80, out_$p83, out_$i84, out_$p88, out_$i89, out_$p93, out_$i94, out_$i95, out_$p99, out_$i100, out_$p104, out_$p107, out_$i108, out_$i109, out_$i53, out_vslice_dummy_var_36);
    return;

  exit:
    return;
}



procedure setup_instance_loop_$bb7(in_$p0: ref, in_$i54: i32, in_$i55: i64, in_$p58: ref, in_$i59: i32, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i64, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i16, in_$i76: i32, in_$i77: i16, in_$i80: i64, in_$p83: ref, in_$i84: i64, in_$p88: ref, in_$i89: i64, in_$p93: ref, in_$i94: i32, in_$i95: i64, in_$p99: ref, in_$i100: i64, in_$p104: ref, in_$p107: ref, in_$i108: i32, in_$i109: i1, in_$i53: i32, in_vslice_dummy_var_36: i32) returns (out_$i54: i32, out_$i55: i64, out_$p58: ref, out_$i59: i32, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i64, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i16, out_$i76: i32, out_$i77: i16, out_$i80: i64, out_$p83: ref, out_$i84: i64, out_$p88: ref, out_$i89: i64, out_$p93: ref, out_$i94: i32, out_$i95: i64, out_$p99: ref, out_$i100: i64, out_$p104: ref, out_$p107: ref, out_$i108: i32, out_$i109: i1, out_$i53: i32, out_vslice_dummy_var_36: i32);
  modifies $M.0;



implementation main_loop_$bb1(in_$p1: ref, in_$i2: i32, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i32, in_$i7: i1, in_$i8: i32, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i1) returns (out_$i2: i32, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i32, out_$i7: i1, out_$i8: i32, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i1)
{

  entry:
    out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43 := in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 315} out_$i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 316} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i2);
    call {:si_unique_call 317} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i2);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb36_dummy;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb11:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $M.18 := out_$i19;
    call {:si_unique_call 324} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_2057;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i18, 1);
    goto corral_source_split_2056;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    out_$i18 := $M.18;
    goto corral_source_split_2055;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $M.17 := 2;
    call {:si_unique_call 323} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_2054;

  $bb22:
    assume out_$i17 == 1;
    goto corral_source_split_2053;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i16, 0);
    goto corral_source_split_2051;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    out_$i16 := $M.20;
    goto corral_source_split_2050;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $M.20 := out_$i15;
    call {:si_unique_call 322} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_2049;

  SeqInstr_192:
    goto corral_source_split_2048;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} out_$i15 := hfcsusb_probe(out_$p14, in_$p1);
    goto SeqInstr_191;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    out_$p14 := $M.16;
    goto corral_source_split_2047;

  $bb20:
    assume out_$i13 == 1;
    goto corral_source_split_2046;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i12, 1);
    goto corral_source_split_2044;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    out_$i12 := $M.17;
    goto corral_source_split_2043;

  $bb18:
    assume out_$i11 == 1;
    goto corral_source_split_2042;

  $bb13:
    assume out_$i9 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i8, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(out_$i8, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2036:
    assume {:verifier.code 1} true;
    call {:si_unique_call 318} out_$i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 319} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i8);
    call {:si_unique_call 320} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i8);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i7 == 1;
    goto corral_source_split_2036;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    out_$i7 := $ne.i32(out_$i6, 0);
    goto corral_source_split_2034;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    out_$i6 := $M.17;
    goto corral_source_split_2033;

  $bb8:
    assume out_$i5 == 1;
    goto corral_source_split_2032;

  $bb3:
    assume out_$i3 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i3 := $slt.i32(out_$i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $M.18 := out_$i26;
    call {:si_unique_call 327} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_2069;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    out_$i26 := $sub.i32(out_$i25, 1);
    goto corral_source_split_2068;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    out_$i25 := $M.18;
    goto corral_source_split_2067;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 326} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_2066;

  SeqInstr_195:
    goto corral_source_split_2065;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} hfcsusb_disconnect(out_$p24);
    goto SeqInstr_194;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    out_$p24 := $M.16;
    goto corral_source_split_2064;

  $bb30:
    assume out_$i23 == 1;
    goto corral_source_split_2063;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i22, 0);
    goto corral_source_split_2061;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    out_$i22 := $M.21;
    goto corral_source_split_2060;

  $bb27:
    assume out_$i21 == 1;
    goto corral_source_split_2059;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 2);
    goto corral_source_split_2040;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    out_$i20 := $M.17;
    goto corral_source_split_2039;

  $bb15:
    assume out_$i10 == 1;
    goto corral_source_split_2038;

  $bb14:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i8, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i21 == 1);
    goto $bb29;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb29;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} ldv_stop();
    goto corral_source_split_2071;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i10 == 1);
    goto $bb17;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i11 == 1);
    goto $bb17;

  $bb38:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb48:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb49;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb49;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 0);
    goto corral_source_split_2085;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    out_$i35 := $M.18;
    goto corral_source_split_2084;

  $bb47:
    assume out_$i34 == 1;
    goto corral_source_split_2083;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 3);
    goto corral_source_split_2081;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    out_$i33 := $M.19;
    goto corral_source_split_2080;

  $bb45:
    assume out_$i32 == 1;
    goto corral_source_split_2079;

  $bb40:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i29, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i30 := $slt.i32(out_$i29, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_2073:
    assume {:verifier.code 1} true;
    call {:si_unique_call 329} out_$i29 := __VERIFIER_nondet_int();
    call {:si_unique_call 330} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i29);
    call {:si_unique_call 331} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i29);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume out_$i28 == 1;
    goto corral_source_split_2073;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_2030;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    out_$i27 := $M.19;
    goto corral_source_split_2029;

  $bb5:
    assume out_$i4 == 1;
    goto corral_source_split_2028;

  $bb4:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb56:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb61:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i32(out_$i42, 0);
    goto corral_source_split_2103;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i42 := $M.22;
    goto corral_source_split_2102;

  $bb58:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $M.19 := 3;
    call {:si_unique_call 337} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_2100;

  $bb57:
    assume out_$i41 == 1;
    goto corral_source_split_2099;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 0);
    goto corral_source_split_2097;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    out_$i40 := $M.22;
    goto corral_source_split_2096;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $M.22 := out_$i39;
    call {:si_unique_call 336} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_2095;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} out_$i39 := hfcsusb_drv_init();
    goto corral_source_split_2094;

  $bb55:
    assume out_$i38 == 1;
    goto corral_source_split_2093;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 1);
    goto corral_source_split_2077;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    out_$i37 := $M.19;
    goto corral_source_split_2076;

  $bb42:
    assume out_$i31 == 1;
    goto corral_source_split_2075;

  $bb41:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i29, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} ldv_stop();
    goto corral_source_split_2108;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb43:
    assume {:verifier.code 0} true;
    assume !(out_$i31 == 1);
    goto $bb44;

  $bb46:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb44;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} ldv_stop();
    goto corral_source_split_2110;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb6:
    assume {:verifier.code 0} true;
    assume !(out_$i4 == 1);
    goto $bb7;

  $bb9:
    assume {:verifier.code 0} true;
    assume !(out_$i5 == 1);
    goto $bb7;

  $bb36_dummy:
    call {:si_unique_call 1} out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43 := main_loop_$bb1(in_$p1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p1: ref, in_$i2: i32, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i32, in_$i7: i1, in_$i8: i32, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i1) returns (out_$i2: i32, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i32, out_$i7: i1, out_$i8: i32, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i1);
  modifies $M.18, $M.17, $M.20, $M.1, $M.0, $M.3, $CurrAddr, assertsPassed, $M.5, $M.19, $M.22, $M.21, $M.16;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


